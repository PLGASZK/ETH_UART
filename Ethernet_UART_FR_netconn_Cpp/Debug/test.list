
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017830  90000200  90000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004500  90017a30  90017a30  00027a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9001bf30  9001bf30  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  9001bf30  9001bf30  0002bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9001bf38  9001bf38  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9001bf38  9001bf38  0002bf38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  9001bf3c  9001bf3c  0002bf3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  9001bf40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d6b8  20000080  9001bfc0  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d738  9001bfc0  0003d738  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003032c  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007648  00000000  00000000  000603da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e98  00000000  00000000  00067a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d58  00000000  00000000  000698c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d88  00000000  00000000  0006b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034609  00000000  00000000  000803a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b45d  00000000  00000000  000b49a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cfe06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084e4  00000000  00000000  001cfe58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

90000200 <__do_global_dtors_aux>:
90000200:	b510      	push	{r4, lr}
90000202:	4c05      	ldr	r4, [pc, #20]	; (90000218 <__do_global_dtors_aux+0x18>)
90000204:	7823      	ldrb	r3, [r4, #0]
90000206:	b933      	cbnz	r3, 90000216 <__do_global_dtors_aux+0x16>
90000208:	4b04      	ldr	r3, [pc, #16]	; (9000021c <__do_global_dtors_aux+0x1c>)
9000020a:	b113      	cbz	r3, 90000212 <__do_global_dtors_aux+0x12>
9000020c:	4804      	ldr	r0, [pc, #16]	; (90000220 <__do_global_dtors_aux+0x20>)
9000020e:	f3af 8000 	nop.w
90000212:	2301      	movs	r3, #1
90000214:	7023      	strb	r3, [r4, #0]
90000216:	bd10      	pop	{r4, pc}
90000218:	20000080 	.word	0x20000080
9000021c:	00000000 	.word	0x00000000
90000220:	90017a18 	.word	0x90017a18

90000224 <frame_dummy>:
90000224:	b508      	push	{r3, lr}
90000226:	4b03      	ldr	r3, [pc, #12]	; (90000234 <frame_dummy+0x10>)
90000228:	b11b      	cbz	r3, 90000232 <frame_dummy+0xe>
9000022a:	4903      	ldr	r1, [pc, #12]	; (90000238 <frame_dummy+0x14>)
9000022c:	4803      	ldr	r0, [pc, #12]	; (9000023c <frame_dummy+0x18>)
9000022e:	f3af 8000 	nop.w
90000232:	bd08      	pop	{r3, pc}
90000234:	00000000 	.word	0x00000000
90000238:	20000084 	.word	0x20000084
9000023c:	90017a18 	.word	0x90017a18

90000240 <strcmp>:
90000240:	f810 2b01 	ldrb.w	r2, [r0], #1
90000244:	f811 3b01 	ldrb.w	r3, [r1], #1
90000248:	2a01      	cmp	r2, #1
9000024a:	bf28      	it	cs
9000024c:	429a      	cmpcs	r2, r3
9000024e:	d0f7      	beq.n	90000240 <strcmp>
90000250:	1ad0      	subs	r0, r2, r3
90000252:	4770      	bx	lr

90000254 <strlen>:
90000254:	4603      	mov	r3, r0
90000256:	f813 2b01 	ldrb.w	r2, [r3], #1
9000025a:	2a00      	cmp	r2, #0
9000025c:	d1fb      	bne.n	90000256 <strlen+0x2>
9000025e:	1a18      	subs	r0, r3, r0
90000260:	3801      	subs	r0, #1
90000262:	4770      	bx	lr
	...

90000270 <memchr>:
90000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000274:	2a10      	cmp	r2, #16
90000276:	db2b      	blt.n	900002d0 <memchr+0x60>
90000278:	f010 0f07 	tst.w	r0, #7
9000027c:	d008      	beq.n	90000290 <memchr+0x20>
9000027e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000282:	3a01      	subs	r2, #1
90000284:	428b      	cmp	r3, r1
90000286:	d02d      	beq.n	900002e4 <memchr+0x74>
90000288:	f010 0f07 	tst.w	r0, #7
9000028c:	b342      	cbz	r2, 900002e0 <memchr+0x70>
9000028e:	d1f6      	bne.n	9000027e <memchr+0xe>
90000290:	b4f0      	push	{r4, r5, r6, r7}
90000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000029a:	f022 0407 	bic.w	r4, r2, #7
9000029e:	f07f 0700 	mvns.w	r7, #0
900002a2:	2300      	movs	r3, #0
900002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
900002a8:	3c08      	subs	r4, #8
900002aa:	ea85 0501 	eor.w	r5, r5, r1
900002ae:	ea86 0601 	eor.w	r6, r6, r1
900002b2:	fa85 f547 	uadd8	r5, r5, r7
900002b6:	faa3 f587 	sel	r5, r3, r7
900002ba:	fa86 f647 	uadd8	r6, r6, r7
900002be:	faa5 f687 	sel	r6, r5, r7
900002c2:	b98e      	cbnz	r6, 900002e8 <memchr+0x78>
900002c4:	d1ee      	bne.n	900002a4 <memchr+0x34>
900002c6:	bcf0      	pop	{r4, r5, r6, r7}
900002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002cc:	f002 0207 	and.w	r2, r2, #7
900002d0:	b132      	cbz	r2, 900002e0 <memchr+0x70>
900002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
900002d6:	3a01      	subs	r2, #1
900002d8:	ea83 0301 	eor.w	r3, r3, r1
900002dc:	b113      	cbz	r3, 900002e4 <memchr+0x74>
900002de:	d1f8      	bne.n	900002d2 <memchr+0x62>
900002e0:	2000      	movs	r0, #0
900002e2:	4770      	bx	lr
900002e4:	3801      	subs	r0, #1
900002e6:	4770      	bx	lr
900002e8:	2d00      	cmp	r5, #0
900002ea:	bf06      	itte	eq
900002ec:	4635      	moveq	r5, r6
900002ee:	3803      	subeq	r0, #3
900002f0:	3807      	subne	r0, #7
900002f2:	f015 0f01 	tst.w	r5, #1
900002f6:	d107      	bne.n	90000308 <memchr+0x98>
900002f8:	3001      	adds	r0, #1
900002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
900002fe:	bf02      	ittt	eq
90000300:	3001      	addeq	r0, #1
90000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000306:	3001      	addeq	r0, #1
90000308:	bcf0      	pop	{r4, r5, r6, r7}
9000030a:	3801      	subs	r0, #1
9000030c:	4770      	bx	lr
9000030e:	bf00      	nop

90000310 <__aeabi_uldivmod>:
90000310:	b953      	cbnz	r3, 90000328 <__aeabi_uldivmod+0x18>
90000312:	b94a      	cbnz	r2, 90000328 <__aeabi_uldivmod+0x18>
90000314:	2900      	cmp	r1, #0
90000316:	bf08      	it	eq
90000318:	2800      	cmpeq	r0, #0
9000031a:	bf1c      	itt	ne
9000031c:	f04f 31ff 	movne.w	r1, #4294967295
90000320:	f04f 30ff 	movne.w	r0, #4294967295
90000324:	f000 b974 	b.w	90000610 <__aeabi_idiv0>
90000328:	f1ad 0c08 	sub.w	ip, sp, #8
9000032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000330:	f000 f806 	bl	90000340 <__udivmoddi4>
90000334:	f8dd e004 	ldr.w	lr, [sp, #4]
90000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
9000033c:	b004      	add	sp, #16
9000033e:	4770      	bx	lr

90000340 <__udivmoddi4>:
90000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90000344:	9d08      	ldr	r5, [sp, #32]
90000346:	4604      	mov	r4, r0
90000348:	468e      	mov	lr, r1
9000034a:	2b00      	cmp	r3, #0
9000034c:	d14d      	bne.n	900003ea <__udivmoddi4+0xaa>
9000034e:	428a      	cmp	r2, r1
90000350:	4694      	mov	ip, r2
90000352:	d969      	bls.n	90000428 <__udivmoddi4+0xe8>
90000354:	fab2 f282 	clz	r2, r2
90000358:	b152      	cbz	r2, 90000370 <__udivmoddi4+0x30>
9000035a:	fa01 f302 	lsl.w	r3, r1, r2
9000035e:	f1c2 0120 	rsb	r1, r2, #32
90000362:	fa20 f101 	lsr.w	r1, r0, r1
90000366:	fa0c fc02 	lsl.w	ip, ip, r2
9000036a:	ea41 0e03 	orr.w	lr, r1, r3
9000036e:	4094      	lsls	r4, r2
90000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
90000374:	0c21      	lsrs	r1, r4, #16
90000376:	fbbe f6f8 	udiv	r6, lr, r8
9000037a:	fa1f f78c 	uxth.w	r7, ip
9000037e:	fb08 e316 	mls	r3, r8, r6, lr
90000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
90000386:	fb06 f107 	mul.w	r1, r6, r7
9000038a:	4299      	cmp	r1, r3
9000038c:	d90a      	bls.n	900003a4 <__udivmoddi4+0x64>
9000038e:	eb1c 0303 	adds.w	r3, ip, r3
90000392:	f106 30ff 	add.w	r0, r6, #4294967295
90000396:	f080 811f 	bcs.w	900005d8 <__udivmoddi4+0x298>
9000039a:	4299      	cmp	r1, r3
9000039c:	f240 811c 	bls.w	900005d8 <__udivmoddi4+0x298>
900003a0:	3e02      	subs	r6, #2
900003a2:	4463      	add	r3, ip
900003a4:	1a5b      	subs	r3, r3, r1
900003a6:	b2a4      	uxth	r4, r4
900003a8:	fbb3 f0f8 	udiv	r0, r3, r8
900003ac:	fb08 3310 	mls	r3, r8, r0, r3
900003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
900003b4:	fb00 f707 	mul.w	r7, r0, r7
900003b8:	42a7      	cmp	r7, r4
900003ba:	d90a      	bls.n	900003d2 <__udivmoddi4+0x92>
900003bc:	eb1c 0404 	adds.w	r4, ip, r4
900003c0:	f100 33ff 	add.w	r3, r0, #4294967295
900003c4:	f080 810a 	bcs.w	900005dc <__udivmoddi4+0x29c>
900003c8:	42a7      	cmp	r7, r4
900003ca:	f240 8107 	bls.w	900005dc <__udivmoddi4+0x29c>
900003ce:	4464      	add	r4, ip
900003d0:	3802      	subs	r0, #2
900003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
900003d6:	1be4      	subs	r4, r4, r7
900003d8:	2600      	movs	r6, #0
900003da:	b11d      	cbz	r5, 900003e4 <__udivmoddi4+0xa4>
900003dc:	40d4      	lsrs	r4, r2
900003de:	2300      	movs	r3, #0
900003e0:	e9c5 4300 	strd	r4, r3, [r5]
900003e4:	4631      	mov	r1, r6
900003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003ea:	428b      	cmp	r3, r1
900003ec:	d909      	bls.n	90000402 <__udivmoddi4+0xc2>
900003ee:	2d00      	cmp	r5, #0
900003f0:	f000 80ef 	beq.w	900005d2 <__udivmoddi4+0x292>
900003f4:	2600      	movs	r6, #0
900003f6:	e9c5 0100 	strd	r0, r1, [r5]
900003fa:	4630      	mov	r0, r6
900003fc:	4631      	mov	r1, r6
900003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000402:	fab3 f683 	clz	r6, r3
90000406:	2e00      	cmp	r6, #0
90000408:	d14a      	bne.n	900004a0 <__udivmoddi4+0x160>
9000040a:	428b      	cmp	r3, r1
9000040c:	d302      	bcc.n	90000414 <__udivmoddi4+0xd4>
9000040e:	4282      	cmp	r2, r0
90000410:	f200 80f9 	bhi.w	90000606 <__udivmoddi4+0x2c6>
90000414:	1a84      	subs	r4, r0, r2
90000416:	eb61 0303 	sbc.w	r3, r1, r3
9000041a:	2001      	movs	r0, #1
9000041c:	469e      	mov	lr, r3
9000041e:	2d00      	cmp	r5, #0
90000420:	d0e0      	beq.n	900003e4 <__udivmoddi4+0xa4>
90000422:	e9c5 4e00 	strd	r4, lr, [r5]
90000426:	e7dd      	b.n	900003e4 <__udivmoddi4+0xa4>
90000428:	b902      	cbnz	r2, 9000042c <__udivmoddi4+0xec>
9000042a:	deff      	udf	#255	; 0xff
9000042c:	fab2 f282 	clz	r2, r2
90000430:	2a00      	cmp	r2, #0
90000432:	f040 8092 	bne.w	9000055a <__udivmoddi4+0x21a>
90000436:	eba1 010c 	sub.w	r1, r1, ip
9000043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
9000043e:	fa1f fe8c 	uxth.w	lr, ip
90000442:	2601      	movs	r6, #1
90000444:	0c20      	lsrs	r0, r4, #16
90000446:	fbb1 f3f7 	udiv	r3, r1, r7
9000044a:	fb07 1113 	mls	r1, r7, r3, r1
9000044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
90000452:	fb0e f003 	mul.w	r0, lr, r3
90000456:	4288      	cmp	r0, r1
90000458:	d908      	bls.n	9000046c <__udivmoddi4+0x12c>
9000045a:	eb1c 0101 	adds.w	r1, ip, r1
9000045e:	f103 38ff 	add.w	r8, r3, #4294967295
90000462:	d202      	bcs.n	9000046a <__udivmoddi4+0x12a>
90000464:	4288      	cmp	r0, r1
90000466:	f200 80cb 	bhi.w	90000600 <__udivmoddi4+0x2c0>
9000046a:	4643      	mov	r3, r8
9000046c:	1a09      	subs	r1, r1, r0
9000046e:	b2a4      	uxth	r4, r4
90000470:	fbb1 f0f7 	udiv	r0, r1, r7
90000474:	fb07 1110 	mls	r1, r7, r0, r1
90000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
9000047c:	fb0e fe00 	mul.w	lr, lr, r0
90000480:	45a6      	cmp	lr, r4
90000482:	d908      	bls.n	90000496 <__udivmoddi4+0x156>
90000484:	eb1c 0404 	adds.w	r4, ip, r4
90000488:	f100 31ff 	add.w	r1, r0, #4294967295
9000048c:	d202      	bcs.n	90000494 <__udivmoddi4+0x154>
9000048e:	45a6      	cmp	lr, r4
90000490:	f200 80bb 	bhi.w	9000060a <__udivmoddi4+0x2ca>
90000494:	4608      	mov	r0, r1
90000496:	eba4 040e 	sub.w	r4, r4, lr
9000049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
9000049e:	e79c      	b.n	900003da <__udivmoddi4+0x9a>
900004a0:	f1c6 0720 	rsb	r7, r6, #32
900004a4:	40b3      	lsls	r3, r6
900004a6:	fa22 fc07 	lsr.w	ip, r2, r7
900004aa:	ea4c 0c03 	orr.w	ip, ip, r3
900004ae:	fa20 f407 	lsr.w	r4, r0, r7
900004b2:	fa01 f306 	lsl.w	r3, r1, r6
900004b6:	431c      	orrs	r4, r3
900004b8:	40f9      	lsrs	r1, r7
900004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
900004be:	fa00 f306 	lsl.w	r3, r0, r6
900004c2:	fbb1 f8f9 	udiv	r8, r1, r9
900004c6:	0c20      	lsrs	r0, r4, #16
900004c8:	fa1f fe8c 	uxth.w	lr, ip
900004cc:	fb09 1118 	mls	r1, r9, r8, r1
900004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
900004d4:	fb08 f00e 	mul.w	r0, r8, lr
900004d8:	4288      	cmp	r0, r1
900004da:	fa02 f206 	lsl.w	r2, r2, r6
900004de:	d90b      	bls.n	900004f8 <__udivmoddi4+0x1b8>
900004e0:	eb1c 0101 	adds.w	r1, ip, r1
900004e4:	f108 3aff 	add.w	sl, r8, #4294967295
900004e8:	f080 8088 	bcs.w	900005fc <__udivmoddi4+0x2bc>
900004ec:	4288      	cmp	r0, r1
900004ee:	f240 8085 	bls.w	900005fc <__udivmoddi4+0x2bc>
900004f2:	f1a8 0802 	sub.w	r8, r8, #2
900004f6:	4461      	add	r1, ip
900004f8:	1a09      	subs	r1, r1, r0
900004fa:	b2a4      	uxth	r4, r4
900004fc:	fbb1 f0f9 	udiv	r0, r1, r9
90000500:	fb09 1110 	mls	r1, r9, r0, r1
90000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
90000508:	fb00 fe0e 	mul.w	lr, r0, lr
9000050c:	458e      	cmp	lr, r1
9000050e:	d908      	bls.n	90000522 <__udivmoddi4+0x1e2>
90000510:	eb1c 0101 	adds.w	r1, ip, r1
90000514:	f100 34ff 	add.w	r4, r0, #4294967295
90000518:	d26c      	bcs.n	900005f4 <__udivmoddi4+0x2b4>
9000051a:	458e      	cmp	lr, r1
9000051c:	d96a      	bls.n	900005f4 <__udivmoddi4+0x2b4>
9000051e:	3802      	subs	r0, #2
90000520:	4461      	add	r1, ip
90000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
90000526:	fba0 9402 	umull	r9, r4, r0, r2
9000052a:	eba1 010e 	sub.w	r1, r1, lr
9000052e:	42a1      	cmp	r1, r4
90000530:	46c8      	mov	r8, r9
90000532:	46a6      	mov	lr, r4
90000534:	d356      	bcc.n	900005e4 <__udivmoddi4+0x2a4>
90000536:	d053      	beq.n	900005e0 <__udivmoddi4+0x2a0>
90000538:	b15d      	cbz	r5, 90000552 <__udivmoddi4+0x212>
9000053a:	ebb3 0208 	subs.w	r2, r3, r8
9000053e:	eb61 010e 	sbc.w	r1, r1, lr
90000542:	fa01 f707 	lsl.w	r7, r1, r7
90000546:	fa22 f306 	lsr.w	r3, r2, r6
9000054a:	40f1      	lsrs	r1, r6
9000054c:	431f      	orrs	r7, r3
9000054e:	e9c5 7100 	strd	r7, r1, [r5]
90000552:	2600      	movs	r6, #0
90000554:	4631      	mov	r1, r6
90000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000055a:	f1c2 0320 	rsb	r3, r2, #32
9000055e:	40d8      	lsrs	r0, r3
90000560:	fa0c fc02 	lsl.w	ip, ip, r2
90000564:	fa21 f303 	lsr.w	r3, r1, r3
90000568:	4091      	lsls	r1, r2
9000056a:	4301      	orrs	r1, r0
9000056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000570:	fa1f fe8c 	uxth.w	lr, ip
90000574:	fbb3 f0f7 	udiv	r0, r3, r7
90000578:	fb07 3610 	mls	r6, r7, r0, r3
9000057c:	0c0b      	lsrs	r3, r1, #16
9000057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90000582:	fb00 f60e 	mul.w	r6, r0, lr
90000586:	429e      	cmp	r6, r3
90000588:	fa04 f402 	lsl.w	r4, r4, r2
9000058c:	d908      	bls.n	900005a0 <__udivmoddi4+0x260>
9000058e:	eb1c 0303 	adds.w	r3, ip, r3
90000592:	f100 38ff 	add.w	r8, r0, #4294967295
90000596:	d22f      	bcs.n	900005f8 <__udivmoddi4+0x2b8>
90000598:	429e      	cmp	r6, r3
9000059a:	d92d      	bls.n	900005f8 <__udivmoddi4+0x2b8>
9000059c:	3802      	subs	r0, #2
9000059e:	4463      	add	r3, ip
900005a0:	1b9b      	subs	r3, r3, r6
900005a2:	b289      	uxth	r1, r1
900005a4:	fbb3 f6f7 	udiv	r6, r3, r7
900005a8:	fb07 3316 	mls	r3, r7, r6, r3
900005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900005b0:	fb06 f30e 	mul.w	r3, r6, lr
900005b4:	428b      	cmp	r3, r1
900005b6:	d908      	bls.n	900005ca <__udivmoddi4+0x28a>
900005b8:	eb1c 0101 	adds.w	r1, ip, r1
900005bc:	f106 38ff 	add.w	r8, r6, #4294967295
900005c0:	d216      	bcs.n	900005f0 <__udivmoddi4+0x2b0>
900005c2:	428b      	cmp	r3, r1
900005c4:	d914      	bls.n	900005f0 <__udivmoddi4+0x2b0>
900005c6:	3e02      	subs	r6, #2
900005c8:	4461      	add	r1, ip
900005ca:	1ac9      	subs	r1, r1, r3
900005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
900005d0:	e738      	b.n	90000444 <__udivmoddi4+0x104>
900005d2:	462e      	mov	r6, r5
900005d4:	4628      	mov	r0, r5
900005d6:	e705      	b.n	900003e4 <__udivmoddi4+0xa4>
900005d8:	4606      	mov	r6, r0
900005da:	e6e3      	b.n	900003a4 <__udivmoddi4+0x64>
900005dc:	4618      	mov	r0, r3
900005de:	e6f8      	b.n	900003d2 <__udivmoddi4+0x92>
900005e0:	454b      	cmp	r3, r9
900005e2:	d2a9      	bcs.n	90000538 <__udivmoddi4+0x1f8>
900005e4:	ebb9 0802 	subs.w	r8, r9, r2
900005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
900005ec:	3801      	subs	r0, #1
900005ee:	e7a3      	b.n	90000538 <__udivmoddi4+0x1f8>
900005f0:	4646      	mov	r6, r8
900005f2:	e7ea      	b.n	900005ca <__udivmoddi4+0x28a>
900005f4:	4620      	mov	r0, r4
900005f6:	e794      	b.n	90000522 <__udivmoddi4+0x1e2>
900005f8:	4640      	mov	r0, r8
900005fa:	e7d1      	b.n	900005a0 <__udivmoddi4+0x260>
900005fc:	46d0      	mov	r8, sl
900005fe:	e77b      	b.n	900004f8 <__udivmoddi4+0x1b8>
90000600:	3b02      	subs	r3, #2
90000602:	4461      	add	r1, ip
90000604:	e732      	b.n	9000046c <__udivmoddi4+0x12c>
90000606:	4630      	mov	r0, r6
90000608:	e709      	b.n	9000041e <__udivmoddi4+0xde>
9000060a:	4464      	add	r4, ip
9000060c:	3802      	subs	r0, #2
9000060e:	e742      	b.n	90000496 <__udivmoddi4+0x156>

90000610 <__aeabi_idiv0>:
90000610:	4770      	bx	lr
90000612:	bf00      	nop

90000614 <http_server>:
#include "stm32f7xx_hal_uart.h"

extern char *read_data;

static void http_server(struct netconn *conn)
{
90000614:	b580      	push	{r7, lr}
90000616:	b08e      	sub	sp, #56	; 0x38
90000618:	af02      	add	r7, sp, #8
9000061a:	6078      	str	r0, [r7, #4]
	u16_t buflen;
	struct fs_file file;


	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
9000061c:	f107 0328 	add.w	r3, r7, #40	; 0x28
90000620:	4619      	mov	r1, r3
90000622:	6878      	ldr	r0, [r7, #4]
90000624:	f009 f92e 	bl	90009884 <netconn_recv>
90000628:	4603      	mov	r3, r0
9000062a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (recv_err == ERR_OK)
9000062e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
90000632:	2b00      	cmp	r3, #0
90000634:	d175      	bne.n	90000722 <http_server+0x10e>
	{
		if (netconn_err(conn) == ERR_OK)
90000636:	6878      	ldr	r0, [r7, #4]
90000638:	f009 faad 	bl	90009b96 <netconn_err>
9000063c:	4603      	mov	r3, r0
9000063e:	2b00      	cmp	r3, #0
90000640:	d16f      	bne.n	90000722 <http_server+0x10e>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
90000642:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000644:	f107 0222 	add.w	r2, r7, #34	; 0x22
90000648:	f107 0124 	add.w	r1, r7, #36	; 0x24
9000064c:	4618      	mov	r0, r3
9000064e:	f00a feb3 	bl	9000b3b8 <netbuf_data>

			/* Check if request to get the index.html */
            if (strncmp((char const *)buf,"GET /index.html",15)==0)
90000652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90000654:	220f      	movs	r2, #15
90000656:	4938      	ldr	r1, [pc, #224]	; (90000738 <http_server+0x124>)
90000658:	4618      	mov	r0, r3
9000065a:	f016 fc04 	bl	90016e66 <strncmp>
9000065e:	4603      	mov	r3, r0
90000660:	2b00      	cmp	r3, #0
90000662:	d12f      	bne.n	900006c4 <http_server+0xb0>
            {
                fs_open(&file, "/index.html");
90000664:	f107 030c 	add.w	r3, r7, #12
90000668:	4934      	ldr	r1, [pc, #208]	; (9000073c <http_server+0x128>)
9000066a:	4618      	mov	r0, r3
9000066c:	f00b f8a6 	bl	9000b7bc <fs_open>
                // mem alloc for read data
                read_data = (char*)malloc(file.len + 1); // +1 for null term
90000670:	693b      	ldr	r3, [r7, #16]
90000672:	3301      	adds	r3, #1
90000674:	4618      	mov	r0, r3
90000676:	f016 f9cd 	bl	90016a14 <malloc>
9000067a:	4603      	mov	r3, r0
9000067c:	461a      	mov	r2, r3
9000067e:	4b30      	ldr	r3, [pc, #192]	; (90000740 <http_server+0x12c>)
90000680:	601a      	str	r2, [r3, #0]
                if (read_data != NULL)
90000682:	4b2f      	ldr	r3, [pc, #188]	; (90000740 <http_server+0x12c>)
90000684:	681b      	ldr	r3, [r3, #0]
90000686:	2b00      	cmp	r3, #0
90000688:	d016      	beq.n	900006b8 <http_server+0xa4>
                {
                    memcpy(read_data, file.data, file.len);
9000068a:	4b2d      	ldr	r3, [pc, #180]	; (90000740 <http_server+0x12c>)
9000068c:	681b      	ldr	r3, [r3, #0]
9000068e:	68f9      	ldr	r1, [r7, #12]
90000690:	693a      	ldr	r2, [r7, #16]
90000692:	4618      	mov	r0, r3
90000694:	f016 f9de 	bl	90016a54 <memcpy>
                    read_data[file.len] = '\0'; // add null term at the end
90000698:	4b29      	ldr	r3, [pc, #164]	; (90000740 <http_server+0x12c>)
9000069a:	681b      	ldr	r3, [r3, #0]
9000069c:	693a      	ldr	r2, [r7, #16]
9000069e:	4413      	add	r3, r2
900006a0:	2200      	movs	r2, #0
900006a2:	701a      	strb	r2, [r3, #0]
                    // send the data to client
                    netconn_write(conn, (const unsigned char*)read_data, (size_t)file.len, NETCONN_NOCOPY);
900006a4:	4b26      	ldr	r3, [pc, #152]	; (90000740 <http_server+0x12c>)
900006a6:	6819      	ldr	r1, [r3, #0]
900006a8:	693b      	ldr	r3, [r7, #16]
900006aa:	461a      	mov	r2, r3
900006ac:	2300      	movs	r3, #0
900006ae:	9300      	str	r3, [sp, #0]
900006b0:	2300      	movs	r3, #0
900006b2:	6878      	ldr	r0, [r7, #4]
900006b4:	f009 f960 	bl	90009978 <netconn_write_partly>
                }
                fs_close(&file);
900006b8:	f107 030c 	add.w	r3, r7, #12
900006bc:	4618      	mov	r0, r3
900006be:	f00b f8bb 	bl	9000b838 <fs_close>
900006c2:	e02e      	b.n	90000722 <http_server+0x10e>
                //free(read_data);// flaga ze zmienilem dane
            }
            else
            {
                /* Load Error page */
                fs_open(&file, "/404.html");
900006c4:	f107 030c 	add.w	r3, r7, #12
900006c8:	491e      	ldr	r1, [pc, #120]	; (90000744 <http_server+0x130>)
900006ca:	4618      	mov	r0, r3
900006cc:	f00b f876 	bl	9000b7bc <fs_open>
                //  "404.html"
                read_data = (char*)malloc(file.len + 1);
900006d0:	693b      	ldr	r3, [r7, #16]
900006d2:	3301      	adds	r3, #1
900006d4:	4618      	mov	r0, r3
900006d6:	f016 f99d 	bl	90016a14 <malloc>
900006da:	4603      	mov	r3, r0
900006dc:	461a      	mov	r2, r3
900006de:	4b18      	ldr	r3, [pc, #96]	; (90000740 <http_server+0x12c>)
900006e0:	601a      	str	r2, [r3, #0]
                if (read_data != NULL)
900006e2:	4b17      	ldr	r3, [pc, #92]	; (90000740 <http_server+0x12c>)
900006e4:	681b      	ldr	r3, [r3, #0]
900006e6:	2b00      	cmp	r3, #0
900006e8:	d016      	beq.n	90000718 <http_server+0x104>
                {
                    memcpy(read_data, file.data, file.len);
900006ea:	4b15      	ldr	r3, [pc, #84]	; (90000740 <http_server+0x12c>)
900006ec:	681b      	ldr	r3, [r3, #0]
900006ee:	68f9      	ldr	r1, [r7, #12]
900006f0:	693a      	ldr	r2, [r7, #16]
900006f2:	4618      	mov	r0, r3
900006f4:	f016 f9ae 	bl	90016a54 <memcpy>
                    read_data[file.len] = '\0';
900006f8:	4b11      	ldr	r3, [pc, #68]	; (90000740 <http_server+0x12c>)
900006fa:	681b      	ldr	r3, [r3, #0]
900006fc:	693a      	ldr	r2, [r7, #16]
900006fe:	4413      	add	r3, r2
90000700:	2200      	movs	r2, #0
90000702:	701a      	strb	r2, [r3, #0]
                    netconn_write(conn, (const unsigned char*)read_data, (size_t)file.len, NETCONN_NOCOPY);
90000704:	4b0e      	ldr	r3, [pc, #56]	; (90000740 <http_server+0x12c>)
90000706:	6819      	ldr	r1, [r3, #0]
90000708:	693b      	ldr	r3, [r7, #16]
9000070a:	461a      	mov	r2, r3
9000070c:	2300      	movs	r3, #0
9000070e:	9300      	str	r3, [sp, #0]
90000710:	2300      	movs	r3, #0
90000712:	6878      	ldr	r0, [r7, #4]
90000714:	f009 f930 	bl	90009978 <netconn_write_partly>
                }
                fs_close(&file);
90000718:	f107 030c 	add.w	r3, r7, #12
9000071c:	4618      	mov	r0, r3
9000071e:	f00b f88b 	bl	9000b838 <fs_close>
                //free(read_data);
            }
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
90000722:	6878      	ldr	r0, [r7, #4]
90000724:	f009 fa2a 	bl	90009b7c <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
90000728:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000072a:	4618      	mov	r0, r3
9000072c:	f00a fe24 	bl	9000b378 <netbuf_delete>
}
90000730:	bf00      	nop
90000732:	3730      	adds	r7, #48	; 0x30
90000734:	46bd      	mov	sp, r7
90000736:	bd80      	pop	{r7, pc}
90000738:	90017a30 	.word	0x90017a30
9000073c:	90017a40 	.word	0x90017a40
90000740:	2000009c 	.word	0x2000009c
90000744:	90017a4c 	.word	0x90017a4c

90000748 <http_thread>:



static void http_thread(void *arg)
{ 
90000748:	b580      	push	{r7, lr}
9000074a:	b086      	sub	sp, #24
9000074c:	af00      	add	r7, sp, #0
9000074e:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
90000750:	2200      	movs	r2, #0
90000752:	2100      	movs	r1, #0
90000754:	2010      	movs	r0, #16
90000756:	f008 fd6f 	bl	90009238 <netconn_new_with_proto_and_callback>
9000075a:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
9000075c:	697b      	ldr	r3, [r7, #20]
9000075e:	2b00      	cmp	r3, #0
90000760:	d023      	beq.n	900007aa <http_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
90000762:	2250      	movs	r2, #80	; 0x50
90000764:	4913      	ldr	r1, [pc, #76]	; (900007b4 <http_thread+0x6c>)
90000766:	6978      	ldr	r0, [r7, #20]
90000768:	f008 fe20 	bl	900093ac <netconn_bind>
9000076c:	4603      	mov	r3, r0
9000076e:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
90000770:	f997 3013 	ldrsb.w	r3, [r7, #19]
90000774:	2b00      	cmp	r3, #0
90000776:	d118      	bne.n	900007aa <http_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
90000778:	21ff      	movs	r1, #255	; 0xff
9000077a:	6978      	ldr	r0, [r7, #20]
9000077c:	f008 fe4e 	bl	9000941c <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
90000780:	f107 030c 	add.w	r3, r7, #12
90000784:	4619      	mov	r1, r3
90000786:	6978      	ldr	r0, [r7, #20]
90000788:	f008 fe74 	bl	90009474 <netconn_accept>
9000078c:	4603      	mov	r3, r0
9000078e:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
90000790:	f997 3012 	ldrsb.w	r3, [r7, #18]
90000794:	2b00      	cmp	r3, #0
90000796:	d1f3      	bne.n	90000780 <http_thread+0x38>
        {
          /* serve connection */
          http_server(newconn);
90000798:	68fb      	ldr	r3, [r7, #12]
9000079a:	4618      	mov	r0, r3
9000079c:	f7ff ff3a 	bl	90000614 <http_server>

          /* delete connection */
          netconn_delete(newconn);
900007a0:	68fb      	ldr	r3, [r7, #12]
900007a2:	4618      	mov	r0, r3
900007a4:	f008 fde6 	bl	90009374 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
900007a8:	e7ea      	b.n	90000780 <http_thread+0x38>
        }
      }
    }
  }
}
900007aa:	bf00      	nop
900007ac:	3718      	adds	r7, #24
900007ae:	46bd      	mov	sp, r7
900007b0:	bd80      	pop	{r7, pc}
900007b2:	bf00      	nop
900007b4:	9001bdd4 	.word	0x9001bdd4

900007b8 <http_server_init>:




void http_server_init()
{
900007b8:	b580      	push	{r7, lr}
900007ba:	b082      	sub	sp, #8
900007bc:	af02      	add	r7, sp, #8
  sys_thread_new("http_thread", http_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
900007be:	2318      	movs	r3, #24
900007c0:	9300      	str	r3, [sp, #0]
900007c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
900007c6:	2200      	movs	r2, #0
900007c8:	4903      	ldr	r1, [pc, #12]	; (900007d8 <http_server_init+0x20>)
900007ca:	4804      	ldr	r0, [pc, #16]	; (900007dc <http_server_init+0x24>)
900007cc:	f015 ffc2 	bl	90016754 <sys_thread_new>
}
900007d0:	bf00      	nop
900007d2:	46bd      	mov	sp, r7
900007d4:	bd80      	pop	{r7, pc}
900007d6:	bf00      	nop
900007d8:	90000749 	.word	0x90000749
900007dc:	90017a58 	.word	0x90017a58

900007e0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
900007e0:	b480      	push	{r7}
900007e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
900007e4:	f3bf 8f4f 	dsb	sy
}
900007e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900007ea:	f3bf 8f6f 	isb	sy
}
900007ee:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900007f0:	4b0d      	ldr	r3, [pc, #52]	; (90000828 <SCB_EnableICache+0x48>)
900007f2:	2200      	movs	r2, #0
900007f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900007f8:	f3bf 8f4f 	dsb	sy
}
900007fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900007fe:	f3bf 8f6f 	isb	sy
}
90000802:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000804:	4b08      	ldr	r3, [pc, #32]	; (90000828 <SCB_EnableICache+0x48>)
90000806:	695b      	ldr	r3, [r3, #20]
90000808:	4a07      	ldr	r2, [pc, #28]	; (90000828 <SCB_EnableICache+0x48>)
9000080a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000080e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000810:	f3bf 8f4f 	dsb	sy
}
90000814:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000816:	f3bf 8f6f 	isb	sy
}
9000081a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
9000081c:	bf00      	nop
9000081e:	46bd      	mov	sp, r7
90000820:	f85d 7b04 	ldr.w	r7, [sp], #4
90000824:	4770      	bx	lr
90000826:	bf00      	nop
90000828:	e000ed00 	.word	0xe000ed00

9000082c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
9000082c:	b480      	push	{r7}
9000082e:	b085      	sub	sp, #20
90000830:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
90000832:	4b25      	ldr	r3, [pc, #148]	; (900008c8 <SCB_EnableDCache+0x9c>)
90000834:	2200      	movs	r2, #0
90000836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
9000083a:	f3bf 8f4f 	dsb	sy
}
9000083e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000840:	4b21      	ldr	r3, [pc, #132]	; (900008c8 <SCB_EnableDCache+0x9c>)
90000842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000846:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000848:	687b      	ldr	r3, [r7, #4]
9000084a:	0b5b      	lsrs	r3, r3, #13
9000084c:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000850:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000852:	687b      	ldr	r3, [r7, #4]
90000854:	08db      	lsrs	r3, r3, #3
90000856:	f3c3 0309 	ubfx	r3, r3, #0, #10
9000085a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000085c:	68fb      	ldr	r3, [r7, #12]
9000085e:	015a      	lsls	r2, r3, #5
90000860:	f643 73e0 	movw	r3, #16352	; 0x3fe0
90000864:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000866:	68ba      	ldr	r2, [r7, #8]
90000868:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000086a:	4917      	ldr	r1, [pc, #92]	; (900008c8 <SCB_EnableDCache+0x9c>)
9000086c:	4313      	orrs	r3, r2
9000086e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000872:	68bb      	ldr	r3, [r7, #8]
90000874:	1e5a      	subs	r2, r3, #1
90000876:	60ba      	str	r2, [r7, #8]
90000878:	2b00      	cmp	r3, #0
9000087a:	bf14      	ite	ne
9000087c:	2301      	movne	r3, #1
9000087e:	2300      	moveq	r3, #0
90000880:	b2db      	uxtb	r3, r3
90000882:	2b00      	cmp	r3, #0
90000884:	d000      	beq.n	90000888 <SCB_EnableDCache+0x5c>
      do {
90000886:	e7e9      	b.n	9000085c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
90000888:	68fb      	ldr	r3, [r7, #12]
9000088a:	1e5a      	subs	r2, r3, #1
9000088c:	60fa      	str	r2, [r7, #12]
9000088e:	2b00      	cmp	r3, #0
90000890:	bf14      	ite	ne
90000892:	2301      	movne	r3, #1
90000894:	2300      	moveq	r3, #0
90000896:	b2db      	uxtb	r3, r3
90000898:	2b00      	cmp	r3, #0
9000089a:	d000      	beq.n	9000089e <SCB_EnableDCache+0x72>
    do {
9000089c:	e7d9      	b.n	90000852 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
9000089e:	f3bf 8f4f 	dsb	sy
}
900008a2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900008a4:	4b08      	ldr	r3, [pc, #32]	; (900008c8 <SCB_EnableDCache+0x9c>)
900008a6:	695b      	ldr	r3, [r3, #20]
900008a8:	4a07      	ldr	r2, [pc, #28]	; (900008c8 <SCB_EnableDCache+0x9c>)
900008aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900008ae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900008b0:	f3bf 8f4f 	dsb	sy
}
900008b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900008b6:	f3bf 8f6f 	isb	sy
}
900008ba:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
900008bc:	bf00      	nop
900008be:	3714      	adds	r7, #20
900008c0:	46bd      	mov	sp, r7
900008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900008c6:	4770      	bx	lr
900008c8:	e000ed00 	.word	0xe000ed00

900008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
900008cc:	b580      	push	{r7, lr}
900008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
900008d0:	f000 f984 	bl	90000bdc <_ZL10MPU_Configv>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
900008d4:	f7ff ff84 	bl	900007e0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
900008d8:	f7ff ffa8 	bl	9000082c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
900008dc:	f000 fb8c 	bl	90000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
900008e0:	f000 f82a 	bl	90000938 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
900008e4:	f000 f8da 	bl	90000a9c <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
900008e8:	f004 fc58 	bl	9000519c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
900008ec:	4a0b      	ldr	r2, [pc, #44]	; (9000091c <main+0x50>)
900008ee:	2100      	movs	r1, #0
900008f0:	480b      	ldr	r0, [pc, #44]	; (90000920 <main+0x54>)
900008f2:	f004 fce5 	bl	900052c0 <osThreadNew>
900008f6:	4603      	mov	r3, r0
900008f8:	4a0a      	ldr	r2, [pc, #40]	; (90000924 <main+0x58>)
900008fa:	6013      	str	r3, [r2, #0]

  /* creation of TaskUART01 */
  TaskUART01Handle = osThreadNew(StartTask02, NULL, &TaskUART01_attributes);
900008fc:	4a0a      	ldr	r2, [pc, #40]	; (90000928 <main+0x5c>)
900008fe:	2100      	movs	r1, #0
90000900:	480a      	ldr	r0, [pc, #40]	; (9000092c <main+0x60>)
90000902:	f004 fcdd 	bl	900052c0 <osThreadNew>
90000906:	4603      	mov	r3, r0
90000908:	4a09      	ldr	r2, [pc, #36]	; (90000930 <main+0x64>)
9000090a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
9000090c:	f004 fc7a 	bl	90005204 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_WritePin( GPIOB,  GPIO_PIN_0, GPIO_PIN_SET);
90000910:	2201      	movs	r2, #1
90000912:	2101      	movs	r1, #1
90000914:	4807      	ldr	r0, [pc, #28]	; (90000934 <main+0x68>)
90000916:	f002 f89f 	bl	90002a58 <HAL_GPIO_WritePin>
9000091a:	e7f9      	b.n	90000910 <main+0x44>
9000091c:	9001afc8 	.word	0x9001afc8
90000920:	90000b79 	.word	0x90000b79
90000924:	20000124 	.word	0x20000124
90000928:	9001afec 	.word	0x9001afec
9000092c:	90000bcd 	.word	0x90000bcd
90000930:	20000128 	.word	0x20000128
90000934:	40020400 	.word	0x40020400

90000938 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90000938:	b580      	push	{r7, lr}
9000093a:	b094      	sub	sp, #80	; 0x50
9000093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
9000093e:	f107 031c 	add.w	r3, r7, #28
90000942:	2234      	movs	r2, #52	; 0x34
90000944:	2100      	movs	r1, #0
90000946:	4618      	mov	r0, r3
90000948:	f016 f892 	bl	90016a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
9000094c:	f107 0308 	add.w	r3, r7, #8
90000950:	2200      	movs	r2, #0
90000952:	601a      	str	r2, [r3, #0]
90000954:	605a      	str	r2, [r3, #4]
90000956:	609a      	str	r2, [r3, #8]
90000958:	60da      	str	r2, [r3, #12]
9000095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
9000095c:	4b33      	ldr	r3, [pc, #204]	; (90000a2c <_Z18SystemClock_Configv+0xf4>)
9000095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000960:	4a32      	ldr	r2, [pc, #200]	; (90000a2c <_Z18SystemClock_Configv+0xf4>)
90000962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000966:	6413      	str	r3, [r2, #64]	; 0x40
90000968:	4b30      	ldr	r3, [pc, #192]	; (90000a2c <_Z18SystemClock_Configv+0xf4>)
9000096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90000970:	607b      	str	r3, [r7, #4]
90000972:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000974:	4b2e      	ldr	r3, [pc, #184]	; (90000a30 <_Z18SystemClock_Configv+0xf8>)
90000976:	681b      	ldr	r3, [r3, #0]
90000978:	4a2d      	ldr	r2, [pc, #180]	; (90000a30 <_Z18SystemClock_Configv+0xf8>)
9000097a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
9000097e:	6013      	str	r3, [r2, #0]
90000980:	4b2b      	ldr	r3, [pc, #172]	; (90000a30 <_Z18SystemClock_Configv+0xf8>)
90000982:	681b      	ldr	r3, [r3, #0]
90000984:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90000988:	603b      	str	r3, [r7, #0]
9000098a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
9000098c:	2302      	movs	r3, #2
9000098e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
90000990:	2301      	movs	r3, #1
90000992:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
90000994:	2310      	movs	r3, #16
90000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000998:	2302      	movs	r3, #2
9000099a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
9000099c:	2300      	movs	r3, #0
9000099e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
900009a0:	2308      	movs	r3, #8
900009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
900009a4:	23d8      	movs	r3, #216	; 0xd8
900009a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
900009a8:	2302      	movs	r3, #2
900009aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
900009ac:	2302      	movs	r3, #2
900009ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
900009b0:	2302      	movs	r3, #2
900009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900009b4:	f107 031c 	add.w	r3, r7, #28
900009b8:	4618      	mov	r0, r3
900009ba:	f002 f8b7 	bl	90002b2c <HAL_RCC_OscConfig>
900009be:	4603      	mov	r3, r0
900009c0:	2b00      	cmp	r3, #0
900009c2:	bf14      	ite	ne
900009c4:	2301      	movne	r3, #1
900009c6:	2300      	moveq	r3, #0
900009c8:	b2db      	uxtb	r3, r3
900009ca:	2b00      	cmp	r3, #0
900009cc:	d001      	beq.n	900009d2 <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
900009ce:	f000 f94a 	bl	90000c66 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
900009d2:	f002 f85b 	bl	90002a8c <HAL_PWREx_EnableOverDrive>
900009d6:	4603      	mov	r3, r0
900009d8:	2b00      	cmp	r3, #0
900009da:	bf14      	ite	ne
900009dc:	2301      	movne	r3, #1
900009de:	2300      	moveq	r3, #0
900009e0:	b2db      	uxtb	r3, r3
900009e2:	2b00      	cmp	r3, #0
900009e4:	d001      	beq.n	900009ea <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
900009e6:	f000 f93e 	bl	90000c66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900009ea:	230f      	movs	r3, #15
900009ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900009ee:	2302      	movs	r3, #2
900009f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
900009f2:	2300      	movs	r3, #0
900009f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
900009f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
900009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
900009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000a00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
90000a02:	f107 0308 	add.w	r3, r7, #8
90000a06:	2107      	movs	r1, #7
90000a08:	4618      	mov	r0, r3
90000a0a:	f002 fb3d 	bl	90003088 <HAL_RCC_ClockConfig>
90000a0e:	4603      	mov	r3, r0
90000a10:	2b00      	cmp	r3, #0
90000a12:	bf14      	ite	ne
90000a14:	2301      	movne	r3, #1
90000a16:	2300      	moveq	r3, #0
90000a18:	b2db      	uxtb	r3, r3
90000a1a:	2b00      	cmp	r3, #0
90000a1c:	d001      	beq.n	90000a22 <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
90000a1e:	f000 f922 	bl	90000c66 <Error_Handler>
  }
}
90000a22:	bf00      	nop
90000a24:	3750      	adds	r7, #80	; 0x50
90000a26:	46bd      	mov	sp, r7
90000a28:	bd80      	pop	{r7, pc}
90000a2a:	bf00      	nop
90000a2c:	40023800 	.word	0x40023800
90000a30:	40007000 	.word	0x40007000

90000a34 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
90000a34:	b580      	push	{r7, lr}
90000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
90000a38:	4b16      	ldr	r3, [pc, #88]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a3a:	4a17      	ldr	r2, [pc, #92]	; (90000a98 <_ZL19MX_USART3_UART_Initv+0x64>)
90000a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000a3e:	4b15      	ldr	r3, [pc, #84]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
90000a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000a46:	4b13      	ldr	r3, [pc, #76]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a48:	2200      	movs	r2, #0
90000a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000a4c:	4b11      	ldr	r3, [pc, #68]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a4e:	2200      	movs	r2, #0
90000a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000a52:	4b10      	ldr	r3, [pc, #64]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a54:	2200      	movs	r2, #0
90000a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000a58:	4b0e      	ldr	r3, [pc, #56]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a5a:	220c      	movs	r2, #12
90000a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000a5e:	4b0d      	ldr	r3, [pc, #52]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a60:	2200      	movs	r2, #0
90000a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000a64:	4b0b      	ldr	r3, [pc, #44]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a66:	2200      	movs	r2, #0
90000a68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000a6a:	4b0a      	ldr	r3, [pc, #40]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a6c:	2200      	movs	r2, #0
90000a6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000a70:	4b08      	ldr	r3, [pc, #32]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a72:	2200      	movs	r2, #0
90000a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000a76:	4807      	ldr	r0, [pc, #28]	; (90000a94 <_ZL19MX_USART3_UART_Initv+0x60>)
90000a78:	f003 f914 	bl	90003ca4 <HAL_UART_Init>
90000a7c:	4603      	mov	r3, r0
90000a7e:	2b00      	cmp	r3, #0
90000a80:	bf14      	ite	ne
90000a82:	2301      	movne	r3, #1
90000a84:	2300      	moveq	r3, #0
90000a86:	b2db      	uxtb	r3, r3
90000a88:	2b00      	cmp	r3, #0
90000a8a:	d001      	beq.n	90000a90 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
90000a8c:	f000 f8eb 	bl	90000c66 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
90000a90:	bf00      	nop
90000a92:	bd80      	pop	{r7, pc}
90000a94:	200000a0 	.word	0x200000a0
90000a98:	40004800 	.word	0x40004800

90000a9c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
90000a9c:	b580      	push	{r7, lr}
90000a9e:	b08c      	sub	sp, #48	; 0x30
90000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000aa2:	f107 031c 	add.w	r3, r7, #28
90000aa6:	2200      	movs	r2, #0
90000aa8:	601a      	str	r2, [r3, #0]
90000aaa:	605a      	str	r2, [r3, #4]
90000aac:	609a      	str	r2, [r3, #8]
90000aae:	60da      	str	r2, [r3, #12]
90000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000ab2:	4b2f      	ldr	r3, [pc, #188]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ab6:	4a2e      	ldr	r2, [pc, #184]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000abc:	6313      	str	r3, [r2, #48]	; 0x30
90000abe:	4b2c      	ldr	r3, [pc, #176]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
90000ac6:	61bb      	str	r3, [r7, #24]
90000ac8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000aca:	4b29      	ldr	r3, [pc, #164]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ace:	4a28      	ldr	r2, [pc, #160]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000ad0:	f043 0304 	orr.w	r3, r3, #4
90000ad4:	6313      	str	r3, [r2, #48]	; 0x30
90000ad6:	4b26      	ldr	r3, [pc, #152]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ada:	f003 0304 	and.w	r3, r3, #4
90000ade:	617b      	str	r3, [r7, #20]
90000ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
90000ae2:	4b23      	ldr	r3, [pc, #140]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ae6:	4a22      	ldr	r2, [pc, #136]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000ae8:	f043 0301 	orr.w	r3, r3, #1
90000aec:	6313      	str	r3, [r2, #48]	; 0x30
90000aee:	4b20      	ldr	r3, [pc, #128]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000af2:	f003 0301 	and.w	r3, r3, #1
90000af6:	613b      	str	r3, [r7, #16]
90000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
90000afa:	4b1d      	ldr	r3, [pc, #116]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000afe:	4a1c      	ldr	r2, [pc, #112]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000b00:	f043 0302 	orr.w	r3, r3, #2
90000b04:	6313      	str	r3, [r2, #48]	; 0x30
90000b06:	4b1a      	ldr	r3, [pc, #104]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b0a:	f003 0302 	and.w	r3, r3, #2
90000b0e:	60fb      	str	r3, [r7, #12]
90000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90000b12:	4b17      	ldr	r3, [pc, #92]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b16:	4a16      	ldr	r2, [pc, #88]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000b18:	f043 0308 	orr.w	r3, r3, #8
90000b1c:	6313      	str	r3, [r2, #48]	; 0x30
90000b1e:	4b14      	ldr	r3, [pc, #80]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b22:	f003 0308 	and.w	r3, r3, #8
90000b26:	60bb      	str	r3, [r7, #8]
90000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90000b2a:	4b11      	ldr	r3, [pc, #68]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b2e:	4a10      	ldr	r2, [pc, #64]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90000b34:	6313      	str	r3, [r2, #48]	; 0x30
90000b36:	4b0e      	ldr	r3, [pc, #56]	; (90000b70 <_ZL12MX_GPIO_Initv+0xd4>)
90000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
90000b3e:	607b      	str	r3, [r7, #4]
90000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
90000b42:	2200      	movs	r2, #0
90000b44:	2101      	movs	r1, #1
90000b46:	480b      	ldr	r0, [pc, #44]	; (90000b74 <_ZL12MX_GPIO_Initv+0xd8>)
90000b48:	f001 ff86 	bl	90002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
90000b4c:	2301      	movs	r3, #1
90000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000b50:	2301      	movs	r3, #1
90000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b54:	2300      	movs	r3, #0
90000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b58:	2300      	movs	r3, #0
90000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000b5c:	f107 031c 	add.w	r3, r7, #28
90000b60:	4619      	mov	r1, r3
90000b62:	4804      	ldr	r0, [pc, #16]	; (90000b74 <_ZL12MX_GPIO_Initv+0xd8>)
90000b64:	f001 fdcc 	bl	90002700 <HAL_GPIO_Init>

}
90000b68:	bf00      	nop
90000b6a:	3730      	adds	r7, #48	; 0x30
90000b6c:	46bd      	mov	sp, r7
90000b6e:	bd80      	pop	{r7, pc}
90000b70:	40023800 	.word	0x40023800
90000b74:	40020400 	.word	0x40020400

90000b78 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
90000b78:	b590      	push	{r4, r7, lr}
90000b7a:	b083      	sub	sp, #12
90000b7c:	af00      	add	r7, sp, #0
90000b7e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
90000b80:	f003 fd86 	bl	90004690 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  MX_USART3_UART_Init();
90000b84:	f7ff ff56 	bl	90000a34 <_ZL19MX_USART3_UART_Initv>
  http_server_init();
90000b88:	f7ff fe16 	bl	900007b8 <http_server_init>
  HAL_UART_Transmit(&huart3, (const uint8_t *)read_data, strlen(read_data), 5000  );
90000b8c:	4b0d      	ldr	r3, [pc, #52]	; (90000bc4 <_Z16StartDefaultTaskPv+0x4c>)
90000b8e:	681c      	ldr	r4, [r3, #0]
90000b90:	4b0c      	ldr	r3, [pc, #48]	; (90000bc4 <_Z16StartDefaultTaskPv+0x4c>)
90000b92:	681b      	ldr	r3, [r3, #0]
90000b94:	4618      	mov	r0, r3
90000b96:	f7ff fb5d 	bl	90000254 <strlen>
90000b9a:	4603      	mov	r3, r0
90000b9c:	b29a      	uxth	r2, r3
90000b9e:	f241 3388 	movw	r3, #5000	; 0x1388
90000ba2:	4621      	mov	r1, r4
90000ba4:	4808      	ldr	r0, [pc, #32]	; (90000bc8 <_Z16StartDefaultTaskPv+0x50>)
90000ba6:	f003 f8cb 	bl	90003d40 <HAL_UART_Transmit>
  delete[] read_data;
90000baa:	4b06      	ldr	r3, [pc, #24]	; (90000bc4 <_Z16StartDefaultTaskPv+0x4c>)
90000bac:	681b      	ldr	r3, [r3, #0]
90000bae:	2b00      	cmp	r3, #0
90000bb0:	d004      	beq.n	90000bbc <_Z16StartDefaultTaskPv+0x44>
90000bb2:	4b04      	ldr	r3, [pc, #16]	; (90000bc4 <_Z16StartDefaultTaskPv+0x4c>)
90000bb4:	681b      	ldr	r3, [r3, #0]
90000bb6:	4618      	mov	r0, r3
90000bb8:	f015 fe0a 	bl	900167d0 <_ZdaPv>
  //free(read_data);
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
90000bbc:	2001      	movs	r0, #1
90000bbe:	f004 fc25 	bl	9000540c <osDelay>
90000bc2:	e7fb      	b.n	90000bbc <_Z16StartDefaultTaskPv+0x44>
90000bc4:	2000009c 	.word	0x2000009c
90000bc8:	200000a0 	.word	0x200000a0

90000bcc <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
90000bcc:	b580      	push	{r7, lr}
90000bce:	b082      	sub	sp, #8
90000bd0:	af00      	add	r7, sp, #0
90000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
  //HAL_UART_Transmit(&huart3, txt, sizeof(txt),Tmeout );
    osDelay(1);
90000bd4:	2001      	movs	r0, #1
90000bd6:	f004 fc19 	bl	9000540c <osDelay>
90000bda:	e7fb      	b.n	90000bd4 <_Z11StartTask02Pv+0x8>

90000bdc <_ZL10MPU_Configv>:
}

/* MPU Configuration */

void MPU_Config(void)
{
90000bdc:	b580      	push	{r7, lr}
90000bde:	b084      	sub	sp, #16
90000be0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90000be2:	463b      	mov	r3, r7
90000be4:	2200      	movs	r2, #0
90000be6:	601a      	str	r2, [r3, #0]
90000be8:	605a      	str	r2, [r3, #4]
90000bea:	609a      	str	r2, [r3, #8]
90000bec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
90000bee:	f000 fb9f 	bl	90001330 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000bf2:	2301      	movs	r3, #1
90000bf4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
90000bf6:	2300      	movs	r3, #0
90000bf8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
90000bfa:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
90000bfe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
90000c00:	231c      	movs	r3, #28
90000c02:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
90000c04:	2300      	movs	r3, #0
90000c06:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000c08:	2300      	movs	r3, #0
90000c0a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90000c0c:	2300      	movs	r3, #0
90000c0e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
90000c10:	2301      	movs	r3, #1
90000c12:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000c14:	2300      	movs	r3, #0
90000c16:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90000c18:	2300      	movs	r3, #0
90000c1a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000c1c:	2300      	movs	r3, #0
90000c1e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000c20:	463b      	mov	r3, r7
90000c22:	4618      	mov	r0, r3
90000c24:	f000 fbbc 	bl	900013a0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000c28:	2301      	movs	r3, #1
90000c2a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
90000c2c:	2317      	movs	r3, #23
90000c2e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000c30:	2303      	movs	r3, #3
90000c32:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000c34:	2301      	movs	r3, #1
90000c36:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
90000c38:	2301      	movs	r3, #1
90000c3a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000c3c:	463b      	mov	r3, r7
90000c3e:	4618      	mov	r0, r3
90000c40:	f000 fbae 	bl	900013a0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90000c44:	2302      	movs	r3, #2
90000c46:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
90000c48:	2313      	movs	r3, #19
90000c4a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000c4c:	2300      	movs	r3, #0
90000c4e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000c50:	463b      	mov	r3, r7
90000c52:	4618      	mov	r0, r3
90000c54:	f000 fba4 	bl	900013a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000c58:	2004      	movs	r0, #4
90000c5a:	f000 fb81 	bl	90001360 <HAL_MPU_Enable>

}
90000c5e:	bf00      	nop
90000c60:	3710      	adds	r7, #16
90000c62:	46bd      	mov	sp, r7
90000c64:	bd80      	pop	{r7, pc}

90000c66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90000c66:	b480      	push	{r7}
90000c68:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
90000c6a:	b672      	cpsid	i
}
90000c6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90000c6e:	e7fe      	b.n	90000c6e <Error_Handler+0x8>

90000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90000c70:	b580      	push	{r7, lr}
90000c72:	b082      	sub	sp, #8
90000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
90000c76:	4b11      	ldr	r3, [pc, #68]	; (90000cbc <HAL_MspInit+0x4c>)
90000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000c7a:	4a10      	ldr	r2, [pc, #64]	; (90000cbc <HAL_MspInit+0x4c>)
90000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000c80:	6413      	str	r3, [r2, #64]	; 0x40
90000c82:	4b0e      	ldr	r3, [pc, #56]	; (90000cbc <HAL_MspInit+0x4c>)
90000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90000c8a:	607b      	str	r3, [r7, #4]
90000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000c8e:	4b0b      	ldr	r3, [pc, #44]	; (90000cbc <HAL_MspInit+0x4c>)
90000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90000c92:	4a0a      	ldr	r2, [pc, #40]	; (90000cbc <HAL_MspInit+0x4c>)
90000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90000c98:	6453      	str	r3, [r2, #68]	; 0x44
90000c9a:	4b08      	ldr	r3, [pc, #32]	; (90000cbc <HAL_MspInit+0x4c>)
90000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90000ca2:	603b      	str	r3, [r7, #0]
90000ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90000ca6:	2200      	movs	r2, #0
90000ca8:	210f      	movs	r1, #15
90000caa:	f06f 0001 	mvn.w	r0, #1
90000cae:	f000 fb08 	bl	900012c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90000cb2:	bf00      	nop
90000cb4:	3708      	adds	r7, #8
90000cb6:	46bd      	mov	sp, r7
90000cb8:	bd80      	pop	{r7, pc}
90000cba:	bf00      	nop
90000cbc:	40023800 	.word	0x40023800

90000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
90000cc0:	b580      	push	{r7, lr}
90000cc2:	b0ae      	sub	sp, #184	; 0xb8
90000cc4:	af00      	add	r7, sp, #0
90000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000cc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
90000ccc:	2200      	movs	r2, #0
90000cce:	601a      	str	r2, [r3, #0]
90000cd0:	605a      	str	r2, [r3, #4]
90000cd2:	609a      	str	r2, [r3, #8]
90000cd4:	60da      	str	r2, [r3, #12]
90000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000cd8:	f107 0314 	add.w	r3, r7, #20
90000cdc:	2290      	movs	r2, #144	; 0x90
90000cde:	2100      	movs	r1, #0
90000ce0:	4618      	mov	r0, r3
90000ce2:	f015 fec5 	bl	90016a70 <memset>
  if(huart->Instance==USART3)
90000ce6:	687b      	ldr	r3, [r7, #4]
90000ce8:	681b      	ldr	r3, [r3, #0]
90000cea:	4a22      	ldr	r2, [pc, #136]	; (90000d74 <HAL_UART_MspInit+0xb4>)
90000cec:	4293      	cmp	r3, r2
90000cee:	d13c      	bne.n	90000d6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
90000cf4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
90000cf6:	2300      	movs	r3, #0
90000cf8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000cfa:	f107 0314 	add.w	r3, r7, #20
90000cfe:	4618      	mov	r0, r3
90000d00:	f002 fba8 	bl	90003454 <HAL_RCCEx_PeriphCLKConfig>
90000d04:	4603      	mov	r3, r0
90000d06:	2b00      	cmp	r3, #0
90000d08:	d001      	beq.n	90000d0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
90000d0a:	f7ff ffac 	bl	90000c66 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000d0e:	4b1a      	ldr	r3, [pc, #104]	; (90000d78 <HAL_UART_MspInit+0xb8>)
90000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000d12:	4a19      	ldr	r2, [pc, #100]	; (90000d78 <HAL_UART_MspInit+0xb8>)
90000d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90000d18:	6413      	str	r3, [r2, #64]	; 0x40
90000d1a:	4b17      	ldr	r3, [pc, #92]	; (90000d78 <HAL_UART_MspInit+0xb8>)
90000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90000d22:	613b      	str	r3, [r7, #16]
90000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
90000d26:	4b14      	ldr	r3, [pc, #80]	; (90000d78 <HAL_UART_MspInit+0xb8>)
90000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000d2a:	4a13      	ldr	r2, [pc, #76]	; (90000d78 <HAL_UART_MspInit+0xb8>)
90000d2c:	f043 0308 	orr.w	r3, r3, #8
90000d30:	6313      	str	r3, [r2, #48]	; 0x30
90000d32:	4b11      	ldr	r3, [pc, #68]	; (90000d78 <HAL_UART_MspInit+0xb8>)
90000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000d36:	f003 0308 	and.w	r3, r3, #8
90000d3a:	60fb      	str	r3, [r7, #12]
90000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
90000d3e:	f44f 7340 	mov.w	r3, #768	; 0x300
90000d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d46:	2302      	movs	r3, #2
90000d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d4c:	2300      	movs	r3, #0
90000d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d52:	2303      	movs	r3, #3
90000d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000d58:	2307      	movs	r3, #7
90000d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90000d5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
90000d62:	4619      	mov	r1, r3
90000d64:	4805      	ldr	r0, [pc, #20]	; (90000d7c <HAL_UART_MspInit+0xbc>)
90000d66:	f001 fccb 	bl	90002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
90000d6a:	bf00      	nop
90000d6c:	37b8      	adds	r7, #184	; 0xb8
90000d6e:	46bd      	mov	sp, r7
90000d70:	bd80      	pop	{r7, pc}
90000d72:	bf00      	nop
90000d74:	40004800 	.word	0x40004800
90000d78:	40023800 	.word	0x40023800
90000d7c:	40020c00 	.word	0x40020c00

90000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90000d80:	b480      	push	{r7}
90000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
90000d84:	e7fe      	b.n	90000d84 <NMI_Handler+0x4>

90000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
90000d86:	b480      	push	{r7}
90000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90000d8a:	e7fe      	b.n	90000d8a <HardFault_Handler+0x4>

90000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90000d8c:	b480      	push	{r7}
90000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90000d90:	e7fe      	b.n	90000d90 <MemManage_Handler+0x4>

90000d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
90000d92:	b480      	push	{r7}
90000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90000d96:	e7fe      	b.n	90000d96 <BusFault_Handler+0x4>

90000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90000d98:	b480      	push	{r7}
90000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90000d9c:	e7fe      	b.n	90000d9c <UsageFault_Handler+0x4>

90000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90000d9e:	b480      	push	{r7}
90000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90000da2:	bf00      	nop
90000da4:	46bd      	mov	sp, r7
90000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000daa:	4770      	bx	lr

90000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
90000dac:	b580      	push	{r7, lr}
90000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
90000db0:	f000 f968 	bl	90001084 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
90000db4:	f007 f8c6 	bl	90007f44 <xTaskGetSchedulerState>
90000db8:	4603      	mov	r3, r0
90000dba:	2b01      	cmp	r3, #1
90000dbc:	d001      	beq.n	90000dc2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
90000dbe:	f007 ffa3 	bl	90008d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
90000dc2:	bf00      	nop
90000dc4:	bd80      	pop	{r7, pc}
	...

90000dc8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
90000dc8:	b580      	push	{r7, lr}
90000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
90000dcc:	4802      	ldr	r0, [pc, #8]	; (90000dd8 <ETH_IRQHandler+0x10>)
90000dce:	f000 ff09 	bl	90001be4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
90000dd2:	bf00      	nop
90000dd4:	bd80      	pop	{r7, pc}
90000dd6:	bf00      	nop
90000dd8:	20003254 	.word	0x20003254

90000ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
90000ddc:	b480      	push	{r7}
90000dde:	af00      	add	r7, sp, #0
	return 1;
90000de0:	2301      	movs	r3, #1
}
90000de2:	4618      	mov	r0, r3
90000de4:	46bd      	mov	sp, r7
90000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000dea:	4770      	bx	lr

90000dec <_kill>:

int _kill(int pid, int sig)
{
90000dec:	b480      	push	{r7}
90000dee:	b083      	sub	sp, #12
90000df0:	af00      	add	r7, sp, #0
90000df2:	6078      	str	r0, [r7, #4]
90000df4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
90000df6:	4b05      	ldr	r3, [pc, #20]	; (90000e0c <_kill+0x20>)
90000df8:	2216      	movs	r2, #22
90000dfa:	601a      	str	r2, [r3, #0]
	return -1;
90000dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
90000e00:	4618      	mov	r0, r3
90000e02:	370c      	adds	r7, #12
90000e04:	46bd      	mov	sp, r7
90000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e0a:	4770      	bx	lr
90000e0c:	2000d734 	.word	0x2000d734

90000e10 <_exit>:

void _exit (int status)
{
90000e10:	b580      	push	{r7, lr}
90000e12:	b082      	sub	sp, #8
90000e14:	af00      	add	r7, sp, #0
90000e16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
90000e18:	f04f 31ff 	mov.w	r1, #4294967295
90000e1c:	6878      	ldr	r0, [r7, #4]
90000e1e:	f7ff ffe5 	bl	90000dec <_kill>
	while (1) {}		/* Make sure we hang here */
90000e22:	e7fe      	b.n	90000e22 <_exit+0x12>

90000e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000e24:	b580      	push	{r7, lr}
90000e26:	b086      	sub	sp, #24
90000e28:	af00      	add	r7, sp, #0
90000e2a:	60f8      	str	r0, [r7, #12]
90000e2c:	60b9      	str	r1, [r7, #8]
90000e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000e30:	2300      	movs	r3, #0
90000e32:	617b      	str	r3, [r7, #20]
90000e34:	e00a      	b.n	90000e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
90000e36:	f3af 8000 	nop.w
90000e3a:	4601      	mov	r1, r0
90000e3c:	68bb      	ldr	r3, [r7, #8]
90000e3e:	1c5a      	adds	r2, r3, #1
90000e40:	60ba      	str	r2, [r7, #8]
90000e42:	b2ca      	uxtb	r2, r1
90000e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000e46:	697b      	ldr	r3, [r7, #20]
90000e48:	3301      	adds	r3, #1
90000e4a:	617b      	str	r3, [r7, #20]
90000e4c:	697a      	ldr	r2, [r7, #20]
90000e4e:	687b      	ldr	r3, [r7, #4]
90000e50:	429a      	cmp	r2, r3
90000e52:	dbf0      	blt.n	90000e36 <_read+0x12>
	}

return len;
90000e54:	687b      	ldr	r3, [r7, #4]
}
90000e56:	4618      	mov	r0, r3
90000e58:	3718      	adds	r7, #24
90000e5a:	46bd      	mov	sp, r7
90000e5c:	bd80      	pop	{r7, pc}

90000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90000e5e:	b580      	push	{r7, lr}
90000e60:	b086      	sub	sp, #24
90000e62:	af00      	add	r7, sp, #0
90000e64:	60f8      	str	r0, [r7, #12]
90000e66:	60b9      	str	r1, [r7, #8]
90000e68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000e6a:	2300      	movs	r3, #0
90000e6c:	617b      	str	r3, [r7, #20]
90000e6e:	e009      	b.n	90000e84 <_write+0x26>
	{
		__io_putchar(*ptr++);
90000e70:	68bb      	ldr	r3, [r7, #8]
90000e72:	1c5a      	adds	r2, r3, #1
90000e74:	60ba      	str	r2, [r7, #8]
90000e76:	781b      	ldrb	r3, [r3, #0]
90000e78:	4618      	mov	r0, r3
90000e7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000e7e:	697b      	ldr	r3, [r7, #20]
90000e80:	3301      	adds	r3, #1
90000e82:	617b      	str	r3, [r7, #20]
90000e84:	697a      	ldr	r2, [r7, #20]
90000e86:	687b      	ldr	r3, [r7, #4]
90000e88:	429a      	cmp	r2, r3
90000e8a:	dbf1      	blt.n	90000e70 <_write+0x12>
	}
	return len;
90000e8c:	687b      	ldr	r3, [r7, #4]
}
90000e8e:	4618      	mov	r0, r3
90000e90:	3718      	adds	r7, #24
90000e92:	46bd      	mov	sp, r7
90000e94:	bd80      	pop	{r7, pc}

90000e96 <_close>:

int _close(int file)
{
90000e96:	b480      	push	{r7}
90000e98:	b083      	sub	sp, #12
90000e9a:	af00      	add	r7, sp, #0
90000e9c:	6078      	str	r0, [r7, #4]
	return -1;
90000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
90000ea2:	4618      	mov	r0, r3
90000ea4:	370c      	adds	r7, #12
90000ea6:	46bd      	mov	sp, r7
90000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000eac:	4770      	bx	lr

90000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
90000eae:	b480      	push	{r7}
90000eb0:	b083      	sub	sp, #12
90000eb2:	af00      	add	r7, sp, #0
90000eb4:	6078      	str	r0, [r7, #4]
90000eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
90000eb8:	683b      	ldr	r3, [r7, #0]
90000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
90000ebe:	605a      	str	r2, [r3, #4]
	return 0;
90000ec0:	2300      	movs	r3, #0
}
90000ec2:	4618      	mov	r0, r3
90000ec4:	370c      	adds	r7, #12
90000ec6:	46bd      	mov	sp, r7
90000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ecc:	4770      	bx	lr

90000ece <_isatty>:

int _isatty(int file)
{
90000ece:	b480      	push	{r7}
90000ed0:	b083      	sub	sp, #12
90000ed2:	af00      	add	r7, sp, #0
90000ed4:	6078      	str	r0, [r7, #4]
	return 1;
90000ed6:	2301      	movs	r3, #1
}
90000ed8:	4618      	mov	r0, r3
90000eda:	370c      	adds	r7, #12
90000edc:	46bd      	mov	sp, r7
90000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ee2:	4770      	bx	lr

90000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90000ee4:	b480      	push	{r7}
90000ee6:	b085      	sub	sp, #20
90000ee8:	af00      	add	r7, sp, #0
90000eea:	60f8      	str	r0, [r7, #12]
90000eec:	60b9      	str	r1, [r7, #8]
90000eee:	607a      	str	r2, [r7, #4]
	return 0;
90000ef0:	2300      	movs	r3, #0
}
90000ef2:	4618      	mov	r0, r3
90000ef4:	3714      	adds	r7, #20
90000ef6:	46bd      	mov	sp, r7
90000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000efc:	4770      	bx	lr
	...

90000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90000f00:	b480      	push	{r7}
90000f02:	b087      	sub	sp, #28
90000f04:	af00      	add	r7, sp, #0
90000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90000f08:	4a14      	ldr	r2, [pc, #80]	; (90000f5c <_sbrk+0x5c>)
90000f0a:	4b15      	ldr	r3, [pc, #84]	; (90000f60 <_sbrk+0x60>)
90000f0c:	1ad3      	subs	r3, r2, r3
90000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90000f10:	697b      	ldr	r3, [r7, #20]
90000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90000f14:	4b13      	ldr	r3, [pc, #76]	; (90000f64 <_sbrk+0x64>)
90000f16:	681b      	ldr	r3, [r3, #0]
90000f18:	2b00      	cmp	r3, #0
90000f1a:	d102      	bne.n	90000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90000f1c:	4b11      	ldr	r3, [pc, #68]	; (90000f64 <_sbrk+0x64>)
90000f1e:	4a12      	ldr	r2, [pc, #72]	; (90000f68 <_sbrk+0x68>)
90000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90000f22:	4b10      	ldr	r3, [pc, #64]	; (90000f64 <_sbrk+0x64>)
90000f24:	681a      	ldr	r2, [r3, #0]
90000f26:	687b      	ldr	r3, [r7, #4]
90000f28:	4413      	add	r3, r2
90000f2a:	693a      	ldr	r2, [r7, #16]
90000f2c:	429a      	cmp	r2, r3
90000f2e:	d205      	bcs.n	90000f3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
90000f30:	4b0e      	ldr	r3, [pc, #56]	; (90000f6c <_sbrk+0x6c>)
90000f32:	220c      	movs	r2, #12
90000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90000f36:	f04f 33ff 	mov.w	r3, #4294967295
90000f3a:	e009      	b.n	90000f50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
90000f3c:	4b09      	ldr	r3, [pc, #36]	; (90000f64 <_sbrk+0x64>)
90000f3e:	681b      	ldr	r3, [r3, #0]
90000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90000f42:	4b08      	ldr	r3, [pc, #32]	; (90000f64 <_sbrk+0x64>)
90000f44:	681a      	ldr	r2, [r3, #0]
90000f46:	687b      	ldr	r3, [r7, #4]
90000f48:	4413      	add	r3, r2
90000f4a:	4a06      	ldr	r2, [pc, #24]	; (90000f64 <_sbrk+0x64>)
90000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90000f4e:	68fb      	ldr	r3, [r7, #12]
}
90000f50:	4618      	mov	r0, r3
90000f52:	371c      	adds	r7, #28
90000f54:	46bd      	mov	sp, r7
90000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f5a:	4770      	bx	lr
90000f5c:	20080000 	.word	0x20080000
90000f60:	00000400 	.word	0x00000400
90000f64:	2000012c 	.word	0x2000012c
90000f68:	2000d738 	.word	0x2000d738
90000f6c:	2000d734 	.word	0x2000d734

90000f70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
90000f70:	b480      	push	{r7}
90000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90000f74:	4b09      	ldr	r3, [pc, #36]	; (90000f9c <SystemInit+0x2c>)
90000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90000f7a:	4a08      	ldr	r2, [pc, #32]	; (90000f9c <SystemInit+0x2c>)
90000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC -> CFGR =0;
90000f84:	4b06      	ldr	r3, [pc, #24]	; (90000fa0 <SystemInit+0x30>)
90000f86:	2200      	movs	r2, #0
90000f88:	609a      	str	r2, [r3, #8]
  SCB -> VTOR = 0x90000000;
90000f8a:	4b04      	ldr	r3, [pc, #16]	; (90000f9c <SystemInit+0x2c>)
90000f8c:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90000f90:	609a      	str	r2, [r3, #8]
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
90000f92:	bf00      	nop
90000f94:	46bd      	mov	sp, r7
90000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f9a:	4770      	bx	lr
90000f9c:	e000ed00 	.word	0xe000ed00
90000fa0:	40023800 	.word	0x40023800

90000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 90000fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
90000fa8:	480d      	ldr	r0, [pc, #52]	; (90000fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
90000faa:	490e      	ldr	r1, [pc, #56]	; (90000fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
90000fac:	4a0e      	ldr	r2, [pc, #56]	; (90000fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
90000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000fb0:	e002      	b.n	90000fb8 <LoopCopyDataInit>

90000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000fb6:	3304      	adds	r3, #4

90000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000fbc:	d3f9      	bcc.n	90000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000fbe:	4a0b      	ldr	r2, [pc, #44]	; (90000fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
90000fc0:	4c0b      	ldr	r4, [pc, #44]	; (90000ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
90000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
90000fc4:	e001      	b.n	90000fca <LoopFillZerobss>

90000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000fc8:	3204      	adds	r2, #4

90000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000fcc:	d3fb      	bcc.n	90000fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
90000fce:	f7ff ffcf 	bl	90000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
90000fd2:	f015 fcf7 	bl	900169c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000fd6:	f7ff fc79 	bl	900008cc <main>
  bx  lr    
90000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000fdc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
90000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000fe4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
90000fe8:	9001bf40 	.word	0x9001bf40
  ldr r2, =_sbss
90000fec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
90000ff0:	2000d738 	.word	0x2000d738

90000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000ff4:	e7fe      	b.n	90000ff4 <ADC_IRQHandler>
	...

90000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90000ff8:	b580      	push	{r7, lr}
90000ffa:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
90000ffc:	4b08      	ldr	r3, [pc, #32]	; (90001020 <HAL_Init+0x28>)
90000ffe:	681b      	ldr	r3, [r3, #0]
90001000:	4a07      	ldr	r2, [pc, #28]	; (90001020 <HAL_Init+0x28>)
90001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90001008:	2003      	movs	r0, #3
9000100a:	f000 f94f 	bl	900012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
9000100e:	200f      	movs	r0, #15
90001010:	f000 f808 	bl	90001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
90001014:	f7ff fe2c 	bl	90000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90001018:	2300      	movs	r3, #0
}
9000101a:	4618      	mov	r0, r3
9000101c:	bd80      	pop	{r7, pc}
9000101e:	bf00      	nop
90001020:	40023c00 	.word	0x40023c00

90001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90001024:	b580      	push	{r7, lr}
90001026:	b082      	sub	sp, #8
90001028:	af00      	add	r7, sp, #0
9000102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
9000102c:	4b12      	ldr	r3, [pc, #72]	; (90001078 <HAL_InitTick+0x54>)
9000102e:	681a      	ldr	r2, [r3, #0]
90001030:	4b12      	ldr	r3, [pc, #72]	; (9000107c <HAL_InitTick+0x58>)
90001032:	781b      	ldrb	r3, [r3, #0]
90001034:	4619      	mov	r1, r3
90001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
9000103a:	fbb3 f3f1 	udiv	r3, r3, r1
9000103e:	fbb2 f3f3 	udiv	r3, r2, r3
90001042:	4618      	mov	r0, r3
90001044:	f000 f967 	bl	90001316 <HAL_SYSTICK_Config>
90001048:	4603      	mov	r3, r0
9000104a:	2b00      	cmp	r3, #0
9000104c:	d001      	beq.n	90001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
9000104e:	2301      	movs	r3, #1
90001050:	e00e      	b.n	90001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90001052:	687b      	ldr	r3, [r7, #4]
90001054:	2b0f      	cmp	r3, #15
90001056:	d80a      	bhi.n	9000106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90001058:	2200      	movs	r2, #0
9000105a:	6879      	ldr	r1, [r7, #4]
9000105c:	f04f 30ff 	mov.w	r0, #4294967295
90001060:	f000 f92f 	bl	900012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90001064:	4a06      	ldr	r2, [pc, #24]	; (90001080 <HAL_InitTick+0x5c>)
90001066:	687b      	ldr	r3, [r7, #4]
90001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
9000106a:	2300      	movs	r3, #0
9000106c:	e000      	b.n	90001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
9000106e:	2301      	movs	r3, #1
}
90001070:	4618      	mov	r0, r3
90001072:	3708      	adds	r7, #8
90001074:	46bd      	mov	sp, r7
90001076:	bd80      	pop	{r7, pc}
90001078:	20000000 	.word	0x20000000
9000107c:	20000008 	.word	0x20000008
90001080:	20000004 	.word	0x20000004

90001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90001084:	b480      	push	{r7}
90001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
90001088:	4b06      	ldr	r3, [pc, #24]	; (900010a4 <HAL_IncTick+0x20>)
9000108a:	781b      	ldrb	r3, [r3, #0]
9000108c:	461a      	mov	r2, r3
9000108e:	4b06      	ldr	r3, [pc, #24]	; (900010a8 <HAL_IncTick+0x24>)
90001090:	681b      	ldr	r3, [r3, #0]
90001092:	4413      	add	r3, r2
90001094:	4a04      	ldr	r2, [pc, #16]	; (900010a8 <HAL_IncTick+0x24>)
90001096:	6013      	str	r3, [r2, #0]
}
90001098:	bf00      	nop
9000109a:	46bd      	mov	sp, r7
9000109c:	f85d 7b04 	ldr.w	r7, [sp], #4
900010a0:	4770      	bx	lr
900010a2:	bf00      	nop
900010a4:	20000008 	.word	0x20000008
900010a8:	20000130 	.word	0x20000130

900010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900010ac:	b480      	push	{r7}
900010ae:	af00      	add	r7, sp, #0
  return uwTick;
900010b0:	4b03      	ldr	r3, [pc, #12]	; (900010c0 <HAL_GetTick+0x14>)
900010b2:	681b      	ldr	r3, [r3, #0]
}
900010b4:	4618      	mov	r0, r3
900010b6:	46bd      	mov	sp, r7
900010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900010bc:	4770      	bx	lr
900010be:	bf00      	nop
900010c0:	20000130 	.word	0x20000130

900010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900010c4:	b580      	push	{r7, lr}
900010c6:	b084      	sub	sp, #16
900010c8:	af00      	add	r7, sp, #0
900010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900010cc:	f7ff ffee 	bl	900010ac <HAL_GetTick>
900010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
900010d2:	687b      	ldr	r3, [r7, #4]
900010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900010d6:	68fb      	ldr	r3, [r7, #12]
900010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
900010dc:	d005      	beq.n	900010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
900010de:	4b0a      	ldr	r3, [pc, #40]	; (90001108 <HAL_Delay+0x44>)
900010e0:	781b      	ldrb	r3, [r3, #0]
900010e2:	461a      	mov	r2, r3
900010e4:	68fb      	ldr	r3, [r7, #12]
900010e6:	4413      	add	r3, r2
900010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
900010ea:	bf00      	nop
900010ec:	f7ff ffde 	bl	900010ac <HAL_GetTick>
900010f0:	4602      	mov	r2, r0
900010f2:	68bb      	ldr	r3, [r7, #8]
900010f4:	1ad3      	subs	r3, r2, r3
900010f6:	68fa      	ldr	r2, [r7, #12]
900010f8:	429a      	cmp	r2, r3
900010fa:	d8f7      	bhi.n	900010ec <HAL_Delay+0x28>
  {
  }
}
900010fc:	bf00      	nop
900010fe:	bf00      	nop
90001100:	3710      	adds	r7, #16
90001102:	46bd      	mov	sp, r7
90001104:	bd80      	pop	{r7, pc}
90001106:	bf00      	nop
90001108:	20000008 	.word	0x20000008

9000110c <__NVIC_SetPriorityGrouping>:
{
9000110c:	b480      	push	{r7}
9000110e:	b085      	sub	sp, #20
90001110:	af00      	add	r7, sp, #0
90001112:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90001114:	687b      	ldr	r3, [r7, #4]
90001116:	f003 0307 	and.w	r3, r3, #7
9000111a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000111c:	4b0b      	ldr	r3, [pc, #44]	; (9000114c <__NVIC_SetPriorityGrouping+0x40>)
9000111e:	68db      	ldr	r3, [r3, #12]
90001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90001122:	68ba      	ldr	r2, [r7, #8]
90001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90001128:	4013      	ands	r3, r2
9000112a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000112c:	68fb      	ldr	r3, [r7, #12]
9000112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90001130:	68bb      	ldr	r3, [r7, #8]
90001132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90001134:	4b06      	ldr	r3, [pc, #24]	; (90001150 <__NVIC_SetPriorityGrouping+0x44>)
90001136:	4313      	orrs	r3, r2
90001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
9000113a:	4a04      	ldr	r2, [pc, #16]	; (9000114c <__NVIC_SetPriorityGrouping+0x40>)
9000113c:	68bb      	ldr	r3, [r7, #8]
9000113e:	60d3      	str	r3, [r2, #12]
}
90001140:	bf00      	nop
90001142:	3714      	adds	r7, #20
90001144:	46bd      	mov	sp, r7
90001146:	f85d 7b04 	ldr.w	r7, [sp], #4
9000114a:	4770      	bx	lr
9000114c:	e000ed00 	.word	0xe000ed00
90001150:	05fa0000 	.word	0x05fa0000

90001154 <__NVIC_GetPriorityGrouping>:
{
90001154:	b480      	push	{r7}
90001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90001158:	4b04      	ldr	r3, [pc, #16]	; (9000116c <__NVIC_GetPriorityGrouping+0x18>)
9000115a:	68db      	ldr	r3, [r3, #12]
9000115c:	0a1b      	lsrs	r3, r3, #8
9000115e:	f003 0307 	and.w	r3, r3, #7
}
90001162:	4618      	mov	r0, r3
90001164:	46bd      	mov	sp, r7
90001166:	f85d 7b04 	ldr.w	r7, [sp], #4
9000116a:	4770      	bx	lr
9000116c:	e000ed00 	.word	0xe000ed00

90001170 <__NVIC_EnableIRQ>:
{
90001170:	b480      	push	{r7}
90001172:	b083      	sub	sp, #12
90001174:	af00      	add	r7, sp, #0
90001176:	4603      	mov	r3, r0
90001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
9000117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000117e:	2b00      	cmp	r3, #0
90001180:	db0b      	blt.n	9000119a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001182:	79fb      	ldrb	r3, [r7, #7]
90001184:	f003 021f 	and.w	r2, r3, #31
90001188:	4907      	ldr	r1, [pc, #28]	; (900011a8 <__NVIC_EnableIRQ+0x38>)
9000118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000118e:	095b      	lsrs	r3, r3, #5
90001190:	2001      	movs	r0, #1
90001192:	fa00 f202 	lsl.w	r2, r0, r2
90001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
9000119a:	bf00      	nop
9000119c:	370c      	adds	r7, #12
9000119e:	46bd      	mov	sp, r7
900011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900011a4:	4770      	bx	lr
900011a6:	bf00      	nop
900011a8:	e000e100 	.word	0xe000e100

900011ac <__NVIC_SetPriority>:
{
900011ac:	b480      	push	{r7}
900011ae:	b083      	sub	sp, #12
900011b0:	af00      	add	r7, sp, #0
900011b2:	4603      	mov	r3, r0
900011b4:	6039      	str	r1, [r7, #0]
900011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
900011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
900011bc:	2b00      	cmp	r3, #0
900011be:	db0a      	blt.n	900011d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900011c0:	683b      	ldr	r3, [r7, #0]
900011c2:	b2da      	uxtb	r2, r3
900011c4:	490c      	ldr	r1, [pc, #48]	; (900011f8 <__NVIC_SetPriority+0x4c>)
900011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
900011ca:	0112      	lsls	r2, r2, #4
900011cc:	b2d2      	uxtb	r2, r2
900011ce:	440b      	add	r3, r1
900011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
900011d4:	e00a      	b.n	900011ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900011d6:	683b      	ldr	r3, [r7, #0]
900011d8:	b2da      	uxtb	r2, r3
900011da:	4908      	ldr	r1, [pc, #32]	; (900011fc <__NVIC_SetPriority+0x50>)
900011dc:	79fb      	ldrb	r3, [r7, #7]
900011de:	f003 030f 	and.w	r3, r3, #15
900011e2:	3b04      	subs	r3, #4
900011e4:	0112      	lsls	r2, r2, #4
900011e6:	b2d2      	uxtb	r2, r2
900011e8:	440b      	add	r3, r1
900011ea:	761a      	strb	r2, [r3, #24]
}
900011ec:	bf00      	nop
900011ee:	370c      	adds	r7, #12
900011f0:	46bd      	mov	sp, r7
900011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
900011f6:	4770      	bx	lr
900011f8:	e000e100 	.word	0xe000e100
900011fc:	e000ed00 	.word	0xe000ed00

90001200 <NVIC_EncodePriority>:
{
90001200:	b480      	push	{r7}
90001202:	b089      	sub	sp, #36	; 0x24
90001204:	af00      	add	r7, sp, #0
90001206:	60f8      	str	r0, [r7, #12]
90001208:	60b9      	str	r1, [r7, #8]
9000120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
9000120c:	68fb      	ldr	r3, [r7, #12]
9000120e:	f003 0307 	and.w	r3, r3, #7
90001212:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90001214:	69fb      	ldr	r3, [r7, #28]
90001216:	f1c3 0307 	rsb	r3, r3, #7
9000121a:	2b04      	cmp	r3, #4
9000121c:	bf28      	it	cs
9000121e:	2304      	movcs	r3, #4
90001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90001222:	69fb      	ldr	r3, [r7, #28]
90001224:	3304      	adds	r3, #4
90001226:	2b06      	cmp	r3, #6
90001228:	d902      	bls.n	90001230 <NVIC_EncodePriority+0x30>
9000122a:	69fb      	ldr	r3, [r7, #28]
9000122c:	3b03      	subs	r3, #3
9000122e:	e000      	b.n	90001232 <NVIC_EncodePriority+0x32>
90001230:	2300      	movs	r3, #0
90001232:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001234:	f04f 32ff 	mov.w	r2, #4294967295
90001238:	69bb      	ldr	r3, [r7, #24]
9000123a:	fa02 f303 	lsl.w	r3, r2, r3
9000123e:	43da      	mvns	r2, r3
90001240:	68bb      	ldr	r3, [r7, #8]
90001242:	401a      	ands	r2, r3
90001244:	697b      	ldr	r3, [r7, #20]
90001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90001248:	f04f 31ff 	mov.w	r1, #4294967295
9000124c:	697b      	ldr	r3, [r7, #20]
9000124e:	fa01 f303 	lsl.w	r3, r1, r3
90001252:	43d9      	mvns	r1, r3
90001254:	687b      	ldr	r3, [r7, #4]
90001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001258:	4313      	orrs	r3, r2
}
9000125a:	4618      	mov	r0, r3
9000125c:	3724      	adds	r7, #36	; 0x24
9000125e:	46bd      	mov	sp, r7
90001260:	f85d 7b04 	ldr.w	r7, [sp], #4
90001264:	4770      	bx	lr
	...

90001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90001268:	b580      	push	{r7, lr}
9000126a:	b082      	sub	sp, #8
9000126c:	af00      	add	r7, sp, #0
9000126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90001270:	687b      	ldr	r3, [r7, #4]
90001272:	3b01      	subs	r3, #1
90001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90001278:	d301      	bcc.n	9000127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
9000127a:	2301      	movs	r3, #1
9000127c:	e00f      	b.n	9000129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
9000127e:	4a0a      	ldr	r2, [pc, #40]	; (900012a8 <SysTick_Config+0x40>)
90001280:	687b      	ldr	r3, [r7, #4]
90001282:	3b01      	subs	r3, #1
90001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90001286:	210f      	movs	r1, #15
90001288:	f04f 30ff 	mov.w	r0, #4294967295
9000128c:	f7ff ff8e 	bl	900011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90001290:	4b05      	ldr	r3, [pc, #20]	; (900012a8 <SysTick_Config+0x40>)
90001292:	2200      	movs	r2, #0
90001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90001296:	4b04      	ldr	r3, [pc, #16]	; (900012a8 <SysTick_Config+0x40>)
90001298:	2207      	movs	r2, #7
9000129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
9000129c:	2300      	movs	r3, #0
}
9000129e:	4618      	mov	r0, r3
900012a0:	3708      	adds	r7, #8
900012a2:	46bd      	mov	sp, r7
900012a4:	bd80      	pop	{r7, pc}
900012a6:	bf00      	nop
900012a8:	e000e010 	.word	0xe000e010

900012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900012ac:	b580      	push	{r7, lr}
900012ae:	b082      	sub	sp, #8
900012b0:	af00      	add	r7, sp, #0
900012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
900012b4:	6878      	ldr	r0, [r7, #4]
900012b6:	f7ff ff29 	bl	9000110c <__NVIC_SetPriorityGrouping>
}
900012ba:	bf00      	nop
900012bc:	3708      	adds	r7, #8
900012be:	46bd      	mov	sp, r7
900012c0:	bd80      	pop	{r7, pc}

900012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
900012c2:	b580      	push	{r7, lr}
900012c4:	b086      	sub	sp, #24
900012c6:	af00      	add	r7, sp, #0
900012c8:	4603      	mov	r3, r0
900012ca:	60b9      	str	r1, [r7, #8]
900012cc:	607a      	str	r2, [r7, #4]
900012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
900012d0:	2300      	movs	r3, #0
900012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
900012d4:	f7ff ff3e 	bl	90001154 <__NVIC_GetPriorityGrouping>
900012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
900012da:	687a      	ldr	r2, [r7, #4]
900012dc:	68b9      	ldr	r1, [r7, #8]
900012de:	6978      	ldr	r0, [r7, #20]
900012e0:	f7ff ff8e 	bl	90001200 <NVIC_EncodePriority>
900012e4:	4602      	mov	r2, r0
900012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
900012ea:	4611      	mov	r1, r2
900012ec:	4618      	mov	r0, r3
900012ee:	f7ff ff5d 	bl	900011ac <__NVIC_SetPriority>
}
900012f2:	bf00      	nop
900012f4:	3718      	adds	r7, #24
900012f6:	46bd      	mov	sp, r7
900012f8:	bd80      	pop	{r7, pc}

900012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
900012fa:	b580      	push	{r7, lr}
900012fc:	b082      	sub	sp, #8
900012fe:	af00      	add	r7, sp, #0
90001300:	4603      	mov	r3, r0
90001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001308:	4618      	mov	r0, r3
9000130a:	f7ff ff31 	bl	90001170 <__NVIC_EnableIRQ>
}
9000130e:	bf00      	nop
90001310:	3708      	adds	r7, #8
90001312:	46bd      	mov	sp, r7
90001314:	bd80      	pop	{r7, pc}

90001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90001316:	b580      	push	{r7, lr}
90001318:	b082      	sub	sp, #8
9000131a:	af00      	add	r7, sp, #0
9000131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
9000131e:	6878      	ldr	r0, [r7, #4]
90001320:	f7ff ffa2 	bl	90001268 <SysTick_Config>
90001324:	4603      	mov	r3, r0
}
90001326:	4618      	mov	r0, r3
90001328:	3708      	adds	r7, #8
9000132a:	46bd      	mov	sp, r7
9000132c:	bd80      	pop	{r7, pc}
	...

90001330 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90001330:	b480      	push	{r7}
90001332:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90001334:	f3bf 8f5f 	dmb	sy
}
90001338:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
9000133a:	4b07      	ldr	r3, [pc, #28]	; (90001358 <HAL_MPU_Disable+0x28>)
9000133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000133e:	4a06      	ldr	r2, [pc, #24]	; (90001358 <HAL_MPU_Disable+0x28>)
90001340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001344:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90001346:	4b05      	ldr	r3, [pc, #20]	; (9000135c <HAL_MPU_Disable+0x2c>)
90001348:	2200      	movs	r2, #0
9000134a:	605a      	str	r2, [r3, #4]
}
9000134c:	bf00      	nop
9000134e:	46bd      	mov	sp, r7
90001350:	f85d 7b04 	ldr.w	r7, [sp], #4
90001354:	4770      	bx	lr
90001356:	bf00      	nop
90001358:	e000ed00 	.word	0xe000ed00
9000135c:	e000ed90 	.word	0xe000ed90

90001360 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90001360:	b480      	push	{r7}
90001362:	b083      	sub	sp, #12
90001364:	af00      	add	r7, sp, #0
90001366:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90001368:	4a0b      	ldr	r2, [pc, #44]	; (90001398 <HAL_MPU_Enable+0x38>)
9000136a:	687b      	ldr	r3, [r7, #4]
9000136c:	f043 0301 	orr.w	r3, r3, #1
90001370:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90001372:	4b0a      	ldr	r3, [pc, #40]	; (9000139c <HAL_MPU_Enable+0x3c>)
90001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001376:	4a09      	ldr	r2, [pc, #36]	; (9000139c <HAL_MPU_Enable+0x3c>)
90001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000137c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
9000137e:	f3bf 8f4f 	dsb	sy
}
90001382:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001384:	f3bf 8f6f 	isb	sy
}
90001388:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
9000138a:	bf00      	nop
9000138c:	370c      	adds	r7, #12
9000138e:	46bd      	mov	sp, r7
90001390:	f85d 7b04 	ldr.w	r7, [sp], #4
90001394:	4770      	bx	lr
90001396:	bf00      	nop
90001398:	e000ed90 	.word	0xe000ed90
9000139c:	e000ed00 	.word	0xe000ed00

900013a0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
900013a0:	b480      	push	{r7}
900013a2:	b083      	sub	sp, #12
900013a4:	af00      	add	r7, sp, #0
900013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900013a8:	687b      	ldr	r3, [r7, #4]
900013aa:	785a      	ldrb	r2, [r3, #1]
900013ac:	4b1d      	ldr	r3, [pc, #116]	; (90001424 <HAL_MPU_ConfigRegion+0x84>)
900013ae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
900013b0:	687b      	ldr	r3, [r7, #4]
900013b2:	781b      	ldrb	r3, [r3, #0]
900013b4:	2b00      	cmp	r3, #0
900013b6:	d029      	beq.n	9000140c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
900013b8:	4a1a      	ldr	r2, [pc, #104]	; (90001424 <HAL_MPU_ConfigRegion+0x84>)
900013ba:	687b      	ldr	r3, [r7, #4]
900013bc:	685b      	ldr	r3, [r3, #4]
900013be:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900013c0:	687b      	ldr	r3, [r7, #4]
900013c2:	7b1b      	ldrb	r3, [r3, #12]
900013c4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900013c6:	687b      	ldr	r3, [r7, #4]
900013c8:	7adb      	ldrb	r3, [r3, #11]
900013ca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900013cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900013ce:	687b      	ldr	r3, [r7, #4]
900013d0:	7a9b      	ldrb	r3, [r3, #10]
900013d2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900013d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900013d6:	687b      	ldr	r3, [r7, #4]
900013d8:	7b5b      	ldrb	r3, [r3, #13]
900013da:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900013dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900013de:	687b      	ldr	r3, [r7, #4]
900013e0:	7b9b      	ldrb	r3, [r3, #14]
900013e2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900013e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900013e6:	687b      	ldr	r3, [r7, #4]
900013e8:	7bdb      	ldrb	r3, [r3, #15]
900013ea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900013ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900013ee:	687b      	ldr	r3, [r7, #4]
900013f0:	7a5b      	ldrb	r3, [r3, #9]
900013f2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900013f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900013f6:	687b      	ldr	r3, [r7, #4]
900013f8:	7a1b      	ldrb	r3, [r3, #8]
900013fa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900013fc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
900013fe:	687a      	ldr	r2, [r7, #4]
90001400:	7812      	ldrb	r2, [r2, #0]
90001402:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001404:	4a07      	ldr	r2, [pc, #28]	; (90001424 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001406:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001408:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
9000140a:	e005      	b.n	90001418 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
9000140c:	4b05      	ldr	r3, [pc, #20]	; (90001424 <HAL_MPU_ConfigRegion+0x84>)
9000140e:	2200      	movs	r2, #0
90001410:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
90001412:	4b04      	ldr	r3, [pc, #16]	; (90001424 <HAL_MPU_ConfigRegion+0x84>)
90001414:	2200      	movs	r2, #0
90001416:	611a      	str	r2, [r3, #16]
}
90001418:	bf00      	nop
9000141a:	370c      	adds	r7, #12
9000141c:	46bd      	mov	sp, r7
9000141e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001422:	4770      	bx	lr
90001424:	e000ed90 	.word	0xe000ed90

90001428 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
90001428:	b580      	push	{r7, lr}
9000142a:	b088      	sub	sp, #32
9000142c:	af00      	add	r7, sp, #0
9000142e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
90001430:	2300      	movs	r3, #0
90001432:	61fb      	str	r3, [r7, #28]
90001434:	2300      	movs	r3, #0
90001436:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
90001438:	4ba0      	ldr	r3, [pc, #640]	; (900016bc <HAL_ETH_Init+0x294>)
9000143a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
9000143c:	2300      	movs	r3, #0
9000143e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
90001440:	2300      	movs	r3, #0
90001442:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
90001444:	687b      	ldr	r3, [r7, #4]
90001446:	2b00      	cmp	r3, #0
90001448:	d101      	bne.n	9000144e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
9000144a:	2301      	movs	r3, #1
9000144c:	e180      	b.n	90001750 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
9000144e:	687b      	ldr	r3, [r7, #4]
90001450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90001454:	b2db      	uxtb	r3, r3
90001456:	2b00      	cmp	r3, #0
90001458:	d106      	bne.n	90001468 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
9000145a:	687b      	ldr	r3, [r7, #4]
9000145c:	2200      	movs	r2, #0
9000145e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
90001462:	6878      	ldr	r0, [r7, #4]
90001464:	f003 fa76 	bl	90004954 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90001468:	4b95      	ldr	r3, [pc, #596]	; (900016c0 <HAL_ETH_Init+0x298>)
9000146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000146c:	4a94      	ldr	r2, [pc, #592]	; (900016c0 <HAL_ETH_Init+0x298>)
9000146e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90001472:	6453      	str	r3, [r2, #68]	; 0x44
90001474:	4b92      	ldr	r3, [pc, #584]	; (900016c0 <HAL_ETH_Init+0x298>)
90001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000147c:	60bb      	str	r3, [r7, #8]
9000147e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
90001480:	4b90      	ldr	r3, [pc, #576]	; (900016c4 <HAL_ETH_Init+0x29c>)
90001482:	685b      	ldr	r3, [r3, #4]
90001484:	4a8f      	ldr	r2, [pc, #572]	; (900016c4 <HAL_ETH_Init+0x29c>)
90001486:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
9000148a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
9000148c:	4b8d      	ldr	r3, [pc, #564]	; (900016c4 <HAL_ETH_Init+0x29c>)
9000148e:	685a      	ldr	r2, [r3, #4]
90001490:	687b      	ldr	r3, [r7, #4]
90001492:	6a1b      	ldr	r3, [r3, #32]
90001494:	498b      	ldr	r1, [pc, #556]	; (900016c4 <HAL_ETH_Init+0x29c>)
90001496:	4313      	orrs	r3, r2
90001498:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
9000149a:	687b      	ldr	r3, [r7, #4]
9000149c:	681b      	ldr	r3, [r3, #0]
9000149e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900014a2:	681b      	ldr	r3, [r3, #0]
900014a4:	687a      	ldr	r2, [r7, #4]
900014a6:	6812      	ldr	r2, [r2, #0]
900014a8:	f043 0301 	orr.w	r3, r3, #1
900014ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900014b0:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
900014b2:	f7ff fdfb 	bl	900010ac <HAL_GetTick>
900014b6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
900014b8:	e011      	b.n	900014de <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
900014ba:	f7ff fdf7 	bl	900010ac <HAL_GetTick>
900014be:	4602      	mov	r2, r0
900014c0:	697b      	ldr	r3, [r7, #20]
900014c2:	1ad3      	subs	r3, r2, r3
900014c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
900014c8:	d909      	bls.n	900014de <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
900014ca:	687b      	ldr	r3, [r7, #4]
900014cc:	2203      	movs	r2, #3
900014ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
900014d2:	687b      	ldr	r3, [r7, #4]
900014d4:	2200      	movs	r2, #0
900014d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
900014da:	2303      	movs	r3, #3
900014dc:	e138      	b.n	90001750 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
900014de:	687b      	ldr	r3, [r7, #4]
900014e0:	681b      	ldr	r3, [r3, #0]
900014e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900014e6:	681b      	ldr	r3, [r3, #0]
900014e8:	f003 0301 	and.w	r3, r3, #1
900014ec:	2b00      	cmp	r3, #0
900014ee:	d1e4      	bne.n	900014ba <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
900014f0:	687b      	ldr	r3, [r7, #4]
900014f2:	681b      	ldr	r3, [r3, #0]
900014f4:	691b      	ldr	r3, [r3, #16]
900014f6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
900014f8:	69fb      	ldr	r3, [r7, #28]
900014fa:	f023 031c 	bic.w	r3, r3, #28
900014fe:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
90001500:	f001 ff74 	bl	900033ec <HAL_RCC_GetHCLKFreq>
90001504:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
90001506:	69bb      	ldr	r3, [r7, #24]
90001508:	4a6f      	ldr	r2, [pc, #444]	; (900016c8 <HAL_ETH_Init+0x2a0>)
9000150a:	4293      	cmp	r3, r2
9000150c:	d908      	bls.n	90001520 <HAL_ETH_Init+0xf8>
9000150e:	69bb      	ldr	r3, [r7, #24]
90001510:	4a6e      	ldr	r2, [pc, #440]	; (900016cc <HAL_ETH_Init+0x2a4>)
90001512:	4293      	cmp	r3, r2
90001514:	d804      	bhi.n	90001520 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
90001516:	69fb      	ldr	r3, [r7, #28]
90001518:	f043 0308 	orr.w	r3, r3, #8
9000151c:	61fb      	str	r3, [r7, #28]
9000151e:	e027      	b.n	90001570 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
90001520:	69bb      	ldr	r3, [r7, #24]
90001522:	4a6a      	ldr	r2, [pc, #424]	; (900016cc <HAL_ETH_Init+0x2a4>)
90001524:	4293      	cmp	r3, r2
90001526:	d908      	bls.n	9000153a <HAL_ETH_Init+0x112>
90001528:	69bb      	ldr	r3, [r7, #24]
9000152a:	4a64      	ldr	r2, [pc, #400]	; (900016bc <HAL_ETH_Init+0x294>)
9000152c:	4293      	cmp	r3, r2
9000152e:	d204      	bcs.n	9000153a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
90001530:	69fb      	ldr	r3, [r7, #28]
90001532:	f043 030c 	orr.w	r3, r3, #12
90001536:	61fb      	str	r3, [r7, #28]
90001538:	e01a      	b.n	90001570 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
9000153a:	69bb      	ldr	r3, [r7, #24]
9000153c:	4a5f      	ldr	r2, [pc, #380]	; (900016bc <HAL_ETH_Init+0x294>)
9000153e:	4293      	cmp	r3, r2
90001540:	d303      	bcc.n	9000154a <HAL_ETH_Init+0x122>
90001542:	69bb      	ldr	r3, [r7, #24]
90001544:	4a62      	ldr	r2, [pc, #392]	; (900016d0 <HAL_ETH_Init+0x2a8>)
90001546:	4293      	cmp	r3, r2
90001548:	d911      	bls.n	9000156e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
9000154a:	69bb      	ldr	r3, [r7, #24]
9000154c:	4a60      	ldr	r2, [pc, #384]	; (900016d0 <HAL_ETH_Init+0x2a8>)
9000154e:	4293      	cmp	r3, r2
90001550:	d908      	bls.n	90001564 <HAL_ETH_Init+0x13c>
90001552:	69bb      	ldr	r3, [r7, #24]
90001554:	4a5f      	ldr	r2, [pc, #380]	; (900016d4 <HAL_ETH_Init+0x2ac>)
90001556:	4293      	cmp	r3, r2
90001558:	d804      	bhi.n	90001564 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
9000155a:	69fb      	ldr	r3, [r7, #28]
9000155c:	f043 0304 	orr.w	r3, r3, #4
90001560:	61fb      	str	r3, [r7, #28]
90001562:	e005      	b.n	90001570 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
90001564:	69fb      	ldr	r3, [r7, #28]
90001566:	f043 0310 	orr.w	r3, r3, #16
9000156a:	61fb      	str	r3, [r7, #28]
9000156c:	e000      	b.n	90001570 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
9000156e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
90001570:	687b      	ldr	r3, [r7, #4]
90001572:	681b      	ldr	r3, [r3, #0]
90001574:	69fa      	ldr	r2, [r7, #28]
90001576:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
90001578:	f44f 4200 	mov.w	r2, #32768	; 0x8000
9000157c:	2100      	movs	r1, #0
9000157e:	6878      	ldr	r0, [r7, #4]
90001580:	f000 fc10 	bl	90001da4 <HAL_ETH_WritePHYRegister>
90001584:	4603      	mov	r3, r0
90001586:	2b00      	cmp	r3, #0
90001588:	d00b      	beq.n	900015a2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
9000158a:	2301      	movs	r3, #1
9000158c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
9000158e:	6939      	ldr	r1, [r7, #16]
90001590:	6878      	ldr	r0, [r7, #4]
90001592:	f000 fdc5 	bl	90002120 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
90001596:	687b      	ldr	r3, [r7, #4]
90001598:	2201      	movs	r2, #1
9000159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
9000159e:	2301      	movs	r3, #1
900015a0:	e0d6      	b.n	90001750 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
900015a2:	20ff      	movs	r0, #255	; 0xff
900015a4:	f7ff fd8e 	bl	900010c4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
900015a8:	687b      	ldr	r3, [r7, #4]
900015aa:	685b      	ldr	r3, [r3, #4]
900015ac:	2b00      	cmp	r3, #0
900015ae:	f000 80a4 	beq.w	900016fa <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900015b2:	f7ff fd7b 	bl	900010ac <HAL_GetTick>
900015b6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
900015b8:	f107 030c 	add.w	r3, r7, #12
900015bc:	461a      	mov	r2, r3
900015be:	2101      	movs	r1, #1
900015c0:	6878      	ldr	r0, [r7, #4]
900015c2:	f000 fb87 	bl	90001cd4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
900015c6:	f7ff fd71 	bl	900010ac <HAL_GetTick>
900015ca:	4602      	mov	r2, r0
900015cc:	697b      	ldr	r3, [r7, #20]
900015ce:	1ad3      	subs	r3, r2, r3
900015d0:	f241 3288 	movw	r2, #5000	; 0x1388
900015d4:	4293      	cmp	r3, r2
900015d6:	d90f      	bls.n	900015f8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
900015d8:	2301      	movs	r3, #1
900015da:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
900015dc:	6939      	ldr	r1, [r7, #16]
900015de:	6878      	ldr	r0, [r7, #4]
900015e0:	f000 fd9e 	bl	90002120 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
900015e4:	687b      	ldr	r3, [r7, #4]
900015e6:	2201      	movs	r2, #1
900015e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
900015ec:	687b      	ldr	r3, [r7, #4]
900015ee:	2200      	movs	r2, #0
900015f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
900015f4:	2303      	movs	r3, #3
900015f6:	e0ab      	b.n	90001750 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
900015f8:	68fb      	ldr	r3, [r7, #12]
900015fa:	f003 0304 	and.w	r3, r3, #4
900015fe:	2b00      	cmp	r3, #0
90001600:	d0da      	beq.n	900015b8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
90001602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90001606:	2100      	movs	r1, #0
90001608:	6878      	ldr	r0, [r7, #4]
9000160a:	f000 fbcb 	bl	90001da4 <HAL_ETH_WritePHYRegister>
9000160e:	4603      	mov	r3, r0
90001610:	2b00      	cmp	r3, #0
90001612:	d00b      	beq.n	9000162c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
90001614:	2301      	movs	r3, #1
90001616:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
90001618:	6939      	ldr	r1, [r7, #16]
9000161a:	6878      	ldr	r0, [r7, #4]
9000161c:	f000 fd80 	bl	90002120 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
90001620:	687b      	ldr	r3, [r7, #4]
90001622:	2201      	movs	r2, #1
90001624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
90001628:	2301      	movs	r3, #1
9000162a:	e091      	b.n	90001750 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
9000162c:	f7ff fd3e 	bl	900010ac <HAL_GetTick>
90001630:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
90001632:	f107 030c 	add.w	r3, r7, #12
90001636:	461a      	mov	r2, r3
90001638:	2101      	movs	r1, #1
9000163a:	6878      	ldr	r0, [r7, #4]
9000163c:	f000 fb4a 	bl	90001cd4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
90001640:	f7ff fd34 	bl	900010ac <HAL_GetTick>
90001644:	4602      	mov	r2, r0
90001646:	697b      	ldr	r3, [r7, #20]
90001648:	1ad3      	subs	r3, r2, r3
9000164a:	f241 3288 	movw	r2, #5000	; 0x1388
9000164e:	4293      	cmp	r3, r2
90001650:	d90f      	bls.n	90001672 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
90001652:	2301      	movs	r3, #1
90001654:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
90001656:	6939      	ldr	r1, [r7, #16]
90001658:	6878      	ldr	r0, [r7, #4]
9000165a:	f000 fd61 	bl	90002120 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
9000165e:	687b      	ldr	r3, [r7, #4]
90001660:	2201      	movs	r2, #1
90001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
90001666:	687b      	ldr	r3, [r7, #4]
90001668:	2200      	movs	r2, #0
9000166a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
9000166e:	2303      	movs	r3, #3
90001670:	e06e      	b.n	90001750 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
90001672:	68fb      	ldr	r3, [r7, #12]
90001674:	f003 0320 	and.w	r3, r3, #32
90001678:	2b00      	cmp	r3, #0
9000167a:	d0da      	beq.n	90001632 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
9000167c:	f107 030c 	add.w	r3, r7, #12
90001680:	461a      	mov	r2, r3
90001682:	2110      	movs	r1, #16
90001684:	6878      	ldr	r0, [r7, #4]
90001686:	f000 fb25 	bl	90001cd4 <HAL_ETH_ReadPHYRegister>
9000168a:	4603      	mov	r3, r0
9000168c:	2b00      	cmp	r3, #0
9000168e:	d00b      	beq.n	900016a8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
90001690:	2301      	movs	r3, #1
90001692:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
90001694:	6939      	ldr	r1, [r7, #16]
90001696:	6878      	ldr	r0, [r7, #4]
90001698:	f000 fd42 	bl	90002120 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
9000169c:	687b      	ldr	r3, [r7, #4]
9000169e:	2201      	movs	r2, #1
900016a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
900016a4:	2301      	movs	r3, #1
900016a6:	e053      	b.n	90001750 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
900016a8:	68fb      	ldr	r3, [r7, #12]
900016aa:	f003 0304 	and.w	r3, r3, #4
900016ae:	2b00      	cmp	r3, #0
900016b0:	d012      	beq.n	900016d8 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
900016b2:	687b      	ldr	r3, [r7, #4]
900016b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
900016b8:	60da      	str	r2, [r3, #12]
900016ba:	e010      	b.n	900016de <HAL_ETH_Init+0x2b6>
900016bc:	03938700 	.word	0x03938700
900016c0:	40023800 	.word	0x40023800
900016c4:	40013800 	.word	0x40013800
900016c8:	01312cff 	.word	0x01312cff
900016cc:	02160ebf 	.word	0x02160ebf
900016d0:	05f5e0ff 	.word	0x05f5e0ff
900016d4:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
900016d8:	687b      	ldr	r3, [r7, #4]
900016da:	2200      	movs	r2, #0
900016dc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
900016de:	68fb      	ldr	r3, [r7, #12]
900016e0:	f003 0302 	and.w	r3, r3, #2
900016e4:	2b00      	cmp	r3, #0
900016e6:	d003      	beq.n	900016f0 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
900016e8:	687b      	ldr	r3, [r7, #4]
900016ea:	2200      	movs	r2, #0
900016ec:	609a      	str	r2, [r3, #8]
900016ee:	e026      	b.n	9000173e <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
900016f0:	687b      	ldr	r3, [r7, #4]
900016f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
900016f6:	609a      	str	r2, [r3, #8]
900016f8:	e021      	b.n	9000173e <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
900016fa:	687b      	ldr	r3, [r7, #4]
900016fc:	68db      	ldr	r3, [r3, #12]
900016fe:	08db      	lsrs	r3, r3, #3
90001700:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
90001702:	687b      	ldr	r3, [r7, #4]
90001704:	689b      	ldr	r3, [r3, #8]
90001706:	085b      	lsrs	r3, r3, #1
90001708:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
9000170a:	4313      	orrs	r3, r2
9000170c:	b29b      	uxth	r3, r3
9000170e:	461a      	mov	r2, r3
90001710:	2100      	movs	r1, #0
90001712:	6878      	ldr	r0, [r7, #4]
90001714:	f000 fb46 	bl	90001da4 <HAL_ETH_WritePHYRegister>
90001718:	4603      	mov	r3, r0
9000171a:	2b00      	cmp	r3, #0
9000171c:	d00b      	beq.n	90001736 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
9000171e:	2301      	movs	r3, #1
90001720:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
90001722:	6939      	ldr	r1, [r7, #16]
90001724:	6878      	ldr	r0, [r7, #4]
90001726:	f000 fcfb 	bl	90002120 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
9000172a:	687b      	ldr	r3, [r7, #4]
9000172c:	2201      	movs	r2, #1
9000172e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
90001732:	2301      	movs	r3, #1
90001734:	e00c      	b.n	90001750 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
90001736:	f640 70ff 	movw	r0, #4095	; 0xfff
9000173a:	f7ff fcc3 	bl	900010c4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
9000173e:	6939      	ldr	r1, [r7, #16]
90001740:	6878      	ldr	r0, [r7, #4]
90001742:	f000 fced 	bl	90002120 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
90001746:	687b      	ldr	r3, [r7, #4]
90001748:	2201      	movs	r2, #1
9000174a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
9000174e:	2300      	movs	r3, #0
}
90001750:	4618      	mov	r0, r3
90001752:	3720      	adds	r7, #32
90001754:	46bd      	mov	sp, r7
90001756:	bd80      	pop	{r7, pc}

90001758 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
90001758:	b480      	push	{r7}
9000175a:	b087      	sub	sp, #28
9000175c:	af00      	add	r7, sp, #0
9000175e:	60f8      	str	r0, [r7, #12]
90001760:	60b9      	str	r1, [r7, #8]
90001762:	607a      	str	r2, [r7, #4]
90001764:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
90001766:	2300      	movs	r3, #0
90001768:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
9000176a:	68fb      	ldr	r3, [r7, #12]
9000176c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90001770:	2b01      	cmp	r3, #1
90001772:	d101      	bne.n	90001778 <HAL_ETH_DMATxDescListInit+0x20>
90001774:	2302      	movs	r3, #2
90001776:	e051      	b.n	9000181c <HAL_ETH_DMATxDescListInit+0xc4>
90001778:	68fb      	ldr	r3, [r7, #12]
9000177a:	2201      	movs	r2, #1
9000177c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
90001780:	68fb      	ldr	r3, [r7, #12]
90001782:	2202      	movs	r2, #2
90001784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
90001788:	68fb      	ldr	r3, [r7, #12]
9000178a:	68ba      	ldr	r2, [r7, #8]
9000178c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
9000178e:	2300      	movs	r3, #0
90001790:	617b      	str	r3, [r7, #20]
90001792:	e030      	b.n	900017f6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
90001794:	697b      	ldr	r3, [r7, #20]
90001796:	015b      	lsls	r3, r3, #5
90001798:	68ba      	ldr	r2, [r7, #8]
9000179a:	4413      	add	r3, r2
9000179c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
9000179e:	693b      	ldr	r3, [r7, #16]
900017a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
900017a4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
900017a6:	697b      	ldr	r3, [r7, #20]
900017a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
900017ac:	fb02 f303 	mul.w	r3, r2, r3
900017b0:	687a      	ldr	r2, [r7, #4]
900017b2:	4413      	add	r3, r2
900017b4:	461a      	mov	r2, r3
900017b6:	693b      	ldr	r3, [r7, #16]
900017b8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
900017ba:	68fb      	ldr	r3, [r7, #12]
900017bc:	69db      	ldr	r3, [r3, #28]
900017be:	2b00      	cmp	r3, #0
900017c0:	d105      	bne.n	900017ce <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
900017c2:	693b      	ldr	r3, [r7, #16]
900017c4:	681b      	ldr	r3, [r3, #0]
900017c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
900017ca:	693b      	ldr	r3, [r7, #16]
900017cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
900017ce:	683b      	ldr	r3, [r7, #0]
900017d0:	3b01      	subs	r3, #1
900017d2:	697a      	ldr	r2, [r7, #20]
900017d4:	429a      	cmp	r2, r3
900017d6:	d208      	bcs.n	900017ea <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
900017d8:	697b      	ldr	r3, [r7, #20]
900017da:	3301      	adds	r3, #1
900017dc:	015b      	lsls	r3, r3, #5
900017de:	68ba      	ldr	r2, [r7, #8]
900017e0:	4413      	add	r3, r2
900017e2:	461a      	mov	r2, r3
900017e4:	693b      	ldr	r3, [r7, #16]
900017e6:	60da      	str	r2, [r3, #12]
900017e8:	e002      	b.n	900017f0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
900017ea:	68ba      	ldr	r2, [r7, #8]
900017ec:	693b      	ldr	r3, [r7, #16]
900017ee:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
900017f0:	697b      	ldr	r3, [r7, #20]
900017f2:	3301      	adds	r3, #1
900017f4:	617b      	str	r3, [r7, #20]
900017f6:	697a      	ldr	r2, [r7, #20]
900017f8:	683b      	ldr	r3, [r7, #0]
900017fa:	429a      	cmp	r2, r3
900017fc:	d3ca      	bcc.n	90001794 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
900017fe:	68fb      	ldr	r3, [r7, #12]
90001800:	681a      	ldr	r2, [r3, #0]
90001802:	68bb      	ldr	r3, [r7, #8]
90001804:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90001808:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
9000180a:	68fb      	ldr	r3, [r7, #12]
9000180c:	2201      	movs	r2, #1
9000180e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
90001812:	68fb      	ldr	r3, [r7, #12]
90001814:	2200      	movs	r2, #0
90001816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
9000181a:	2300      	movs	r3, #0
}
9000181c:	4618      	mov	r0, r3
9000181e:	371c      	adds	r7, #28
90001820:	46bd      	mov	sp, r7
90001822:	f85d 7b04 	ldr.w	r7, [sp], #4
90001826:	4770      	bx	lr

90001828 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
90001828:	b480      	push	{r7}
9000182a:	b087      	sub	sp, #28
9000182c:	af00      	add	r7, sp, #0
9000182e:	60f8      	str	r0, [r7, #12]
90001830:	60b9      	str	r1, [r7, #8]
90001832:	607a      	str	r2, [r7, #4]
90001834:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
90001836:	2300      	movs	r3, #0
90001838:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
9000183a:	68fb      	ldr	r3, [r7, #12]
9000183c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90001840:	2b01      	cmp	r3, #1
90001842:	d101      	bne.n	90001848 <HAL_ETH_DMARxDescListInit+0x20>
90001844:	2302      	movs	r3, #2
90001846:	e055      	b.n	900018f4 <HAL_ETH_DMARxDescListInit+0xcc>
90001848:	68fb      	ldr	r3, [r7, #12]
9000184a:	2201      	movs	r2, #1
9000184c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
90001850:	68fb      	ldr	r3, [r7, #12]
90001852:	2202      	movs	r2, #2
90001854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
90001858:	68fb      	ldr	r3, [r7, #12]
9000185a:	68ba      	ldr	r2, [r7, #8]
9000185c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
9000185e:	2300      	movs	r3, #0
90001860:	617b      	str	r3, [r7, #20]
90001862:	e034      	b.n	900018ce <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
90001864:	697b      	ldr	r3, [r7, #20]
90001866:	015b      	lsls	r3, r3, #5
90001868:	68ba      	ldr	r2, [r7, #8]
9000186a:	4413      	add	r3, r2
9000186c:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
9000186e:	693b      	ldr	r3, [r7, #16]
90001870:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
90001874:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
90001876:	693b      	ldr	r3, [r7, #16]
90001878:	f244 52f4 	movw	r2, #17908	; 0x45f4
9000187c:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
9000187e:	697b      	ldr	r3, [r7, #20]
90001880:	f240 52f4 	movw	r2, #1524	; 0x5f4
90001884:	fb02 f303 	mul.w	r3, r2, r3
90001888:	687a      	ldr	r2, [r7, #4]
9000188a:	4413      	add	r3, r2
9000188c:	461a      	mov	r2, r3
9000188e:	693b      	ldr	r3, [r7, #16]
90001890:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
90001892:	68fb      	ldr	r3, [r7, #12]
90001894:	699b      	ldr	r3, [r3, #24]
90001896:	2b01      	cmp	r3, #1
90001898:	d105      	bne.n	900018a6 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
9000189a:	693b      	ldr	r3, [r7, #16]
9000189c:	685b      	ldr	r3, [r3, #4]
9000189e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
900018a2:	693b      	ldr	r3, [r7, #16]
900018a4:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
900018a6:	683b      	ldr	r3, [r7, #0]
900018a8:	3b01      	subs	r3, #1
900018aa:	697a      	ldr	r2, [r7, #20]
900018ac:	429a      	cmp	r2, r3
900018ae:	d208      	bcs.n	900018c2 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
900018b0:	697b      	ldr	r3, [r7, #20]
900018b2:	3301      	adds	r3, #1
900018b4:	015b      	lsls	r3, r3, #5
900018b6:	68ba      	ldr	r2, [r7, #8]
900018b8:	4413      	add	r3, r2
900018ba:	461a      	mov	r2, r3
900018bc:	693b      	ldr	r3, [r7, #16]
900018be:	60da      	str	r2, [r3, #12]
900018c0:	e002      	b.n	900018c8 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
900018c2:	68ba      	ldr	r2, [r7, #8]
900018c4:	693b      	ldr	r3, [r7, #16]
900018c6:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
900018c8:	697b      	ldr	r3, [r7, #20]
900018ca:	3301      	adds	r3, #1
900018cc:	617b      	str	r3, [r7, #20]
900018ce:	697a      	ldr	r2, [r7, #20]
900018d0:	683b      	ldr	r3, [r7, #0]
900018d2:	429a      	cmp	r2, r3
900018d4:	d3c6      	bcc.n	90001864 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
900018d6:	68fb      	ldr	r3, [r7, #12]
900018d8:	681a      	ldr	r2, [r3, #0]
900018da:	68bb      	ldr	r3, [r7, #8]
900018dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900018e0:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
900018e2:	68fb      	ldr	r3, [r7, #12]
900018e4:	2201      	movs	r2, #1
900018e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
900018ea:	68fb      	ldr	r3, [r7, #12]
900018ec:	2200      	movs	r2, #0
900018ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
900018f2:	2300      	movs	r3, #0
}
900018f4:	4618      	mov	r0, r3
900018f6:	371c      	adds	r7, #28
900018f8:	46bd      	mov	sp, r7
900018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
900018fe:	4770      	bx	lr

90001900 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
90001900:	b480      	push	{r7}
90001902:	b087      	sub	sp, #28
90001904:	af00      	add	r7, sp, #0
90001906:	6078      	str	r0, [r7, #4]
90001908:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
9000190a:	2300      	movs	r3, #0
9000190c:	617b      	str	r3, [r7, #20]
9000190e:	2300      	movs	r3, #0
90001910:	60fb      	str	r3, [r7, #12]
90001912:	2300      	movs	r3, #0
90001914:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
90001916:	687b      	ldr	r3, [r7, #4]
90001918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000191c:	2b01      	cmp	r3, #1
9000191e:	d101      	bne.n	90001924 <HAL_ETH_TransmitFrame+0x24>
90001920:	2302      	movs	r3, #2
90001922:	e0cc      	b.n	90001abe <HAL_ETH_TransmitFrame+0x1be>
90001924:	687b      	ldr	r3, [r7, #4]
90001926:	2201      	movs	r2, #1
90001928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
9000192c:	687b      	ldr	r3, [r7, #4]
9000192e:	2202      	movs	r2, #2
90001930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
90001934:	683b      	ldr	r3, [r7, #0]
90001936:	2b00      	cmp	r3, #0
90001938:	d109      	bne.n	9000194e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
9000193a:	687b      	ldr	r3, [r7, #4]
9000193c:	2201      	movs	r2, #1
9000193e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
90001942:	687b      	ldr	r3, [r7, #4]
90001944:	2200      	movs	r2, #0
90001946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
9000194a:	2301      	movs	r3, #1
9000194c:	e0b7      	b.n	90001abe <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
9000194e:	687b      	ldr	r3, [r7, #4]
90001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001952:	681b      	ldr	r3, [r3, #0]
90001954:	2b00      	cmp	r3, #0
90001956:	da09      	bge.n	9000196c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
90001958:	687b      	ldr	r3, [r7, #4]
9000195a:	2212      	movs	r2, #18
9000195c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
90001960:	687b      	ldr	r3, [r7, #4]
90001962:	2200      	movs	r2, #0
90001964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
90001968:	2301      	movs	r3, #1
9000196a:	e0a8      	b.n	90001abe <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
9000196c:	683b      	ldr	r3, [r7, #0]
9000196e:	f240 52f4 	movw	r2, #1524	; 0x5f4
90001972:	4293      	cmp	r3, r2
90001974:	d915      	bls.n	900019a2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
90001976:	683b      	ldr	r3, [r7, #0]
90001978:	4a54      	ldr	r2, [pc, #336]	; (90001acc <HAL_ETH_TransmitFrame+0x1cc>)
9000197a:	fba2 2303 	umull	r2, r3, r2, r3
9000197e:	0a9b      	lsrs	r3, r3, #10
90001980:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
90001982:	683a      	ldr	r2, [r7, #0]
90001984:	4b51      	ldr	r3, [pc, #324]	; (90001acc <HAL_ETH_TransmitFrame+0x1cc>)
90001986:	fba3 1302 	umull	r1, r3, r3, r2
9000198a:	0a9b      	lsrs	r3, r3, #10
9000198c:	f240 51f4 	movw	r1, #1524	; 0x5f4
90001990:	fb01 f303 	mul.w	r3, r1, r3
90001994:	1ad3      	subs	r3, r2, r3
90001996:	2b00      	cmp	r3, #0
90001998:	d005      	beq.n	900019a6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
9000199a:	697b      	ldr	r3, [r7, #20]
9000199c:	3301      	adds	r3, #1
9000199e:	617b      	str	r3, [r7, #20]
900019a0:	e001      	b.n	900019a6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
900019a2:	2301      	movs	r3, #1
900019a4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
900019a6:	697b      	ldr	r3, [r7, #20]
900019a8:	2b01      	cmp	r3, #1
900019aa:	d11c      	bne.n	900019e6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
900019ac:	687b      	ldr	r3, [r7, #4]
900019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900019b0:	681a      	ldr	r2, [r3, #0]
900019b2:	687b      	ldr	r3, [r7, #4]
900019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900019b6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
900019ba:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
900019bc:	687b      	ldr	r3, [r7, #4]
900019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900019c0:	683a      	ldr	r2, [r7, #0]
900019c2:	f3c2 020c 	ubfx	r2, r2, #0, #13
900019c6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
900019c8:	687b      	ldr	r3, [r7, #4]
900019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900019cc:	681a      	ldr	r2, [r3, #0]
900019ce:	687b      	ldr	r3, [r7, #4]
900019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900019d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
900019d6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
900019d8:	687b      	ldr	r3, [r7, #4]
900019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900019dc:	68db      	ldr	r3, [r3, #12]
900019de:	461a      	mov	r2, r3
900019e0:	687b      	ldr	r3, [r7, #4]
900019e2:	62da      	str	r2, [r3, #44]	; 0x2c
900019e4:	e04b      	b.n	90001a7e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
900019e6:	2300      	movs	r3, #0
900019e8:	613b      	str	r3, [r7, #16]
900019ea:	e044      	b.n	90001a76 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
900019ec:	687b      	ldr	r3, [r7, #4]
900019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900019f0:	681a      	ldr	r2, [r3, #0]
900019f2:	687b      	ldr	r3, [r7, #4]
900019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900019f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
900019fa:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
900019fc:	693b      	ldr	r3, [r7, #16]
900019fe:	2b00      	cmp	r3, #0
90001a00:	d107      	bne.n	90001a12 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
90001a02:	687b      	ldr	r3, [r7, #4]
90001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001a06:	681a      	ldr	r2, [r3, #0]
90001a08:	687b      	ldr	r3, [r7, #4]
90001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001a0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90001a10:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
90001a12:	687b      	ldr	r3, [r7, #4]
90001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001a16:	f240 52f4 	movw	r2, #1524	; 0x5f4
90001a1a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
90001a1c:	697b      	ldr	r3, [r7, #20]
90001a1e:	3b01      	subs	r3, #1
90001a20:	693a      	ldr	r2, [r7, #16]
90001a22:	429a      	cmp	r2, r3
90001a24:	d116      	bne.n	90001a54 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
90001a26:	687b      	ldr	r3, [r7, #4]
90001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001a2a:	681a      	ldr	r2, [r3, #0]
90001a2c:	687b      	ldr	r3, [r7, #4]
90001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001a30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
90001a34:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
90001a36:	697b      	ldr	r3, [r7, #20]
90001a38:	4a25      	ldr	r2, [pc, #148]	; (90001ad0 <HAL_ETH_TransmitFrame+0x1d0>)
90001a3a:	fb03 f202 	mul.w	r2, r3, r2
90001a3e:	683b      	ldr	r3, [r7, #0]
90001a40:	4413      	add	r3, r2
90001a42:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
90001a46:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
90001a48:	687b      	ldr	r3, [r7, #4]
90001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001a4c:	68fa      	ldr	r2, [r7, #12]
90001a4e:	f3c2 020c 	ubfx	r2, r2, #0, #13
90001a52:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
90001a54:	687b      	ldr	r3, [r7, #4]
90001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001a58:	681a      	ldr	r2, [r3, #0]
90001a5a:	687b      	ldr	r3, [r7, #4]
90001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001a5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
90001a62:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
90001a64:	687b      	ldr	r3, [r7, #4]
90001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001a68:	68db      	ldr	r3, [r3, #12]
90001a6a:	461a      	mov	r2, r3
90001a6c:	687b      	ldr	r3, [r7, #4]
90001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
90001a70:	693b      	ldr	r3, [r7, #16]
90001a72:	3301      	adds	r3, #1
90001a74:	613b      	str	r3, [r7, #16]
90001a76:	693a      	ldr	r2, [r7, #16]
90001a78:	697b      	ldr	r3, [r7, #20]
90001a7a:	429a      	cmp	r2, r3
90001a7c:	d3b6      	bcc.n	900019ec <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
90001a7e:	687b      	ldr	r3, [r7, #4]
90001a80:	681b      	ldr	r3, [r3, #0]
90001a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001a86:	695b      	ldr	r3, [r3, #20]
90001a88:	f003 0304 	and.w	r3, r3, #4
90001a8c:	2b00      	cmp	r3, #0
90001a8e:	d00d      	beq.n	90001aac <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
90001a90:	687b      	ldr	r3, [r7, #4]
90001a92:	681b      	ldr	r3, [r3, #0]
90001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001a98:	461a      	mov	r2, r3
90001a9a:	2304      	movs	r3, #4
90001a9c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
90001a9e:	687b      	ldr	r3, [r7, #4]
90001aa0:	681b      	ldr	r3, [r3, #0]
90001aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001aa6:	461a      	mov	r2, r3
90001aa8:	2300      	movs	r3, #0
90001aaa:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
90001aac:	687b      	ldr	r3, [r7, #4]
90001aae:	2201      	movs	r2, #1
90001ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
90001ab4:	687b      	ldr	r3, [r7, #4]
90001ab6:	2200      	movs	r2, #0
90001ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
90001abc:	2300      	movs	r3, #0
}
90001abe:	4618      	mov	r0, r3
90001ac0:	371c      	adds	r7, #28
90001ac2:	46bd      	mov	sp, r7
90001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ac8:	4770      	bx	lr
90001aca:	bf00      	nop
90001acc:	ac02b00b 	.word	0xac02b00b
90001ad0:	fffffa0c 	.word	0xfffffa0c

90001ad4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
90001ad4:	b480      	push	{r7}
90001ad6:	b085      	sub	sp, #20
90001ad8:	af00      	add	r7, sp, #0
90001ada:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
90001adc:	2300      	movs	r3, #0
90001ade:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
90001ae0:	687b      	ldr	r3, [r7, #4]
90001ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90001ae6:	2b01      	cmp	r3, #1
90001ae8:	d101      	bne.n	90001aee <HAL_ETH_GetReceivedFrame_IT+0x1a>
90001aea:	2302      	movs	r3, #2
90001aec:	e074      	b.n	90001bd8 <HAL_ETH_GetReceivedFrame_IT+0x104>
90001aee:	687b      	ldr	r3, [r7, #4]
90001af0:	2201      	movs	r2, #1
90001af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
90001af6:	687b      	ldr	r3, [r7, #4]
90001af8:	2202      	movs	r2, #2
90001afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
90001afe:	e05a      	b.n	90001bb6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
90001b00:	68fb      	ldr	r3, [r7, #12]
90001b02:	3301      	adds	r3, #1
90001b04:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
90001b06:	687b      	ldr	r3, [r7, #4]
90001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b0a:	681b      	ldr	r3, [r3, #0]
90001b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
90001b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90001b14:	d10d      	bne.n	90001b32 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
90001b16:	687b      	ldr	r3, [r7, #4]
90001b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90001b1a:	687b      	ldr	r3, [r7, #4]
90001b1c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
90001b1e:	687b      	ldr	r3, [r7, #4]
90001b20:	2201      	movs	r2, #1
90001b22:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
90001b24:	687b      	ldr	r3, [r7, #4]
90001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b28:	68db      	ldr	r3, [r3, #12]
90001b2a:	461a      	mov	r2, r3
90001b2c:	687b      	ldr	r3, [r7, #4]
90001b2e:	629a      	str	r2, [r3, #40]	; 0x28
90001b30:	e041      	b.n	90001bb6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
90001b32:	687b      	ldr	r3, [r7, #4]
90001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b36:	681b      	ldr	r3, [r3, #0]
90001b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
90001b3c:	2b00      	cmp	r3, #0
90001b3e:	d10b      	bne.n	90001b58 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
90001b40:	687b      	ldr	r3, [r7, #4]
90001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001b44:	1c5a      	adds	r2, r3, #1
90001b46:	687b      	ldr	r3, [r7, #4]
90001b48:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
90001b4a:	687b      	ldr	r3, [r7, #4]
90001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b4e:	68db      	ldr	r3, [r3, #12]
90001b50:	461a      	mov	r2, r3
90001b52:	687b      	ldr	r3, [r7, #4]
90001b54:	629a      	str	r2, [r3, #40]	; 0x28
90001b56:	e02e      	b.n	90001bb6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
90001b58:	687b      	ldr	r3, [r7, #4]
90001b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90001b5c:	687b      	ldr	r3, [r7, #4]
90001b5e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
90001b60:	687b      	ldr	r3, [r7, #4]
90001b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001b64:	1c5a      	adds	r2, r3, #1
90001b66:	687b      	ldr	r3, [r7, #4]
90001b68:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
90001b6a:	687b      	ldr	r3, [r7, #4]
90001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001b6e:	2b01      	cmp	r3, #1
90001b70:	d103      	bne.n	90001b7a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
90001b72:	687b      	ldr	r3, [r7, #4]
90001b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90001b76:	687b      	ldr	r3, [r7, #4]
90001b78:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
90001b7a:	687b      	ldr	r3, [r7, #4]
90001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b7e:	681b      	ldr	r3, [r3, #0]
90001b80:	0c1b      	lsrs	r3, r3, #16
90001b82:	f3c3 030d 	ubfx	r3, r3, #0, #14
90001b86:	1f1a      	subs	r2, r3, #4
90001b88:	687b      	ldr	r3, [r7, #4]
90001b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
90001b8c:	687b      	ldr	r3, [r7, #4]
90001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001b90:	689a      	ldr	r2, [r3, #8]
90001b92:	687b      	ldr	r3, [r7, #4]
90001b94:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
90001b96:	687b      	ldr	r3, [r7, #4]
90001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b9a:	68db      	ldr	r3, [r3, #12]
90001b9c:	461a      	mov	r2, r3
90001b9e:	687b      	ldr	r3, [r7, #4]
90001ba0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
90001ba2:	687b      	ldr	r3, [r7, #4]
90001ba4:	2201      	movs	r2, #1
90001ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
90001baa:	687b      	ldr	r3, [r7, #4]
90001bac:	2200      	movs	r2, #0
90001bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
90001bb2:	2300      	movs	r3, #0
90001bb4:	e010      	b.n	90001bd8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
90001bb6:	687b      	ldr	r3, [r7, #4]
90001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001bba:	681b      	ldr	r3, [r3, #0]
90001bbc:	2b00      	cmp	r3, #0
90001bbe:	db02      	blt.n	90001bc6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
90001bc0:	68fb      	ldr	r3, [r7, #12]
90001bc2:	2b03      	cmp	r3, #3
90001bc4:	d99c      	bls.n	90001b00 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
90001bc6:	687b      	ldr	r3, [r7, #4]
90001bc8:	2201      	movs	r2, #1
90001bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
90001bce:	687b      	ldr	r3, [r7, #4]
90001bd0:	2200      	movs	r2, #0
90001bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
90001bd6:	2301      	movs	r3, #1
}
90001bd8:	4618      	mov	r0, r3
90001bda:	3714      	adds	r7, #20
90001bdc:	46bd      	mov	sp, r7
90001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
90001be2:	4770      	bx	lr

90001be4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
90001be4:	b580      	push	{r7, lr}
90001be6:	b082      	sub	sp, #8
90001be8:	af00      	add	r7, sp, #0
90001bea:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
90001bec:	687b      	ldr	r3, [r7, #4]
90001bee:	681b      	ldr	r3, [r3, #0]
90001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001bf4:	695b      	ldr	r3, [r3, #20]
90001bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
90001bfa:	2b40      	cmp	r3, #64	; 0x40
90001bfc:	d112      	bne.n	90001c24 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
90001bfe:	6878      	ldr	r0, [r7, #4]
90001c00:	f002 ff68 	bl	90004ad4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
90001c04:	687b      	ldr	r3, [r7, #4]
90001c06:	681b      	ldr	r3, [r3, #0]
90001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001c0c:	461a      	mov	r2, r3
90001c0e:	2340      	movs	r3, #64	; 0x40
90001c10:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
90001c12:	687b      	ldr	r3, [r7, #4]
90001c14:	2201      	movs	r2, #1
90001c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
90001c1a:	687b      	ldr	r3, [r7, #4]
90001c1c:	2200      	movs	r2, #0
90001c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90001c22:	e01a      	b.n	90001c5a <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
90001c24:	687b      	ldr	r3, [r7, #4]
90001c26:	681b      	ldr	r3, [r3, #0]
90001c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001c2c:	695b      	ldr	r3, [r3, #20]
90001c2e:	f003 0301 	and.w	r3, r3, #1
90001c32:	2b01      	cmp	r3, #1
90001c34:	d111      	bne.n	90001c5a <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
90001c36:	6878      	ldr	r0, [r7, #4]
90001c38:	f000 f838 	bl	90001cac <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
90001c3c:	687b      	ldr	r3, [r7, #4]
90001c3e:	681b      	ldr	r3, [r3, #0]
90001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001c44:	461a      	mov	r2, r3
90001c46:	2301      	movs	r3, #1
90001c48:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
90001c4a:	687b      	ldr	r3, [r7, #4]
90001c4c:	2201      	movs	r2, #1
90001c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
90001c52:	687b      	ldr	r3, [r7, #4]
90001c54:	2200      	movs	r2, #0
90001c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
90001c5a:	687b      	ldr	r3, [r7, #4]
90001c5c:	681b      	ldr	r3, [r3, #0]
90001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001c62:	461a      	mov	r2, r3
90001c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90001c68:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
90001c6a:	687b      	ldr	r3, [r7, #4]
90001c6c:	681b      	ldr	r3, [r3, #0]
90001c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001c72:	695b      	ldr	r3, [r3, #20]
90001c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90001c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90001c7c:	d112      	bne.n	90001ca4 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
90001c7e:	6878      	ldr	r0, [r7, #4]
90001c80:	f000 f81e 	bl	90001cc0 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
90001c84:	687b      	ldr	r3, [r7, #4]
90001c86:	681b      	ldr	r3, [r3, #0]
90001c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001c8c:	461a      	mov	r2, r3
90001c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90001c92:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
90001c94:	687b      	ldr	r3, [r7, #4]
90001c96:	2201      	movs	r2, #1
90001c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
90001c9c:	687b      	ldr	r3, [r7, #4]
90001c9e:	2200      	movs	r2, #0
90001ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
90001ca4:	bf00      	nop
90001ca6:	3708      	adds	r7, #8
90001ca8:	46bd      	mov	sp, r7
90001caa:	bd80      	pop	{r7, pc}

90001cac <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
90001cac:	b480      	push	{r7}
90001cae:	b083      	sub	sp, #12
90001cb0:	af00      	add	r7, sp, #0
90001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
90001cb4:	bf00      	nop
90001cb6:	370c      	adds	r7, #12
90001cb8:	46bd      	mov	sp, r7
90001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
90001cbe:	4770      	bx	lr

90001cc0 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
90001cc0:	b480      	push	{r7}
90001cc2:	b083      	sub	sp, #12
90001cc4:	af00      	add	r7, sp, #0
90001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
90001cc8:	bf00      	nop
90001cca:	370c      	adds	r7, #12
90001ccc:	46bd      	mov	sp, r7
90001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
90001cd2:	4770      	bx	lr

90001cd4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
90001cd4:	b580      	push	{r7, lr}
90001cd6:	b086      	sub	sp, #24
90001cd8:	af00      	add	r7, sp, #0
90001cda:	60f8      	str	r0, [r7, #12]
90001cdc:	460b      	mov	r3, r1
90001cde:	607a      	str	r2, [r7, #4]
90001ce0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
90001ce2:	2300      	movs	r3, #0
90001ce4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
90001ce6:	2300      	movs	r3, #0
90001ce8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
90001cea:	68fb      	ldr	r3, [r7, #12]
90001cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90001cf0:	b2db      	uxtb	r3, r3
90001cf2:	2b82      	cmp	r3, #130	; 0x82
90001cf4:	d101      	bne.n	90001cfa <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
90001cf6:	2302      	movs	r3, #2
90001cf8:	e050      	b.n	90001d9c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
90001cfa:	68fb      	ldr	r3, [r7, #12]
90001cfc:	2282      	movs	r2, #130	; 0x82
90001cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
90001d02:	68fb      	ldr	r3, [r7, #12]
90001d04:	681b      	ldr	r3, [r3, #0]
90001d06:	691b      	ldr	r3, [r3, #16]
90001d08:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
90001d0a:	697b      	ldr	r3, [r7, #20]
90001d0c:	f003 031c 	and.w	r3, r3, #28
90001d10:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
90001d12:	68fb      	ldr	r3, [r7, #12]
90001d14:	8a1b      	ldrh	r3, [r3, #16]
90001d16:	02db      	lsls	r3, r3, #11
90001d18:	b29b      	uxth	r3, r3
90001d1a:	697a      	ldr	r2, [r7, #20]
90001d1c:	4313      	orrs	r3, r2
90001d1e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
90001d20:	897b      	ldrh	r3, [r7, #10]
90001d22:	019b      	lsls	r3, r3, #6
90001d24:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
90001d28:	697a      	ldr	r2, [r7, #20]
90001d2a:	4313      	orrs	r3, r2
90001d2c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
90001d2e:	697b      	ldr	r3, [r7, #20]
90001d30:	f023 0302 	bic.w	r3, r3, #2
90001d34:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
90001d36:	697b      	ldr	r3, [r7, #20]
90001d38:	f043 0301 	orr.w	r3, r3, #1
90001d3c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
90001d3e:	68fb      	ldr	r3, [r7, #12]
90001d40:	681b      	ldr	r3, [r3, #0]
90001d42:	697a      	ldr	r2, [r7, #20]
90001d44:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
90001d46:	f7ff f9b1 	bl	900010ac <HAL_GetTick>
90001d4a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
90001d4c:	e015      	b.n	90001d7a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
90001d4e:	f7ff f9ad 	bl	900010ac <HAL_GetTick>
90001d52:	4602      	mov	r2, r0
90001d54:	693b      	ldr	r3, [r7, #16]
90001d56:	1ad3      	subs	r3, r2, r3
90001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90001d5c:	d309      	bcc.n	90001d72 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
90001d5e:	68fb      	ldr	r3, [r7, #12]
90001d60:	2201      	movs	r2, #1
90001d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
90001d66:	68fb      	ldr	r3, [r7, #12]
90001d68:	2200      	movs	r2, #0
90001d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
90001d6e:	2303      	movs	r3, #3
90001d70:	e014      	b.n	90001d9c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
90001d72:	68fb      	ldr	r3, [r7, #12]
90001d74:	681b      	ldr	r3, [r3, #0]
90001d76:	691b      	ldr	r3, [r3, #16]
90001d78:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
90001d7a:	697b      	ldr	r3, [r7, #20]
90001d7c:	f003 0301 	and.w	r3, r3, #1
90001d80:	2b00      	cmp	r3, #0
90001d82:	d1e4      	bne.n	90001d4e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
90001d84:	68fb      	ldr	r3, [r7, #12]
90001d86:	681b      	ldr	r3, [r3, #0]
90001d88:	695b      	ldr	r3, [r3, #20]
90001d8a:	b29b      	uxth	r3, r3
90001d8c:	461a      	mov	r2, r3
90001d8e:	687b      	ldr	r3, [r7, #4]
90001d90:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
90001d92:	68fb      	ldr	r3, [r7, #12]
90001d94:	2201      	movs	r2, #1
90001d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
90001d9a:	2300      	movs	r3, #0
}
90001d9c:	4618      	mov	r0, r3
90001d9e:	3718      	adds	r7, #24
90001da0:	46bd      	mov	sp, r7
90001da2:	bd80      	pop	{r7, pc}

90001da4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
90001da4:	b580      	push	{r7, lr}
90001da6:	b086      	sub	sp, #24
90001da8:	af00      	add	r7, sp, #0
90001daa:	60f8      	str	r0, [r7, #12]
90001dac:	460b      	mov	r3, r1
90001dae:	607a      	str	r2, [r7, #4]
90001db0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
90001db2:	2300      	movs	r3, #0
90001db4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
90001db6:	2300      	movs	r3, #0
90001db8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
90001dba:	68fb      	ldr	r3, [r7, #12]
90001dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90001dc0:	b2db      	uxtb	r3, r3
90001dc2:	2b42      	cmp	r3, #66	; 0x42
90001dc4:	d101      	bne.n	90001dca <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
90001dc6:	2302      	movs	r3, #2
90001dc8:	e04e      	b.n	90001e68 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
90001dca:	68fb      	ldr	r3, [r7, #12]
90001dcc:	2242      	movs	r2, #66	; 0x42
90001dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
90001dd2:	68fb      	ldr	r3, [r7, #12]
90001dd4:	681b      	ldr	r3, [r3, #0]
90001dd6:	691b      	ldr	r3, [r3, #16]
90001dd8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
90001dda:	697b      	ldr	r3, [r7, #20]
90001ddc:	f003 031c 	and.w	r3, r3, #28
90001de0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
90001de2:	68fb      	ldr	r3, [r7, #12]
90001de4:	8a1b      	ldrh	r3, [r3, #16]
90001de6:	02db      	lsls	r3, r3, #11
90001de8:	b29b      	uxth	r3, r3
90001dea:	697a      	ldr	r2, [r7, #20]
90001dec:	4313      	orrs	r3, r2
90001dee:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
90001df0:	897b      	ldrh	r3, [r7, #10]
90001df2:	019b      	lsls	r3, r3, #6
90001df4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
90001df8:	697a      	ldr	r2, [r7, #20]
90001dfa:	4313      	orrs	r3, r2
90001dfc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
90001dfe:	697b      	ldr	r3, [r7, #20]
90001e00:	f043 0302 	orr.w	r3, r3, #2
90001e04:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
90001e06:	697b      	ldr	r3, [r7, #20]
90001e08:	f043 0301 	orr.w	r3, r3, #1
90001e0c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
90001e0e:	687b      	ldr	r3, [r7, #4]
90001e10:	b29a      	uxth	r2, r3
90001e12:	68fb      	ldr	r3, [r7, #12]
90001e14:	681b      	ldr	r3, [r3, #0]
90001e16:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
90001e18:	68fb      	ldr	r3, [r7, #12]
90001e1a:	681b      	ldr	r3, [r3, #0]
90001e1c:	697a      	ldr	r2, [r7, #20]
90001e1e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
90001e20:	f7ff f944 	bl	900010ac <HAL_GetTick>
90001e24:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
90001e26:	e015      	b.n	90001e54 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
90001e28:	f7ff f940 	bl	900010ac <HAL_GetTick>
90001e2c:	4602      	mov	r2, r0
90001e2e:	693b      	ldr	r3, [r7, #16]
90001e30:	1ad3      	subs	r3, r2, r3
90001e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90001e36:	d309      	bcc.n	90001e4c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
90001e38:	68fb      	ldr	r3, [r7, #12]
90001e3a:	2201      	movs	r2, #1
90001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
90001e40:	68fb      	ldr	r3, [r7, #12]
90001e42:	2200      	movs	r2, #0
90001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
90001e48:	2303      	movs	r3, #3
90001e4a:	e00d      	b.n	90001e68 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
90001e4c:	68fb      	ldr	r3, [r7, #12]
90001e4e:	681b      	ldr	r3, [r3, #0]
90001e50:	691b      	ldr	r3, [r3, #16]
90001e52:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
90001e54:	697b      	ldr	r3, [r7, #20]
90001e56:	f003 0301 	and.w	r3, r3, #1
90001e5a:	2b00      	cmp	r3, #0
90001e5c:	d1e4      	bne.n	90001e28 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
90001e5e:	68fb      	ldr	r3, [r7, #12]
90001e60:	2201      	movs	r2, #1
90001e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
90001e66:	2300      	movs	r3, #0
}
90001e68:	4618      	mov	r0, r3
90001e6a:	3718      	adds	r7, #24
90001e6c:	46bd      	mov	sp, r7
90001e6e:	bd80      	pop	{r7, pc}

90001e70 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
90001e70:	b580      	push	{r7, lr}
90001e72:	b082      	sub	sp, #8
90001e74:	af00      	add	r7, sp, #0
90001e76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
90001e78:	687b      	ldr	r3, [r7, #4]
90001e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90001e7e:	2b01      	cmp	r3, #1
90001e80:	d101      	bne.n	90001e86 <HAL_ETH_Start+0x16>
90001e82:	2302      	movs	r3, #2
90001e84:	e01f      	b.n	90001ec6 <HAL_ETH_Start+0x56>
90001e86:	687b      	ldr	r3, [r7, #4]
90001e88:	2201      	movs	r2, #1
90001e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
90001e8e:	687b      	ldr	r3, [r7, #4]
90001e90:	2202      	movs	r2, #2
90001e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
90001e96:	6878      	ldr	r0, [r7, #4]
90001e98:	f000 fb40 	bl	9000251c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
90001e9c:	6878      	ldr	r0, [r7, #4]
90001e9e:	f000 fb77 	bl	90002590 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
90001ea2:	6878      	ldr	r0, [r7, #4]
90001ea4:	f000 fc06 	bl	900026b4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
90001ea8:	6878      	ldr	r0, [r7, #4]
90001eaa:	f000 fbab 	bl	90002604 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
90001eae:	6878      	ldr	r0, [r7, #4]
90001eb0:	f000 fbd4 	bl	9000265c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
90001eb4:	687b      	ldr	r3, [r7, #4]
90001eb6:	2201      	movs	r2, #1
90001eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
90001ebc:	687b      	ldr	r3, [r7, #4]
90001ebe:	2200      	movs	r2, #0
90001ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
90001ec4:	2300      	movs	r3, #0
}
90001ec6:	4618      	mov	r0, r3
90001ec8:	3708      	adds	r7, #8
90001eca:	46bd      	mov	sp, r7
90001ecc:	bd80      	pop	{r7, pc}

90001ece <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
90001ece:	b580      	push	{r7, lr}
90001ed0:	b082      	sub	sp, #8
90001ed2:	af00      	add	r7, sp, #0
90001ed4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
90001ed6:	687b      	ldr	r3, [r7, #4]
90001ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90001edc:	2b01      	cmp	r3, #1
90001ede:	d101      	bne.n	90001ee4 <HAL_ETH_Stop+0x16>
90001ee0:	2302      	movs	r3, #2
90001ee2:	e01f      	b.n	90001f24 <HAL_ETH_Stop+0x56>
90001ee4:	687b      	ldr	r3, [r7, #4]
90001ee6:	2201      	movs	r2, #1
90001ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
90001eec:	687b      	ldr	r3, [r7, #4]
90001eee:	2202      	movs	r2, #2
90001ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
90001ef4:	6878      	ldr	r0, [r7, #4]
90001ef6:	f000 fb9b 	bl	90002630 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
90001efa:	6878      	ldr	r0, [r7, #4]
90001efc:	f000 fbc4 	bl	90002688 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
90001f00:	6878      	ldr	r0, [r7, #4]
90001f02:	f000 fb62 	bl	900025ca <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
90001f06:	6878      	ldr	r0, [r7, #4]
90001f08:	f000 fbd4 	bl	900026b4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
90001f0c:	6878      	ldr	r0, [r7, #4]
90001f0e:	f000 fb22 	bl	90002556 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
90001f12:	687b      	ldr	r3, [r7, #4]
90001f14:	2201      	movs	r2, #1
90001f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
90001f1a:	687b      	ldr	r3, [r7, #4]
90001f1c:	2200      	movs	r2, #0
90001f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
90001f22:	2300      	movs	r3, #0
}
90001f24:	4618      	mov	r0, r3
90001f26:	3708      	adds	r7, #8
90001f28:	46bd      	mov	sp, r7
90001f2a:	bd80      	pop	{r7, pc}

90001f2c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
90001f2c:	b580      	push	{r7, lr}
90001f2e:	b084      	sub	sp, #16
90001f30:	af00      	add	r7, sp, #0
90001f32:	6078      	str	r0, [r7, #4]
90001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
90001f36:	2300      	movs	r3, #0
90001f38:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
90001f3a:	687b      	ldr	r3, [r7, #4]
90001f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90001f40:	2b01      	cmp	r3, #1
90001f42:	d101      	bne.n	90001f48 <HAL_ETH_ConfigMAC+0x1c>
90001f44:	2302      	movs	r3, #2
90001f46:	e0e4      	b.n	90002112 <HAL_ETH_ConfigMAC+0x1e6>
90001f48:	687b      	ldr	r3, [r7, #4]
90001f4a:	2201      	movs	r2, #1
90001f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
90001f50:	687b      	ldr	r3, [r7, #4]
90001f52:	2202      	movs	r2, #2
90001f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
90001f58:	683b      	ldr	r3, [r7, #0]
90001f5a:	2b00      	cmp	r3, #0
90001f5c:	f000 80b1 	beq.w	900020c2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
90001f60:	687b      	ldr	r3, [r7, #4]
90001f62:	681b      	ldr	r3, [r3, #0]
90001f64:	681b      	ldr	r3, [r3, #0]
90001f66:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
90001f68:	68fa      	ldr	r2, [r7, #12]
90001f6a:	4b6c      	ldr	r3, [pc, #432]	; (9000211c <HAL_ETH_ConfigMAC+0x1f0>)
90001f6c:	4013      	ands	r3, r2
90001f6e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
90001f70:	683b      	ldr	r3, [r7, #0]
90001f72:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
90001f74:	683b      	ldr	r3, [r7, #0]
90001f76:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
90001f78:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
90001f7a:	683b      	ldr	r3, [r7, #0]
90001f7c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
90001f7e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
90001f80:	683b      	ldr	r3, [r7, #0]
90001f82:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
90001f84:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
90001f86:	687b      	ldr	r3, [r7, #4]
90001f88:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
90001f8a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
90001f8c:	683b      	ldr	r3, [r7, #0]
90001f8e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
90001f90:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
90001f92:	683b      	ldr	r3, [r7, #0]
90001f94:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
90001f96:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
90001f98:	687b      	ldr	r3, [r7, #4]
90001f9a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
90001f9c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
90001f9e:	683b      	ldr	r3, [r7, #0]
90001fa0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
90001fa2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
90001fa4:	683b      	ldr	r3, [r7, #0]
90001fa6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
90001fa8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
90001faa:	683b      	ldr	r3, [r7, #0]
90001fac:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
90001fae:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
90001fb0:	683b      	ldr	r3, [r7, #0]
90001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
90001fb4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
90001fb6:	683b      	ldr	r3, [r7, #0]
90001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
90001fba:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
90001fbc:	68fa      	ldr	r2, [r7, #12]
90001fbe:	4313      	orrs	r3, r2
90001fc0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
90001fc2:	687b      	ldr	r3, [r7, #4]
90001fc4:	681b      	ldr	r3, [r3, #0]
90001fc6:	68fa      	ldr	r2, [r7, #12]
90001fc8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
90001fca:	687b      	ldr	r3, [r7, #4]
90001fcc:	681b      	ldr	r3, [r3, #0]
90001fce:	681b      	ldr	r3, [r3, #0]
90001fd0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
90001fd2:	2001      	movs	r0, #1
90001fd4:	f7ff f876 	bl	900010c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
90001fd8:	687b      	ldr	r3, [r7, #4]
90001fda:	681b      	ldr	r3, [r3, #0]
90001fdc:	68fa      	ldr	r2, [r7, #12]
90001fde:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
90001fe0:	683b      	ldr	r3, [r7, #0]
90001fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
90001fe4:	683b      	ldr	r3, [r7, #0]
90001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
90001fe8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
90001fea:	683b      	ldr	r3, [r7, #0]
90001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
90001fee:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
90001ff0:	683b      	ldr	r3, [r7, #0]
90001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
90001ff4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
90001ff6:	683b      	ldr	r3, [r7, #0]
90001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
90001ffa:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
90001ffc:	683b      	ldr	r3, [r7, #0]
90001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
90002000:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
90002002:	683b      	ldr	r3, [r7, #0]
90002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
90002006:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
9000200a:	683b      	ldr	r3, [r7, #0]
9000200c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
9000200e:	687b      	ldr	r3, [r7, #4]
90002010:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
90002012:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
90002014:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
90002016:	687b      	ldr	r3, [r7, #4]
90002018:	681b      	ldr	r3, [r3, #0]
9000201a:	685b      	ldr	r3, [r3, #4]
9000201c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
9000201e:	2001      	movs	r0, #1
90002020:	f7ff f850 	bl	900010c4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
90002024:	687b      	ldr	r3, [r7, #4]
90002026:	681b      	ldr	r3, [r3, #0]
90002028:	68fa      	ldr	r2, [r7, #12]
9000202a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
9000202c:	687b      	ldr	r3, [r7, #4]
9000202e:	681b      	ldr	r3, [r3, #0]
90002030:	683a      	ldr	r2, [r7, #0]
90002032:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
90002034:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
90002036:	687b      	ldr	r3, [r7, #4]
90002038:	681b      	ldr	r3, [r3, #0]
9000203a:	683a      	ldr	r2, [r7, #0]
9000203c:	6d12      	ldr	r2, [r2, #80]	; 0x50
9000203e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
90002040:	687b      	ldr	r3, [r7, #4]
90002042:	681b      	ldr	r3, [r3, #0]
90002044:	699b      	ldr	r3, [r3, #24]
90002046:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
90002048:	68fa      	ldr	r2, [r7, #12]
9000204a:	f64f 7341 	movw	r3, #65345	; 0xff41
9000204e:	4013      	ands	r3, r2
90002050:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
90002052:	683b      	ldr	r3, [r7, #0]
90002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002056:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
90002058:	683b      	ldr	r3, [r7, #0]
9000205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
9000205c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
9000205e:	683b      	ldr	r3, [r7, #0]
90002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
90002062:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
90002064:	683b      	ldr	r3, [r7, #0]
90002066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
90002068:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
9000206a:	683b      	ldr	r3, [r7, #0]
9000206c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
9000206e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
90002070:	683b      	ldr	r3, [r7, #0]
90002072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
90002074:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
90002076:	68fa      	ldr	r2, [r7, #12]
90002078:	4313      	orrs	r3, r2
9000207a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
9000207c:	687b      	ldr	r3, [r7, #4]
9000207e:	681b      	ldr	r3, [r3, #0]
90002080:	68fa      	ldr	r2, [r7, #12]
90002082:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
90002084:	687b      	ldr	r3, [r7, #4]
90002086:	681b      	ldr	r3, [r3, #0]
90002088:	699b      	ldr	r3, [r3, #24]
9000208a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
9000208c:	2001      	movs	r0, #1
9000208e:	f7ff f819 	bl	900010c4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
90002092:	687b      	ldr	r3, [r7, #4]
90002094:	681b      	ldr	r3, [r3, #0]
90002096:	68fa      	ldr	r2, [r7, #12]
90002098:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
9000209a:	683b      	ldr	r3, [r7, #0]
9000209c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
9000209e:	683b      	ldr	r3, [r7, #0]
900020a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
900020a2:	687b      	ldr	r3, [r7, #4]
900020a4:	681b      	ldr	r3, [r3, #0]
900020a6:	430a      	orrs	r2, r1
900020a8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
900020aa:	687b      	ldr	r3, [r7, #4]
900020ac:	681b      	ldr	r3, [r3, #0]
900020ae:	69db      	ldr	r3, [r3, #28]
900020b0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
900020b2:	2001      	movs	r0, #1
900020b4:	f7ff f806 	bl	900010c4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
900020b8:	687b      	ldr	r3, [r7, #4]
900020ba:	681b      	ldr	r3, [r3, #0]
900020bc:	68fa      	ldr	r2, [r7, #12]
900020be:	61da      	str	r2, [r3, #28]
900020c0:	e01e      	b.n	90002100 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
900020c2:	687b      	ldr	r3, [r7, #4]
900020c4:	681b      	ldr	r3, [r3, #0]
900020c6:	681b      	ldr	r3, [r3, #0]
900020c8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
900020ca:	68fb      	ldr	r3, [r7, #12]
900020cc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
900020d0:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
900020d2:	687b      	ldr	r3, [r7, #4]
900020d4:	689a      	ldr	r2, [r3, #8]
900020d6:	687b      	ldr	r3, [r7, #4]
900020d8:	68db      	ldr	r3, [r3, #12]
900020da:	4313      	orrs	r3, r2
900020dc:	68fa      	ldr	r2, [r7, #12]
900020de:	4313      	orrs	r3, r2
900020e0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
900020e2:	687b      	ldr	r3, [r7, #4]
900020e4:	681b      	ldr	r3, [r3, #0]
900020e6:	68fa      	ldr	r2, [r7, #12]
900020e8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
900020ea:	687b      	ldr	r3, [r7, #4]
900020ec:	681b      	ldr	r3, [r3, #0]
900020ee:	681b      	ldr	r3, [r3, #0]
900020f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
900020f2:	2001      	movs	r0, #1
900020f4:	f7fe ffe6 	bl	900010c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
900020f8:	687b      	ldr	r3, [r7, #4]
900020fa:	681b      	ldr	r3, [r3, #0]
900020fc:	68fa      	ldr	r2, [r7, #12]
900020fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
90002100:	687b      	ldr	r3, [r7, #4]
90002102:	2201      	movs	r2, #1
90002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
90002108:	687b      	ldr	r3, [r7, #4]
9000210a:	2200      	movs	r2, #0
9000210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
90002110:	2300      	movs	r3, #0
}
90002112:	4618      	mov	r0, r3
90002114:	3710      	adds	r7, #16
90002116:	46bd      	mov	sp, r7
90002118:	bd80      	pop	{r7, pc}
9000211a:	bf00      	nop
9000211c:	ff20810f 	.word	0xff20810f

90002120 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
90002120:	b580      	push	{r7, lr}
90002122:	b0b0      	sub	sp, #192	; 0xc0
90002124:	af00      	add	r7, sp, #0
90002126:	6078      	str	r0, [r7, #4]
90002128:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
9000212a:	2300      	movs	r3, #0
9000212c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
90002130:	683b      	ldr	r3, [r7, #0]
90002132:	2b00      	cmp	r3, #0
90002134:	d007      	beq.n	90002146 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
90002136:	687b      	ldr	r3, [r7, #4]
90002138:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000213c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
9000213e:	687b      	ldr	r3, [r7, #4]
90002140:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90002144:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
90002146:	2300      	movs	r3, #0
90002148:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
9000214a:	2300      	movs	r3, #0
9000214c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
9000214e:	2300      	movs	r3, #0
90002150:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
90002152:	2300      	movs	r3, #0
90002154:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
90002156:	2300      	movs	r3, #0
90002158:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
9000215a:	2300      	movs	r3, #0
9000215c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
9000215e:	687b      	ldr	r3, [r7, #4]
90002160:	69db      	ldr	r3, [r3, #28]
90002162:	2b00      	cmp	r3, #0
90002164:	d103      	bne.n	9000216e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
90002166:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000216a:	663b      	str	r3, [r7, #96]	; 0x60
9000216c:	e001      	b.n	90002172 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
9000216e:	2300      	movs	r3, #0
90002170:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
90002172:	f44f 7300 	mov.w	r3, #512	; 0x200
90002176:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
90002178:	2300      	movs	r3, #0
9000217a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
9000217c:	2300      	movs	r3, #0
9000217e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
90002180:	2300      	movs	r3, #0
90002182:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
90002184:	2300      	movs	r3, #0
90002186:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
90002188:	2300      	movs	r3, #0
9000218a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
9000218c:	2340      	movs	r3, #64	; 0x40
9000218e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
90002190:	2300      	movs	r3, #0
90002192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
90002196:	2300      	movs	r3, #0
90002198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
9000219c:	2300      	movs	r3, #0
9000219e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
900021a2:	2300      	movs	r3, #0
900021a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
900021a8:	2300      	movs	r3, #0
900021aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
900021ae:	2300      	movs	r3, #0
900021b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
900021b4:	2300      	movs	r3, #0
900021b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
900021ba:	2300      	movs	r3, #0
900021bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
900021c0:	2380      	movs	r3, #128	; 0x80
900021c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
900021c6:	2300      	movs	r3, #0
900021c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
900021cc:	2300      	movs	r3, #0
900021ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
900021d2:	2300      	movs	r3, #0
900021d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
900021d8:	2300      	movs	r3, #0
900021da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
900021de:	2300      	movs	r3, #0
900021e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
900021e4:	2300      	movs	r3, #0
900021e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
900021ea:	687b      	ldr	r3, [r7, #4]
900021ec:	681b      	ldr	r3, [r3, #0]
900021ee:	681b      	ldr	r3, [r3, #0]
900021f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
900021f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
900021f8:	4ba9      	ldr	r3, [pc, #676]	; (900024a0 <ETH_MACDMAConfig+0x380>)
900021fa:	4013      	ands	r3, r2
900021fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
90002200:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
90002202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
90002204:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
90002206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
90002208:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
9000220a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
9000220c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
9000220e:	687b      	ldr	r3, [r7, #4]
90002210:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
90002212:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
90002214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
90002216:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
90002218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
9000221a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
9000221c:	687b      	ldr	r3, [r7, #4]
9000221e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
90002220:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
90002222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
90002224:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
90002226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
90002228:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
9000222a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
9000222c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
9000222e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
90002230:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
90002232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
90002234:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
90002236:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
9000223a:	4313      	orrs	r3, r2
9000223c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
90002240:	687b      	ldr	r3, [r7, #4]
90002242:	681b      	ldr	r3, [r3, #0]
90002244:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
90002248:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
9000224a:	687b      	ldr	r3, [r7, #4]
9000224c:	681b      	ldr	r3, [r3, #0]
9000224e:	681b      	ldr	r3, [r3, #0]
90002250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
90002254:	2001      	movs	r0, #1
90002256:	f7fe ff35 	bl	900010c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
9000225a:	687b      	ldr	r3, [r7, #4]
9000225c:	681b      	ldr	r3, [r3, #0]
9000225e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
90002262:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
90002264:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
90002266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
90002268:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
9000226a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
9000226c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
9000226e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
90002272:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
90002274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
90002278:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
9000227a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
9000227e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
90002280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
90002284:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
90002288:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
9000228c:	687b      	ldr	r3, [r7, #4]
9000228e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
90002290:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
90002292:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
90002294:	687b      	ldr	r3, [r7, #4]
90002296:	681b      	ldr	r3, [r3, #0]
90002298:	685b      	ldr	r3, [r3, #4]
9000229a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
9000229e:	2001      	movs	r0, #1
900022a0:	f7fe ff10 	bl	900010c4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
900022a4:	687b      	ldr	r3, [r7, #4]
900022a6:	681b      	ldr	r3, [r3, #0]
900022a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
900022ac:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
900022ae:	687b      	ldr	r3, [r7, #4]
900022b0:	681b      	ldr	r3, [r3, #0]
900022b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
900022b6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
900022b8:	687b      	ldr	r3, [r7, #4]
900022ba:	681b      	ldr	r3, [r3, #0]
900022bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
900022c0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
900022c2:	687b      	ldr	r3, [r7, #4]
900022c4:	681b      	ldr	r3, [r3, #0]
900022c6:	699b      	ldr	r3, [r3, #24]
900022c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
900022cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
900022d0:	f64f 7341 	movw	r3, #65345	; 0xff41
900022d4:	4013      	ands	r3, r2
900022d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
900022da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
900022de:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
900022e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
900022e4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
900022e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
900022ea:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
900022ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
900022f0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
900022f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
900022f6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
900022f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
900022fc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
900022fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
90002302:	4313      	orrs	r3, r2
90002304:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
90002308:	687b      	ldr	r3, [r7, #4]
9000230a:	681b      	ldr	r3, [r3, #0]
9000230c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
90002310:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
90002312:	687b      	ldr	r3, [r7, #4]
90002314:	681b      	ldr	r3, [r3, #0]
90002316:	699b      	ldr	r3, [r3, #24]
90002318:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
9000231c:	2001      	movs	r0, #1
9000231e:	f7fe fed1 	bl	900010c4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
90002322:	687b      	ldr	r3, [r7, #4]
90002324:	681b      	ldr	r3, [r3, #0]
90002326:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
9000232a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
9000232c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
90002330:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
90002334:	687b      	ldr	r3, [r7, #4]
90002336:	681b      	ldr	r3, [r3, #0]
90002338:	430a      	orrs	r2, r1
9000233a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
9000233c:	687b      	ldr	r3, [r7, #4]
9000233e:	681b      	ldr	r3, [r3, #0]
90002340:	69db      	ldr	r3, [r3, #28]
90002342:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
90002346:	2001      	movs	r0, #1
90002348:	f7fe febc 	bl	900010c4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
9000234c:	687b      	ldr	r3, [r7, #4]
9000234e:	681b      	ldr	r3, [r3, #0]
90002350:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
90002354:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
90002356:	2300      	movs	r3, #0
90002358:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
9000235a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000235e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
90002360:	2300      	movs	r3, #0
90002362:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
90002364:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
90002368:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
9000236a:	2300      	movs	r3, #0
9000236c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
9000236e:	2300      	movs	r3, #0
90002370:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
90002372:	2300      	movs	r3, #0
90002374:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
90002376:	2300      	movs	r3, #0
90002378:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
9000237a:	2304      	movs	r3, #4
9000237c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
9000237e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
90002384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90002388:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
9000238a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
9000238e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
90002390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90002394:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
90002396:	2380      	movs	r3, #128	; 0x80
90002398:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
9000239a:	2300      	movs	r3, #0
9000239c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
9000239e:	2300      	movs	r3, #0
900023a0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
900023a2:	687b      	ldr	r3, [r7, #4]
900023a4:	681b      	ldr	r3, [r3, #0]
900023a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900023aa:	699b      	ldr	r3, [r3, #24]
900023ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
900023b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
900023b4:	4b3b      	ldr	r3, [pc, #236]	; (900024a4 <ETH_MACDMAConfig+0x384>)
900023b6:	4013      	ands	r3, r2
900023b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
900023bc:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
900023be:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
900023c0:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
900023c2:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
900023c4:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
900023c6:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
900023c8:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
900023ca:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
900023cc:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
900023ce:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
900023d0:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
900023d2:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
900023d4:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
900023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
900023d8:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
900023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
900023dc:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
900023de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
900023e2:	4313      	orrs	r3, r2
900023e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
900023e8:	687b      	ldr	r3, [r7, #4]
900023ea:	681b      	ldr	r3, [r3, #0]
900023ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900023f0:	461a      	mov	r2, r3
900023f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
900023f6:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
900023f8:	687b      	ldr	r3, [r7, #4]
900023fa:	681b      	ldr	r3, [r3, #0]
900023fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002400:	699b      	ldr	r3, [r3, #24]
90002402:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
90002406:	2001      	movs	r0, #1
90002408:	f7fe fe5c 	bl	900010c4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
9000240c:	687b      	ldr	r3, [r7, #4]
9000240e:	681b      	ldr	r3, [r3, #0]
90002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002414:	461a      	mov	r2, r3
90002416:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
9000241a:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
9000241c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
9000241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
90002420:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
90002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
90002424:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
90002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
90002428:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
9000242a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
9000242c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
9000242e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90002430:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
90002432:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
90002434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
90002436:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
90002438:	687a      	ldr	r2, [r7, #4]
9000243a:	6812      	ldr	r2, [r2, #0]
9000243c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90002440:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002444:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
90002446:	687b      	ldr	r3, [r7, #4]
90002448:	681b      	ldr	r3, [r3, #0]
9000244a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000244e:	681b      	ldr	r3, [r3, #0]
90002450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
90002454:	2001      	movs	r0, #1
90002456:	f7fe fe35 	bl	900010c4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
9000245a:	687b      	ldr	r3, [r7, #4]
9000245c:	681b      	ldr	r3, [r3, #0]
9000245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002462:	461a      	mov	r2, r3
90002464:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
90002468:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
9000246a:	687b      	ldr	r3, [r7, #4]
9000246c:	699b      	ldr	r3, [r3, #24]
9000246e:	2b01      	cmp	r3, #1
90002470:	d10b      	bne.n	9000248a <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
90002472:	687b      	ldr	r3, [r7, #4]
90002474:	681b      	ldr	r3, [r3, #0]
90002476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000247a:	69d9      	ldr	r1, [r3, #28]
9000247c:	687b      	ldr	r3, [r7, #4]
9000247e:	681a      	ldr	r2, [r3, #0]
90002480:	4b09      	ldr	r3, [pc, #36]	; (900024a8 <ETH_MACDMAConfig+0x388>)
90002482:	430b      	orrs	r3, r1
90002484:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002488:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
9000248a:	687b      	ldr	r3, [r7, #4]
9000248c:	695b      	ldr	r3, [r3, #20]
9000248e:	461a      	mov	r2, r3
90002490:	2100      	movs	r1, #0
90002492:	6878      	ldr	r0, [r7, #4]
90002494:	f000 f80a 	bl	900024ac <ETH_MACAddressConfig>
}
90002498:	bf00      	nop
9000249a:	37c0      	adds	r7, #192	; 0xc0
9000249c:	46bd      	mov	sp, r7
9000249e:	bd80      	pop	{r7, pc}
900024a0:	ff20810f 	.word	0xff20810f
900024a4:	f8de3f23 	.word	0xf8de3f23
900024a8:	00010040 	.word	0x00010040

900024ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
900024ac:	b480      	push	{r7}
900024ae:	b087      	sub	sp, #28
900024b0:	af00      	add	r7, sp, #0
900024b2:	60f8      	str	r0, [r7, #12]
900024b4:	60b9      	str	r1, [r7, #8]
900024b6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
900024b8:	687b      	ldr	r3, [r7, #4]
900024ba:	3305      	adds	r3, #5
900024bc:	781b      	ldrb	r3, [r3, #0]
900024be:	021b      	lsls	r3, r3, #8
900024c0:	687a      	ldr	r2, [r7, #4]
900024c2:	3204      	adds	r2, #4
900024c4:	7812      	ldrb	r2, [r2, #0]
900024c6:	4313      	orrs	r3, r2
900024c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
900024ca:	68ba      	ldr	r2, [r7, #8]
900024cc:	4b11      	ldr	r3, [pc, #68]	; (90002514 <ETH_MACAddressConfig+0x68>)
900024ce:	4413      	add	r3, r2
900024d0:	461a      	mov	r2, r3
900024d2:	697b      	ldr	r3, [r7, #20]
900024d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
900024d6:	687b      	ldr	r3, [r7, #4]
900024d8:	3303      	adds	r3, #3
900024da:	781b      	ldrb	r3, [r3, #0]
900024dc:	061a      	lsls	r2, r3, #24
900024de:	687b      	ldr	r3, [r7, #4]
900024e0:	3302      	adds	r3, #2
900024e2:	781b      	ldrb	r3, [r3, #0]
900024e4:	041b      	lsls	r3, r3, #16
900024e6:	431a      	orrs	r2, r3
900024e8:	687b      	ldr	r3, [r7, #4]
900024ea:	3301      	adds	r3, #1
900024ec:	781b      	ldrb	r3, [r3, #0]
900024ee:	021b      	lsls	r3, r3, #8
900024f0:	4313      	orrs	r3, r2
900024f2:	687a      	ldr	r2, [r7, #4]
900024f4:	7812      	ldrb	r2, [r2, #0]
900024f6:	4313      	orrs	r3, r2
900024f8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
900024fa:	68ba      	ldr	r2, [r7, #8]
900024fc:	4b06      	ldr	r3, [pc, #24]	; (90002518 <ETH_MACAddressConfig+0x6c>)
900024fe:	4413      	add	r3, r2
90002500:	461a      	mov	r2, r3
90002502:	697b      	ldr	r3, [r7, #20]
90002504:	6013      	str	r3, [r2, #0]
}
90002506:	bf00      	nop
90002508:	371c      	adds	r7, #28
9000250a:	46bd      	mov	sp, r7
9000250c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002510:	4770      	bx	lr
90002512:	bf00      	nop
90002514:	40028040 	.word	0x40028040
90002518:	40028044 	.word	0x40028044

9000251c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
9000251c:	b580      	push	{r7, lr}
9000251e:	b084      	sub	sp, #16
90002520:	af00      	add	r7, sp, #0
90002522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
90002524:	2300      	movs	r3, #0
90002526:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
90002528:	687b      	ldr	r3, [r7, #4]
9000252a:	681b      	ldr	r3, [r3, #0]
9000252c:	681a      	ldr	r2, [r3, #0]
9000252e:	687b      	ldr	r3, [r7, #4]
90002530:	681b      	ldr	r3, [r3, #0]
90002532:	f042 0208 	orr.w	r2, r2, #8
90002536:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
90002538:	687b      	ldr	r3, [r7, #4]
9000253a:	681b      	ldr	r3, [r3, #0]
9000253c:	681b      	ldr	r3, [r3, #0]
9000253e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90002540:	2001      	movs	r0, #1
90002542:	f7fe fdbf 	bl	900010c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
90002546:	687b      	ldr	r3, [r7, #4]
90002548:	681b      	ldr	r3, [r3, #0]
9000254a:	68fa      	ldr	r2, [r7, #12]
9000254c:	601a      	str	r2, [r3, #0]
}
9000254e:	bf00      	nop
90002550:	3710      	adds	r7, #16
90002552:	46bd      	mov	sp, r7
90002554:	bd80      	pop	{r7, pc}

90002556 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
90002556:	b580      	push	{r7, lr}
90002558:	b084      	sub	sp, #16
9000255a:	af00      	add	r7, sp, #0
9000255c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
9000255e:	2300      	movs	r3, #0
90002560:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
90002562:	687b      	ldr	r3, [r7, #4]
90002564:	681b      	ldr	r3, [r3, #0]
90002566:	681a      	ldr	r2, [r3, #0]
90002568:	687b      	ldr	r3, [r7, #4]
9000256a:	681b      	ldr	r3, [r3, #0]
9000256c:	f022 0208 	bic.w	r2, r2, #8
90002570:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
90002572:	687b      	ldr	r3, [r7, #4]
90002574:	681b      	ldr	r3, [r3, #0]
90002576:	681b      	ldr	r3, [r3, #0]
90002578:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
9000257a:	2001      	movs	r0, #1
9000257c:	f7fe fda2 	bl	900010c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
90002580:	687b      	ldr	r3, [r7, #4]
90002582:	681b      	ldr	r3, [r3, #0]
90002584:	68fa      	ldr	r2, [r7, #12]
90002586:	601a      	str	r2, [r3, #0]
}
90002588:	bf00      	nop
9000258a:	3710      	adds	r7, #16
9000258c:	46bd      	mov	sp, r7
9000258e:	bd80      	pop	{r7, pc}

90002590 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
90002590:	b580      	push	{r7, lr}
90002592:	b084      	sub	sp, #16
90002594:	af00      	add	r7, sp, #0
90002596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
90002598:	2300      	movs	r3, #0
9000259a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
9000259c:	687b      	ldr	r3, [r7, #4]
9000259e:	681b      	ldr	r3, [r3, #0]
900025a0:	681a      	ldr	r2, [r3, #0]
900025a2:	687b      	ldr	r3, [r7, #4]
900025a4:	681b      	ldr	r3, [r3, #0]
900025a6:	f042 0204 	orr.w	r2, r2, #4
900025aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
900025ac:	687b      	ldr	r3, [r7, #4]
900025ae:	681b      	ldr	r3, [r3, #0]
900025b0:	681b      	ldr	r3, [r3, #0]
900025b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
900025b4:	2001      	movs	r0, #1
900025b6:	f7fe fd85 	bl	900010c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
900025ba:	687b      	ldr	r3, [r7, #4]
900025bc:	681b      	ldr	r3, [r3, #0]
900025be:	68fa      	ldr	r2, [r7, #12]
900025c0:	601a      	str	r2, [r3, #0]
}
900025c2:	bf00      	nop
900025c4:	3710      	adds	r7, #16
900025c6:	46bd      	mov	sp, r7
900025c8:	bd80      	pop	{r7, pc}

900025ca <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
900025ca:	b580      	push	{r7, lr}
900025cc:	b084      	sub	sp, #16
900025ce:	af00      	add	r7, sp, #0
900025d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
900025d2:	2300      	movs	r3, #0
900025d4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
900025d6:	687b      	ldr	r3, [r7, #4]
900025d8:	681b      	ldr	r3, [r3, #0]
900025da:	681a      	ldr	r2, [r3, #0]
900025dc:	687b      	ldr	r3, [r7, #4]
900025de:	681b      	ldr	r3, [r3, #0]
900025e0:	f022 0204 	bic.w	r2, r2, #4
900025e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
900025e6:	687b      	ldr	r3, [r7, #4]
900025e8:	681b      	ldr	r3, [r3, #0]
900025ea:	681b      	ldr	r3, [r3, #0]
900025ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
900025ee:	2001      	movs	r0, #1
900025f0:	f7fe fd68 	bl	900010c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
900025f4:	687b      	ldr	r3, [r7, #4]
900025f6:	681b      	ldr	r3, [r3, #0]
900025f8:	68fa      	ldr	r2, [r7, #12]
900025fa:	601a      	str	r2, [r3, #0]
}
900025fc:	bf00      	nop
900025fe:	3710      	adds	r7, #16
90002600:	46bd      	mov	sp, r7
90002602:	bd80      	pop	{r7, pc}

90002604 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
90002604:	b480      	push	{r7}
90002606:	b083      	sub	sp, #12
90002608:	af00      	add	r7, sp, #0
9000260a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
9000260c:	687b      	ldr	r3, [r7, #4]
9000260e:	681b      	ldr	r3, [r3, #0]
90002610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002614:	699b      	ldr	r3, [r3, #24]
90002616:	687a      	ldr	r2, [r7, #4]
90002618:	6812      	ldr	r2, [r2, #0]
9000261a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000261e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002622:	6193      	str	r3, [r2, #24]
}
90002624:	bf00      	nop
90002626:	370c      	adds	r7, #12
90002628:	46bd      	mov	sp, r7
9000262a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000262e:	4770      	bx	lr

90002630 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
90002630:	b480      	push	{r7}
90002632:	b083      	sub	sp, #12
90002634:	af00      	add	r7, sp, #0
90002636:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
90002638:	687b      	ldr	r3, [r7, #4]
9000263a:	681b      	ldr	r3, [r3, #0]
9000263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002640:	699b      	ldr	r3, [r3, #24]
90002642:	687a      	ldr	r2, [r7, #4]
90002644:	6812      	ldr	r2, [r2, #0]
90002646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000264a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000264e:	6193      	str	r3, [r2, #24]
}
90002650:	bf00      	nop
90002652:	370c      	adds	r7, #12
90002654:	46bd      	mov	sp, r7
90002656:	f85d 7b04 	ldr.w	r7, [sp], #4
9000265a:	4770      	bx	lr

9000265c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
9000265c:	b480      	push	{r7}
9000265e:	b083      	sub	sp, #12
90002660:	af00      	add	r7, sp, #0
90002662:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
90002664:	687b      	ldr	r3, [r7, #4]
90002666:	681b      	ldr	r3, [r3, #0]
90002668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000266c:	699b      	ldr	r3, [r3, #24]
9000266e:	687a      	ldr	r2, [r7, #4]
90002670:	6812      	ldr	r2, [r2, #0]
90002672:	f043 0302 	orr.w	r3, r3, #2
90002676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000267a:	6193      	str	r3, [r2, #24]
}
9000267c:	bf00      	nop
9000267e:	370c      	adds	r7, #12
90002680:	46bd      	mov	sp, r7
90002682:	f85d 7b04 	ldr.w	r7, [sp], #4
90002686:	4770      	bx	lr

90002688 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
90002688:	b480      	push	{r7}
9000268a:	b083      	sub	sp, #12
9000268c:	af00      	add	r7, sp, #0
9000268e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
90002690:	687b      	ldr	r3, [r7, #4]
90002692:	681b      	ldr	r3, [r3, #0]
90002694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002698:	699b      	ldr	r3, [r3, #24]
9000269a:	687a      	ldr	r2, [r7, #4]
9000269c:	6812      	ldr	r2, [r2, #0]
9000269e:	f023 0302 	bic.w	r3, r3, #2
900026a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900026a6:	6193      	str	r3, [r2, #24]
}
900026a8:	bf00      	nop
900026aa:	370c      	adds	r7, #12
900026ac:	46bd      	mov	sp, r7
900026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900026b2:	4770      	bx	lr

900026b4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
900026b4:	b580      	push	{r7, lr}
900026b6:	b084      	sub	sp, #16
900026b8:	af00      	add	r7, sp, #0
900026ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
900026bc:	2300      	movs	r3, #0
900026be:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
900026c0:	687b      	ldr	r3, [r7, #4]
900026c2:	681b      	ldr	r3, [r3, #0]
900026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900026c8:	699b      	ldr	r3, [r3, #24]
900026ca:	687a      	ldr	r2, [r7, #4]
900026cc:	6812      	ldr	r2, [r2, #0]
900026ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
900026d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900026d6:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
900026d8:	687b      	ldr	r3, [r7, #4]
900026da:	681b      	ldr	r3, [r3, #0]
900026dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900026e0:	699b      	ldr	r3, [r3, #24]
900026e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
900026e4:	2001      	movs	r0, #1
900026e6:	f7fe fced 	bl	900010c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
900026ea:	687b      	ldr	r3, [r7, #4]
900026ec:	681a      	ldr	r2, [r3, #0]
900026ee:	68fb      	ldr	r3, [r7, #12]
900026f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900026f4:	6193      	str	r3, [r2, #24]
}
900026f6:	bf00      	nop
900026f8:	3710      	adds	r7, #16
900026fa:	46bd      	mov	sp, r7
900026fc:	bd80      	pop	{r7, pc}
	...

90002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90002700:	b480      	push	{r7}
90002702:	b089      	sub	sp, #36	; 0x24
90002704:	af00      	add	r7, sp, #0
90002706:	6078      	str	r0, [r7, #4]
90002708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
9000270a:	2300      	movs	r3, #0
9000270c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
9000270e:	2300      	movs	r3, #0
90002710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
90002712:	2300      	movs	r3, #0
90002714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
90002716:	2300      	movs	r3, #0
90002718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
9000271a:	2300      	movs	r3, #0
9000271c:	61fb      	str	r3, [r7, #28]
9000271e:	e175      	b.n	90002a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
90002720:	2201      	movs	r2, #1
90002722:	69fb      	ldr	r3, [r7, #28]
90002724:	fa02 f303 	lsl.w	r3, r2, r3
90002728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
9000272a:	683b      	ldr	r3, [r7, #0]
9000272c:	681b      	ldr	r3, [r3, #0]
9000272e:	697a      	ldr	r2, [r7, #20]
90002730:	4013      	ands	r3, r2
90002732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
90002734:	693a      	ldr	r2, [r7, #16]
90002736:	697b      	ldr	r3, [r7, #20]
90002738:	429a      	cmp	r2, r3
9000273a:	f040 8164 	bne.w	90002a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
9000273e:	683b      	ldr	r3, [r7, #0]
90002740:	685b      	ldr	r3, [r3, #4]
90002742:	f003 0303 	and.w	r3, r3, #3
90002746:	2b01      	cmp	r3, #1
90002748:	d005      	beq.n	90002756 <HAL_GPIO_Init+0x56>
9000274a:	683b      	ldr	r3, [r7, #0]
9000274c:	685b      	ldr	r3, [r3, #4]
9000274e:	f003 0303 	and.w	r3, r3, #3
90002752:	2b02      	cmp	r3, #2
90002754:	d130      	bne.n	900027b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
90002756:	687b      	ldr	r3, [r7, #4]
90002758:	689b      	ldr	r3, [r3, #8]
9000275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
9000275c:	69fb      	ldr	r3, [r7, #28]
9000275e:	005b      	lsls	r3, r3, #1
90002760:	2203      	movs	r2, #3
90002762:	fa02 f303 	lsl.w	r3, r2, r3
90002766:	43db      	mvns	r3, r3
90002768:	69ba      	ldr	r2, [r7, #24]
9000276a:	4013      	ands	r3, r2
9000276c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
9000276e:	683b      	ldr	r3, [r7, #0]
90002770:	68da      	ldr	r2, [r3, #12]
90002772:	69fb      	ldr	r3, [r7, #28]
90002774:	005b      	lsls	r3, r3, #1
90002776:	fa02 f303 	lsl.w	r3, r2, r3
9000277a:	69ba      	ldr	r2, [r7, #24]
9000277c:	4313      	orrs	r3, r2
9000277e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90002780:	687b      	ldr	r3, [r7, #4]
90002782:	69ba      	ldr	r2, [r7, #24]
90002784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90002786:	687b      	ldr	r3, [r7, #4]
90002788:	685b      	ldr	r3, [r3, #4]
9000278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
9000278c:	2201      	movs	r2, #1
9000278e:	69fb      	ldr	r3, [r7, #28]
90002790:	fa02 f303 	lsl.w	r3, r2, r3
90002794:	43db      	mvns	r3, r3
90002796:	69ba      	ldr	r2, [r7, #24]
90002798:	4013      	ands	r3, r2
9000279a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000279c:	683b      	ldr	r3, [r7, #0]
9000279e:	685b      	ldr	r3, [r3, #4]
900027a0:	091b      	lsrs	r3, r3, #4
900027a2:	f003 0201 	and.w	r2, r3, #1
900027a6:	69fb      	ldr	r3, [r7, #28]
900027a8:	fa02 f303 	lsl.w	r3, r2, r3
900027ac:	69ba      	ldr	r2, [r7, #24]
900027ae:	4313      	orrs	r3, r2
900027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
900027b2:	687b      	ldr	r3, [r7, #4]
900027b4:	69ba      	ldr	r2, [r7, #24]
900027b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
900027b8:	683b      	ldr	r3, [r7, #0]
900027ba:	685b      	ldr	r3, [r3, #4]
900027bc:	f003 0303 	and.w	r3, r3, #3
900027c0:	2b03      	cmp	r3, #3
900027c2:	d017      	beq.n	900027f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
900027c4:	687b      	ldr	r3, [r7, #4]
900027c6:	68db      	ldr	r3, [r3, #12]
900027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
900027ca:	69fb      	ldr	r3, [r7, #28]
900027cc:	005b      	lsls	r3, r3, #1
900027ce:	2203      	movs	r2, #3
900027d0:	fa02 f303 	lsl.w	r3, r2, r3
900027d4:	43db      	mvns	r3, r3
900027d6:	69ba      	ldr	r2, [r7, #24]
900027d8:	4013      	ands	r3, r2
900027da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
900027dc:	683b      	ldr	r3, [r7, #0]
900027de:	689a      	ldr	r2, [r3, #8]
900027e0:	69fb      	ldr	r3, [r7, #28]
900027e2:	005b      	lsls	r3, r3, #1
900027e4:	fa02 f303 	lsl.w	r3, r2, r3
900027e8:	69ba      	ldr	r2, [r7, #24]
900027ea:	4313      	orrs	r3, r2
900027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
900027ee:	687b      	ldr	r3, [r7, #4]
900027f0:	69ba      	ldr	r2, [r7, #24]
900027f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
900027f4:	683b      	ldr	r3, [r7, #0]
900027f6:	685b      	ldr	r3, [r3, #4]
900027f8:	f003 0303 	and.w	r3, r3, #3
900027fc:	2b02      	cmp	r3, #2
900027fe:	d123      	bne.n	90002848 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
90002800:	69fb      	ldr	r3, [r7, #28]
90002802:	08da      	lsrs	r2, r3, #3
90002804:	687b      	ldr	r3, [r7, #4]
90002806:	3208      	adds	r2, #8
90002808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
9000280e:	69fb      	ldr	r3, [r7, #28]
90002810:	f003 0307 	and.w	r3, r3, #7
90002814:	009b      	lsls	r3, r3, #2
90002816:	220f      	movs	r2, #15
90002818:	fa02 f303 	lsl.w	r3, r2, r3
9000281c:	43db      	mvns	r3, r3
9000281e:	69ba      	ldr	r2, [r7, #24]
90002820:	4013      	ands	r3, r2
90002822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90002824:	683b      	ldr	r3, [r7, #0]
90002826:	691a      	ldr	r2, [r3, #16]
90002828:	69fb      	ldr	r3, [r7, #28]
9000282a:	f003 0307 	and.w	r3, r3, #7
9000282e:	009b      	lsls	r3, r3, #2
90002830:	fa02 f303 	lsl.w	r3, r2, r3
90002834:	69ba      	ldr	r2, [r7, #24]
90002836:	4313      	orrs	r3, r2
90002838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
9000283a:	69fb      	ldr	r3, [r7, #28]
9000283c:	08da      	lsrs	r2, r3, #3
9000283e:	687b      	ldr	r3, [r7, #4]
90002840:	3208      	adds	r2, #8
90002842:	69b9      	ldr	r1, [r7, #24]
90002844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90002848:	687b      	ldr	r3, [r7, #4]
9000284a:	681b      	ldr	r3, [r3, #0]
9000284c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
9000284e:	69fb      	ldr	r3, [r7, #28]
90002850:	005b      	lsls	r3, r3, #1
90002852:	2203      	movs	r2, #3
90002854:	fa02 f303 	lsl.w	r3, r2, r3
90002858:	43db      	mvns	r3, r3
9000285a:	69ba      	ldr	r2, [r7, #24]
9000285c:	4013      	ands	r3, r2
9000285e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90002860:	683b      	ldr	r3, [r7, #0]
90002862:	685b      	ldr	r3, [r3, #4]
90002864:	f003 0203 	and.w	r2, r3, #3
90002868:	69fb      	ldr	r3, [r7, #28]
9000286a:	005b      	lsls	r3, r3, #1
9000286c:	fa02 f303 	lsl.w	r3, r2, r3
90002870:	69ba      	ldr	r2, [r7, #24]
90002872:	4313      	orrs	r3, r2
90002874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90002876:	687b      	ldr	r3, [r7, #4]
90002878:	69ba      	ldr	r2, [r7, #24]
9000287a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
9000287c:	683b      	ldr	r3, [r7, #0]
9000287e:	685b      	ldr	r3, [r3, #4]
90002880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002884:	2b00      	cmp	r3, #0
90002886:	f000 80be 	beq.w	90002a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000288a:	4b66      	ldr	r3, [pc, #408]	; (90002a24 <HAL_GPIO_Init+0x324>)
9000288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000288e:	4a65      	ldr	r2, [pc, #404]	; (90002a24 <HAL_GPIO_Init+0x324>)
90002890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90002894:	6453      	str	r3, [r2, #68]	; 0x44
90002896:	4b63      	ldr	r3, [pc, #396]	; (90002a24 <HAL_GPIO_Init+0x324>)
90002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000289e:	60fb      	str	r3, [r7, #12]
900028a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
900028a2:	4a61      	ldr	r2, [pc, #388]	; (90002a28 <HAL_GPIO_Init+0x328>)
900028a4:	69fb      	ldr	r3, [r7, #28]
900028a6:	089b      	lsrs	r3, r3, #2
900028a8:	3302      	adds	r3, #2
900028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
900028b0:	69fb      	ldr	r3, [r7, #28]
900028b2:	f003 0303 	and.w	r3, r3, #3
900028b6:	009b      	lsls	r3, r3, #2
900028b8:	220f      	movs	r2, #15
900028ba:	fa02 f303 	lsl.w	r3, r2, r3
900028be:	43db      	mvns	r3, r3
900028c0:	69ba      	ldr	r2, [r7, #24]
900028c2:	4013      	ands	r3, r2
900028c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900028c6:	687b      	ldr	r3, [r7, #4]
900028c8:	4a58      	ldr	r2, [pc, #352]	; (90002a2c <HAL_GPIO_Init+0x32c>)
900028ca:	4293      	cmp	r3, r2
900028cc:	d037      	beq.n	9000293e <HAL_GPIO_Init+0x23e>
900028ce:	687b      	ldr	r3, [r7, #4]
900028d0:	4a57      	ldr	r2, [pc, #348]	; (90002a30 <HAL_GPIO_Init+0x330>)
900028d2:	4293      	cmp	r3, r2
900028d4:	d031      	beq.n	9000293a <HAL_GPIO_Init+0x23a>
900028d6:	687b      	ldr	r3, [r7, #4]
900028d8:	4a56      	ldr	r2, [pc, #344]	; (90002a34 <HAL_GPIO_Init+0x334>)
900028da:	4293      	cmp	r3, r2
900028dc:	d02b      	beq.n	90002936 <HAL_GPIO_Init+0x236>
900028de:	687b      	ldr	r3, [r7, #4]
900028e0:	4a55      	ldr	r2, [pc, #340]	; (90002a38 <HAL_GPIO_Init+0x338>)
900028e2:	4293      	cmp	r3, r2
900028e4:	d025      	beq.n	90002932 <HAL_GPIO_Init+0x232>
900028e6:	687b      	ldr	r3, [r7, #4]
900028e8:	4a54      	ldr	r2, [pc, #336]	; (90002a3c <HAL_GPIO_Init+0x33c>)
900028ea:	4293      	cmp	r3, r2
900028ec:	d01f      	beq.n	9000292e <HAL_GPIO_Init+0x22e>
900028ee:	687b      	ldr	r3, [r7, #4]
900028f0:	4a53      	ldr	r2, [pc, #332]	; (90002a40 <HAL_GPIO_Init+0x340>)
900028f2:	4293      	cmp	r3, r2
900028f4:	d019      	beq.n	9000292a <HAL_GPIO_Init+0x22a>
900028f6:	687b      	ldr	r3, [r7, #4]
900028f8:	4a52      	ldr	r2, [pc, #328]	; (90002a44 <HAL_GPIO_Init+0x344>)
900028fa:	4293      	cmp	r3, r2
900028fc:	d013      	beq.n	90002926 <HAL_GPIO_Init+0x226>
900028fe:	687b      	ldr	r3, [r7, #4]
90002900:	4a51      	ldr	r2, [pc, #324]	; (90002a48 <HAL_GPIO_Init+0x348>)
90002902:	4293      	cmp	r3, r2
90002904:	d00d      	beq.n	90002922 <HAL_GPIO_Init+0x222>
90002906:	687b      	ldr	r3, [r7, #4]
90002908:	4a50      	ldr	r2, [pc, #320]	; (90002a4c <HAL_GPIO_Init+0x34c>)
9000290a:	4293      	cmp	r3, r2
9000290c:	d007      	beq.n	9000291e <HAL_GPIO_Init+0x21e>
9000290e:	687b      	ldr	r3, [r7, #4]
90002910:	4a4f      	ldr	r2, [pc, #316]	; (90002a50 <HAL_GPIO_Init+0x350>)
90002912:	4293      	cmp	r3, r2
90002914:	d101      	bne.n	9000291a <HAL_GPIO_Init+0x21a>
90002916:	2309      	movs	r3, #9
90002918:	e012      	b.n	90002940 <HAL_GPIO_Init+0x240>
9000291a:	230a      	movs	r3, #10
9000291c:	e010      	b.n	90002940 <HAL_GPIO_Init+0x240>
9000291e:	2308      	movs	r3, #8
90002920:	e00e      	b.n	90002940 <HAL_GPIO_Init+0x240>
90002922:	2307      	movs	r3, #7
90002924:	e00c      	b.n	90002940 <HAL_GPIO_Init+0x240>
90002926:	2306      	movs	r3, #6
90002928:	e00a      	b.n	90002940 <HAL_GPIO_Init+0x240>
9000292a:	2305      	movs	r3, #5
9000292c:	e008      	b.n	90002940 <HAL_GPIO_Init+0x240>
9000292e:	2304      	movs	r3, #4
90002930:	e006      	b.n	90002940 <HAL_GPIO_Init+0x240>
90002932:	2303      	movs	r3, #3
90002934:	e004      	b.n	90002940 <HAL_GPIO_Init+0x240>
90002936:	2302      	movs	r3, #2
90002938:	e002      	b.n	90002940 <HAL_GPIO_Init+0x240>
9000293a:	2301      	movs	r3, #1
9000293c:	e000      	b.n	90002940 <HAL_GPIO_Init+0x240>
9000293e:	2300      	movs	r3, #0
90002940:	69fa      	ldr	r2, [r7, #28]
90002942:	f002 0203 	and.w	r2, r2, #3
90002946:	0092      	lsls	r2, r2, #2
90002948:	4093      	lsls	r3, r2
9000294a:	69ba      	ldr	r2, [r7, #24]
9000294c:	4313      	orrs	r3, r2
9000294e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
90002950:	4935      	ldr	r1, [pc, #212]	; (90002a28 <HAL_GPIO_Init+0x328>)
90002952:	69fb      	ldr	r3, [r7, #28]
90002954:	089b      	lsrs	r3, r3, #2
90002956:	3302      	adds	r3, #2
90002958:	69ba      	ldr	r2, [r7, #24]
9000295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
9000295e:	4b3d      	ldr	r3, [pc, #244]	; (90002a54 <HAL_GPIO_Init+0x354>)
90002960:	689b      	ldr	r3, [r3, #8]
90002962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002964:	693b      	ldr	r3, [r7, #16]
90002966:	43db      	mvns	r3, r3
90002968:	69ba      	ldr	r2, [r7, #24]
9000296a:	4013      	ands	r3, r2
9000296c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
9000296e:	683b      	ldr	r3, [r7, #0]
90002970:	685b      	ldr	r3, [r3, #4]
90002972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90002976:	2b00      	cmp	r3, #0
90002978:	d003      	beq.n	90002982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
9000297a:	69ba      	ldr	r2, [r7, #24]
9000297c:	693b      	ldr	r3, [r7, #16]
9000297e:	4313      	orrs	r3, r2
90002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
90002982:	4a34      	ldr	r2, [pc, #208]	; (90002a54 <HAL_GPIO_Init+0x354>)
90002984:	69bb      	ldr	r3, [r7, #24]
90002986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
90002988:	4b32      	ldr	r3, [pc, #200]	; (90002a54 <HAL_GPIO_Init+0x354>)
9000298a:	68db      	ldr	r3, [r3, #12]
9000298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
9000298e:	693b      	ldr	r3, [r7, #16]
90002990:	43db      	mvns	r3, r3
90002992:	69ba      	ldr	r2, [r7, #24]
90002994:	4013      	ands	r3, r2
90002996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
90002998:	683b      	ldr	r3, [r7, #0]
9000299a:	685b      	ldr	r3, [r3, #4]
9000299c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900029a0:	2b00      	cmp	r3, #0
900029a2:	d003      	beq.n	900029ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
900029a4:	69ba      	ldr	r2, [r7, #24]
900029a6:	693b      	ldr	r3, [r7, #16]
900029a8:	4313      	orrs	r3, r2
900029aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
900029ac:	4a29      	ldr	r2, [pc, #164]	; (90002a54 <HAL_GPIO_Init+0x354>)
900029ae:	69bb      	ldr	r3, [r7, #24]
900029b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
900029b2:	4b28      	ldr	r3, [pc, #160]	; (90002a54 <HAL_GPIO_Init+0x354>)
900029b4:	685b      	ldr	r3, [r3, #4]
900029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
900029b8:	693b      	ldr	r3, [r7, #16]
900029ba:	43db      	mvns	r3, r3
900029bc:	69ba      	ldr	r2, [r7, #24]
900029be:	4013      	ands	r3, r2
900029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
900029c2:	683b      	ldr	r3, [r7, #0]
900029c4:	685b      	ldr	r3, [r3, #4]
900029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900029ca:	2b00      	cmp	r3, #0
900029cc:	d003      	beq.n	900029d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
900029ce:	69ba      	ldr	r2, [r7, #24]
900029d0:	693b      	ldr	r3, [r7, #16]
900029d2:	4313      	orrs	r3, r2
900029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
900029d6:	4a1f      	ldr	r2, [pc, #124]	; (90002a54 <HAL_GPIO_Init+0x354>)
900029d8:	69bb      	ldr	r3, [r7, #24]
900029da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
900029dc:	4b1d      	ldr	r3, [pc, #116]	; (90002a54 <HAL_GPIO_Init+0x354>)
900029de:	681b      	ldr	r3, [r3, #0]
900029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
900029e2:	693b      	ldr	r3, [r7, #16]
900029e4:	43db      	mvns	r3, r3
900029e6:	69ba      	ldr	r2, [r7, #24]
900029e8:	4013      	ands	r3, r2
900029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
900029ec:	683b      	ldr	r3, [r7, #0]
900029ee:	685b      	ldr	r3, [r3, #4]
900029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900029f4:	2b00      	cmp	r3, #0
900029f6:	d003      	beq.n	90002a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
900029f8:	69ba      	ldr	r2, [r7, #24]
900029fa:	693b      	ldr	r3, [r7, #16]
900029fc:	4313      	orrs	r3, r2
900029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
90002a00:	4a14      	ldr	r2, [pc, #80]	; (90002a54 <HAL_GPIO_Init+0x354>)
90002a02:	69bb      	ldr	r3, [r7, #24]
90002a04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
90002a06:	69fb      	ldr	r3, [r7, #28]
90002a08:	3301      	adds	r3, #1
90002a0a:	61fb      	str	r3, [r7, #28]
90002a0c:	69fb      	ldr	r3, [r7, #28]
90002a0e:	2b0f      	cmp	r3, #15
90002a10:	f67f ae86 	bls.w	90002720 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
90002a14:	bf00      	nop
90002a16:	bf00      	nop
90002a18:	3724      	adds	r7, #36	; 0x24
90002a1a:	46bd      	mov	sp, r7
90002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002a20:	4770      	bx	lr
90002a22:	bf00      	nop
90002a24:	40023800 	.word	0x40023800
90002a28:	40013800 	.word	0x40013800
90002a2c:	40020000 	.word	0x40020000
90002a30:	40020400 	.word	0x40020400
90002a34:	40020800 	.word	0x40020800
90002a38:	40020c00 	.word	0x40020c00
90002a3c:	40021000 	.word	0x40021000
90002a40:	40021400 	.word	0x40021400
90002a44:	40021800 	.word	0x40021800
90002a48:	40021c00 	.word	0x40021c00
90002a4c:	40022000 	.word	0x40022000
90002a50:	40022400 	.word	0x40022400
90002a54:	40013c00 	.word	0x40013c00

90002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90002a58:	b480      	push	{r7}
90002a5a:	b083      	sub	sp, #12
90002a5c:	af00      	add	r7, sp, #0
90002a5e:	6078      	str	r0, [r7, #4]
90002a60:	460b      	mov	r3, r1
90002a62:	807b      	strh	r3, [r7, #2]
90002a64:	4613      	mov	r3, r2
90002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90002a68:	787b      	ldrb	r3, [r7, #1]
90002a6a:	2b00      	cmp	r3, #0
90002a6c:	d003      	beq.n	90002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90002a6e:	887a      	ldrh	r2, [r7, #2]
90002a70:	687b      	ldr	r3, [r7, #4]
90002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
90002a74:	e003      	b.n	90002a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90002a76:	887b      	ldrh	r3, [r7, #2]
90002a78:	041a      	lsls	r2, r3, #16
90002a7a:	687b      	ldr	r3, [r7, #4]
90002a7c:	619a      	str	r2, [r3, #24]
}
90002a7e:	bf00      	nop
90002a80:	370c      	adds	r7, #12
90002a82:	46bd      	mov	sp, r7
90002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
90002a88:	4770      	bx	lr
	...

90002a8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
90002a8c:	b580      	push	{r7, lr}
90002a8e:	b082      	sub	sp, #8
90002a90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
90002a92:	2300      	movs	r3, #0
90002a94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
90002a96:	4b23      	ldr	r3, [pc, #140]	; (90002b24 <HAL_PWREx_EnableOverDrive+0x98>)
90002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002a9a:	4a22      	ldr	r2, [pc, #136]	; (90002b24 <HAL_PWREx_EnableOverDrive+0x98>)
90002a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90002aa0:	6413      	str	r3, [r2, #64]	; 0x40
90002aa2:	4b20      	ldr	r3, [pc, #128]	; (90002b24 <HAL_PWREx_EnableOverDrive+0x98>)
90002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002aaa:	603b      	str	r3, [r7, #0]
90002aac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90002aae:	4b1e      	ldr	r3, [pc, #120]	; (90002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
90002ab0:	681b      	ldr	r3, [r3, #0]
90002ab2:	4a1d      	ldr	r2, [pc, #116]	; (90002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
90002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90002ab8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90002aba:	f7fe faf7 	bl	900010ac <HAL_GetTick>
90002abe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90002ac0:	e009      	b.n	90002ad6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90002ac2:	f7fe faf3 	bl	900010ac <HAL_GetTick>
90002ac6:	4602      	mov	r2, r0
90002ac8:	687b      	ldr	r3, [r7, #4]
90002aca:	1ad3      	subs	r3, r2, r3
90002acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90002ad0:	d901      	bls.n	90002ad6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
90002ad2:	2303      	movs	r3, #3
90002ad4:	e022      	b.n	90002b1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90002ad6:	4b14      	ldr	r3, [pc, #80]	; (90002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
90002ad8:	685b      	ldr	r3, [r3, #4]
90002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90002ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90002ae2:	d1ee      	bne.n	90002ac2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90002ae4:	4b10      	ldr	r3, [pc, #64]	; (90002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
90002ae6:	681b      	ldr	r3, [r3, #0]
90002ae8:	4a0f      	ldr	r2, [pc, #60]	; (90002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
90002aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002aee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90002af0:	f7fe fadc 	bl	900010ac <HAL_GetTick>
90002af4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90002af6:	e009      	b.n	90002b0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90002af8:	f7fe fad8 	bl	900010ac <HAL_GetTick>
90002afc:	4602      	mov	r2, r0
90002afe:	687b      	ldr	r3, [r7, #4]
90002b00:	1ad3      	subs	r3, r2, r3
90002b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90002b06:	d901      	bls.n	90002b0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
90002b08:	2303      	movs	r3, #3
90002b0a:	e007      	b.n	90002b1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90002b0c:	4b06      	ldr	r3, [pc, #24]	; (90002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
90002b0e:	685b      	ldr	r3, [r3, #4]
90002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90002b18:	d1ee      	bne.n	90002af8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
90002b1a:	2300      	movs	r3, #0
}
90002b1c:	4618      	mov	r0, r3
90002b1e:	3708      	adds	r7, #8
90002b20:	46bd      	mov	sp, r7
90002b22:	bd80      	pop	{r7, pc}
90002b24:	40023800 	.word	0x40023800
90002b28:	40007000 	.word	0x40007000

90002b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90002b2c:	b580      	push	{r7, lr}
90002b2e:	b086      	sub	sp, #24
90002b30:	af00      	add	r7, sp, #0
90002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
90002b34:	2300      	movs	r3, #0
90002b36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90002b38:	687b      	ldr	r3, [r7, #4]
90002b3a:	2b00      	cmp	r3, #0
90002b3c:	d101      	bne.n	90002b42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
90002b3e:	2301      	movs	r3, #1
90002b40:	e29b      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90002b42:	687b      	ldr	r3, [r7, #4]
90002b44:	681b      	ldr	r3, [r3, #0]
90002b46:	f003 0301 	and.w	r3, r3, #1
90002b4a:	2b00      	cmp	r3, #0
90002b4c:	f000 8087 	beq.w	90002c5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90002b50:	4b96      	ldr	r3, [pc, #600]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002b52:	689b      	ldr	r3, [r3, #8]
90002b54:	f003 030c 	and.w	r3, r3, #12
90002b58:	2b04      	cmp	r3, #4
90002b5a:	d00c      	beq.n	90002b76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90002b5c:	4b93      	ldr	r3, [pc, #588]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002b5e:	689b      	ldr	r3, [r3, #8]
90002b60:	f003 030c 	and.w	r3, r3, #12
90002b64:	2b08      	cmp	r3, #8
90002b66:	d112      	bne.n	90002b8e <HAL_RCC_OscConfig+0x62>
90002b68:	4b90      	ldr	r3, [pc, #576]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002b6a:	685b      	ldr	r3, [r3, #4]
90002b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90002b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90002b74:	d10b      	bne.n	90002b8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90002b76:	4b8d      	ldr	r3, [pc, #564]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002b78:	681b      	ldr	r3, [r3, #0]
90002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002b7e:	2b00      	cmp	r3, #0
90002b80:	d06c      	beq.n	90002c5c <HAL_RCC_OscConfig+0x130>
90002b82:	687b      	ldr	r3, [r7, #4]
90002b84:	685b      	ldr	r3, [r3, #4]
90002b86:	2b00      	cmp	r3, #0
90002b88:	d168      	bne.n	90002c5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90002b8a:	2301      	movs	r3, #1
90002b8c:	e275      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90002b8e:	687b      	ldr	r3, [r7, #4]
90002b90:	685b      	ldr	r3, [r3, #4]
90002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90002b96:	d106      	bne.n	90002ba6 <HAL_RCC_OscConfig+0x7a>
90002b98:	4b84      	ldr	r3, [pc, #528]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002b9a:	681b      	ldr	r3, [r3, #0]
90002b9c:	4a83      	ldr	r2, [pc, #524]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90002ba2:	6013      	str	r3, [r2, #0]
90002ba4:	e02e      	b.n	90002c04 <HAL_RCC_OscConfig+0xd8>
90002ba6:	687b      	ldr	r3, [r7, #4]
90002ba8:	685b      	ldr	r3, [r3, #4]
90002baa:	2b00      	cmp	r3, #0
90002bac:	d10c      	bne.n	90002bc8 <HAL_RCC_OscConfig+0x9c>
90002bae:	4b7f      	ldr	r3, [pc, #508]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bb0:	681b      	ldr	r3, [r3, #0]
90002bb2:	4a7e      	ldr	r2, [pc, #504]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90002bb8:	6013      	str	r3, [r2, #0]
90002bba:	4b7c      	ldr	r3, [pc, #496]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bbc:	681b      	ldr	r3, [r3, #0]
90002bbe:	4a7b      	ldr	r2, [pc, #492]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90002bc4:	6013      	str	r3, [r2, #0]
90002bc6:	e01d      	b.n	90002c04 <HAL_RCC_OscConfig+0xd8>
90002bc8:	687b      	ldr	r3, [r7, #4]
90002bca:	685b      	ldr	r3, [r3, #4]
90002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90002bd0:	d10c      	bne.n	90002bec <HAL_RCC_OscConfig+0xc0>
90002bd2:	4b76      	ldr	r3, [pc, #472]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bd4:	681b      	ldr	r3, [r3, #0]
90002bd6:	4a75      	ldr	r2, [pc, #468]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90002bdc:	6013      	str	r3, [r2, #0]
90002bde:	4b73      	ldr	r3, [pc, #460]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002be0:	681b      	ldr	r3, [r3, #0]
90002be2:	4a72      	ldr	r2, [pc, #456]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90002be8:	6013      	str	r3, [r2, #0]
90002bea:	e00b      	b.n	90002c04 <HAL_RCC_OscConfig+0xd8>
90002bec:	4b6f      	ldr	r3, [pc, #444]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bee:	681b      	ldr	r3, [r3, #0]
90002bf0:	4a6e      	ldr	r2, [pc, #440]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90002bf6:	6013      	str	r3, [r2, #0]
90002bf8:	4b6c      	ldr	r3, [pc, #432]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bfa:	681b      	ldr	r3, [r3, #0]
90002bfc:	4a6b      	ldr	r2, [pc, #428]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90002c04:	687b      	ldr	r3, [r7, #4]
90002c06:	685b      	ldr	r3, [r3, #4]
90002c08:	2b00      	cmp	r3, #0
90002c0a:	d013      	beq.n	90002c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002c0c:	f7fe fa4e 	bl	900010ac <HAL_GetTick>
90002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90002c12:	e008      	b.n	90002c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90002c14:	f7fe fa4a 	bl	900010ac <HAL_GetTick>
90002c18:	4602      	mov	r2, r0
90002c1a:	693b      	ldr	r3, [r7, #16]
90002c1c:	1ad3      	subs	r3, r2, r3
90002c1e:	2b64      	cmp	r3, #100	; 0x64
90002c20:	d901      	bls.n	90002c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90002c22:	2303      	movs	r3, #3
90002c24:	e229      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90002c26:	4b61      	ldr	r3, [pc, #388]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002c28:	681b      	ldr	r3, [r3, #0]
90002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002c2e:	2b00      	cmp	r3, #0
90002c30:	d0f0      	beq.n	90002c14 <HAL_RCC_OscConfig+0xe8>
90002c32:	e014      	b.n	90002c5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002c34:	f7fe fa3a 	bl	900010ac <HAL_GetTick>
90002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90002c3a:	e008      	b.n	90002c4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90002c3c:	f7fe fa36 	bl	900010ac <HAL_GetTick>
90002c40:	4602      	mov	r2, r0
90002c42:	693b      	ldr	r3, [r7, #16]
90002c44:	1ad3      	subs	r3, r2, r3
90002c46:	2b64      	cmp	r3, #100	; 0x64
90002c48:	d901      	bls.n	90002c4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90002c4a:	2303      	movs	r3, #3
90002c4c:	e215      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90002c4e:	4b57      	ldr	r3, [pc, #348]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002c50:	681b      	ldr	r3, [r3, #0]
90002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002c56:	2b00      	cmp	r3, #0
90002c58:	d1f0      	bne.n	90002c3c <HAL_RCC_OscConfig+0x110>
90002c5a:	e000      	b.n	90002c5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90002c5e:	687b      	ldr	r3, [r7, #4]
90002c60:	681b      	ldr	r3, [r3, #0]
90002c62:	f003 0302 	and.w	r3, r3, #2
90002c66:	2b00      	cmp	r3, #0
90002c68:	d069      	beq.n	90002d3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
90002c6a:	4b50      	ldr	r3, [pc, #320]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002c6c:	689b      	ldr	r3, [r3, #8]
90002c6e:	f003 030c 	and.w	r3, r3, #12
90002c72:	2b00      	cmp	r3, #0
90002c74:	d00b      	beq.n	90002c8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
90002c76:	4b4d      	ldr	r3, [pc, #308]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002c78:	689b      	ldr	r3, [r3, #8]
90002c7a:	f003 030c 	and.w	r3, r3, #12
90002c7e:	2b08      	cmp	r3, #8
90002c80:	d11c      	bne.n	90002cbc <HAL_RCC_OscConfig+0x190>
90002c82:	4b4a      	ldr	r3, [pc, #296]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002c84:	685b      	ldr	r3, [r3, #4]
90002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90002c8a:	2b00      	cmp	r3, #0
90002c8c:	d116      	bne.n	90002cbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90002c8e:	4b47      	ldr	r3, [pc, #284]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002c90:	681b      	ldr	r3, [r3, #0]
90002c92:	f003 0302 	and.w	r3, r3, #2
90002c96:	2b00      	cmp	r3, #0
90002c98:	d005      	beq.n	90002ca6 <HAL_RCC_OscConfig+0x17a>
90002c9a:	687b      	ldr	r3, [r7, #4]
90002c9c:	68db      	ldr	r3, [r3, #12]
90002c9e:	2b01      	cmp	r3, #1
90002ca0:	d001      	beq.n	90002ca6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
90002ca2:	2301      	movs	r3, #1
90002ca4:	e1e9      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90002ca6:	4b41      	ldr	r3, [pc, #260]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002ca8:	681b      	ldr	r3, [r3, #0]
90002caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
90002cae:	687b      	ldr	r3, [r7, #4]
90002cb0:	691b      	ldr	r3, [r3, #16]
90002cb2:	00db      	lsls	r3, r3, #3
90002cb4:	493d      	ldr	r1, [pc, #244]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002cb6:	4313      	orrs	r3, r2
90002cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90002cba:	e040      	b.n	90002d3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90002cbc:	687b      	ldr	r3, [r7, #4]
90002cbe:	68db      	ldr	r3, [r3, #12]
90002cc0:	2b00      	cmp	r3, #0
90002cc2:	d023      	beq.n	90002d0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
90002cc4:	4b39      	ldr	r3, [pc, #228]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002cc6:	681b      	ldr	r3, [r3, #0]
90002cc8:	4a38      	ldr	r2, [pc, #224]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002cca:	f043 0301 	orr.w	r3, r3, #1
90002cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002cd0:	f7fe f9ec 	bl	900010ac <HAL_GetTick>
90002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90002cd6:	e008      	b.n	90002cea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90002cd8:	f7fe f9e8 	bl	900010ac <HAL_GetTick>
90002cdc:	4602      	mov	r2, r0
90002cde:	693b      	ldr	r3, [r7, #16]
90002ce0:	1ad3      	subs	r3, r2, r3
90002ce2:	2b02      	cmp	r3, #2
90002ce4:	d901      	bls.n	90002cea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
90002ce6:	2303      	movs	r3, #3
90002ce8:	e1c7      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90002cea:	4b30      	ldr	r3, [pc, #192]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002cec:	681b      	ldr	r3, [r3, #0]
90002cee:	f003 0302 	and.w	r3, r3, #2
90002cf2:	2b00      	cmp	r3, #0
90002cf4:	d0f0      	beq.n	90002cd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90002cf6:	4b2d      	ldr	r3, [pc, #180]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002cf8:	681b      	ldr	r3, [r3, #0]
90002cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
90002cfe:	687b      	ldr	r3, [r7, #4]
90002d00:	691b      	ldr	r3, [r3, #16]
90002d02:	00db      	lsls	r3, r3, #3
90002d04:	4929      	ldr	r1, [pc, #164]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002d06:	4313      	orrs	r3, r2
90002d08:	600b      	str	r3, [r1, #0]
90002d0a:	e018      	b.n	90002d3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90002d0c:	4b27      	ldr	r3, [pc, #156]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002d0e:	681b      	ldr	r3, [r3, #0]
90002d10:	4a26      	ldr	r2, [pc, #152]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002d12:	f023 0301 	bic.w	r3, r3, #1
90002d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002d18:	f7fe f9c8 	bl	900010ac <HAL_GetTick>
90002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90002d1e:	e008      	b.n	90002d32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90002d20:	f7fe f9c4 	bl	900010ac <HAL_GetTick>
90002d24:	4602      	mov	r2, r0
90002d26:	693b      	ldr	r3, [r7, #16]
90002d28:	1ad3      	subs	r3, r2, r3
90002d2a:	2b02      	cmp	r3, #2
90002d2c:	d901      	bls.n	90002d32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
90002d2e:	2303      	movs	r3, #3
90002d30:	e1a3      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90002d32:	4b1e      	ldr	r3, [pc, #120]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002d34:	681b      	ldr	r3, [r3, #0]
90002d36:	f003 0302 	and.w	r3, r3, #2
90002d3a:	2b00      	cmp	r3, #0
90002d3c:	d1f0      	bne.n	90002d20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90002d3e:	687b      	ldr	r3, [r7, #4]
90002d40:	681b      	ldr	r3, [r3, #0]
90002d42:	f003 0308 	and.w	r3, r3, #8
90002d46:	2b00      	cmp	r3, #0
90002d48:	d038      	beq.n	90002dbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90002d4a:	687b      	ldr	r3, [r7, #4]
90002d4c:	695b      	ldr	r3, [r3, #20]
90002d4e:	2b00      	cmp	r3, #0
90002d50:	d019      	beq.n	90002d86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90002d52:	4b16      	ldr	r3, [pc, #88]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002d56:	4a15      	ldr	r2, [pc, #84]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002d58:	f043 0301 	orr.w	r3, r3, #1
90002d5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90002d5e:	f7fe f9a5 	bl	900010ac <HAL_GetTick>
90002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90002d64:	e008      	b.n	90002d78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90002d66:	f7fe f9a1 	bl	900010ac <HAL_GetTick>
90002d6a:	4602      	mov	r2, r0
90002d6c:	693b      	ldr	r3, [r7, #16]
90002d6e:	1ad3      	subs	r3, r2, r3
90002d70:	2b02      	cmp	r3, #2
90002d72:	d901      	bls.n	90002d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
90002d74:	2303      	movs	r3, #3
90002d76:	e180      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90002d78:	4b0c      	ldr	r3, [pc, #48]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002d7c:	f003 0302 	and.w	r3, r3, #2
90002d80:	2b00      	cmp	r3, #0
90002d82:	d0f0      	beq.n	90002d66 <HAL_RCC_OscConfig+0x23a>
90002d84:	e01a      	b.n	90002dbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90002d86:	4b09      	ldr	r3, [pc, #36]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002d8a:	4a08      	ldr	r2, [pc, #32]	; (90002dac <HAL_RCC_OscConfig+0x280>)
90002d8c:	f023 0301 	bic.w	r3, r3, #1
90002d90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90002d92:	f7fe f98b 	bl	900010ac <HAL_GetTick>
90002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90002d98:	e00a      	b.n	90002db0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90002d9a:	f7fe f987 	bl	900010ac <HAL_GetTick>
90002d9e:	4602      	mov	r2, r0
90002da0:	693b      	ldr	r3, [r7, #16]
90002da2:	1ad3      	subs	r3, r2, r3
90002da4:	2b02      	cmp	r3, #2
90002da6:	d903      	bls.n	90002db0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
90002da8:	2303      	movs	r3, #3
90002daa:	e166      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
90002dac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90002db0:	4b92      	ldr	r3, [pc, #584]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002db4:	f003 0302 	and.w	r3, r3, #2
90002db8:	2b00      	cmp	r3, #0
90002dba:	d1ee      	bne.n	90002d9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90002dbc:	687b      	ldr	r3, [r7, #4]
90002dbe:	681b      	ldr	r3, [r3, #0]
90002dc0:	f003 0304 	and.w	r3, r3, #4
90002dc4:	2b00      	cmp	r3, #0
90002dc6:	f000 80a4 	beq.w	90002f12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
90002dca:	4b8c      	ldr	r3, [pc, #560]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002dd2:	2b00      	cmp	r3, #0
90002dd4:	d10d      	bne.n	90002df2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
90002dd6:	4b89      	ldr	r3, [pc, #548]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002dda:	4a88      	ldr	r2, [pc, #544]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90002de0:	6413      	str	r3, [r2, #64]	; 0x40
90002de2:	4b86      	ldr	r3, [pc, #536]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002dea:	60bb      	str	r3, [r7, #8]
90002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
90002dee:	2301      	movs	r3, #1
90002df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90002df2:	4b83      	ldr	r3, [pc, #524]	; (90003000 <HAL_RCC_OscConfig+0x4d4>)
90002df4:	681b      	ldr	r3, [r3, #0]
90002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002dfa:	2b00      	cmp	r3, #0
90002dfc:	d118      	bne.n	90002e30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
90002dfe:	4b80      	ldr	r3, [pc, #512]	; (90003000 <HAL_RCC_OscConfig+0x4d4>)
90002e00:	681b      	ldr	r3, [r3, #0]
90002e02:	4a7f      	ldr	r2, [pc, #508]	; (90003000 <HAL_RCC_OscConfig+0x4d4>)
90002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
90002e0a:	f7fe f94f 	bl	900010ac <HAL_GetTick>
90002e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90002e10:	e008      	b.n	90002e24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90002e12:	f7fe f94b 	bl	900010ac <HAL_GetTick>
90002e16:	4602      	mov	r2, r0
90002e18:	693b      	ldr	r3, [r7, #16]
90002e1a:	1ad3      	subs	r3, r2, r3
90002e1c:	2b64      	cmp	r3, #100	; 0x64
90002e1e:	d901      	bls.n	90002e24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
90002e20:	2303      	movs	r3, #3
90002e22:	e12a      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90002e24:	4b76      	ldr	r3, [pc, #472]	; (90003000 <HAL_RCC_OscConfig+0x4d4>)
90002e26:	681b      	ldr	r3, [r3, #0]
90002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002e2c:	2b00      	cmp	r3, #0
90002e2e:	d0f0      	beq.n	90002e12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90002e30:	687b      	ldr	r3, [r7, #4]
90002e32:	689b      	ldr	r3, [r3, #8]
90002e34:	2b01      	cmp	r3, #1
90002e36:	d106      	bne.n	90002e46 <HAL_RCC_OscConfig+0x31a>
90002e38:	4b70      	ldr	r3, [pc, #448]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e3c:	4a6f      	ldr	r2, [pc, #444]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e3e:	f043 0301 	orr.w	r3, r3, #1
90002e42:	6713      	str	r3, [r2, #112]	; 0x70
90002e44:	e02d      	b.n	90002ea2 <HAL_RCC_OscConfig+0x376>
90002e46:	687b      	ldr	r3, [r7, #4]
90002e48:	689b      	ldr	r3, [r3, #8]
90002e4a:	2b00      	cmp	r3, #0
90002e4c:	d10c      	bne.n	90002e68 <HAL_RCC_OscConfig+0x33c>
90002e4e:	4b6b      	ldr	r3, [pc, #428]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e52:	4a6a      	ldr	r2, [pc, #424]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e54:	f023 0301 	bic.w	r3, r3, #1
90002e58:	6713      	str	r3, [r2, #112]	; 0x70
90002e5a:	4b68      	ldr	r3, [pc, #416]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e5e:	4a67      	ldr	r2, [pc, #412]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e60:	f023 0304 	bic.w	r3, r3, #4
90002e64:	6713      	str	r3, [r2, #112]	; 0x70
90002e66:	e01c      	b.n	90002ea2 <HAL_RCC_OscConfig+0x376>
90002e68:	687b      	ldr	r3, [r7, #4]
90002e6a:	689b      	ldr	r3, [r3, #8]
90002e6c:	2b05      	cmp	r3, #5
90002e6e:	d10c      	bne.n	90002e8a <HAL_RCC_OscConfig+0x35e>
90002e70:	4b62      	ldr	r3, [pc, #392]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e74:	4a61      	ldr	r2, [pc, #388]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e76:	f043 0304 	orr.w	r3, r3, #4
90002e7a:	6713      	str	r3, [r2, #112]	; 0x70
90002e7c:	4b5f      	ldr	r3, [pc, #380]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e80:	4a5e      	ldr	r2, [pc, #376]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e82:	f043 0301 	orr.w	r3, r3, #1
90002e86:	6713      	str	r3, [r2, #112]	; 0x70
90002e88:	e00b      	b.n	90002ea2 <HAL_RCC_OscConfig+0x376>
90002e8a:	4b5c      	ldr	r3, [pc, #368]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e8e:	4a5b      	ldr	r2, [pc, #364]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e90:	f023 0301 	bic.w	r3, r3, #1
90002e94:	6713      	str	r3, [r2, #112]	; 0x70
90002e96:	4b59      	ldr	r3, [pc, #356]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e9a:	4a58      	ldr	r2, [pc, #352]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002e9c:	f023 0304 	bic.w	r3, r3, #4
90002ea0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90002ea2:	687b      	ldr	r3, [r7, #4]
90002ea4:	689b      	ldr	r3, [r3, #8]
90002ea6:	2b00      	cmp	r3, #0
90002ea8:	d015      	beq.n	90002ed6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90002eaa:	f7fe f8ff 	bl	900010ac <HAL_GetTick>
90002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90002eb0:	e00a      	b.n	90002ec8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002eb2:	f7fe f8fb 	bl	900010ac <HAL_GetTick>
90002eb6:	4602      	mov	r2, r0
90002eb8:	693b      	ldr	r3, [r7, #16]
90002eba:	1ad3      	subs	r3, r2, r3
90002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
90002ec0:	4293      	cmp	r3, r2
90002ec2:	d901      	bls.n	90002ec8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
90002ec4:	2303      	movs	r3, #3
90002ec6:	e0d8      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90002ec8:	4b4c      	ldr	r3, [pc, #304]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002ecc:	f003 0302 	and.w	r3, r3, #2
90002ed0:	2b00      	cmp	r3, #0
90002ed2:	d0ee      	beq.n	90002eb2 <HAL_RCC_OscConfig+0x386>
90002ed4:	e014      	b.n	90002f00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90002ed6:	f7fe f8e9 	bl	900010ac <HAL_GetTick>
90002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90002edc:	e00a      	b.n	90002ef4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002ede:	f7fe f8e5 	bl	900010ac <HAL_GetTick>
90002ee2:	4602      	mov	r2, r0
90002ee4:	693b      	ldr	r3, [r7, #16]
90002ee6:	1ad3      	subs	r3, r2, r3
90002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
90002eec:	4293      	cmp	r3, r2
90002eee:	d901      	bls.n	90002ef4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
90002ef0:	2303      	movs	r3, #3
90002ef2:	e0c2      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90002ef4:	4b41      	ldr	r3, [pc, #260]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002ef8:	f003 0302 	and.w	r3, r3, #2
90002efc:	2b00      	cmp	r3, #0
90002efe:	d1ee      	bne.n	90002ede <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
90002f00:	7dfb      	ldrb	r3, [r7, #23]
90002f02:	2b01      	cmp	r3, #1
90002f04:	d105      	bne.n	90002f12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
90002f06:	4b3d      	ldr	r3, [pc, #244]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002f0a:	4a3c      	ldr	r2, [pc, #240]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90002f10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90002f12:	687b      	ldr	r3, [r7, #4]
90002f14:	699b      	ldr	r3, [r3, #24]
90002f16:	2b00      	cmp	r3, #0
90002f18:	f000 80ae 	beq.w	90003078 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90002f1c:	4b37      	ldr	r3, [pc, #220]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002f1e:	689b      	ldr	r3, [r3, #8]
90002f20:	f003 030c 	and.w	r3, r3, #12
90002f24:	2b08      	cmp	r3, #8
90002f26:	d06d      	beq.n	90003004 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90002f28:	687b      	ldr	r3, [r7, #4]
90002f2a:	699b      	ldr	r3, [r3, #24]
90002f2c:	2b02      	cmp	r3, #2
90002f2e:	d14b      	bne.n	90002fc8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90002f30:	4b32      	ldr	r3, [pc, #200]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002f32:	681b      	ldr	r3, [r3, #0]
90002f34:	4a31      	ldr	r2, [pc, #196]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90002f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002f3c:	f7fe f8b6 	bl	900010ac <HAL_GetTick>
90002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90002f42:	e008      	b.n	90002f56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90002f44:	f7fe f8b2 	bl	900010ac <HAL_GetTick>
90002f48:	4602      	mov	r2, r0
90002f4a:	693b      	ldr	r3, [r7, #16]
90002f4c:	1ad3      	subs	r3, r2, r3
90002f4e:	2b02      	cmp	r3, #2
90002f50:	d901      	bls.n	90002f56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
90002f52:	2303      	movs	r3, #3
90002f54:	e091      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90002f56:	4b29      	ldr	r3, [pc, #164]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002f58:	681b      	ldr	r3, [r3, #0]
90002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90002f5e:	2b00      	cmp	r3, #0
90002f60:	d1f0      	bne.n	90002f44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90002f62:	687b      	ldr	r3, [r7, #4]
90002f64:	69da      	ldr	r2, [r3, #28]
90002f66:	687b      	ldr	r3, [r7, #4]
90002f68:	6a1b      	ldr	r3, [r3, #32]
90002f6a:	431a      	orrs	r2, r3
90002f6c:	687b      	ldr	r3, [r7, #4]
90002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002f70:	019b      	lsls	r3, r3, #6
90002f72:	431a      	orrs	r2, r3
90002f74:	687b      	ldr	r3, [r7, #4]
90002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002f78:	085b      	lsrs	r3, r3, #1
90002f7a:	3b01      	subs	r3, #1
90002f7c:	041b      	lsls	r3, r3, #16
90002f7e:	431a      	orrs	r2, r3
90002f80:	687b      	ldr	r3, [r7, #4]
90002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002f84:	061b      	lsls	r3, r3, #24
90002f86:	431a      	orrs	r2, r3
90002f88:	687b      	ldr	r3, [r7, #4]
90002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002f8c:	071b      	lsls	r3, r3, #28
90002f8e:	491b      	ldr	r1, [pc, #108]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002f90:	4313      	orrs	r3, r2
90002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90002f94:	4b19      	ldr	r3, [pc, #100]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002f96:	681b      	ldr	r3, [r3, #0]
90002f98:	4a18      	ldr	r2, [pc, #96]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90002f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002fa0:	f7fe f884 	bl	900010ac <HAL_GetTick>
90002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90002fa6:	e008      	b.n	90002fba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90002fa8:	f7fe f880 	bl	900010ac <HAL_GetTick>
90002fac:	4602      	mov	r2, r0
90002fae:	693b      	ldr	r3, [r7, #16]
90002fb0:	1ad3      	subs	r3, r2, r3
90002fb2:	2b02      	cmp	r3, #2
90002fb4:	d901      	bls.n	90002fba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
90002fb6:	2303      	movs	r3, #3
90002fb8:	e05f      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90002fba:	4b10      	ldr	r3, [pc, #64]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002fbc:	681b      	ldr	r3, [r3, #0]
90002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90002fc2:	2b00      	cmp	r3, #0
90002fc4:	d0f0      	beq.n	90002fa8 <HAL_RCC_OscConfig+0x47c>
90002fc6:	e057      	b.n	90003078 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90002fc8:	4b0c      	ldr	r3, [pc, #48]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002fca:	681b      	ldr	r3, [r3, #0]
90002fcc:	4a0b      	ldr	r2, [pc, #44]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90002fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002fd4:	f7fe f86a 	bl	900010ac <HAL_GetTick>
90002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90002fda:	e008      	b.n	90002fee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90002fdc:	f7fe f866 	bl	900010ac <HAL_GetTick>
90002fe0:	4602      	mov	r2, r0
90002fe2:	693b      	ldr	r3, [r7, #16]
90002fe4:	1ad3      	subs	r3, r2, r3
90002fe6:	2b02      	cmp	r3, #2
90002fe8:	d901      	bls.n	90002fee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
90002fea:	2303      	movs	r3, #3
90002fec:	e045      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90002fee:	4b03      	ldr	r3, [pc, #12]	; (90002ffc <HAL_RCC_OscConfig+0x4d0>)
90002ff0:	681b      	ldr	r3, [r3, #0]
90002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90002ff6:	2b00      	cmp	r3, #0
90002ff8:	d1f0      	bne.n	90002fdc <HAL_RCC_OscConfig+0x4b0>
90002ffa:	e03d      	b.n	90003078 <HAL_RCC_OscConfig+0x54c>
90002ffc:	40023800 	.word	0x40023800
90003000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
90003004:	4b1f      	ldr	r3, [pc, #124]	; (90003084 <HAL_RCC_OscConfig+0x558>)
90003006:	685b      	ldr	r3, [r3, #4]
90003008:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000300a:	687b      	ldr	r3, [r7, #4]
9000300c:	699b      	ldr	r3, [r3, #24]
9000300e:	2b01      	cmp	r3, #1
90003010:	d030      	beq.n	90003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90003012:	68fb      	ldr	r3, [r7, #12]
90003014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
90003018:	687b      	ldr	r3, [r7, #4]
9000301a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000301c:	429a      	cmp	r2, r3
9000301e:	d129      	bne.n	90003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90003020:	68fb      	ldr	r3, [r7, #12]
90003022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
90003026:	687b      	ldr	r3, [r7, #4]
90003028:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000302a:	429a      	cmp	r2, r3
9000302c:	d122      	bne.n	90003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
9000302e:	68fa      	ldr	r2, [r7, #12]
90003030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
90003034:	4013      	ands	r3, r2
90003036:	687a      	ldr	r2, [r7, #4]
90003038:	6a52      	ldr	r2, [r2, #36]	; 0x24
9000303a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
9000303c:	4293      	cmp	r3, r2
9000303e:	d119      	bne.n	90003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90003040:	68fb      	ldr	r3, [r7, #12]
90003042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
90003046:	687b      	ldr	r3, [r7, #4]
90003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000304a:	085b      	lsrs	r3, r3, #1
9000304c:	3b01      	subs	r3, #1
9000304e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90003050:	429a      	cmp	r2, r3
90003052:	d10f      	bne.n	90003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
90003054:	68fb      	ldr	r3, [r7, #12]
90003056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
9000305a:	687b      	ldr	r3, [r7, #4]
9000305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000305e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90003060:	429a      	cmp	r2, r3
90003062:	d107      	bne.n	90003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
90003064:	68fb      	ldr	r3, [r7, #12]
90003066:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
9000306a:	687b      	ldr	r3, [r7, #4]
9000306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000306e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
90003070:	429a      	cmp	r2, r3
90003072:	d001      	beq.n	90003078 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
90003074:	2301      	movs	r3, #1
90003076:	e000      	b.n	9000307a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
90003078:	2300      	movs	r3, #0
}
9000307a:	4618      	mov	r0, r3
9000307c:	3718      	adds	r7, #24
9000307e:	46bd      	mov	sp, r7
90003080:	bd80      	pop	{r7, pc}
90003082:	bf00      	nop
90003084:	40023800 	.word	0x40023800

90003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90003088:	b580      	push	{r7, lr}
9000308a:	b084      	sub	sp, #16
9000308c:	af00      	add	r7, sp, #0
9000308e:	6078      	str	r0, [r7, #4]
90003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
90003092:	2300      	movs	r3, #0
90003094:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90003096:	687b      	ldr	r3, [r7, #4]
90003098:	2b00      	cmp	r3, #0
9000309a:	d101      	bne.n	900030a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
9000309c:	2301      	movs	r3, #1
9000309e:	e0d0      	b.n	90003242 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900030a0:	4b6a      	ldr	r3, [pc, #424]	; (9000324c <HAL_RCC_ClockConfig+0x1c4>)
900030a2:	681b      	ldr	r3, [r3, #0]
900030a4:	f003 030f 	and.w	r3, r3, #15
900030a8:	683a      	ldr	r2, [r7, #0]
900030aa:	429a      	cmp	r2, r3
900030ac:	d910      	bls.n	900030d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900030ae:	4b67      	ldr	r3, [pc, #412]	; (9000324c <HAL_RCC_ClockConfig+0x1c4>)
900030b0:	681b      	ldr	r3, [r3, #0]
900030b2:	f023 020f 	bic.w	r2, r3, #15
900030b6:	4965      	ldr	r1, [pc, #404]	; (9000324c <HAL_RCC_ClockConfig+0x1c4>)
900030b8:	683b      	ldr	r3, [r7, #0]
900030ba:	4313      	orrs	r3, r2
900030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900030be:	4b63      	ldr	r3, [pc, #396]	; (9000324c <HAL_RCC_ClockConfig+0x1c4>)
900030c0:	681b      	ldr	r3, [r3, #0]
900030c2:	f003 030f 	and.w	r3, r3, #15
900030c6:	683a      	ldr	r2, [r7, #0]
900030c8:	429a      	cmp	r2, r3
900030ca:	d001      	beq.n	900030d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
900030cc:	2301      	movs	r3, #1
900030ce:	e0b8      	b.n	90003242 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900030d0:	687b      	ldr	r3, [r7, #4]
900030d2:	681b      	ldr	r3, [r3, #0]
900030d4:	f003 0302 	and.w	r3, r3, #2
900030d8:	2b00      	cmp	r3, #0
900030da:	d020      	beq.n	9000311e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900030dc:	687b      	ldr	r3, [r7, #4]
900030de:	681b      	ldr	r3, [r3, #0]
900030e0:	f003 0304 	and.w	r3, r3, #4
900030e4:	2b00      	cmp	r3, #0
900030e6:	d005      	beq.n	900030f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
900030e8:	4b59      	ldr	r3, [pc, #356]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
900030ea:	689b      	ldr	r3, [r3, #8]
900030ec:	4a58      	ldr	r2, [pc, #352]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
900030ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
900030f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900030f4:	687b      	ldr	r3, [r7, #4]
900030f6:	681b      	ldr	r3, [r3, #0]
900030f8:	f003 0308 	and.w	r3, r3, #8
900030fc:	2b00      	cmp	r3, #0
900030fe:	d005      	beq.n	9000310c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90003100:	4b53      	ldr	r3, [pc, #332]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
90003102:	689b      	ldr	r3, [r3, #8]
90003104:	4a52      	ldr	r2, [pc, #328]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
90003106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
9000310a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000310c:	4b50      	ldr	r3, [pc, #320]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
9000310e:	689b      	ldr	r3, [r3, #8]
90003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
90003114:	687b      	ldr	r3, [r7, #4]
90003116:	689b      	ldr	r3, [r3, #8]
90003118:	494d      	ldr	r1, [pc, #308]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
9000311a:	4313      	orrs	r3, r2
9000311c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000311e:	687b      	ldr	r3, [r7, #4]
90003120:	681b      	ldr	r3, [r3, #0]
90003122:	f003 0301 	and.w	r3, r3, #1
90003126:	2b00      	cmp	r3, #0
90003128:	d040      	beq.n	900031ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000312a:	687b      	ldr	r3, [r7, #4]
9000312c:	685b      	ldr	r3, [r3, #4]
9000312e:	2b01      	cmp	r3, #1
90003130:	d107      	bne.n	90003142 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90003132:	4b47      	ldr	r3, [pc, #284]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
90003134:	681b      	ldr	r3, [r3, #0]
90003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000313a:	2b00      	cmp	r3, #0
9000313c:	d115      	bne.n	9000316a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
9000313e:	2301      	movs	r3, #1
90003140:	e07f      	b.n	90003242 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90003142:	687b      	ldr	r3, [r7, #4]
90003144:	685b      	ldr	r3, [r3, #4]
90003146:	2b02      	cmp	r3, #2
90003148:	d107      	bne.n	9000315a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
9000314a:	4b41      	ldr	r3, [pc, #260]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
9000314c:	681b      	ldr	r3, [r3, #0]
9000314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90003152:	2b00      	cmp	r3, #0
90003154:	d109      	bne.n	9000316a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90003156:	2301      	movs	r3, #1
90003158:	e073      	b.n	90003242 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000315a:	4b3d      	ldr	r3, [pc, #244]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
9000315c:	681b      	ldr	r3, [r3, #0]
9000315e:	f003 0302 	and.w	r3, r3, #2
90003162:	2b00      	cmp	r3, #0
90003164:	d101      	bne.n	9000316a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90003166:	2301      	movs	r3, #1
90003168:	e06b      	b.n	90003242 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
9000316a:	4b39      	ldr	r3, [pc, #228]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
9000316c:	689b      	ldr	r3, [r3, #8]
9000316e:	f023 0203 	bic.w	r2, r3, #3
90003172:	687b      	ldr	r3, [r7, #4]
90003174:	685b      	ldr	r3, [r3, #4]
90003176:	4936      	ldr	r1, [pc, #216]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
90003178:	4313      	orrs	r3, r2
9000317a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000317c:	f7fd ff96 	bl	900010ac <HAL_GetTick>
90003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90003182:	e00a      	b.n	9000319a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90003184:	f7fd ff92 	bl	900010ac <HAL_GetTick>
90003188:	4602      	mov	r2, r0
9000318a:	68fb      	ldr	r3, [r7, #12]
9000318c:	1ad3      	subs	r3, r2, r3
9000318e:	f241 3288 	movw	r2, #5000	; 0x1388
90003192:	4293      	cmp	r3, r2
90003194:	d901      	bls.n	9000319a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
90003196:	2303      	movs	r3, #3
90003198:	e053      	b.n	90003242 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000319a:	4b2d      	ldr	r3, [pc, #180]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
9000319c:	689b      	ldr	r3, [r3, #8]
9000319e:	f003 020c 	and.w	r2, r3, #12
900031a2:	687b      	ldr	r3, [r7, #4]
900031a4:	685b      	ldr	r3, [r3, #4]
900031a6:	009b      	lsls	r3, r3, #2
900031a8:	429a      	cmp	r2, r3
900031aa:	d1eb      	bne.n	90003184 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900031ac:	4b27      	ldr	r3, [pc, #156]	; (9000324c <HAL_RCC_ClockConfig+0x1c4>)
900031ae:	681b      	ldr	r3, [r3, #0]
900031b0:	f003 030f 	and.w	r3, r3, #15
900031b4:	683a      	ldr	r2, [r7, #0]
900031b6:	429a      	cmp	r2, r3
900031b8:	d210      	bcs.n	900031dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900031ba:	4b24      	ldr	r3, [pc, #144]	; (9000324c <HAL_RCC_ClockConfig+0x1c4>)
900031bc:	681b      	ldr	r3, [r3, #0]
900031be:	f023 020f 	bic.w	r2, r3, #15
900031c2:	4922      	ldr	r1, [pc, #136]	; (9000324c <HAL_RCC_ClockConfig+0x1c4>)
900031c4:	683b      	ldr	r3, [r7, #0]
900031c6:	4313      	orrs	r3, r2
900031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900031ca:	4b20      	ldr	r3, [pc, #128]	; (9000324c <HAL_RCC_ClockConfig+0x1c4>)
900031cc:	681b      	ldr	r3, [r3, #0]
900031ce:	f003 030f 	and.w	r3, r3, #15
900031d2:	683a      	ldr	r2, [r7, #0]
900031d4:	429a      	cmp	r2, r3
900031d6:	d001      	beq.n	900031dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
900031d8:	2301      	movs	r3, #1
900031da:	e032      	b.n	90003242 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900031dc:	687b      	ldr	r3, [r7, #4]
900031de:	681b      	ldr	r3, [r3, #0]
900031e0:	f003 0304 	and.w	r3, r3, #4
900031e4:	2b00      	cmp	r3, #0
900031e6:	d008      	beq.n	900031fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
900031e8:	4b19      	ldr	r3, [pc, #100]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
900031ea:	689b      	ldr	r3, [r3, #8]
900031ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
900031f0:	687b      	ldr	r3, [r7, #4]
900031f2:	68db      	ldr	r3, [r3, #12]
900031f4:	4916      	ldr	r1, [pc, #88]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
900031f6:	4313      	orrs	r3, r2
900031f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900031fa:	687b      	ldr	r3, [r7, #4]
900031fc:	681b      	ldr	r3, [r3, #0]
900031fe:	f003 0308 	and.w	r3, r3, #8
90003202:	2b00      	cmp	r3, #0
90003204:	d009      	beq.n	9000321a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90003206:	4b12      	ldr	r3, [pc, #72]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
90003208:	689b      	ldr	r3, [r3, #8]
9000320a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
9000320e:	687b      	ldr	r3, [r7, #4]
90003210:	691b      	ldr	r3, [r3, #16]
90003212:	00db      	lsls	r3, r3, #3
90003214:	490e      	ldr	r1, [pc, #56]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
90003216:	4313      	orrs	r3, r2
90003218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
9000321a:	f000 f821 	bl	90003260 <HAL_RCC_GetSysClockFreq>
9000321e:	4602      	mov	r2, r0
90003220:	4b0b      	ldr	r3, [pc, #44]	; (90003250 <HAL_RCC_ClockConfig+0x1c8>)
90003222:	689b      	ldr	r3, [r3, #8]
90003224:	091b      	lsrs	r3, r3, #4
90003226:	f003 030f 	and.w	r3, r3, #15
9000322a:	490a      	ldr	r1, [pc, #40]	; (90003254 <HAL_RCC_ClockConfig+0x1cc>)
9000322c:	5ccb      	ldrb	r3, [r1, r3]
9000322e:	fa22 f303 	lsr.w	r3, r2, r3
90003232:	4a09      	ldr	r2, [pc, #36]	; (90003258 <HAL_RCC_ClockConfig+0x1d0>)
90003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
90003236:	4b09      	ldr	r3, [pc, #36]	; (9000325c <HAL_RCC_ClockConfig+0x1d4>)
90003238:	681b      	ldr	r3, [r3, #0]
9000323a:	4618      	mov	r0, r3
9000323c:	f7fd fef2 	bl	90001024 <HAL_InitTick>

  return HAL_OK;
90003240:	2300      	movs	r3, #0
}
90003242:	4618      	mov	r0, r3
90003244:	3710      	adds	r7, #16
90003246:	46bd      	mov	sp, r7
90003248:	bd80      	pop	{r7, pc}
9000324a:	bf00      	nop
9000324c:	40023c00 	.word	0x40023c00
90003250:	40023800 	.word	0x40023800
90003254:	9001b010 	.word	0x9001b010
90003258:	20000000 	.word	0x20000000
9000325c:	20000004 	.word	0x20000004

90003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90003260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90003264:	b090      	sub	sp, #64	; 0x40
90003266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
90003268:	2300      	movs	r3, #0
9000326a:	637b      	str	r3, [r7, #52]	; 0x34
9000326c:	2300      	movs	r3, #0
9000326e:	63fb      	str	r3, [r7, #60]	; 0x3c
90003270:	2300      	movs	r3, #0
90003272:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
90003274:	2300      	movs	r3, #0
90003276:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90003278:	4b59      	ldr	r3, [pc, #356]	; (900033e0 <HAL_RCC_GetSysClockFreq+0x180>)
9000327a:	689b      	ldr	r3, [r3, #8]
9000327c:	f003 030c 	and.w	r3, r3, #12
90003280:	2b08      	cmp	r3, #8
90003282:	d00d      	beq.n	900032a0 <HAL_RCC_GetSysClockFreq+0x40>
90003284:	2b08      	cmp	r3, #8
90003286:	f200 80a1 	bhi.w	900033cc <HAL_RCC_GetSysClockFreq+0x16c>
9000328a:	2b00      	cmp	r3, #0
9000328c:	d002      	beq.n	90003294 <HAL_RCC_GetSysClockFreq+0x34>
9000328e:	2b04      	cmp	r3, #4
90003290:	d003      	beq.n	9000329a <HAL_RCC_GetSysClockFreq+0x3a>
90003292:	e09b      	b.n	900033cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
90003294:	4b53      	ldr	r3, [pc, #332]	; (900033e4 <HAL_RCC_GetSysClockFreq+0x184>)
90003296:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
90003298:	e09b      	b.n	900033d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
9000329a:	4b53      	ldr	r3, [pc, #332]	; (900033e8 <HAL_RCC_GetSysClockFreq+0x188>)
9000329c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
9000329e:	e098      	b.n	900033d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
900032a0:	4b4f      	ldr	r3, [pc, #316]	; (900033e0 <HAL_RCC_GetSysClockFreq+0x180>)
900032a2:	685b      	ldr	r3, [r3, #4]
900032a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900032a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
900032aa:	4b4d      	ldr	r3, [pc, #308]	; (900033e0 <HAL_RCC_GetSysClockFreq+0x180>)
900032ac:	685b      	ldr	r3, [r3, #4]
900032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900032b2:	2b00      	cmp	r3, #0
900032b4:	d028      	beq.n	90003308 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
900032b6:	4b4a      	ldr	r3, [pc, #296]	; (900033e0 <HAL_RCC_GetSysClockFreq+0x180>)
900032b8:	685b      	ldr	r3, [r3, #4]
900032ba:	099b      	lsrs	r3, r3, #6
900032bc:	2200      	movs	r2, #0
900032be:	623b      	str	r3, [r7, #32]
900032c0:	627a      	str	r2, [r7, #36]	; 0x24
900032c2:	6a3b      	ldr	r3, [r7, #32]
900032c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
900032c8:	2100      	movs	r1, #0
900032ca:	4b47      	ldr	r3, [pc, #284]	; (900033e8 <HAL_RCC_GetSysClockFreq+0x188>)
900032cc:	fb03 f201 	mul.w	r2, r3, r1
900032d0:	2300      	movs	r3, #0
900032d2:	fb00 f303 	mul.w	r3, r0, r3
900032d6:	4413      	add	r3, r2
900032d8:	4a43      	ldr	r2, [pc, #268]	; (900033e8 <HAL_RCC_GetSysClockFreq+0x188>)
900032da:	fba0 1202 	umull	r1, r2, r0, r2
900032de:	62fa      	str	r2, [r7, #44]	; 0x2c
900032e0:	460a      	mov	r2, r1
900032e2:	62ba      	str	r2, [r7, #40]	; 0x28
900032e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
900032e6:	4413      	add	r3, r2
900032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
900032ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900032ec:	2200      	movs	r2, #0
900032ee:	61bb      	str	r3, [r7, #24]
900032f0:	61fa      	str	r2, [r7, #28]
900032f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
900032f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
900032fa:	f7fd f809 	bl	90000310 <__aeabi_uldivmod>
900032fe:	4602      	mov	r2, r0
90003300:	460b      	mov	r3, r1
90003302:	4613      	mov	r3, r2
90003304:	63fb      	str	r3, [r7, #60]	; 0x3c
90003306:	e053      	b.n	900033b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90003308:	4b35      	ldr	r3, [pc, #212]	; (900033e0 <HAL_RCC_GetSysClockFreq+0x180>)
9000330a:	685b      	ldr	r3, [r3, #4]
9000330c:	099b      	lsrs	r3, r3, #6
9000330e:	2200      	movs	r2, #0
90003310:	613b      	str	r3, [r7, #16]
90003312:	617a      	str	r2, [r7, #20]
90003314:	693b      	ldr	r3, [r7, #16]
90003316:	f3c3 0a08 	ubfx	sl, r3, #0, #9
9000331a:	f04f 0b00 	mov.w	fp, #0
9000331e:	4652      	mov	r2, sl
90003320:	465b      	mov	r3, fp
90003322:	f04f 0000 	mov.w	r0, #0
90003326:	f04f 0100 	mov.w	r1, #0
9000332a:	0159      	lsls	r1, r3, #5
9000332c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
90003330:	0150      	lsls	r0, r2, #5
90003332:	4602      	mov	r2, r0
90003334:	460b      	mov	r3, r1
90003336:	ebb2 080a 	subs.w	r8, r2, sl
9000333a:	eb63 090b 	sbc.w	r9, r3, fp
9000333e:	f04f 0200 	mov.w	r2, #0
90003342:	f04f 0300 	mov.w	r3, #0
90003346:	ea4f 1389 	mov.w	r3, r9, lsl #6
9000334a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
9000334e:	ea4f 1288 	mov.w	r2, r8, lsl #6
90003352:	ebb2 0408 	subs.w	r4, r2, r8
90003356:	eb63 0509 	sbc.w	r5, r3, r9
9000335a:	f04f 0200 	mov.w	r2, #0
9000335e:	f04f 0300 	mov.w	r3, #0
90003362:	00eb      	lsls	r3, r5, #3
90003364:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
90003368:	00e2      	lsls	r2, r4, #3
9000336a:	4614      	mov	r4, r2
9000336c:	461d      	mov	r5, r3
9000336e:	eb14 030a 	adds.w	r3, r4, sl
90003372:	603b      	str	r3, [r7, #0]
90003374:	eb45 030b 	adc.w	r3, r5, fp
90003378:	607b      	str	r3, [r7, #4]
9000337a:	f04f 0200 	mov.w	r2, #0
9000337e:	f04f 0300 	mov.w	r3, #0
90003382:	e9d7 4500 	ldrd	r4, r5, [r7]
90003386:	4629      	mov	r1, r5
90003388:	028b      	lsls	r3, r1, #10
9000338a:	4621      	mov	r1, r4
9000338c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
90003390:	4621      	mov	r1, r4
90003392:	028a      	lsls	r2, r1, #10
90003394:	4610      	mov	r0, r2
90003396:	4619      	mov	r1, r3
90003398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000339a:	2200      	movs	r2, #0
9000339c:	60bb      	str	r3, [r7, #8]
9000339e:	60fa      	str	r2, [r7, #12]
900033a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
900033a4:	f7fc ffb4 	bl	90000310 <__aeabi_uldivmod>
900033a8:	4602      	mov	r2, r0
900033aa:	460b      	mov	r3, r1
900033ac:	4613      	mov	r3, r2
900033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
900033b0:	4b0b      	ldr	r3, [pc, #44]	; (900033e0 <HAL_RCC_GetSysClockFreq+0x180>)
900033b2:	685b      	ldr	r3, [r3, #4]
900033b4:	0c1b      	lsrs	r3, r3, #16
900033b6:	f003 0303 	and.w	r3, r3, #3
900033ba:	3301      	adds	r3, #1
900033bc:	005b      	lsls	r3, r3, #1
900033be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
900033c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
900033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900033c4:	fbb2 f3f3 	udiv	r3, r2, r3
900033c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
900033ca:	e002      	b.n	900033d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
900033cc:	4b05      	ldr	r3, [pc, #20]	; (900033e4 <HAL_RCC_GetSysClockFreq+0x184>)
900033ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
900033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
900033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
900033d4:	4618      	mov	r0, r3
900033d6:	3740      	adds	r7, #64	; 0x40
900033d8:	46bd      	mov	sp, r7
900033da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
900033de:	bf00      	nop
900033e0:	40023800 	.word	0x40023800
900033e4:	00f42400 	.word	0x00f42400
900033e8:	017d7840 	.word	0x017d7840

900033ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
900033ec:	b480      	push	{r7}
900033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
900033f0:	4b03      	ldr	r3, [pc, #12]	; (90003400 <HAL_RCC_GetHCLKFreq+0x14>)
900033f2:	681b      	ldr	r3, [r3, #0]
}
900033f4:	4618      	mov	r0, r3
900033f6:	46bd      	mov	sp, r7
900033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900033fc:	4770      	bx	lr
900033fe:	bf00      	nop
90003400:	20000000 	.word	0x20000000

90003404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90003404:	b580      	push	{r7, lr}
90003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
90003408:	f7ff fff0 	bl	900033ec <HAL_RCC_GetHCLKFreq>
9000340c:	4602      	mov	r2, r0
9000340e:	4b05      	ldr	r3, [pc, #20]	; (90003424 <HAL_RCC_GetPCLK1Freq+0x20>)
90003410:	689b      	ldr	r3, [r3, #8]
90003412:	0a9b      	lsrs	r3, r3, #10
90003414:	f003 0307 	and.w	r3, r3, #7
90003418:	4903      	ldr	r1, [pc, #12]	; (90003428 <HAL_RCC_GetPCLK1Freq+0x24>)
9000341a:	5ccb      	ldrb	r3, [r1, r3]
9000341c:	fa22 f303 	lsr.w	r3, r2, r3
}
90003420:	4618      	mov	r0, r3
90003422:	bd80      	pop	{r7, pc}
90003424:	40023800 	.word	0x40023800
90003428:	9001b020 	.word	0x9001b020

9000342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000342c:	b580      	push	{r7, lr}
9000342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
90003430:	f7ff ffdc 	bl	900033ec <HAL_RCC_GetHCLKFreq>
90003434:	4602      	mov	r2, r0
90003436:	4b05      	ldr	r3, [pc, #20]	; (9000344c <HAL_RCC_GetPCLK2Freq+0x20>)
90003438:	689b      	ldr	r3, [r3, #8]
9000343a:	0b5b      	lsrs	r3, r3, #13
9000343c:	f003 0307 	and.w	r3, r3, #7
90003440:	4903      	ldr	r1, [pc, #12]	; (90003450 <HAL_RCC_GetPCLK2Freq+0x24>)
90003442:	5ccb      	ldrb	r3, [r1, r3]
90003444:	fa22 f303 	lsr.w	r3, r2, r3
}
90003448:	4618      	mov	r0, r3
9000344a:	bd80      	pop	{r7, pc}
9000344c:	40023800 	.word	0x40023800
90003450:	9001b020 	.word	0x9001b020

90003454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90003454:	b580      	push	{r7, lr}
90003456:	b088      	sub	sp, #32
90003458:	af00      	add	r7, sp, #0
9000345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
9000345c:	2300      	movs	r3, #0
9000345e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
90003460:	2300      	movs	r3, #0
90003462:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
90003464:	2300      	movs	r3, #0
90003466:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
90003468:	2300      	movs	r3, #0
9000346a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
9000346c:	2300      	movs	r3, #0
9000346e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90003470:	687b      	ldr	r3, [r7, #4]
90003472:	681b      	ldr	r3, [r3, #0]
90003474:	f003 0301 	and.w	r3, r3, #1
90003478:	2b00      	cmp	r3, #0
9000347a:	d012      	beq.n	900034a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
9000347c:	4b69      	ldr	r3, [pc, #420]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000347e:	689b      	ldr	r3, [r3, #8]
90003480:	4a68      	ldr	r2, [pc, #416]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003482:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90003486:	6093      	str	r3, [r2, #8]
90003488:	4b66      	ldr	r3, [pc, #408]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000348a:	689a      	ldr	r2, [r3, #8]
9000348c:	687b      	ldr	r3, [r7, #4]
9000348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90003490:	4964      	ldr	r1, [pc, #400]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003492:	4313      	orrs	r3, r2
90003494:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90003496:	687b      	ldr	r3, [r7, #4]
90003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000349a:	2b00      	cmp	r3, #0
9000349c:	d101      	bne.n	900034a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
9000349e:	2301      	movs	r3, #1
900034a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
900034a2:	687b      	ldr	r3, [r7, #4]
900034a4:	681b      	ldr	r3, [r3, #0]
900034a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900034aa:	2b00      	cmp	r3, #0
900034ac:	d017      	beq.n	900034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900034ae:	4b5d      	ldr	r3, [pc, #372]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900034b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900034b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
900034b8:	687b      	ldr	r3, [r7, #4]
900034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900034bc:	4959      	ldr	r1, [pc, #356]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900034be:	4313      	orrs	r3, r2
900034c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
900034c4:	687b      	ldr	r3, [r7, #4]
900034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900034c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900034cc:	d101      	bne.n	900034d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
900034ce:	2301      	movs	r3, #1
900034d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
900034d2:	687b      	ldr	r3, [r7, #4]
900034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900034d6:	2b00      	cmp	r3, #0
900034d8:	d101      	bne.n	900034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
900034da:	2301      	movs	r3, #1
900034dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
900034de:	687b      	ldr	r3, [r7, #4]
900034e0:	681b      	ldr	r3, [r3, #0]
900034e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900034e6:	2b00      	cmp	r3, #0
900034e8:	d017      	beq.n	9000351a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
900034ea:	4b4e      	ldr	r3, [pc, #312]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900034ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900034f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
900034f4:	687b      	ldr	r3, [r7, #4]
900034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900034f8:	494a      	ldr	r1, [pc, #296]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900034fa:	4313      	orrs	r3, r2
900034fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90003500:	687b      	ldr	r3, [r7, #4]
90003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90003508:	d101      	bne.n	9000350e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
9000350a:	2301      	movs	r3, #1
9000350c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
9000350e:	687b      	ldr	r3, [r7, #4]
90003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003512:	2b00      	cmp	r3, #0
90003514:	d101      	bne.n	9000351a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
90003516:	2301      	movs	r3, #1
90003518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000351a:	687b      	ldr	r3, [r7, #4]
9000351c:	681b      	ldr	r3, [r3, #0]
9000351e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90003522:	2b00      	cmp	r3, #0
90003524:	d001      	beq.n	9000352a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
90003526:	2301      	movs	r3, #1
90003528:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
9000352a:	687b      	ldr	r3, [r7, #4]
9000352c:	681b      	ldr	r3, [r3, #0]
9000352e:	f003 0320 	and.w	r3, r3, #32
90003532:	2b00      	cmp	r3, #0
90003534:	f000 808b 	beq.w	9000364e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90003538:	4b3a      	ldr	r3, [pc, #232]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000353c:	4a39      	ldr	r2, [pc, #228]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000353e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90003542:	6413      	str	r3, [r2, #64]	; 0x40
90003544:	4b37      	ldr	r3, [pc, #220]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000354c:	60bb      	str	r3, [r7, #8]
9000354e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90003550:	4b35      	ldr	r3, [pc, #212]	; (90003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003552:	681b      	ldr	r3, [r3, #0]
90003554:	4a34      	ldr	r2, [pc, #208]	; (90003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000355a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000355c:	f7fd fda6 	bl	900010ac <HAL_GetTick>
90003560:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90003562:	e008      	b.n	90003576 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90003564:	f7fd fda2 	bl	900010ac <HAL_GetTick>
90003568:	4602      	mov	r2, r0
9000356a:	697b      	ldr	r3, [r7, #20]
9000356c:	1ad3      	subs	r3, r2, r3
9000356e:	2b64      	cmp	r3, #100	; 0x64
90003570:	d901      	bls.n	90003576 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
90003572:	2303      	movs	r3, #3
90003574:	e38f      	b.n	90003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90003576:	4b2c      	ldr	r3, [pc, #176]	; (90003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003578:	681b      	ldr	r3, [r3, #0]
9000357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000357e:	2b00      	cmp	r3, #0
90003580:	d0f0      	beq.n	90003564 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90003582:	4b28      	ldr	r3, [pc, #160]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000358a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
9000358c:	693b      	ldr	r3, [r7, #16]
9000358e:	2b00      	cmp	r3, #0
90003590:	d035      	beq.n	900035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
90003592:	687b      	ldr	r3, [r7, #4]
90003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000359a:	693a      	ldr	r2, [r7, #16]
9000359c:	429a      	cmp	r2, r3
9000359e:	d02e      	beq.n	900035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
900035a0:	4b20      	ldr	r3, [pc, #128]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
900035a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
900035aa:	4b1e      	ldr	r3, [pc, #120]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900035ae:	4a1d      	ldr	r2, [pc, #116]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900035b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
900035b6:	4b1b      	ldr	r3, [pc, #108]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900035ba:	4a1a      	ldr	r2, [pc, #104]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900035bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900035c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
900035c2:	4a18      	ldr	r2, [pc, #96]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900035c4:	693b      	ldr	r3, [r7, #16]
900035c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
900035c8:	4b16      	ldr	r3, [pc, #88]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900035cc:	f003 0301 	and.w	r3, r3, #1
900035d0:	2b01      	cmp	r3, #1
900035d2:	d114      	bne.n	900035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900035d4:	f7fd fd6a 	bl	900010ac <HAL_GetTick>
900035d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900035da:	e00a      	b.n	900035f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
900035dc:	f7fd fd66 	bl	900010ac <HAL_GetTick>
900035e0:	4602      	mov	r2, r0
900035e2:	697b      	ldr	r3, [r7, #20]
900035e4:	1ad3      	subs	r3, r2, r3
900035e6:	f241 3288 	movw	r2, #5000	; 0x1388
900035ea:	4293      	cmp	r3, r2
900035ec:	d901      	bls.n	900035f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
900035ee:	2303      	movs	r3, #3
900035f0:	e351      	b.n	90003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900035f2:	4b0c      	ldr	r3, [pc, #48]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900035f6:	f003 0302 	and.w	r3, r3, #2
900035fa:	2b00      	cmp	r3, #0
900035fc:	d0ee      	beq.n	900035dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900035fe:	687b      	ldr	r3, [r7, #4]
90003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
90003606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9000360a:	d111      	bne.n	90003630 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
9000360c:	4b05      	ldr	r3, [pc, #20]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000360e:	689b      	ldr	r3, [r3, #8]
90003610:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
90003614:	687b      	ldr	r3, [r7, #4]
90003616:	6b19      	ldr	r1, [r3, #48]	; 0x30
90003618:	4b04      	ldr	r3, [pc, #16]	; (9000362c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
9000361a:	400b      	ands	r3, r1
9000361c:	4901      	ldr	r1, [pc, #4]	; (90003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000361e:	4313      	orrs	r3, r2
90003620:	608b      	str	r3, [r1, #8]
90003622:	e00b      	b.n	9000363c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
90003624:	40023800 	.word	0x40023800
90003628:	40007000 	.word	0x40007000
9000362c:	0ffffcff 	.word	0x0ffffcff
90003630:	4bac      	ldr	r3, [pc, #688]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003632:	689b      	ldr	r3, [r3, #8]
90003634:	4aab      	ldr	r2, [pc, #684]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003636:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
9000363a:	6093      	str	r3, [r2, #8]
9000363c:	4ba9      	ldr	r3, [pc, #676]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
9000363e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90003640:	687b      	ldr	r3, [r7, #4]
90003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003644:	f3c3 030b 	ubfx	r3, r3, #0, #12
90003648:	49a6      	ldr	r1, [pc, #664]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
9000364a:	4313      	orrs	r3, r2
9000364c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
9000364e:	687b      	ldr	r3, [r7, #4]
90003650:	681b      	ldr	r3, [r3, #0]
90003652:	f003 0310 	and.w	r3, r3, #16
90003656:	2b00      	cmp	r3, #0
90003658:	d010      	beq.n	9000367c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000365a:	4ba2      	ldr	r3, [pc, #648]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
9000365c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003660:	4aa0      	ldr	r2, [pc, #640]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90003666:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
9000366a:	4b9e      	ldr	r3, [pc, #632]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
9000366c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90003670:	687b      	ldr	r3, [r7, #4]
90003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003674:	499b      	ldr	r1, [pc, #620]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003676:	4313      	orrs	r3, r2
90003678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
9000367c:	687b      	ldr	r3, [r7, #4]
9000367e:	681b      	ldr	r3, [r3, #0]
90003680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90003684:	2b00      	cmp	r3, #0
90003686:	d00a      	beq.n	9000369e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
90003688:	4b96      	ldr	r3, [pc, #600]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
9000368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000368e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90003692:	687b      	ldr	r3, [r7, #4]
90003694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90003696:	4993      	ldr	r1, [pc, #588]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003698:	4313      	orrs	r3, r2
9000369a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
9000369e:	687b      	ldr	r3, [r7, #4]
900036a0:	681b      	ldr	r3, [r3, #0]
900036a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
900036a6:	2b00      	cmp	r3, #0
900036a8:	d00a      	beq.n	900036c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
900036aa:	4b8e      	ldr	r3, [pc, #568]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900036b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
900036b4:	687b      	ldr	r3, [r7, #4]
900036b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
900036b8:	498a      	ldr	r1, [pc, #552]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900036ba:	4313      	orrs	r3, r2
900036bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
900036c0:	687b      	ldr	r3, [r7, #4]
900036c2:	681b      	ldr	r3, [r3, #0]
900036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900036c8:	2b00      	cmp	r3, #0
900036ca:	d00a      	beq.n	900036e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
900036cc:	4b85      	ldr	r3, [pc, #532]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900036d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
900036d6:	687b      	ldr	r3, [r7, #4]
900036d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900036da:	4982      	ldr	r1, [pc, #520]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900036dc:	4313      	orrs	r3, r2
900036de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
900036e2:	687b      	ldr	r3, [r7, #4]
900036e4:	681b      	ldr	r3, [r3, #0]
900036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900036ea:	2b00      	cmp	r3, #0
900036ec:	d00a      	beq.n	90003704 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
900036ee:	4b7d      	ldr	r3, [pc, #500]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900036f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
900036f8:	687b      	ldr	r3, [r7, #4]
900036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900036fc:	4979      	ldr	r1, [pc, #484]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900036fe:	4313      	orrs	r3, r2
90003700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
90003704:	687b      	ldr	r3, [r7, #4]
90003706:	681b      	ldr	r3, [r3, #0]
90003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000370c:	2b00      	cmp	r3, #0
9000370e:	d00a      	beq.n	90003726 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90003710:	4b74      	ldr	r3, [pc, #464]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003716:	f023 0203 	bic.w	r2, r3, #3
9000371a:	687b      	ldr	r3, [r7, #4]
9000371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000371e:	4971      	ldr	r1, [pc, #452]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003720:	4313      	orrs	r3, r2
90003722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
90003726:	687b      	ldr	r3, [r7, #4]
90003728:	681b      	ldr	r3, [r3, #0]
9000372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000372e:	2b00      	cmp	r3, #0
90003730:	d00a      	beq.n	90003748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
90003732:	4b6c      	ldr	r3, [pc, #432]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003738:	f023 020c 	bic.w	r2, r3, #12
9000373c:	687b      	ldr	r3, [r7, #4]
9000373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90003740:	4968      	ldr	r1, [pc, #416]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003742:	4313      	orrs	r3, r2
90003744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90003748:	687b      	ldr	r3, [r7, #4]
9000374a:	681b      	ldr	r3, [r3, #0]
9000374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90003750:	2b00      	cmp	r3, #0
90003752:	d00a      	beq.n	9000376a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90003754:	4b63      	ldr	r3, [pc, #396]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000375a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
9000375e:	687b      	ldr	r3, [r7, #4]
90003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90003762:	4960      	ldr	r1, [pc, #384]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003764:	4313      	orrs	r3, r2
90003766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
9000376a:	687b      	ldr	r3, [r7, #4]
9000376c:	681b      	ldr	r3, [r3, #0]
9000376e:	f403 7300 	and.w	r3, r3, #512	; 0x200
90003772:	2b00      	cmp	r3, #0
90003774:	d00a      	beq.n	9000378c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
90003776:	4b5b      	ldr	r3, [pc, #364]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000377c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
90003780:	687b      	ldr	r3, [r7, #4]
90003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90003784:	4957      	ldr	r1, [pc, #348]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003786:	4313      	orrs	r3, r2
90003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
9000378c:	687b      	ldr	r3, [r7, #4]
9000378e:	681b      	ldr	r3, [r3, #0]
90003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90003794:	2b00      	cmp	r3, #0
90003796:	d00a      	beq.n	900037ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
90003798:	4b52      	ldr	r3, [pc, #328]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
9000379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000379e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
900037a2:	687b      	ldr	r3, [r7, #4]
900037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900037a6:	494f      	ldr	r1, [pc, #316]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900037a8:	4313      	orrs	r3, r2
900037aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
900037ae:	687b      	ldr	r3, [r7, #4]
900037b0:	681b      	ldr	r3, [r3, #0]
900037b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
900037b6:	2b00      	cmp	r3, #0
900037b8:	d00a      	beq.n	900037d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
900037ba:	4b4a      	ldr	r3, [pc, #296]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900037c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
900037c4:	687b      	ldr	r3, [r7, #4]
900037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900037c8:	4946      	ldr	r1, [pc, #280]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900037ca:	4313      	orrs	r3, r2
900037cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
900037d0:	687b      	ldr	r3, [r7, #4]
900037d2:	681b      	ldr	r3, [r3, #0]
900037d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
900037d8:	2b00      	cmp	r3, #0
900037da:	d00a      	beq.n	900037f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
900037dc:	4b41      	ldr	r3, [pc, #260]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900037e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
900037e6:	687b      	ldr	r3, [r7, #4]
900037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900037ea:	493e      	ldr	r1, [pc, #248]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900037ec:	4313      	orrs	r3, r2
900037ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
900037f2:	687b      	ldr	r3, [r7, #4]
900037f4:	681b      	ldr	r3, [r3, #0]
900037f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900037fa:	2b00      	cmp	r3, #0
900037fc:	d00a      	beq.n	90003814 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
900037fe:	4b39      	ldr	r3, [pc, #228]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003804:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
90003808:	687b      	ldr	r3, [r7, #4]
9000380a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000380c:	4935      	ldr	r1, [pc, #212]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
9000380e:	4313      	orrs	r3, r2
90003810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90003814:	687b      	ldr	r3, [r7, #4]
90003816:	681b      	ldr	r3, [r3, #0]
90003818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000381c:	2b00      	cmp	r3, #0
9000381e:	d00a      	beq.n	90003836 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90003820:	4b30      	ldr	r3, [pc, #192]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003826:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
9000382a:	687b      	ldr	r3, [r7, #4]
9000382c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000382e:	492d      	ldr	r1, [pc, #180]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003830:	4313      	orrs	r3, r2
90003832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
90003836:	687b      	ldr	r3, [r7, #4]
90003838:	681b      	ldr	r3, [r3, #0]
9000383a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
9000383e:	2b00      	cmp	r3, #0
90003840:	d011      	beq.n	90003866 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90003842:	4b28      	ldr	r3, [pc, #160]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003848:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
9000384c:	687b      	ldr	r3, [r7, #4]
9000384e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90003850:	4924      	ldr	r1, [pc, #144]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003852:	4313      	orrs	r3, r2
90003854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
90003858:	687b      	ldr	r3, [r7, #4]
9000385a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000385c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90003860:	d101      	bne.n	90003866 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
90003862:	2301      	movs	r3, #1
90003864:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90003866:	687b      	ldr	r3, [r7, #4]
90003868:	681b      	ldr	r3, [r3, #0]
9000386a:	f003 0308 	and.w	r3, r3, #8
9000386e:	2b00      	cmp	r3, #0
90003870:	d001      	beq.n	90003876 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
90003872:	2301      	movs	r3, #1
90003874:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90003876:	687b      	ldr	r3, [r7, #4]
90003878:	681b      	ldr	r3, [r3, #0]
9000387a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
9000387e:	2b00      	cmp	r3, #0
90003880:	d00a      	beq.n	90003898 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90003882:	4b18      	ldr	r3, [pc, #96]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003888:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
9000388c:	687b      	ldr	r3, [r7, #4]
9000388e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90003890:	4914      	ldr	r1, [pc, #80]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
90003892:	4313      	orrs	r3, r2
90003894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
90003898:	687b      	ldr	r3, [r7, #4]
9000389a:	681b      	ldr	r3, [r3, #0]
9000389c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900038a0:	2b00      	cmp	r3, #0
900038a2:	d00b      	beq.n	900038bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
900038a4:	4b0f      	ldr	r3, [pc, #60]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900038aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
900038ae:	687b      	ldr	r3, [r7, #4]
900038b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900038b4:	490b      	ldr	r1, [pc, #44]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900038b6:	4313      	orrs	r3, r2
900038b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
900038bc:	687b      	ldr	r3, [r7, #4]
900038be:	681b      	ldr	r3, [r3, #0]
900038c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
900038c4:	2b00      	cmp	r3, #0
900038c6:	d00f      	beq.n	900038e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
900038c8:	4b06      	ldr	r3, [pc, #24]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900038ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
900038d2:	687b      	ldr	r3, [r7, #4]
900038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900038d8:	4902      	ldr	r1, [pc, #8]	; (900038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
900038da:	4313      	orrs	r3, r2
900038dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
900038e0:	e002      	b.n	900038e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
900038e2:	bf00      	nop
900038e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
900038e8:	687b      	ldr	r3, [r7, #4]
900038ea:	681b      	ldr	r3, [r3, #0]
900038ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900038f0:	2b00      	cmp	r3, #0
900038f2:	d00b      	beq.n	9000390c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
900038f4:	4b8a      	ldr	r3, [pc, #552]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
900038f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900038fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
900038fe:	687b      	ldr	r3, [r7, #4]
90003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003904:	4986      	ldr	r1, [pc, #536]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003906:	4313      	orrs	r3, r2
90003908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
9000390c:	687b      	ldr	r3, [r7, #4]
9000390e:	681b      	ldr	r3, [r3, #0]
90003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003914:	2b00      	cmp	r3, #0
90003916:	d00b      	beq.n	90003930 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
90003918:	4b81      	ldr	r3, [pc, #516]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
9000391a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000391e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
90003922:	687b      	ldr	r3, [r7, #4]
90003924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003928:	497d      	ldr	r1, [pc, #500]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
9000392a:	4313      	orrs	r3, r2
9000392c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
90003930:	69fb      	ldr	r3, [r7, #28]
90003932:	2b01      	cmp	r3, #1
90003934:	d006      	beq.n	90003944 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
90003936:	687b      	ldr	r3, [r7, #4]
90003938:	681b      	ldr	r3, [r3, #0]
9000393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000393e:	2b00      	cmp	r3, #0
90003940:	f000 80d6 	beq.w	90003af0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
90003944:	4b76      	ldr	r3, [pc, #472]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003946:	681b      	ldr	r3, [r3, #0]
90003948:	4a75      	ldr	r2, [pc, #468]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
9000394a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000394e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003950:	f7fd fbac 	bl	900010ac <HAL_GetTick>
90003954:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90003956:	e008      	b.n	9000396a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90003958:	f7fd fba8 	bl	900010ac <HAL_GetTick>
9000395c:	4602      	mov	r2, r0
9000395e:	697b      	ldr	r3, [r7, #20]
90003960:	1ad3      	subs	r3, r2, r3
90003962:	2b64      	cmp	r3, #100	; 0x64
90003964:	d901      	bls.n	9000396a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90003966:	2303      	movs	r3, #3
90003968:	e195      	b.n	90003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
9000396a:	4b6d      	ldr	r3, [pc, #436]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
9000396c:	681b      	ldr	r3, [r3, #0]
9000396e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90003972:	2b00      	cmp	r3, #0
90003974:	d1f0      	bne.n	90003958 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
90003976:	687b      	ldr	r3, [r7, #4]
90003978:	681b      	ldr	r3, [r3, #0]
9000397a:	f003 0301 	and.w	r3, r3, #1
9000397e:	2b00      	cmp	r3, #0
90003980:	d021      	beq.n	900039c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
90003982:	687b      	ldr	r3, [r7, #4]
90003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90003986:	2b00      	cmp	r3, #0
90003988:	d11d      	bne.n	900039c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
9000398a:	4b65      	ldr	r3, [pc, #404]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
9000398c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003990:	0c1b      	lsrs	r3, r3, #16
90003992:	f003 0303 	and.w	r3, r3, #3
90003996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90003998:	4b61      	ldr	r3, [pc, #388]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
9000399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000399e:	0e1b      	lsrs	r3, r3, #24
900039a0:	f003 030f 	and.w	r3, r3, #15
900039a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
900039a6:	687b      	ldr	r3, [r7, #4]
900039a8:	685b      	ldr	r3, [r3, #4]
900039aa:	019a      	lsls	r2, r3, #6
900039ac:	693b      	ldr	r3, [r7, #16]
900039ae:	041b      	lsls	r3, r3, #16
900039b0:	431a      	orrs	r2, r3
900039b2:	68fb      	ldr	r3, [r7, #12]
900039b4:	061b      	lsls	r3, r3, #24
900039b6:	431a      	orrs	r2, r3
900039b8:	687b      	ldr	r3, [r7, #4]
900039ba:	689b      	ldr	r3, [r3, #8]
900039bc:	071b      	lsls	r3, r3, #28
900039be:	4958      	ldr	r1, [pc, #352]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
900039c0:	4313      	orrs	r3, r2
900039c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
900039c6:	687b      	ldr	r3, [r7, #4]
900039c8:	681b      	ldr	r3, [r3, #0]
900039ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900039ce:	2b00      	cmp	r3, #0
900039d0:	d004      	beq.n	900039dc <HAL_RCCEx_PeriphCLKConfig+0x588>
900039d2:	687b      	ldr	r3, [r7, #4]
900039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900039d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900039da:	d00a      	beq.n	900039f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
900039dc:	687b      	ldr	r3, [r7, #4]
900039de:	681b      	ldr	r3, [r3, #0]
900039e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
900039e4:	2b00      	cmp	r3, #0
900039e6:	d02e      	beq.n	90003a46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
900039e8:	687b      	ldr	r3, [r7, #4]
900039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900039ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
900039f0:	d129      	bne.n	90003a46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
900039f2:	4b4b      	ldr	r3, [pc, #300]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
900039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900039f8:	0c1b      	lsrs	r3, r3, #16
900039fa:	f003 0303 	and.w	r3, r3, #3
900039fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90003a00:	4b47      	ldr	r3, [pc, #284]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003a06:	0f1b      	lsrs	r3, r3, #28
90003a08:	f003 0307 	and.w	r3, r3, #7
90003a0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
90003a0e:	687b      	ldr	r3, [r7, #4]
90003a10:	685b      	ldr	r3, [r3, #4]
90003a12:	019a      	lsls	r2, r3, #6
90003a14:	693b      	ldr	r3, [r7, #16]
90003a16:	041b      	lsls	r3, r3, #16
90003a18:	431a      	orrs	r2, r3
90003a1a:	687b      	ldr	r3, [r7, #4]
90003a1c:	68db      	ldr	r3, [r3, #12]
90003a1e:	061b      	lsls	r3, r3, #24
90003a20:	431a      	orrs	r2, r3
90003a22:	68fb      	ldr	r3, [r7, #12]
90003a24:	071b      	lsls	r3, r3, #28
90003a26:	493e      	ldr	r1, [pc, #248]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003a28:	4313      	orrs	r3, r2
90003a2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
90003a2e:	4b3c      	ldr	r3, [pc, #240]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003a34:	f023 021f 	bic.w	r2, r3, #31
90003a38:	687b      	ldr	r3, [r7, #4]
90003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003a3c:	3b01      	subs	r3, #1
90003a3e:	4938      	ldr	r1, [pc, #224]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003a40:	4313      	orrs	r3, r2
90003a42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90003a46:	687b      	ldr	r3, [r7, #4]
90003a48:	681b      	ldr	r3, [r3, #0]
90003a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90003a4e:	2b00      	cmp	r3, #0
90003a50:	d01d      	beq.n	90003a8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90003a52:	4b33      	ldr	r3, [pc, #204]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003a58:	0e1b      	lsrs	r3, r3, #24
90003a5a:	f003 030f 	and.w	r3, r3, #15
90003a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90003a60:	4b2f      	ldr	r3, [pc, #188]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003a66:	0f1b      	lsrs	r3, r3, #28
90003a68:	f003 0307 	and.w	r3, r3, #7
90003a6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
90003a6e:	687b      	ldr	r3, [r7, #4]
90003a70:	685b      	ldr	r3, [r3, #4]
90003a72:	019a      	lsls	r2, r3, #6
90003a74:	687b      	ldr	r3, [r7, #4]
90003a76:	691b      	ldr	r3, [r3, #16]
90003a78:	041b      	lsls	r3, r3, #16
90003a7a:	431a      	orrs	r2, r3
90003a7c:	693b      	ldr	r3, [r7, #16]
90003a7e:	061b      	lsls	r3, r3, #24
90003a80:	431a      	orrs	r2, r3
90003a82:	68fb      	ldr	r3, [r7, #12]
90003a84:	071b      	lsls	r3, r3, #28
90003a86:	4926      	ldr	r1, [pc, #152]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003a88:	4313      	orrs	r3, r2
90003a8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90003a8e:	687b      	ldr	r3, [r7, #4]
90003a90:	681b      	ldr	r3, [r3, #0]
90003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90003a96:	2b00      	cmp	r3, #0
90003a98:	d011      	beq.n	90003abe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90003a9a:	687b      	ldr	r3, [r7, #4]
90003a9c:	685b      	ldr	r3, [r3, #4]
90003a9e:	019a      	lsls	r2, r3, #6
90003aa0:	687b      	ldr	r3, [r7, #4]
90003aa2:	691b      	ldr	r3, [r3, #16]
90003aa4:	041b      	lsls	r3, r3, #16
90003aa6:	431a      	orrs	r2, r3
90003aa8:	687b      	ldr	r3, [r7, #4]
90003aaa:	68db      	ldr	r3, [r3, #12]
90003aac:	061b      	lsls	r3, r3, #24
90003aae:	431a      	orrs	r2, r3
90003ab0:	687b      	ldr	r3, [r7, #4]
90003ab2:	689b      	ldr	r3, [r3, #8]
90003ab4:	071b      	lsls	r3, r3, #28
90003ab6:	491a      	ldr	r1, [pc, #104]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003ab8:	4313      	orrs	r3, r2
90003aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
90003abe:	4b18      	ldr	r3, [pc, #96]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003ac0:	681b      	ldr	r3, [r3, #0]
90003ac2:	4a17      	ldr	r2, [pc, #92]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003ac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90003ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003aca:	f7fd faef 	bl	900010ac <HAL_GetTick>
90003ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90003ad0:	e008      	b.n	90003ae4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90003ad2:	f7fd faeb 	bl	900010ac <HAL_GetTick>
90003ad6:	4602      	mov	r2, r0
90003ad8:	697b      	ldr	r3, [r7, #20]
90003ada:	1ad3      	subs	r3, r2, r3
90003adc:	2b64      	cmp	r3, #100	; 0x64
90003ade:	d901      	bls.n	90003ae4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90003ae0:	2303      	movs	r3, #3
90003ae2:	e0d8      	b.n	90003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90003ae4:	4b0e      	ldr	r3, [pc, #56]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003ae6:	681b      	ldr	r3, [r3, #0]
90003ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90003aec:	2b00      	cmp	r3, #0
90003aee:	d0f0      	beq.n	90003ad2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
90003af0:	69bb      	ldr	r3, [r7, #24]
90003af2:	2b01      	cmp	r3, #1
90003af4:	f040 80ce 	bne.w	90003c94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
90003af8:	4b09      	ldr	r3, [pc, #36]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003afa:	681b      	ldr	r3, [r3, #0]
90003afc:	4a08      	ldr	r2, [pc, #32]	; (90003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
90003afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90003b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003b04:	f7fd fad2 	bl	900010ac <HAL_GetTick>
90003b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90003b0a:	e00b      	b.n	90003b24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90003b0c:	f7fd face 	bl	900010ac <HAL_GetTick>
90003b10:	4602      	mov	r2, r0
90003b12:	697b      	ldr	r3, [r7, #20]
90003b14:	1ad3      	subs	r3, r2, r3
90003b16:	2b64      	cmp	r3, #100	; 0x64
90003b18:	d904      	bls.n	90003b24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90003b1a:	2303      	movs	r3, #3
90003b1c:	e0bb      	b.n	90003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
90003b1e:	bf00      	nop
90003b20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90003b24:	4b5e      	ldr	r3, [pc, #376]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003b26:	681b      	ldr	r3, [r3, #0]
90003b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90003b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90003b30:	d0ec      	beq.n	90003b0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90003b32:	687b      	ldr	r3, [r7, #4]
90003b34:	681b      	ldr	r3, [r3, #0]
90003b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90003b3a:	2b00      	cmp	r3, #0
90003b3c:	d003      	beq.n	90003b46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
90003b3e:	687b      	ldr	r3, [r7, #4]
90003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003b42:	2b00      	cmp	r3, #0
90003b44:	d009      	beq.n	90003b5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90003b46:	687b      	ldr	r3, [r7, #4]
90003b48:	681b      	ldr	r3, [r3, #0]
90003b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90003b4e:	2b00      	cmp	r3, #0
90003b50:	d02e      	beq.n	90003bb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90003b52:	687b      	ldr	r3, [r7, #4]
90003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003b56:	2b00      	cmp	r3, #0
90003b58:	d12a      	bne.n	90003bb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90003b5a:	4b51      	ldr	r3, [pc, #324]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003b60:	0c1b      	lsrs	r3, r3, #16
90003b62:	f003 0303 	and.w	r3, r3, #3
90003b66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90003b68:	4b4d      	ldr	r3, [pc, #308]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003b6e:	0f1b      	lsrs	r3, r3, #28
90003b70:	f003 0307 	and.w	r3, r3, #7
90003b74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
90003b76:	687b      	ldr	r3, [r7, #4]
90003b78:	695b      	ldr	r3, [r3, #20]
90003b7a:	019a      	lsls	r2, r3, #6
90003b7c:	693b      	ldr	r3, [r7, #16]
90003b7e:	041b      	lsls	r3, r3, #16
90003b80:	431a      	orrs	r2, r3
90003b82:	687b      	ldr	r3, [r7, #4]
90003b84:	699b      	ldr	r3, [r3, #24]
90003b86:	061b      	lsls	r3, r3, #24
90003b88:	431a      	orrs	r2, r3
90003b8a:	68fb      	ldr	r3, [r7, #12]
90003b8c:	071b      	lsls	r3, r3, #28
90003b8e:	4944      	ldr	r1, [pc, #272]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003b90:	4313      	orrs	r3, r2
90003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
90003b96:	4b42      	ldr	r3, [pc, #264]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003b9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
90003ba0:	687b      	ldr	r3, [r7, #4]
90003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003ba4:	3b01      	subs	r3, #1
90003ba6:	021b      	lsls	r3, r3, #8
90003ba8:	493d      	ldr	r1, [pc, #244]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003baa:	4313      	orrs	r3, r2
90003bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
90003bb0:	687b      	ldr	r3, [r7, #4]
90003bb2:	681b      	ldr	r3, [r3, #0]
90003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90003bb8:	2b00      	cmp	r3, #0
90003bba:	d022      	beq.n	90003c02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
90003bbc:	687b      	ldr	r3, [r7, #4]
90003bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90003bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90003bc4:	d11d      	bne.n	90003c02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90003bc6:	4b36      	ldr	r3, [pc, #216]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003bcc:	0e1b      	lsrs	r3, r3, #24
90003bce:	f003 030f 	and.w	r3, r3, #15
90003bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90003bd4:	4b32      	ldr	r3, [pc, #200]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003bda:	0f1b      	lsrs	r3, r3, #28
90003bdc:	f003 0307 	and.w	r3, r3, #7
90003be0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
90003be2:	687b      	ldr	r3, [r7, #4]
90003be4:	695b      	ldr	r3, [r3, #20]
90003be6:	019a      	lsls	r2, r3, #6
90003be8:	687b      	ldr	r3, [r7, #4]
90003bea:	6a1b      	ldr	r3, [r3, #32]
90003bec:	041b      	lsls	r3, r3, #16
90003bee:	431a      	orrs	r2, r3
90003bf0:	693b      	ldr	r3, [r7, #16]
90003bf2:	061b      	lsls	r3, r3, #24
90003bf4:	431a      	orrs	r2, r3
90003bf6:	68fb      	ldr	r3, [r7, #12]
90003bf8:	071b      	lsls	r3, r3, #28
90003bfa:	4929      	ldr	r1, [pc, #164]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003bfc:	4313      	orrs	r3, r2
90003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
90003c02:	687b      	ldr	r3, [r7, #4]
90003c04:	681b      	ldr	r3, [r3, #0]
90003c06:	f003 0308 	and.w	r3, r3, #8
90003c0a:	2b00      	cmp	r3, #0
90003c0c:	d028      	beq.n	90003c60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90003c0e:	4b24      	ldr	r3, [pc, #144]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003c14:	0e1b      	lsrs	r3, r3, #24
90003c16:	f003 030f 	and.w	r3, r3, #15
90003c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90003c1c:	4b20      	ldr	r3, [pc, #128]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003c22:	0c1b      	lsrs	r3, r3, #16
90003c24:	f003 0303 	and.w	r3, r3, #3
90003c28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
90003c2a:	687b      	ldr	r3, [r7, #4]
90003c2c:	695b      	ldr	r3, [r3, #20]
90003c2e:	019a      	lsls	r2, r3, #6
90003c30:	68fb      	ldr	r3, [r7, #12]
90003c32:	041b      	lsls	r3, r3, #16
90003c34:	431a      	orrs	r2, r3
90003c36:	693b      	ldr	r3, [r7, #16]
90003c38:	061b      	lsls	r3, r3, #24
90003c3a:	431a      	orrs	r2, r3
90003c3c:	687b      	ldr	r3, [r7, #4]
90003c3e:	69db      	ldr	r3, [r3, #28]
90003c40:	071b      	lsls	r3, r3, #28
90003c42:	4917      	ldr	r1, [pc, #92]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003c44:	4313      	orrs	r3, r2
90003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
90003c4a:	4b15      	ldr	r3, [pc, #84]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90003c54:	687b      	ldr	r3, [r7, #4]
90003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003c58:	4911      	ldr	r1, [pc, #68]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003c5a:	4313      	orrs	r3, r2
90003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
90003c60:	4b0f      	ldr	r3, [pc, #60]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003c62:	681b      	ldr	r3, [r3, #0]
90003c64:	4a0e      	ldr	r2, [pc, #56]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90003c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003c6c:	f7fd fa1e 	bl	900010ac <HAL_GetTick>
90003c70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90003c72:	e008      	b.n	90003c86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90003c74:	f7fd fa1a 	bl	900010ac <HAL_GetTick>
90003c78:	4602      	mov	r2, r0
90003c7a:	697b      	ldr	r3, [r7, #20]
90003c7c:	1ad3      	subs	r3, r2, r3
90003c7e:	2b64      	cmp	r3, #100	; 0x64
90003c80:	d901      	bls.n	90003c86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90003c82:	2303      	movs	r3, #3
90003c84:	e007      	b.n	90003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90003c86:	4b06      	ldr	r3, [pc, #24]	; (90003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
90003c88:	681b      	ldr	r3, [r3, #0]
90003c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90003c92:	d1ef      	bne.n	90003c74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
90003c94:	2300      	movs	r3, #0
}
90003c96:	4618      	mov	r0, r3
90003c98:	3720      	adds	r7, #32
90003c9a:	46bd      	mov	sp, r7
90003c9c:	bd80      	pop	{r7, pc}
90003c9e:	bf00      	nop
90003ca0:	40023800 	.word	0x40023800

90003ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90003ca4:	b580      	push	{r7, lr}
90003ca6:	b082      	sub	sp, #8
90003ca8:	af00      	add	r7, sp, #0
90003caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90003cac:	687b      	ldr	r3, [r7, #4]
90003cae:	2b00      	cmp	r3, #0
90003cb0:	d101      	bne.n	90003cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90003cb2:	2301      	movs	r3, #1
90003cb4:	e040      	b.n	90003d38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90003cb6:	687b      	ldr	r3, [r7, #4]
90003cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90003cba:	2b00      	cmp	r3, #0
90003cbc:	d106      	bne.n	90003ccc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90003cbe:	687b      	ldr	r3, [r7, #4]
90003cc0:	2200      	movs	r2, #0
90003cc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90003cc6:	6878      	ldr	r0, [r7, #4]
90003cc8:	f7fc fffa 	bl	90000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90003ccc:	687b      	ldr	r3, [r7, #4]
90003cce:	2224      	movs	r2, #36	; 0x24
90003cd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
90003cd2:	687b      	ldr	r3, [r7, #4]
90003cd4:	681b      	ldr	r3, [r3, #0]
90003cd6:	681a      	ldr	r2, [r3, #0]
90003cd8:	687b      	ldr	r3, [r7, #4]
90003cda:	681b      	ldr	r3, [r3, #0]
90003cdc:	f022 0201 	bic.w	r2, r2, #1
90003ce0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90003ce2:	6878      	ldr	r0, [r7, #4]
90003ce4:	f000 f8c0 	bl	90003e68 <UART_SetConfig>
90003ce8:	4603      	mov	r3, r0
90003cea:	2b01      	cmp	r3, #1
90003cec:	d101      	bne.n	90003cf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
90003cee:	2301      	movs	r3, #1
90003cf0:	e022      	b.n	90003d38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90003cf2:	687b      	ldr	r3, [r7, #4]
90003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003cf6:	2b00      	cmp	r3, #0
90003cf8:	d002      	beq.n	90003d00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
90003cfa:	6878      	ldr	r0, [r7, #4]
90003cfc:	f000 fb18 	bl	90004330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90003d00:	687b      	ldr	r3, [r7, #4]
90003d02:	681b      	ldr	r3, [r3, #0]
90003d04:	685a      	ldr	r2, [r3, #4]
90003d06:	687b      	ldr	r3, [r7, #4]
90003d08:	681b      	ldr	r3, [r3, #0]
90003d0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
90003d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90003d10:	687b      	ldr	r3, [r7, #4]
90003d12:	681b      	ldr	r3, [r3, #0]
90003d14:	689a      	ldr	r2, [r3, #8]
90003d16:	687b      	ldr	r3, [r7, #4]
90003d18:	681b      	ldr	r3, [r3, #0]
90003d1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
90003d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90003d20:	687b      	ldr	r3, [r7, #4]
90003d22:	681b      	ldr	r3, [r3, #0]
90003d24:	681a      	ldr	r2, [r3, #0]
90003d26:	687b      	ldr	r3, [r7, #4]
90003d28:	681b      	ldr	r3, [r3, #0]
90003d2a:	f042 0201 	orr.w	r2, r2, #1
90003d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90003d30:	6878      	ldr	r0, [r7, #4]
90003d32:	f000 fb9f 	bl	90004474 <UART_CheckIdleState>
90003d36:	4603      	mov	r3, r0
}
90003d38:	4618      	mov	r0, r3
90003d3a:	3708      	adds	r7, #8
90003d3c:	46bd      	mov	sp, r7
90003d3e:	bd80      	pop	{r7, pc}

90003d40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90003d40:	b580      	push	{r7, lr}
90003d42:	b08a      	sub	sp, #40	; 0x28
90003d44:	af02      	add	r7, sp, #8
90003d46:	60f8      	str	r0, [r7, #12]
90003d48:	60b9      	str	r1, [r7, #8]
90003d4a:	603b      	str	r3, [r7, #0]
90003d4c:	4613      	mov	r3, r2
90003d4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90003d50:	68fb      	ldr	r3, [r7, #12]
90003d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90003d54:	2b20      	cmp	r3, #32
90003d56:	f040 8081 	bne.w	90003e5c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
90003d5a:	68bb      	ldr	r3, [r7, #8]
90003d5c:	2b00      	cmp	r3, #0
90003d5e:	d002      	beq.n	90003d66 <HAL_UART_Transmit+0x26>
90003d60:	88fb      	ldrh	r3, [r7, #6]
90003d62:	2b00      	cmp	r3, #0
90003d64:	d101      	bne.n	90003d6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90003d66:	2301      	movs	r3, #1
90003d68:	e079      	b.n	90003e5e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
90003d6a:	68fb      	ldr	r3, [r7, #12]
90003d6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
90003d70:	2b01      	cmp	r3, #1
90003d72:	d101      	bne.n	90003d78 <HAL_UART_Transmit+0x38>
90003d74:	2302      	movs	r3, #2
90003d76:	e072      	b.n	90003e5e <HAL_UART_Transmit+0x11e>
90003d78:	68fb      	ldr	r3, [r7, #12]
90003d7a:	2201      	movs	r2, #1
90003d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90003d80:	68fb      	ldr	r3, [r7, #12]
90003d82:	2200      	movs	r2, #0
90003d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
90003d88:	68fb      	ldr	r3, [r7, #12]
90003d8a:	2221      	movs	r2, #33	; 0x21
90003d8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90003d8e:	f7fd f98d 	bl	900010ac <HAL_GetTick>
90003d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90003d94:	68fb      	ldr	r3, [r7, #12]
90003d96:	88fa      	ldrh	r2, [r7, #6]
90003d98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
90003d9c:	68fb      	ldr	r3, [r7, #12]
90003d9e:	88fa      	ldrh	r2, [r7, #6]
90003da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90003da4:	68fb      	ldr	r3, [r7, #12]
90003da6:	689b      	ldr	r3, [r3, #8]
90003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90003dac:	d108      	bne.n	90003dc0 <HAL_UART_Transmit+0x80>
90003dae:	68fb      	ldr	r3, [r7, #12]
90003db0:	691b      	ldr	r3, [r3, #16]
90003db2:	2b00      	cmp	r3, #0
90003db4:	d104      	bne.n	90003dc0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
90003db6:	2300      	movs	r3, #0
90003db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90003dba:	68bb      	ldr	r3, [r7, #8]
90003dbc:	61bb      	str	r3, [r7, #24]
90003dbe:	e003      	b.n	90003dc8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
90003dc0:	68bb      	ldr	r3, [r7, #8]
90003dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90003dc4:	2300      	movs	r3, #0
90003dc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
90003dc8:	68fb      	ldr	r3, [r7, #12]
90003dca:	2200      	movs	r2, #0
90003dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
90003dd0:	e02c      	b.n	90003e2c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90003dd2:	683b      	ldr	r3, [r7, #0]
90003dd4:	9300      	str	r3, [sp, #0]
90003dd6:	697b      	ldr	r3, [r7, #20]
90003dd8:	2200      	movs	r2, #0
90003dda:	2180      	movs	r1, #128	; 0x80
90003ddc:	68f8      	ldr	r0, [r7, #12]
90003dde:	f000 fb92 	bl	90004506 <UART_WaitOnFlagUntilTimeout>
90003de2:	4603      	mov	r3, r0
90003de4:	2b00      	cmp	r3, #0
90003de6:	d001      	beq.n	90003dec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
90003de8:	2303      	movs	r3, #3
90003dea:	e038      	b.n	90003e5e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
90003dec:	69fb      	ldr	r3, [r7, #28]
90003dee:	2b00      	cmp	r3, #0
90003df0:	d10b      	bne.n	90003e0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90003df2:	69bb      	ldr	r3, [r7, #24]
90003df4:	881b      	ldrh	r3, [r3, #0]
90003df6:	461a      	mov	r2, r3
90003df8:	68fb      	ldr	r3, [r7, #12]
90003dfa:	681b      	ldr	r3, [r3, #0]
90003dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
90003e00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
90003e02:	69bb      	ldr	r3, [r7, #24]
90003e04:	3302      	adds	r3, #2
90003e06:	61bb      	str	r3, [r7, #24]
90003e08:	e007      	b.n	90003e1a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90003e0a:	69fb      	ldr	r3, [r7, #28]
90003e0c:	781a      	ldrb	r2, [r3, #0]
90003e0e:	68fb      	ldr	r3, [r7, #12]
90003e10:	681b      	ldr	r3, [r3, #0]
90003e12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
90003e14:	69fb      	ldr	r3, [r7, #28]
90003e16:	3301      	adds	r3, #1
90003e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90003e1a:	68fb      	ldr	r3, [r7, #12]
90003e1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
90003e20:	b29b      	uxth	r3, r3
90003e22:	3b01      	subs	r3, #1
90003e24:	b29a      	uxth	r2, r3
90003e26:	68fb      	ldr	r3, [r7, #12]
90003e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
90003e2c:	68fb      	ldr	r3, [r7, #12]
90003e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
90003e32:	b29b      	uxth	r3, r3
90003e34:	2b00      	cmp	r3, #0
90003e36:	d1cc      	bne.n	90003dd2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90003e38:	683b      	ldr	r3, [r7, #0]
90003e3a:	9300      	str	r3, [sp, #0]
90003e3c:	697b      	ldr	r3, [r7, #20]
90003e3e:	2200      	movs	r2, #0
90003e40:	2140      	movs	r1, #64	; 0x40
90003e42:	68f8      	ldr	r0, [r7, #12]
90003e44:	f000 fb5f 	bl	90004506 <UART_WaitOnFlagUntilTimeout>
90003e48:	4603      	mov	r3, r0
90003e4a:	2b00      	cmp	r3, #0
90003e4c:	d001      	beq.n	90003e52 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
90003e4e:	2303      	movs	r3, #3
90003e50:	e005      	b.n	90003e5e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90003e52:	68fb      	ldr	r3, [r7, #12]
90003e54:	2220      	movs	r2, #32
90003e56:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
90003e58:	2300      	movs	r3, #0
90003e5a:	e000      	b.n	90003e5e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
90003e5c:	2302      	movs	r3, #2
  }
}
90003e5e:	4618      	mov	r0, r3
90003e60:	3720      	adds	r7, #32
90003e62:	46bd      	mov	sp, r7
90003e64:	bd80      	pop	{r7, pc}
	...

90003e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90003e68:	b580      	push	{r7, lr}
90003e6a:	b088      	sub	sp, #32
90003e6c:	af00      	add	r7, sp, #0
90003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90003e70:	2300      	movs	r3, #0
90003e72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90003e74:	687b      	ldr	r3, [r7, #4]
90003e76:	689a      	ldr	r2, [r3, #8]
90003e78:	687b      	ldr	r3, [r7, #4]
90003e7a:	691b      	ldr	r3, [r3, #16]
90003e7c:	431a      	orrs	r2, r3
90003e7e:	687b      	ldr	r3, [r7, #4]
90003e80:	695b      	ldr	r3, [r3, #20]
90003e82:	431a      	orrs	r2, r3
90003e84:	687b      	ldr	r3, [r7, #4]
90003e86:	69db      	ldr	r3, [r3, #28]
90003e88:	4313      	orrs	r3, r2
90003e8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90003e8c:	687b      	ldr	r3, [r7, #4]
90003e8e:	681b      	ldr	r3, [r3, #0]
90003e90:	681a      	ldr	r2, [r3, #0]
90003e92:	4ba6      	ldr	r3, [pc, #664]	; (9000412c <UART_SetConfig+0x2c4>)
90003e94:	4013      	ands	r3, r2
90003e96:	687a      	ldr	r2, [r7, #4]
90003e98:	6812      	ldr	r2, [r2, #0]
90003e9a:	6979      	ldr	r1, [r7, #20]
90003e9c:	430b      	orrs	r3, r1
90003e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90003ea0:	687b      	ldr	r3, [r7, #4]
90003ea2:	681b      	ldr	r3, [r3, #0]
90003ea4:	685b      	ldr	r3, [r3, #4]
90003ea6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
90003eaa:	687b      	ldr	r3, [r7, #4]
90003eac:	68da      	ldr	r2, [r3, #12]
90003eae:	687b      	ldr	r3, [r7, #4]
90003eb0:	681b      	ldr	r3, [r3, #0]
90003eb2:	430a      	orrs	r2, r1
90003eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90003eb6:	687b      	ldr	r3, [r7, #4]
90003eb8:	699b      	ldr	r3, [r3, #24]
90003eba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
90003ebc:	687b      	ldr	r3, [r7, #4]
90003ebe:	6a1b      	ldr	r3, [r3, #32]
90003ec0:	697a      	ldr	r2, [r7, #20]
90003ec2:	4313      	orrs	r3, r2
90003ec4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90003ec6:	687b      	ldr	r3, [r7, #4]
90003ec8:	681b      	ldr	r3, [r3, #0]
90003eca:	689b      	ldr	r3, [r3, #8]
90003ecc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
90003ed0:	687b      	ldr	r3, [r7, #4]
90003ed2:	681b      	ldr	r3, [r3, #0]
90003ed4:	697a      	ldr	r2, [r7, #20]
90003ed6:	430a      	orrs	r2, r1
90003ed8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90003eda:	687b      	ldr	r3, [r7, #4]
90003edc:	681b      	ldr	r3, [r3, #0]
90003ede:	4a94      	ldr	r2, [pc, #592]	; (90004130 <UART_SetConfig+0x2c8>)
90003ee0:	4293      	cmp	r3, r2
90003ee2:	d120      	bne.n	90003f26 <UART_SetConfig+0xbe>
90003ee4:	4b93      	ldr	r3, [pc, #588]	; (90004134 <UART_SetConfig+0x2cc>)
90003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003eea:	f003 0303 	and.w	r3, r3, #3
90003eee:	2b03      	cmp	r3, #3
90003ef0:	d816      	bhi.n	90003f20 <UART_SetConfig+0xb8>
90003ef2:	a201      	add	r2, pc, #4	; (adr r2, 90003ef8 <UART_SetConfig+0x90>)
90003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003ef8:	90003f09 	.word	0x90003f09
90003efc:	90003f15 	.word	0x90003f15
90003f00:	90003f0f 	.word	0x90003f0f
90003f04:	90003f1b 	.word	0x90003f1b
90003f08:	2301      	movs	r3, #1
90003f0a:	77fb      	strb	r3, [r7, #31]
90003f0c:	e150      	b.n	900041b0 <UART_SetConfig+0x348>
90003f0e:	2302      	movs	r3, #2
90003f10:	77fb      	strb	r3, [r7, #31]
90003f12:	e14d      	b.n	900041b0 <UART_SetConfig+0x348>
90003f14:	2304      	movs	r3, #4
90003f16:	77fb      	strb	r3, [r7, #31]
90003f18:	e14a      	b.n	900041b0 <UART_SetConfig+0x348>
90003f1a:	2308      	movs	r3, #8
90003f1c:	77fb      	strb	r3, [r7, #31]
90003f1e:	e147      	b.n	900041b0 <UART_SetConfig+0x348>
90003f20:	2310      	movs	r3, #16
90003f22:	77fb      	strb	r3, [r7, #31]
90003f24:	e144      	b.n	900041b0 <UART_SetConfig+0x348>
90003f26:	687b      	ldr	r3, [r7, #4]
90003f28:	681b      	ldr	r3, [r3, #0]
90003f2a:	4a83      	ldr	r2, [pc, #524]	; (90004138 <UART_SetConfig+0x2d0>)
90003f2c:	4293      	cmp	r3, r2
90003f2e:	d132      	bne.n	90003f96 <UART_SetConfig+0x12e>
90003f30:	4b80      	ldr	r3, [pc, #512]	; (90004134 <UART_SetConfig+0x2cc>)
90003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003f36:	f003 030c 	and.w	r3, r3, #12
90003f3a:	2b0c      	cmp	r3, #12
90003f3c:	d828      	bhi.n	90003f90 <UART_SetConfig+0x128>
90003f3e:	a201      	add	r2, pc, #4	; (adr r2, 90003f44 <UART_SetConfig+0xdc>)
90003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003f44:	90003f79 	.word	0x90003f79
90003f48:	90003f91 	.word	0x90003f91
90003f4c:	90003f91 	.word	0x90003f91
90003f50:	90003f91 	.word	0x90003f91
90003f54:	90003f85 	.word	0x90003f85
90003f58:	90003f91 	.word	0x90003f91
90003f5c:	90003f91 	.word	0x90003f91
90003f60:	90003f91 	.word	0x90003f91
90003f64:	90003f7f 	.word	0x90003f7f
90003f68:	90003f91 	.word	0x90003f91
90003f6c:	90003f91 	.word	0x90003f91
90003f70:	90003f91 	.word	0x90003f91
90003f74:	90003f8b 	.word	0x90003f8b
90003f78:	2300      	movs	r3, #0
90003f7a:	77fb      	strb	r3, [r7, #31]
90003f7c:	e118      	b.n	900041b0 <UART_SetConfig+0x348>
90003f7e:	2302      	movs	r3, #2
90003f80:	77fb      	strb	r3, [r7, #31]
90003f82:	e115      	b.n	900041b0 <UART_SetConfig+0x348>
90003f84:	2304      	movs	r3, #4
90003f86:	77fb      	strb	r3, [r7, #31]
90003f88:	e112      	b.n	900041b0 <UART_SetConfig+0x348>
90003f8a:	2308      	movs	r3, #8
90003f8c:	77fb      	strb	r3, [r7, #31]
90003f8e:	e10f      	b.n	900041b0 <UART_SetConfig+0x348>
90003f90:	2310      	movs	r3, #16
90003f92:	77fb      	strb	r3, [r7, #31]
90003f94:	e10c      	b.n	900041b0 <UART_SetConfig+0x348>
90003f96:	687b      	ldr	r3, [r7, #4]
90003f98:	681b      	ldr	r3, [r3, #0]
90003f9a:	4a68      	ldr	r2, [pc, #416]	; (9000413c <UART_SetConfig+0x2d4>)
90003f9c:	4293      	cmp	r3, r2
90003f9e:	d120      	bne.n	90003fe2 <UART_SetConfig+0x17a>
90003fa0:	4b64      	ldr	r3, [pc, #400]	; (90004134 <UART_SetConfig+0x2cc>)
90003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003fa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
90003faa:	2b30      	cmp	r3, #48	; 0x30
90003fac:	d013      	beq.n	90003fd6 <UART_SetConfig+0x16e>
90003fae:	2b30      	cmp	r3, #48	; 0x30
90003fb0:	d814      	bhi.n	90003fdc <UART_SetConfig+0x174>
90003fb2:	2b20      	cmp	r3, #32
90003fb4:	d009      	beq.n	90003fca <UART_SetConfig+0x162>
90003fb6:	2b20      	cmp	r3, #32
90003fb8:	d810      	bhi.n	90003fdc <UART_SetConfig+0x174>
90003fba:	2b00      	cmp	r3, #0
90003fbc:	d002      	beq.n	90003fc4 <UART_SetConfig+0x15c>
90003fbe:	2b10      	cmp	r3, #16
90003fc0:	d006      	beq.n	90003fd0 <UART_SetConfig+0x168>
90003fc2:	e00b      	b.n	90003fdc <UART_SetConfig+0x174>
90003fc4:	2300      	movs	r3, #0
90003fc6:	77fb      	strb	r3, [r7, #31]
90003fc8:	e0f2      	b.n	900041b0 <UART_SetConfig+0x348>
90003fca:	2302      	movs	r3, #2
90003fcc:	77fb      	strb	r3, [r7, #31]
90003fce:	e0ef      	b.n	900041b0 <UART_SetConfig+0x348>
90003fd0:	2304      	movs	r3, #4
90003fd2:	77fb      	strb	r3, [r7, #31]
90003fd4:	e0ec      	b.n	900041b0 <UART_SetConfig+0x348>
90003fd6:	2308      	movs	r3, #8
90003fd8:	77fb      	strb	r3, [r7, #31]
90003fda:	e0e9      	b.n	900041b0 <UART_SetConfig+0x348>
90003fdc:	2310      	movs	r3, #16
90003fde:	77fb      	strb	r3, [r7, #31]
90003fe0:	e0e6      	b.n	900041b0 <UART_SetConfig+0x348>
90003fe2:	687b      	ldr	r3, [r7, #4]
90003fe4:	681b      	ldr	r3, [r3, #0]
90003fe6:	4a56      	ldr	r2, [pc, #344]	; (90004140 <UART_SetConfig+0x2d8>)
90003fe8:	4293      	cmp	r3, r2
90003fea:	d120      	bne.n	9000402e <UART_SetConfig+0x1c6>
90003fec:	4b51      	ldr	r3, [pc, #324]	; (90004134 <UART_SetConfig+0x2cc>)
90003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003ff2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
90003ff6:	2bc0      	cmp	r3, #192	; 0xc0
90003ff8:	d013      	beq.n	90004022 <UART_SetConfig+0x1ba>
90003ffa:	2bc0      	cmp	r3, #192	; 0xc0
90003ffc:	d814      	bhi.n	90004028 <UART_SetConfig+0x1c0>
90003ffe:	2b80      	cmp	r3, #128	; 0x80
90004000:	d009      	beq.n	90004016 <UART_SetConfig+0x1ae>
90004002:	2b80      	cmp	r3, #128	; 0x80
90004004:	d810      	bhi.n	90004028 <UART_SetConfig+0x1c0>
90004006:	2b00      	cmp	r3, #0
90004008:	d002      	beq.n	90004010 <UART_SetConfig+0x1a8>
9000400a:	2b40      	cmp	r3, #64	; 0x40
9000400c:	d006      	beq.n	9000401c <UART_SetConfig+0x1b4>
9000400e:	e00b      	b.n	90004028 <UART_SetConfig+0x1c0>
90004010:	2300      	movs	r3, #0
90004012:	77fb      	strb	r3, [r7, #31]
90004014:	e0cc      	b.n	900041b0 <UART_SetConfig+0x348>
90004016:	2302      	movs	r3, #2
90004018:	77fb      	strb	r3, [r7, #31]
9000401a:	e0c9      	b.n	900041b0 <UART_SetConfig+0x348>
9000401c:	2304      	movs	r3, #4
9000401e:	77fb      	strb	r3, [r7, #31]
90004020:	e0c6      	b.n	900041b0 <UART_SetConfig+0x348>
90004022:	2308      	movs	r3, #8
90004024:	77fb      	strb	r3, [r7, #31]
90004026:	e0c3      	b.n	900041b0 <UART_SetConfig+0x348>
90004028:	2310      	movs	r3, #16
9000402a:	77fb      	strb	r3, [r7, #31]
9000402c:	e0c0      	b.n	900041b0 <UART_SetConfig+0x348>
9000402e:	687b      	ldr	r3, [r7, #4]
90004030:	681b      	ldr	r3, [r3, #0]
90004032:	4a44      	ldr	r2, [pc, #272]	; (90004144 <UART_SetConfig+0x2dc>)
90004034:	4293      	cmp	r3, r2
90004036:	d125      	bne.n	90004084 <UART_SetConfig+0x21c>
90004038:	4b3e      	ldr	r3, [pc, #248]	; (90004134 <UART_SetConfig+0x2cc>)
9000403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000403e:	f403 7340 	and.w	r3, r3, #768	; 0x300
90004042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90004046:	d017      	beq.n	90004078 <UART_SetConfig+0x210>
90004048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9000404c:	d817      	bhi.n	9000407e <UART_SetConfig+0x216>
9000404e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90004052:	d00b      	beq.n	9000406c <UART_SetConfig+0x204>
90004054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90004058:	d811      	bhi.n	9000407e <UART_SetConfig+0x216>
9000405a:	2b00      	cmp	r3, #0
9000405c:	d003      	beq.n	90004066 <UART_SetConfig+0x1fe>
9000405e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90004062:	d006      	beq.n	90004072 <UART_SetConfig+0x20a>
90004064:	e00b      	b.n	9000407e <UART_SetConfig+0x216>
90004066:	2300      	movs	r3, #0
90004068:	77fb      	strb	r3, [r7, #31]
9000406a:	e0a1      	b.n	900041b0 <UART_SetConfig+0x348>
9000406c:	2302      	movs	r3, #2
9000406e:	77fb      	strb	r3, [r7, #31]
90004070:	e09e      	b.n	900041b0 <UART_SetConfig+0x348>
90004072:	2304      	movs	r3, #4
90004074:	77fb      	strb	r3, [r7, #31]
90004076:	e09b      	b.n	900041b0 <UART_SetConfig+0x348>
90004078:	2308      	movs	r3, #8
9000407a:	77fb      	strb	r3, [r7, #31]
9000407c:	e098      	b.n	900041b0 <UART_SetConfig+0x348>
9000407e:	2310      	movs	r3, #16
90004080:	77fb      	strb	r3, [r7, #31]
90004082:	e095      	b.n	900041b0 <UART_SetConfig+0x348>
90004084:	687b      	ldr	r3, [r7, #4]
90004086:	681b      	ldr	r3, [r3, #0]
90004088:	4a2f      	ldr	r2, [pc, #188]	; (90004148 <UART_SetConfig+0x2e0>)
9000408a:	4293      	cmp	r3, r2
9000408c:	d125      	bne.n	900040da <UART_SetConfig+0x272>
9000408e:	4b29      	ldr	r3, [pc, #164]	; (90004134 <UART_SetConfig+0x2cc>)
90004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004094:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
90004098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
9000409c:	d017      	beq.n	900040ce <UART_SetConfig+0x266>
9000409e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
900040a2:	d817      	bhi.n	900040d4 <UART_SetConfig+0x26c>
900040a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
900040a8:	d00b      	beq.n	900040c2 <UART_SetConfig+0x25a>
900040aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
900040ae:	d811      	bhi.n	900040d4 <UART_SetConfig+0x26c>
900040b0:	2b00      	cmp	r3, #0
900040b2:	d003      	beq.n	900040bc <UART_SetConfig+0x254>
900040b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
900040b8:	d006      	beq.n	900040c8 <UART_SetConfig+0x260>
900040ba:	e00b      	b.n	900040d4 <UART_SetConfig+0x26c>
900040bc:	2301      	movs	r3, #1
900040be:	77fb      	strb	r3, [r7, #31]
900040c0:	e076      	b.n	900041b0 <UART_SetConfig+0x348>
900040c2:	2302      	movs	r3, #2
900040c4:	77fb      	strb	r3, [r7, #31]
900040c6:	e073      	b.n	900041b0 <UART_SetConfig+0x348>
900040c8:	2304      	movs	r3, #4
900040ca:	77fb      	strb	r3, [r7, #31]
900040cc:	e070      	b.n	900041b0 <UART_SetConfig+0x348>
900040ce:	2308      	movs	r3, #8
900040d0:	77fb      	strb	r3, [r7, #31]
900040d2:	e06d      	b.n	900041b0 <UART_SetConfig+0x348>
900040d4:	2310      	movs	r3, #16
900040d6:	77fb      	strb	r3, [r7, #31]
900040d8:	e06a      	b.n	900041b0 <UART_SetConfig+0x348>
900040da:	687b      	ldr	r3, [r7, #4]
900040dc:	681b      	ldr	r3, [r3, #0]
900040de:	4a1b      	ldr	r2, [pc, #108]	; (9000414c <UART_SetConfig+0x2e4>)
900040e0:	4293      	cmp	r3, r2
900040e2:	d138      	bne.n	90004156 <UART_SetConfig+0x2ee>
900040e4:	4b13      	ldr	r3, [pc, #76]	; (90004134 <UART_SetConfig+0x2cc>)
900040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900040ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
900040ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
900040f2:	d017      	beq.n	90004124 <UART_SetConfig+0x2bc>
900040f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
900040f8:	d82a      	bhi.n	90004150 <UART_SetConfig+0x2e8>
900040fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900040fe:	d00b      	beq.n	90004118 <UART_SetConfig+0x2b0>
90004100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90004104:	d824      	bhi.n	90004150 <UART_SetConfig+0x2e8>
90004106:	2b00      	cmp	r3, #0
90004108:	d003      	beq.n	90004112 <UART_SetConfig+0x2aa>
9000410a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000410e:	d006      	beq.n	9000411e <UART_SetConfig+0x2b6>
90004110:	e01e      	b.n	90004150 <UART_SetConfig+0x2e8>
90004112:	2300      	movs	r3, #0
90004114:	77fb      	strb	r3, [r7, #31]
90004116:	e04b      	b.n	900041b0 <UART_SetConfig+0x348>
90004118:	2302      	movs	r3, #2
9000411a:	77fb      	strb	r3, [r7, #31]
9000411c:	e048      	b.n	900041b0 <UART_SetConfig+0x348>
9000411e:	2304      	movs	r3, #4
90004120:	77fb      	strb	r3, [r7, #31]
90004122:	e045      	b.n	900041b0 <UART_SetConfig+0x348>
90004124:	2308      	movs	r3, #8
90004126:	77fb      	strb	r3, [r7, #31]
90004128:	e042      	b.n	900041b0 <UART_SetConfig+0x348>
9000412a:	bf00      	nop
9000412c:	efff69f3 	.word	0xefff69f3
90004130:	40011000 	.word	0x40011000
90004134:	40023800 	.word	0x40023800
90004138:	40004400 	.word	0x40004400
9000413c:	40004800 	.word	0x40004800
90004140:	40004c00 	.word	0x40004c00
90004144:	40005000 	.word	0x40005000
90004148:	40011400 	.word	0x40011400
9000414c:	40007800 	.word	0x40007800
90004150:	2310      	movs	r3, #16
90004152:	77fb      	strb	r3, [r7, #31]
90004154:	e02c      	b.n	900041b0 <UART_SetConfig+0x348>
90004156:	687b      	ldr	r3, [r7, #4]
90004158:	681b      	ldr	r3, [r3, #0]
9000415a:	4a72      	ldr	r2, [pc, #456]	; (90004324 <UART_SetConfig+0x4bc>)
9000415c:	4293      	cmp	r3, r2
9000415e:	d125      	bne.n	900041ac <UART_SetConfig+0x344>
90004160:	4b71      	ldr	r3, [pc, #452]	; (90004328 <UART_SetConfig+0x4c0>)
90004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004166:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
9000416a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
9000416e:	d017      	beq.n	900041a0 <UART_SetConfig+0x338>
90004170:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
90004174:	d817      	bhi.n	900041a6 <UART_SetConfig+0x33e>
90004176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
9000417a:	d00b      	beq.n	90004194 <UART_SetConfig+0x32c>
9000417c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90004180:	d811      	bhi.n	900041a6 <UART_SetConfig+0x33e>
90004182:	2b00      	cmp	r3, #0
90004184:	d003      	beq.n	9000418e <UART_SetConfig+0x326>
90004186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000418a:	d006      	beq.n	9000419a <UART_SetConfig+0x332>
9000418c:	e00b      	b.n	900041a6 <UART_SetConfig+0x33e>
9000418e:	2300      	movs	r3, #0
90004190:	77fb      	strb	r3, [r7, #31]
90004192:	e00d      	b.n	900041b0 <UART_SetConfig+0x348>
90004194:	2302      	movs	r3, #2
90004196:	77fb      	strb	r3, [r7, #31]
90004198:	e00a      	b.n	900041b0 <UART_SetConfig+0x348>
9000419a:	2304      	movs	r3, #4
9000419c:	77fb      	strb	r3, [r7, #31]
9000419e:	e007      	b.n	900041b0 <UART_SetConfig+0x348>
900041a0:	2308      	movs	r3, #8
900041a2:	77fb      	strb	r3, [r7, #31]
900041a4:	e004      	b.n	900041b0 <UART_SetConfig+0x348>
900041a6:	2310      	movs	r3, #16
900041a8:	77fb      	strb	r3, [r7, #31]
900041aa:	e001      	b.n	900041b0 <UART_SetConfig+0x348>
900041ac:	2310      	movs	r3, #16
900041ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
900041b0:	687b      	ldr	r3, [r7, #4]
900041b2:	69db      	ldr	r3, [r3, #28]
900041b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
900041b8:	d15b      	bne.n	90004272 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
900041ba:	7ffb      	ldrb	r3, [r7, #31]
900041bc:	2b08      	cmp	r3, #8
900041be:	d828      	bhi.n	90004212 <UART_SetConfig+0x3aa>
900041c0:	a201      	add	r2, pc, #4	; (adr r2, 900041c8 <UART_SetConfig+0x360>)
900041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900041c6:	bf00      	nop
900041c8:	900041ed 	.word	0x900041ed
900041cc:	900041f5 	.word	0x900041f5
900041d0:	900041fd 	.word	0x900041fd
900041d4:	90004213 	.word	0x90004213
900041d8:	90004203 	.word	0x90004203
900041dc:	90004213 	.word	0x90004213
900041e0:	90004213 	.word	0x90004213
900041e4:	90004213 	.word	0x90004213
900041e8:	9000420b 	.word	0x9000420b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
900041ec:	f7ff f90a 	bl	90003404 <HAL_RCC_GetPCLK1Freq>
900041f0:	61b8      	str	r0, [r7, #24]
        break;
900041f2:	e013      	b.n	9000421c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
900041f4:	f7ff f91a 	bl	9000342c <HAL_RCC_GetPCLK2Freq>
900041f8:	61b8      	str	r0, [r7, #24]
        break;
900041fa:	e00f      	b.n	9000421c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
900041fc:	4b4b      	ldr	r3, [pc, #300]	; (9000432c <UART_SetConfig+0x4c4>)
900041fe:	61bb      	str	r3, [r7, #24]
        break;
90004200:	e00c      	b.n	9000421c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
90004202:	f7ff f82d 	bl	90003260 <HAL_RCC_GetSysClockFreq>
90004206:	61b8      	str	r0, [r7, #24]
        break;
90004208:	e008      	b.n	9000421c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000420a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9000420e:	61bb      	str	r3, [r7, #24]
        break;
90004210:	e004      	b.n	9000421c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
90004212:	2300      	movs	r3, #0
90004214:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
90004216:	2301      	movs	r3, #1
90004218:	77bb      	strb	r3, [r7, #30]
        break;
9000421a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000421c:	69bb      	ldr	r3, [r7, #24]
9000421e:	2b00      	cmp	r3, #0
90004220:	d074      	beq.n	9000430c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
90004222:	69bb      	ldr	r3, [r7, #24]
90004224:	005a      	lsls	r2, r3, #1
90004226:	687b      	ldr	r3, [r7, #4]
90004228:	685b      	ldr	r3, [r3, #4]
9000422a:	085b      	lsrs	r3, r3, #1
9000422c:	441a      	add	r2, r3
9000422e:	687b      	ldr	r3, [r7, #4]
90004230:	685b      	ldr	r3, [r3, #4]
90004232:	fbb2 f3f3 	udiv	r3, r2, r3
90004236:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90004238:	693b      	ldr	r3, [r7, #16]
9000423a:	2b0f      	cmp	r3, #15
9000423c:	d916      	bls.n	9000426c <UART_SetConfig+0x404>
9000423e:	693b      	ldr	r3, [r7, #16]
90004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90004244:	d212      	bcs.n	9000426c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
90004246:	693b      	ldr	r3, [r7, #16]
90004248:	b29b      	uxth	r3, r3
9000424a:	f023 030f 	bic.w	r3, r3, #15
9000424e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
90004250:	693b      	ldr	r3, [r7, #16]
90004252:	085b      	lsrs	r3, r3, #1
90004254:	b29b      	uxth	r3, r3
90004256:	f003 0307 	and.w	r3, r3, #7
9000425a:	b29a      	uxth	r2, r3
9000425c:	89fb      	ldrh	r3, [r7, #14]
9000425e:	4313      	orrs	r3, r2
90004260:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
90004262:	687b      	ldr	r3, [r7, #4]
90004264:	681b      	ldr	r3, [r3, #0]
90004266:	89fa      	ldrh	r2, [r7, #14]
90004268:	60da      	str	r2, [r3, #12]
9000426a:	e04f      	b.n	9000430c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
9000426c:	2301      	movs	r3, #1
9000426e:	77bb      	strb	r3, [r7, #30]
90004270:	e04c      	b.n	9000430c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
90004272:	7ffb      	ldrb	r3, [r7, #31]
90004274:	2b08      	cmp	r3, #8
90004276:	d828      	bhi.n	900042ca <UART_SetConfig+0x462>
90004278:	a201      	add	r2, pc, #4	; (adr r2, 90004280 <UART_SetConfig+0x418>)
9000427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000427e:	bf00      	nop
90004280:	900042a5 	.word	0x900042a5
90004284:	900042ad 	.word	0x900042ad
90004288:	900042b5 	.word	0x900042b5
9000428c:	900042cb 	.word	0x900042cb
90004290:	900042bb 	.word	0x900042bb
90004294:	900042cb 	.word	0x900042cb
90004298:	900042cb 	.word	0x900042cb
9000429c:	900042cb 	.word	0x900042cb
900042a0:	900042c3 	.word	0x900042c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
900042a4:	f7ff f8ae 	bl	90003404 <HAL_RCC_GetPCLK1Freq>
900042a8:	61b8      	str	r0, [r7, #24]
        break;
900042aa:	e013      	b.n	900042d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
900042ac:	f7ff f8be 	bl	9000342c <HAL_RCC_GetPCLK2Freq>
900042b0:	61b8      	str	r0, [r7, #24]
        break;
900042b2:	e00f      	b.n	900042d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
900042b4:	4b1d      	ldr	r3, [pc, #116]	; (9000432c <UART_SetConfig+0x4c4>)
900042b6:	61bb      	str	r3, [r7, #24]
        break;
900042b8:	e00c      	b.n	900042d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
900042ba:	f7fe ffd1 	bl	90003260 <HAL_RCC_GetSysClockFreq>
900042be:	61b8      	str	r0, [r7, #24]
        break;
900042c0:	e008      	b.n	900042d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
900042c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900042c6:	61bb      	str	r3, [r7, #24]
        break;
900042c8:	e004      	b.n	900042d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
900042ca:	2300      	movs	r3, #0
900042cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
900042ce:	2301      	movs	r3, #1
900042d0:	77bb      	strb	r3, [r7, #30]
        break;
900042d2:	bf00      	nop
    }

    if (pclk != 0U)
900042d4:	69bb      	ldr	r3, [r7, #24]
900042d6:	2b00      	cmp	r3, #0
900042d8:	d018      	beq.n	9000430c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
900042da:	687b      	ldr	r3, [r7, #4]
900042dc:	685b      	ldr	r3, [r3, #4]
900042de:	085a      	lsrs	r2, r3, #1
900042e0:	69bb      	ldr	r3, [r7, #24]
900042e2:	441a      	add	r2, r3
900042e4:	687b      	ldr	r3, [r7, #4]
900042e6:	685b      	ldr	r3, [r3, #4]
900042e8:	fbb2 f3f3 	udiv	r3, r2, r3
900042ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
900042ee:	693b      	ldr	r3, [r7, #16]
900042f0:	2b0f      	cmp	r3, #15
900042f2:	d909      	bls.n	90004308 <UART_SetConfig+0x4a0>
900042f4:	693b      	ldr	r3, [r7, #16]
900042f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900042fa:	d205      	bcs.n	90004308 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
900042fc:	693b      	ldr	r3, [r7, #16]
900042fe:	b29a      	uxth	r2, r3
90004300:	687b      	ldr	r3, [r7, #4]
90004302:	681b      	ldr	r3, [r3, #0]
90004304:	60da      	str	r2, [r3, #12]
90004306:	e001      	b.n	9000430c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
90004308:	2301      	movs	r3, #1
9000430a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000430c:	687b      	ldr	r3, [r7, #4]
9000430e:	2200      	movs	r2, #0
90004310:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
90004312:	687b      	ldr	r3, [r7, #4]
90004314:	2200      	movs	r2, #0
90004316:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
90004318:	7fbb      	ldrb	r3, [r7, #30]
}
9000431a:	4618      	mov	r0, r3
9000431c:	3720      	adds	r7, #32
9000431e:	46bd      	mov	sp, r7
90004320:	bd80      	pop	{r7, pc}
90004322:	bf00      	nop
90004324:	40007c00 	.word	0x40007c00
90004328:	40023800 	.word	0x40023800
9000432c:	00f42400 	.word	0x00f42400

90004330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
90004330:	b480      	push	{r7}
90004332:	b083      	sub	sp, #12
90004334:	af00      	add	r7, sp, #0
90004336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
90004338:	687b      	ldr	r3, [r7, #4]
9000433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000433c:	f003 0301 	and.w	r3, r3, #1
90004340:	2b00      	cmp	r3, #0
90004342:	d00a      	beq.n	9000435a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
90004344:	687b      	ldr	r3, [r7, #4]
90004346:	681b      	ldr	r3, [r3, #0]
90004348:	685b      	ldr	r3, [r3, #4]
9000434a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
9000434e:	687b      	ldr	r3, [r7, #4]
90004350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90004352:	687b      	ldr	r3, [r7, #4]
90004354:	681b      	ldr	r3, [r3, #0]
90004356:	430a      	orrs	r2, r1
90004358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000435a:	687b      	ldr	r3, [r7, #4]
9000435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000435e:	f003 0302 	and.w	r3, r3, #2
90004362:	2b00      	cmp	r3, #0
90004364:	d00a      	beq.n	9000437c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
90004366:	687b      	ldr	r3, [r7, #4]
90004368:	681b      	ldr	r3, [r3, #0]
9000436a:	685b      	ldr	r3, [r3, #4]
9000436c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
90004370:	687b      	ldr	r3, [r7, #4]
90004372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90004374:	687b      	ldr	r3, [r7, #4]
90004376:	681b      	ldr	r3, [r3, #0]
90004378:	430a      	orrs	r2, r1
9000437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000437c:	687b      	ldr	r3, [r7, #4]
9000437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004380:	f003 0304 	and.w	r3, r3, #4
90004384:	2b00      	cmp	r3, #0
90004386:	d00a      	beq.n	9000439e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
90004388:	687b      	ldr	r3, [r7, #4]
9000438a:	681b      	ldr	r3, [r3, #0]
9000438c:	685b      	ldr	r3, [r3, #4]
9000438e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
90004392:	687b      	ldr	r3, [r7, #4]
90004394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90004396:	687b      	ldr	r3, [r7, #4]
90004398:	681b      	ldr	r3, [r3, #0]
9000439a:	430a      	orrs	r2, r1
9000439c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000439e:	687b      	ldr	r3, [r7, #4]
900043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900043a2:	f003 0308 	and.w	r3, r3, #8
900043a6:	2b00      	cmp	r3, #0
900043a8:	d00a      	beq.n	900043c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
900043aa:	687b      	ldr	r3, [r7, #4]
900043ac:	681b      	ldr	r3, [r3, #0]
900043ae:	685b      	ldr	r3, [r3, #4]
900043b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
900043b4:	687b      	ldr	r3, [r7, #4]
900043b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900043b8:	687b      	ldr	r3, [r7, #4]
900043ba:	681b      	ldr	r3, [r3, #0]
900043bc:	430a      	orrs	r2, r1
900043be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
900043c0:	687b      	ldr	r3, [r7, #4]
900043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900043c4:	f003 0310 	and.w	r3, r3, #16
900043c8:	2b00      	cmp	r3, #0
900043ca:	d00a      	beq.n	900043e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
900043cc:	687b      	ldr	r3, [r7, #4]
900043ce:	681b      	ldr	r3, [r3, #0]
900043d0:	689b      	ldr	r3, [r3, #8]
900043d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
900043d6:	687b      	ldr	r3, [r7, #4]
900043d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900043da:	687b      	ldr	r3, [r7, #4]
900043dc:	681b      	ldr	r3, [r3, #0]
900043de:	430a      	orrs	r2, r1
900043e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
900043e2:	687b      	ldr	r3, [r7, #4]
900043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900043e6:	f003 0320 	and.w	r3, r3, #32
900043ea:	2b00      	cmp	r3, #0
900043ec:	d00a      	beq.n	90004404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
900043ee:	687b      	ldr	r3, [r7, #4]
900043f0:	681b      	ldr	r3, [r3, #0]
900043f2:	689b      	ldr	r3, [r3, #8]
900043f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
900043f8:	687b      	ldr	r3, [r7, #4]
900043fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
900043fc:	687b      	ldr	r3, [r7, #4]
900043fe:	681b      	ldr	r3, [r3, #0]
90004400:	430a      	orrs	r2, r1
90004402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
90004404:	687b      	ldr	r3, [r7, #4]
90004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000440c:	2b00      	cmp	r3, #0
9000440e:	d01a      	beq.n	90004446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
90004410:	687b      	ldr	r3, [r7, #4]
90004412:	681b      	ldr	r3, [r3, #0]
90004414:	685b      	ldr	r3, [r3, #4]
90004416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
9000441a:	687b      	ldr	r3, [r7, #4]
9000441c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000441e:	687b      	ldr	r3, [r7, #4]
90004420:	681b      	ldr	r3, [r3, #0]
90004422:	430a      	orrs	r2, r1
90004424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
90004426:	687b      	ldr	r3, [r7, #4]
90004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
9000442e:	d10a      	bne.n	90004446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
90004430:	687b      	ldr	r3, [r7, #4]
90004432:	681b      	ldr	r3, [r3, #0]
90004434:	685b      	ldr	r3, [r3, #4]
90004436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
9000443a:	687b      	ldr	r3, [r7, #4]
9000443c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000443e:	687b      	ldr	r3, [r7, #4]
90004440:	681b      	ldr	r3, [r3, #0]
90004442:	430a      	orrs	r2, r1
90004444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
90004446:	687b      	ldr	r3, [r7, #4]
90004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000444e:	2b00      	cmp	r3, #0
90004450:	d00a      	beq.n	90004468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
90004452:	687b      	ldr	r3, [r7, #4]
90004454:	681b      	ldr	r3, [r3, #0]
90004456:	685b      	ldr	r3, [r3, #4]
90004458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
9000445c:	687b      	ldr	r3, [r7, #4]
9000445e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
90004460:	687b      	ldr	r3, [r7, #4]
90004462:	681b      	ldr	r3, [r3, #0]
90004464:	430a      	orrs	r2, r1
90004466:	605a      	str	r2, [r3, #4]
  }
}
90004468:	bf00      	nop
9000446a:	370c      	adds	r7, #12
9000446c:	46bd      	mov	sp, r7
9000446e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004472:	4770      	bx	lr

90004474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
90004474:	b580      	push	{r7, lr}
90004476:	b086      	sub	sp, #24
90004478:	af02      	add	r7, sp, #8
9000447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000447c:	687b      	ldr	r3, [r7, #4]
9000447e:	2200      	movs	r2, #0
90004480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
90004484:	f7fc fe12 	bl	900010ac <HAL_GetTick>
90004488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000448a:	687b      	ldr	r3, [r7, #4]
9000448c:	681b      	ldr	r3, [r3, #0]
9000448e:	681b      	ldr	r3, [r3, #0]
90004490:	f003 0308 	and.w	r3, r3, #8
90004494:	2b08      	cmp	r3, #8
90004496:	d10e      	bne.n	900044b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90004498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
9000449c:	9300      	str	r3, [sp, #0]
9000449e:	68fb      	ldr	r3, [r7, #12]
900044a0:	2200      	movs	r2, #0
900044a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
900044a6:	6878      	ldr	r0, [r7, #4]
900044a8:	f000 f82d 	bl	90004506 <UART_WaitOnFlagUntilTimeout>
900044ac:	4603      	mov	r3, r0
900044ae:	2b00      	cmp	r3, #0
900044b0:	d001      	beq.n	900044b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
900044b2:	2303      	movs	r3, #3
900044b4:	e023      	b.n	900044fe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
900044b6:	687b      	ldr	r3, [r7, #4]
900044b8:	681b      	ldr	r3, [r3, #0]
900044ba:	681b      	ldr	r3, [r3, #0]
900044bc:	f003 0304 	and.w	r3, r3, #4
900044c0:	2b04      	cmp	r3, #4
900044c2:	d10e      	bne.n	900044e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
900044c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
900044c8:	9300      	str	r3, [sp, #0]
900044ca:	68fb      	ldr	r3, [r7, #12]
900044cc:	2200      	movs	r2, #0
900044ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
900044d2:	6878      	ldr	r0, [r7, #4]
900044d4:	f000 f817 	bl	90004506 <UART_WaitOnFlagUntilTimeout>
900044d8:	4603      	mov	r3, r0
900044da:	2b00      	cmp	r3, #0
900044dc:	d001      	beq.n	900044e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
900044de:	2303      	movs	r3, #3
900044e0:	e00d      	b.n	900044fe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
900044e2:	687b      	ldr	r3, [r7, #4]
900044e4:	2220      	movs	r2, #32
900044e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
900044e8:	687b      	ldr	r3, [r7, #4]
900044ea:	2220      	movs	r2, #32
900044ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
900044ee:	687b      	ldr	r3, [r7, #4]
900044f0:	2200      	movs	r2, #0
900044f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
900044f4:	687b      	ldr	r3, [r7, #4]
900044f6:	2200      	movs	r2, #0
900044f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
900044fc:	2300      	movs	r3, #0
}
900044fe:	4618      	mov	r0, r3
90004500:	3710      	adds	r7, #16
90004502:	46bd      	mov	sp, r7
90004504:	bd80      	pop	{r7, pc}

90004506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
90004506:	b580      	push	{r7, lr}
90004508:	b09c      	sub	sp, #112	; 0x70
9000450a:	af00      	add	r7, sp, #0
9000450c:	60f8      	str	r0, [r7, #12]
9000450e:	60b9      	str	r1, [r7, #8]
90004510:	603b      	str	r3, [r7, #0]
90004512:	4613      	mov	r3, r2
90004514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90004516:	e0a5      	b.n	90004664 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90004518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000451a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000451e:	f000 80a1 	beq.w	90004664 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90004522:	f7fc fdc3 	bl	900010ac <HAL_GetTick>
90004526:	4602      	mov	r2, r0
90004528:	683b      	ldr	r3, [r7, #0]
9000452a:	1ad3      	subs	r3, r2, r3
9000452c:	6fba      	ldr	r2, [r7, #120]	; 0x78
9000452e:	429a      	cmp	r2, r3
90004530:	d302      	bcc.n	90004538 <UART_WaitOnFlagUntilTimeout+0x32>
90004532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
90004534:	2b00      	cmp	r3, #0
90004536:	d13e      	bne.n	900045b6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
90004538:	68fb      	ldr	r3, [r7, #12]
9000453a:	681b      	ldr	r3, [r3, #0]
9000453c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90004540:	e853 3f00 	ldrex	r3, [r3]
90004544:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
90004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90004548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
9000454c:	667b      	str	r3, [r7, #100]	; 0x64
9000454e:	68fb      	ldr	r3, [r7, #12]
90004550:	681b      	ldr	r3, [r3, #0]
90004552:	461a      	mov	r2, r3
90004554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
90004556:	65fb      	str	r3, [r7, #92]	; 0x5c
90004558:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000455a:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000455c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
9000455e:	e841 2300 	strex	r3, r2, [r1]
90004562:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
90004564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90004566:	2b00      	cmp	r3, #0
90004568:	d1e6      	bne.n	90004538 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000456a:	68fb      	ldr	r3, [r7, #12]
9000456c:	681b      	ldr	r3, [r3, #0]
9000456e:	3308      	adds	r3, #8
90004570:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90004572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004574:	e853 3f00 	ldrex	r3, [r3]
90004578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
9000457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000457c:	f023 0301 	bic.w	r3, r3, #1
90004580:	663b      	str	r3, [r7, #96]	; 0x60
90004582:	68fb      	ldr	r3, [r7, #12]
90004584:	681b      	ldr	r3, [r3, #0]
90004586:	3308      	adds	r3, #8
90004588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
9000458a:	64ba      	str	r2, [r7, #72]	; 0x48
9000458c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000458e:	6c79      	ldr	r1, [r7, #68]	; 0x44
90004590:	6cba      	ldr	r2, [r7, #72]	; 0x48
90004592:	e841 2300 	strex	r3, r2, [r1]
90004596:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
90004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000459a:	2b00      	cmp	r3, #0
9000459c:	d1e5      	bne.n	9000456a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
9000459e:	68fb      	ldr	r3, [r7, #12]
900045a0:	2220      	movs	r2, #32
900045a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
900045a4:	68fb      	ldr	r3, [r7, #12]
900045a6:	2220      	movs	r2, #32
900045a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
900045aa:	68fb      	ldr	r3, [r7, #12]
900045ac:	2200      	movs	r2, #0
900045ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
900045b2:	2303      	movs	r3, #3
900045b4:	e067      	b.n	90004686 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
900045b6:	68fb      	ldr	r3, [r7, #12]
900045b8:	681b      	ldr	r3, [r3, #0]
900045ba:	681b      	ldr	r3, [r3, #0]
900045bc:	f003 0304 	and.w	r3, r3, #4
900045c0:	2b00      	cmp	r3, #0
900045c2:	d04f      	beq.n	90004664 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
900045c4:	68fb      	ldr	r3, [r7, #12]
900045c6:	681b      	ldr	r3, [r3, #0]
900045c8:	69db      	ldr	r3, [r3, #28]
900045ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
900045ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
900045d2:	d147      	bne.n	90004664 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
900045d4:	68fb      	ldr	r3, [r7, #12]
900045d6:	681b      	ldr	r3, [r3, #0]
900045d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
900045dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
900045de:	68fb      	ldr	r3, [r7, #12]
900045e0:	681b      	ldr	r3, [r3, #0]
900045e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900045e6:	e853 3f00 	ldrex	r3, [r3]
900045ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
900045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900045ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
900045f2:	66fb      	str	r3, [r7, #108]	; 0x6c
900045f4:	68fb      	ldr	r3, [r7, #12]
900045f6:	681b      	ldr	r3, [r3, #0]
900045f8:	461a      	mov	r2, r3
900045fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
900045fc:	637b      	str	r3, [r7, #52]	; 0x34
900045fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90004600:	6b39      	ldr	r1, [r7, #48]	; 0x30
90004602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90004604:	e841 2300 	strex	r3, r2, [r1]
90004608:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
9000460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000460c:	2b00      	cmp	r3, #0
9000460e:	d1e6      	bne.n	900045de <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90004610:	68fb      	ldr	r3, [r7, #12]
90004612:	681b      	ldr	r3, [r3, #0]
90004614:	3308      	adds	r3, #8
90004616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90004618:	697b      	ldr	r3, [r7, #20]
9000461a:	e853 3f00 	ldrex	r3, [r3]
9000461e:	613b      	str	r3, [r7, #16]
   return(result);
90004620:	693b      	ldr	r3, [r7, #16]
90004622:	f023 0301 	bic.w	r3, r3, #1
90004626:	66bb      	str	r3, [r7, #104]	; 0x68
90004628:	68fb      	ldr	r3, [r7, #12]
9000462a:	681b      	ldr	r3, [r3, #0]
9000462c:	3308      	adds	r3, #8
9000462e:	6eba      	ldr	r2, [r7, #104]	; 0x68
90004630:	623a      	str	r2, [r7, #32]
90004632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90004634:	69f9      	ldr	r1, [r7, #28]
90004636:	6a3a      	ldr	r2, [r7, #32]
90004638:	e841 2300 	strex	r3, r2, [r1]
9000463c:	61bb      	str	r3, [r7, #24]
   return(result);
9000463e:	69bb      	ldr	r3, [r7, #24]
90004640:	2b00      	cmp	r3, #0
90004642:	d1e5      	bne.n	90004610 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
90004644:	68fb      	ldr	r3, [r7, #12]
90004646:	2220      	movs	r2, #32
90004648:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
9000464a:	68fb      	ldr	r3, [r7, #12]
9000464c:	2220      	movs	r2, #32
9000464e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
90004650:	68fb      	ldr	r3, [r7, #12]
90004652:	2220      	movs	r2, #32
90004654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
90004658:	68fb      	ldr	r3, [r7, #12]
9000465a:	2200      	movs	r2, #0
9000465c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
90004660:	2303      	movs	r3, #3
90004662:	e010      	b.n	90004686 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90004664:	68fb      	ldr	r3, [r7, #12]
90004666:	681b      	ldr	r3, [r3, #0]
90004668:	69da      	ldr	r2, [r3, #28]
9000466a:	68bb      	ldr	r3, [r7, #8]
9000466c:	4013      	ands	r3, r2
9000466e:	68ba      	ldr	r2, [r7, #8]
90004670:	429a      	cmp	r2, r3
90004672:	bf0c      	ite	eq
90004674:	2301      	moveq	r3, #1
90004676:	2300      	movne	r3, #0
90004678:	b2db      	uxtb	r3, r3
9000467a:	461a      	mov	r2, r3
9000467c:	79fb      	ldrb	r3, [r7, #7]
9000467e:	429a      	cmp	r2, r3
90004680:	f43f af4a 	beq.w	90004518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90004684:	2300      	movs	r3, #0
}
90004686:	4618      	mov	r0, r3
90004688:	3770      	adds	r7, #112	; 0x70
9000468a:	46bd      	mov	sp, r7
9000468c:	bd80      	pop	{r7, pc}
	...

90004690 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
90004690:	b580      	push	{r7, lr}
90004692:	b084      	sub	sp, #16
90004694:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
90004696:	4ba0      	ldr	r3, [pc, #640]	; (90004918 <MX_LWIP_Init+0x288>)
90004698:	22c0      	movs	r2, #192	; 0xc0
9000469a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
9000469c:	4b9e      	ldr	r3, [pc, #632]	; (90004918 <MX_LWIP_Init+0x288>)
9000469e:	22a8      	movs	r2, #168	; 0xa8
900046a0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
900046a2:	4b9d      	ldr	r3, [pc, #628]	; (90004918 <MX_LWIP_Init+0x288>)
900046a4:	2200      	movs	r2, #0
900046a6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
900046a8:	4b9b      	ldr	r3, [pc, #620]	; (90004918 <MX_LWIP_Init+0x288>)
900046aa:	227b      	movs	r2, #123	; 0x7b
900046ac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
900046ae:	4b9b      	ldr	r3, [pc, #620]	; (9000491c <MX_LWIP_Init+0x28c>)
900046b0:	22ff      	movs	r2, #255	; 0xff
900046b2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
900046b4:	4b99      	ldr	r3, [pc, #612]	; (9000491c <MX_LWIP_Init+0x28c>)
900046b6:	22ff      	movs	r2, #255	; 0xff
900046b8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
900046ba:	4b98      	ldr	r3, [pc, #608]	; (9000491c <MX_LWIP_Init+0x28c>)
900046bc:	22ff      	movs	r2, #255	; 0xff
900046be:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
900046c0:	4b96      	ldr	r3, [pc, #600]	; (9000491c <MX_LWIP_Init+0x28c>)
900046c2:	2200      	movs	r2, #0
900046c4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
900046c6:	4b96      	ldr	r3, [pc, #600]	; (90004920 <MX_LWIP_Init+0x290>)
900046c8:	22c0      	movs	r2, #192	; 0xc0
900046ca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
900046cc:	4b94      	ldr	r3, [pc, #592]	; (90004920 <MX_LWIP_Init+0x290>)
900046ce:	22a8      	movs	r2, #168	; 0xa8
900046d0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
900046d2:	4b93      	ldr	r3, [pc, #588]	; (90004920 <MX_LWIP_Init+0x290>)
900046d4:	2200      	movs	r2, #0
900046d6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
900046d8:	4b91      	ldr	r3, [pc, #580]	; (90004920 <MX_LWIP_Init+0x290>)
900046da:	2201      	movs	r2, #1
900046dc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
900046de:	2100      	movs	r1, #0
900046e0:	2000      	movs	r0, #0
900046e2:	f007 f821 	bl	9000b728 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
900046e6:	4b8c      	ldr	r3, [pc, #560]	; (90004918 <MX_LWIP_Init+0x288>)
900046e8:	781b      	ldrb	r3, [r3, #0]
900046ea:	061a      	lsls	r2, r3, #24
900046ec:	4b8a      	ldr	r3, [pc, #552]	; (90004918 <MX_LWIP_Init+0x288>)
900046ee:	785b      	ldrb	r3, [r3, #1]
900046f0:	041b      	lsls	r3, r3, #16
900046f2:	431a      	orrs	r2, r3
900046f4:	4b88      	ldr	r3, [pc, #544]	; (90004918 <MX_LWIP_Init+0x288>)
900046f6:	789b      	ldrb	r3, [r3, #2]
900046f8:	021b      	lsls	r3, r3, #8
900046fa:	4313      	orrs	r3, r2
900046fc:	4a86      	ldr	r2, [pc, #536]	; (90004918 <MX_LWIP_Init+0x288>)
900046fe:	78d2      	ldrb	r2, [r2, #3]
90004700:	4313      	orrs	r3, r2
90004702:	061a      	lsls	r2, r3, #24
90004704:	4b84      	ldr	r3, [pc, #528]	; (90004918 <MX_LWIP_Init+0x288>)
90004706:	781b      	ldrb	r3, [r3, #0]
90004708:	0619      	lsls	r1, r3, #24
9000470a:	4b83      	ldr	r3, [pc, #524]	; (90004918 <MX_LWIP_Init+0x288>)
9000470c:	785b      	ldrb	r3, [r3, #1]
9000470e:	041b      	lsls	r3, r3, #16
90004710:	4319      	orrs	r1, r3
90004712:	4b81      	ldr	r3, [pc, #516]	; (90004918 <MX_LWIP_Init+0x288>)
90004714:	789b      	ldrb	r3, [r3, #2]
90004716:	021b      	lsls	r3, r3, #8
90004718:	430b      	orrs	r3, r1
9000471a:	497f      	ldr	r1, [pc, #508]	; (90004918 <MX_LWIP_Init+0x288>)
9000471c:	78c9      	ldrb	r1, [r1, #3]
9000471e:	430b      	orrs	r3, r1
90004720:	021b      	lsls	r3, r3, #8
90004722:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90004726:	431a      	orrs	r2, r3
90004728:	4b7b      	ldr	r3, [pc, #492]	; (90004918 <MX_LWIP_Init+0x288>)
9000472a:	781b      	ldrb	r3, [r3, #0]
9000472c:	0619      	lsls	r1, r3, #24
9000472e:	4b7a      	ldr	r3, [pc, #488]	; (90004918 <MX_LWIP_Init+0x288>)
90004730:	785b      	ldrb	r3, [r3, #1]
90004732:	041b      	lsls	r3, r3, #16
90004734:	4319      	orrs	r1, r3
90004736:	4b78      	ldr	r3, [pc, #480]	; (90004918 <MX_LWIP_Init+0x288>)
90004738:	789b      	ldrb	r3, [r3, #2]
9000473a:	021b      	lsls	r3, r3, #8
9000473c:	430b      	orrs	r3, r1
9000473e:	4976      	ldr	r1, [pc, #472]	; (90004918 <MX_LWIP_Init+0x288>)
90004740:	78c9      	ldrb	r1, [r1, #3]
90004742:	430b      	orrs	r3, r1
90004744:	0a1b      	lsrs	r3, r3, #8
90004746:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9000474a:	431a      	orrs	r2, r3
9000474c:	4b72      	ldr	r3, [pc, #456]	; (90004918 <MX_LWIP_Init+0x288>)
9000474e:	781b      	ldrb	r3, [r3, #0]
90004750:	0619      	lsls	r1, r3, #24
90004752:	4b71      	ldr	r3, [pc, #452]	; (90004918 <MX_LWIP_Init+0x288>)
90004754:	785b      	ldrb	r3, [r3, #1]
90004756:	041b      	lsls	r3, r3, #16
90004758:	4319      	orrs	r1, r3
9000475a:	4b6f      	ldr	r3, [pc, #444]	; (90004918 <MX_LWIP_Init+0x288>)
9000475c:	789b      	ldrb	r3, [r3, #2]
9000475e:	021b      	lsls	r3, r3, #8
90004760:	430b      	orrs	r3, r1
90004762:	496d      	ldr	r1, [pc, #436]	; (90004918 <MX_LWIP_Init+0x288>)
90004764:	78c9      	ldrb	r1, [r1, #3]
90004766:	430b      	orrs	r3, r1
90004768:	0e1b      	lsrs	r3, r3, #24
9000476a:	4313      	orrs	r3, r2
9000476c:	4a6d      	ldr	r2, [pc, #436]	; (90004924 <MX_LWIP_Init+0x294>)
9000476e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
90004770:	4b6a      	ldr	r3, [pc, #424]	; (9000491c <MX_LWIP_Init+0x28c>)
90004772:	781b      	ldrb	r3, [r3, #0]
90004774:	061a      	lsls	r2, r3, #24
90004776:	4b69      	ldr	r3, [pc, #420]	; (9000491c <MX_LWIP_Init+0x28c>)
90004778:	785b      	ldrb	r3, [r3, #1]
9000477a:	041b      	lsls	r3, r3, #16
9000477c:	431a      	orrs	r2, r3
9000477e:	4b67      	ldr	r3, [pc, #412]	; (9000491c <MX_LWIP_Init+0x28c>)
90004780:	789b      	ldrb	r3, [r3, #2]
90004782:	021b      	lsls	r3, r3, #8
90004784:	4313      	orrs	r3, r2
90004786:	4a65      	ldr	r2, [pc, #404]	; (9000491c <MX_LWIP_Init+0x28c>)
90004788:	78d2      	ldrb	r2, [r2, #3]
9000478a:	4313      	orrs	r3, r2
9000478c:	061a      	lsls	r2, r3, #24
9000478e:	4b63      	ldr	r3, [pc, #396]	; (9000491c <MX_LWIP_Init+0x28c>)
90004790:	781b      	ldrb	r3, [r3, #0]
90004792:	0619      	lsls	r1, r3, #24
90004794:	4b61      	ldr	r3, [pc, #388]	; (9000491c <MX_LWIP_Init+0x28c>)
90004796:	785b      	ldrb	r3, [r3, #1]
90004798:	041b      	lsls	r3, r3, #16
9000479a:	4319      	orrs	r1, r3
9000479c:	4b5f      	ldr	r3, [pc, #380]	; (9000491c <MX_LWIP_Init+0x28c>)
9000479e:	789b      	ldrb	r3, [r3, #2]
900047a0:	021b      	lsls	r3, r3, #8
900047a2:	430b      	orrs	r3, r1
900047a4:	495d      	ldr	r1, [pc, #372]	; (9000491c <MX_LWIP_Init+0x28c>)
900047a6:	78c9      	ldrb	r1, [r1, #3]
900047a8:	430b      	orrs	r3, r1
900047aa:	021b      	lsls	r3, r3, #8
900047ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
900047b0:	431a      	orrs	r2, r3
900047b2:	4b5a      	ldr	r3, [pc, #360]	; (9000491c <MX_LWIP_Init+0x28c>)
900047b4:	781b      	ldrb	r3, [r3, #0]
900047b6:	0619      	lsls	r1, r3, #24
900047b8:	4b58      	ldr	r3, [pc, #352]	; (9000491c <MX_LWIP_Init+0x28c>)
900047ba:	785b      	ldrb	r3, [r3, #1]
900047bc:	041b      	lsls	r3, r3, #16
900047be:	4319      	orrs	r1, r3
900047c0:	4b56      	ldr	r3, [pc, #344]	; (9000491c <MX_LWIP_Init+0x28c>)
900047c2:	789b      	ldrb	r3, [r3, #2]
900047c4:	021b      	lsls	r3, r3, #8
900047c6:	430b      	orrs	r3, r1
900047c8:	4954      	ldr	r1, [pc, #336]	; (9000491c <MX_LWIP_Init+0x28c>)
900047ca:	78c9      	ldrb	r1, [r1, #3]
900047cc:	430b      	orrs	r3, r1
900047ce:	0a1b      	lsrs	r3, r3, #8
900047d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900047d4:	431a      	orrs	r2, r3
900047d6:	4b51      	ldr	r3, [pc, #324]	; (9000491c <MX_LWIP_Init+0x28c>)
900047d8:	781b      	ldrb	r3, [r3, #0]
900047da:	0619      	lsls	r1, r3, #24
900047dc:	4b4f      	ldr	r3, [pc, #316]	; (9000491c <MX_LWIP_Init+0x28c>)
900047de:	785b      	ldrb	r3, [r3, #1]
900047e0:	041b      	lsls	r3, r3, #16
900047e2:	4319      	orrs	r1, r3
900047e4:	4b4d      	ldr	r3, [pc, #308]	; (9000491c <MX_LWIP_Init+0x28c>)
900047e6:	789b      	ldrb	r3, [r3, #2]
900047e8:	021b      	lsls	r3, r3, #8
900047ea:	430b      	orrs	r3, r1
900047ec:	494b      	ldr	r1, [pc, #300]	; (9000491c <MX_LWIP_Init+0x28c>)
900047ee:	78c9      	ldrb	r1, [r1, #3]
900047f0:	430b      	orrs	r3, r1
900047f2:	0e1b      	lsrs	r3, r3, #24
900047f4:	4313      	orrs	r3, r2
900047f6:	4a4c      	ldr	r2, [pc, #304]	; (90004928 <MX_LWIP_Init+0x298>)
900047f8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
900047fa:	4b49      	ldr	r3, [pc, #292]	; (90004920 <MX_LWIP_Init+0x290>)
900047fc:	781b      	ldrb	r3, [r3, #0]
900047fe:	061a      	lsls	r2, r3, #24
90004800:	4b47      	ldr	r3, [pc, #284]	; (90004920 <MX_LWIP_Init+0x290>)
90004802:	785b      	ldrb	r3, [r3, #1]
90004804:	041b      	lsls	r3, r3, #16
90004806:	431a      	orrs	r2, r3
90004808:	4b45      	ldr	r3, [pc, #276]	; (90004920 <MX_LWIP_Init+0x290>)
9000480a:	789b      	ldrb	r3, [r3, #2]
9000480c:	021b      	lsls	r3, r3, #8
9000480e:	4313      	orrs	r3, r2
90004810:	4a43      	ldr	r2, [pc, #268]	; (90004920 <MX_LWIP_Init+0x290>)
90004812:	78d2      	ldrb	r2, [r2, #3]
90004814:	4313      	orrs	r3, r2
90004816:	061a      	lsls	r2, r3, #24
90004818:	4b41      	ldr	r3, [pc, #260]	; (90004920 <MX_LWIP_Init+0x290>)
9000481a:	781b      	ldrb	r3, [r3, #0]
9000481c:	0619      	lsls	r1, r3, #24
9000481e:	4b40      	ldr	r3, [pc, #256]	; (90004920 <MX_LWIP_Init+0x290>)
90004820:	785b      	ldrb	r3, [r3, #1]
90004822:	041b      	lsls	r3, r3, #16
90004824:	4319      	orrs	r1, r3
90004826:	4b3e      	ldr	r3, [pc, #248]	; (90004920 <MX_LWIP_Init+0x290>)
90004828:	789b      	ldrb	r3, [r3, #2]
9000482a:	021b      	lsls	r3, r3, #8
9000482c:	430b      	orrs	r3, r1
9000482e:	493c      	ldr	r1, [pc, #240]	; (90004920 <MX_LWIP_Init+0x290>)
90004830:	78c9      	ldrb	r1, [r1, #3]
90004832:	430b      	orrs	r3, r1
90004834:	021b      	lsls	r3, r3, #8
90004836:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
9000483a:	431a      	orrs	r2, r3
9000483c:	4b38      	ldr	r3, [pc, #224]	; (90004920 <MX_LWIP_Init+0x290>)
9000483e:	781b      	ldrb	r3, [r3, #0]
90004840:	0619      	lsls	r1, r3, #24
90004842:	4b37      	ldr	r3, [pc, #220]	; (90004920 <MX_LWIP_Init+0x290>)
90004844:	785b      	ldrb	r3, [r3, #1]
90004846:	041b      	lsls	r3, r3, #16
90004848:	4319      	orrs	r1, r3
9000484a:	4b35      	ldr	r3, [pc, #212]	; (90004920 <MX_LWIP_Init+0x290>)
9000484c:	789b      	ldrb	r3, [r3, #2]
9000484e:	021b      	lsls	r3, r3, #8
90004850:	430b      	orrs	r3, r1
90004852:	4933      	ldr	r1, [pc, #204]	; (90004920 <MX_LWIP_Init+0x290>)
90004854:	78c9      	ldrb	r1, [r1, #3]
90004856:	430b      	orrs	r3, r1
90004858:	0a1b      	lsrs	r3, r3, #8
9000485a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9000485e:	431a      	orrs	r2, r3
90004860:	4b2f      	ldr	r3, [pc, #188]	; (90004920 <MX_LWIP_Init+0x290>)
90004862:	781b      	ldrb	r3, [r3, #0]
90004864:	0619      	lsls	r1, r3, #24
90004866:	4b2e      	ldr	r3, [pc, #184]	; (90004920 <MX_LWIP_Init+0x290>)
90004868:	785b      	ldrb	r3, [r3, #1]
9000486a:	041b      	lsls	r3, r3, #16
9000486c:	4319      	orrs	r1, r3
9000486e:	4b2c      	ldr	r3, [pc, #176]	; (90004920 <MX_LWIP_Init+0x290>)
90004870:	789b      	ldrb	r3, [r3, #2]
90004872:	021b      	lsls	r3, r3, #8
90004874:	430b      	orrs	r3, r1
90004876:	492a      	ldr	r1, [pc, #168]	; (90004920 <MX_LWIP_Init+0x290>)
90004878:	78c9      	ldrb	r1, [r1, #3]
9000487a:	430b      	orrs	r3, r1
9000487c:	0e1b      	lsrs	r3, r3, #24
9000487e:	4313      	orrs	r3, r2
90004880:	4a2a      	ldr	r2, [pc, #168]	; (9000492c <MX_LWIP_Init+0x29c>)
90004882:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
90004884:	4b2a      	ldr	r3, [pc, #168]	; (90004930 <MX_LWIP_Init+0x2a0>)
90004886:	9302      	str	r3, [sp, #8]
90004888:	4b2a      	ldr	r3, [pc, #168]	; (90004934 <MX_LWIP_Init+0x2a4>)
9000488a:	9301      	str	r3, [sp, #4]
9000488c:	2300      	movs	r3, #0
9000488e:	9300      	str	r3, [sp, #0]
90004890:	4b26      	ldr	r3, [pc, #152]	; (9000492c <MX_LWIP_Init+0x29c>)
90004892:	4a25      	ldr	r2, [pc, #148]	; (90004928 <MX_LWIP_Init+0x298>)
90004894:	4923      	ldr	r1, [pc, #140]	; (90004924 <MX_LWIP_Init+0x294>)
90004896:	4828      	ldr	r0, [pc, #160]	; (90004938 <MX_LWIP_Init+0x2a8>)
90004898:	f007 fd12 	bl	9000c2c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
9000489c:	4826      	ldr	r0, [pc, #152]	; (90004938 <MX_LWIP_Init+0x2a8>)
9000489e:	f007 fec1 	bl	9000c624 <netif_set_default>

  if (netif_is_link_up(&gnetif))
900048a2:	4b25      	ldr	r3, [pc, #148]	; (90004938 <MX_LWIP_Init+0x2a8>)
900048a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900048a8:	089b      	lsrs	r3, r3, #2
900048aa:	f003 0301 	and.w	r3, r3, #1
900048ae:	b2db      	uxtb	r3, r3
900048b0:	2b00      	cmp	r3, #0
900048b2:	d003      	beq.n	900048bc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
900048b4:	4820      	ldr	r0, [pc, #128]	; (90004938 <MX_LWIP_Init+0x2a8>)
900048b6:	f007 fec5 	bl	9000c644 <netif_set_up>
900048ba:	e002      	b.n	900048c2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
900048bc:	481e      	ldr	r0, [pc, #120]	; (90004938 <MX_LWIP_Init+0x2a8>)
900048be:	f007 ff2d 	bl	9000c71c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
900048c2:	491e      	ldr	r1, [pc, #120]	; (9000493c <MX_LWIP_Init+0x2ac>)
900048c4:	481c      	ldr	r0, [pc, #112]	; (90004938 <MX_LWIP_Init+0x2a8>)
900048c6:	f007 ffbf 	bl	9000c848 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
900048ca:	2200      	movs	r2, #0
900048cc:	2101      	movs	r1, #1
900048ce:	2001      	movs	r0, #1
900048d0:	f000 ff12 	bl	900056f8 <osSemaphoreNew>
900048d4:	4603      	mov	r3, r0
900048d6:	4a1a      	ldr	r2, [pc, #104]	; (90004940 <MX_LWIP_Init+0x2b0>)
900048d8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
900048da:	4b1a      	ldr	r3, [pc, #104]	; (90004944 <MX_LWIP_Init+0x2b4>)
900048dc:	4a16      	ldr	r2, [pc, #88]	; (90004938 <MX_LWIP_Init+0x2a8>)
900048de:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
900048e0:	4b17      	ldr	r3, [pc, #92]	; (90004940 <MX_LWIP_Init+0x2b0>)
900048e2:	681b      	ldr	r3, [r3, #0]
900048e4:	4a17      	ldr	r2, [pc, #92]	; (90004944 <MX_LWIP_Init+0x2b4>)
900048e6:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
900048e8:	2224      	movs	r2, #36	; 0x24
900048ea:	2100      	movs	r1, #0
900048ec:	4816      	ldr	r0, [pc, #88]	; (90004948 <MX_LWIP_Init+0x2b8>)
900048ee:	f012 f8bf 	bl	90016a70 <memset>
  attributes.name = "LinkThr";
900048f2:	4b15      	ldr	r3, [pc, #84]	; (90004948 <MX_LWIP_Init+0x2b8>)
900048f4:	4a15      	ldr	r2, [pc, #84]	; (9000494c <MX_LWIP_Init+0x2bc>)
900048f6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
900048f8:	4b13      	ldr	r3, [pc, #76]	; (90004948 <MX_LWIP_Init+0x2b8>)
900048fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
900048fe:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
90004900:	4b11      	ldr	r3, [pc, #68]	; (90004948 <MX_LWIP_Init+0x2b8>)
90004902:	2210      	movs	r2, #16
90004904:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
90004906:	4a10      	ldr	r2, [pc, #64]	; (90004948 <MX_LWIP_Init+0x2b8>)
90004908:	490e      	ldr	r1, [pc, #56]	; (90004944 <MX_LWIP_Init+0x2b4>)
9000490a:	4811      	ldr	r0, [pc, #68]	; (90004950 <MX_LWIP_Init+0x2c0>)
9000490c:	f000 fcd8 	bl	900052c0 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
90004910:	bf00      	nop
90004912:	46bd      	mov	sp, r7
90004914:	bd80      	pop	{r7, pc}
90004916:	bf00      	nop
90004918:	20000180 	.word	0x20000180
9000491c:	20000184 	.word	0x20000184
90004920:	20000188 	.word	0x20000188
90004924:	20000174 	.word	0x20000174
90004928:	20000178 	.word	0x20000178
9000492c:	2000017c 	.word	0x2000017c
90004930:	9000b639 	.word	0x9000b639
90004934:	90004f9d 	.word	0x90004f9d
90004938:	20000140 	.word	0x20000140
9000493c:	90005081 	.word	0x90005081
90004940:	20000134 	.word	0x20000134
90004944:	20000138 	.word	0x20000138
90004948:	2000018c 	.word	0x2000018c
9000494c:	90017a7c 	.word	0x90017a7c
90004950:	90005009 	.word	0x90005009

90004954 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
90004954:	b580      	push	{r7, lr}
90004956:	b08e      	sub	sp, #56	; 0x38
90004958:	af00      	add	r7, sp, #0
9000495a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000495c:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004960:	2200      	movs	r2, #0
90004962:	601a      	str	r2, [r3, #0]
90004964:	605a      	str	r2, [r3, #4]
90004966:	609a      	str	r2, [r3, #8]
90004968:	60da      	str	r2, [r3, #12]
9000496a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
9000496c:	687b      	ldr	r3, [r7, #4]
9000496e:	681b      	ldr	r3, [r3, #0]
90004970:	4a52      	ldr	r2, [pc, #328]	; (90004abc <HAL_ETH_MspInit+0x168>)
90004972:	4293      	cmp	r3, r2
90004974:	f040 809e 	bne.w	90004ab4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
90004978:	4b51      	ldr	r3, [pc, #324]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
9000497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000497c:	4a50      	ldr	r2, [pc, #320]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
9000497e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90004982:	6313      	str	r3, [r2, #48]	; 0x30
90004984:	4b4e      	ldr	r3, [pc, #312]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
90004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000498c:	623b      	str	r3, [r7, #32]
9000498e:	6a3b      	ldr	r3, [r7, #32]
90004990:	4b4b      	ldr	r3, [pc, #300]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
90004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004994:	4a4a      	ldr	r2, [pc, #296]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
90004996:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000499a:	6313      	str	r3, [r2, #48]	; 0x30
9000499c:	4b48      	ldr	r3, [pc, #288]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
9000499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900049a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
900049a4:	61fb      	str	r3, [r7, #28]
900049a6:	69fb      	ldr	r3, [r7, #28]
900049a8:	4b45      	ldr	r3, [pc, #276]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900049ac:	4a44      	ldr	r2, [pc, #272]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
900049b2:	6313      	str	r3, [r2, #48]	; 0x30
900049b4:	4b42      	ldr	r3, [pc, #264]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900049b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900049bc:	61bb      	str	r3, [r7, #24]
900049be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
900049c0:	4b3f      	ldr	r3, [pc, #252]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900049c4:	4a3e      	ldr	r2, [pc, #248]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049c6:	f043 0304 	orr.w	r3, r3, #4
900049ca:	6313      	str	r3, [r2, #48]	; 0x30
900049cc:	4b3c      	ldr	r3, [pc, #240]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900049d0:	f003 0304 	and.w	r3, r3, #4
900049d4:	617b      	str	r3, [r7, #20]
900049d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
900049d8:	4b39      	ldr	r3, [pc, #228]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900049dc:	4a38      	ldr	r2, [pc, #224]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049de:	f043 0301 	orr.w	r3, r3, #1
900049e2:	6313      	str	r3, [r2, #48]	; 0x30
900049e4:	4b36      	ldr	r3, [pc, #216]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900049e8:	f003 0301 	and.w	r3, r3, #1
900049ec:	613b      	str	r3, [r7, #16]
900049ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
900049f0:	4b33      	ldr	r3, [pc, #204]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900049f4:	4a32      	ldr	r2, [pc, #200]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049f6:	f043 0302 	orr.w	r3, r3, #2
900049fa:	6313      	str	r3, [r2, #48]	; 0x30
900049fc:	4b30      	ldr	r3, [pc, #192]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
900049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004a00:	f003 0302 	and.w	r3, r3, #2
90004a04:	60fb      	str	r3, [r7, #12]
90004a06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
90004a08:	4b2d      	ldr	r3, [pc, #180]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
90004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004a0c:	4a2c      	ldr	r2, [pc, #176]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
90004a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004a12:	6313      	str	r3, [r2, #48]	; 0x30
90004a14:	4b2a      	ldr	r3, [pc, #168]	; (90004ac0 <HAL_ETH_MspInit+0x16c>)
90004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004a1c:	60bb      	str	r3, [r7, #8]
90004a1e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
90004a20:	2332      	movs	r3, #50	; 0x32
90004a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004a24:	2302      	movs	r3, #2
90004a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004a28:	2300      	movs	r3, #0
90004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004a2c:	2303      	movs	r3, #3
90004a2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90004a30:	230b      	movs	r3, #11
90004a32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90004a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004a38:	4619      	mov	r1, r3
90004a3a:	4822      	ldr	r0, [pc, #136]	; (90004ac4 <HAL_ETH_MspInit+0x170>)
90004a3c:	f7fd fe60 	bl	90002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
90004a40:	2386      	movs	r3, #134	; 0x86
90004a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004a44:	2302      	movs	r3, #2
90004a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004a48:	2300      	movs	r3, #0
90004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004a4c:	2303      	movs	r3, #3
90004a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90004a50:	230b      	movs	r3, #11
90004a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90004a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004a58:	4619      	mov	r1, r3
90004a5a:	481b      	ldr	r0, [pc, #108]	; (90004ac8 <HAL_ETH_MspInit+0x174>)
90004a5c:	f7fd fe50 	bl	90002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
90004a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90004a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004a66:	2302      	movs	r3, #2
90004a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004a6a:	2300      	movs	r3, #0
90004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004a6e:	2303      	movs	r3, #3
90004a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90004a72:	230b      	movs	r3, #11
90004a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004a7a:	4619      	mov	r1, r3
90004a7c:	4813      	ldr	r0, [pc, #76]	; (90004acc <HAL_ETH_MspInit+0x178>)
90004a7e:	f7fd fe3f 	bl	90002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
90004a82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
90004a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004a88:	2302      	movs	r3, #2
90004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004a8c:	2300      	movs	r3, #0
90004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004a90:	2303      	movs	r3, #3
90004a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90004a94:	230b      	movs	r3, #11
90004a96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004a9c:	4619      	mov	r1, r3
90004a9e:	480c      	ldr	r0, [pc, #48]	; (90004ad0 <HAL_ETH_MspInit+0x17c>)
90004aa0:	f7fd fe2e 	bl	90002700 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
90004aa4:	2200      	movs	r2, #0
90004aa6:	2105      	movs	r1, #5
90004aa8:	203d      	movs	r0, #61	; 0x3d
90004aaa:	f7fc fc0a 	bl	900012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
90004aae:	203d      	movs	r0, #61	; 0x3d
90004ab0:	f7fc fc23 	bl	900012fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
90004ab4:	bf00      	nop
90004ab6:	3738      	adds	r7, #56	; 0x38
90004ab8:	46bd      	mov	sp, r7
90004aba:	bd80      	pop	{r7, pc}
90004abc:	40028000 	.word	0x40028000
90004ac0:	40023800 	.word	0x40023800
90004ac4:	40020800 	.word	0x40020800
90004ac8:	40020000 	.word	0x40020000
90004acc:	40020400 	.word	0x40020400
90004ad0:	40021800 	.word	0x40021800

90004ad4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
90004ad4:	b580      	push	{r7, lr}
90004ad6:	b082      	sub	sp, #8
90004ad8:	af00      	add	r7, sp, #0
90004ada:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
90004adc:	4b04      	ldr	r3, [pc, #16]	; (90004af0 <HAL_ETH_RxCpltCallback+0x1c>)
90004ade:	681b      	ldr	r3, [r3, #0]
90004ae0:	4618      	mov	r0, r3
90004ae2:	f000 ff0b 	bl	900058fc <osSemaphoreRelease>
}
90004ae6:	bf00      	nop
90004ae8:	3708      	adds	r7, #8
90004aea:	46bd      	mov	sp, r7
90004aec:	bd80      	pop	{r7, pc}
90004aee:	bf00      	nop
90004af0:	20003250 	.word	0x20003250

90004af4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
90004af4:	b580      	push	{r7, lr}
90004af6:	b090      	sub	sp, #64	; 0x40
90004af8:	af00      	add	r7, sp, #0
90004afa:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
90004afc:	2300      	movs	r3, #0
90004afe:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
90004b00:	4b5d      	ldr	r3, [pc, #372]	; (90004c78 <low_level_init+0x184>)
90004b02:	4a5e      	ldr	r2, [pc, #376]	; (90004c7c <low_level_init+0x188>)
90004b04:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
90004b06:	4b5c      	ldr	r3, [pc, #368]	; (90004c78 <low_level_init+0x184>)
90004b08:	2201      	movs	r2, #1
90004b0a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
90004b0c:	4b5a      	ldr	r3, [pc, #360]	; (90004c78 <low_level_init+0x184>)
90004b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90004b12:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
90004b14:	4b58      	ldr	r3, [pc, #352]	; (90004c78 <low_level_init+0x184>)
90004b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
90004b1a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
90004b1c:	4b56      	ldr	r3, [pc, #344]	; (90004c78 <low_level_init+0x184>)
90004b1e:	2200      	movs	r2, #0
90004b20:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
90004b22:	2300      	movs	r3, #0
90004b24:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
90004b26:	2380      	movs	r3, #128	; 0x80
90004b28:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
90004b2a:	23e1      	movs	r3, #225	; 0xe1
90004b2c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
90004b2e:	2300      	movs	r3, #0
90004b30:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
90004b32:	2300      	movs	r3, #0
90004b34:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
90004b36:	2300      	movs	r3, #0
90004b38:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
90004b3a:	4a4f      	ldr	r2, [pc, #316]	; (90004c78 <low_level_init+0x184>)
90004b3c:	f107 030c 	add.w	r3, r7, #12
90004b40:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
90004b42:	4b4d      	ldr	r3, [pc, #308]	; (90004c78 <low_level_init+0x184>)
90004b44:	2201      	movs	r2, #1
90004b46:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
90004b48:	4b4b      	ldr	r3, [pc, #300]	; (90004c78 <low_level_init+0x184>)
90004b4a:	2200      	movs	r2, #0
90004b4c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
90004b4e:	4b4a      	ldr	r3, [pc, #296]	; (90004c78 <low_level_init+0x184>)
90004b50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
90004b54:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
90004b56:	4848      	ldr	r0, [pc, #288]	; (90004c78 <low_level_init+0x184>)
90004b58:	f7fc fc66 	bl	90001428 <HAL_ETH_Init>
90004b5c:	4603      	mov	r3, r0
90004b5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
90004b62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
90004b66:	2b00      	cmp	r3, #0
90004b68:	d108      	bne.n	90004b7c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
90004b6a:	687b      	ldr	r3, [r7, #4]
90004b6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90004b70:	f043 0304 	orr.w	r3, r3, #4
90004b74:	b2da      	uxtb	r2, r3
90004b76:	687b      	ldr	r3, [r7, #4]
90004b78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
90004b7c:	2304      	movs	r3, #4
90004b7e:	4a40      	ldr	r2, [pc, #256]	; (90004c80 <low_level_init+0x18c>)
90004b80:	4940      	ldr	r1, [pc, #256]	; (90004c84 <low_level_init+0x190>)
90004b82:	483d      	ldr	r0, [pc, #244]	; (90004c78 <low_level_init+0x184>)
90004b84:	f7fc fde8 	bl	90001758 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
90004b88:	2304      	movs	r3, #4
90004b8a:	4a3f      	ldr	r2, [pc, #252]	; (90004c88 <low_level_init+0x194>)
90004b8c:	493f      	ldr	r1, [pc, #252]	; (90004c8c <low_level_init+0x198>)
90004b8e:	483a      	ldr	r0, [pc, #232]	; (90004c78 <low_level_init+0x184>)
90004b90:	f7fc fe4a 	bl	90001828 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
90004b94:	687b      	ldr	r3, [r7, #4]
90004b96:	2206      	movs	r2, #6
90004b98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
90004b9c:	4b36      	ldr	r3, [pc, #216]	; (90004c78 <low_level_init+0x184>)
90004b9e:	695b      	ldr	r3, [r3, #20]
90004ba0:	781a      	ldrb	r2, [r3, #0]
90004ba2:	687b      	ldr	r3, [r7, #4]
90004ba4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
90004ba8:	4b33      	ldr	r3, [pc, #204]	; (90004c78 <low_level_init+0x184>)
90004baa:	695b      	ldr	r3, [r3, #20]
90004bac:	785a      	ldrb	r2, [r3, #1]
90004bae:	687b      	ldr	r3, [r7, #4]
90004bb0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
90004bb4:	4b30      	ldr	r3, [pc, #192]	; (90004c78 <low_level_init+0x184>)
90004bb6:	695b      	ldr	r3, [r3, #20]
90004bb8:	789a      	ldrb	r2, [r3, #2]
90004bba:	687b      	ldr	r3, [r7, #4]
90004bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
90004bc0:	4b2d      	ldr	r3, [pc, #180]	; (90004c78 <low_level_init+0x184>)
90004bc2:	695b      	ldr	r3, [r3, #20]
90004bc4:	78da      	ldrb	r2, [r3, #3]
90004bc6:	687b      	ldr	r3, [r7, #4]
90004bc8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
90004bcc:	4b2a      	ldr	r3, [pc, #168]	; (90004c78 <low_level_init+0x184>)
90004bce:	695b      	ldr	r3, [r3, #20]
90004bd0:	791a      	ldrb	r2, [r3, #4]
90004bd2:	687b      	ldr	r3, [r7, #4]
90004bd4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
90004bd8:	4b27      	ldr	r3, [pc, #156]	; (90004c78 <low_level_init+0x184>)
90004bda:	695b      	ldr	r3, [r3, #20]
90004bdc:	795a      	ldrb	r2, [r3, #5]
90004bde:	687b      	ldr	r3, [r7, #4]
90004be0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
90004be4:	687b      	ldr	r3, [r7, #4]
90004be6:	f240 52dc 	movw	r2, #1500	; 0x5dc
90004bea:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
90004bec:	687b      	ldr	r3, [r7, #4]
90004bee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90004bf2:	f043 030a 	orr.w	r3, r3, #10
90004bf6:	b2da      	uxtb	r2, r3
90004bf8:	687b      	ldr	r3, [r7, #4]
90004bfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
90004bfe:	2200      	movs	r2, #0
90004c00:	2101      	movs	r1, #1
90004c02:	2001      	movs	r0, #1
90004c04:	f000 fd78 	bl	900056f8 <osSemaphoreNew>
90004c08:	4603      	mov	r3, r0
90004c0a:	4a21      	ldr	r2, [pc, #132]	; (90004c90 <low_level_init+0x19c>)
90004c0c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
90004c0e:	f107 0314 	add.w	r3, r7, #20
90004c12:	2224      	movs	r2, #36	; 0x24
90004c14:	2100      	movs	r1, #0
90004c16:	4618      	mov	r0, r3
90004c18:	f011 ff2a 	bl	90016a70 <memset>
  attributes.name = "EthIf";
90004c1c:	4b1d      	ldr	r3, [pc, #116]	; (90004c94 <low_level_init+0x1a0>)
90004c1e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
90004c20:	f44f 73af 	mov.w	r3, #350	; 0x15e
90004c24:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
90004c26:	2330      	movs	r3, #48	; 0x30
90004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
90004c2a:	f107 0314 	add.w	r3, r7, #20
90004c2e:	461a      	mov	r2, r3
90004c30:	6879      	ldr	r1, [r7, #4]
90004c32:	4819      	ldr	r0, [pc, #100]	; (90004c98 <low_level_init+0x1a4>)
90004c34:	f000 fb44 	bl	900052c0 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
90004c38:	480f      	ldr	r0, [pc, #60]	; (90004c78 <low_level_init+0x184>)
90004c3a:	f7fd f919 	bl	90001e70 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
90004c3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
90004c42:	461a      	mov	r2, r3
90004c44:	211d      	movs	r1, #29
90004c46:	480c      	ldr	r0, [pc, #48]	; (90004c78 <low_level_init+0x184>)
90004c48:	f7fd f844 	bl	90001cd4 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
90004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004c4e:	f043 030b 	orr.w	r3, r3, #11
90004c52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
90004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004c56:	461a      	mov	r2, r3
90004c58:	211d      	movs	r1, #29
90004c5a:	4807      	ldr	r0, [pc, #28]	; (90004c78 <low_level_init+0x184>)
90004c5c:	f7fd f8a2 	bl	90001da4 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
90004c60:	f107 0338 	add.w	r3, r7, #56	; 0x38
90004c64:	461a      	mov	r2, r3
90004c66:	211d      	movs	r1, #29
90004c68:	4803      	ldr	r0, [pc, #12]	; (90004c78 <low_level_init+0x184>)
90004c6a:	f7fd f833 	bl	90001cd4 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
90004c6e:	bf00      	nop
90004c70:	3740      	adds	r7, #64	; 0x40
90004c72:	46bd      	mov	sp, r7
90004c74:	bd80      	pop	{r7, pc}
90004c76:	bf00      	nop
90004c78:	20003254 	.word	0x20003254
90004c7c:	40028000 	.word	0x40028000
90004c80:	20001a80 	.word	0x20001a80
90004c84:	20000230 	.word	0x20000230
90004c88:	200002b0 	.word	0x200002b0
90004c8c:	200001b0 	.word	0x200001b0
90004c90:	20003250 	.word	0x20003250
90004c94:	90017a84 	.word	0x90017a84
90004c98:	90004f3d 	.word	0x90004f3d

90004c9c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
90004c9c:	b580      	push	{r7, lr}
90004c9e:	b08a      	sub	sp, #40	; 0x28
90004ca0:	af00      	add	r7, sp, #0
90004ca2:	6078      	str	r0, [r7, #4]
90004ca4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
90004ca6:	4b4b      	ldr	r3, [pc, #300]	; (90004dd4 <low_level_output+0x138>)
90004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004caa:	689b      	ldr	r3, [r3, #8]
90004cac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
90004cae:	2300      	movs	r3, #0
90004cb0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
90004cb2:	2300      	movs	r3, #0
90004cb4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
90004cb6:	2300      	movs	r3, #0
90004cb8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
90004cba:	2300      	movs	r3, #0
90004cbc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
90004cbe:	4b45      	ldr	r3, [pc, #276]	; (90004dd4 <low_level_output+0x138>)
90004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004cc2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
90004cc4:	2300      	movs	r3, #0
90004cc6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
90004cc8:	683b      	ldr	r3, [r7, #0]
90004cca:	623b      	str	r3, [r7, #32]
90004ccc:	e05a      	b.n	90004d84 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
90004cce:	69bb      	ldr	r3, [r7, #24]
90004cd0:	681b      	ldr	r3, [r3, #0]
90004cd2:	2b00      	cmp	r3, #0
90004cd4:	da03      	bge.n	90004cde <low_level_output+0x42>
      {
        errval = ERR_USE;
90004cd6:	23f8      	movs	r3, #248	; 0xf8
90004cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
90004cdc:	e05c      	b.n	90004d98 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
90004cde:	6a3b      	ldr	r3, [r7, #32]
90004ce0:	895b      	ldrh	r3, [r3, #10]
90004ce2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
90004ce4:	2300      	movs	r3, #0
90004ce6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
90004ce8:	e02f      	b.n	90004d4a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
90004cea:	69fa      	ldr	r2, [r7, #28]
90004cec:	693b      	ldr	r3, [r7, #16]
90004cee:	18d0      	adds	r0, r2, r3
90004cf0:	6a3b      	ldr	r3, [r7, #32]
90004cf2:	685a      	ldr	r2, [r3, #4]
90004cf4:	68bb      	ldr	r3, [r7, #8]
90004cf6:	18d1      	adds	r1, r2, r3
90004cf8:	693a      	ldr	r2, [r7, #16]
90004cfa:	f240 53f4 	movw	r3, #1524	; 0x5f4
90004cfe:	1a9b      	subs	r3, r3, r2
90004d00:	461a      	mov	r2, r3
90004d02:	f011 fea7 	bl	90016a54 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
90004d06:	69bb      	ldr	r3, [r7, #24]
90004d08:	68db      	ldr	r3, [r3, #12]
90004d0a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
90004d0c:	69bb      	ldr	r3, [r7, #24]
90004d0e:	681b      	ldr	r3, [r3, #0]
90004d10:	2b00      	cmp	r3, #0
90004d12:	da03      	bge.n	90004d1c <low_level_output+0x80>
        {
          errval = ERR_USE;
90004d14:	23f8      	movs	r3, #248	; 0xf8
90004d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
90004d1a:	e03d      	b.n	90004d98 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
90004d1c:	69bb      	ldr	r3, [r7, #24]
90004d1e:	689b      	ldr	r3, [r3, #8]
90004d20:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
90004d22:	693a      	ldr	r2, [r7, #16]
90004d24:	68fb      	ldr	r3, [r7, #12]
90004d26:	4413      	add	r3, r2
90004d28:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
90004d2c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
90004d2e:	68ba      	ldr	r2, [r7, #8]
90004d30:	693b      	ldr	r3, [r7, #16]
90004d32:	1ad3      	subs	r3, r2, r3
90004d34:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
90004d38:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
90004d3a:	697a      	ldr	r2, [r7, #20]
90004d3c:	693b      	ldr	r3, [r7, #16]
90004d3e:	1ad3      	subs	r3, r2, r3
90004d40:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
90004d44:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
90004d46:	2300      	movs	r3, #0
90004d48:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
90004d4a:	68fa      	ldr	r2, [r7, #12]
90004d4c:	693b      	ldr	r3, [r7, #16]
90004d4e:	4413      	add	r3, r2
90004d50:	f240 52f4 	movw	r2, #1524	; 0x5f4
90004d54:	4293      	cmp	r3, r2
90004d56:	d8c8      	bhi.n	90004cea <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
90004d58:	69fa      	ldr	r2, [r7, #28]
90004d5a:	693b      	ldr	r3, [r7, #16]
90004d5c:	18d0      	adds	r0, r2, r3
90004d5e:	6a3b      	ldr	r3, [r7, #32]
90004d60:	685a      	ldr	r2, [r3, #4]
90004d62:	68bb      	ldr	r3, [r7, #8]
90004d64:	4413      	add	r3, r2
90004d66:	68fa      	ldr	r2, [r7, #12]
90004d68:	4619      	mov	r1, r3
90004d6a:	f011 fe73 	bl	90016a54 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
90004d6e:	693a      	ldr	r2, [r7, #16]
90004d70:	68fb      	ldr	r3, [r7, #12]
90004d72:	4413      	add	r3, r2
90004d74:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
90004d76:	697a      	ldr	r2, [r7, #20]
90004d78:	68fb      	ldr	r3, [r7, #12]
90004d7a:	4413      	add	r3, r2
90004d7c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
90004d7e:	6a3b      	ldr	r3, [r7, #32]
90004d80:	681b      	ldr	r3, [r3, #0]
90004d82:	623b      	str	r3, [r7, #32]
90004d84:	6a3b      	ldr	r3, [r7, #32]
90004d86:	2b00      	cmp	r3, #0
90004d88:	d1a1      	bne.n	90004cce <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
90004d8a:	6979      	ldr	r1, [r7, #20]
90004d8c:	4811      	ldr	r0, [pc, #68]	; (90004dd4 <low_level_output+0x138>)
90004d8e:	f7fc fdb7 	bl	90001900 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
90004d92:	2300      	movs	r3, #0
90004d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
90004d98:	4b0e      	ldr	r3, [pc, #56]	; (90004dd4 <low_level_output+0x138>)
90004d9a:	681b      	ldr	r3, [r3, #0]
90004d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90004da0:	695b      	ldr	r3, [r3, #20]
90004da2:	f003 0320 	and.w	r3, r3, #32
90004da6:	2b00      	cmp	r3, #0
90004da8:	d00d      	beq.n	90004dc6 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
90004daa:	4b0a      	ldr	r3, [pc, #40]	; (90004dd4 <low_level_output+0x138>)
90004dac:	681b      	ldr	r3, [r3, #0]
90004dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90004db2:	461a      	mov	r2, r3
90004db4:	2320      	movs	r3, #32
90004db6:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
90004db8:	4b06      	ldr	r3, [pc, #24]	; (90004dd4 <low_level_output+0x138>)
90004dba:	681b      	ldr	r3, [r3, #0]
90004dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90004dc0:	461a      	mov	r2, r3
90004dc2:	2300      	movs	r3, #0
90004dc4:	6053      	str	r3, [r2, #4]
  }
  return errval;
90004dc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
90004dca:	4618      	mov	r0, r3
90004dcc:	3728      	adds	r7, #40	; 0x28
90004dce:	46bd      	mov	sp, r7
90004dd0:	bd80      	pop	{r7, pc}
90004dd2:	bf00      	nop
90004dd4:	20003254 	.word	0x20003254

90004dd8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
90004dd8:	b580      	push	{r7, lr}
90004dda:	b08c      	sub	sp, #48	; 0x30
90004ddc:	af00      	add	r7, sp, #0
90004dde:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
90004de0:	2300      	movs	r3, #0
90004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
90004de4:	2300      	movs	r3, #0
90004de6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
90004de8:	2300      	movs	r3, #0
90004dea:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
90004dec:	2300      	movs	r3, #0
90004dee:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
90004df0:	2300      	movs	r3, #0
90004df2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
90004df4:	2300      	movs	r3, #0
90004df6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
90004df8:	2300      	movs	r3, #0
90004dfa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
90004dfc:	484e      	ldr	r0, [pc, #312]	; (90004f38 <low_level_input+0x160>)
90004dfe:	f7fc fe69 	bl	90001ad4 <HAL_ETH_GetReceivedFrame_IT>
90004e02:	4603      	mov	r3, r0
90004e04:	2b00      	cmp	r3, #0
90004e06:	d001      	beq.n	90004e0c <low_level_input+0x34>

    return NULL;
90004e08:	2300      	movs	r3, #0
90004e0a:	e091      	b.n	90004f30 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
90004e0c:	4b4a      	ldr	r3, [pc, #296]	; (90004f38 <low_level_input+0x160>)
90004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90004e10:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
90004e12:	4b49      	ldr	r3, [pc, #292]	; (90004f38 <low_level_input+0x160>)
90004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004e16:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
90004e18:	89fb      	ldrh	r3, [r7, #14]
90004e1a:	2b00      	cmp	r3, #0
90004e1c:	d007      	beq.n	90004e2e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
90004e1e:	89fb      	ldrh	r3, [r7, #14]
90004e20:	f44f 72c1 	mov.w	r2, #386	; 0x182
90004e24:	4619      	mov	r1, r3
90004e26:	2000      	movs	r0, #0
90004e28:	f007 fdd8 	bl	9000c9dc <pbuf_alloc>
90004e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
90004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004e30:	2b00      	cmp	r3, #0
90004e32:	d04b      	beq.n	90004ecc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
90004e34:	4b40      	ldr	r3, [pc, #256]	; (90004f38 <low_level_input+0x160>)
90004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004e38:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
90004e3a:	2300      	movs	r3, #0
90004e3c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
90004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004e40:	62bb      	str	r3, [r7, #40]	; 0x28
90004e42:	e040      	b.n	90004ec6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
90004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004e46:	895b      	ldrh	r3, [r3, #10]
90004e48:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
90004e4a:	2300      	movs	r3, #0
90004e4c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
90004e4e:	e021      	b.n	90004e94 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
90004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004e52:	685a      	ldr	r2, [r3, #4]
90004e54:	69bb      	ldr	r3, [r7, #24]
90004e56:	18d0      	adds	r0, r2, r3
90004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90004e5a:	69fb      	ldr	r3, [r7, #28]
90004e5c:	18d1      	adds	r1, r2, r3
90004e5e:	69fa      	ldr	r2, [r7, #28]
90004e60:	f240 53f4 	movw	r3, #1524	; 0x5f4
90004e64:	1a9b      	subs	r3, r3, r2
90004e66:	461a      	mov	r2, r3
90004e68:	f011 fdf4 	bl	90016a54 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
90004e6c:	6a3b      	ldr	r3, [r7, #32]
90004e6e:	68db      	ldr	r3, [r3, #12]
90004e70:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
90004e72:	6a3b      	ldr	r3, [r7, #32]
90004e74:	689b      	ldr	r3, [r3, #8]
90004e76:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
90004e78:	69fa      	ldr	r2, [r7, #28]
90004e7a:	697b      	ldr	r3, [r7, #20]
90004e7c:	4413      	add	r3, r2
90004e7e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
90004e82:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
90004e84:	69ba      	ldr	r2, [r7, #24]
90004e86:	69fb      	ldr	r3, [r7, #28]
90004e88:	1ad3      	subs	r3, r2, r3
90004e8a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
90004e8e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
90004e90:	2300      	movs	r3, #0
90004e92:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
90004e94:	697a      	ldr	r2, [r7, #20]
90004e96:	69fb      	ldr	r3, [r7, #28]
90004e98:	4413      	add	r3, r2
90004e9a:	f240 52f4 	movw	r2, #1524	; 0x5f4
90004e9e:	4293      	cmp	r3, r2
90004ea0:	d8d6      	bhi.n	90004e50 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
90004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004ea4:	685a      	ldr	r2, [r3, #4]
90004ea6:	69bb      	ldr	r3, [r7, #24]
90004ea8:	18d0      	adds	r0, r2, r3
90004eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90004eac:	69fb      	ldr	r3, [r7, #28]
90004eae:	4413      	add	r3, r2
90004eb0:	697a      	ldr	r2, [r7, #20]
90004eb2:	4619      	mov	r1, r3
90004eb4:	f011 fdce 	bl	90016a54 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
90004eb8:	69fa      	ldr	r2, [r7, #28]
90004eba:	697b      	ldr	r3, [r7, #20]
90004ebc:	4413      	add	r3, r2
90004ebe:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
90004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004ec2:	681b      	ldr	r3, [r3, #0]
90004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
90004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004ec8:	2b00      	cmp	r3, #0
90004eca:	d1bb      	bne.n	90004e44 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
90004ecc:	4b1a      	ldr	r3, [pc, #104]	; (90004f38 <low_level_input+0x160>)
90004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004ed0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
90004ed2:	2300      	movs	r3, #0
90004ed4:	613b      	str	r3, [r7, #16]
90004ed6:	e00b      	b.n	90004ef0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
90004ed8:	6a3b      	ldr	r3, [r7, #32]
90004eda:	681b      	ldr	r3, [r3, #0]
90004edc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
90004ee0:	6a3b      	ldr	r3, [r7, #32]
90004ee2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
90004ee4:	6a3b      	ldr	r3, [r7, #32]
90004ee6:	68db      	ldr	r3, [r3, #12]
90004ee8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
90004eea:	693b      	ldr	r3, [r7, #16]
90004eec:	3301      	adds	r3, #1
90004eee:	613b      	str	r3, [r7, #16]
90004ef0:	4b11      	ldr	r3, [pc, #68]	; (90004f38 <low_level_input+0x160>)
90004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90004ef4:	693a      	ldr	r2, [r7, #16]
90004ef6:	429a      	cmp	r2, r3
90004ef8:	d3ee      	bcc.n	90004ed8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
90004efa:	4b0f      	ldr	r3, [pc, #60]	; (90004f38 <low_level_input+0x160>)
90004efc:	2200      	movs	r2, #0
90004efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
90004f00:	4b0d      	ldr	r3, [pc, #52]	; (90004f38 <low_level_input+0x160>)
90004f02:	681b      	ldr	r3, [r3, #0]
90004f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90004f08:	695b      	ldr	r3, [r3, #20]
90004f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
90004f0e:	2b00      	cmp	r3, #0
90004f10:	d00d      	beq.n	90004f2e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
90004f12:	4b09      	ldr	r3, [pc, #36]	; (90004f38 <low_level_input+0x160>)
90004f14:	681b      	ldr	r3, [r3, #0]
90004f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90004f1a:	461a      	mov	r2, r3
90004f1c:	2380      	movs	r3, #128	; 0x80
90004f1e:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
90004f20:	4b05      	ldr	r3, [pc, #20]	; (90004f38 <low_level_input+0x160>)
90004f22:	681b      	ldr	r3, [r3, #0]
90004f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90004f28:	461a      	mov	r2, r3
90004f2a:	2300      	movs	r3, #0
90004f2c:	6093      	str	r3, [r2, #8]
  }
  return p;
90004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
90004f30:	4618      	mov	r0, r3
90004f32:	3730      	adds	r7, #48	; 0x30
90004f34:	46bd      	mov	sp, r7
90004f36:	bd80      	pop	{r7, pc}
90004f38:	20003254 	.word	0x20003254

90004f3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
90004f3c:	b580      	push	{r7, lr}
90004f3e:	b084      	sub	sp, #16
90004f40:	af00      	add	r7, sp, #0
90004f42:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
90004f44:	687b      	ldr	r3, [r7, #4]
90004f46:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
90004f48:	4b12      	ldr	r3, [pc, #72]	; (90004f94 <ethernetif_input+0x58>)
90004f4a:	681b      	ldr	r3, [r3, #0]
90004f4c:	f04f 31ff 	mov.w	r1, #4294967295
90004f50:	4618      	mov	r0, r3
90004f52:	f000 fc6d 	bl	90005830 <osSemaphoreAcquire>
90004f56:	4603      	mov	r3, r0
90004f58:	2b00      	cmp	r3, #0
90004f5a:	d1f5      	bne.n	90004f48 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
90004f5c:	480e      	ldr	r0, [pc, #56]	; (90004f98 <ethernetif_input+0x5c>)
90004f5e:	f011 fbdd 	bl	9001671c <sys_mutex_lock>
        p = low_level_input( netif );
90004f62:	68f8      	ldr	r0, [r7, #12]
90004f64:	f7ff ff38 	bl	90004dd8 <low_level_input>
90004f68:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
90004f6a:	68bb      	ldr	r3, [r7, #8]
90004f6c:	2b00      	cmp	r3, #0
90004f6e:	d00a      	beq.n	90004f86 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
90004f70:	68fb      	ldr	r3, [r7, #12]
90004f72:	691b      	ldr	r3, [r3, #16]
90004f74:	68f9      	ldr	r1, [r7, #12]
90004f76:	68b8      	ldr	r0, [r7, #8]
90004f78:	4798      	blx	r3
90004f7a:	4603      	mov	r3, r0
90004f7c:	2b00      	cmp	r3, #0
90004f7e:	d002      	beq.n	90004f86 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
90004f80:	68b8      	ldr	r0, [r7, #8]
90004f82:	f008 f80f 	bl	9000cfa4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
90004f86:	4804      	ldr	r0, [pc, #16]	; (90004f98 <ethernetif_input+0x5c>)
90004f88:	f011 fbd7 	bl	9001673a <sys_mutex_unlock>
      } while(p!=NULL);
90004f8c:	68bb      	ldr	r3, [r7, #8]
90004f8e:	2b00      	cmp	r3, #0
90004f90:	d1e4      	bne.n	90004f5c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
90004f92:	e7d9      	b.n	90004f48 <ethernetif_input+0xc>
90004f94:	20003250 	.word	0x20003250
90004f98:	20007cb0 	.word	0x20007cb0

90004f9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
90004f9c:	b580      	push	{r7, lr}
90004f9e:	b082      	sub	sp, #8
90004fa0:	af00      	add	r7, sp, #0
90004fa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
90004fa4:	687b      	ldr	r3, [r7, #4]
90004fa6:	2b00      	cmp	r3, #0
90004fa8:	d106      	bne.n	90004fb8 <ethernetif_init+0x1c>
90004faa:	4b0e      	ldr	r3, [pc, #56]	; (90004fe4 <ethernetif_init+0x48>)
90004fac:	f240 223b 	movw	r2, #571	; 0x23b
90004fb0:	490d      	ldr	r1, [pc, #52]	; (90004fe8 <ethernetif_init+0x4c>)
90004fb2:	480e      	ldr	r0, [pc, #56]	; (90004fec <ethernetif_init+0x50>)
90004fb4:	f011 fe44 	bl	90016c40 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
90004fb8:	687b      	ldr	r3, [r7, #4]
90004fba:	2273      	movs	r2, #115	; 0x73
90004fbc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
90004fc0:	687b      	ldr	r3, [r7, #4]
90004fc2:	2274      	movs	r2, #116	; 0x74
90004fc4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
90004fc8:	687b      	ldr	r3, [r7, #4]
90004fca:	4a09      	ldr	r2, [pc, #36]	; (90004ff0 <ethernetif_init+0x54>)
90004fcc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
90004fce:	687b      	ldr	r3, [r7, #4]
90004fd0:	4a08      	ldr	r2, [pc, #32]	; (90004ff4 <ethernetif_init+0x58>)
90004fd2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
90004fd4:	6878      	ldr	r0, [r7, #4]
90004fd6:	f7ff fd8d 	bl	90004af4 <low_level_init>

  return ERR_OK;
90004fda:	2300      	movs	r3, #0
}
90004fdc:	4618      	mov	r0, r3
90004fde:	3708      	adds	r7, #8
90004fe0:	46bd      	mov	sp, r7
90004fe2:	bd80      	pop	{r7, pc}
90004fe4:	90017a8c 	.word	0x90017a8c
90004fe8:	90017aa8 	.word	0x90017aa8
90004fec:	90017ab8 	.word	0x90017ab8
90004ff0:	90014771 	.word	0x90014771
90004ff4:	90004c9d 	.word	0x90004c9d

90004ff8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
90004ff8:	b580      	push	{r7, lr}
90004ffa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
90004ffc:	f7fc f856 	bl	900010ac <HAL_GetTick>
90005000:	4603      	mov	r3, r0
}
90005002:	4618      	mov	r0, r3
90005004:	bd80      	pop	{r7, pc}
	...

90005008 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
90005008:	b580      	push	{r7, lr}
9000500a:	b084      	sub	sp, #16
9000500c:	af00      	add	r7, sp, #0
9000500e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
90005010:	2300      	movs	r3, #0
90005012:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
90005014:	687b      	ldr	r3, [r7, #4]
90005016:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
90005018:	f107 0308 	add.w	r3, r7, #8
9000501c:	461a      	mov	r2, r3
9000501e:	2101      	movs	r1, #1
90005020:	4816      	ldr	r0, [pc, #88]	; (9000507c <ethernetif_set_link+0x74>)
90005022:	f7fc fe57 	bl	90001cd4 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
90005026:	68bb      	ldr	r3, [r7, #8]
90005028:	f003 0304 	and.w	r3, r3, #4
9000502c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
9000502e:	68fb      	ldr	r3, [r7, #12]
90005030:	681b      	ldr	r3, [r3, #0]
90005032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90005036:	f003 0304 	and.w	r3, r3, #4
9000503a:	2b00      	cmp	r3, #0
9000503c:	d108      	bne.n	90005050 <ethernetif_set_link+0x48>
9000503e:	68bb      	ldr	r3, [r7, #8]
90005040:	2b00      	cmp	r3, #0
90005042:	d005      	beq.n	90005050 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
90005044:	68fb      	ldr	r3, [r7, #12]
90005046:	681b      	ldr	r3, [r3, #0]
90005048:	4618      	mov	r0, r3
9000504a:	f007 fb99 	bl	9000c780 <netif_set_link_up>
9000504e:	e011      	b.n	90005074 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
90005050:	68fb      	ldr	r3, [r7, #12]
90005052:	681b      	ldr	r3, [r3, #0]
90005054:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90005058:	089b      	lsrs	r3, r3, #2
9000505a:	f003 0301 	and.w	r3, r3, #1
9000505e:	b2db      	uxtb	r3, r3
90005060:	2b00      	cmp	r3, #0
90005062:	d007      	beq.n	90005074 <ethernetif_set_link+0x6c>
90005064:	68bb      	ldr	r3, [r7, #8]
90005066:	2b00      	cmp	r3, #0
90005068:	d104      	bne.n	90005074 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
9000506a:	68fb      	ldr	r3, [r7, #12]
9000506c:	681b      	ldr	r3, [r3, #0]
9000506e:	4618      	mov	r0, r3
90005070:	f007 fbba 	bl	9000c7e8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
90005074:	20c8      	movs	r0, #200	; 0xc8
90005076:	f000 f9c9 	bl	9000540c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
9000507a:	e7cd      	b.n	90005018 <ethernetif_set_link+0x10>
9000507c:	20003254 	.word	0x20003254

90005080 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
90005080:	b580      	push	{r7, lr}
90005082:	b084      	sub	sp, #16
90005084:	af00      	add	r7, sp, #0
90005086:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
90005088:	2300      	movs	r3, #0
9000508a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
9000508c:	2300      	movs	r3, #0
9000508e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
90005090:	687b      	ldr	r3, [r7, #4]
90005092:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90005096:	089b      	lsrs	r3, r3, #2
90005098:	f003 0301 	and.w	r3, r3, #1
9000509c:	b2db      	uxtb	r3, r3
9000509e:	2b00      	cmp	r3, #0
900050a0:	d05d      	beq.n	9000515e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
900050a2:	4b34      	ldr	r3, [pc, #208]	; (90005174 <ethernetif_update_config+0xf4>)
900050a4:	685b      	ldr	r3, [r3, #4]
900050a6:	2b00      	cmp	r3, #0
900050a8:	d03f      	beq.n	9000512a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
900050aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
900050ae:	2100      	movs	r1, #0
900050b0:	4830      	ldr	r0, [pc, #192]	; (90005174 <ethernetif_update_config+0xf4>)
900050b2:	f7fc fe77 	bl	90001da4 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
900050b6:	f7fb fff9 	bl	900010ac <HAL_GetTick>
900050ba:	4603      	mov	r3, r0
900050bc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
900050be:	f107 0308 	add.w	r3, r7, #8
900050c2:	461a      	mov	r2, r3
900050c4:	2101      	movs	r1, #1
900050c6:	482b      	ldr	r0, [pc, #172]	; (90005174 <ethernetif_update_config+0xf4>)
900050c8:	f7fc fe04 	bl	90001cd4 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
900050cc:	f7fb ffee 	bl	900010ac <HAL_GetTick>
900050d0:	4602      	mov	r2, r0
900050d2:	68fb      	ldr	r3, [r7, #12]
900050d4:	1ad3      	subs	r3, r2, r3
900050d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900050da:	d828      	bhi.n	9000512e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
900050dc:	68bb      	ldr	r3, [r7, #8]
900050de:	f003 0320 	and.w	r3, r3, #32
900050e2:	2b00      	cmp	r3, #0
900050e4:	d0eb      	beq.n	900050be <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
900050e6:	f107 0308 	add.w	r3, r7, #8
900050ea:	461a      	mov	r2, r3
900050ec:	2110      	movs	r1, #16
900050ee:	4821      	ldr	r0, [pc, #132]	; (90005174 <ethernetif_update_config+0xf4>)
900050f0:	f7fc fdf0 	bl	90001cd4 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
900050f4:	68bb      	ldr	r3, [r7, #8]
900050f6:	f003 0304 	and.w	r3, r3, #4
900050fa:	2b00      	cmp	r3, #0
900050fc:	d004      	beq.n	90005108 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
900050fe:	4b1d      	ldr	r3, [pc, #116]	; (90005174 <ethernetif_update_config+0xf4>)
90005100:	f44f 6200 	mov.w	r2, #2048	; 0x800
90005104:	60da      	str	r2, [r3, #12]
90005106:	e002      	b.n	9000510e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
90005108:	4b1a      	ldr	r3, [pc, #104]	; (90005174 <ethernetif_update_config+0xf4>)
9000510a:	2200      	movs	r2, #0
9000510c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
9000510e:	68bb      	ldr	r3, [r7, #8]
90005110:	f003 0302 	and.w	r3, r3, #2
90005114:	2b00      	cmp	r3, #0
90005116:	d003      	beq.n	90005120 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
90005118:	4b16      	ldr	r3, [pc, #88]	; (90005174 <ethernetif_update_config+0xf4>)
9000511a:	2200      	movs	r2, #0
9000511c:	609a      	str	r2, [r3, #8]
9000511e:	e016      	b.n	9000514e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
90005120:	4b14      	ldr	r3, [pc, #80]	; (90005174 <ethernetif_update_config+0xf4>)
90005122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90005126:	609a      	str	r2, [r3, #8]
90005128:	e011      	b.n	9000514e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
9000512a:	bf00      	nop
9000512c:	e000      	b.n	90005130 <ethernetif_update_config+0xb0>
          goto error;
9000512e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
90005130:	4b10      	ldr	r3, [pc, #64]	; (90005174 <ethernetif_update_config+0xf4>)
90005132:	68db      	ldr	r3, [r3, #12]
90005134:	08db      	lsrs	r3, r3, #3
90005136:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
90005138:	4b0e      	ldr	r3, [pc, #56]	; (90005174 <ethernetif_update_config+0xf4>)
9000513a:	689b      	ldr	r3, [r3, #8]
9000513c:	085b      	lsrs	r3, r3, #1
9000513e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
90005140:	4313      	orrs	r3, r2
90005142:	b29b      	uxth	r3, r3
90005144:	461a      	mov	r2, r3
90005146:	2100      	movs	r1, #0
90005148:	480a      	ldr	r0, [pc, #40]	; (90005174 <ethernetif_update_config+0xf4>)
9000514a:	f7fc fe2b 	bl	90001da4 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
9000514e:	2100      	movs	r1, #0
90005150:	4808      	ldr	r0, [pc, #32]	; (90005174 <ethernetif_update_config+0xf4>)
90005152:	f7fc feeb 	bl	90001f2c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
90005156:	4807      	ldr	r0, [pc, #28]	; (90005174 <ethernetif_update_config+0xf4>)
90005158:	f7fc fe8a 	bl	90001e70 <HAL_ETH_Start>
9000515c:	e002      	b.n	90005164 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
9000515e:	4805      	ldr	r0, [pc, #20]	; (90005174 <ethernetif_update_config+0xf4>)
90005160:	f7fc feb5 	bl	90001ece <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
90005164:	6878      	ldr	r0, [r7, #4]
90005166:	f000 f807 	bl	90005178 <ethernetif_notify_conn_changed>
}
9000516a:	bf00      	nop
9000516c:	3710      	adds	r7, #16
9000516e:	46bd      	mov	sp, r7
90005170:	bd80      	pop	{r7, pc}
90005172:	bf00      	nop
90005174:	20003254 	.word	0x20003254

90005178 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
90005178:	b480      	push	{r7}
9000517a:	b083      	sub	sp, #12
9000517c:	af00      	add	r7, sp, #0
9000517e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
90005180:	bf00      	nop
90005182:	370c      	adds	r7, #12
90005184:	46bd      	mov	sp, r7
90005186:	f85d 7b04 	ldr.w	r7, [sp], #4
9000518a:	4770      	bx	lr

9000518c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
9000518c:	b480      	push	{r7}
9000518e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
90005190:	bf00      	nop
90005192:	46bd      	mov	sp, r7
90005194:	f85d 7b04 	ldr.w	r7, [sp], #4
90005198:	4770      	bx	lr
	...

9000519c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
9000519c:	b480      	push	{r7}
9000519e:	b085      	sub	sp, #20
900051a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900051a2:	f3ef 8305 	mrs	r3, IPSR
900051a6:	60bb      	str	r3, [r7, #8]
  return(result);
900051a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
900051aa:	2b00      	cmp	r3, #0
900051ac:	d10f      	bne.n	900051ce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
900051ae:	f3ef 8310 	mrs	r3, PRIMASK
900051b2:	607b      	str	r3, [r7, #4]
  return(result);
900051b4:	687b      	ldr	r3, [r7, #4]
900051b6:	2b00      	cmp	r3, #0
900051b8:	d105      	bne.n	900051c6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
900051ba:	f3ef 8311 	mrs	r3, BASEPRI
900051be:	603b      	str	r3, [r7, #0]
  return(result);
900051c0:	683b      	ldr	r3, [r7, #0]
900051c2:	2b00      	cmp	r3, #0
900051c4:	d007      	beq.n	900051d6 <osKernelInitialize+0x3a>
900051c6:	4b0e      	ldr	r3, [pc, #56]	; (90005200 <osKernelInitialize+0x64>)
900051c8:	681b      	ldr	r3, [r3, #0]
900051ca:	2b02      	cmp	r3, #2
900051cc:	d103      	bne.n	900051d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
900051ce:	f06f 0305 	mvn.w	r3, #5
900051d2:	60fb      	str	r3, [r7, #12]
900051d4:	e00c      	b.n	900051f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
900051d6:	4b0a      	ldr	r3, [pc, #40]	; (90005200 <osKernelInitialize+0x64>)
900051d8:	681b      	ldr	r3, [r3, #0]
900051da:	2b00      	cmp	r3, #0
900051dc:	d105      	bne.n	900051ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
900051de:	4b08      	ldr	r3, [pc, #32]	; (90005200 <osKernelInitialize+0x64>)
900051e0:	2201      	movs	r2, #1
900051e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
900051e4:	2300      	movs	r3, #0
900051e6:	60fb      	str	r3, [r7, #12]
900051e8:	e002      	b.n	900051f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
900051ea:	f04f 33ff 	mov.w	r3, #4294967295
900051ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
900051f0:	68fb      	ldr	r3, [r7, #12]
}
900051f2:	4618      	mov	r0, r3
900051f4:	3714      	adds	r7, #20
900051f6:	46bd      	mov	sp, r7
900051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900051fc:	4770      	bx	lr
900051fe:	bf00      	nop
90005200:	2000329c 	.word	0x2000329c

90005204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
90005204:	b580      	push	{r7, lr}
90005206:	b084      	sub	sp, #16
90005208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000520a:	f3ef 8305 	mrs	r3, IPSR
9000520e:	60bb      	str	r3, [r7, #8]
  return(result);
90005210:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
90005212:	2b00      	cmp	r3, #0
90005214:	d10f      	bne.n	90005236 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005216:	f3ef 8310 	mrs	r3, PRIMASK
9000521a:	607b      	str	r3, [r7, #4]
  return(result);
9000521c:	687b      	ldr	r3, [r7, #4]
9000521e:	2b00      	cmp	r3, #0
90005220:	d105      	bne.n	9000522e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90005222:	f3ef 8311 	mrs	r3, BASEPRI
90005226:	603b      	str	r3, [r7, #0]
  return(result);
90005228:	683b      	ldr	r3, [r7, #0]
9000522a:	2b00      	cmp	r3, #0
9000522c:	d007      	beq.n	9000523e <osKernelStart+0x3a>
9000522e:	4b0f      	ldr	r3, [pc, #60]	; (9000526c <osKernelStart+0x68>)
90005230:	681b      	ldr	r3, [r3, #0]
90005232:	2b02      	cmp	r3, #2
90005234:	d103      	bne.n	9000523e <osKernelStart+0x3a>
    stat = osErrorISR;
90005236:	f06f 0305 	mvn.w	r3, #5
9000523a:	60fb      	str	r3, [r7, #12]
9000523c:	e010      	b.n	90005260 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
9000523e:	4b0b      	ldr	r3, [pc, #44]	; (9000526c <osKernelStart+0x68>)
90005240:	681b      	ldr	r3, [r3, #0]
90005242:	2b01      	cmp	r3, #1
90005244:	d109      	bne.n	9000525a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
90005246:	f7ff ffa1 	bl	9000518c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000524a:	4b08      	ldr	r3, [pc, #32]	; (9000526c <osKernelStart+0x68>)
9000524c:	2202      	movs	r2, #2
9000524e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
90005250:	f002 f9e4 	bl	9000761c <vTaskStartScheduler>
      stat = osOK;
90005254:	2300      	movs	r3, #0
90005256:	60fb      	str	r3, [r7, #12]
90005258:	e002      	b.n	90005260 <osKernelStart+0x5c>
    } else {
      stat = osError;
9000525a:	f04f 33ff 	mov.w	r3, #4294967295
9000525e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
90005260:	68fb      	ldr	r3, [r7, #12]
}
90005262:	4618      	mov	r0, r3
90005264:	3710      	adds	r7, #16
90005266:	46bd      	mov	sp, r7
90005268:	bd80      	pop	{r7, pc}
9000526a:	bf00      	nop
9000526c:	2000329c 	.word	0x2000329c

90005270 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
90005270:	b580      	push	{r7, lr}
90005272:	b084      	sub	sp, #16
90005274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005276:	f3ef 8305 	mrs	r3, IPSR
9000527a:	60bb      	str	r3, [r7, #8]
  return(result);
9000527c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
9000527e:	2b00      	cmp	r3, #0
90005280:	d10f      	bne.n	900052a2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005282:	f3ef 8310 	mrs	r3, PRIMASK
90005286:	607b      	str	r3, [r7, #4]
  return(result);
90005288:	687b      	ldr	r3, [r7, #4]
9000528a:	2b00      	cmp	r3, #0
9000528c:	d105      	bne.n	9000529a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000528e:	f3ef 8311 	mrs	r3, BASEPRI
90005292:	603b      	str	r3, [r7, #0]
  return(result);
90005294:	683b      	ldr	r3, [r7, #0]
90005296:	2b00      	cmp	r3, #0
90005298:	d007      	beq.n	900052aa <osKernelGetTickCount+0x3a>
9000529a:	4b08      	ldr	r3, [pc, #32]	; (900052bc <osKernelGetTickCount+0x4c>)
9000529c:	681b      	ldr	r3, [r3, #0]
9000529e:	2b02      	cmp	r3, #2
900052a0:	d103      	bne.n	900052aa <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
900052a2:	f002 faed 	bl	90007880 <xTaskGetTickCountFromISR>
900052a6:	60f8      	str	r0, [r7, #12]
900052a8:	e002      	b.n	900052b0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
900052aa:	f002 fad9 	bl	90007860 <xTaskGetTickCount>
900052ae:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
900052b0:	68fb      	ldr	r3, [r7, #12]
}
900052b2:	4618      	mov	r0, r3
900052b4:	3710      	adds	r7, #16
900052b6:	46bd      	mov	sp, r7
900052b8:	bd80      	pop	{r7, pc}
900052ba:	bf00      	nop
900052bc:	2000329c 	.word	0x2000329c

900052c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
900052c0:	b580      	push	{r7, lr}
900052c2:	b090      	sub	sp, #64	; 0x40
900052c4:	af04      	add	r7, sp, #16
900052c6:	60f8      	str	r0, [r7, #12]
900052c8:	60b9      	str	r1, [r7, #8]
900052ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
900052cc:	2300      	movs	r3, #0
900052ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900052d0:	f3ef 8305 	mrs	r3, IPSR
900052d4:	61fb      	str	r3, [r7, #28]
  return(result);
900052d6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
900052d8:	2b00      	cmp	r3, #0
900052da:	f040 808f 	bne.w	900053fc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
900052de:	f3ef 8310 	mrs	r3, PRIMASK
900052e2:	61bb      	str	r3, [r7, #24]
  return(result);
900052e4:	69bb      	ldr	r3, [r7, #24]
900052e6:	2b00      	cmp	r3, #0
900052e8:	d105      	bne.n	900052f6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
900052ea:	f3ef 8311 	mrs	r3, BASEPRI
900052ee:	617b      	str	r3, [r7, #20]
  return(result);
900052f0:	697b      	ldr	r3, [r7, #20]
900052f2:	2b00      	cmp	r3, #0
900052f4:	d003      	beq.n	900052fe <osThreadNew+0x3e>
900052f6:	4b44      	ldr	r3, [pc, #272]	; (90005408 <osThreadNew+0x148>)
900052f8:	681b      	ldr	r3, [r3, #0]
900052fa:	2b02      	cmp	r3, #2
900052fc:	d07e      	beq.n	900053fc <osThreadNew+0x13c>
900052fe:	68fb      	ldr	r3, [r7, #12]
90005300:	2b00      	cmp	r3, #0
90005302:	d07b      	beq.n	900053fc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
90005304:	2380      	movs	r3, #128	; 0x80
90005306:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
90005308:	2318      	movs	r3, #24
9000530a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
9000530c:	2300      	movs	r3, #0
9000530e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
90005310:	f04f 33ff 	mov.w	r3, #4294967295
90005314:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
90005316:	687b      	ldr	r3, [r7, #4]
90005318:	2b00      	cmp	r3, #0
9000531a:	d045      	beq.n	900053a8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
9000531c:	687b      	ldr	r3, [r7, #4]
9000531e:	681b      	ldr	r3, [r3, #0]
90005320:	2b00      	cmp	r3, #0
90005322:	d002      	beq.n	9000532a <osThreadNew+0x6a>
        name = attr->name;
90005324:	687b      	ldr	r3, [r7, #4]
90005326:	681b      	ldr	r3, [r3, #0]
90005328:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
9000532a:	687b      	ldr	r3, [r7, #4]
9000532c:	699b      	ldr	r3, [r3, #24]
9000532e:	2b00      	cmp	r3, #0
90005330:	d002      	beq.n	90005338 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
90005332:	687b      	ldr	r3, [r7, #4]
90005334:	699b      	ldr	r3, [r3, #24]
90005336:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
90005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000533a:	2b00      	cmp	r3, #0
9000533c:	d008      	beq.n	90005350 <osThreadNew+0x90>
9000533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005340:	2b38      	cmp	r3, #56	; 0x38
90005342:	d805      	bhi.n	90005350 <osThreadNew+0x90>
90005344:	687b      	ldr	r3, [r7, #4]
90005346:	685b      	ldr	r3, [r3, #4]
90005348:	f003 0301 	and.w	r3, r3, #1
9000534c:	2b00      	cmp	r3, #0
9000534e:	d001      	beq.n	90005354 <osThreadNew+0x94>
        return (NULL);
90005350:	2300      	movs	r3, #0
90005352:	e054      	b.n	900053fe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
90005354:	687b      	ldr	r3, [r7, #4]
90005356:	695b      	ldr	r3, [r3, #20]
90005358:	2b00      	cmp	r3, #0
9000535a:	d003      	beq.n	90005364 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000535c:	687b      	ldr	r3, [r7, #4]
9000535e:	695b      	ldr	r3, [r3, #20]
90005360:	089b      	lsrs	r3, r3, #2
90005362:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
90005364:	687b      	ldr	r3, [r7, #4]
90005366:	689b      	ldr	r3, [r3, #8]
90005368:	2b00      	cmp	r3, #0
9000536a:	d00e      	beq.n	9000538a <osThreadNew+0xca>
9000536c:	687b      	ldr	r3, [r7, #4]
9000536e:	68db      	ldr	r3, [r3, #12]
90005370:	2bbb      	cmp	r3, #187	; 0xbb
90005372:	d90a      	bls.n	9000538a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
90005374:	687b      	ldr	r3, [r7, #4]
90005376:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
90005378:	2b00      	cmp	r3, #0
9000537a:	d006      	beq.n	9000538a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000537c:	687b      	ldr	r3, [r7, #4]
9000537e:	695b      	ldr	r3, [r3, #20]
90005380:	2b00      	cmp	r3, #0
90005382:	d002      	beq.n	9000538a <osThreadNew+0xca>
        mem = 1;
90005384:	2301      	movs	r3, #1
90005386:	623b      	str	r3, [r7, #32]
90005388:	e010      	b.n	900053ac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000538a:	687b      	ldr	r3, [r7, #4]
9000538c:	689b      	ldr	r3, [r3, #8]
9000538e:	2b00      	cmp	r3, #0
90005390:	d10c      	bne.n	900053ac <osThreadNew+0xec>
90005392:	687b      	ldr	r3, [r7, #4]
90005394:	68db      	ldr	r3, [r3, #12]
90005396:	2b00      	cmp	r3, #0
90005398:	d108      	bne.n	900053ac <osThreadNew+0xec>
9000539a:	687b      	ldr	r3, [r7, #4]
9000539c:	691b      	ldr	r3, [r3, #16]
9000539e:	2b00      	cmp	r3, #0
900053a0:	d104      	bne.n	900053ac <osThreadNew+0xec>
          mem = 0;
900053a2:	2300      	movs	r3, #0
900053a4:	623b      	str	r3, [r7, #32]
900053a6:	e001      	b.n	900053ac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
900053a8:	2300      	movs	r3, #0
900053aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
900053ac:	6a3b      	ldr	r3, [r7, #32]
900053ae:	2b01      	cmp	r3, #1
900053b0:	d110      	bne.n	900053d4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
900053b2:	687b      	ldr	r3, [r7, #4]
900053b4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
900053b6:	687a      	ldr	r2, [r7, #4]
900053b8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
900053ba:	9202      	str	r2, [sp, #8]
900053bc:	9301      	str	r3, [sp, #4]
900053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900053c0:	9300      	str	r3, [sp, #0]
900053c2:	68bb      	ldr	r3, [r7, #8]
900053c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
900053c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
900053c8:	68f8      	ldr	r0, [r7, #12]
900053ca:	f001 ff31 	bl	90007230 <xTaskCreateStatic>
900053ce:	4603      	mov	r3, r0
900053d0:	613b      	str	r3, [r7, #16]
900053d2:	e013      	b.n	900053fc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
900053d4:	6a3b      	ldr	r3, [r7, #32]
900053d6:	2b00      	cmp	r3, #0
900053d8:	d110      	bne.n	900053fc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
900053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
900053dc:	b29a      	uxth	r2, r3
900053de:	f107 0310 	add.w	r3, r7, #16
900053e2:	9301      	str	r3, [sp, #4]
900053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900053e6:	9300      	str	r3, [sp, #0]
900053e8:	68bb      	ldr	r3, [r7, #8]
900053ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
900053ec:	68f8      	ldr	r0, [r7, #12]
900053ee:	f001 ff82 	bl	900072f6 <xTaskCreate>
900053f2:	4603      	mov	r3, r0
900053f4:	2b01      	cmp	r3, #1
900053f6:	d001      	beq.n	900053fc <osThreadNew+0x13c>
          hTask = NULL;
900053f8:	2300      	movs	r3, #0
900053fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
900053fc:	693b      	ldr	r3, [r7, #16]
}
900053fe:	4618      	mov	r0, r3
90005400:	3730      	adds	r7, #48	; 0x30
90005402:	46bd      	mov	sp, r7
90005404:	bd80      	pop	{r7, pc}
90005406:	bf00      	nop
90005408:	2000329c 	.word	0x2000329c

9000540c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
9000540c:	b580      	push	{r7, lr}
9000540e:	b086      	sub	sp, #24
90005410:	af00      	add	r7, sp, #0
90005412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005414:	f3ef 8305 	mrs	r3, IPSR
90005418:	613b      	str	r3, [r7, #16]
  return(result);
9000541a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
9000541c:	2b00      	cmp	r3, #0
9000541e:	d10f      	bne.n	90005440 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005420:	f3ef 8310 	mrs	r3, PRIMASK
90005424:	60fb      	str	r3, [r7, #12]
  return(result);
90005426:	68fb      	ldr	r3, [r7, #12]
90005428:	2b00      	cmp	r3, #0
9000542a:	d105      	bne.n	90005438 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000542c:	f3ef 8311 	mrs	r3, BASEPRI
90005430:	60bb      	str	r3, [r7, #8]
  return(result);
90005432:	68bb      	ldr	r3, [r7, #8]
90005434:	2b00      	cmp	r3, #0
90005436:	d007      	beq.n	90005448 <osDelay+0x3c>
90005438:	4b0a      	ldr	r3, [pc, #40]	; (90005464 <osDelay+0x58>)
9000543a:	681b      	ldr	r3, [r3, #0]
9000543c:	2b02      	cmp	r3, #2
9000543e:	d103      	bne.n	90005448 <osDelay+0x3c>
    stat = osErrorISR;
90005440:	f06f 0305 	mvn.w	r3, #5
90005444:	617b      	str	r3, [r7, #20]
90005446:	e007      	b.n	90005458 <osDelay+0x4c>
  }
  else {
    stat = osOK;
90005448:	2300      	movs	r3, #0
9000544a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
9000544c:	687b      	ldr	r3, [r7, #4]
9000544e:	2b00      	cmp	r3, #0
90005450:	d002      	beq.n	90005458 <osDelay+0x4c>
      vTaskDelay(ticks);
90005452:	6878      	ldr	r0, [r7, #4]
90005454:	f002 f8ac 	bl	900075b0 <vTaskDelay>
    }
  }

  return (stat);
90005458:	697b      	ldr	r3, [r7, #20]
}
9000545a:	4618      	mov	r0, r3
9000545c:	3718      	adds	r7, #24
9000545e:	46bd      	mov	sp, r7
90005460:	bd80      	pop	{r7, pc}
90005462:	bf00      	nop
90005464:	2000329c 	.word	0x2000329c

90005468 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
90005468:	b580      	push	{r7, lr}
9000546a:	b08a      	sub	sp, #40	; 0x28
9000546c:	af00      	add	r7, sp, #0
9000546e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
90005470:	2300      	movs	r3, #0
90005472:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005474:	f3ef 8305 	mrs	r3, IPSR
90005478:	613b      	str	r3, [r7, #16]
  return(result);
9000547a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
9000547c:	2b00      	cmp	r3, #0
9000547e:	f040 8085 	bne.w	9000558c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005482:	f3ef 8310 	mrs	r3, PRIMASK
90005486:	60fb      	str	r3, [r7, #12]
  return(result);
90005488:	68fb      	ldr	r3, [r7, #12]
9000548a:	2b00      	cmp	r3, #0
9000548c:	d105      	bne.n	9000549a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000548e:	f3ef 8311 	mrs	r3, BASEPRI
90005492:	60bb      	str	r3, [r7, #8]
  return(result);
90005494:	68bb      	ldr	r3, [r7, #8]
90005496:	2b00      	cmp	r3, #0
90005498:	d003      	beq.n	900054a2 <osMutexNew+0x3a>
9000549a:	4b3f      	ldr	r3, [pc, #252]	; (90005598 <osMutexNew+0x130>)
9000549c:	681b      	ldr	r3, [r3, #0]
9000549e:	2b02      	cmp	r3, #2
900054a0:	d074      	beq.n	9000558c <osMutexNew+0x124>
    if (attr != NULL) {
900054a2:	687b      	ldr	r3, [r7, #4]
900054a4:	2b00      	cmp	r3, #0
900054a6:	d003      	beq.n	900054b0 <osMutexNew+0x48>
      type = attr->attr_bits;
900054a8:	687b      	ldr	r3, [r7, #4]
900054aa:	685b      	ldr	r3, [r3, #4]
900054ac:	623b      	str	r3, [r7, #32]
900054ae:	e001      	b.n	900054b4 <osMutexNew+0x4c>
    } else {
      type = 0U;
900054b0:	2300      	movs	r3, #0
900054b2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
900054b4:	6a3b      	ldr	r3, [r7, #32]
900054b6:	f003 0301 	and.w	r3, r3, #1
900054ba:	2b00      	cmp	r3, #0
900054bc:	d002      	beq.n	900054c4 <osMutexNew+0x5c>
      rmtx = 1U;
900054be:	2301      	movs	r3, #1
900054c0:	61fb      	str	r3, [r7, #28]
900054c2:	e001      	b.n	900054c8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
900054c4:	2300      	movs	r3, #0
900054c6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
900054c8:	6a3b      	ldr	r3, [r7, #32]
900054ca:	f003 0308 	and.w	r3, r3, #8
900054ce:	2b00      	cmp	r3, #0
900054d0:	d15c      	bne.n	9000558c <osMutexNew+0x124>
      mem = -1;
900054d2:	f04f 33ff 	mov.w	r3, #4294967295
900054d6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
900054d8:	687b      	ldr	r3, [r7, #4]
900054da:	2b00      	cmp	r3, #0
900054dc:	d015      	beq.n	9000550a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
900054de:	687b      	ldr	r3, [r7, #4]
900054e0:	689b      	ldr	r3, [r3, #8]
900054e2:	2b00      	cmp	r3, #0
900054e4:	d006      	beq.n	900054f4 <osMutexNew+0x8c>
900054e6:	687b      	ldr	r3, [r7, #4]
900054e8:	68db      	ldr	r3, [r3, #12]
900054ea:	2b4f      	cmp	r3, #79	; 0x4f
900054ec:	d902      	bls.n	900054f4 <osMutexNew+0x8c>
          mem = 1;
900054ee:	2301      	movs	r3, #1
900054f0:	61bb      	str	r3, [r7, #24]
900054f2:	e00c      	b.n	9000550e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
900054f4:	687b      	ldr	r3, [r7, #4]
900054f6:	689b      	ldr	r3, [r3, #8]
900054f8:	2b00      	cmp	r3, #0
900054fa:	d108      	bne.n	9000550e <osMutexNew+0xa6>
900054fc:	687b      	ldr	r3, [r7, #4]
900054fe:	68db      	ldr	r3, [r3, #12]
90005500:	2b00      	cmp	r3, #0
90005502:	d104      	bne.n	9000550e <osMutexNew+0xa6>
            mem = 0;
90005504:	2300      	movs	r3, #0
90005506:	61bb      	str	r3, [r7, #24]
90005508:	e001      	b.n	9000550e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
9000550a:	2300      	movs	r3, #0
9000550c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
9000550e:	69bb      	ldr	r3, [r7, #24]
90005510:	2b01      	cmp	r3, #1
90005512:	d112      	bne.n	9000553a <osMutexNew+0xd2>
        if (rmtx != 0U) {
90005514:	69fb      	ldr	r3, [r7, #28]
90005516:	2b00      	cmp	r3, #0
90005518:	d007      	beq.n	9000552a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000551a:	687b      	ldr	r3, [r7, #4]
9000551c:	689b      	ldr	r3, [r3, #8]
9000551e:	4619      	mov	r1, r3
90005520:	2004      	movs	r0, #4
90005522:	f000 feb8 	bl	90006296 <xQueueCreateMutexStatic>
90005526:	6278      	str	r0, [r7, #36]	; 0x24
90005528:	e016      	b.n	90005558 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000552a:	687b      	ldr	r3, [r7, #4]
9000552c:	689b      	ldr	r3, [r3, #8]
9000552e:	4619      	mov	r1, r3
90005530:	2001      	movs	r0, #1
90005532:	f000 feb0 	bl	90006296 <xQueueCreateMutexStatic>
90005536:	6278      	str	r0, [r7, #36]	; 0x24
90005538:	e00e      	b.n	90005558 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
9000553a:	69bb      	ldr	r3, [r7, #24]
9000553c:	2b00      	cmp	r3, #0
9000553e:	d10b      	bne.n	90005558 <osMutexNew+0xf0>
          if (rmtx != 0U) {
90005540:	69fb      	ldr	r3, [r7, #28]
90005542:	2b00      	cmp	r3, #0
90005544:	d004      	beq.n	90005550 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
90005546:	2004      	movs	r0, #4
90005548:	f000 fe8d 	bl	90006266 <xQueueCreateMutex>
9000554c:	6278      	str	r0, [r7, #36]	; 0x24
9000554e:	e003      	b.n	90005558 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
90005550:	2001      	movs	r0, #1
90005552:	f000 fe88 	bl	90006266 <xQueueCreateMutex>
90005556:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
90005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000555a:	2b00      	cmp	r3, #0
9000555c:	d00c      	beq.n	90005578 <osMutexNew+0x110>
        if (attr != NULL) {
9000555e:	687b      	ldr	r3, [r7, #4]
90005560:	2b00      	cmp	r3, #0
90005562:	d003      	beq.n	9000556c <osMutexNew+0x104>
          name = attr->name;
90005564:	687b      	ldr	r3, [r7, #4]
90005566:	681b      	ldr	r3, [r3, #0]
90005568:	617b      	str	r3, [r7, #20]
9000556a:	e001      	b.n	90005570 <osMutexNew+0x108>
        } else {
          name = NULL;
9000556c:	2300      	movs	r3, #0
9000556e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
90005570:	6979      	ldr	r1, [r7, #20]
90005572:	6a78      	ldr	r0, [r7, #36]	; 0x24
90005574:	f001 fdd4 	bl	90007120 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
90005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000557a:	2b00      	cmp	r3, #0
9000557c:	d006      	beq.n	9000558c <osMutexNew+0x124>
9000557e:	69fb      	ldr	r3, [r7, #28]
90005580:	2b00      	cmp	r3, #0
90005582:	d003      	beq.n	9000558c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
90005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005586:	f043 0301 	orr.w	r3, r3, #1
9000558a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
9000558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
9000558e:	4618      	mov	r0, r3
90005590:	3728      	adds	r7, #40	; 0x28
90005592:	46bd      	mov	sp, r7
90005594:	bd80      	pop	{r7, pc}
90005596:	bf00      	nop
90005598:	2000329c 	.word	0x2000329c

9000559c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000559c:	b580      	push	{r7, lr}
9000559e:	b088      	sub	sp, #32
900055a0:	af00      	add	r7, sp, #0
900055a2:	6078      	str	r0, [r7, #4]
900055a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
900055a6:	687b      	ldr	r3, [r7, #4]
900055a8:	f023 0301 	bic.w	r3, r3, #1
900055ac:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
900055ae:	687b      	ldr	r3, [r7, #4]
900055b0:	f003 0301 	and.w	r3, r3, #1
900055b4:	617b      	str	r3, [r7, #20]

  stat = osOK;
900055b6:	2300      	movs	r3, #0
900055b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900055ba:	f3ef 8305 	mrs	r3, IPSR
900055be:	613b      	str	r3, [r7, #16]
  return(result);
900055c0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
900055c2:	2b00      	cmp	r3, #0
900055c4:	d10f      	bne.n	900055e6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
900055c6:	f3ef 8310 	mrs	r3, PRIMASK
900055ca:	60fb      	str	r3, [r7, #12]
  return(result);
900055cc:	68fb      	ldr	r3, [r7, #12]
900055ce:	2b00      	cmp	r3, #0
900055d0:	d105      	bne.n	900055de <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
900055d2:	f3ef 8311 	mrs	r3, BASEPRI
900055d6:	60bb      	str	r3, [r7, #8]
  return(result);
900055d8:	68bb      	ldr	r3, [r7, #8]
900055da:	2b00      	cmp	r3, #0
900055dc:	d007      	beq.n	900055ee <osMutexAcquire+0x52>
900055de:	4b1d      	ldr	r3, [pc, #116]	; (90005654 <osMutexAcquire+0xb8>)
900055e0:	681b      	ldr	r3, [r3, #0]
900055e2:	2b02      	cmp	r3, #2
900055e4:	d103      	bne.n	900055ee <osMutexAcquire+0x52>
    stat = osErrorISR;
900055e6:	f06f 0305 	mvn.w	r3, #5
900055ea:	61fb      	str	r3, [r7, #28]
900055ec:	e02c      	b.n	90005648 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
900055ee:	69bb      	ldr	r3, [r7, #24]
900055f0:	2b00      	cmp	r3, #0
900055f2:	d103      	bne.n	900055fc <osMutexAcquire+0x60>
    stat = osErrorParameter;
900055f4:	f06f 0303 	mvn.w	r3, #3
900055f8:	61fb      	str	r3, [r7, #28]
900055fa:	e025      	b.n	90005648 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
900055fc:	697b      	ldr	r3, [r7, #20]
900055fe:	2b00      	cmp	r3, #0
90005600:	d011      	beq.n	90005626 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
90005602:	6839      	ldr	r1, [r7, #0]
90005604:	69b8      	ldr	r0, [r7, #24]
90005606:	f000 fe97 	bl	90006338 <xQueueTakeMutexRecursive>
9000560a:	4603      	mov	r3, r0
9000560c:	2b01      	cmp	r3, #1
9000560e:	d01b      	beq.n	90005648 <osMutexAcquire+0xac>
        if (timeout != 0U) {
90005610:	683b      	ldr	r3, [r7, #0]
90005612:	2b00      	cmp	r3, #0
90005614:	d003      	beq.n	9000561e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
90005616:	f06f 0301 	mvn.w	r3, #1
9000561a:	61fb      	str	r3, [r7, #28]
9000561c:	e014      	b.n	90005648 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
9000561e:	f06f 0302 	mvn.w	r3, #2
90005622:	61fb      	str	r3, [r7, #28]
90005624:	e010      	b.n	90005648 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
90005626:	6839      	ldr	r1, [r7, #0]
90005628:	69b8      	ldr	r0, [r7, #24]
9000562a:	f001 fa51 	bl	90006ad0 <xQueueSemaphoreTake>
9000562e:	4603      	mov	r3, r0
90005630:	2b01      	cmp	r3, #1
90005632:	d009      	beq.n	90005648 <osMutexAcquire+0xac>
        if (timeout != 0U) {
90005634:	683b      	ldr	r3, [r7, #0]
90005636:	2b00      	cmp	r3, #0
90005638:	d003      	beq.n	90005642 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
9000563a:	f06f 0301 	mvn.w	r3, #1
9000563e:	61fb      	str	r3, [r7, #28]
90005640:	e002      	b.n	90005648 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
90005642:	f06f 0302 	mvn.w	r3, #2
90005646:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
90005648:	69fb      	ldr	r3, [r7, #28]
}
9000564a:	4618      	mov	r0, r3
9000564c:	3720      	adds	r7, #32
9000564e:	46bd      	mov	sp, r7
90005650:	bd80      	pop	{r7, pc}
90005652:	bf00      	nop
90005654:	2000329c 	.word	0x2000329c

90005658 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
90005658:	b580      	push	{r7, lr}
9000565a:	b088      	sub	sp, #32
9000565c:	af00      	add	r7, sp, #0
9000565e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
90005660:	687b      	ldr	r3, [r7, #4]
90005662:	f023 0301 	bic.w	r3, r3, #1
90005666:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
90005668:	687b      	ldr	r3, [r7, #4]
9000566a:	f003 0301 	and.w	r3, r3, #1
9000566e:	617b      	str	r3, [r7, #20]

  stat = osOK;
90005670:	2300      	movs	r3, #0
90005672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005674:	f3ef 8305 	mrs	r3, IPSR
90005678:	613b      	str	r3, [r7, #16]
  return(result);
9000567a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
9000567c:	2b00      	cmp	r3, #0
9000567e:	d10f      	bne.n	900056a0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005680:	f3ef 8310 	mrs	r3, PRIMASK
90005684:	60fb      	str	r3, [r7, #12]
  return(result);
90005686:	68fb      	ldr	r3, [r7, #12]
90005688:	2b00      	cmp	r3, #0
9000568a:	d105      	bne.n	90005698 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000568c:	f3ef 8311 	mrs	r3, BASEPRI
90005690:	60bb      	str	r3, [r7, #8]
  return(result);
90005692:	68bb      	ldr	r3, [r7, #8]
90005694:	2b00      	cmp	r3, #0
90005696:	d007      	beq.n	900056a8 <osMutexRelease+0x50>
90005698:	4b16      	ldr	r3, [pc, #88]	; (900056f4 <osMutexRelease+0x9c>)
9000569a:	681b      	ldr	r3, [r3, #0]
9000569c:	2b02      	cmp	r3, #2
9000569e:	d103      	bne.n	900056a8 <osMutexRelease+0x50>
    stat = osErrorISR;
900056a0:	f06f 0305 	mvn.w	r3, #5
900056a4:	61fb      	str	r3, [r7, #28]
900056a6:	e01f      	b.n	900056e8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
900056a8:	69bb      	ldr	r3, [r7, #24]
900056aa:	2b00      	cmp	r3, #0
900056ac:	d103      	bne.n	900056b6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
900056ae:	f06f 0303 	mvn.w	r3, #3
900056b2:	61fb      	str	r3, [r7, #28]
900056b4:	e018      	b.n	900056e8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
900056b6:	697b      	ldr	r3, [r7, #20]
900056b8:	2b00      	cmp	r3, #0
900056ba:	d009      	beq.n	900056d0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
900056bc:	69b8      	ldr	r0, [r7, #24]
900056be:	f000 fe05 	bl	900062cc <xQueueGiveMutexRecursive>
900056c2:	4603      	mov	r3, r0
900056c4:	2b01      	cmp	r3, #1
900056c6:	d00f      	beq.n	900056e8 <osMutexRelease+0x90>
        stat = osErrorResource;
900056c8:	f06f 0302 	mvn.w	r3, #2
900056cc:	61fb      	str	r3, [r7, #28]
900056ce:	e00b      	b.n	900056e8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
900056d0:	2300      	movs	r3, #0
900056d2:	2200      	movs	r2, #0
900056d4:	2100      	movs	r1, #0
900056d6:	69b8      	ldr	r0, [r7, #24]
900056d8:	f000 fed8 	bl	9000648c <xQueueGenericSend>
900056dc:	4603      	mov	r3, r0
900056de:	2b01      	cmp	r3, #1
900056e0:	d002      	beq.n	900056e8 <osMutexRelease+0x90>
        stat = osErrorResource;
900056e2:	f06f 0302 	mvn.w	r3, #2
900056e6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
900056e8:	69fb      	ldr	r3, [r7, #28]
}
900056ea:	4618      	mov	r0, r3
900056ec:	3720      	adds	r7, #32
900056ee:	46bd      	mov	sp, r7
900056f0:	bd80      	pop	{r7, pc}
900056f2:	bf00      	nop
900056f4:	2000329c 	.word	0x2000329c

900056f8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
900056f8:	b580      	push	{r7, lr}
900056fa:	b08c      	sub	sp, #48	; 0x30
900056fc:	af02      	add	r7, sp, #8
900056fe:	60f8      	str	r0, [r7, #12]
90005700:	60b9      	str	r1, [r7, #8]
90005702:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
90005704:	2300      	movs	r3, #0
90005706:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005708:	f3ef 8305 	mrs	r3, IPSR
9000570c:	61bb      	str	r3, [r7, #24]
  return(result);
9000570e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
90005710:	2b00      	cmp	r3, #0
90005712:	f040 8086 	bne.w	90005822 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005716:	f3ef 8310 	mrs	r3, PRIMASK
9000571a:	617b      	str	r3, [r7, #20]
  return(result);
9000571c:	697b      	ldr	r3, [r7, #20]
9000571e:	2b00      	cmp	r3, #0
90005720:	d105      	bne.n	9000572e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90005722:	f3ef 8311 	mrs	r3, BASEPRI
90005726:	613b      	str	r3, [r7, #16]
  return(result);
90005728:	693b      	ldr	r3, [r7, #16]
9000572a:	2b00      	cmp	r3, #0
9000572c:	d003      	beq.n	90005736 <osSemaphoreNew+0x3e>
9000572e:	4b3f      	ldr	r3, [pc, #252]	; (9000582c <osSemaphoreNew+0x134>)
90005730:	681b      	ldr	r3, [r3, #0]
90005732:	2b02      	cmp	r3, #2
90005734:	d075      	beq.n	90005822 <osSemaphoreNew+0x12a>
90005736:	68fb      	ldr	r3, [r7, #12]
90005738:	2b00      	cmp	r3, #0
9000573a:	d072      	beq.n	90005822 <osSemaphoreNew+0x12a>
9000573c:	68ba      	ldr	r2, [r7, #8]
9000573e:	68fb      	ldr	r3, [r7, #12]
90005740:	429a      	cmp	r2, r3
90005742:	d86e      	bhi.n	90005822 <osSemaphoreNew+0x12a>
    mem = -1;
90005744:	f04f 33ff 	mov.w	r3, #4294967295
90005748:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
9000574a:	687b      	ldr	r3, [r7, #4]
9000574c:	2b00      	cmp	r3, #0
9000574e:	d015      	beq.n	9000577c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
90005750:	687b      	ldr	r3, [r7, #4]
90005752:	689b      	ldr	r3, [r3, #8]
90005754:	2b00      	cmp	r3, #0
90005756:	d006      	beq.n	90005766 <osSemaphoreNew+0x6e>
90005758:	687b      	ldr	r3, [r7, #4]
9000575a:	68db      	ldr	r3, [r3, #12]
9000575c:	2b4f      	cmp	r3, #79	; 0x4f
9000575e:	d902      	bls.n	90005766 <osSemaphoreNew+0x6e>
        mem = 1;
90005760:	2301      	movs	r3, #1
90005762:	623b      	str	r3, [r7, #32]
90005764:	e00c      	b.n	90005780 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
90005766:	687b      	ldr	r3, [r7, #4]
90005768:	689b      	ldr	r3, [r3, #8]
9000576a:	2b00      	cmp	r3, #0
9000576c:	d108      	bne.n	90005780 <osSemaphoreNew+0x88>
9000576e:	687b      	ldr	r3, [r7, #4]
90005770:	68db      	ldr	r3, [r3, #12]
90005772:	2b00      	cmp	r3, #0
90005774:	d104      	bne.n	90005780 <osSemaphoreNew+0x88>
          mem = 0;
90005776:	2300      	movs	r3, #0
90005778:	623b      	str	r3, [r7, #32]
9000577a:	e001      	b.n	90005780 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
9000577c:	2300      	movs	r3, #0
9000577e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
90005780:	6a3b      	ldr	r3, [r7, #32]
90005782:	f1b3 3fff 	cmp.w	r3, #4294967295
90005786:	d04c      	beq.n	90005822 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
90005788:	68fb      	ldr	r3, [r7, #12]
9000578a:	2b01      	cmp	r3, #1
9000578c:	d128      	bne.n	900057e0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
9000578e:	6a3b      	ldr	r3, [r7, #32]
90005790:	2b01      	cmp	r3, #1
90005792:	d10a      	bne.n	900057aa <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
90005794:	687b      	ldr	r3, [r7, #4]
90005796:	689b      	ldr	r3, [r3, #8]
90005798:	2203      	movs	r2, #3
9000579a:	9200      	str	r2, [sp, #0]
9000579c:	2200      	movs	r2, #0
9000579e:	2100      	movs	r1, #0
900057a0:	2001      	movs	r0, #1
900057a2:	f000 fc5f 	bl	90006064 <xQueueGenericCreateStatic>
900057a6:	6278      	str	r0, [r7, #36]	; 0x24
900057a8:	e005      	b.n	900057b6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
900057aa:	2203      	movs	r2, #3
900057ac:	2100      	movs	r1, #0
900057ae:	2001      	movs	r0, #1
900057b0:	f000 fcda 	bl	90006168 <xQueueGenericCreate>
900057b4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
900057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900057b8:	2b00      	cmp	r3, #0
900057ba:	d022      	beq.n	90005802 <osSemaphoreNew+0x10a>
900057bc:	68bb      	ldr	r3, [r7, #8]
900057be:	2b00      	cmp	r3, #0
900057c0:	d01f      	beq.n	90005802 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
900057c2:	2300      	movs	r3, #0
900057c4:	2200      	movs	r2, #0
900057c6:	2100      	movs	r1, #0
900057c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
900057ca:	f000 fe5f 	bl	9000648c <xQueueGenericSend>
900057ce:	4603      	mov	r3, r0
900057d0:	2b01      	cmp	r3, #1
900057d2:	d016      	beq.n	90005802 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
900057d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
900057d6:	f001 fb55 	bl	90006e84 <vQueueDelete>
            hSemaphore = NULL;
900057da:	2300      	movs	r3, #0
900057dc:	627b      	str	r3, [r7, #36]	; 0x24
900057de:	e010      	b.n	90005802 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
900057e0:	6a3b      	ldr	r3, [r7, #32]
900057e2:	2b01      	cmp	r3, #1
900057e4:	d108      	bne.n	900057f8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
900057e6:	687b      	ldr	r3, [r7, #4]
900057e8:	689b      	ldr	r3, [r3, #8]
900057ea:	461a      	mov	r2, r3
900057ec:	68b9      	ldr	r1, [r7, #8]
900057ee:	68f8      	ldr	r0, [r7, #12]
900057f0:	f000 fdda 	bl	900063a8 <xQueueCreateCountingSemaphoreStatic>
900057f4:	6278      	str	r0, [r7, #36]	; 0x24
900057f6:	e004      	b.n	90005802 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
900057f8:	68b9      	ldr	r1, [r7, #8]
900057fa:	68f8      	ldr	r0, [r7, #12]
900057fc:	f000 fe0f 	bl	9000641e <xQueueCreateCountingSemaphore>
90005800:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
90005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005804:	2b00      	cmp	r3, #0
90005806:	d00c      	beq.n	90005822 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
90005808:	687b      	ldr	r3, [r7, #4]
9000580a:	2b00      	cmp	r3, #0
9000580c:	d003      	beq.n	90005816 <osSemaphoreNew+0x11e>
          name = attr->name;
9000580e:	687b      	ldr	r3, [r7, #4]
90005810:	681b      	ldr	r3, [r3, #0]
90005812:	61fb      	str	r3, [r7, #28]
90005814:	e001      	b.n	9000581a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
90005816:	2300      	movs	r3, #0
90005818:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
9000581a:	69f9      	ldr	r1, [r7, #28]
9000581c:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000581e:	f001 fc7f 	bl	90007120 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
90005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
90005824:	4618      	mov	r0, r3
90005826:	3728      	adds	r7, #40	; 0x28
90005828:	46bd      	mov	sp, r7
9000582a:	bd80      	pop	{r7, pc}
9000582c:	2000329c 	.word	0x2000329c

90005830 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
90005830:	b580      	push	{r7, lr}
90005832:	b088      	sub	sp, #32
90005834:	af00      	add	r7, sp, #0
90005836:	6078      	str	r0, [r7, #4]
90005838:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
9000583a:	687b      	ldr	r3, [r7, #4]
9000583c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
9000583e:	2300      	movs	r3, #0
90005840:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
90005842:	69bb      	ldr	r3, [r7, #24]
90005844:	2b00      	cmp	r3, #0
90005846:	d103      	bne.n	90005850 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
90005848:	f06f 0303 	mvn.w	r3, #3
9000584c:	61fb      	str	r3, [r7, #28]
9000584e:	e04b      	b.n	900058e8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005850:	f3ef 8305 	mrs	r3, IPSR
90005854:	617b      	str	r3, [r7, #20]
  return(result);
90005856:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
90005858:	2b00      	cmp	r3, #0
9000585a:	d10f      	bne.n	9000587c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
9000585c:	f3ef 8310 	mrs	r3, PRIMASK
90005860:	613b      	str	r3, [r7, #16]
  return(result);
90005862:	693b      	ldr	r3, [r7, #16]
90005864:	2b00      	cmp	r3, #0
90005866:	d105      	bne.n	90005874 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90005868:	f3ef 8311 	mrs	r3, BASEPRI
9000586c:	60fb      	str	r3, [r7, #12]
  return(result);
9000586e:	68fb      	ldr	r3, [r7, #12]
90005870:	2b00      	cmp	r3, #0
90005872:	d026      	beq.n	900058c2 <osSemaphoreAcquire+0x92>
90005874:	4b1f      	ldr	r3, [pc, #124]	; (900058f4 <osSemaphoreAcquire+0xc4>)
90005876:	681b      	ldr	r3, [r3, #0]
90005878:	2b02      	cmp	r3, #2
9000587a:	d122      	bne.n	900058c2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
9000587c:	683b      	ldr	r3, [r7, #0]
9000587e:	2b00      	cmp	r3, #0
90005880:	d003      	beq.n	9000588a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
90005882:	f06f 0303 	mvn.w	r3, #3
90005886:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
90005888:	e02d      	b.n	900058e6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
9000588a:	2300      	movs	r3, #0
9000588c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000588e:	f107 0308 	add.w	r3, r7, #8
90005892:	461a      	mov	r2, r3
90005894:	2100      	movs	r1, #0
90005896:	69b8      	ldr	r0, [r7, #24]
90005898:	f001 fa2e 	bl	90006cf8 <xQueueReceiveFromISR>
9000589c:	4603      	mov	r3, r0
9000589e:	2b01      	cmp	r3, #1
900058a0:	d003      	beq.n	900058aa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
900058a2:	f06f 0302 	mvn.w	r3, #2
900058a6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
900058a8:	e01d      	b.n	900058e6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
900058aa:	68bb      	ldr	r3, [r7, #8]
900058ac:	2b00      	cmp	r3, #0
900058ae:	d01a      	beq.n	900058e6 <osSemaphoreAcquire+0xb6>
900058b0:	4b11      	ldr	r3, [pc, #68]	; (900058f8 <osSemaphoreAcquire+0xc8>)
900058b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900058b6:	601a      	str	r2, [r3, #0]
900058b8:	f3bf 8f4f 	dsb	sy
900058bc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
900058c0:	e011      	b.n	900058e6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
900058c2:	6839      	ldr	r1, [r7, #0]
900058c4:	69b8      	ldr	r0, [r7, #24]
900058c6:	f001 f903 	bl	90006ad0 <xQueueSemaphoreTake>
900058ca:	4603      	mov	r3, r0
900058cc:	2b01      	cmp	r3, #1
900058ce:	d00b      	beq.n	900058e8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
900058d0:	683b      	ldr	r3, [r7, #0]
900058d2:	2b00      	cmp	r3, #0
900058d4:	d003      	beq.n	900058de <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
900058d6:	f06f 0301 	mvn.w	r3, #1
900058da:	61fb      	str	r3, [r7, #28]
900058dc:	e004      	b.n	900058e8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
900058de:	f06f 0302 	mvn.w	r3, #2
900058e2:	61fb      	str	r3, [r7, #28]
900058e4:	e000      	b.n	900058e8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
900058e6:	bf00      	nop
      }
    }
  }

  return (stat);
900058e8:	69fb      	ldr	r3, [r7, #28]
}
900058ea:	4618      	mov	r0, r3
900058ec:	3720      	adds	r7, #32
900058ee:	46bd      	mov	sp, r7
900058f0:	bd80      	pop	{r7, pc}
900058f2:	bf00      	nop
900058f4:	2000329c 	.word	0x2000329c
900058f8:	e000ed04 	.word	0xe000ed04

900058fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
900058fc:	b580      	push	{r7, lr}
900058fe:	b088      	sub	sp, #32
90005900:	af00      	add	r7, sp, #0
90005902:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
90005904:	687b      	ldr	r3, [r7, #4]
90005906:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
90005908:	2300      	movs	r3, #0
9000590a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
9000590c:	69bb      	ldr	r3, [r7, #24]
9000590e:	2b00      	cmp	r3, #0
90005910:	d103      	bne.n	9000591a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
90005912:	f06f 0303 	mvn.w	r3, #3
90005916:	61fb      	str	r3, [r7, #28]
90005918:	e03e      	b.n	90005998 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000591a:	f3ef 8305 	mrs	r3, IPSR
9000591e:	617b      	str	r3, [r7, #20]
  return(result);
90005920:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
90005922:	2b00      	cmp	r3, #0
90005924:	d10f      	bne.n	90005946 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005926:	f3ef 8310 	mrs	r3, PRIMASK
9000592a:	613b      	str	r3, [r7, #16]
  return(result);
9000592c:	693b      	ldr	r3, [r7, #16]
9000592e:	2b00      	cmp	r3, #0
90005930:	d105      	bne.n	9000593e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90005932:	f3ef 8311 	mrs	r3, BASEPRI
90005936:	60fb      	str	r3, [r7, #12]
  return(result);
90005938:	68fb      	ldr	r3, [r7, #12]
9000593a:	2b00      	cmp	r3, #0
9000593c:	d01e      	beq.n	9000597c <osSemaphoreRelease+0x80>
9000593e:	4b19      	ldr	r3, [pc, #100]	; (900059a4 <osSemaphoreRelease+0xa8>)
90005940:	681b      	ldr	r3, [r3, #0]
90005942:	2b02      	cmp	r3, #2
90005944:	d11a      	bne.n	9000597c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
90005946:	2300      	movs	r3, #0
90005948:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000594a:	f107 0308 	add.w	r3, r7, #8
9000594e:	4619      	mov	r1, r3
90005950:	69b8      	ldr	r0, [r7, #24]
90005952:	f000 ff41 	bl	900067d8 <xQueueGiveFromISR>
90005956:	4603      	mov	r3, r0
90005958:	2b01      	cmp	r3, #1
9000595a:	d003      	beq.n	90005964 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
9000595c:	f06f 0302 	mvn.w	r3, #2
90005960:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
90005962:	e018      	b.n	90005996 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
90005964:	68bb      	ldr	r3, [r7, #8]
90005966:	2b00      	cmp	r3, #0
90005968:	d015      	beq.n	90005996 <osSemaphoreRelease+0x9a>
9000596a:	4b0f      	ldr	r3, [pc, #60]	; (900059a8 <osSemaphoreRelease+0xac>)
9000596c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005970:	601a      	str	r2, [r3, #0]
90005972:	f3bf 8f4f 	dsb	sy
90005976:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000597a:	e00c      	b.n	90005996 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000597c:	2300      	movs	r3, #0
9000597e:	2200      	movs	r2, #0
90005980:	2100      	movs	r1, #0
90005982:	69b8      	ldr	r0, [r7, #24]
90005984:	f000 fd82 	bl	9000648c <xQueueGenericSend>
90005988:	4603      	mov	r3, r0
9000598a:	2b01      	cmp	r3, #1
9000598c:	d004      	beq.n	90005998 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
9000598e:	f06f 0302 	mvn.w	r3, #2
90005992:	61fb      	str	r3, [r7, #28]
90005994:	e000      	b.n	90005998 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
90005996:	bf00      	nop
    }
  }

  return (stat);
90005998:	69fb      	ldr	r3, [r7, #28]
}
9000599a:	4618      	mov	r0, r3
9000599c:	3720      	adds	r7, #32
9000599e:	46bd      	mov	sp, r7
900059a0:	bd80      	pop	{r7, pc}
900059a2:	bf00      	nop
900059a4:	2000329c 	.word	0x2000329c
900059a8:	e000ed04 	.word	0xe000ed04

900059ac <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
900059ac:	b580      	push	{r7, lr}
900059ae:	b088      	sub	sp, #32
900059b0:	af00      	add	r7, sp, #0
900059b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
900059b4:	687b      	ldr	r3, [r7, #4]
900059b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900059b8:	f3ef 8305 	mrs	r3, IPSR
900059bc:	617b      	str	r3, [r7, #20]
  return(result);
900059be:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
900059c0:	2b00      	cmp	r3, #0
900059c2:	d10f      	bne.n	900059e4 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
900059c4:	f3ef 8310 	mrs	r3, PRIMASK
900059c8:	613b      	str	r3, [r7, #16]
  return(result);
900059ca:	693b      	ldr	r3, [r7, #16]
900059cc:	2b00      	cmp	r3, #0
900059ce:	d105      	bne.n	900059dc <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
900059d0:	f3ef 8311 	mrs	r3, BASEPRI
900059d4:	60fb      	str	r3, [r7, #12]
  return(result);
900059d6:	68fb      	ldr	r3, [r7, #12]
900059d8:	2b00      	cmp	r3, #0
900059da:	d007      	beq.n	900059ec <osSemaphoreDelete+0x40>
900059dc:	4b0d      	ldr	r3, [pc, #52]	; (90005a14 <osSemaphoreDelete+0x68>)
900059de:	681b      	ldr	r3, [r3, #0]
900059e0:	2b02      	cmp	r3, #2
900059e2:	d103      	bne.n	900059ec <osSemaphoreDelete+0x40>
    stat = osErrorISR;
900059e4:	f06f 0305 	mvn.w	r3, #5
900059e8:	61fb      	str	r3, [r7, #28]
900059ea:	e00e      	b.n	90005a0a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
900059ec:	69bb      	ldr	r3, [r7, #24]
900059ee:	2b00      	cmp	r3, #0
900059f0:	d103      	bne.n	900059fa <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
900059f2:	f06f 0303 	mvn.w	r3, #3
900059f6:	61fb      	str	r3, [r7, #28]
900059f8:	e007      	b.n	90005a0a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
900059fa:	69b8      	ldr	r0, [r7, #24]
900059fc:	f001 fbba 	bl	90007174 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
90005a00:	2300      	movs	r3, #0
90005a02:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
90005a04:	69b8      	ldr	r0, [r7, #24]
90005a06:	f001 fa3d 	bl	90006e84 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
90005a0a:	69fb      	ldr	r3, [r7, #28]
}
90005a0c:	4618      	mov	r0, r3
90005a0e:	3720      	adds	r7, #32
90005a10:	46bd      	mov	sp, r7
90005a12:	bd80      	pop	{r7, pc}
90005a14:	2000329c 	.word	0x2000329c

90005a18 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
90005a18:	b580      	push	{r7, lr}
90005a1a:	b08c      	sub	sp, #48	; 0x30
90005a1c:	af02      	add	r7, sp, #8
90005a1e:	60f8      	str	r0, [r7, #12]
90005a20:	60b9      	str	r1, [r7, #8]
90005a22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
90005a24:	2300      	movs	r3, #0
90005a26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005a28:	f3ef 8305 	mrs	r3, IPSR
90005a2c:	61bb      	str	r3, [r7, #24]
  return(result);
90005a2e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
90005a30:	2b00      	cmp	r3, #0
90005a32:	d16f      	bne.n	90005b14 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005a34:	f3ef 8310 	mrs	r3, PRIMASK
90005a38:	617b      	str	r3, [r7, #20]
  return(result);
90005a3a:	697b      	ldr	r3, [r7, #20]
90005a3c:	2b00      	cmp	r3, #0
90005a3e:	d105      	bne.n	90005a4c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90005a40:	f3ef 8311 	mrs	r3, BASEPRI
90005a44:	613b      	str	r3, [r7, #16]
  return(result);
90005a46:	693b      	ldr	r3, [r7, #16]
90005a48:	2b00      	cmp	r3, #0
90005a4a:	d003      	beq.n	90005a54 <osMessageQueueNew+0x3c>
90005a4c:	4b34      	ldr	r3, [pc, #208]	; (90005b20 <osMessageQueueNew+0x108>)
90005a4e:	681b      	ldr	r3, [r3, #0]
90005a50:	2b02      	cmp	r3, #2
90005a52:	d05f      	beq.n	90005b14 <osMessageQueueNew+0xfc>
90005a54:	68fb      	ldr	r3, [r7, #12]
90005a56:	2b00      	cmp	r3, #0
90005a58:	d05c      	beq.n	90005b14 <osMessageQueueNew+0xfc>
90005a5a:	68bb      	ldr	r3, [r7, #8]
90005a5c:	2b00      	cmp	r3, #0
90005a5e:	d059      	beq.n	90005b14 <osMessageQueueNew+0xfc>
    mem = -1;
90005a60:	f04f 33ff 	mov.w	r3, #4294967295
90005a64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
90005a66:	687b      	ldr	r3, [r7, #4]
90005a68:	2b00      	cmp	r3, #0
90005a6a:	d029      	beq.n	90005ac0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
90005a6c:	687b      	ldr	r3, [r7, #4]
90005a6e:	689b      	ldr	r3, [r3, #8]
90005a70:	2b00      	cmp	r3, #0
90005a72:	d012      	beq.n	90005a9a <osMessageQueueNew+0x82>
90005a74:	687b      	ldr	r3, [r7, #4]
90005a76:	68db      	ldr	r3, [r3, #12]
90005a78:	2b4f      	cmp	r3, #79	; 0x4f
90005a7a:	d90e      	bls.n	90005a9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
90005a7c:	687b      	ldr	r3, [r7, #4]
90005a7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
90005a80:	2b00      	cmp	r3, #0
90005a82:	d00a      	beq.n	90005a9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
90005a84:	687b      	ldr	r3, [r7, #4]
90005a86:	695a      	ldr	r2, [r3, #20]
90005a88:	68fb      	ldr	r3, [r7, #12]
90005a8a:	68b9      	ldr	r1, [r7, #8]
90005a8c:	fb01 f303 	mul.w	r3, r1, r3
90005a90:	429a      	cmp	r2, r3
90005a92:	d302      	bcc.n	90005a9a <osMessageQueueNew+0x82>
        mem = 1;
90005a94:	2301      	movs	r3, #1
90005a96:	623b      	str	r3, [r7, #32]
90005a98:	e014      	b.n	90005ac4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
90005a9a:	687b      	ldr	r3, [r7, #4]
90005a9c:	689b      	ldr	r3, [r3, #8]
90005a9e:	2b00      	cmp	r3, #0
90005aa0:	d110      	bne.n	90005ac4 <osMessageQueueNew+0xac>
90005aa2:	687b      	ldr	r3, [r7, #4]
90005aa4:	68db      	ldr	r3, [r3, #12]
90005aa6:	2b00      	cmp	r3, #0
90005aa8:	d10c      	bne.n	90005ac4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
90005aaa:	687b      	ldr	r3, [r7, #4]
90005aac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
90005aae:	2b00      	cmp	r3, #0
90005ab0:	d108      	bne.n	90005ac4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
90005ab2:	687b      	ldr	r3, [r7, #4]
90005ab4:	695b      	ldr	r3, [r3, #20]
90005ab6:	2b00      	cmp	r3, #0
90005ab8:	d104      	bne.n	90005ac4 <osMessageQueueNew+0xac>
          mem = 0;
90005aba:	2300      	movs	r3, #0
90005abc:	623b      	str	r3, [r7, #32]
90005abe:	e001      	b.n	90005ac4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
90005ac0:	2300      	movs	r3, #0
90005ac2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
90005ac4:	6a3b      	ldr	r3, [r7, #32]
90005ac6:	2b01      	cmp	r3, #1
90005ac8:	d10b      	bne.n	90005ae2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
90005aca:	687b      	ldr	r3, [r7, #4]
90005acc:	691a      	ldr	r2, [r3, #16]
90005ace:	687b      	ldr	r3, [r7, #4]
90005ad0:	689b      	ldr	r3, [r3, #8]
90005ad2:	2100      	movs	r1, #0
90005ad4:	9100      	str	r1, [sp, #0]
90005ad6:	68b9      	ldr	r1, [r7, #8]
90005ad8:	68f8      	ldr	r0, [r7, #12]
90005ada:	f000 fac3 	bl	90006064 <xQueueGenericCreateStatic>
90005ade:	6278      	str	r0, [r7, #36]	; 0x24
90005ae0:	e008      	b.n	90005af4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
90005ae2:	6a3b      	ldr	r3, [r7, #32]
90005ae4:	2b00      	cmp	r3, #0
90005ae6:	d105      	bne.n	90005af4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
90005ae8:	2200      	movs	r2, #0
90005aea:	68b9      	ldr	r1, [r7, #8]
90005aec:	68f8      	ldr	r0, [r7, #12]
90005aee:	f000 fb3b 	bl	90006168 <xQueueGenericCreate>
90005af2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
90005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005af6:	2b00      	cmp	r3, #0
90005af8:	d00c      	beq.n	90005b14 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
90005afa:	687b      	ldr	r3, [r7, #4]
90005afc:	2b00      	cmp	r3, #0
90005afe:	d003      	beq.n	90005b08 <osMessageQueueNew+0xf0>
        name = attr->name;
90005b00:	687b      	ldr	r3, [r7, #4]
90005b02:	681b      	ldr	r3, [r3, #0]
90005b04:	61fb      	str	r3, [r7, #28]
90005b06:	e001      	b.n	90005b0c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
90005b08:	2300      	movs	r3, #0
90005b0a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
90005b0c:	69f9      	ldr	r1, [r7, #28]
90005b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
90005b10:	f001 fb06 	bl	90007120 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
90005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
90005b16:	4618      	mov	r0, r3
90005b18:	3728      	adds	r7, #40	; 0x28
90005b1a:	46bd      	mov	sp, r7
90005b1c:	bd80      	pop	{r7, pc}
90005b1e:	bf00      	nop
90005b20:	2000329c 	.word	0x2000329c

90005b24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
90005b24:	b580      	push	{r7, lr}
90005b26:	b08a      	sub	sp, #40	; 0x28
90005b28:	af00      	add	r7, sp, #0
90005b2a:	60f8      	str	r0, [r7, #12]
90005b2c:	60b9      	str	r1, [r7, #8]
90005b2e:	603b      	str	r3, [r7, #0]
90005b30:	4613      	mov	r3, r2
90005b32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
90005b34:	68fb      	ldr	r3, [r7, #12]
90005b36:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
90005b38:	2300      	movs	r3, #0
90005b3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005b3c:	f3ef 8305 	mrs	r3, IPSR
90005b40:	61fb      	str	r3, [r7, #28]
  return(result);
90005b42:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
90005b44:	2b00      	cmp	r3, #0
90005b46:	d10f      	bne.n	90005b68 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005b48:	f3ef 8310 	mrs	r3, PRIMASK
90005b4c:	61bb      	str	r3, [r7, #24]
  return(result);
90005b4e:	69bb      	ldr	r3, [r7, #24]
90005b50:	2b00      	cmp	r3, #0
90005b52:	d105      	bne.n	90005b60 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90005b54:	f3ef 8311 	mrs	r3, BASEPRI
90005b58:	617b      	str	r3, [r7, #20]
  return(result);
90005b5a:	697b      	ldr	r3, [r7, #20]
90005b5c:	2b00      	cmp	r3, #0
90005b5e:	d02c      	beq.n	90005bba <osMessageQueuePut+0x96>
90005b60:	4b28      	ldr	r3, [pc, #160]	; (90005c04 <osMessageQueuePut+0xe0>)
90005b62:	681b      	ldr	r3, [r3, #0]
90005b64:	2b02      	cmp	r3, #2
90005b66:	d128      	bne.n	90005bba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005b68:	6a3b      	ldr	r3, [r7, #32]
90005b6a:	2b00      	cmp	r3, #0
90005b6c:	d005      	beq.n	90005b7a <osMessageQueuePut+0x56>
90005b6e:	68bb      	ldr	r3, [r7, #8]
90005b70:	2b00      	cmp	r3, #0
90005b72:	d002      	beq.n	90005b7a <osMessageQueuePut+0x56>
90005b74:	683b      	ldr	r3, [r7, #0]
90005b76:	2b00      	cmp	r3, #0
90005b78:	d003      	beq.n	90005b82 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
90005b7a:	f06f 0303 	mvn.w	r3, #3
90005b7e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005b80:	e039      	b.n	90005bf6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
90005b82:	2300      	movs	r3, #0
90005b84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
90005b86:	f107 0210 	add.w	r2, r7, #16
90005b8a:	2300      	movs	r3, #0
90005b8c:	68b9      	ldr	r1, [r7, #8]
90005b8e:	6a38      	ldr	r0, [r7, #32]
90005b90:	f000 fd82 	bl	90006698 <xQueueGenericSendFromISR>
90005b94:	4603      	mov	r3, r0
90005b96:	2b01      	cmp	r3, #1
90005b98:	d003      	beq.n	90005ba2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
90005b9a:	f06f 0302 	mvn.w	r3, #2
90005b9e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005ba0:	e029      	b.n	90005bf6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
90005ba2:	693b      	ldr	r3, [r7, #16]
90005ba4:	2b00      	cmp	r3, #0
90005ba6:	d026      	beq.n	90005bf6 <osMessageQueuePut+0xd2>
90005ba8:	4b17      	ldr	r3, [pc, #92]	; (90005c08 <osMessageQueuePut+0xe4>)
90005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005bae:	601a      	str	r2, [r3, #0]
90005bb0:	f3bf 8f4f 	dsb	sy
90005bb4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005bb8:	e01d      	b.n	90005bf6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
90005bba:	6a3b      	ldr	r3, [r7, #32]
90005bbc:	2b00      	cmp	r3, #0
90005bbe:	d002      	beq.n	90005bc6 <osMessageQueuePut+0xa2>
90005bc0:	68bb      	ldr	r3, [r7, #8]
90005bc2:	2b00      	cmp	r3, #0
90005bc4:	d103      	bne.n	90005bce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
90005bc6:	f06f 0303 	mvn.w	r3, #3
90005bca:	627b      	str	r3, [r7, #36]	; 0x24
90005bcc:	e014      	b.n	90005bf8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
90005bce:	2300      	movs	r3, #0
90005bd0:	683a      	ldr	r2, [r7, #0]
90005bd2:	68b9      	ldr	r1, [r7, #8]
90005bd4:	6a38      	ldr	r0, [r7, #32]
90005bd6:	f000 fc59 	bl	9000648c <xQueueGenericSend>
90005bda:	4603      	mov	r3, r0
90005bdc:	2b01      	cmp	r3, #1
90005bde:	d00b      	beq.n	90005bf8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
90005be0:	683b      	ldr	r3, [r7, #0]
90005be2:	2b00      	cmp	r3, #0
90005be4:	d003      	beq.n	90005bee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
90005be6:	f06f 0301 	mvn.w	r3, #1
90005bea:	627b      	str	r3, [r7, #36]	; 0x24
90005bec:	e004      	b.n	90005bf8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
90005bee:	f06f 0302 	mvn.w	r3, #2
90005bf2:	627b      	str	r3, [r7, #36]	; 0x24
90005bf4:	e000      	b.n	90005bf8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005bf6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
90005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
90005bfa:	4618      	mov	r0, r3
90005bfc:	3728      	adds	r7, #40	; 0x28
90005bfe:	46bd      	mov	sp, r7
90005c00:	bd80      	pop	{r7, pc}
90005c02:	bf00      	nop
90005c04:	2000329c 	.word	0x2000329c
90005c08:	e000ed04 	.word	0xe000ed04

90005c0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
90005c0c:	b580      	push	{r7, lr}
90005c0e:	b08a      	sub	sp, #40	; 0x28
90005c10:	af00      	add	r7, sp, #0
90005c12:	60f8      	str	r0, [r7, #12]
90005c14:	60b9      	str	r1, [r7, #8]
90005c16:	607a      	str	r2, [r7, #4]
90005c18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
90005c1a:	68fb      	ldr	r3, [r7, #12]
90005c1c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
90005c1e:	2300      	movs	r3, #0
90005c20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005c22:	f3ef 8305 	mrs	r3, IPSR
90005c26:	61fb      	str	r3, [r7, #28]
  return(result);
90005c28:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
90005c2a:	2b00      	cmp	r3, #0
90005c2c:	d10f      	bne.n	90005c4e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005c2e:	f3ef 8310 	mrs	r3, PRIMASK
90005c32:	61bb      	str	r3, [r7, #24]
  return(result);
90005c34:	69bb      	ldr	r3, [r7, #24]
90005c36:	2b00      	cmp	r3, #0
90005c38:	d105      	bne.n	90005c46 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90005c3a:	f3ef 8311 	mrs	r3, BASEPRI
90005c3e:	617b      	str	r3, [r7, #20]
  return(result);
90005c40:	697b      	ldr	r3, [r7, #20]
90005c42:	2b00      	cmp	r3, #0
90005c44:	d02c      	beq.n	90005ca0 <osMessageQueueGet+0x94>
90005c46:	4b28      	ldr	r3, [pc, #160]	; (90005ce8 <osMessageQueueGet+0xdc>)
90005c48:	681b      	ldr	r3, [r3, #0]
90005c4a:	2b02      	cmp	r3, #2
90005c4c:	d128      	bne.n	90005ca0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005c4e:	6a3b      	ldr	r3, [r7, #32]
90005c50:	2b00      	cmp	r3, #0
90005c52:	d005      	beq.n	90005c60 <osMessageQueueGet+0x54>
90005c54:	68bb      	ldr	r3, [r7, #8]
90005c56:	2b00      	cmp	r3, #0
90005c58:	d002      	beq.n	90005c60 <osMessageQueueGet+0x54>
90005c5a:	683b      	ldr	r3, [r7, #0]
90005c5c:	2b00      	cmp	r3, #0
90005c5e:	d003      	beq.n	90005c68 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
90005c60:	f06f 0303 	mvn.w	r3, #3
90005c64:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005c66:	e038      	b.n	90005cda <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
90005c68:	2300      	movs	r3, #0
90005c6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
90005c6c:	f107 0310 	add.w	r3, r7, #16
90005c70:	461a      	mov	r2, r3
90005c72:	68b9      	ldr	r1, [r7, #8]
90005c74:	6a38      	ldr	r0, [r7, #32]
90005c76:	f001 f83f 	bl	90006cf8 <xQueueReceiveFromISR>
90005c7a:	4603      	mov	r3, r0
90005c7c:	2b01      	cmp	r3, #1
90005c7e:	d003      	beq.n	90005c88 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
90005c80:	f06f 0302 	mvn.w	r3, #2
90005c84:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005c86:	e028      	b.n	90005cda <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
90005c88:	693b      	ldr	r3, [r7, #16]
90005c8a:	2b00      	cmp	r3, #0
90005c8c:	d025      	beq.n	90005cda <osMessageQueueGet+0xce>
90005c8e:	4b17      	ldr	r3, [pc, #92]	; (90005cec <osMessageQueueGet+0xe0>)
90005c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005c94:	601a      	str	r2, [r3, #0]
90005c96:	f3bf 8f4f 	dsb	sy
90005c9a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005c9e:	e01c      	b.n	90005cda <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
90005ca0:	6a3b      	ldr	r3, [r7, #32]
90005ca2:	2b00      	cmp	r3, #0
90005ca4:	d002      	beq.n	90005cac <osMessageQueueGet+0xa0>
90005ca6:	68bb      	ldr	r3, [r7, #8]
90005ca8:	2b00      	cmp	r3, #0
90005caa:	d103      	bne.n	90005cb4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
90005cac:	f06f 0303 	mvn.w	r3, #3
90005cb0:	627b      	str	r3, [r7, #36]	; 0x24
90005cb2:	e013      	b.n	90005cdc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
90005cb4:	683a      	ldr	r2, [r7, #0]
90005cb6:	68b9      	ldr	r1, [r7, #8]
90005cb8:	6a38      	ldr	r0, [r7, #32]
90005cba:	f000 fe23 	bl	90006904 <xQueueReceive>
90005cbe:	4603      	mov	r3, r0
90005cc0:	2b01      	cmp	r3, #1
90005cc2:	d00b      	beq.n	90005cdc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
90005cc4:	683b      	ldr	r3, [r7, #0]
90005cc6:	2b00      	cmp	r3, #0
90005cc8:	d003      	beq.n	90005cd2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
90005cca:	f06f 0301 	mvn.w	r3, #1
90005cce:	627b      	str	r3, [r7, #36]	; 0x24
90005cd0:	e004      	b.n	90005cdc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
90005cd2:	f06f 0302 	mvn.w	r3, #2
90005cd6:	627b      	str	r3, [r7, #36]	; 0x24
90005cd8:	e000      	b.n	90005cdc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90005cda:	bf00      	nop
        }
      }
    }
  }

  return (stat);
90005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
90005cde:	4618      	mov	r0, r3
90005ce0:	3728      	adds	r7, #40	; 0x28
90005ce2:	46bd      	mov	sp, r7
90005ce4:	bd80      	pop	{r7, pc}
90005ce6:	bf00      	nop
90005ce8:	2000329c 	.word	0x2000329c
90005cec:	e000ed04 	.word	0xe000ed04

90005cf0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
90005cf0:	b580      	push	{r7, lr}
90005cf2:	b088      	sub	sp, #32
90005cf4:	af00      	add	r7, sp, #0
90005cf6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
90005cf8:	687b      	ldr	r3, [r7, #4]
90005cfa:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
90005cfc:	69bb      	ldr	r3, [r7, #24]
90005cfe:	2b00      	cmp	r3, #0
90005d00:	d102      	bne.n	90005d08 <osMessageQueueGetCount+0x18>
    count = 0U;
90005d02:	2300      	movs	r3, #0
90005d04:	61fb      	str	r3, [r7, #28]
90005d06:	e01e      	b.n	90005d46 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005d08:	f3ef 8305 	mrs	r3, IPSR
90005d0c:	617b      	str	r3, [r7, #20]
  return(result);
90005d0e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
90005d10:	2b00      	cmp	r3, #0
90005d12:	d10f      	bne.n	90005d34 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005d14:	f3ef 8310 	mrs	r3, PRIMASK
90005d18:	613b      	str	r3, [r7, #16]
  return(result);
90005d1a:	693b      	ldr	r3, [r7, #16]
90005d1c:	2b00      	cmp	r3, #0
90005d1e:	d105      	bne.n	90005d2c <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90005d20:	f3ef 8311 	mrs	r3, BASEPRI
90005d24:	60fb      	str	r3, [r7, #12]
  return(result);
90005d26:	68fb      	ldr	r3, [r7, #12]
90005d28:	2b00      	cmp	r3, #0
90005d2a:	d008      	beq.n	90005d3e <osMessageQueueGetCount+0x4e>
90005d2c:	4b08      	ldr	r3, [pc, #32]	; (90005d50 <osMessageQueueGetCount+0x60>)
90005d2e:	681b      	ldr	r3, [r3, #0]
90005d30:	2b02      	cmp	r3, #2
90005d32:	d104      	bne.n	90005d3e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
90005d34:	69b8      	ldr	r0, [r7, #24]
90005d36:	f001 f885 	bl	90006e44 <uxQueueMessagesWaitingFromISR>
90005d3a:	61f8      	str	r0, [r7, #28]
90005d3c:	e003      	b.n	90005d46 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
90005d3e:	69b8      	ldr	r0, [r7, #24]
90005d40:	f001 f860 	bl	90006e04 <uxQueueMessagesWaiting>
90005d44:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
90005d46:	69fb      	ldr	r3, [r7, #28]
}
90005d48:	4618      	mov	r0, r3
90005d4a:	3720      	adds	r7, #32
90005d4c:	46bd      	mov	sp, r7
90005d4e:	bd80      	pop	{r7, pc}
90005d50:	2000329c 	.word	0x2000329c

90005d54 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
90005d54:	b580      	push	{r7, lr}
90005d56:	b088      	sub	sp, #32
90005d58:	af00      	add	r7, sp, #0
90005d5a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
90005d5c:	687b      	ldr	r3, [r7, #4]
90005d5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005d60:	f3ef 8305 	mrs	r3, IPSR
90005d64:	617b      	str	r3, [r7, #20]
  return(result);
90005d66:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
90005d68:	2b00      	cmp	r3, #0
90005d6a:	d10f      	bne.n	90005d8c <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90005d6c:	f3ef 8310 	mrs	r3, PRIMASK
90005d70:	613b      	str	r3, [r7, #16]
  return(result);
90005d72:	693b      	ldr	r3, [r7, #16]
90005d74:	2b00      	cmp	r3, #0
90005d76:	d105      	bne.n	90005d84 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90005d78:	f3ef 8311 	mrs	r3, BASEPRI
90005d7c:	60fb      	str	r3, [r7, #12]
  return(result);
90005d7e:	68fb      	ldr	r3, [r7, #12]
90005d80:	2b00      	cmp	r3, #0
90005d82:	d007      	beq.n	90005d94 <osMessageQueueDelete+0x40>
90005d84:	4b0d      	ldr	r3, [pc, #52]	; (90005dbc <osMessageQueueDelete+0x68>)
90005d86:	681b      	ldr	r3, [r3, #0]
90005d88:	2b02      	cmp	r3, #2
90005d8a:	d103      	bne.n	90005d94 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
90005d8c:	f06f 0305 	mvn.w	r3, #5
90005d90:	61fb      	str	r3, [r7, #28]
90005d92:	e00e      	b.n	90005db2 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
90005d94:	69bb      	ldr	r3, [r7, #24]
90005d96:	2b00      	cmp	r3, #0
90005d98:	d103      	bne.n	90005da2 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
90005d9a:	f06f 0303 	mvn.w	r3, #3
90005d9e:	61fb      	str	r3, [r7, #28]
90005da0:	e007      	b.n	90005db2 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
90005da2:	69b8      	ldr	r0, [r7, #24]
90005da4:	f001 f9e6 	bl	90007174 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
90005da8:	2300      	movs	r3, #0
90005daa:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
90005dac:	69b8      	ldr	r0, [r7, #24]
90005dae:	f001 f869 	bl	90006e84 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
90005db2:	69fb      	ldr	r3, [r7, #28]
}
90005db4:	4618      	mov	r0, r3
90005db6:	3720      	adds	r7, #32
90005db8:	46bd      	mov	sp, r7
90005dba:	bd80      	pop	{r7, pc}
90005dbc:	2000329c 	.word	0x2000329c

90005dc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
90005dc0:	b480      	push	{r7}
90005dc2:	b085      	sub	sp, #20
90005dc4:	af00      	add	r7, sp, #0
90005dc6:	60f8      	str	r0, [r7, #12]
90005dc8:	60b9      	str	r1, [r7, #8]
90005dca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
90005dcc:	68fb      	ldr	r3, [r7, #12]
90005dce:	4a07      	ldr	r2, [pc, #28]	; (90005dec <vApplicationGetIdleTaskMemory+0x2c>)
90005dd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
90005dd2:	68bb      	ldr	r3, [r7, #8]
90005dd4:	4a06      	ldr	r2, [pc, #24]	; (90005df0 <vApplicationGetIdleTaskMemory+0x30>)
90005dd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
90005dd8:	687b      	ldr	r3, [r7, #4]
90005dda:	2280      	movs	r2, #128	; 0x80
90005ddc:	601a      	str	r2, [r3, #0]
}
90005dde:	bf00      	nop
90005de0:	3714      	adds	r7, #20
90005de2:	46bd      	mov	sp, r7
90005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
90005de8:	4770      	bx	lr
90005dea:	bf00      	nop
90005dec:	200032a0 	.word	0x200032a0
90005df0:	2000335c 	.word	0x2000335c

90005df4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
90005df4:	b480      	push	{r7}
90005df6:	b085      	sub	sp, #20
90005df8:	af00      	add	r7, sp, #0
90005dfa:	60f8      	str	r0, [r7, #12]
90005dfc:	60b9      	str	r1, [r7, #8]
90005dfe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
90005e00:	68fb      	ldr	r3, [r7, #12]
90005e02:	4a07      	ldr	r2, [pc, #28]	; (90005e20 <vApplicationGetTimerTaskMemory+0x2c>)
90005e04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
90005e06:	68bb      	ldr	r3, [r7, #8]
90005e08:	4a06      	ldr	r2, [pc, #24]	; (90005e24 <vApplicationGetTimerTaskMemory+0x30>)
90005e0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
90005e0c:	687b      	ldr	r3, [r7, #4]
90005e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
90005e12:	601a      	str	r2, [r3, #0]
}
90005e14:	bf00      	nop
90005e16:	3714      	adds	r7, #20
90005e18:	46bd      	mov	sp, r7
90005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005e1e:	4770      	bx	lr
90005e20:	2000355c 	.word	0x2000355c
90005e24:	20003618 	.word	0x20003618

90005e28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
90005e28:	b480      	push	{r7}
90005e2a:	b083      	sub	sp, #12
90005e2c:	af00      	add	r7, sp, #0
90005e2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90005e30:	687b      	ldr	r3, [r7, #4]
90005e32:	f103 0208 	add.w	r2, r3, #8
90005e36:	687b      	ldr	r3, [r7, #4]
90005e38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
90005e3a:	687b      	ldr	r3, [r7, #4]
90005e3c:	f04f 32ff 	mov.w	r2, #4294967295
90005e40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90005e42:	687b      	ldr	r3, [r7, #4]
90005e44:	f103 0208 	add.w	r2, r3, #8
90005e48:	687b      	ldr	r3, [r7, #4]
90005e4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90005e4c:	687b      	ldr	r3, [r7, #4]
90005e4e:	f103 0208 	add.w	r2, r3, #8
90005e52:	687b      	ldr	r3, [r7, #4]
90005e54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
90005e56:	687b      	ldr	r3, [r7, #4]
90005e58:	2200      	movs	r2, #0
90005e5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
90005e5c:	bf00      	nop
90005e5e:	370c      	adds	r7, #12
90005e60:	46bd      	mov	sp, r7
90005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
90005e66:	4770      	bx	lr

90005e68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
90005e68:	b480      	push	{r7}
90005e6a:	b083      	sub	sp, #12
90005e6c:	af00      	add	r7, sp, #0
90005e6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
90005e70:	687b      	ldr	r3, [r7, #4]
90005e72:	2200      	movs	r2, #0
90005e74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
90005e76:	bf00      	nop
90005e78:	370c      	adds	r7, #12
90005e7a:	46bd      	mov	sp, r7
90005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
90005e80:	4770      	bx	lr

90005e82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
90005e82:	b480      	push	{r7}
90005e84:	b085      	sub	sp, #20
90005e86:	af00      	add	r7, sp, #0
90005e88:	6078      	str	r0, [r7, #4]
90005e8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
90005e8c:	687b      	ldr	r3, [r7, #4]
90005e8e:	685b      	ldr	r3, [r3, #4]
90005e90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
90005e92:	683b      	ldr	r3, [r7, #0]
90005e94:	68fa      	ldr	r2, [r7, #12]
90005e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
90005e98:	68fb      	ldr	r3, [r7, #12]
90005e9a:	689a      	ldr	r2, [r3, #8]
90005e9c:	683b      	ldr	r3, [r7, #0]
90005e9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
90005ea0:	68fb      	ldr	r3, [r7, #12]
90005ea2:	689b      	ldr	r3, [r3, #8]
90005ea4:	683a      	ldr	r2, [r7, #0]
90005ea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
90005ea8:	68fb      	ldr	r3, [r7, #12]
90005eaa:	683a      	ldr	r2, [r7, #0]
90005eac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
90005eae:	683b      	ldr	r3, [r7, #0]
90005eb0:	687a      	ldr	r2, [r7, #4]
90005eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
90005eb4:	687b      	ldr	r3, [r7, #4]
90005eb6:	681b      	ldr	r3, [r3, #0]
90005eb8:	1c5a      	adds	r2, r3, #1
90005eba:	687b      	ldr	r3, [r7, #4]
90005ebc:	601a      	str	r2, [r3, #0]
}
90005ebe:	bf00      	nop
90005ec0:	3714      	adds	r7, #20
90005ec2:	46bd      	mov	sp, r7
90005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
90005ec8:	4770      	bx	lr

90005eca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
90005eca:	b480      	push	{r7}
90005ecc:	b085      	sub	sp, #20
90005ece:	af00      	add	r7, sp, #0
90005ed0:	6078      	str	r0, [r7, #4]
90005ed2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
90005ed4:	683b      	ldr	r3, [r7, #0]
90005ed6:	681b      	ldr	r3, [r3, #0]
90005ed8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
90005eda:	68bb      	ldr	r3, [r7, #8]
90005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
90005ee0:	d103      	bne.n	90005eea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
90005ee2:	687b      	ldr	r3, [r7, #4]
90005ee4:	691b      	ldr	r3, [r3, #16]
90005ee6:	60fb      	str	r3, [r7, #12]
90005ee8:	e00c      	b.n	90005f04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
90005eea:	687b      	ldr	r3, [r7, #4]
90005eec:	3308      	adds	r3, #8
90005eee:	60fb      	str	r3, [r7, #12]
90005ef0:	e002      	b.n	90005ef8 <vListInsert+0x2e>
90005ef2:	68fb      	ldr	r3, [r7, #12]
90005ef4:	685b      	ldr	r3, [r3, #4]
90005ef6:	60fb      	str	r3, [r7, #12]
90005ef8:	68fb      	ldr	r3, [r7, #12]
90005efa:	685b      	ldr	r3, [r3, #4]
90005efc:	681b      	ldr	r3, [r3, #0]
90005efe:	68ba      	ldr	r2, [r7, #8]
90005f00:	429a      	cmp	r2, r3
90005f02:	d2f6      	bcs.n	90005ef2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
90005f04:	68fb      	ldr	r3, [r7, #12]
90005f06:	685a      	ldr	r2, [r3, #4]
90005f08:	683b      	ldr	r3, [r7, #0]
90005f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
90005f0c:	683b      	ldr	r3, [r7, #0]
90005f0e:	685b      	ldr	r3, [r3, #4]
90005f10:	683a      	ldr	r2, [r7, #0]
90005f12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
90005f14:	683b      	ldr	r3, [r7, #0]
90005f16:	68fa      	ldr	r2, [r7, #12]
90005f18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
90005f1a:	68fb      	ldr	r3, [r7, #12]
90005f1c:	683a      	ldr	r2, [r7, #0]
90005f1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
90005f20:	683b      	ldr	r3, [r7, #0]
90005f22:	687a      	ldr	r2, [r7, #4]
90005f24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
90005f26:	687b      	ldr	r3, [r7, #4]
90005f28:	681b      	ldr	r3, [r3, #0]
90005f2a:	1c5a      	adds	r2, r3, #1
90005f2c:	687b      	ldr	r3, [r7, #4]
90005f2e:	601a      	str	r2, [r3, #0]
}
90005f30:	bf00      	nop
90005f32:	3714      	adds	r7, #20
90005f34:	46bd      	mov	sp, r7
90005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
90005f3a:	4770      	bx	lr

90005f3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
90005f3c:	b480      	push	{r7}
90005f3e:	b085      	sub	sp, #20
90005f40:	af00      	add	r7, sp, #0
90005f42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
90005f44:	687b      	ldr	r3, [r7, #4]
90005f46:	691b      	ldr	r3, [r3, #16]
90005f48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
90005f4a:	687b      	ldr	r3, [r7, #4]
90005f4c:	685b      	ldr	r3, [r3, #4]
90005f4e:	687a      	ldr	r2, [r7, #4]
90005f50:	6892      	ldr	r2, [r2, #8]
90005f52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
90005f54:	687b      	ldr	r3, [r7, #4]
90005f56:	689b      	ldr	r3, [r3, #8]
90005f58:	687a      	ldr	r2, [r7, #4]
90005f5a:	6852      	ldr	r2, [r2, #4]
90005f5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
90005f5e:	68fb      	ldr	r3, [r7, #12]
90005f60:	685b      	ldr	r3, [r3, #4]
90005f62:	687a      	ldr	r2, [r7, #4]
90005f64:	429a      	cmp	r2, r3
90005f66:	d103      	bne.n	90005f70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
90005f68:	687b      	ldr	r3, [r7, #4]
90005f6a:	689a      	ldr	r2, [r3, #8]
90005f6c:	68fb      	ldr	r3, [r7, #12]
90005f6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
90005f70:	687b      	ldr	r3, [r7, #4]
90005f72:	2200      	movs	r2, #0
90005f74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
90005f76:	68fb      	ldr	r3, [r7, #12]
90005f78:	681b      	ldr	r3, [r3, #0]
90005f7a:	1e5a      	subs	r2, r3, #1
90005f7c:	68fb      	ldr	r3, [r7, #12]
90005f7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
90005f80:	68fb      	ldr	r3, [r7, #12]
90005f82:	681b      	ldr	r3, [r3, #0]
}
90005f84:	4618      	mov	r0, r3
90005f86:	3714      	adds	r7, #20
90005f88:	46bd      	mov	sp, r7
90005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005f8e:	4770      	bx	lr

90005f90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
90005f90:	b580      	push	{r7, lr}
90005f92:	b084      	sub	sp, #16
90005f94:	af00      	add	r7, sp, #0
90005f96:	6078      	str	r0, [r7, #4]
90005f98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
90005f9a:	687b      	ldr	r3, [r7, #4]
90005f9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
90005f9e:	68fb      	ldr	r3, [r7, #12]
90005fa0:	2b00      	cmp	r3, #0
90005fa2:	d10c      	bne.n	90005fbe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
90005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
90005fa8:	b672      	cpsid	i
90005faa:	f383 8811 	msr	BASEPRI, r3
90005fae:	f3bf 8f6f 	isb	sy
90005fb2:	f3bf 8f4f 	dsb	sy
90005fb6:	b662      	cpsie	i
90005fb8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
90005fba:	bf00      	nop
90005fbc:	e7fe      	b.n	90005fbc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
90005fbe:	f002 fe0d 	bl	90008bdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90005fc2:	68fb      	ldr	r3, [r7, #12]
90005fc4:	681a      	ldr	r2, [r3, #0]
90005fc6:	68fb      	ldr	r3, [r7, #12]
90005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005fca:	68f9      	ldr	r1, [r7, #12]
90005fcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
90005fce:	fb01 f303 	mul.w	r3, r1, r3
90005fd2:	441a      	add	r2, r3
90005fd4:	68fb      	ldr	r3, [r7, #12]
90005fd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
90005fd8:	68fb      	ldr	r3, [r7, #12]
90005fda:	2200      	movs	r2, #0
90005fdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
90005fde:	68fb      	ldr	r3, [r7, #12]
90005fe0:	681a      	ldr	r2, [r3, #0]
90005fe2:	68fb      	ldr	r3, [r7, #12]
90005fe4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90005fe6:	68fb      	ldr	r3, [r7, #12]
90005fe8:	681a      	ldr	r2, [r3, #0]
90005fea:	68fb      	ldr	r3, [r7, #12]
90005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005fee:	3b01      	subs	r3, #1
90005ff0:	68f9      	ldr	r1, [r7, #12]
90005ff2:	6c09      	ldr	r1, [r1, #64]	; 0x40
90005ff4:	fb01 f303 	mul.w	r3, r1, r3
90005ff8:	441a      	add	r2, r3
90005ffa:	68fb      	ldr	r3, [r7, #12]
90005ffc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
90005ffe:	68fb      	ldr	r3, [r7, #12]
90006000:	22ff      	movs	r2, #255	; 0xff
90006002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90006006:	68fb      	ldr	r3, [r7, #12]
90006008:	22ff      	movs	r2, #255	; 0xff
9000600a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
9000600e:	683b      	ldr	r3, [r7, #0]
90006010:	2b00      	cmp	r3, #0
90006012:	d114      	bne.n	9000603e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90006014:	68fb      	ldr	r3, [r7, #12]
90006016:	691b      	ldr	r3, [r3, #16]
90006018:	2b00      	cmp	r3, #0
9000601a:	d01a      	beq.n	90006052 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000601c:	68fb      	ldr	r3, [r7, #12]
9000601e:	3310      	adds	r3, #16
90006020:	4618      	mov	r0, r3
90006022:	f001 fdb5 	bl	90007b90 <xTaskRemoveFromEventList>
90006026:	4603      	mov	r3, r0
90006028:	2b00      	cmp	r3, #0
9000602a:	d012      	beq.n	90006052 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
9000602c:	4b0c      	ldr	r3, [pc, #48]	; (90006060 <xQueueGenericReset+0xd0>)
9000602e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006032:	601a      	str	r2, [r3, #0]
90006034:	f3bf 8f4f 	dsb	sy
90006038:	f3bf 8f6f 	isb	sy
9000603c:	e009      	b.n	90006052 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000603e:	68fb      	ldr	r3, [r7, #12]
90006040:	3310      	adds	r3, #16
90006042:	4618      	mov	r0, r3
90006044:	f7ff fef0 	bl	90005e28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90006048:	68fb      	ldr	r3, [r7, #12]
9000604a:	3324      	adds	r3, #36	; 0x24
9000604c:	4618      	mov	r0, r3
9000604e:	f7ff feeb 	bl	90005e28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
90006052:	f002 fdf7 	bl	90008c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
90006056:	2301      	movs	r3, #1
}
90006058:	4618      	mov	r0, r3
9000605a:	3710      	adds	r7, #16
9000605c:	46bd      	mov	sp, r7
9000605e:	bd80      	pop	{r7, pc}
90006060:	e000ed04 	.word	0xe000ed04

90006064 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
90006064:	b580      	push	{r7, lr}
90006066:	b08e      	sub	sp, #56	; 0x38
90006068:	af02      	add	r7, sp, #8
9000606a:	60f8      	str	r0, [r7, #12]
9000606c:	60b9      	str	r1, [r7, #8]
9000606e:	607a      	str	r2, [r7, #4]
90006070:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90006072:	68fb      	ldr	r3, [r7, #12]
90006074:	2b00      	cmp	r3, #0
90006076:	d10c      	bne.n	90006092 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
90006078:	f04f 0350 	mov.w	r3, #80	; 0x50
9000607c:	b672      	cpsid	i
9000607e:	f383 8811 	msr	BASEPRI, r3
90006082:	f3bf 8f6f 	isb	sy
90006086:	f3bf 8f4f 	dsb	sy
9000608a:	b662      	cpsie	i
9000608c:	62bb      	str	r3, [r7, #40]	; 0x28
}
9000608e:	bf00      	nop
90006090:	e7fe      	b.n	90006090 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
90006092:	683b      	ldr	r3, [r7, #0]
90006094:	2b00      	cmp	r3, #0
90006096:	d10c      	bne.n	900060b2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
90006098:	f04f 0350 	mov.w	r3, #80	; 0x50
9000609c:	b672      	cpsid	i
9000609e:	f383 8811 	msr	BASEPRI, r3
900060a2:	f3bf 8f6f 	isb	sy
900060a6:	f3bf 8f4f 	dsb	sy
900060aa:	b662      	cpsie	i
900060ac:	627b      	str	r3, [r7, #36]	; 0x24
}
900060ae:	bf00      	nop
900060b0:	e7fe      	b.n	900060b0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
900060b2:	687b      	ldr	r3, [r7, #4]
900060b4:	2b00      	cmp	r3, #0
900060b6:	d002      	beq.n	900060be <xQueueGenericCreateStatic+0x5a>
900060b8:	68bb      	ldr	r3, [r7, #8]
900060ba:	2b00      	cmp	r3, #0
900060bc:	d001      	beq.n	900060c2 <xQueueGenericCreateStatic+0x5e>
900060be:	2301      	movs	r3, #1
900060c0:	e000      	b.n	900060c4 <xQueueGenericCreateStatic+0x60>
900060c2:	2300      	movs	r3, #0
900060c4:	2b00      	cmp	r3, #0
900060c6:	d10c      	bne.n	900060e2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
900060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
900060cc:	b672      	cpsid	i
900060ce:	f383 8811 	msr	BASEPRI, r3
900060d2:	f3bf 8f6f 	isb	sy
900060d6:	f3bf 8f4f 	dsb	sy
900060da:	b662      	cpsie	i
900060dc:	623b      	str	r3, [r7, #32]
}
900060de:	bf00      	nop
900060e0:	e7fe      	b.n	900060e0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
900060e2:	687b      	ldr	r3, [r7, #4]
900060e4:	2b00      	cmp	r3, #0
900060e6:	d102      	bne.n	900060ee <xQueueGenericCreateStatic+0x8a>
900060e8:	68bb      	ldr	r3, [r7, #8]
900060ea:	2b00      	cmp	r3, #0
900060ec:	d101      	bne.n	900060f2 <xQueueGenericCreateStatic+0x8e>
900060ee:	2301      	movs	r3, #1
900060f0:	e000      	b.n	900060f4 <xQueueGenericCreateStatic+0x90>
900060f2:	2300      	movs	r3, #0
900060f4:	2b00      	cmp	r3, #0
900060f6:	d10c      	bne.n	90006112 <xQueueGenericCreateStatic+0xae>
	__asm volatile
900060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900060fc:	b672      	cpsid	i
900060fe:	f383 8811 	msr	BASEPRI, r3
90006102:	f3bf 8f6f 	isb	sy
90006106:	f3bf 8f4f 	dsb	sy
9000610a:	b662      	cpsie	i
9000610c:	61fb      	str	r3, [r7, #28]
}
9000610e:	bf00      	nop
90006110:	e7fe      	b.n	90006110 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
90006112:	2350      	movs	r3, #80	; 0x50
90006114:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
90006116:	697b      	ldr	r3, [r7, #20]
90006118:	2b50      	cmp	r3, #80	; 0x50
9000611a:	d00c      	beq.n	90006136 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
9000611c:	f04f 0350 	mov.w	r3, #80	; 0x50
90006120:	b672      	cpsid	i
90006122:	f383 8811 	msr	BASEPRI, r3
90006126:	f3bf 8f6f 	isb	sy
9000612a:	f3bf 8f4f 	dsb	sy
9000612e:	b662      	cpsie	i
90006130:	61bb      	str	r3, [r7, #24]
}
90006132:	bf00      	nop
90006134:	e7fe      	b.n	90006134 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90006136:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
90006138:	683b      	ldr	r3, [r7, #0]
9000613a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
9000613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000613e:	2b00      	cmp	r3, #0
90006140:	d00d      	beq.n	9000615e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
90006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006144:	2201      	movs	r2, #1
90006146:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
9000614a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
9000614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006150:	9300      	str	r3, [sp, #0]
90006152:	4613      	mov	r3, r2
90006154:	687a      	ldr	r2, [r7, #4]
90006156:	68b9      	ldr	r1, [r7, #8]
90006158:	68f8      	ldr	r0, [r7, #12]
9000615a:	f000 f847 	bl	900061ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
9000615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
90006160:	4618      	mov	r0, r3
90006162:	3730      	adds	r7, #48	; 0x30
90006164:	46bd      	mov	sp, r7
90006166:	bd80      	pop	{r7, pc}

90006168 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
90006168:	b580      	push	{r7, lr}
9000616a:	b08a      	sub	sp, #40	; 0x28
9000616c:	af02      	add	r7, sp, #8
9000616e:	60f8      	str	r0, [r7, #12]
90006170:	60b9      	str	r1, [r7, #8]
90006172:	4613      	mov	r3, r2
90006174:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90006176:	68fb      	ldr	r3, [r7, #12]
90006178:	2b00      	cmp	r3, #0
9000617a:	d10c      	bne.n	90006196 <xQueueGenericCreate+0x2e>
	__asm volatile
9000617c:	f04f 0350 	mov.w	r3, #80	; 0x50
90006180:	b672      	cpsid	i
90006182:	f383 8811 	msr	BASEPRI, r3
90006186:	f3bf 8f6f 	isb	sy
9000618a:	f3bf 8f4f 	dsb	sy
9000618e:	b662      	cpsie	i
90006190:	613b      	str	r3, [r7, #16]
}
90006192:	bf00      	nop
90006194:	e7fe      	b.n	90006194 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
90006196:	68bb      	ldr	r3, [r7, #8]
90006198:	2b00      	cmp	r3, #0
9000619a:	d102      	bne.n	900061a2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
9000619c:	2300      	movs	r3, #0
9000619e:	61fb      	str	r3, [r7, #28]
900061a0:	e004      	b.n	900061ac <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900061a2:	68fb      	ldr	r3, [r7, #12]
900061a4:	68ba      	ldr	r2, [r7, #8]
900061a6:	fb02 f303 	mul.w	r3, r2, r3
900061aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
900061ac:	69fb      	ldr	r3, [r7, #28]
900061ae:	3350      	adds	r3, #80	; 0x50
900061b0:	4618      	mov	r0, r3
900061b2:	f002 fe3f 	bl	90008e34 <pvPortMalloc>
900061b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
900061b8:	69bb      	ldr	r3, [r7, #24]
900061ba:	2b00      	cmp	r3, #0
900061bc:	d011      	beq.n	900061e2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
900061be:	69bb      	ldr	r3, [r7, #24]
900061c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900061c2:	697b      	ldr	r3, [r7, #20]
900061c4:	3350      	adds	r3, #80	; 0x50
900061c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
900061c8:	69bb      	ldr	r3, [r7, #24]
900061ca:	2200      	movs	r2, #0
900061cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
900061d0:	79fa      	ldrb	r2, [r7, #7]
900061d2:	69bb      	ldr	r3, [r7, #24]
900061d4:	9300      	str	r3, [sp, #0]
900061d6:	4613      	mov	r3, r2
900061d8:	697a      	ldr	r2, [r7, #20]
900061da:	68b9      	ldr	r1, [r7, #8]
900061dc:	68f8      	ldr	r0, [r7, #12]
900061de:	f000 f805 	bl	900061ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
900061e2:	69bb      	ldr	r3, [r7, #24]
	}
900061e4:	4618      	mov	r0, r3
900061e6:	3720      	adds	r7, #32
900061e8:	46bd      	mov	sp, r7
900061ea:	bd80      	pop	{r7, pc}

900061ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
900061ec:	b580      	push	{r7, lr}
900061ee:	b084      	sub	sp, #16
900061f0:	af00      	add	r7, sp, #0
900061f2:	60f8      	str	r0, [r7, #12]
900061f4:	60b9      	str	r1, [r7, #8]
900061f6:	607a      	str	r2, [r7, #4]
900061f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
900061fa:	68bb      	ldr	r3, [r7, #8]
900061fc:	2b00      	cmp	r3, #0
900061fe:	d103      	bne.n	90006208 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
90006200:	69bb      	ldr	r3, [r7, #24]
90006202:	69ba      	ldr	r2, [r7, #24]
90006204:	601a      	str	r2, [r3, #0]
90006206:	e002      	b.n	9000620e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
90006208:	69bb      	ldr	r3, [r7, #24]
9000620a:	687a      	ldr	r2, [r7, #4]
9000620c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
9000620e:	69bb      	ldr	r3, [r7, #24]
90006210:	68fa      	ldr	r2, [r7, #12]
90006212:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
90006214:	69bb      	ldr	r3, [r7, #24]
90006216:	68ba      	ldr	r2, [r7, #8]
90006218:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
9000621a:	2101      	movs	r1, #1
9000621c:	69b8      	ldr	r0, [r7, #24]
9000621e:	f7ff feb7 	bl	90005f90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
90006222:	69bb      	ldr	r3, [r7, #24]
90006224:	78fa      	ldrb	r2, [r7, #3]
90006226:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
9000622a:	bf00      	nop
9000622c:	3710      	adds	r7, #16
9000622e:	46bd      	mov	sp, r7
90006230:	bd80      	pop	{r7, pc}

90006232 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
90006232:	b580      	push	{r7, lr}
90006234:	b082      	sub	sp, #8
90006236:	af00      	add	r7, sp, #0
90006238:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
9000623a:	687b      	ldr	r3, [r7, #4]
9000623c:	2b00      	cmp	r3, #0
9000623e:	d00e      	beq.n	9000625e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
90006240:	687b      	ldr	r3, [r7, #4]
90006242:	2200      	movs	r2, #0
90006244:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
90006246:	687b      	ldr	r3, [r7, #4]
90006248:	2200      	movs	r2, #0
9000624a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000624c:	687b      	ldr	r3, [r7, #4]
9000624e:	2200      	movs	r2, #0
90006250:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
90006252:	2300      	movs	r3, #0
90006254:	2200      	movs	r2, #0
90006256:	2100      	movs	r1, #0
90006258:	6878      	ldr	r0, [r7, #4]
9000625a:	f000 f917 	bl	9000648c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
9000625e:	bf00      	nop
90006260:	3708      	adds	r7, #8
90006262:	46bd      	mov	sp, r7
90006264:	bd80      	pop	{r7, pc}

90006266 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
90006266:	b580      	push	{r7, lr}
90006268:	b086      	sub	sp, #24
9000626a:	af00      	add	r7, sp, #0
9000626c:	4603      	mov	r3, r0
9000626e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
90006270:	2301      	movs	r3, #1
90006272:	617b      	str	r3, [r7, #20]
90006274:	2300      	movs	r3, #0
90006276:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
90006278:	79fb      	ldrb	r3, [r7, #7]
9000627a:	461a      	mov	r2, r3
9000627c:	6939      	ldr	r1, [r7, #16]
9000627e:	6978      	ldr	r0, [r7, #20]
90006280:	f7ff ff72 	bl	90006168 <xQueueGenericCreate>
90006284:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
90006286:	68f8      	ldr	r0, [r7, #12]
90006288:	f7ff ffd3 	bl	90006232 <prvInitialiseMutex>

		return xNewQueue;
9000628c:	68fb      	ldr	r3, [r7, #12]
	}
9000628e:	4618      	mov	r0, r3
90006290:	3718      	adds	r7, #24
90006292:	46bd      	mov	sp, r7
90006294:	bd80      	pop	{r7, pc}

90006296 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
90006296:	b580      	push	{r7, lr}
90006298:	b088      	sub	sp, #32
9000629a:	af02      	add	r7, sp, #8
9000629c:	4603      	mov	r3, r0
9000629e:	6039      	str	r1, [r7, #0]
900062a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
900062a2:	2301      	movs	r3, #1
900062a4:	617b      	str	r3, [r7, #20]
900062a6:	2300      	movs	r3, #0
900062a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
900062aa:	79fb      	ldrb	r3, [r7, #7]
900062ac:	9300      	str	r3, [sp, #0]
900062ae:	683b      	ldr	r3, [r7, #0]
900062b0:	2200      	movs	r2, #0
900062b2:	6939      	ldr	r1, [r7, #16]
900062b4:	6978      	ldr	r0, [r7, #20]
900062b6:	f7ff fed5 	bl	90006064 <xQueueGenericCreateStatic>
900062ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
900062bc:	68f8      	ldr	r0, [r7, #12]
900062be:	f7ff ffb8 	bl	90006232 <prvInitialiseMutex>

		return xNewQueue;
900062c2:	68fb      	ldr	r3, [r7, #12]
	}
900062c4:	4618      	mov	r0, r3
900062c6:	3718      	adds	r7, #24
900062c8:	46bd      	mov	sp, r7
900062ca:	bd80      	pop	{r7, pc}

900062cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
900062cc:	b590      	push	{r4, r7, lr}
900062ce:	b087      	sub	sp, #28
900062d0:	af00      	add	r7, sp, #0
900062d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
900062d4:	687b      	ldr	r3, [r7, #4]
900062d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
900062d8:	693b      	ldr	r3, [r7, #16]
900062da:	2b00      	cmp	r3, #0
900062dc:	d10c      	bne.n	900062f8 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
900062de:	f04f 0350 	mov.w	r3, #80	; 0x50
900062e2:	b672      	cpsid	i
900062e4:	f383 8811 	msr	BASEPRI, r3
900062e8:	f3bf 8f6f 	isb	sy
900062ec:	f3bf 8f4f 	dsb	sy
900062f0:	b662      	cpsie	i
900062f2:	60fb      	str	r3, [r7, #12]
}
900062f4:	bf00      	nop
900062f6:	e7fe      	b.n	900062f6 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
900062f8:	693b      	ldr	r3, [r7, #16]
900062fa:	689c      	ldr	r4, [r3, #8]
900062fc:	f001 fe12 	bl	90007f24 <xTaskGetCurrentTaskHandle>
90006300:	4603      	mov	r3, r0
90006302:	429c      	cmp	r4, r3
90006304:	d111      	bne.n	9000632a <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
90006306:	693b      	ldr	r3, [r7, #16]
90006308:	68db      	ldr	r3, [r3, #12]
9000630a:	1e5a      	subs	r2, r3, #1
9000630c:	693b      	ldr	r3, [r7, #16]
9000630e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
90006310:	693b      	ldr	r3, [r7, #16]
90006312:	68db      	ldr	r3, [r3, #12]
90006314:	2b00      	cmp	r3, #0
90006316:	d105      	bne.n	90006324 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
90006318:	2300      	movs	r3, #0
9000631a:	2200      	movs	r2, #0
9000631c:	2100      	movs	r1, #0
9000631e:	6938      	ldr	r0, [r7, #16]
90006320:	f000 f8b4 	bl	9000648c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
90006324:	2301      	movs	r3, #1
90006326:	617b      	str	r3, [r7, #20]
90006328:	e001      	b.n	9000632e <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
9000632a:	2300      	movs	r3, #0
9000632c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
9000632e:	697b      	ldr	r3, [r7, #20]
	}
90006330:	4618      	mov	r0, r3
90006332:	371c      	adds	r7, #28
90006334:	46bd      	mov	sp, r7
90006336:	bd90      	pop	{r4, r7, pc}

90006338 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
90006338:	b590      	push	{r4, r7, lr}
9000633a:	b087      	sub	sp, #28
9000633c:	af00      	add	r7, sp, #0
9000633e:	6078      	str	r0, [r7, #4]
90006340:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
90006342:	687b      	ldr	r3, [r7, #4]
90006344:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
90006346:	693b      	ldr	r3, [r7, #16]
90006348:	2b00      	cmp	r3, #0
9000634a:	d10c      	bne.n	90006366 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
9000634c:	f04f 0350 	mov.w	r3, #80	; 0x50
90006350:	b672      	cpsid	i
90006352:	f383 8811 	msr	BASEPRI, r3
90006356:	f3bf 8f6f 	isb	sy
9000635a:	f3bf 8f4f 	dsb	sy
9000635e:	b662      	cpsie	i
90006360:	60fb      	str	r3, [r7, #12]
}
90006362:	bf00      	nop
90006364:	e7fe      	b.n	90006364 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
90006366:	693b      	ldr	r3, [r7, #16]
90006368:	689c      	ldr	r4, [r3, #8]
9000636a:	f001 fddb 	bl	90007f24 <xTaskGetCurrentTaskHandle>
9000636e:	4603      	mov	r3, r0
90006370:	429c      	cmp	r4, r3
90006372:	d107      	bne.n	90006384 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90006374:	693b      	ldr	r3, [r7, #16]
90006376:	68db      	ldr	r3, [r3, #12]
90006378:	1c5a      	adds	r2, r3, #1
9000637a:	693b      	ldr	r3, [r7, #16]
9000637c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
9000637e:	2301      	movs	r3, #1
90006380:	617b      	str	r3, [r7, #20]
90006382:	e00c      	b.n	9000639e <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
90006384:	6839      	ldr	r1, [r7, #0]
90006386:	6938      	ldr	r0, [r7, #16]
90006388:	f000 fba2 	bl	90006ad0 <xQueueSemaphoreTake>
9000638c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
9000638e:	697b      	ldr	r3, [r7, #20]
90006390:	2b00      	cmp	r3, #0
90006392:	d004      	beq.n	9000639e <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90006394:	693b      	ldr	r3, [r7, #16]
90006396:	68db      	ldr	r3, [r3, #12]
90006398:	1c5a      	adds	r2, r3, #1
9000639a:	693b      	ldr	r3, [r7, #16]
9000639c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
9000639e:	697b      	ldr	r3, [r7, #20]
	}
900063a0:	4618      	mov	r0, r3
900063a2:	371c      	adds	r7, #28
900063a4:	46bd      	mov	sp, r7
900063a6:	bd90      	pop	{r4, r7, pc}

900063a8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
900063a8:	b580      	push	{r7, lr}
900063aa:	b08a      	sub	sp, #40	; 0x28
900063ac:	af02      	add	r7, sp, #8
900063ae:	60f8      	str	r0, [r7, #12]
900063b0:	60b9      	str	r1, [r7, #8]
900063b2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
900063b4:	68fb      	ldr	r3, [r7, #12]
900063b6:	2b00      	cmp	r3, #0
900063b8:	d10c      	bne.n	900063d4 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
900063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
900063be:	b672      	cpsid	i
900063c0:	f383 8811 	msr	BASEPRI, r3
900063c4:	f3bf 8f6f 	isb	sy
900063c8:	f3bf 8f4f 	dsb	sy
900063cc:	b662      	cpsie	i
900063ce:	61bb      	str	r3, [r7, #24]
}
900063d0:	bf00      	nop
900063d2:	e7fe      	b.n	900063d2 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
900063d4:	68ba      	ldr	r2, [r7, #8]
900063d6:	68fb      	ldr	r3, [r7, #12]
900063d8:	429a      	cmp	r2, r3
900063da:	d90c      	bls.n	900063f6 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
900063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
900063e0:	b672      	cpsid	i
900063e2:	f383 8811 	msr	BASEPRI, r3
900063e6:	f3bf 8f6f 	isb	sy
900063ea:	f3bf 8f4f 	dsb	sy
900063ee:	b662      	cpsie	i
900063f0:	617b      	str	r3, [r7, #20]
}
900063f2:	bf00      	nop
900063f4:	e7fe      	b.n	900063f4 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
900063f6:	2302      	movs	r3, #2
900063f8:	9300      	str	r3, [sp, #0]
900063fa:	687b      	ldr	r3, [r7, #4]
900063fc:	2200      	movs	r2, #0
900063fe:	2100      	movs	r1, #0
90006400:	68f8      	ldr	r0, [r7, #12]
90006402:	f7ff fe2f 	bl	90006064 <xQueueGenericCreateStatic>
90006406:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
90006408:	69fb      	ldr	r3, [r7, #28]
9000640a:	2b00      	cmp	r3, #0
9000640c:	d002      	beq.n	90006414 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000640e:	69fb      	ldr	r3, [r7, #28]
90006410:	68ba      	ldr	r2, [r7, #8]
90006412:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
90006414:	69fb      	ldr	r3, [r7, #28]
	}
90006416:	4618      	mov	r0, r3
90006418:	3720      	adds	r7, #32
9000641a:	46bd      	mov	sp, r7
9000641c:	bd80      	pop	{r7, pc}

9000641e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
9000641e:	b580      	push	{r7, lr}
90006420:	b086      	sub	sp, #24
90006422:	af00      	add	r7, sp, #0
90006424:	6078      	str	r0, [r7, #4]
90006426:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
90006428:	687b      	ldr	r3, [r7, #4]
9000642a:	2b00      	cmp	r3, #0
9000642c:	d10c      	bne.n	90006448 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
9000642e:	f04f 0350 	mov.w	r3, #80	; 0x50
90006432:	b672      	cpsid	i
90006434:	f383 8811 	msr	BASEPRI, r3
90006438:	f3bf 8f6f 	isb	sy
9000643c:	f3bf 8f4f 	dsb	sy
90006440:	b662      	cpsie	i
90006442:	613b      	str	r3, [r7, #16]
}
90006444:	bf00      	nop
90006446:	e7fe      	b.n	90006446 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
90006448:	683a      	ldr	r2, [r7, #0]
9000644a:	687b      	ldr	r3, [r7, #4]
9000644c:	429a      	cmp	r2, r3
9000644e:	d90c      	bls.n	9000646a <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
90006450:	f04f 0350 	mov.w	r3, #80	; 0x50
90006454:	b672      	cpsid	i
90006456:	f383 8811 	msr	BASEPRI, r3
9000645a:	f3bf 8f6f 	isb	sy
9000645e:	f3bf 8f4f 	dsb	sy
90006462:	b662      	cpsie	i
90006464:	60fb      	str	r3, [r7, #12]
}
90006466:	bf00      	nop
90006468:	e7fe      	b.n	90006468 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
9000646a:	2202      	movs	r2, #2
9000646c:	2100      	movs	r1, #0
9000646e:	6878      	ldr	r0, [r7, #4]
90006470:	f7ff fe7a 	bl	90006168 <xQueueGenericCreate>
90006474:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
90006476:	697b      	ldr	r3, [r7, #20]
90006478:	2b00      	cmp	r3, #0
9000647a:	d002      	beq.n	90006482 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000647c:	697b      	ldr	r3, [r7, #20]
9000647e:	683a      	ldr	r2, [r7, #0]
90006480:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
90006482:	697b      	ldr	r3, [r7, #20]
	}
90006484:	4618      	mov	r0, r3
90006486:	3718      	adds	r7, #24
90006488:	46bd      	mov	sp, r7
9000648a:	bd80      	pop	{r7, pc}

9000648c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
9000648c:	b580      	push	{r7, lr}
9000648e:	b08e      	sub	sp, #56	; 0x38
90006490:	af00      	add	r7, sp, #0
90006492:	60f8      	str	r0, [r7, #12]
90006494:	60b9      	str	r1, [r7, #8]
90006496:	607a      	str	r2, [r7, #4]
90006498:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
9000649a:	2300      	movs	r3, #0
9000649c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
9000649e:	68fb      	ldr	r3, [r7, #12]
900064a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
900064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900064a4:	2b00      	cmp	r3, #0
900064a6:	d10c      	bne.n	900064c2 <xQueueGenericSend+0x36>
	__asm volatile
900064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
900064ac:	b672      	cpsid	i
900064ae:	f383 8811 	msr	BASEPRI, r3
900064b2:	f3bf 8f6f 	isb	sy
900064b6:	f3bf 8f4f 	dsb	sy
900064ba:	b662      	cpsie	i
900064bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
900064be:	bf00      	nop
900064c0:	e7fe      	b.n	900064c0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
900064c2:	68bb      	ldr	r3, [r7, #8]
900064c4:	2b00      	cmp	r3, #0
900064c6:	d103      	bne.n	900064d0 <xQueueGenericSend+0x44>
900064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900064cc:	2b00      	cmp	r3, #0
900064ce:	d101      	bne.n	900064d4 <xQueueGenericSend+0x48>
900064d0:	2301      	movs	r3, #1
900064d2:	e000      	b.n	900064d6 <xQueueGenericSend+0x4a>
900064d4:	2300      	movs	r3, #0
900064d6:	2b00      	cmp	r3, #0
900064d8:	d10c      	bne.n	900064f4 <xQueueGenericSend+0x68>
	__asm volatile
900064da:	f04f 0350 	mov.w	r3, #80	; 0x50
900064de:	b672      	cpsid	i
900064e0:	f383 8811 	msr	BASEPRI, r3
900064e4:	f3bf 8f6f 	isb	sy
900064e8:	f3bf 8f4f 	dsb	sy
900064ec:	b662      	cpsie	i
900064ee:	627b      	str	r3, [r7, #36]	; 0x24
}
900064f0:	bf00      	nop
900064f2:	e7fe      	b.n	900064f2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
900064f4:	683b      	ldr	r3, [r7, #0]
900064f6:	2b02      	cmp	r3, #2
900064f8:	d103      	bne.n	90006502 <xQueueGenericSend+0x76>
900064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900064fe:	2b01      	cmp	r3, #1
90006500:	d101      	bne.n	90006506 <xQueueGenericSend+0x7a>
90006502:	2301      	movs	r3, #1
90006504:	e000      	b.n	90006508 <xQueueGenericSend+0x7c>
90006506:	2300      	movs	r3, #0
90006508:	2b00      	cmp	r3, #0
9000650a:	d10c      	bne.n	90006526 <xQueueGenericSend+0x9a>
	__asm volatile
9000650c:	f04f 0350 	mov.w	r3, #80	; 0x50
90006510:	b672      	cpsid	i
90006512:	f383 8811 	msr	BASEPRI, r3
90006516:	f3bf 8f6f 	isb	sy
9000651a:	f3bf 8f4f 	dsb	sy
9000651e:	b662      	cpsie	i
90006520:	623b      	str	r3, [r7, #32]
}
90006522:	bf00      	nop
90006524:	e7fe      	b.n	90006524 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90006526:	f001 fd0d 	bl	90007f44 <xTaskGetSchedulerState>
9000652a:	4603      	mov	r3, r0
9000652c:	2b00      	cmp	r3, #0
9000652e:	d102      	bne.n	90006536 <xQueueGenericSend+0xaa>
90006530:	687b      	ldr	r3, [r7, #4]
90006532:	2b00      	cmp	r3, #0
90006534:	d101      	bne.n	9000653a <xQueueGenericSend+0xae>
90006536:	2301      	movs	r3, #1
90006538:	e000      	b.n	9000653c <xQueueGenericSend+0xb0>
9000653a:	2300      	movs	r3, #0
9000653c:	2b00      	cmp	r3, #0
9000653e:	d10c      	bne.n	9000655a <xQueueGenericSend+0xce>
	__asm volatile
90006540:	f04f 0350 	mov.w	r3, #80	; 0x50
90006544:	b672      	cpsid	i
90006546:	f383 8811 	msr	BASEPRI, r3
9000654a:	f3bf 8f6f 	isb	sy
9000654e:	f3bf 8f4f 	dsb	sy
90006552:	b662      	cpsie	i
90006554:	61fb      	str	r3, [r7, #28]
}
90006556:	bf00      	nop
90006558:	e7fe      	b.n	90006558 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
9000655a:	f002 fb3f 	bl	90008bdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006566:	429a      	cmp	r2, r3
90006568:	d302      	bcc.n	90006570 <xQueueGenericSend+0xe4>
9000656a:	683b      	ldr	r3, [r7, #0]
9000656c:	2b02      	cmp	r3, #2
9000656e:	d129      	bne.n	900065c4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90006570:	683a      	ldr	r2, [r7, #0]
90006572:	68b9      	ldr	r1, [r7, #8]
90006574:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006576:	f000 fcc2 	bl	90006efe <prvCopyDataToQueue>
9000657a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006580:	2b00      	cmp	r3, #0
90006582:	d010      	beq.n	900065a6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006586:	3324      	adds	r3, #36	; 0x24
90006588:	4618      	mov	r0, r3
9000658a:	f001 fb01 	bl	90007b90 <xTaskRemoveFromEventList>
9000658e:	4603      	mov	r3, r0
90006590:	2b00      	cmp	r3, #0
90006592:	d013      	beq.n	900065bc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
90006594:	4b3f      	ldr	r3, [pc, #252]	; (90006694 <xQueueGenericSend+0x208>)
90006596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000659a:	601a      	str	r2, [r3, #0]
9000659c:	f3bf 8f4f 	dsb	sy
900065a0:	f3bf 8f6f 	isb	sy
900065a4:	e00a      	b.n	900065bc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
900065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900065a8:	2b00      	cmp	r3, #0
900065aa:	d007      	beq.n	900065bc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
900065ac:	4b39      	ldr	r3, [pc, #228]	; (90006694 <xQueueGenericSend+0x208>)
900065ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900065b2:	601a      	str	r2, [r3, #0]
900065b4:	f3bf 8f4f 	dsb	sy
900065b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
900065bc:	f002 fb42 	bl	90008c44 <vPortExitCritical>
				return pdPASS;
900065c0:	2301      	movs	r3, #1
900065c2:	e063      	b.n	9000668c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
900065c4:	687b      	ldr	r3, [r7, #4]
900065c6:	2b00      	cmp	r3, #0
900065c8:	d103      	bne.n	900065d2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
900065ca:	f002 fb3b 	bl	90008c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
900065ce:	2300      	movs	r3, #0
900065d0:	e05c      	b.n	9000668c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
900065d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900065d4:	2b00      	cmp	r3, #0
900065d6:	d106      	bne.n	900065e6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
900065d8:	f107 0314 	add.w	r3, r7, #20
900065dc:	4618      	mov	r0, r3
900065de:	f001 fb3d 	bl	90007c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
900065e2:	2301      	movs	r3, #1
900065e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
900065e6:	f002 fb2d 	bl	90008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
900065ea:	f001 f88b 	bl	90007704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
900065ee:	f002 faf5 	bl	90008bdc <vPortEnterCritical>
900065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900065f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900065f8:	b25b      	sxtb	r3, r3
900065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
900065fe:	d103      	bne.n	90006608 <xQueueGenericSend+0x17c>
90006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006602:	2200      	movs	r2, #0
90006604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000660a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000660e:	b25b      	sxtb	r3, r3
90006610:	f1b3 3fff 	cmp.w	r3, #4294967295
90006614:	d103      	bne.n	9000661e <xQueueGenericSend+0x192>
90006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006618:	2200      	movs	r2, #0
9000661a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
9000661e:	f002 fb11 	bl	90008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90006622:	1d3a      	adds	r2, r7, #4
90006624:	f107 0314 	add.w	r3, r7, #20
90006628:	4611      	mov	r1, r2
9000662a:	4618      	mov	r0, r3
9000662c:	f001 fb2c 	bl	90007c88 <xTaskCheckForTimeOut>
90006630:	4603      	mov	r3, r0
90006632:	2b00      	cmp	r3, #0
90006634:	d124      	bne.n	90006680 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
90006636:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006638:	f000 fd59 	bl	900070ee <prvIsQueueFull>
9000663c:	4603      	mov	r3, r0
9000663e:	2b00      	cmp	r3, #0
90006640:	d018      	beq.n	90006674 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
90006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006644:	3310      	adds	r3, #16
90006646:	687a      	ldr	r2, [r7, #4]
90006648:	4611      	mov	r1, r2
9000664a:	4618      	mov	r0, r3
9000664c:	f001 fa4c 	bl	90007ae8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
90006650:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006652:	f000 fce4 	bl	9000701e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
90006656:	f001 f863 	bl	90007720 <xTaskResumeAll>
9000665a:	4603      	mov	r3, r0
9000665c:	2b00      	cmp	r3, #0
9000665e:	f47f af7c 	bne.w	9000655a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
90006662:	4b0c      	ldr	r3, [pc, #48]	; (90006694 <xQueueGenericSend+0x208>)
90006664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006668:	601a      	str	r2, [r3, #0]
9000666a:	f3bf 8f4f 	dsb	sy
9000666e:	f3bf 8f6f 	isb	sy
90006672:	e772      	b.n	9000655a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
90006674:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006676:	f000 fcd2 	bl	9000701e <prvUnlockQueue>
				( void ) xTaskResumeAll();
9000667a:	f001 f851 	bl	90007720 <xTaskResumeAll>
9000667e:	e76c      	b.n	9000655a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
90006680:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006682:	f000 fccc 	bl	9000701e <prvUnlockQueue>
			( void ) xTaskResumeAll();
90006686:	f001 f84b 	bl	90007720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
9000668a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
9000668c:	4618      	mov	r0, r3
9000668e:	3738      	adds	r7, #56	; 0x38
90006690:	46bd      	mov	sp, r7
90006692:	bd80      	pop	{r7, pc}
90006694:	e000ed04 	.word	0xe000ed04

90006698 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
90006698:	b580      	push	{r7, lr}
9000669a:	b08e      	sub	sp, #56	; 0x38
9000669c:	af00      	add	r7, sp, #0
9000669e:	60f8      	str	r0, [r7, #12]
900066a0:	60b9      	str	r1, [r7, #8]
900066a2:	607a      	str	r2, [r7, #4]
900066a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
900066a6:	68fb      	ldr	r3, [r7, #12]
900066a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
900066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900066ac:	2b00      	cmp	r3, #0
900066ae:	d10c      	bne.n	900066ca <xQueueGenericSendFromISR+0x32>
	__asm volatile
900066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
900066b4:	b672      	cpsid	i
900066b6:	f383 8811 	msr	BASEPRI, r3
900066ba:	f3bf 8f6f 	isb	sy
900066be:	f3bf 8f4f 	dsb	sy
900066c2:	b662      	cpsie	i
900066c4:	627b      	str	r3, [r7, #36]	; 0x24
}
900066c6:	bf00      	nop
900066c8:	e7fe      	b.n	900066c8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
900066ca:	68bb      	ldr	r3, [r7, #8]
900066cc:	2b00      	cmp	r3, #0
900066ce:	d103      	bne.n	900066d8 <xQueueGenericSendFromISR+0x40>
900066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900066d4:	2b00      	cmp	r3, #0
900066d6:	d101      	bne.n	900066dc <xQueueGenericSendFromISR+0x44>
900066d8:	2301      	movs	r3, #1
900066da:	e000      	b.n	900066de <xQueueGenericSendFromISR+0x46>
900066dc:	2300      	movs	r3, #0
900066de:	2b00      	cmp	r3, #0
900066e0:	d10c      	bne.n	900066fc <xQueueGenericSendFromISR+0x64>
	__asm volatile
900066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
900066e6:	b672      	cpsid	i
900066e8:	f383 8811 	msr	BASEPRI, r3
900066ec:	f3bf 8f6f 	isb	sy
900066f0:	f3bf 8f4f 	dsb	sy
900066f4:	b662      	cpsie	i
900066f6:	623b      	str	r3, [r7, #32]
}
900066f8:	bf00      	nop
900066fa:	e7fe      	b.n	900066fa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
900066fc:	683b      	ldr	r3, [r7, #0]
900066fe:	2b02      	cmp	r3, #2
90006700:	d103      	bne.n	9000670a <xQueueGenericSendFromISR+0x72>
90006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006706:	2b01      	cmp	r3, #1
90006708:	d101      	bne.n	9000670e <xQueueGenericSendFromISR+0x76>
9000670a:	2301      	movs	r3, #1
9000670c:	e000      	b.n	90006710 <xQueueGenericSendFromISR+0x78>
9000670e:	2300      	movs	r3, #0
90006710:	2b00      	cmp	r3, #0
90006712:	d10c      	bne.n	9000672e <xQueueGenericSendFromISR+0x96>
	__asm volatile
90006714:	f04f 0350 	mov.w	r3, #80	; 0x50
90006718:	b672      	cpsid	i
9000671a:	f383 8811 	msr	BASEPRI, r3
9000671e:	f3bf 8f6f 	isb	sy
90006722:	f3bf 8f4f 	dsb	sy
90006726:	b662      	cpsie	i
90006728:	61fb      	str	r3, [r7, #28]
}
9000672a:	bf00      	nop
9000672c:	e7fe      	b.n	9000672c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000672e:	f002 fb3d 	bl	90008dac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
90006732:	f3ef 8211 	mrs	r2, BASEPRI
90006736:	f04f 0350 	mov.w	r3, #80	; 0x50
9000673a:	b672      	cpsid	i
9000673c:	f383 8811 	msr	BASEPRI, r3
90006740:	f3bf 8f6f 	isb	sy
90006744:	f3bf 8f4f 	dsb	sy
90006748:	b662      	cpsie	i
9000674a:	61ba      	str	r2, [r7, #24]
9000674c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
9000674e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
90006750:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000675a:	429a      	cmp	r2, r3
9000675c:	d302      	bcc.n	90006764 <xQueueGenericSendFromISR+0xcc>
9000675e:	683b      	ldr	r3, [r7, #0]
90006760:	2b02      	cmp	r3, #2
90006762:	d12c      	bne.n	900067be <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
90006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000676a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000676e:	683a      	ldr	r2, [r7, #0]
90006770:	68b9      	ldr	r1, [r7, #8]
90006772:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006774:	f000 fbc3 	bl	90006efe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
90006778:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
9000677c:	f1b3 3fff 	cmp.w	r3, #4294967295
90006780:	d112      	bne.n	900067a8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006786:	2b00      	cmp	r3, #0
90006788:	d016      	beq.n	900067b8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000678c:	3324      	adds	r3, #36	; 0x24
9000678e:	4618      	mov	r0, r3
90006790:	f001 f9fe 	bl	90007b90 <xTaskRemoveFromEventList>
90006794:	4603      	mov	r3, r0
90006796:	2b00      	cmp	r3, #0
90006798:	d00e      	beq.n	900067b8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
9000679a:	687b      	ldr	r3, [r7, #4]
9000679c:	2b00      	cmp	r3, #0
9000679e:	d00b      	beq.n	900067b8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
900067a0:	687b      	ldr	r3, [r7, #4]
900067a2:	2201      	movs	r2, #1
900067a4:	601a      	str	r2, [r3, #0]
900067a6:	e007      	b.n	900067b8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
900067a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
900067ac:	3301      	adds	r3, #1
900067ae:	b2db      	uxtb	r3, r3
900067b0:	b25a      	sxtb	r2, r3
900067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900067b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
900067b8:	2301      	movs	r3, #1
900067ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
900067bc:	e001      	b.n	900067c2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
900067be:	2300      	movs	r3, #0
900067c0:	637b      	str	r3, [r7, #52]	; 0x34
900067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900067c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
900067c6:	693b      	ldr	r3, [r7, #16]
900067c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
900067cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
900067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
900067d0:	4618      	mov	r0, r3
900067d2:	3738      	adds	r7, #56	; 0x38
900067d4:	46bd      	mov	sp, r7
900067d6:	bd80      	pop	{r7, pc}

900067d8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
900067d8:	b580      	push	{r7, lr}
900067da:	b08e      	sub	sp, #56	; 0x38
900067dc:	af00      	add	r7, sp, #0
900067de:	6078      	str	r0, [r7, #4]
900067e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
900067e2:	687b      	ldr	r3, [r7, #4]
900067e4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
900067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900067e8:	2b00      	cmp	r3, #0
900067ea:	d10c      	bne.n	90006806 <xQueueGiveFromISR+0x2e>
	__asm volatile
900067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
900067f0:	b672      	cpsid	i
900067f2:	f383 8811 	msr	BASEPRI, r3
900067f6:	f3bf 8f6f 	isb	sy
900067fa:	f3bf 8f4f 	dsb	sy
900067fe:	b662      	cpsie	i
90006800:	623b      	str	r3, [r7, #32]
}
90006802:	bf00      	nop
90006804:	e7fe      	b.n	90006804 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
90006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000680a:	2b00      	cmp	r3, #0
9000680c:	d00c      	beq.n	90006828 <xQueueGiveFromISR+0x50>
	__asm volatile
9000680e:	f04f 0350 	mov.w	r3, #80	; 0x50
90006812:	b672      	cpsid	i
90006814:	f383 8811 	msr	BASEPRI, r3
90006818:	f3bf 8f6f 	isb	sy
9000681c:	f3bf 8f4f 	dsb	sy
90006820:	b662      	cpsie	i
90006822:	61fb      	str	r3, [r7, #28]
}
90006824:	bf00      	nop
90006826:	e7fe      	b.n	90006826 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
90006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000682a:	681b      	ldr	r3, [r3, #0]
9000682c:	2b00      	cmp	r3, #0
9000682e:	d103      	bne.n	90006838 <xQueueGiveFromISR+0x60>
90006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006832:	689b      	ldr	r3, [r3, #8]
90006834:	2b00      	cmp	r3, #0
90006836:	d101      	bne.n	9000683c <xQueueGiveFromISR+0x64>
90006838:	2301      	movs	r3, #1
9000683a:	e000      	b.n	9000683e <xQueueGiveFromISR+0x66>
9000683c:	2300      	movs	r3, #0
9000683e:	2b00      	cmp	r3, #0
90006840:	d10c      	bne.n	9000685c <xQueueGiveFromISR+0x84>
	__asm volatile
90006842:	f04f 0350 	mov.w	r3, #80	; 0x50
90006846:	b672      	cpsid	i
90006848:	f383 8811 	msr	BASEPRI, r3
9000684c:	f3bf 8f6f 	isb	sy
90006850:	f3bf 8f4f 	dsb	sy
90006854:	b662      	cpsie	i
90006856:	61bb      	str	r3, [r7, #24]
}
90006858:	bf00      	nop
9000685a:	e7fe      	b.n	9000685a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000685c:	f002 faa6 	bl	90008dac <vPortValidateInterruptPriority>
	__asm volatile
90006860:	f3ef 8211 	mrs	r2, BASEPRI
90006864:	f04f 0350 	mov.w	r3, #80	; 0x50
90006868:	b672      	cpsid	i
9000686a:	f383 8811 	msr	BASEPRI, r3
9000686e:	f3bf 8f6f 	isb	sy
90006872:	f3bf 8f4f 	dsb	sy
90006876:	b662      	cpsie	i
90006878:	617a      	str	r2, [r7, #20]
9000687a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
9000687c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
9000687e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006884:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
90006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000688a:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000688c:	429a      	cmp	r2, r3
9000688e:	d22b      	bcs.n	900068e8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
90006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90006896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000689c:	1c5a      	adds	r2, r3, #1
9000689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900068a0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
900068a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
900068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
900068aa:	d112      	bne.n	900068d2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900068b0:	2b00      	cmp	r3, #0
900068b2:	d016      	beq.n	900068e2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900068b6:	3324      	adds	r3, #36	; 0x24
900068b8:	4618      	mov	r0, r3
900068ba:	f001 f969 	bl	90007b90 <xTaskRemoveFromEventList>
900068be:	4603      	mov	r3, r0
900068c0:	2b00      	cmp	r3, #0
900068c2:	d00e      	beq.n	900068e2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
900068c4:	683b      	ldr	r3, [r7, #0]
900068c6:	2b00      	cmp	r3, #0
900068c8:	d00b      	beq.n	900068e2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
900068ca:	683b      	ldr	r3, [r7, #0]
900068cc:	2201      	movs	r2, #1
900068ce:	601a      	str	r2, [r3, #0]
900068d0:	e007      	b.n	900068e2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
900068d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900068d6:	3301      	adds	r3, #1
900068d8:	b2db      	uxtb	r3, r3
900068da:	b25a      	sxtb	r2, r3
900068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900068de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
900068e2:	2301      	movs	r3, #1
900068e4:	637b      	str	r3, [r7, #52]	; 0x34
900068e6:	e001      	b.n	900068ec <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
900068e8:	2300      	movs	r3, #0
900068ea:	637b      	str	r3, [r7, #52]	; 0x34
900068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900068ee:	60fb      	str	r3, [r7, #12]
	__asm volatile
900068f0:	68fb      	ldr	r3, [r7, #12]
900068f2:	f383 8811 	msr	BASEPRI, r3
}
900068f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
900068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
900068fa:	4618      	mov	r0, r3
900068fc:	3738      	adds	r7, #56	; 0x38
900068fe:	46bd      	mov	sp, r7
90006900:	bd80      	pop	{r7, pc}
	...

90006904 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
90006904:	b580      	push	{r7, lr}
90006906:	b08c      	sub	sp, #48	; 0x30
90006908:	af00      	add	r7, sp, #0
9000690a:	60f8      	str	r0, [r7, #12]
9000690c:	60b9      	str	r1, [r7, #8]
9000690e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
90006910:	2300      	movs	r3, #0
90006912:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
90006914:	68fb      	ldr	r3, [r7, #12]
90006916:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
90006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000691a:	2b00      	cmp	r3, #0
9000691c:	d10c      	bne.n	90006938 <xQueueReceive+0x34>
	__asm volatile
9000691e:	f04f 0350 	mov.w	r3, #80	; 0x50
90006922:	b672      	cpsid	i
90006924:	f383 8811 	msr	BASEPRI, r3
90006928:	f3bf 8f6f 	isb	sy
9000692c:	f3bf 8f4f 	dsb	sy
90006930:	b662      	cpsie	i
90006932:	623b      	str	r3, [r7, #32]
}
90006934:	bf00      	nop
90006936:	e7fe      	b.n	90006936 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
90006938:	68bb      	ldr	r3, [r7, #8]
9000693a:	2b00      	cmp	r3, #0
9000693c:	d103      	bne.n	90006946 <xQueueReceive+0x42>
9000693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006942:	2b00      	cmp	r3, #0
90006944:	d101      	bne.n	9000694a <xQueueReceive+0x46>
90006946:	2301      	movs	r3, #1
90006948:	e000      	b.n	9000694c <xQueueReceive+0x48>
9000694a:	2300      	movs	r3, #0
9000694c:	2b00      	cmp	r3, #0
9000694e:	d10c      	bne.n	9000696a <xQueueReceive+0x66>
	__asm volatile
90006950:	f04f 0350 	mov.w	r3, #80	; 0x50
90006954:	b672      	cpsid	i
90006956:	f383 8811 	msr	BASEPRI, r3
9000695a:	f3bf 8f6f 	isb	sy
9000695e:	f3bf 8f4f 	dsb	sy
90006962:	b662      	cpsie	i
90006964:	61fb      	str	r3, [r7, #28]
}
90006966:	bf00      	nop
90006968:	e7fe      	b.n	90006968 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000696a:	f001 faeb 	bl	90007f44 <xTaskGetSchedulerState>
9000696e:	4603      	mov	r3, r0
90006970:	2b00      	cmp	r3, #0
90006972:	d102      	bne.n	9000697a <xQueueReceive+0x76>
90006974:	687b      	ldr	r3, [r7, #4]
90006976:	2b00      	cmp	r3, #0
90006978:	d101      	bne.n	9000697e <xQueueReceive+0x7a>
9000697a:	2301      	movs	r3, #1
9000697c:	e000      	b.n	90006980 <xQueueReceive+0x7c>
9000697e:	2300      	movs	r3, #0
90006980:	2b00      	cmp	r3, #0
90006982:	d10c      	bne.n	9000699e <xQueueReceive+0x9a>
	__asm volatile
90006984:	f04f 0350 	mov.w	r3, #80	; 0x50
90006988:	b672      	cpsid	i
9000698a:	f383 8811 	msr	BASEPRI, r3
9000698e:	f3bf 8f6f 	isb	sy
90006992:	f3bf 8f4f 	dsb	sy
90006996:	b662      	cpsie	i
90006998:	61bb      	str	r3, [r7, #24]
}
9000699a:	bf00      	nop
9000699c:	e7fe      	b.n	9000699c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
9000699e:	f002 f91d 	bl	90008bdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900069a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
900069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900069aa:	2b00      	cmp	r3, #0
900069ac:	d01f      	beq.n	900069ee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
900069ae:	68b9      	ldr	r1, [r7, #8]
900069b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
900069b2:	f000 fb0e 	bl	90006fd2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
900069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900069b8:	1e5a      	subs	r2, r3, #1
900069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
900069bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
900069c0:	691b      	ldr	r3, [r3, #16]
900069c2:	2b00      	cmp	r3, #0
900069c4:	d00f      	beq.n	900069e6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900069c8:	3310      	adds	r3, #16
900069ca:	4618      	mov	r0, r3
900069cc:	f001 f8e0 	bl	90007b90 <xTaskRemoveFromEventList>
900069d0:	4603      	mov	r3, r0
900069d2:	2b00      	cmp	r3, #0
900069d4:	d007      	beq.n	900069e6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
900069d6:	4b3d      	ldr	r3, [pc, #244]	; (90006acc <xQueueReceive+0x1c8>)
900069d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900069dc:	601a      	str	r2, [r3, #0]
900069de:	f3bf 8f4f 	dsb	sy
900069e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
900069e6:	f002 f92d 	bl	90008c44 <vPortExitCritical>
				return pdPASS;
900069ea:	2301      	movs	r3, #1
900069ec:	e069      	b.n	90006ac2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
900069ee:	687b      	ldr	r3, [r7, #4]
900069f0:	2b00      	cmp	r3, #0
900069f2:	d103      	bne.n	900069fc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
900069f4:	f002 f926 	bl	90008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
900069f8:	2300      	movs	r3, #0
900069fa:	e062      	b.n	90006ac2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
900069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900069fe:	2b00      	cmp	r3, #0
90006a00:	d106      	bne.n	90006a10 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
90006a02:	f107 0310 	add.w	r3, r7, #16
90006a06:	4618      	mov	r0, r3
90006a08:	f001 f928 	bl	90007c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90006a0c:	2301      	movs	r3, #1
90006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
90006a10:	f002 f918 	bl	90008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
90006a14:	f000 fe76 	bl	90007704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90006a18:	f002 f8e0 	bl	90008bdc <vPortEnterCritical>
90006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90006a22:	b25b      	sxtb	r3, r3
90006a24:	f1b3 3fff 	cmp.w	r3, #4294967295
90006a28:	d103      	bne.n	90006a32 <xQueueReceive+0x12e>
90006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006a2c:	2200      	movs	r2, #0
90006a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90006a38:	b25b      	sxtb	r3, r3
90006a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
90006a3e:	d103      	bne.n	90006a48 <xQueueReceive+0x144>
90006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006a42:	2200      	movs	r2, #0
90006a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90006a48:	f002 f8fc 	bl	90008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90006a4c:	1d3a      	adds	r2, r7, #4
90006a4e:	f107 0310 	add.w	r3, r7, #16
90006a52:	4611      	mov	r1, r2
90006a54:	4618      	mov	r0, r3
90006a56:	f001 f917 	bl	90007c88 <xTaskCheckForTimeOut>
90006a5a:	4603      	mov	r3, r0
90006a5c:	2b00      	cmp	r3, #0
90006a5e:	d123      	bne.n	90006aa8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90006a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006a62:	f000 fb2e 	bl	900070c2 <prvIsQueueEmpty>
90006a66:	4603      	mov	r3, r0
90006a68:	2b00      	cmp	r3, #0
90006a6a:	d017      	beq.n	90006a9c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
90006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006a6e:	3324      	adds	r3, #36	; 0x24
90006a70:	687a      	ldr	r2, [r7, #4]
90006a72:	4611      	mov	r1, r2
90006a74:	4618      	mov	r0, r3
90006a76:	f001 f837 	bl	90007ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
90006a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006a7c:	f000 facf 	bl	9000701e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
90006a80:	f000 fe4e 	bl	90007720 <xTaskResumeAll>
90006a84:	4603      	mov	r3, r0
90006a86:	2b00      	cmp	r3, #0
90006a88:	d189      	bne.n	9000699e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
90006a8a:	4b10      	ldr	r3, [pc, #64]	; (90006acc <xQueueReceive+0x1c8>)
90006a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006a90:	601a      	str	r2, [r3, #0]
90006a92:	f3bf 8f4f 	dsb	sy
90006a96:	f3bf 8f6f 	isb	sy
90006a9a:	e780      	b.n	9000699e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
90006a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006a9e:	f000 fabe 	bl	9000701e <prvUnlockQueue>
				( void ) xTaskResumeAll();
90006aa2:	f000 fe3d 	bl	90007720 <xTaskResumeAll>
90006aa6:	e77a      	b.n	9000699e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
90006aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006aaa:	f000 fab8 	bl	9000701e <prvUnlockQueue>
			( void ) xTaskResumeAll();
90006aae:	f000 fe37 	bl	90007720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90006ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006ab4:	f000 fb05 	bl	900070c2 <prvIsQueueEmpty>
90006ab8:	4603      	mov	r3, r0
90006aba:	2b00      	cmp	r3, #0
90006abc:	f43f af6f 	beq.w	9000699e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
90006ac0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
90006ac2:	4618      	mov	r0, r3
90006ac4:	3730      	adds	r7, #48	; 0x30
90006ac6:	46bd      	mov	sp, r7
90006ac8:	bd80      	pop	{r7, pc}
90006aca:	bf00      	nop
90006acc:	e000ed04 	.word	0xe000ed04

90006ad0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
90006ad0:	b580      	push	{r7, lr}
90006ad2:	b08e      	sub	sp, #56	; 0x38
90006ad4:	af00      	add	r7, sp, #0
90006ad6:	6078      	str	r0, [r7, #4]
90006ad8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
90006ada:	2300      	movs	r3, #0
90006adc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
90006ade:	687b      	ldr	r3, [r7, #4]
90006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
90006ae2:	2300      	movs	r3, #0
90006ae4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
90006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006ae8:	2b00      	cmp	r3, #0
90006aea:	d10c      	bne.n	90006b06 <xQueueSemaphoreTake+0x36>
	__asm volatile
90006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
90006af0:	b672      	cpsid	i
90006af2:	f383 8811 	msr	BASEPRI, r3
90006af6:	f3bf 8f6f 	isb	sy
90006afa:	f3bf 8f4f 	dsb	sy
90006afe:	b662      	cpsie	i
90006b00:	623b      	str	r3, [r7, #32]
}
90006b02:	bf00      	nop
90006b04:	e7fe      	b.n	90006b04 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
90006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006b0a:	2b00      	cmp	r3, #0
90006b0c:	d00c      	beq.n	90006b28 <xQueueSemaphoreTake+0x58>
	__asm volatile
90006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
90006b12:	b672      	cpsid	i
90006b14:	f383 8811 	msr	BASEPRI, r3
90006b18:	f3bf 8f6f 	isb	sy
90006b1c:	f3bf 8f4f 	dsb	sy
90006b20:	b662      	cpsie	i
90006b22:	61fb      	str	r3, [r7, #28]
}
90006b24:	bf00      	nop
90006b26:	e7fe      	b.n	90006b26 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90006b28:	f001 fa0c 	bl	90007f44 <xTaskGetSchedulerState>
90006b2c:	4603      	mov	r3, r0
90006b2e:	2b00      	cmp	r3, #0
90006b30:	d102      	bne.n	90006b38 <xQueueSemaphoreTake+0x68>
90006b32:	683b      	ldr	r3, [r7, #0]
90006b34:	2b00      	cmp	r3, #0
90006b36:	d101      	bne.n	90006b3c <xQueueSemaphoreTake+0x6c>
90006b38:	2301      	movs	r3, #1
90006b3a:	e000      	b.n	90006b3e <xQueueSemaphoreTake+0x6e>
90006b3c:	2300      	movs	r3, #0
90006b3e:	2b00      	cmp	r3, #0
90006b40:	d10c      	bne.n	90006b5c <xQueueSemaphoreTake+0x8c>
	__asm volatile
90006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
90006b46:	b672      	cpsid	i
90006b48:	f383 8811 	msr	BASEPRI, r3
90006b4c:	f3bf 8f6f 	isb	sy
90006b50:	f3bf 8f4f 	dsb	sy
90006b54:	b662      	cpsie	i
90006b56:	61bb      	str	r3, [r7, #24]
}
90006b58:	bf00      	nop
90006b5a:	e7fe      	b.n	90006b5a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
90006b5c:	f002 f83e 	bl	90008bdc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
90006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
90006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006b68:	2b00      	cmp	r3, #0
90006b6a:	d024      	beq.n	90006bb6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
90006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006b6e:	1e5a      	subs	r2, r3, #1
90006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006b72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006b76:	681b      	ldr	r3, [r3, #0]
90006b78:	2b00      	cmp	r3, #0
90006b7a:	d104      	bne.n	90006b86 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
90006b7c:	f001 fb60 	bl	90008240 <pvTaskIncrementMutexHeldCount>
90006b80:	4602      	mov	r2, r0
90006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006b84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006b88:	691b      	ldr	r3, [r3, #16]
90006b8a:	2b00      	cmp	r3, #0
90006b8c:	d00f      	beq.n	90006bae <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006b90:	3310      	adds	r3, #16
90006b92:	4618      	mov	r0, r3
90006b94:	f000 fffc 	bl	90007b90 <xTaskRemoveFromEventList>
90006b98:	4603      	mov	r3, r0
90006b9a:	2b00      	cmp	r3, #0
90006b9c:	d007      	beq.n	90006bae <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
90006b9e:	4b55      	ldr	r3, [pc, #340]	; (90006cf4 <xQueueSemaphoreTake+0x224>)
90006ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006ba4:	601a      	str	r2, [r3, #0]
90006ba6:	f3bf 8f4f 	dsb	sy
90006baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
90006bae:	f002 f849 	bl	90008c44 <vPortExitCritical>
				return pdPASS;
90006bb2:	2301      	movs	r3, #1
90006bb4:	e099      	b.n	90006cea <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
90006bb6:	683b      	ldr	r3, [r7, #0]
90006bb8:	2b00      	cmp	r3, #0
90006bba:	d113      	bne.n	90006be4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
90006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006bbe:	2b00      	cmp	r3, #0
90006bc0:	d00c      	beq.n	90006bdc <xQueueSemaphoreTake+0x10c>
	__asm volatile
90006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
90006bc6:	b672      	cpsid	i
90006bc8:	f383 8811 	msr	BASEPRI, r3
90006bcc:	f3bf 8f6f 	isb	sy
90006bd0:	f3bf 8f4f 	dsb	sy
90006bd4:	b662      	cpsie	i
90006bd6:	617b      	str	r3, [r7, #20]
}
90006bd8:	bf00      	nop
90006bda:	e7fe      	b.n	90006bda <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
90006bdc:	f002 f832 	bl	90008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
90006be0:	2300      	movs	r3, #0
90006be2:	e082      	b.n	90006cea <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
90006be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006be6:	2b00      	cmp	r3, #0
90006be8:	d106      	bne.n	90006bf8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
90006bea:	f107 030c 	add.w	r3, r7, #12
90006bee:	4618      	mov	r0, r3
90006bf0:	f001 f834 	bl	90007c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90006bf4:	2301      	movs	r3, #1
90006bf6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
90006bf8:	f002 f824 	bl	90008c44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
90006bfc:	f000 fd82 	bl	90007704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90006c00:	f001 ffec 	bl	90008bdc <vPortEnterCritical>
90006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90006c0a:	b25b      	sxtb	r3, r3
90006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
90006c10:	d103      	bne.n	90006c1a <xQueueSemaphoreTake+0x14a>
90006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c14:	2200      	movs	r2, #0
90006c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90006c20:	b25b      	sxtb	r3, r3
90006c22:	f1b3 3fff 	cmp.w	r3, #4294967295
90006c26:	d103      	bne.n	90006c30 <xQueueSemaphoreTake+0x160>
90006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c2a:	2200      	movs	r2, #0
90006c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90006c30:	f002 f808 	bl	90008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90006c34:	463a      	mov	r2, r7
90006c36:	f107 030c 	add.w	r3, r7, #12
90006c3a:	4611      	mov	r1, r2
90006c3c:	4618      	mov	r0, r3
90006c3e:	f001 f823 	bl	90007c88 <xTaskCheckForTimeOut>
90006c42:	4603      	mov	r3, r0
90006c44:	2b00      	cmp	r3, #0
90006c46:	d132      	bne.n	90006cae <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90006c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006c4a:	f000 fa3a 	bl	900070c2 <prvIsQueueEmpty>
90006c4e:	4603      	mov	r3, r0
90006c50:	2b00      	cmp	r3, #0
90006c52:	d026      	beq.n	90006ca2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c56:	681b      	ldr	r3, [r3, #0]
90006c58:	2b00      	cmp	r3, #0
90006c5a:	d109      	bne.n	90006c70 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
90006c5c:	f001 ffbe 	bl	90008bdc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
90006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c62:	689b      	ldr	r3, [r3, #8]
90006c64:	4618      	mov	r0, r3
90006c66:	f001 f98b 	bl	90007f80 <xTaskPriorityInherit>
90006c6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
90006c6c:	f001 ffea 	bl	90008c44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
90006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c72:	3324      	adds	r3, #36	; 0x24
90006c74:	683a      	ldr	r2, [r7, #0]
90006c76:	4611      	mov	r1, r2
90006c78:	4618      	mov	r0, r3
90006c7a:	f000 ff35 	bl	90007ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
90006c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006c80:	f000 f9cd 	bl	9000701e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
90006c84:	f000 fd4c 	bl	90007720 <xTaskResumeAll>
90006c88:	4603      	mov	r3, r0
90006c8a:	2b00      	cmp	r3, #0
90006c8c:	f47f af66 	bne.w	90006b5c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
90006c90:	4b18      	ldr	r3, [pc, #96]	; (90006cf4 <xQueueSemaphoreTake+0x224>)
90006c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006c96:	601a      	str	r2, [r3, #0]
90006c98:	f3bf 8f4f 	dsb	sy
90006c9c:	f3bf 8f6f 	isb	sy
90006ca0:	e75c      	b.n	90006b5c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
90006ca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006ca4:	f000 f9bb 	bl	9000701e <prvUnlockQueue>
				( void ) xTaskResumeAll();
90006ca8:	f000 fd3a 	bl	90007720 <xTaskResumeAll>
90006cac:	e756      	b.n	90006b5c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
90006cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006cb0:	f000 f9b5 	bl	9000701e <prvUnlockQueue>
			( void ) xTaskResumeAll();
90006cb4:	f000 fd34 	bl	90007720 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90006cb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006cba:	f000 fa02 	bl	900070c2 <prvIsQueueEmpty>
90006cbe:	4603      	mov	r3, r0
90006cc0:	2b00      	cmp	r3, #0
90006cc2:	f43f af4b 	beq.w	90006b5c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
90006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006cc8:	2b00      	cmp	r3, #0
90006cca:	d00d      	beq.n	90006ce8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
90006ccc:	f001 ff86 	bl	90008bdc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
90006cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006cd2:	f000 f8fc 	bl	90006ece <prvGetDisinheritPriorityAfterTimeout>
90006cd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
90006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006cda:	689b      	ldr	r3, [r3, #8]
90006cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
90006cde:	4618      	mov	r0, r3
90006ce0:	f001 fa28 	bl	90008134 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
90006ce4:	f001 ffae 	bl	90008c44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
90006ce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
90006cea:	4618      	mov	r0, r3
90006cec:	3738      	adds	r7, #56	; 0x38
90006cee:	46bd      	mov	sp, r7
90006cf0:	bd80      	pop	{r7, pc}
90006cf2:	bf00      	nop
90006cf4:	e000ed04 	.word	0xe000ed04

90006cf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
90006cf8:	b580      	push	{r7, lr}
90006cfa:	b08e      	sub	sp, #56	; 0x38
90006cfc:	af00      	add	r7, sp, #0
90006cfe:	60f8      	str	r0, [r7, #12]
90006d00:	60b9      	str	r1, [r7, #8]
90006d02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
90006d04:	68fb      	ldr	r3, [r7, #12]
90006d06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
90006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006d0a:	2b00      	cmp	r3, #0
90006d0c:	d10c      	bne.n	90006d28 <xQueueReceiveFromISR+0x30>
	__asm volatile
90006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
90006d12:	b672      	cpsid	i
90006d14:	f383 8811 	msr	BASEPRI, r3
90006d18:	f3bf 8f6f 	isb	sy
90006d1c:	f3bf 8f4f 	dsb	sy
90006d20:	b662      	cpsie	i
90006d22:	623b      	str	r3, [r7, #32]
}
90006d24:	bf00      	nop
90006d26:	e7fe      	b.n	90006d26 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90006d28:	68bb      	ldr	r3, [r7, #8]
90006d2a:	2b00      	cmp	r3, #0
90006d2c:	d103      	bne.n	90006d36 <xQueueReceiveFromISR+0x3e>
90006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006d32:	2b00      	cmp	r3, #0
90006d34:	d101      	bne.n	90006d3a <xQueueReceiveFromISR+0x42>
90006d36:	2301      	movs	r3, #1
90006d38:	e000      	b.n	90006d3c <xQueueReceiveFromISR+0x44>
90006d3a:	2300      	movs	r3, #0
90006d3c:	2b00      	cmp	r3, #0
90006d3e:	d10c      	bne.n	90006d5a <xQueueReceiveFromISR+0x62>
	__asm volatile
90006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
90006d44:	b672      	cpsid	i
90006d46:	f383 8811 	msr	BASEPRI, r3
90006d4a:	f3bf 8f6f 	isb	sy
90006d4e:	f3bf 8f4f 	dsb	sy
90006d52:	b662      	cpsie	i
90006d54:	61fb      	str	r3, [r7, #28]
}
90006d56:	bf00      	nop
90006d58:	e7fe      	b.n	90006d58 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90006d5a:	f002 f827 	bl	90008dac <vPortValidateInterruptPriority>
	__asm volatile
90006d5e:	f3ef 8211 	mrs	r2, BASEPRI
90006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
90006d66:	b672      	cpsid	i
90006d68:	f383 8811 	msr	BASEPRI, r3
90006d6c:	f3bf 8f6f 	isb	sy
90006d70:	f3bf 8f4f 	dsb	sy
90006d74:	b662      	cpsie	i
90006d76:	61ba      	str	r2, [r7, #24]
90006d78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
90006d7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
90006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006d82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006d86:	2b00      	cmp	r3, #0
90006d88:	d02f      	beq.n	90006dea <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
90006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90006d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
90006d94:	68b9      	ldr	r1, [r7, #8]
90006d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006d98:	f000 f91b 	bl	90006fd2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006d9e:	1e5a      	subs	r2, r3, #1
90006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006da2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
90006da4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
90006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
90006dac:	d112      	bne.n	90006dd4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006db0:	691b      	ldr	r3, [r3, #16]
90006db2:	2b00      	cmp	r3, #0
90006db4:	d016      	beq.n	90006de4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006db8:	3310      	adds	r3, #16
90006dba:	4618      	mov	r0, r3
90006dbc:	f000 fee8 	bl	90007b90 <xTaskRemoveFromEventList>
90006dc0:	4603      	mov	r3, r0
90006dc2:	2b00      	cmp	r3, #0
90006dc4:	d00e      	beq.n	90006de4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
90006dc6:	687b      	ldr	r3, [r7, #4]
90006dc8:	2b00      	cmp	r3, #0
90006dca:	d00b      	beq.n	90006de4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
90006dcc:	687b      	ldr	r3, [r7, #4]
90006dce:	2201      	movs	r2, #1
90006dd0:	601a      	str	r2, [r3, #0]
90006dd2:	e007      	b.n	90006de4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
90006dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90006dd8:	3301      	adds	r3, #1
90006dda:	b2db      	uxtb	r3, r3
90006ddc:	b25a      	sxtb	r2, r3
90006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
90006de4:	2301      	movs	r3, #1
90006de6:	637b      	str	r3, [r7, #52]	; 0x34
90006de8:	e001      	b.n	90006dee <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
90006dea:	2300      	movs	r3, #0
90006dec:	637b      	str	r3, [r7, #52]	; 0x34
90006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006df0:	613b      	str	r3, [r7, #16]
	__asm volatile
90006df2:	693b      	ldr	r3, [r7, #16]
90006df4:	f383 8811 	msr	BASEPRI, r3
}
90006df8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
90006dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
90006dfc:	4618      	mov	r0, r3
90006dfe:	3738      	adds	r7, #56	; 0x38
90006e00:	46bd      	mov	sp, r7
90006e02:	bd80      	pop	{r7, pc}

90006e04 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
90006e04:	b580      	push	{r7, lr}
90006e06:	b084      	sub	sp, #16
90006e08:	af00      	add	r7, sp, #0
90006e0a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
90006e0c:	687b      	ldr	r3, [r7, #4]
90006e0e:	2b00      	cmp	r3, #0
90006e10:	d10c      	bne.n	90006e2c <uxQueueMessagesWaiting+0x28>
	__asm volatile
90006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
90006e16:	b672      	cpsid	i
90006e18:	f383 8811 	msr	BASEPRI, r3
90006e1c:	f3bf 8f6f 	isb	sy
90006e20:	f3bf 8f4f 	dsb	sy
90006e24:	b662      	cpsie	i
90006e26:	60bb      	str	r3, [r7, #8]
}
90006e28:	bf00      	nop
90006e2a:	e7fe      	b.n	90006e2a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
90006e2c:	f001 fed6 	bl	90008bdc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
90006e30:	687b      	ldr	r3, [r7, #4]
90006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006e34:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
90006e36:	f001 ff05 	bl	90008c44 <vPortExitCritical>

	return uxReturn;
90006e3a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
90006e3c:	4618      	mov	r0, r3
90006e3e:	3710      	adds	r7, #16
90006e40:	46bd      	mov	sp, r7
90006e42:	bd80      	pop	{r7, pc}

90006e44 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
90006e44:	b480      	push	{r7}
90006e46:	b087      	sub	sp, #28
90006e48:	af00      	add	r7, sp, #0
90006e4a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
90006e4c:	687b      	ldr	r3, [r7, #4]
90006e4e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
90006e50:	697b      	ldr	r3, [r7, #20]
90006e52:	2b00      	cmp	r3, #0
90006e54:	d10c      	bne.n	90006e70 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
90006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
90006e5a:	b672      	cpsid	i
90006e5c:	f383 8811 	msr	BASEPRI, r3
90006e60:	f3bf 8f6f 	isb	sy
90006e64:	f3bf 8f4f 	dsb	sy
90006e68:	b662      	cpsie	i
90006e6a:	60fb      	str	r3, [r7, #12]
}
90006e6c:	bf00      	nop
90006e6e:	e7fe      	b.n	90006e6e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
90006e70:	697b      	ldr	r3, [r7, #20]
90006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006e74:	613b      	str	r3, [r7, #16]

	return uxReturn;
90006e76:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
90006e78:	4618      	mov	r0, r3
90006e7a:	371c      	adds	r7, #28
90006e7c:	46bd      	mov	sp, r7
90006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006e82:	4770      	bx	lr

90006e84 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
90006e84:	b580      	push	{r7, lr}
90006e86:	b084      	sub	sp, #16
90006e88:	af00      	add	r7, sp, #0
90006e8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
90006e8c:	687b      	ldr	r3, [r7, #4]
90006e8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
90006e90:	68fb      	ldr	r3, [r7, #12]
90006e92:	2b00      	cmp	r3, #0
90006e94:	d10c      	bne.n	90006eb0 <vQueueDelete+0x2c>
	__asm volatile
90006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
90006e9a:	b672      	cpsid	i
90006e9c:	f383 8811 	msr	BASEPRI, r3
90006ea0:	f3bf 8f6f 	isb	sy
90006ea4:	f3bf 8f4f 	dsb	sy
90006ea8:	b662      	cpsie	i
90006eaa:	60bb      	str	r3, [r7, #8]
}
90006eac:	bf00      	nop
90006eae:	e7fe      	b.n	90006eae <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
90006eb0:	68f8      	ldr	r0, [r7, #12]
90006eb2:	f000 f95f 	bl	90007174 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
90006eb6:	68fb      	ldr	r3, [r7, #12]
90006eb8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
90006ebc:	2b00      	cmp	r3, #0
90006ebe:	d102      	bne.n	90006ec6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
90006ec0:	68f8      	ldr	r0, [r7, #12]
90006ec2:	f002 f881 	bl	90008fc8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
90006ec6:	bf00      	nop
90006ec8:	3710      	adds	r7, #16
90006eca:	46bd      	mov	sp, r7
90006ecc:	bd80      	pop	{r7, pc}

90006ece <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
90006ece:	b480      	push	{r7}
90006ed0:	b085      	sub	sp, #20
90006ed2:	af00      	add	r7, sp, #0
90006ed4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
90006ed6:	687b      	ldr	r3, [r7, #4]
90006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006eda:	2b00      	cmp	r3, #0
90006edc:	d006      	beq.n	90006eec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
90006ede:	687b      	ldr	r3, [r7, #4]
90006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006ee2:	681b      	ldr	r3, [r3, #0]
90006ee4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
90006ee8:	60fb      	str	r3, [r7, #12]
90006eea:	e001      	b.n	90006ef0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
90006eec:	2300      	movs	r3, #0
90006eee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
90006ef0:	68fb      	ldr	r3, [r7, #12]
	}
90006ef2:	4618      	mov	r0, r3
90006ef4:	3714      	adds	r7, #20
90006ef6:	46bd      	mov	sp, r7
90006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
90006efc:	4770      	bx	lr

90006efe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
90006efe:	b580      	push	{r7, lr}
90006f00:	b086      	sub	sp, #24
90006f02:	af00      	add	r7, sp, #0
90006f04:	60f8      	str	r0, [r7, #12]
90006f06:	60b9      	str	r1, [r7, #8]
90006f08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
90006f0a:	2300      	movs	r3, #0
90006f0c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90006f0e:	68fb      	ldr	r3, [r7, #12]
90006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006f12:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
90006f14:	68fb      	ldr	r3, [r7, #12]
90006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006f18:	2b00      	cmp	r3, #0
90006f1a:	d10d      	bne.n	90006f38 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90006f1c:	68fb      	ldr	r3, [r7, #12]
90006f1e:	681b      	ldr	r3, [r3, #0]
90006f20:	2b00      	cmp	r3, #0
90006f22:	d14d      	bne.n	90006fc0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
90006f24:	68fb      	ldr	r3, [r7, #12]
90006f26:	689b      	ldr	r3, [r3, #8]
90006f28:	4618      	mov	r0, r3
90006f2a:	f001 f891 	bl	90008050 <xTaskPriorityDisinherit>
90006f2e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
90006f30:	68fb      	ldr	r3, [r7, #12]
90006f32:	2200      	movs	r2, #0
90006f34:	609a      	str	r2, [r3, #8]
90006f36:	e043      	b.n	90006fc0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
90006f38:	687b      	ldr	r3, [r7, #4]
90006f3a:	2b00      	cmp	r3, #0
90006f3c:	d119      	bne.n	90006f72 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90006f3e:	68fb      	ldr	r3, [r7, #12]
90006f40:	6858      	ldr	r0, [r3, #4]
90006f42:	68fb      	ldr	r3, [r7, #12]
90006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006f46:	461a      	mov	r2, r3
90006f48:	68b9      	ldr	r1, [r7, #8]
90006f4a:	f00f fd83 	bl	90016a54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90006f4e:	68fb      	ldr	r3, [r7, #12]
90006f50:	685a      	ldr	r2, [r3, #4]
90006f52:	68fb      	ldr	r3, [r7, #12]
90006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006f56:	441a      	add	r2, r3
90006f58:	68fb      	ldr	r3, [r7, #12]
90006f5a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90006f5c:	68fb      	ldr	r3, [r7, #12]
90006f5e:	685a      	ldr	r2, [r3, #4]
90006f60:	68fb      	ldr	r3, [r7, #12]
90006f62:	689b      	ldr	r3, [r3, #8]
90006f64:	429a      	cmp	r2, r3
90006f66:	d32b      	bcc.n	90006fc0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
90006f68:	68fb      	ldr	r3, [r7, #12]
90006f6a:	681a      	ldr	r2, [r3, #0]
90006f6c:	68fb      	ldr	r3, [r7, #12]
90006f6e:	605a      	str	r2, [r3, #4]
90006f70:	e026      	b.n	90006fc0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
90006f72:	68fb      	ldr	r3, [r7, #12]
90006f74:	68d8      	ldr	r0, [r3, #12]
90006f76:	68fb      	ldr	r3, [r7, #12]
90006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006f7a:	461a      	mov	r2, r3
90006f7c:	68b9      	ldr	r1, [r7, #8]
90006f7e:	f00f fd69 	bl	90016a54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
90006f82:	68fb      	ldr	r3, [r7, #12]
90006f84:	68da      	ldr	r2, [r3, #12]
90006f86:	68fb      	ldr	r3, [r7, #12]
90006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006f8a:	425b      	negs	r3, r3
90006f8c:	441a      	add	r2, r3
90006f8e:	68fb      	ldr	r3, [r7, #12]
90006f90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90006f92:	68fb      	ldr	r3, [r7, #12]
90006f94:	68da      	ldr	r2, [r3, #12]
90006f96:	68fb      	ldr	r3, [r7, #12]
90006f98:	681b      	ldr	r3, [r3, #0]
90006f9a:	429a      	cmp	r2, r3
90006f9c:	d207      	bcs.n	90006fae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
90006f9e:	68fb      	ldr	r3, [r7, #12]
90006fa0:	689a      	ldr	r2, [r3, #8]
90006fa2:	68fb      	ldr	r3, [r7, #12]
90006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006fa6:	425b      	negs	r3, r3
90006fa8:	441a      	add	r2, r3
90006faa:	68fb      	ldr	r3, [r7, #12]
90006fac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
90006fae:	687b      	ldr	r3, [r7, #4]
90006fb0:	2b02      	cmp	r3, #2
90006fb2:	d105      	bne.n	90006fc0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90006fb4:	693b      	ldr	r3, [r7, #16]
90006fb6:	2b00      	cmp	r3, #0
90006fb8:	d002      	beq.n	90006fc0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
90006fba:	693b      	ldr	r3, [r7, #16]
90006fbc:	3b01      	subs	r3, #1
90006fbe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90006fc0:	693b      	ldr	r3, [r7, #16]
90006fc2:	1c5a      	adds	r2, r3, #1
90006fc4:	68fb      	ldr	r3, [r7, #12]
90006fc6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
90006fc8:	697b      	ldr	r3, [r7, #20]
}
90006fca:	4618      	mov	r0, r3
90006fcc:	3718      	adds	r7, #24
90006fce:	46bd      	mov	sp, r7
90006fd0:	bd80      	pop	{r7, pc}

90006fd2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
90006fd2:	b580      	push	{r7, lr}
90006fd4:	b082      	sub	sp, #8
90006fd6:	af00      	add	r7, sp, #0
90006fd8:	6078      	str	r0, [r7, #4]
90006fda:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90006fdc:	687b      	ldr	r3, [r7, #4]
90006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006fe0:	2b00      	cmp	r3, #0
90006fe2:	d018      	beq.n	90007016 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90006fe4:	687b      	ldr	r3, [r7, #4]
90006fe6:	68da      	ldr	r2, [r3, #12]
90006fe8:	687b      	ldr	r3, [r7, #4]
90006fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006fec:	441a      	add	r2, r3
90006fee:	687b      	ldr	r3, [r7, #4]
90006ff0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90006ff2:	687b      	ldr	r3, [r7, #4]
90006ff4:	68da      	ldr	r2, [r3, #12]
90006ff6:	687b      	ldr	r3, [r7, #4]
90006ff8:	689b      	ldr	r3, [r3, #8]
90006ffa:	429a      	cmp	r2, r3
90006ffc:	d303      	bcc.n	90007006 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
90006ffe:	687b      	ldr	r3, [r7, #4]
90007000:	681a      	ldr	r2, [r3, #0]
90007002:	687b      	ldr	r3, [r7, #4]
90007004:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90007006:	687b      	ldr	r3, [r7, #4]
90007008:	68d9      	ldr	r1, [r3, #12]
9000700a:	687b      	ldr	r3, [r7, #4]
9000700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000700e:	461a      	mov	r2, r3
90007010:	6838      	ldr	r0, [r7, #0]
90007012:	f00f fd1f 	bl	90016a54 <memcpy>
	}
}
90007016:	bf00      	nop
90007018:	3708      	adds	r7, #8
9000701a:	46bd      	mov	sp, r7
9000701c:	bd80      	pop	{r7, pc}

9000701e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
9000701e:	b580      	push	{r7, lr}
90007020:	b084      	sub	sp, #16
90007022:	af00      	add	r7, sp, #0
90007024:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
90007026:	f001 fdd9 	bl	90008bdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
9000702a:	687b      	ldr	r3, [r7, #4]
9000702c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90007030:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
90007032:	e011      	b.n	90007058 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90007034:	687b      	ldr	r3, [r7, #4]
90007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007038:	2b00      	cmp	r3, #0
9000703a:	d012      	beq.n	90007062 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000703c:	687b      	ldr	r3, [r7, #4]
9000703e:	3324      	adds	r3, #36	; 0x24
90007040:	4618      	mov	r0, r3
90007042:	f000 fda5 	bl	90007b90 <xTaskRemoveFromEventList>
90007046:	4603      	mov	r3, r0
90007048:	2b00      	cmp	r3, #0
9000704a:	d001      	beq.n	90007050 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
9000704c:	f000 fe82 	bl	90007d54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
90007050:	7bfb      	ldrb	r3, [r7, #15]
90007052:	3b01      	subs	r3, #1
90007054:	b2db      	uxtb	r3, r3
90007056:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
90007058:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000705c:	2b00      	cmp	r3, #0
9000705e:	dce9      	bgt.n	90007034 <prvUnlockQueue+0x16>
90007060:	e000      	b.n	90007064 <prvUnlockQueue+0x46>
					break;
90007062:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
90007064:	687b      	ldr	r3, [r7, #4]
90007066:	22ff      	movs	r2, #255	; 0xff
90007068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
9000706c:	f001 fdea 	bl	90008c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
90007070:	f001 fdb4 	bl	90008bdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
90007074:	687b      	ldr	r3, [r7, #4]
90007076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
9000707a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
9000707c:	e011      	b.n	900070a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000707e:	687b      	ldr	r3, [r7, #4]
90007080:	691b      	ldr	r3, [r3, #16]
90007082:	2b00      	cmp	r3, #0
90007084:	d012      	beq.n	900070ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90007086:	687b      	ldr	r3, [r7, #4]
90007088:	3310      	adds	r3, #16
9000708a:	4618      	mov	r0, r3
9000708c:	f000 fd80 	bl	90007b90 <xTaskRemoveFromEventList>
90007090:	4603      	mov	r3, r0
90007092:	2b00      	cmp	r3, #0
90007094:	d001      	beq.n	9000709a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
90007096:	f000 fe5d 	bl	90007d54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
9000709a:	7bbb      	ldrb	r3, [r7, #14]
9000709c:	3b01      	subs	r3, #1
9000709e:	b2db      	uxtb	r3, r3
900070a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
900070a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
900070a6:	2b00      	cmp	r3, #0
900070a8:	dce9      	bgt.n	9000707e <prvUnlockQueue+0x60>
900070aa:	e000      	b.n	900070ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
900070ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
900070ae:	687b      	ldr	r3, [r7, #4]
900070b0:	22ff      	movs	r2, #255	; 0xff
900070b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
900070b6:	f001 fdc5 	bl	90008c44 <vPortExitCritical>
}
900070ba:	bf00      	nop
900070bc:	3710      	adds	r7, #16
900070be:	46bd      	mov	sp, r7
900070c0:	bd80      	pop	{r7, pc}

900070c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
900070c2:	b580      	push	{r7, lr}
900070c4:	b084      	sub	sp, #16
900070c6:	af00      	add	r7, sp, #0
900070c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
900070ca:	f001 fd87 	bl	90008bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
900070ce:	687b      	ldr	r3, [r7, #4]
900070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900070d2:	2b00      	cmp	r3, #0
900070d4:	d102      	bne.n	900070dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
900070d6:	2301      	movs	r3, #1
900070d8:	60fb      	str	r3, [r7, #12]
900070da:	e001      	b.n	900070e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
900070dc:	2300      	movs	r3, #0
900070de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
900070e0:	f001 fdb0 	bl	90008c44 <vPortExitCritical>

	return xReturn;
900070e4:	68fb      	ldr	r3, [r7, #12]
}
900070e6:	4618      	mov	r0, r3
900070e8:	3710      	adds	r7, #16
900070ea:	46bd      	mov	sp, r7
900070ec:	bd80      	pop	{r7, pc}

900070ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
900070ee:	b580      	push	{r7, lr}
900070f0:	b084      	sub	sp, #16
900070f2:	af00      	add	r7, sp, #0
900070f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
900070f6:	f001 fd71 	bl	90008bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
900070fa:	687b      	ldr	r3, [r7, #4]
900070fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900070fe:	687b      	ldr	r3, [r7, #4]
90007100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007102:	429a      	cmp	r2, r3
90007104:	d102      	bne.n	9000710c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
90007106:	2301      	movs	r3, #1
90007108:	60fb      	str	r3, [r7, #12]
9000710a:	e001      	b.n	90007110 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
9000710c:	2300      	movs	r3, #0
9000710e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
90007110:	f001 fd98 	bl	90008c44 <vPortExitCritical>

	return xReturn;
90007114:	68fb      	ldr	r3, [r7, #12]
}
90007116:	4618      	mov	r0, r3
90007118:	3710      	adds	r7, #16
9000711a:	46bd      	mov	sp, r7
9000711c:	bd80      	pop	{r7, pc}
	...

90007120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
90007120:	b480      	push	{r7}
90007122:	b085      	sub	sp, #20
90007124:	af00      	add	r7, sp, #0
90007126:	6078      	str	r0, [r7, #4]
90007128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000712a:	2300      	movs	r3, #0
9000712c:	60fb      	str	r3, [r7, #12]
9000712e:	e014      	b.n	9000715a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
90007130:	4a0f      	ldr	r2, [pc, #60]	; (90007170 <vQueueAddToRegistry+0x50>)
90007132:	68fb      	ldr	r3, [r7, #12]
90007134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90007138:	2b00      	cmp	r3, #0
9000713a:	d10b      	bne.n	90007154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000713c:	490c      	ldr	r1, [pc, #48]	; (90007170 <vQueueAddToRegistry+0x50>)
9000713e:	68fb      	ldr	r3, [r7, #12]
90007140:	683a      	ldr	r2, [r7, #0]
90007142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
90007146:	4a0a      	ldr	r2, [pc, #40]	; (90007170 <vQueueAddToRegistry+0x50>)
90007148:	68fb      	ldr	r3, [r7, #12]
9000714a:	00db      	lsls	r3, r3, #3
9000714c:	4413      	add	r3, r2
9000714e:	687a      	ldr	r2, [r7, #4]
90007150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
90007152:	e006      	b.n	90007162 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90007154:	68fb      	ldr	r3, [r7, #12]
90007156:	3301      	adds	r3, #1
90007158:	60fb      	str	r3, [r7, #12]
9000715a:	68fb      	ldr	r3, [r7, #12]
9000715c:	2b07      	cmp	r3, #7
9000715e:	d9e7      	bls.n	90007130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
90007160:	bf00      	nop
90007162:	bf00      	nop
90007164:	3714      	adds	r7, #20
90007166:	46bd      	mov	sp, r7
90007168:	f85d 7b04 	ldr.w	r7, [sp], #4
9000716c:	4770      	bx	lr
9000716e:	bf00      	nop
90007170:	20003a18 	.word	0x20003a18

90007174 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
90007174:	b480      	push	{r7}
90007176:	b085      	sub	sp, #20
90007178:	af00      	add	r7, sp, #0
9000717a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000717c:	2300      	movs	r3, #0
9000717e:	60fb      	str	r3, [r7, #12]
90007180:	e016      	b.n	900071b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
90007182:	4a10      	ldr	r2, [pc, #64]	; (900071c4 <vQueueUnregisterQueue+0x50>)
90007184:	68fb      	ldr	r3, [r7, #12]
90007186:	00db      	lsls	r3, r3, #3
90007188:	4413      	add	r3, r2
9000718a:	685b      	ldr	r3, [r3, #4]
9000718c:	687a      	ldr	r2, [r7, #4]
9000718e:	429a      	cmp	r2, r3
90007190:	d10b      	bne.n	900071aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
90007192:	4a0c      	ldr	r2, [pc, #48]	; (900071c4 <vQueueUnregisterQueue+0x50>)
90007194:	68fb      	ldr	r3, [r7, #12]
90007196:	2100      	movs	r1, #0
90007198:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
9000719c:	4a09      	ldr	r2, [pc, #36]	; (900071c4 <vQueueUnregisterQueue+0x50>)
9000719e:	68fb      	ldr	r3, [r7, #12]
900071a0:	00db      	lsls	r3, r3, #3
900071a2:	4413      	add	r3, r2
900071a4:	2200      	movs	r2, #0
900071a6:	605a      	str	r2, [r3, #4]
				break;
900071a8:	e006      	b.n	900071b8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900071aa:	68fb      	ldr	r3, [r7, #12]
900071ac:	3301      	adds	r3, #1
900071ae:	60fb      	str	r3, [r7, #12]
900071b0:	68fb      	ldr	r3, [r7, #12]
900071b2:	2b07      	cmp	r3, #7
900071b4:	d9e5      	bls.n	90007182 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
900071b6:	bf00      	nop
900071b8:	bf00      	nop
900071ba:	3714      	adds	r7, #20
900071bc:	46bd      	mov	sp, r7
900071be:	f85d 7b04 	ldr.w	r7, [sp], #4
900071c2:	4770      	bx	lr
900071c4:	20003a18 	.word	0x20003a18

900071c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
900071c8:	b580      	push	{r7, lr}
900071ca:	b086      	sub	sp, #24
900071cc:	af00      	add	r7, sp, #0
900071ce:	60f8      	str	r0, [r7, #12]
900071d0:	60b9      	str	r1, [r7, #8]
900071d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
900071d4:	68fb      	ldr	r3, [r7, #12]
900071d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
900071d8:	f001 fd00 	bl	90008bdc <vPortEnterCritical>
900071dc:	697b      	ldr	r3, [r7, #20]
900071de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900071e2:	b25b      	sxtb	r3, r3
900071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
900071e8:	d103      	bne.n	900071f2 <vQueueWaitForMessageRestricted+0x2a>
900071ea:	697b      	ldr	r3, [r7, #20]
900071ec:	2200      	movs	r2, #0
900071ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
900071f2:	697b      	ldr	r3, [r7, #20]
900071f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
900071f8:	b25b      	sxtb	r3, r3
900071fa:	f1b3 3fff 	cmp.w	r3, #4294967295
900071fe:	d103      	bne.n	90007208 <vQueueWaitForMessageRestricted+0x40>
90007200:	697b      	ldr	r3, [r7, #20]
90007202:	2200      	movs	r2, #0
90007204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90007208:	f001 fd1c 	bl	90008c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000720c:	697b      	ldr	r3, [r7, #20]
9000720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007210:	2b00      	cmp	r3, #0
90007212:	d106      	bne.n	90007222 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
90007214:	697b      	ldr	r3, [r7, #20]
90007216:	3324      	adds	r3, #36	; 0x24
90007218:	687a      	ldr	r2, [r7, #4]
9000721a:	68b9      	ldr	r1, [r7, #8]
9000721c:	4618      	mov	r0, r3
9000721e:	f000 fc89 	bl	90007b34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
90007222:	6978      	ldr	r0, [r7, #20]
90007224:	f7ff fefb 	bl	9000701e <prvUnlockQueue>
	}
90007228:	bf00      	nop
9000722a:	3718      	adds	r7, #24
9000722c:	46bd      	mov	sp, r7
9000722e:	bd80      	pop	{r7, pc}

90007230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
90007230:	b580      	push	{r7, lr}
90007232:	b08e      	sub	sp, #56	; 0x38
90007234:	af04      	add	r7, sp, #16
90007236:	60f8      	str	r0, [r7, #12]
90007238:	60b9      	str	r1, [r7, #8]
9000723a:	607a      	str	r2, [r7, #4]
9000723c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
9000723e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007240:	2b00      	cmp	r3, #0
90007242:	d10c      	bne.n	9000725e <xTaskCreateStatic+0x2e>
	__asm volatile
90007244:	f04f 0350 	mov.w	r3, #80	; 0x50
90007248:	b672      	cpsid	i
9000724a:	f383 8811 	msr	BASEPRI, r3
9000724e:	f3bf 8f6f 	isb	sy
90007252:	f3bf 8f4f 	dsb	sy
90007256:	b662      	cpsie	i
90007258:	623b      	str	r3, [r7, #32]
}
9000725a:	bf00      	nop
9000725c:	e7fe      	b.n	9000725c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
9000725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007260:	2b00      	cmp	r3, #0
90007262:	d10c      	bne.n	9000727e <xTaskCreateStatic+0x4e>
	__asm volatile
90007264:	f04f 0350 	mov.w	r3, #80	; 0x50
90007268:	b672      	cpsid	i
9000726a:	f383 8811 	msr	BASEPRI, r3
9000726e:	f3bf 8f6f 	isb	sy
90007272:	f3bf 8f4f 	dsb	sy
90007276:	b662      	cpsie	i
90007278:	61fb      	str	r3, [r7, #28]
}
9000727a:	bf00      	nop
9000727c:	e7fe      	b.n	9000727c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
9000727e:	23bc      	movs	r3, #188	; 0xbc
90007280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
90007282:	693b      	ldr	r3, [r7, #16]
90007284:	2bbc      	cmp	r3, #188	; 0xbc
90007286:	d00c      	beq.n	900072a2 <xTaskCreateStatic+0x72>
	__asm volatile
90007288:	f04f 0350 	mov.w	r3, #80	; 0x50
9000728c:	b672      	cpsid	i
9000728e:	f383 8811 	msr	BASEPRI, r3
90007292:	f3bf 8f6f 	isb	sy
90007296:	f3bf 8f4f 	dsb	sy
9000729a:	b662      	cpsie	i
9000729c:	61bb      	str	r3, [r7, #24]
}
9000729e:	bf00      	nop
900072a0:	e7fe      	b.n	900072a0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
900072a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
900072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900072a6:	2b00      	cmp	r3, #0
900072a8:	d01e      	beq.n	900072e8 <xTaskCreateStatic+0xb8>
900072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900072ac:	2b00      	cmp	r3, #0
900072ae:	d01b      	beq.n	900072e8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
900072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900072b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
900072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900072b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
900072b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
900072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900072bc:	2202      	movs	r2, #2
900072be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
900072c2:	2300      	movs	r3, #0
900072c4:	9303      	str	r3, [sp, #12]
900072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900072c8:	9302      	str	r3, [sp, #8]
900072ca:	f107 0314 	add.w	r3, r7, #20
900072ce:	9301      	str	r3, [sp, #4]
900072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900072d2:	9300      	str	r3, [sp, #0]
900072d4:	683b      	ldr	r3, [r7, #0]
900072d6:	687a      	ldr	r2, [r7, #4]
900072d8:	68b9      	ldr	r1, [r7, #8]
900072da:	68f8      	ldr	r0, [r7, #12]
900072dc:	f000 f850 	bl	90007380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
900072e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
900072e2:	f000 f8f5 	bl	900074d0 <prvAddNewTaskToReadyList>
900072e6:	e001      	b.n	900072ec <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
900072e8:	2300      	movs	r3, #0
900072ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
900072ec:	697b      	ldr	r3, [r7, #20]
	}
900072ee:	4618      	mov	r0, r3
900072f0:	3728      	adds	r7, #40	; 0x28
900072f2:	46bd      	mov	sp, r7
900072f4:	bd80      	pop	{r7, pc}

900072f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
900072f6:	b580      	push	{r7, lr}
900072f8:	b08c      	sub	sp, #48	; 0x30
900072fa:	af04      	add	r7, sp, #16
900072fc:	60f8      	str	r0, [r7, #12]
900072fe:	60b9      	str	r1, [r7, #8]
90007300:	603b      	str	r3, [r7, #0]
90007302:	4613      	mov	r3, r2
90007304:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90007306:	88fb      	ldrh	r3, [r7, #6]
90007308:	009b      	lsls	r3, r3, #2
9000730a:	4618      	mov	r0, r3
9000730c:	f001 fd92 	bl	90008e34 <pvPortMalloc>
90007310:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
90007312:	697b      	ldr	r3, [r7, #20]
90007314:	2b00      	cmp	r3, #0
90007316:	d00e      	beq.n	90007336 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90007318:	20bc      	movs	r0, #188	; 0xbc
9000731a:	f001 fd8b 	bl	90008e34 <pvPortMalloc>
9000731e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
90007320:	69fb      	ldr	r3, [r7, #28]
90007322:	2b00      	cmp	r3, #0
90007324:	d003      	beq.n	9000732e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
90007326:	69fb      	ldr	r3, [r7, #28]
90007328:	697a      	ldr	r2, [r7, #20]
9000732a:	631a      	str	r2, [r3, #48]	; 0x30
9000732c:	e005      	b.n	9000733a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
9000732e:	6978      	ldr	r0, [r7, #20]
90007330:	f001 fe4a 	bl	90008fc8 <vPortFree>
90007334:	e001      	b.n	9000733a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
90007336:	2300      	movs	r3, #0
90007338:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
9000733a:	69fb      	ldr	r3, [r7, #28]
9000733c:	2b00      	cmp	r3, #0
9000733e:	d017      	beq.n	90007370 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90007340:	69fb      	ldr	r3, [r7, #28]
90007342:	2200      	movs	r2, #0
90007344:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
90007348:	88fa      	ldrh	r2, [r7, #6]
9000734a:	2300      	movs	r3, #0
9000734c:	9303      	str	r3, [sp, #12]
9000734e:	69fb      	ldr	r3, [r7, #28]
90007350:	9302      	str	r3, [sp, #8]
90007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90007354:	9301      	str	r3, [sp, #4]
90007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007358:	9300      	str	r3, [sp, #0]
9000735a:	683b      	ldr	r3, [r7, #0]
9000735c:	68b9      	ldr	r1, [r7, #8]
9000735e:	68f8      	ldr	r0, [r7, #12]
90007360:	f000 f80e 	bl	90007380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
90007364:	69f8      	ldr	r0, [r7, #28]
90007366:	f000 f8b3 	bl	900074d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
9000736a:	2301      	movs	r3, #1
9000736c:	61bb      	str	r3, [r7, #24]
9000736e:	e002      	b.n	90007376 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90007370:	f04f 33ff 	mov.w	r3, #4294967295
90007374:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
90007376:	69bb      	ldr	r3, [r7, #24]
	}
90007378:	4618      	mov	r0, r3
9000737a:	3720      	adds	r7, #32
9000737c:	46bd      	mov	sp, r7
9000737e:	bd80      	pop	{r7, pc}

90007380 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
90007380:	b580      	push	{r7, lr}
90007382:	b088      	sub	sp, #32
90007384:	af00      	add	r7, sp, #0
90007386:	60f8      	str	r0, [r7, #12]
90007388:	60b9      	str	r1, [r7, #8]
9000738a:	607a      	str	r2, [r7, #4]
9000738c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007390:	6b18      	ldr	r0, [r3, #48]	; 0x30
90007392:	687b      	ldr	r3, [r7, #4]
90007394:	009b      	lsls	r3, r3, #2
90007396:	461a      	mov	r2, r3
90007398:	21a5      	movs	r1, #165	; 0xa5
9000739a:	f00f fb69 	bl	90016a70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900073a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900073a2:	6879      	ldr	r1, [r7, #4]
900073a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
900073a8:	440b      	add	r3, r1
900073aa:	009b      	lsls	r3, r3, #2
900073ac:	4413      	add	r3, r2
900073ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
900073b0:	69bb      	ldr	r3, [r7, #24]
900073b2:	f023 0307 	bic.w	r3, r3, #7
900073b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
900073b8:	69bb      	ldr	r3, [r7, #24]
900073ba:	f003 0307 	and.w	r3, r3, #7
900073be:	2b00      	cmp	r3, #0
900073c0:	d00c      	beq.n	900073dc <prvInitialiseNewTask+0x5c>
	__asm volatile
900073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
900073c6:	b672      	cpsid	i
900073c8:	f383 8811 	msr	BASEPRI, r3
900073cc:	f3bf 8f6f 	isb	sy
900073d0:	f3bf 8f4f 	dsb	sy
900073d4:	b662      	cpsie	i
900073d6:	617b      	str	r3, [r7, #20]
}
900073d8:	bf00      	nop
900073da:	e7fe      	b.n	900073da <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
900073dc:	68bb      	ldr	r3, [r7, #8]
900073de:	2b00      	cmp	r3, #0
900073e0:	d01f      	beq.n	90007422 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
900073e2:	2300      	movs	r3, #0
900073e4:	61fb      	str	r3, [r7, #28]
900073e6:	e012      	b.n	9000740e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900073e8:	68ba      	ldr	r2, [r7, #8]
900073ea:	69fb      	ldr	r3, [r7, #28]
900073ec:	4413      	add	r3, r2
900073ee:	7819      	ldrb	r1, [r3, #0]
900073f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
900073f2:	69fb      	ldr	r3, [r7, #28]
900073f4:	4413      	add	r3, r2
900073f6:	3334      	adds	r3, #52	; 0x34
900073f8:	460a      	mov	r2, r1
900073fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
900073fc:	68ba      	ldr	r2, [r7, #8]
900073fe:	69fb      	ldr	r3, [r7, #28]
90007400:	4413      	add	r3, r2
90007402:	781b      	ldrb	r3, [r3, #0]
90007404:	2b00      	cmp	r3, #0
90007406:	d006      	beq.n	90007416 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
90007408:	69fb      	ldr	r3, [r7, #28]
9000740a:	3301      	adds	r3, #1
9000740c:	61fb      	str	r3, [r7, #28]
9000740e:	69fb      	ldr	r3, [r7, #28]
90007410:	2b0f      	cmp	r3, #15
90007412:	d9e9      	bls.n	900073e8 <prvInitialiseNewTask+0x68>
90007414:	e000      	b.n	90007418 <prvInitialiseNewTask+0x98>
			{
				break;
90007416:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000741a:	2200      	movs	r2, #0
9000741c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
90007420:	e003      	b.n	9000742a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007424:	2200      	movs	r2, #0
90007426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000742c:	2b37      	cmp	r3, #55	; 0x37
9000742e:	d901      	bls.n	90007434 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
90007430:	2337      	movs	r3, #55	; 0x37
90007432:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
90007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007436:	6aba      	ldr	r2, [r7, #40]	; 0x28
90007438:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
9000743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000743c:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000743e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
90007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007442:	2200      	movs	r2, #0
90007444:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007448:	3304      	adds	r3, #4
9000744a:	4618      	mov	r0, r3
9000744c:	f7fe fd0c 	bl	90005e68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007452:	3318      	adds	r3, #24
90007454:	4618      	mov	r0, r3
90007456:	f7fe fd07 	bl	90005e68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000745c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000745e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007462:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
90007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000746c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000746e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
90007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007472:	2200      	movs	r2, #0
90007474:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000747a:	2200      	movs	r2, #0
9000747c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
90007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007482:	3354      	adds	r3, #84	; 0x54
90007484:	2260      	movs	r2, #96	; 0x60
90007486:	2100      	movs	r1, #0
90007488:	4618      	mov	r0, r3
9000748a:	f00f faf1 	bl	90016a70 <memset>
9000748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007490:	4a0c      	ldr	r2, [pc, #48]	; (900074c4 <prvInitialiseNewTask+0x144>)
90007492:	659a      	str	r2, [r3, #88]	; 0x58
90007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007496:	4a0c      	ldr	r2, [pc, #48]	; (900074c8 <prvInitialiseNewTask+0x148>)
90007498:	65da      	str	r2, [r3, #92]	; 0x5c
9000749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000749c:	4a0b      	ldr	r2, [pc, #44]	; (900074cc <prvInitialiseNewTask+0x14c>)
9000749e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900074a0:	683a      	ldr	r2, [r7, #0]
900074a2:	68f9      	ldr	r1, [r7, #12]
900074a4:	69b8      	ldr	r0, [r7, #24]
900074a6:	f001 fa8f 	bl	900089c8 <pxPortInitialiseStack>
900074aa:	4602      	mov	r2, r0
900074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900074ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
900074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900074b2:	2b00      	cmp	r3, #0
900074b4:	d002      	beq.n	900074bc <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
900074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900074b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
900074ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
900074bc:	bf00      	nop
900074be:	3720      	adds	r7, #32
900074c0:	46bd      	mov	sp, r7
900074c2:	bd80      	pop	{r7, pc}
900074c4:	9001be08 	.word	0x9001be08
900074c8:	9001be28 	.word	0x9001be28
900074cc:	9001bde8 	.word	0x9001bde8

900074d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
900074d0:	b580      	push	{r7, lr}
900074d2:	b082      	sub	sp, #8
900074d4:	af00      	add	r7, sp, #0
900074d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
900074d8:	f001 fb80 	bl	90008bdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
900074dc:	4b2d      	ldr	r3, [pc, #180]	; (90007594 <prvAddNewTaskToReadyList+0xc4>)
900074de:	681b      	ldr	r3, [r3, #0]
900074e0:	3301      	adds	r3, #1
900074e2:	4a2c      	ldr	r2, [pc, #176]	; (90007594 <prvAddNewTaskToReadyList+0xc4>)
900074e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
900074e6:	4b2c      	ldr	r3, [pc, #176]	; (90007598 <prvAddNewTaskToReadyList+0xc8>)
900074e8:	681b      	ldr	r3, [r3, #0]
900074ea:	2b00      	cmp	r3, #0
900074ec:	d109      	bne.n	90007502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
900074ee:	4a2a      	ldr	r2, [pc, #168]	; (90007598 <prvAddNewTaskToReadyList+0xc8>)
900074f0:	687b      	ldr	r3, [r7, #4]
900074f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
900074f4:	4b27      	ldr	r3, [pc, #156]	; (90007594 <prvAddNewTaskToReadyList+0xc4>)
900074f6:	681b      	ldr	r3, [r3, #0]
900074f8:	2b01      	cmp	r3, #1
900074fa:	d110      	bne.n	9000751e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
900074fc:	f000 fc4e 	bl	90007d9c <prvInitialiseTaskLists>
90007500:	e00d      	b.n	9000751e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
90007502:	4b26      	ldr	r3, [pc, #152]	; (9000759c <prvAddNewTaskToReadyList+0xcc>)
90007504:	681b      	ldr	r3, [r3, #0]
90007506:	2b00      	cmp	r3, #0
90007508:	d109      	bne.n	9000751e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000750a:	4b23      	ldr	r3, [pc, #140]	; (90007598 <prvAddNewTaskToReadyList+0xc8>)
9000750c:	681b      	ldr	r3, [r3, #0]
9000750e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007510:	687b      	ldr	r3, [r7, #4]
90007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007514:	429a      	cmp	r2, r3
90007516:	d802      	bhi.n	9000751e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
90007518:	4a1f      	ldr	r2, [pc, #124]	; (90007598 <prvAddNewTaskToReadyList+0xc8>)
9000751a:	687b      	ldr	r3, [r7, #4]
9000751c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
9000751e:	4b20      	ldr	r3, [pc, #128]	; (900075a0 <prvAddNewTaskToReadyList+0xd0>)
90007520:	681b      	ldr	r3, [r3, #0]
90007522:	3301      	adds	r3, #1
90007524:	4a1e      	ldr	r2, [pc, #120]	; (900075a0 <prvAddNewTaskToReadyList+0xd0>)
90007526:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
90007528:	4b1d      	ldr	r3, [pc, #116]	; (900075a0 <prvAddNewTaskToReadyList+0xd0>)
9000752a:	681a      	ldr	r2, [r3, #0]
9000752c:	687b      	ldr	r3, [r7, #4]
9000752e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
90007530:	687b      	ldr	r3, [r7, #4]
90007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007534:	4b1b      	ldr	r3, [pc, #108]	; (900075a4 <prvAddNewTaskToReadyList+0xd4>)
90007536:	681b      	ldr	r3, [r3, #0]
90007538:	429a      	cmp	r2, r3
9000753a:	d903      	bls.n	90007544 <prvAddNewTaskToReadyList+0x74>
9000753c:	687b      	ldr	r3, [r7, #4]
9000753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007540:	4a18      	ldr	r2, [pc, #96]	; (900075a4 <prvAddNewTaskToReadyList+0xd4>)
90007542:	6013      	str	r3, [r2, #0]
90007544:	687b      	ldr	r3, [r7, #4]
90007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007548:	4613      	mov	r3, r2
9000754a:	009b      	lsls	r3, r3, #2
9000754c:	4413      	add	r3, r2
9000754e:	009b      	lsls	r3, r3, #2
90007550:	4a15      	ldr	r2, [pc, #84]	; (900075a8 <prvAddNewTaskToReadyList+0xd8>)
90007552:	441a      	add	r2, r3
90007554:	687b      	ldr	r3, [r7, #4]
90007556:	3304      	adds	r3, #4
90007558:	4619      	mov	r1, r3
9000755a:	4610      	mov	r0, r2
9000755c:	f7fe fc91 	bl	90005e82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
90007560:	f001 fb70 	bl	90008c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
90007564:	4b0d      	ldr	r3, [pc, #52]	; (9000759c <prvAddNewTaskToReadyList+0xcc>)
90007566:	681b      	ldr	r3, [r3, #0]
90007568:	2b00      	cmp	r3, #0
9000756a:	d00e      	beq.n	9000758a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000756c:	4b0a      	ldr	r3, [pc, #40]	; (90007598 <prvAddNewTaskToReadyList+0xc8>)
9000756e:	681b      	ldr	r3, [r3, #0]
90007570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007572:	687b      	ldr	r3, [r7, #4]
90007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007576:	429a      	cmp	r2, r3
90007578:	d207      	bcs.n	9000758a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000757a:	4b0c      	ldr	r3, [pc, #48]	; (900075ac <prvAddNewTaskToReadyList+0xdc>)
9000757c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007580:	601a      	str	r2, [r3, #0]
90007582:	f3bf 8f4f 	dsb	sy
90007586:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000758a:	bf00      	nop
9000758c:	3708      	adds	r7, #8
9000758e:	46bd      	mov	sp, r7
90007590:	bd80      	pop	{r7, pc}
90007592:	bf00      	nop
90007594:	20003f2c 	.word	0x20003f2c
90007598:	20003a58 	.word	0x20003a58
9000759c:	20003f38 	.word	0x20003f38
900075a0:	20003f48 	.word	0x20003f48
900075a4:	20003f34 	.word	0x20003f34
900075a8:	20003a5c 	.word	0x20003a5c
900075ac:	e000ed04 	.word	0xe000ed04

900075b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
900075b0:	b580      	push	{r7, lr}
900075b2:	b084      	sub	sp, #16
900075b4:	af00      	add	r7, sp, #0
900075b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
900075b8:	2300      	movs	r3, #0
900075ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
900075bc:	687b      	ldr	r3, [r7, #4]
900075be:	2b00      	cmp	r3, #0
900075c0:	d019      	beq.n	900075f6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
900075c2:	4b14      	ldr	r3, [pc, #80]	; (90007614 <vTaskDelay+0x64>)
900075c4:	681b      	ldr	r3, [r3, #0]
900075c6:	2b00      	cmp	r3, #0
900075c8:	d00c      	beq.n	900075e4 <vTaskDelay+0x34>
	__asm volatile
900075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
900075ce:	b672      	cpsid	i
900075d0:	f383 8811 	msr	BASEPRI, r3
900075d4:	f3bf 8f6f 	isb	sy
900075d8:	f3bf 8f4f 	dsb	sy
900075dc:	b662      	cpsie	i
900075de:	60bb      	str	r3, [r7, #8]
}
900075e0:	bf00      	nop
900075e2:	e7fe      	b.n	900075e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
900075e4:	f000 f88e 	bl	90007704 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
900075e8:	2100      	movs	r1, #0
900075ea:	6878      	ldr	r0, [r7, #4]
900075ec:	f000 fe3c 	bl	90008268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
900075f0:	f000 f896 	bl	90007720 <xTaskResumeAll>
900075f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
900075f6:	68fb      	ldr	r3, [r7, #12]
900075f8:	2b00      	cmp	r3, #0
900075fa:	d107      	bne.n	9000760c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
900075fc:	4b06      	ldr	r3, [pc, #24]	; (90007618 <vTaskDelay+0x68>)
900075fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007602:	601a      	str	r2, [r3, #0]
90007604:	f3bf 8f4f 	dsb	sy
90007608:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
9000760c:	bf00      	nop
9000760e:	3710      	adds	r7, #16
90007610:	46bd      	mov	sp, r7
90007612:	bd80      	pop	{r7, pc}
90007614:	20003f54 	.word	0x20003f54
90007618:	e000ed04 	.word	0xe000ed04

9000761c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
9000761c:	b580      	push	{r7, lr}
9000761e:	b08a      	sub	sp, #40	; 0x28
90007620:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
90007622:	2300      	movs	r3, #0
90007624:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
90007626:	2300      	movs	r3, #0
90007628:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000762a:	463a      	mov	r2, r7
9000762c:	1d39      	adds	r1, r7, #4
9000762e:	f107 0308 	add.w	r3, r7, #8
90007632:	4618      	mov	r0, r3
90007634:	f7fe fbc4 	bl	90005dc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
90007638:	6839      	ldr	r1, [r7, #0]
9000763a:	687b      	ldr	r3, [r7, #4]
9000763c:	68ba      	ldr	r2, [r7, #8]
9000763e:	9202      	str	r2, [sp, #8]
90007640:	9301      	str	r3, [sp, #4]
90007642:	2300      	movs	r3, #0
90007644:	9300      	str	r3, [sp, #0]
90007646:	2300      	movs	r3, #0
90007648:	460a      	mov	r2, r1
9000764a:	4926      	ldr	r1, [pc, #152]	; (900076e4 <vTaskStartScheduler+0xc8>)
9000764c:	4826      	ldr	r0, [pc, #152]	; (900076e8 <vTaskStartScheduler+0xcc>)
9000764e:	f7ff fdef 	bl	90007230 <xTaskCreateStatic>
90007652:	4603      	mov	r3, r0
90007654:	4a25      	ldr	r2, [pc, #148]	; (900076ec <vTaskStartScheduler+0xd0>)
90007656:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
90007658:	4b24      	ldr	r3, [pc, #144]	; (900076ec <vTaskStartScheduler+0xd0>)
9000765a:	681b      	ldr	r3, [r3, #0]
9000765c:	2b00      	cmp	r3, #0
9000765e:	d002      	beq.n	90007666 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
90007660:	2301      	movs	r3, #1
90007662:	617b      	str	r3, [r7, #20]
90007664:	e001      	b.n	9000766a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
90007666:	2300      	movs	r3, #0
90007668:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
9000766a:	697b      	ldr	r3, [r7, #20]
9000766c:	2b01      	cmp	r3, #1
9000766e:	d102      	bne.n	90007676 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
90007670:	f000 fe4e 	bl	90008310 <xTimerCreateTimerTask>
90007674:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
90007676:	697b      	ldr	r3, [r7, #20]
90007678:	2b01      	cmp	r3, #1
9000767a:	d11d      	bne.n	900076b8 <vTaskStartScheduler+0x9c>
	__asm volatile
9000767c:	f04f 0350 	mov.w	r3, #80	; 0x50
90007680:	b672      	cpsid	i
90007682:	f383 8811 	msr	BASEPRI, r3
90007686:	f3bf 8f6f 	isb	sy
9000768a:	f3bf 8f4f 	dsb	sy
9000768e:	b662      	cpsie	i
90007690:	613b      	str	r3, [r7, #16]
}
90007692:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
90007694:	4b16      	ldr	r3, [pc, #88]	; (900076f0 <vTaskStartScheduler+0xd4>)
90007696:	681b      	ldr	r3, [r3, #0]
90007698:	3354      	adds	r3, #84	; 0x54
9000769a:	4a16      	ldr	r2, [pc, #88]	; (900076f4 <vTaskStartScheduler+0xd8>)
9000769c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
9000769e:	4b16      	ldr	r3, [pc, #88]	; (900076f8 <vTaskStartScheduler+0xdc>)
900076a0:	f04f 32ff 	mov.w	r2, #4294967295
900076a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
900076a6:	4b15      	ldr	r3, [pc, #84]	; (900076fc <vTaskStartScheduler+0xe0>)
900076a8:	2201      	movs	r2, #1
900076aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
900076ac:	4b14      	ldr	r3, [pc, #80]	; (90007700 <vTaskStartScheduler+0xe4>)
900076ae:	2200      	movs	r2, #0
900076b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
900076b2:	f001 fa15 	bl	90008ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
900076b6:	e010      	b.n	900076da <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
900076b8:	697b      	ldr	r3, [r7, #20]
900076ba:	f1b3 3fff 	cmp.w	r3, #4294967295
900076be:	d10c      	bne.n	900076da <vTaskStartScheduler+0xbe>
	__asm volatile
900076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
900076c4:	b672      	cpsid	i
900076c6:	f383 8811 	msr	BASEPRI, r3
900076ca:	f3bf 8f6f 	isb	sy
900076ce:	f3bf 8f4f 	dsb	sy
900076d2:	b662      	cpsie	i
900076d4:	60fb      	str	r3, [r7, #12]
}
900076d6:	bf00      	nop
900076d8:	e7fe      	b.n	900076d8 <vTaskStartScheduler+0xbc>
}
900076da:	bf00      	nop
900076dc:	3718      	adds	r7, #24
900076de:	46bd      	mov	sp, r7
900076e0:	bd80      	pop	{r7, pc}
900076e2:	bf00      	nop
900076e4:	90017ae0 	.word	0x90017ae0
900076e8:	90007d6d 	.word	0x90007d6d
900076ec:	20003f50 	.word	0x20003f50
900076f0:	20003a58 	.word	0x20003a58
900076f4:	2000001c 	.word	0x2000001c
900076f8:	20003f4c 	.word	0x20003f4c
900076fc:	20003f38 	.word	0x20003f38
90007700:	20003f30 	.word	0x20003f30

90007704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
90007704:	b480      	push	{r7}
90007706:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
90007708:	4b04      	ldr	r3, [pc, #16]	; (9000771c <vTaskSuspendAll+0x18>)
9000770a:	681b      	ldr	r3, [r3, #0]
9000770c:	3301      	adds	r3, #1
9000770e:	4a03      	ldr	r2, [pc, #12]	; (9000771c <vTaskSuspendAll+0x18>)
90007710:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
90007712:	bf00      	nop
90007714:	46bd      	mov	sp, r7
90007716:	f85d 7b04 	ldr.w	r7, [sp], #4
9000771a:	4770      	bx	lr
9000771c:	20003f54 	.word	0x20003f54

90007720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
90007720:	b580      	push	{r7, lr}
90007722:	b084      	sub	sp, #16
90007724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
90007726:	2300      	movs	r3, #0
90007728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
9000772a:	2300      	movs	r3, #0
9000772c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
9000772e:	4b43      	ldr	r3, [pc, #268]	; (9000783c <xTaskResumeAll+0x11c>)
90007730:	681b      	ldr	r3, [r3, #0]
90007732:	2b00      	cmp	r3, #0
90007734:	d10c      	bne.n	90007750 <xTaskResumeAll+0x30>
	__asm volatile
90007736:	f04f 0350 	mov.w	r3, #80	; 0x50
9000773a:	b672      	cpsid	i
9000773c:	f383 8811 	msr	BASEPRI, r3
90007740:	f3bf 8f6f 	isb	sy
90007744:	f3bf 8f4f 	dsb	sy
90007748:	b662      	cpsie	i
9000774a:	603b      	str	r3, [r7, #0]
}
9000774c:	bf00      	nop
9000774e:	e7fe      	b.n	9000774e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
90007750:	f001 fa44 	bl	90008bdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
90007754:	4b39      	ldr	r3, [pc, #228]	; (9000783c <xTaskResumeAll+0x11c>)
90007756:	681b      	ldr	r3, [r3, #0]
90007758:	3b01      	subs	r3, #1
9000775a:	4a38      	ldr	r2, [pc, #224]	; (9000783c <xTaskResumeAll+0x11c>)
9000775c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000775e:	4b37      	ldr	r3, [pc, #220]	; (9000783c <xTaskResumeAll+0x11c>)
90007760:	681b      	ldr	r3, [r3, #0]
90007762:	2b00      	cmp	r3, #0
90007764:	d162      	bne.n	9000782c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
90007766:	4b36      	ldr	r3, [pc, #216]	; (90007840 <xTaskResumeAll+0x120>)
90007768:	681b      	ldr	r3, [r3, #0]
9000776a:	2b00      	cmp	r3, #0
9000776c:	d05e      	beq.n	9000782c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000776e:	e02f      	b.n	900077d0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90007770:	4b34      	ldr	r3, [pc, #208]	; (90007844 <xTaskResumeAll+0x124>)
90007772:	68db      	ldr	r3, [r3, #12]
90007774:	68db      	ldr	r3, [r3, #12]
90007776:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90007778:	68fb      	ldr	r3, [r7, #12]
9000777a:	3318      	adds	r3, #24
9000777c:	4618      	mov	r0, r3
9000777e:	f7fe fbdd 	bl	90005f3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90007782:	68fb      	ldr	r3, [r7, #12]
90007784:	3304      	adds	r3, #4
90007786:	4618      	mov	r0, r3
90007788:	f7fe fbd8 	bl	90005f3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000778c:	68fb      	ldr	r3, [r7, #12]
9000778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007790:	4b2d      	ldr	r3, [pc, #180]	; (90007848 <xTaskResumeAll+0x128>)
90007792:	681b      	ldr	r3, [r3, #0]
90007794:	429a      	cmp	r2, r3
90007796:	d903      	bls.n	900077a0 <xTaskResumeAll+0x80>
90007798:	68fb      	ldr	r3, [r7, #12]
9000779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000779c:	4a2a      	ldr	r2, [pc, #168]	; (90007848 <xTaskResumeAll+0x128>)
9000779e:	6013      	str	r3, [r2, #0]
900077a0:	68fb      	ldr	r3, [r7, #12]
900077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900077a4:	4613      	mov	r3, r2
900077a6:	009b      	lsls	r3, r3, #2
900077a8:	4413      	add	r3, r2
900077aa:	009b      	lsls	r3, r3, #2
900077ac:	4a27      	ldr	r2, [pc, #156]	; (9000784c <xTaskResumeAll+0x12c>)
900077ae:	441a      	add	r2, r3
900077b0:	68fb      	ldr	r3, [r7, #12]
900077b2:	3304      	adds	r3, #4
900077b4:	4619      	mov	r1, r3
900077b6:	4610      	mov	r0, r2
900077b8:	f7fe fb63 	bl	90005e82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
900077bc:	68fb      	ldr	r3, [r7, #12]
900077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900077c0:	4b23      	ldr	r3, [pc, #140]	; (90007850 <xTaskResumeAll+0x130>)
900077c2:	681b      	ldr	r3, [r3, #0]
900077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900077c6:	429a      	cmp	r2, r3
900077c8:	d302      	bcc.n	900077d0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
900077ca:	4b22      	ldr	r3, [pc, #136]	; (90007854 <xTaskResumeAll+0x134>)
900077cc:	2201      	movs	r2, #1
900077ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
900077d0:	4b1c      	ldr	r3, [pc, #112]	; (90007844 <xTaskResumeAll+0x124>)
900077d2:	681b      	ldr	r3, [r3, #0]
900077d4:	2b00      	cmp	r3, #0
900077d6:	d1cb      	bne.n	90007770 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
900077d8:	68fb      	ldr	r3, [r7, #12]
900077da:	2b00      	cmp	r3, #0
900077dc:	d001      	beq.n	900077e2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
900077de:	f000 fb81 	bl	90007ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
900077e2:	4b1d      	ldr	r3, [pc, #116]	; (90007858 <xTaskResumeAll+0x138>)
900077e4:	681b      	ldr	r3, [r3, #0]
900077e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
900077e8:	687b      	ldr	r3, [r7, #4]
900077ea:	2b00      	cmp	r3, #0
900077ec:	d010      	beq.n	90007810 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
900077ee:	f000 f859 	bl	900078a4 <xTaskIncrementTick>
900077f2:	4603      	mov	r3, r0
900077f4:	2b00      	cmp	r3, #0
900077f6:	d002      	beq.n	900077fe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
900077f8:	4b16      	ldr	r3, [pc, #88]	; (90007854 <xTaskResumeAll+0x134>)
900077fa:	2201      	movs	r2, #1
900077fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
900077fe:	687b      	ldr	r3, [r7, #4]
90007800:	3b01      	subs	r3, #1
90007802:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
90007804:	687b      	ldr	r3, [r7, #4]
90007806:	2b00      	cmp	r3, #0
90007808:	d1f1      	bne.n	900077ee <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
9000780a:	4b13      	ldr	r3, [pc, #76]	; (90007858 <xTaskResumeAll+0x138>)
9000780c:	2200      	movs	r2, #0
9000780e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
90007810:	4b10      	ldr	r3, [pc, #64]	; (90007854 <xTaskResumeAll+0x134>)
90007812:	681b      	ldr	r3, [r3, #0]
90007814:	2b00      	cmp	r3, #0
90007816:	d009      	beq.n	9000782c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
90007818:	2301      	movs	r3, #1
9000781a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
9000781c:	4b0f      	ldr	r3, [pc, #60]	; (9000785c <xTaskResumeAll+0x13c>)
9000781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007822:	601a      	str	r2, [r3, #0]
90007824:	f3bf 8f4f 	dsb	sy
90007828:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000782c:	f001 fa0a 	bl	90008c44 <vPortExitCritical>

	return xAlreadyYielded;
90007830:	68bb      	ldr	r3, [r7, #8]
}
90007832:	4618      	mov	r0, r3
90007834:	3710      	adds	r7, #16
90007836:	46bd      	mov	sp, r7
90007838:	bd80      	pop	{r7, pc}
9000783a:	bf00      	nop
9000783c:	20003f54 	.word	0x20003f54
90007840:	20003f2c 	.word	0x20003f2c
90007844:	20003eec 	.word	0x20003eec
90007848:	20003f34 	.word	0x20003f34
9000784c:	20003a5c 	.word	0x20003a5c
90007850:	20003a58 	.word	0x20003a58
90007854:	20003f40 	.word	0x20003f40
90007858:	20003f3c 	.word	0x20003f3c
9000785c:	e000ed04 	.word	0xe000ed04

90007860 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
90007860:	b480      	push	{r7}
90007862:	b083      	sub	sp, #12
90007864:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
90007866:	4b05      	ldr	r3, [pc, #20]	; (9000787c <xTaskGetTickCount+0x1c>)
90007868:	681b      	ldr	r3, [r3, #0]
9000786a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
9000786c:	687b      	ldr	r3, [r7, #4]
}
9000786e:	4618      	mov	r0, r3
90007870:	370c      	adds	r7, #12
90007872:	46bd      	mov	sp, r7
90007874:	f85d 7b04 	ldr.w	r7, [sp], #4
90007878:	4770      	bx	lr
9000787a:	bf00      	nop
9000787c:	20003f30 	.word	0x20003f30

90007880 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
90007880:	b580      	push	{r7, lr}
90007882:	b082      	sub	sp, #8
90007884:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90007886:	f001 fa91 	bl	90008dac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
9000788a:	2300      	movs	r3, #0
9000788c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
9000788e:	4b04      	ldr	r3, [pc, #16]	; (900078a0 <xTaskGetTickCountFromISR+0x20>)
90007890:	681b      	ldr	r3, [r3, #0]
90007892:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
90007894:	683b      	ldr	r3, [r7, #0]
}
90007896:	4618      	mov	r0, r3
90007898:	3708      	adds	r7, #8
9000789a:	46bd      	mov	sp, r7
9000789c:	bd80      	pop	{r7, pc}
9000789e:	bf00      	nop
900078a0:	20003f30 	.word	0x20003f30

900078a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
900078a4:	b580      	push	{r7, lr}
900078a6:	b086      	sub	sp, #24
900078a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
900078aa:	2300      	movs	r3, #0
900078ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900078ae:	4b50      	ldr	r3, [pc, #320]	; (900079f0 <xTaskIncrementTick+0x14c>)
900078b0:	681b      	ldr	r3, [r3, #0]
900078b2:	2b00      	cmp	r3, #0
900078b4:	f040 808b 	bne.w	900079ce <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
900078b8:	4b4e      	ldr	r3, [pc, #312]	; (900079f4 <xTaskIncrementTick+0x150>)
900078ba:	681b      	ldr	r3, [r3, #0]
900078bc:	3301      	adds	r3, #1
900078be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
900078c0:	4a4c      	ldr	r2, [pc, #304]	; (900079f4 <xTaskIncrementTick+0x150>)
900078c2:	693b      	ldr	r3, [r7, #16]
900078c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
900078c6:	693b      	ldr	r3, [r7, #16]
900078c8:	2b00      	cmp	r3, #0
900078ca:	d122      	bne.n	90007912 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
900078cc:	4b4a      	ldr	r3, [pc, #296]	; (900079f8 <xTaskIncrementTick+0x154>)
900078ce:	681b      	ldr	r3, [r3, #0]
900078d0:	681b      	ldr	r3, [r3, #0]
900078d2:	2b00      	cmp	r3, #0
900078d4:	d00c      	beq.n	900078f0 <xTaskIncrementTick+0x4c>
	__asm volatile
900078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
900078da:	b672      	cpsid	i
900078dc:	f383 8811 	msr	BASEPRI, r3
900078e0:	f3bf 8f6f 	isb	sy
900078e4:	f3bf 8f4f 	dsb	sy
900078e8:	b662      	cpsie	i
900078ea:	603b      	str	r3, [r7, #0]
}
900078ec:	bf00      	nop
900078ee:	e7fe      	b.n	900078ee <xTaskIncrementTick+0x4a>
900078f0:	4b41      	ldr	r3, [pc, #260]	; (900079f8 <xTaskIncrementTick+0x154>)
900078f2:	681b      	ldr	r3, [r3, #0]
900078f4:	60fb      	str	r3, [r7, #12]
900078f6:	4b41      	ldr	r3, [pc, #260]	; (900079fc <xTaskIncrementTick+0x158>)
900078f8:	681b      	ldr	r3, [r3, #0]
900078fa:	4a3f      	ldr	r2, [pc, #252]	; (900079f8 <xTaskIncrementTick+0x154>)
900078fc:	6013      	str	r3, [r2, #0]
900078fe:	4a3f      	ldr	r2, [pc, #252]	; (900079fc <xTaskIncrementTick+0x158>)
90007900:	68fb      	ldr	r3, [r7, #12]
90007902:	6013      	str	r3, [r2, #0]
90007904:	4b3e      	ldr	r3, [pc, #248]	; (90007a00 <xTaskIncrementTick+0x15c>)
90007906:	681b      	ldr	r3, [r3, #0]
90007908:	3301      	adds	r3, #1
9000790a:	4a3d      	ldr	r2, [pc, #244]	; (90007a00 <xTaskIncrementTick+0x15c>)
9000790c:	6013      	str	r3, [r2, #0]
9000790e:	f000 fae9 	bl	90007ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
90007912:	4b3c      	ldr	r3, [pc, #240]	; (90007a04 <xTaskIncrementTick+0x160>)
90007914:	681b      	ldr	r3, [r3, #0]
90007916:	693a      	ldr	r2, [r7, #16]
90007918:	429a      	cmp	r2, r3
9000791a:	d349      	bcc.n	900079b0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000791c:	4b36      	ldr	r3, [pc, #216]	; (900079f8 <xTaskIncrementTick+0x154>)
9000791e:	681b      	ldr	r3, [r3, #0]
90007920:	681b      	ldr	r3, [r3, #0]
90007922:	2b00      	cmp	r3, #0
90007924:	d104      	bne.n	90007930 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90007926:	4b37      	ldr	r3, [pc, #220]	; (90007a04 <xTaskIncrementTick+0x160>)
90007928:	f04f 32ff 	mov.w	r2, #4294967295
9000792c:	601a      	str	r2, [r3, #0]
					break;
9000792e:	e03f      	b.n	900079b0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90007930:	4b31      	ldr	r3, [pc, #196]	; (900079f8 <xTaskIncrementTick+0x154>)
90007932:	681b      	ldr	r3, [r3, #0]
90007934:	68db      	ldr	r3, [r3, #12]
90007936:	68db      	ldr	r3, [r3, #12]
90007938:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000793a:	68bb      	ldr	r3, [r7, #8]
9000793c:	685b      	ldr	r3, [r3, #4]
9000793e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
90007940:	693a      	ldr	r2, [r7, #16]
90007942:	687b      	ldr	r3, [r7, #4]
90007944:	429a      	cmp	r2, r3
90007946:	d203      	bcs.n	90007950 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
90007948:	4a2e      	ldr	r2, [pc, #184]	; (90007a04 <xTaskIncrementTick+0x160>)
9000794a:	687b      	ldr	r3, [r7, #4]
9000794c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000794e:	e02f      	b.n	900079b0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90007950:	68bb      	ldr	r3, [r7, #8]
90007952:	3304      	adds	r3, #4
90007954:	4618      	mov	r0, r3
90007956:	f7fe faf1 	bl	90005f3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000795a:	68bb      	ldr	r3, [r7, #8]
9000795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000795e:	2b00      	cmp	r3, #0
90007960:	d004      	beq.n	9000796c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90007962:	68bb      	ldr	r3, [r7, #8]
90007964:	3318      	adds	r3, #24
90007966:	4618      	mov	r0, r3
90007968:	f7fe fae8 	bl	90005f3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
9000796c:	68bb      	ldr	r3, [r7, #8]
9000796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007970:	4b25      	ldr	r3, [pc, #148]	; (90007a08 <xTaskIncrementTick+0x164>)
90007972:	681b      	ldr	r3, [r3, #0]
90007974:	429a      	cmp	r2, r3
90007976:	d903      	bls.n	90007980 <xTaskIncrementTick+0xdc>
90007978:	68bb      	ldr	r3, [r7, #8]
9000797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000797c:	4a22      	ldr	r2, [pc, #136]	; (90007a08 <xTaskIncrementTick+0x164>)
9000797e:	6013      	str	r3, [r2, #0]
90007980:	68bb      	ldr	r3, [r7, #8]
90007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007984:	4613      	mov	r3, r2
90007986:	009b      	lsls	r3, r3, #2
90007988:	4413      	add	r3, r2
9000798a:	009b      	lsls	r3, r3, #2
9000798c:	4a1f      	ldr	r2, [pc, #124]	; (90007a0c <xTaskIncrementTick+0x168>)
9000798e:	441a      	add	r2, r3
90007990:	68bb      	ldr	r3, [r7, #8]
90007992:	3304      	adds	r3, #4
90007994:	4619      	mov	r1, r3
90007996:	4610      	mov	r0, r2
90007998:	f7fe fa73 	bl	90005e82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000799c:	68bb      	ldr	r3, [r7, #8]
9000799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900079a0:	4b1b      	ldr	r3, [pc, #108]	; (90007a10 <xTaskIncrementTick+0x16c>)
900079a2:	681b      	ldr	r3, [r3, #0]
900079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900079a6:	429a      	cmp	r2, r3
900079a8:	d3b8      	bcc.n	9000791c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
900079aa:	2301      	movs	r3, #1
900079ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
900079ae:	e7b5      	b.n	9000791c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
900079b0:	4b17      	ldr	r3, [pc, #92]	; (90007a10 <xTaskIncrementTick+0x16c>)
900079b2:	681b      	ldr	r3, [r3, #0]
900079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900079b6:	4915      	ldr	r1, [pc, #84]	; (90007a0c <xTaskIncrementTick+0x168>)
900079b8:	4613      	mov	r3, r2
900079ba:	009b      	lsls	r3, r3, #2
900079bc:	4413      	add	r3, r2
900079be:	009b      	lsls	r3, r3, #2
900079c0:	440b      	add	r3, r1
900079c2:	681b      	ldr	r3, [r3, #0]
900079c4:	2b01      	cmp	r3, #1
900079c6:	d907      	bls.n	900079d8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
900079c8:	2301      	movs	r3, #1
900079ca:	617b      	str	r3, [r7, #20]
900079cc:	e004      	b.n	900079d8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
900079ce:	4b11      	ldr	r3, [pc, #68]	; (90007a14 <xTaskIncrementTick+0x170>)
900079d0:	681b      	ldr	r3, [r3, #0]
900079d2:	3301      	adds	r3, #1
900079d4:	4a0f      	ldr	r2, [pc, #60]	; (90007a14 <xTaskIncrementTick+0x170>)
900079d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
900079d8:	4b0f      	ldr	r3, [pc, #60]	; (90007a18 <xTaskIncrementTick+0x174>)
900079da:	681b      	ldr	r3, [r3, #0]
900079dc:	2b00      	cmp	r3, #0
900079de:	d001      	beq.n	900079e4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
900079e0:	2301      	movs	r3, #1
900079e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
900079e4:	697b      	ldr	r3, [r7, #20]
}
900079e6:	4618      	mov	r0, r3
900079e8:	3718      	adds	r7, #24
900079ea:	46bd      	mov	sp, r7
900079ec:	bd80      	pop	{r7, pc}
900079ee:	bf00      	nop
900079f0:	20003f54 	.word	0x20003f54
900079f4:	20003f30 	.word	0x20003f30
900079f8:	20003ee4 	.word	0x20003ee4
900079fc:	20003ee8 	.word	0x20003ee8
90007a00:	20003f44 	.word	0x20003f44
90007a04:	20003f4c 	.word	0x20003f4c
90007a08:	20003f34 	.word	0x20003f34
90007a0c:	20003a5c 	.word	0x20003a5c
90007a10:	20003a58 	.word	0x20003a58
90007a14:	20003f3c 	.word	0x20003f3c
90007a18:	20003f40 	.word	0x20003f40

90007a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
90007a1c:	b480      	push	{r7}
90007a1e:	b085      	sub	sp, #20
90007a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
90007a22:	4b2b      	ldr	r3, [pc, #172]	; (90007ad0 <vTaskSwitchContext+0xb4>)
90007a24:	681b      	ldr	r3, [r3, #0]
90007a26:	2b00      	cmp	r3, #0
90007a28:	d003      	beq.n	90007a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
90007a2a:	4b2a      	ldr	r3, [pc, #168]	; (90007ad4 <vTaskSwitchContext+0xb8>)
90007a2c:	2201      	movs	r2, #1
90007a2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
90007a30:	e048      	b.n	90007ac4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
90007a32:	4b28      	ldr	r3, [pc, #160]	; (90007ad4 <vTaskSwitchContext+0xb8>)
90007a34:	2200      	movs	r2, #0
90007a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90007a38:	4b27      	ldr	r3, [pc, #156]	; (90007ad8 <vTaskSwitchContext+0xbc>)
90007a3a:	681b      	ldr	r3, [r3, #0]
90007a3c:	60fb      	str	r3, [r7, #12]
90007a3e:	e012      	b.n	90007a66 <vTaskSwitchContext+0x4a>
90007a40:	68fb      	ldr	r3, [r7, #12]
90007a42:	2b00      	cmp	r3, #0
90007a44:	d10c      	bne.n	90007a60 <vTaskSwitchContext+0x44>
	__asm volatile
90007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
90007a4a:	b672      	cpsid	i
90007a4c:	f383 8811 	msr	BASEPRI, r3
90007a50:	f3bf 8f6f 	isb	sy
90007a54:	f3bf 8f4f 	dsb	sy
90007a58:	b662      	cpsie	i
90007a5a:	607b      	str	r3, [r7, #4]
}
90007a5c:	bf00      	nop
90007a5e:	e7fe      	b.n	90007a5e <vTaskSwitchContext+0x42>
90007a60:	68fb      	ldr	r3, [r7, #12]
90007a62:	3b01      	subs	r3, #1
90007a64:	60fb      	str	r3, [r7, #12]
90007a66:	491d      	ldr	r1, [pc, #116]	; (90007adc <vTaskSwitchContext+0xc0>)
90007a68:	68fa      	ldr	r2, [r7, #12]
90007a6a:	4613      	mov	r3, r2
90007a6c:	009b      	lsls	r3, r3, #2
90007a6e:	4413      	add	r3, r2
90007a70:	009b      	lsls	r3, r3, #2
90007a72:	440b      	add	r3, r1
90007a74:	681b      	ldr	r3, [r3, #0]
90007a76:	2b00      	cmp	r3, #0
90007a78:	d0e2      	beq.n	90007a40 <vTaskSwitchContext+0x24>
90007a7a:	68fa      	ldr	r2, [r7, #12]
90007a7c:	4613      	mov	r3, r2
90007a7e:	009b      	lsls	r3, r3, #2
90007a80:	4413      	add	r3, r2
90007a82:	009b      	lsls	r3, r3, #2
90007a84:	4a15      	ldr	r2, [pc, #84]	; (90007adc <vTaskSwitchContext+0xc0>)
90007a86:	4413      	add	r3, r2
90007a88:	60bb      	str	r3, [r7, #8]
90007a8a:	68bb      	ldr	r3, [r7, #8]
90007a8c:	685b      	ldr	r3, [r3, #4]
90007a8e:	685a      	ldr	r2, [r3, #4]
90007a90:	68bb      	ldr	r3, [r7, #8]
90007a92:	605a      	str	r2, [r3, #4]
90007a94:	68bb      	ldr	r3, [r7, #8]
90007a96:	685a      	ldr	r2, [r3, #4]
90007a98:	68bb      	ldr	r3, [r7, #8]
90007a9a:	3308      	adds	r3, #8
90007a9c:	429a      	cmp	r2, r3
90007a9e:	d104      	bne.n	90007aaa <vTaskSwitchContext+0x8e>
90007aa0:	68bb      	ldr	r3, [r7, #8]
90007aa2:	685b      	ldr	r3, [r3, #4]
90007aa4:	685a      	ldr	r2, [r3, #4]
90007aa6:	68bb      	ldr	r3, [r7, #8]
90007aa8:	605a      	str	r2, [r3, #4]
90007aaa:	68bb      	ldr	r3, [r7, #8]
90007aac:	685b      	ldr	r3, [r3, #4]
90007aae:	68db      	ldr	r3, [r3, #12]
90007ab0:	4a0b      	ldr	r2, [pc, #44]	; (90007ae0 <vTaskSwitchContext+0xc4>)
90007ab2:	6013      	str	r3, [r2, #0]
90007ab4:	4a08      	ldr	r2, [pc, #32]	; (90007ad8 <vTaskSwitchContext+0xbc>)
90007ab6:	68fb      	ldr	r3, [r7, #12]
90007ab8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
90007aba:	4b09      	ldr	r3, [pc, #36]	; (90007ae0 <vTaskSwitchContext+0xc4>)
90007abc:	681b      	ldr	r3, [r3, #0]
90007abe:	3354      	adds	r3, #84	; 0x54
90007ac0:	4a08      	ldr	r2, [pc, #32]	; (90007ae4 <vTaskSwitchContext+0xc8>)
90007ac2:	6013      	str	r3, [r2, #0]
}
90007ac4:	bf00      	nop
90007ac6:	3714      	adds	r7, #20
90007ac8:	46bd      	mov	sp, r7
90007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
90007ace:	4770      	bx	lr
90007ad0:	20003f54 	.word	0x20003f54
90007ad4:	20003f40 	.word	0x20003f40
90007ad8:	20003f34 	.word	0x20003f34
90007adc:	20003a5c 	.word	0x20003a5c
90007ae0:	20003a58 	.word	0x20003a58
90007ae4:	2000001c 	.word	0x2000001c

90007ae8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
90007ae8:	b580      	push	{r7, lr}
90007aea:	b084      	sub	sp, #16
90007aec:	af00      	add	r7, sp, #0
90007aee:	6078      	str	r0, [r7, #4]
90007af0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
90007af2:	687b      	ldr	r3, [r7, #4]
90007af4:	2b00      	cmp	r3, #0
90007af6:	d10c      	bne.n	90007b12 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
90007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
90007afc:	b672      	cpsid	i
90007afe:	f383 8811 	msr	BASEPRI, r3
90007b02:	f3bf 8f6f 	isb	sy
90007b06:	f3bf 8f4f 	dsb	sy
90007b0a:	b662      	cpsie	i
90007b0c:	60fb      	str	r3, [r7, #12]
}
90007b0e:	bf00      	nop
90007b10:	e7fe      	b.n	90007b10 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90007b12:	4b07      	ldr	r3, [pc, #28]	; (90007b30 <vTaskPlaceOnEventList+0x48>)
90007b14:	681b      	ldr	r3, [r3, #0]
90007b16:	3318      	adds	r3, #24
90007b18:	4619      	mov	r1, r3
90007b1a:	6878      	ldr	r0, [r7, #4]
90007b1c:	f7fe f9d5 	bl	90005eca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
90007b20:	2101      	movs	r1, #1
90007b22:	6838      	ldr	r0, [r7, #0]
90007b24:	f000 fba0 	bl	90008268 <prvAddCurrentTaskToDelayedList>
}
90007b28:	bf00      	nop
90007b2a:	3710      	adds	r7, #16
90007b2c:	46bd      	mov	sp, r7
90007b2e:	bd80      	pop	{r7, pc}
90007b30:	20003a58 	.word	0x20003a58

90007b34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
90007b34:	b580      	push	{r7, lr}
90007b36:	b086      	sub	sp, #24
90007b38:	af00      	add	r7, sp, #0
90007b3a:	60f8      	str	r0, [r7, #12]
90007b3c:	60b9      	str	r1, [r7, #8]
90007b3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
90007b40:	68fb      	ldr	r3, [r7, #12]
90007b42:	2b00      	cmp	r3, #0
90007b44:	d10c      	bne.n	90007b60 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
90007b46:	f04f 0350 	mov.w	r3, #80	; 0x50
90007b4a:	b672      	cpsid	i
90007b4c:	f383 8811 	msr	BASEPRI, r3
90007b50:	f3bf 8f6f 	isb	sy
90007b54:	f3bf 8f4f 	dsb	sy
90007b58:	b662      	cpsie	i
90007b5a:	617b      	str	r3, [r7, #20]
}
90007b5c:	bf00      	nop
90007b5e:	e7fe      	b.n	90007b5e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90007b60:	4b0a      	ldr	r3, [pc, #40]	; (90007b8c <vTaskPlaceOnEventListRestricted+0x58>)
90007b62:	681b      	ldr	r3, [r3, #0]
90007b64:	3318      	adds	r3, #24
90007b66:	4619      	mov	r1, r3
90007b68:	68f8      	ldr	r0, [r7, #12]
90007b6a:	f7fe f98a 	bl	90005e82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
90007b6e:	687b      	ldr	r3, [r7, #4]
90007b70:	2b00      	cmp	r3, #0
90007b72:	d002      	beq.n	90007b7a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
90007b74:	f04f 33ff 	mov.w	r3, #4294967295
90007b78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
90007b7a:	6879      	ldr	r1, [r7, #4]
90007b7c:	68b8      	ldr	r0, [r7, #8]
90007b7e:	f000 fb73 	bl	90008268 <prvAddCurrentTaskToDelayedList>
	}
90007b82:	bf00      	nop
90007b84:	3718      	adds	r7, #24
90007b86:	46bd      	mov	sp, r7
90007b88:	bd80      	pop	{r7, pc}
90007b8a:	bf00      	nop
90007b8c:	20003a58 	.word	0x20003a58

90007b90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
90007b90:	b580      	push	{r7, lr}
90007b92:	b086      	sub	sp, #24
90007b94:	af00      	add	r7, sp, #0
90007b96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90007b98:	687b      	ldr	r3, [r7, #4]
90007b9a:	68db      	ldr	r3, [r3, #12]
90007b9c:	68db      	ldr	r3, [r3, #12]
90007b9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
90007ba0:	693b      	ldr	r3, [r7, #16]
90007ba2:	2b00      	cmp	r3, #0
90007ba4:	d10c      	bne.n	90007bc0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
90007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
90007baa:	b672      	cpsid	i
90007bac:	f383 8811 	msr	BASEPRI, r3
90007bb0:	f3bf 8f6f 	isb	sy
90007bb4:	f3bf 8f4f 	dsb	sy
90007bb8:	b662      	cpsie	i
90007bba:	60fb      	str	r3, [r7, #12]
}
90007bbc:	bf00      	nop
90007bbe:	e7fe      	b.n	90007bbe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
90007bc0:	693b      	ldr	r3, [r7, #16]
90007bc2:	3318      	adds	r3, #24
90007bc4:	4618      	mov	r0, r3
90007bc6:	f7fe f9b9 	bl	90005f3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90007bca:	4b1e      	ldr	r3, [pc, #120]	; (90007c44 <xTaskRemoveFromEventList+0xb4>)
90007bcc:	681b      	ldr	r3, [r3, #0]
90007bce:	2b00      	cmp	r3, #0
90007bd0:	d11d      	bne.n	90007c0e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
90007bd2:	693b      	ldr	r3, [r7, #16]
90007bd4:	3304      	adds	r3, #4
90007bd6:	4618      	mov	r0, r3
90007bd8:	f7fe f9b0 	bl	90005f3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
90007bdc:	693b      	ldr	r3, [r7, #16]
90007bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007be0:	4b19      	ldr	r3, [pc, #100]	; (90007c48 <xTaskRemoveFromEventList+0xb8>)
90007be2:	681b      	ldr	r3, [r3, #0]
90007be4:	429a      	cmp	r2, r3
90007be6:	d903      	bls.n	90007bf0 <xTaskRemoveFromEventList+0x60>
90007be8:	693b      	ldr	r3, [r7, #16]
90007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007bec:	4a16      	ldr	r2, [pc, #88]	; (90007c48 <xTaskRemoveFromEventList+0xb8>)
90007bee:	6013      	str	r3, [r2, #0]
90007bf0:	693b      	ldr	r3, [r7, #16]
90007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007bf4:	4613      	mov	r3, r2
90007bf6:	009b      	lsls	r3, r3, #2
90007bf8:	4413      	add	r3, r2
90007bfa:	009b      	lsls	r3, r3, #2
90007bfc:	4a13      	ldr	r2, [pc, #76]	; (90007c4c <xTaskRemoveFromEventList+0xbc>)
90007bfe:	441a      	add	r2, r3
90007c00:	693b      	ldr	r3, [r7, #16]
90007c02:	3304      	adds	r3, #4
90007c04:	4619      	mov	r1, r3
90007c06:	4610      	mov	r0, r2
90007c08:	f7fe f93b 	bl	90005e82 <vListInsertEnd>
90007c0c:	e005      	b.n	90007c1a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
90007c0e:	693b      	ldr	r3, [r7, #16]
90007c10:	3318      	adds	r3, #24
90007c12:	4619      	mov	r1, r3
90007c14:	480e      	ldr	r0, [pc, #56]	; (90007c50 <xTaskRemoveFromEventList+0xc0>)
90007c16:	f7fe f934 	bl	90005e82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
90007c1a:	693b      	ldr	r3, [r7, #16]
90007c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007c1e:	4b0d      	ldr	r3, [pc, #52]	; (90007c54 <xTaskRemoveFromEventList+0xc4>)
90007c20:	681b      	ldr	r3, [r3, #0]
90007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007c24:	429a      	cmp	r2, r3
90007c26:	d905      	bls.n	90007c34 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
90007c28:	2301      	movs	r3, #1
90007c2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
90007c2c:	4b0a      	ldr	r3, [pc, #40]	; (90007c58 <xTaskRemoveFromEventList+0xc8>)
90007c2e:	2201      	movs	r2, #1
90007c30:	601a      	str	r2, [r3, #0]
90007c32:	e001      	b.n	90007c38 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
90007c34:	2300      	movs	r3, #0
90007c36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
90007c38:	697b      	ldr	r3, [r7, #20]
}
90007c3a:	4618      	mov	r0, r3
90007c3c:	3718      	adds	r7, #24
90007c3e:	46bd      	mov	sp, r7
90007c40:	bd80      	pop	{r7, pc}
90007c42:	bf00      	nop
90007c44:	20003f54 	.word	0x20003f54
90007c48:	20003f34 	.word	0x20003f34
90007c4c:	20003a5c 	.word	0x20003a5c
90007c50:	20003eec 	.word	0x20003eec
90007c54:	20003a58 	.word	0x20003a58
90007c58:	20003f40 	.word	0x20003f40

90007c5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
90007c5c:	b480      	push	{r7}
90007c5e:	b083      	sub	sp, #12
90007c60:	af00      	add	r7, sp, #0
90007c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90007c64:	4b06      	ldr	r3, [pc, #24]	; (90007c80 <vTaskInternalSetTimeOutState+0x24>)
90007c66:	681a      	ldr	r2, [r3, #0]
90007c68:	687b      	ldr	r3, [r7, #4]
90007c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90007c6c:	4b05      	ldr	r3, [pc, #20]	; (90007c84 <vTaskInternalSetTimeOutState+0x28>)
90007c6e:	681a      	ldr	r2, [r3, #0]
90007c70:	687b      	ldr	r3, [r7, #4]
90007c72:	605a      	str	r2, [r3, #4]
}
90007c74:	bf00      	nop
90007c76:	370c      	adds	r7, #12
90007c78:	46bd      	mov	sp, r7
90007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90007c7e:	4770      	bx	lr
90007c80:	20003f44 	.word	0x20003f44
90007c84:	20003f30 	.word	0x20003f30

90007c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
90007c88:	b580      	push	{r7, lr}
90007c8a:	b088      	sub	sp, #32
90007c8c:	af00      	add	r7, sp, #0
90007c8e:	6078      	str	r0, [r7, #4]
90007c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
90007c92:	687b      	ldr	r3, [r7, #4]
90007c94:	2b00      	cmp	r3, #0
90007c96:	d10c      	bne.n	90007cb2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
90007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
90007c9c:	b672      	cpsid	i
90007c9e:	f383 8811 	msr	BASEPRI, r3
90007ca2:	f3bf 8f6f 	isb	sy
90007ca6:	f3bf 8f4f 	dsb	sy
90007caa:	b662      	cpsie	i
90007cac:	613b      	str	r3, [r7, #16]
}
90007cae:	bf00      	nop
90007cb0:	e7fe      	b.n	90007cb0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
90007cb2:	683b      	ldr	r3, [r7, #0]
90007cb4:	2b00      	cmp	r3, #0
90007cb6:	d10c      	bne.n	90007cd2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
90007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
90007cbc:	b672      	cpsid	i
90007cbe:	f383 8811 	msr	BASEPRI, r3
90007cc2:	f3bf 8f6f 	isb	sy
90007cc6:	f3bf 8f4f 	dsb	sy
90007cca:	b662      	cpsie	i
90007ccc:	60fb      	str	r3, [r7, #12]
}
90007cce:	bf00      	nop
90007cd0:	e7fe      	b.n	90007cd0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
90007cd2:	f000 ff83 	bl	90008bdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
90007cd6:	4b1d      	ldr	r3, [pc, #116]	; (90007d4c <xTaskCheckForTimeOut+0xc4>)
90007cd8:	681b      	ldr	r3, [r3, #0]
90007cda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90007cdc:	687b      	ldr	r3, [r7, #4]
90007cde:	685b      	ldr	r3, [r3, #4]
90007ce0:	69ba      	ldr	r2, [r7, #24]
90007ce2:	1ad3      	subs	r3, r2, r3
90007ce4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
90007ce6:	683b      	ldr	r3, [r7, #0]
90007ce8:	681b      	ldr	r3, [r3, #0]
90007cea:	f1b3 3fff 	cmp.w	r3, #4294967295
90007cee:	d102      	bne.n	90007cf6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
90007cf0:	2300      	movs	r3, #0
90007cf2:	61fb      	str	r3, [r7, #28]
90007cf4:	e023      	b.n	90007d3e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90007cf6:	687b      	ldr	r3, [r7, #4]
90007cf8:	681a      	ldr	r2, [r3, #0]
90007cfa:	4b15      	ldr	r3, [pc, #84]	; (90007d50 <xTaskCheckForTimeOut+0xc8>)
90007cfc:	681b      	ldr	r3, [r3, #0]
90007cfe:	429a      	cmp	r2, r3
90007d00:	d007      	beq.n	90007d12 <xTaskCheckForTimeOut+0x8a>
90007d02:	687b      	ldr	r3, [r7, #4]
90007d04:	685b      	ldr	r3, [r3, #4]
90007d06:	69ba      	ldr	r2, [r7, #24]
90007d08:	429a      	cmp	r2, r3
90007d0a:	d302      	bcc.n	90007d12 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
90007d0c:	2301      	movs	r3, #1
90007d0e:	61fb      	str	r3, [r7, #28]
90007d10:	e015      	b.n	90007d3e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
90007d12:	683b      	ldr	r3, [r7, #0]
90007d14:	681b      	ldr	r3, [r3, #0]
90007d16:	697a      	ldr	r2, [r7, #20]
90007d18:	429a      	cmp	r2, r3
90007d1a:	d20b      	bcs.n	90007d34 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
90007d1c:	683b      	ldr	r3, [r7, #0]
90007d1e:	681a      	ldr	r2, [r3, #0]
90007d20:	697b      	ldr	r3, [r7, #20]
90007d22:	1ad2      	subs	r2, r2, r3
90007d24:	683b      	ldr	r3, [r7, #0]
90007d26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
90007d28:	6878      	ldr	r0, [r7, #4]
90007d2a:	f7ff ff97 	bl	90007c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
90007d2e:	2300      	movs	r3, #0
90007d30:	61fb      	str	r3, [r7, #28]
90007d32:	e004      	b.n	90007d3e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
90007d34:	683b      	ldr	r3, [r7, #0]
90007d36:	2200      	movs	r2, #0
90007d38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
90007d3a:	2301      	movs	r3, #1
90007d3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
90007d3e:	f000 ff81 	bl	90008c44 <vPortExitCritical>

	return xReturn;
90007d42:	69fb      	ldr	r3, [r7, #28]
}
90007d44:	4618      	mov	r0, r3
90007d46:	3720      	adds	r7, #32
90007d48:	46bd      	mov	sp, r7
90007d4a:	bd80      	pop	{r7, pc}
90007d4c:	20003f30 	.word	0x20003f30
90007d50:	20003f44 	.word	0x20003f44

90007d54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
90007d54:	b480      	push	{r7}
90007d56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
90007d58:	4b03      	ldr	r3, [pc, #12]	; (90007d68 <vTaskMissedYield+0x14>)
90007d5a:	2201      	movs	r2, #1
90007d5c:	601a      	str	r2, [r3, #0]
}
90007d5e:	bf00      	nop
90007d60:	46bd      	mov	sp, r7
90007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
90007d66:	4770      	bx	lr
90007d68:	20003f40 	.word	0x20003f40

90007d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
90007d6c:	b580      	push	{r7, lr}
90007d6e:	b082      	sub	sp, #8
90007d70:	af00      	add	r7, sp, #0
90007d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
90007d74:	f000 f852 	bl	90007e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
90007d78:	4b06      	ldr	r3, [pc, #24]	; (90007d94 <prvIdleTask+0x28>)
90007d7a:	681b      	ldr	r3, [r3, #0]
90007d7c:	2b01      	cmp	r3, #1
90007d7e:	d9f9      	bls.n	90007d74 <prvIdleTask+0x8>
			{
				taskYIELD();
90007d80:	4b05      	ldr	r3, [pc, #20]	; (90007d98 <prvIdleTask+0x2c>)
90007d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007d86:	601a      	str	r2, [r3, #0]
90007d88:	f3bf 8f4f 	dsb	sy
90007d8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
90007d90:	e7f0      	b.n	90007d74 <prvIdleTask+0x8>
90007d92:	bf00      	nop
90007d94:	20003a5c 	.word	0x20003a5c
90007d98:	e000ed04 	.word	0xe000ed04

90007d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
90007d9c:	b580      	push	{r7, lr}
90007d9e:	b082      	sub	sp, #8
90007da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90007da2:	2300      	movs	r3, #0
90007da4:	607b      	str	r3, [r7, #4]
90007da6:	e00c      	b.n	90007dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90007da8:	687a      	ldr	r2, [r7, #4]
90007daa:	4613      	mov	r3, r2
90007dac:	009b      	lsls	r3, r3, #2
90007dae:	4413      	add	r3, r2
90007db0:	009b      	lsls	r3, r3, #2
90007db2:	4a12      	ldr	r2, [pc, #72]	; (90007dfc <prvInitialiseTaskLists+0x60>)
90007db4:	4413      	add	r3, r2
90007db6:	4618      	mov	r0, r3
90007db8:	f7fe f836 	bl	90005e28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90007dbc:	687b      	ldr	r3, [r7, #4]
90007dbe:	3301      	adds	r3, #1
90007dc0:	607b      	str	r3, [r7, #4]
90007dc2:	687b      	ldr	r3, [r7, #4]
90007dc4:	2b37      	cmp	r3, #55	; 0x37
90007dc6:	d9ef      	bls.n	90007da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
90007dc8:	480d      	ldr	r0, [pc, #52]	; (90007e00 <prvInitialiseTaskLists+0x64>)
90007dca:	f7fe f82d 	bl	90005e28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
90007dce:	480d      	ldr	r0, [pc, #52]	; (90007e04 <prvInitialiseTaskLists+0x68>)
90007dd0:	f7fe f82a 	bl	90005e28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
90007dd4:	480c      	ldr	r0, [pc, #48]	; (90007e08 <prvInitialiseTaskLists+0x6c>)
90007dd6:	f7fe f827 	bl	90005e28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
90007dda:	480c      	ldr	r0, [pc, #48]	; (90007e0c <prvInitialiseTaskLists+0x70>)
90007ddc:	f7fe f824 	bl	90005e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
90007de0:	480b      	ldr	r0, [pc, #44]	; (90007e10 <prvInitialiseTaskLists+0x74>)
90007de2:	f7fe f821 	bl	90005e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
90007de6:	4b0b      	ldr	r3, [pc, #44]	; (90007e14 <prvInitialiseTaskLists+0x78>)
90007de8:	4a05      	ldr	r2, [pc, #20]	; (90007e00 <prvInitialiseTaskLists+0x64>)
90007dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
90007dec:	4b0a      	ldr	r3, [pc, #40]	; (90007e18 <prvInitialiseTaskLists+0x7c>)
90007dee:	4a05      	ldr	r2, [pc, #20]	; (90007e04 <prvInitialiseTaskLists+0x68>)
90007df0:	601a      	str	r2, [r3, #0]
}
90007df2:	bf00      	nop
90007df4:	3708      	adds	r7, #8
90007df6:	46bd      	mov	sp, r7
90007df8:	bd80      	pop	{r7, pc}
90007dfa:	bf00      	nop
90007dfc:	20003a5c 	.word	0x20003a5c
90007e00:	20003ebc 	.word	0x20003ebc
90007e04:	20003ed0 	.word	0x20003ed0
90007e08:	20003eec 	.word	0x20003eec
90007e0c:	20003f00 	.word	0x20003f00
90007e10:	20003f18 	.word	0x20003f18
90007e14:	20003ee4 	.word	0x20003ee4
90007e18:	20003ee8 	.word	0x20003ee8

90007e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
90007e1c:	b580      	push	{r7, lr}
90007e1e:	b082      	sub	sp, #8
90007e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90007e22:	e019      	b.n	90007e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
90007e24:	f000 feda 	bl	90008bdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90007e28:	4b10      	ldr	r3, [pc, #64]	; (90007e6c <prvCheckTasksWaitingTermination+0x50>)
90007e2a:	68db      	ldr	r3, [r3, #12]
90007e2c:	68db      	ldr	r3, [r3, #12]
90007e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90007e30:	687b      	ldr	r3, [r7, #4]
90007e32:	3304      	adds	r3, #4
90007e34:	4618      	mov	r0, r3
90007e36:	f7fe f881 	bl	90005f3c <uxListRemove>
				--uxCurrentNumberOfTasks;
90007e3a:	4b0d      	ldr	r3, [pc, #52]	; (90007e70 <prvCheckTasksWaitingTermination+0x54>)
90007e3c:	681b      	ldr	r3, [r3, #0]
90007e3e:	3b01      	subs	r3, #1
90007e40:	4a0b      	ldr	r2, [pc, #44]	; (90007e70 <prvCheckTasksWaitingTermination+0x54>)
90007e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
90007e44:	4b0b      	ldr	r3, [pc, #44]	; (90007e74 <prvCheckTasksWaitingTermination+0x58>)
90007e46:	681b      	ldr	r3, [r3, #0]
90007e48:	3b01      	subs	r3, #1
90007e4a:	4a0a      	ldr	r2, [pc, #40]	; (90007e74 <prvCheckTasksWaitingTermination+0x58>)
90007e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
90007e4e:	f000 fef9 	bl	90008c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
90007e52:	6878      	ldr	r0, [r7, #4]
90007e54:	f000 f810 	bl	90007e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90007e58:	4b06      	ldr	r3, [pc, #24]	; (90007e74 <prvCheckTasksWaitingTermination+0x58>)
90007e5a:	681b      	ldr	r3, [r3, #0]
90007e5c:	2b00      	cmp	r3, #0
90007e5e:	d1e1      	bne.n	90007e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
90007e60:	bf00      	nop
90007e62:	bf00      	nop
90007e64:	3708      	adds	r7, #8
90007e66:	46bd      	mov	sp, r7
90007e68:	bd80      	pop	{r7, pc}
90007e6a:	bf00      	nop
90007e6c:	20003f00 	.word	0x20003f00
90007e70:	20003f2c 	.word	0x20003f2c
90007e74:	20003f14 	.word	0x20003f14

90007e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
90007e78:	b580      	push	{r7, lr}
90007e7a:	b084      	sub	sp, #16
90007e7c:	af00      	add	r7, sp, #0
90007e7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
90007e80:	687b      	ldr	r3, [r7, #4]
90007e82:	3354      	adds	r3, #84	; 0x54
90007e84:	4618      	mov	r0, r3
90007e86:	f00e ff3f 	bl	90016d08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90007e8a:	687b      	ldr	r3, [r7, #4]
90007e8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
90007e90:	2b00      	cmp	r3, #0
90007e92:	d108      	bne.n	90007ea6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
90007e94:	687b      	ldr	r3, [r7, #4]
90007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007e98:	4618      	mov	r0, r3
90007e9a:	f001 f895 	bl	90008fc8 <vPortFree>
				vPortFree( pxTCB );
90007e9e:	6878      	ldr	r0, [r7, #4]
90007ea0:	f001 f892 	bl	90008fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
90007ea4:	e01a      	b.n	90007edc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
90007ea6:	687b      	ldr	r3, [r7, #4]
90007ea8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
90007eac:	2b01      	cmp	r3, #1
90007eae:	d103      	bne.n	90007eb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
90007eb0:	6878      	ldr	r0, [r7, #4]
90007eb2:	f001 f889 	bl	90008fc8 <vPortFree>
	}
90007eb6:	e011      	b.n	90007edc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
90007eb8:	687b      	ldr	r3, [r7, #4]
90007eba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
90007ebe:	2b02      	cmp	r3, #2
90007ec0:	d00c      	beq.n	90007edc <prvDeleteTCB+0x64>
	__asm volatile
90007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
90007ec6:	b672      	cpsid	i
90007ec8:	f383 8811 	msr	BASEPRI, r3
90007ecc:	f3bf 8f6f 	isb	sy
90007ed0:	f3bf 8f4f 	dsb	sy
90007ed4:	b662      	cpsie	i
90007ed6:	60fb      	str	r3, [r7, #12]
}
90007ed8:	bf00      	nop
90007eda:	e7fe      	b.n	90007eda <prvDeleteTCB+0x62>
	}
90007edc:	bf00      	nop
90007ede:	3710      	adds	r7, #16
90007ee0:	46bd      	mov	sp, r7
90007ee2:	bd80      	pop	{r7, pc}

90007ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
90007ee4:	b480      	push	{r7}
90007ee6:	b083      	sub	sp, #12
90007ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90007eea:	4b0c      	ldr	r3, [pc, #48]	; (90007f1c <prvResetNextTaskUnblockTime+0x38>)
90007eec:	681b      	ldr	r3, [r3, #0]
90007eee:	681b      	ldr	r3, [r3, #0]
90007ef0:	2b00      	cmp	r3, #0
90007ef2:	d104      	bne.n	90007efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
90007ef4:	4b0a      	ldr	r3, [pc, #40]	; (90007f20 <prvResetNextTaskUnblockTime+0x3c>)
90007ef6:	f04f 32ff 	mov.w	r2, #4294967295
90007efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
90007efc:	e008      	b.n	90007f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90007efe:	4b07      	ldr	r3, [pc, #28]	; (90007f1c <prvResetNextTaskUnblockTime+0x38>)
90007f00:	681b      	ldr	r3, [r3, #0]
90007f02:	68db      	ldr	r3, [r3, #12]
90007f04:	68db      	ldr	r3, [r3, #12]
90007f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90007f08:	687b      	ldr	r3, [r7, #4]
90007f0a:	685b      	ldr	r3, [r3, #4]
90007f0c:	4a04      	ldr	r2, [pc, #16]	; (90007f20 <prvResetNextTaskUnblockTime+0x3c>)
90007f0e:	6013      	str	r3, [r2, #0]
}
90007f10:	bf00      	nop
90007f12:	370c      	adds	r7, #12
90007f14:	46bd      	mov	sp, r7
90007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
90007f1a:	4770      	bx	lr
90007f1c:	20003ee4 	.word	0x20003ee4
90007f20:	20003f4c 	.word	0x20003f4c

90007f24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
90007f24:	b480      	push	{r7}
90007f26:	b083      	sub	sp, #12
90007f28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
90007f2a:	4b05      	ldr	r3, [pc, #20]	; (90007f40 <xTaskGetCurrentTaskHandle+0x1c>)
90007f2c:	681b      	ldr	r3, [r3, #0]
90007f2e:	607b      	str	r3, [r7, #4]

		return xReturn;
90007f30:	687b      	ldr	r3, [r7, #4]
	}
90007f32:	4618      	mov	r0, r3
90007f34:	370c      	adds	r7, #12
90007f36:	46bd      	mov	sp, r7
90007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
90007f3c:	4770      	bx	lr
90007f3e:	bf00      	nop
90007f40:	20003a58 	.word	0x20003a58

90007f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
90007f44:	b480      	push	{r7}
90007f46:	b083      	sub	sp, #12
90007f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
90007f4a:	4b0b      	ldr	r3, [pc, #44]	; (90007f78 <xTaskGetSchedulerState+0x34>)
90007f4c:	681b      	ldr	r3, [r3, #0]
90007f4e:	2b00      	cmp	r3, #0
90007f50:	d102      	bne.n	90007f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
90007f52:	2301      	movs	r3, #1
90007f54:	607b      	str	r3, [r7, #4]
90007f56:	e008      	b.n	90007f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90007f58:	4b08      	ldr	r3, [pc, #32]	; (90007f7c <xTaskGetSchedulerState+0x38>)
90007f5a:	681b      	ldr	r3, [r3, #0]
90007f5c:	2b00      	cmp	r3, #0
90007f5e:	d102      	bne.n	90007f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
90007f60:	2302      	movs	r3, #2
90007f62:	607b      	str	r3, [r7, #4]
90007f64:	e001      	b.n	90007f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
90007f66:	2300      	movs	r3, #0
90007f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
90007f6a:	687b      	ldr	r3, [r7, #4]
	}
90007f6c:	4618      	mov	r0, r3
90007f6e:	370c      	adds	r7, #12
90007f70:	46bd      	mov	sp, r7
90007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
90007f76:	4770      	bx	lr
90007f78:	20003f38 	.word	0x20003f38
90007f7c:	20003f54 	.word	0x20003f54

90007f80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
90007f80:	b580      	push	{r7, lr}
90007f82:	b084      	sub	sp, #16
90007f84:	af00      	add	r7, sp, #0
90007f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
90007f88:	687b      	ldr	r3, [r7, #4]
90007f8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
90007f8c:	2300      	movs	r3, #0
90007f8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
90007f90:	687b      	ldr	r3, [r7, #4]
90007f92:	2b00      	cmp	r3, #0
90007f94:	d051      	beq.n	9000803a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
90007f96:	68bb      	ldr	r3, [r7, #8]
90007f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007f9a:	4b2a      	ldr	r3, [pc, #168]	; (90008044 <xTaskPriorityInherit+0xc4>)
90007f9c:	681b      	ldr	r3, [r3, #0]
90007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007fa0:	429a      	cmp	r2, r3
90007fa2:	d241      	bcs.n	90008028 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
90007fa4:	68bb      	ldr	r3, [r7, #8]
90007fa6:	699b      	ldr	r3, [r3, #24]
90007fa8:	2b00      	cmp	r3, #0
90007faa:	db06      	blt.n	90007fba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90007fac:	4b25      	ldr	r3, [pc, #148]	; (90008044 <xTaskPriorityInherit+0xc4>)
90007fae:	681b      	ldr	r3, [r3, #0]
90007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007fb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
90007fb6:	68bb      	ldr	r3, [r7, #8]
90007fb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
90007fba:	68bb      	ldr	r3, [r7, #8]
90007fbc:	6959      	ldr	r1, [r3, #20]
90007fbe:	68bb      	ldr	r3, [r7, #8]
90007fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007fc2:	4613      	mov	r3, r2
90007fc4:	009b      	lsls	r3, r3, #2
90007fc6:	4413      	add	r3, r2
90007fc8:	009b      	lsls	r3, r3, #2
90007fca:	4a1f      	ldr	r2, [pc, #124]	; (90008048 <xTaskPriorityInherit+0xc8>)
90007fcc:	4413      	add	r3, r2
90007fce:	4299      	cmp	r1, r3
90007fd0:	d122      	bne.n	90008018 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90007fd2:	68bb      	ldr	r3, [r7, #8]
90007fd4:	3304      	adds	r3, #4
90007fd6:	4618      	mov	r0, r3
90007fd8:	f7fd ffb0 	bl	90005f3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90007fdc:	4b19      	ldr	r3, [pc, #100]	; (90008044 <xTaskPriorityInherit+0xc4>)
90007fde:	681b      	ldr	r3, [r3, #0]
90007fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007fe2:	68bb      	ldr	r3, [r7, #8]
90007fe4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
90007fe6:	68bb      	ldr	r3, [r7, #8]
90007fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007fea:	4b18      	ldr	r3, [pc, #96]	; (9000804c <xTaskPriorityInherit+0xcc>)
90007fec:	681b      	ldr	r3, [r3, #0]
90007fee:	429a      	cmp	r2, r3
90007ff0:	d903      	bls.n	90007ffa <xTaskPriorityInherit+0x7a>
90007ff2:	68bb      	ldr	r3, [r7, #8]
90007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007ff6:	4a15      	ldr	r2, [pc, #84]	; (9000804c <xTaskPriorityInherit+0xcc>)
90007ff8:	6013      	str	r3, [r2, #0]
90007ffa:	68bb      	ldr	r3, [r7, #8]
90007ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007ffe:	4613      	mov	r3, r2
90008000:	009b      	lsls	r3, r3, #2
90008002:	4413      	add	r3, r2
90008004:	009b      	lsls	r3, r3, #2
90008006:	4a10      	ldr	r2, [pc, #64]	; (90008048 <xTaskPriorityInherit+0xc8>)
90008008:	441a      	add	r2, r3
9000800a:	68bb      	ldr	r3, [r7, #8]
9000800c:	3304      	adds	r3, #4
9000800e:	4619      	mov	r1, r3
90008010:	4610      	mov	r0, r2
90008012:	f7fd ff36 	bl	90005e82 <vListInsertEnd>
90008016:	e004      	b.n	90008022 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90008018:	4b0a      	ldr	r3, [pc, #40]	; (90008044 <xTaskPriorityInherit+0xc4>)
9000801a:	681b      	ldr	r3, [r3, #0]
9000801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000801e:	68bb      	ldr	r3, [r7, #8]
90008020:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
90008022:	2301      	movs	r3, #1
90008024:	60fb      	str	r3, [r7, #12]
90008026:	e008      	b.n	9000803a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
90008028:	68bb      	ldr	r3, [r7, #8]
9000802a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
9000802c:	4b05      	ldr	r3, [pc, #20]	; (90008044 <xTaskPriorityInherit+0xc4>)
9000802e:	681b      	ldr	r3, [r3, #0]
90008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008032:	429a      	cmp	r2, r3
90008034:	d201      	bcs.n	9000803a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
90008036:	2301      	movs	r3, #1
90008038:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
9000803a:	68fb      	ldr	r3, [r7, #12]
	}
9000803c:	4618      	mov	r0, r3
9000803e:	3710      	adds	r7, #16
90008040:	46bd      	mov	sp, r7
90008042:	bd80      	pop	{r7, pc}
90008044:	20003a58 	.word	0x20003a58
90008048:	20003a5c 	.word	0x20003a5c
9000804c:	20003f34 	.word	0x20003f34

90008050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
90008050:	b580      	push	{r7, lr}
90008052:	b086      	sub	sp, #24
90008054:	af00      	add	r7, sp, #0
90008056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
90008058:	687b      	ldr	r3, [r7, #4]
9000805a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
9000805c:	2300      	movs	r3, #0
9000805e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
90008060:	687b      	ldr	r3, [r7, #4]
90008062:	2b00      	cmp	r3, #0
90008064:	d05a      	beq.n	9000811c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
90008066:	4b30      	ldr	r3, [pc, #192]	; (90008128 <xTaskPriorityDisinherit+0xd8>)
90008068:	681b      	ldr	r3, [r3, #0]
9000806a:	693a      	ldr	r2, [r7, #16]
9000806c:	429a      	cmp	r2, r3
9000806e:	d00c      	beq.n	9000808a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
90008070:	f04f 0350 	mov.w	r3, #80	; 0x50
90008074:	b672      	cpsid	i
90008076:	f383 8811 	msr	BASEPRI, r3
9000807a:	f3bf 8f6f 	isb	sy
9000807e:	f3bf 8f4f 	dsb	sy
90008082:	b662      	cpsie	i
90008084:	60fb      	str	r3, [r7, #12]
}
90008086:	bf00      	nop
90008088:	e7fe      	b.n	90008088 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
9000808a:	693b      	ldr	r3, [r7, #16]
9000808c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000808e:	2b00      	cmp	r3, #0
90008090:	d10c      	bne.n	900080ac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
90008092:	f04f 0350 	mov.w	r3, #80	; 0x50
90008096:	b672      	cpsid	i
90008098:	f383 8811 	msr	BASEPRI, r3
9000809c:	f3bf 8f6f 	isb	sy
900080a0:	f3bf 8f4f 	dsb	sy
900080a4:	b662      	cpsie	i
900080a6:	60bb      	str	r3, [r7, #8]
}
900080a8:	bf00      	nop
900080aa:	e7fe      	b.n	900080aa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
900080ac:	693b      	ldr	r3, [r7, #16]
900080ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900080b0:	1e5a      	subs	r2, r3, #1
900080b2:	693b      	ldr	r3, [r7, #16]
900080b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
900080b6:	693b      	ldr	r3, [r7, #16]
900080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900080ba:	693b      	ldr	r3, [r7, #16]
900080bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900080be:	429a      	cmp	r2, r3
900080c0:	d02c      	beq.n	9000811c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
900080c2:	693b      	ldr	r3, [r7, #16]
900080c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900080c6:	2b00      	cmp	r3, #0
900080c8:	d128      	bne.n	9000811c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900080ca:	693b      	ldr	r3, [r7, #16]
900080cc:	3304      	adds	r3, #4
900080ce:	4618      	mov	r0, r3
900080d0:	f7fd ff34 	bl	90005f3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900080d4:	693b      	ldr	r3, [r7, #16]
900080d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
900080d8:	693b      	ldr	r3, [r7, #16]
900080da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900080dc:	693b      	ldr	r3, [r7, #16]
900080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900080e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
900080e4:	693b      	ldr	r3, [r7, #16]
900080e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
900080e8:	693b      	ldr	r3, [r7, #16]
900080ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900080ec:	4b0f      	ldr	r3, [pc, #60]	; (9000812c <xTaskPriorityDisinherit+0xdc>)
900080ee:	681b      	ldr	r3, [r3, #0]
900080f0:	429a      	cmp	r2, r3
900080f2:	d903      	bls.n	900080fc <xTaskPriorityDisinherit+0xac>
900080f4:	693b      	ldr	r3, [r7, #16]
900080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900080f8:	4a0c      	ldr	r2, [pc, #48]	; (9000812c <xTaskPriorityDisinherit+0xdc>)
900080fa:	6013      	str	r3, [r2, #0]
900080fc:	693b      	ldr	r3, [r7, #16]
900080fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90008100:	4613      	mov	r3, r2
90008102:	009b      	lsls	r3, r3, #2
90008104:	4413      	add	r3, r2
90008106:	009b      	lsls	r3, r3, #2
90008108:	4a09      	ldr	r2, [pc, #36]	; (90008130 <xTaskPriorityDisinherit+0xe0>)
9000810a:	441a      	add	r2, r3
9000810c:	693b      	ldr	r3, [r7, #16]
9000810e:	3304      	adds	r3, #4
90008110:	4619      	mov	r1, r3
90008112:	4610      	mov	r0, r2
90008114:	f7fd feb5 	bl	90005e82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
90008118:	2301      	movs	r3, #1
9000811a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
9000811c:	697b      	ldr	r3, [r7, #20]
	}
9000811e:	4618      	mov	r0, r3
90008120:	3718      	adds	r7, #24
90008122:	46bd      	mov	sp, r7
90008124:	bd80      	pop	{r7, pc}
90008126:	bf00      	nop
90008128:	20003a58 	.word	0x20003a58
9000812c:	20003f34 	.word	0x20003f34
90008130:	20003a5c 	.word	0x20003a5c

90008134 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
90008134:	b580      	push	{r7, lr}
90008136:	b088      	sub	sp, #32
90008138:	af00      	add	r7, sp, #0
9000813a:	6078      	str	r0, [r7, #4]
9000813c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
9000813e:	687b      	ldr	r3, [r7, #4]
90008140:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
90008142:	2301      	movs	r3, #1
90008144:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
90008146:	687b      	ldr	r3, [r7, #4]
90008148:	2b00      	cmp	r3, #0
9000814a:	d06e      	beq.n	9000822a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
9000814c:	69bb      	ldr	r3, [r7, #24]
9000814e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008150:	2b00      	cmp	r3, #0
90008152:	d10c      	bne.n	9000816e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
90008154:	f04f 0350 	mov.w	r3, #80	; 0x50
90008158:	b672      	cpsid	i
9000815a:	f383 8811 	msr	BASEPRI, r3
9000815e:	f3bf 8f6f 	isb	sy
90008162:	f3bf 8f4f 	dsb	sy
90008166:	b662      	cpsie	i
90008168:	60fb      	str	r3, [r7, #12]
}
9000816a:	bf00      	nop
9000816c:	e7fe      	b.n	9000816c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9000816e:	69bb      	ldr	r3, [r7, #24]
90008170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90008172:	683a      	ldr	r2, [r7, #0]
90008174:	429a      	cmp	r2, r3
90008176:	d902      	bls.n	9000817e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
90008178:	683b      	ldr	r3, [r7, #0]
9000817a:	61fb      	str	r3, [r7, #28]
9000817c:	e002      	b.n	90008184 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
9000817e:	69bb      	ldr	r3, [r7, #24]
90008180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90008182:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
90008184:	69bb      	ldr	r3, [r7, #24]
90008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008188:	69fa      	ldr	r2, [r7, #28]
9000818a:	429a      	cmp	r2, r3
9000818c:	d04d      	beq.n	9000822a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
9000818e:	69bb      	ldr	r3, [r7, #24]
90008190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008192:	697a      	ldr	r2, [r7, #20]
90008194:	429a      	cmp	r2, r3
90008196:	d148      	bne.n	9000822a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
90008198:	4b26      	ldr	r3, [pc, #152]	; (90008234 <vTaskPriorityDisinheritAfterTimeout+0x100>)
9000819a:	681b      	ldr	r3, [r3, #0]
9000819c:	69ba      	ldr	r2, [r7, #24]
9000819e:	429a      	cmp	r2, r3
900081a0:	d10c      	bne.n	900081bc <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
900081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
900081a6:	b672      	cpsid	i
900081a8:	f383 8811 	msr	BASEPRI, r3
900081ac:	f3bf 8f6f 	isb	sy
900081b0:	f3bf 8f4f 	dsb	sy
900081b4:	b662      	cpsie	i
900081b6:	60bb      	str	r3, [r7, #8]
}
900081b8:	bf00      	nop
900081ba:	e7fe      	b.n	900081ba <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
900081bc:	69bb      	ldr	r3, [r7, #24]
900081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900081c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
900081c2:	69bb      	ldr	r3, [r7, #24]
900081c4:	69fa      	ldr	r2, [r7, #28]
900081c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
900081c8:	69bb      	ldr	r3, [r7, #24]
900081ca:	699b      	ldr	r3, [r3, #24]
900081cc:	2b00      	cmp	r3, #0
900081ce:	db04      	blt.n	900081da <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900081d0:	69fb      	ldr	r3, [r7, #28]
900081d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
900081d6:	69bb      	ldr	r3, [r7, #24]
900081d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
900081da:	69bb      	ldr	r3, [r7, #24]
900081dc:	6959      	ldr	r1, [r3, #20]
900081de:	693a      	ldr	r2, [r7, #16]
900081e0:	4613      	mov	r3, r2
900081e2:	009b      	lsls	r3, r3, #2
900081e4:	4413      	add	r3, r2
900081e6:	009b      	lsls	r3, r3, #2
900081e8:	4a13      	ldr	r2, [pc, #76]	; (90008238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
900081ea:	4413      	add	r3, r2
900081ec:	4299      	cmp	r1, r3
900081ee:	d11c      	bne.n	9000822a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900081f0:	69bb      	ldr	r3, [r7, #24]
900081f2:	3304      	adds	r3, #4
900081f4:	4618      	mov	r0, r3
900081f6:	f7fd fea1 	bl	90005f3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
900081fa:	69bb      	ldr	r3, [r7, #24]
900081fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900081fe:	4b0f      	ldr	r3, [pc, #60]	; (9000823c <vTaskPriorityDisinheritAfterTimeout+0x108>)
90008200:	681b      	ldr	r3, [r3, #0]
90008202:	429a      	cmp	r2, r3
90008204:	d903      	bls.n	9000820e <vTaskPriorityDisinheritAfterTimeout+0xda>
90008206:	69bb      	ldr	r3, [r7, #24]
90008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000820a:	4a0c      	ldr	r2, [pc, #48]	; (9000823c <vTaskPriorityDisinheritAfterTimeout+0x108>)
9000820c:	6013      	str	r3, [r2, #0]
9000820e:	69bb      	ldr	r3, [r7, #24]
90008210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90008212:	4613      	mov	r3, r2
90008214:	009b      	lsls	r3, r3, #2
90008216:	4413      	add	r3, r2
90008218:	009b      	lsls	r3, r3, #2
9000821a:	4a07      	ldr	r2, [pc, #28]	; (90008238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
9000821c:	441a      	add	r2, r3
9000821e:	69bb      	ldr	r3, [r7, #24]
90008220:	3304      	adds	r3, #4
90008222:	4619      	mov	r1, r3
90008224:	4610      	mov	r0, r2
90008226:	f7fd fe2c 	bl	90005e82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
9000822a:	bf00      	nop
9000822c:	3720      	adds	r7, #32
9000822e:	46bd      	mov	sp, r7
90008230:	bd80      	pop	{r7, pc}
90008232:	bf00      	nop
90008234:	20003a58 	.word	0x20003a58
90008238:	20003a5c 	.word	0x20003a5c
9000823c:	20003f34 	.word	0x20003f34

90008240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
90008240:	b480      	push	{r7}
90008242:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
90008244:	4b07      	ldr	r3, [pc, #28]	; (90008264 <pvTaskIncrementMutexHeldCount+0x24>)
90008246:	681b      	ldr	r3, [r3, #0]
90008248:	2b00      	cmp	r3, #0
9000824a:	d004      	beq.n	90008256 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
9000824c:	4b05      	ldr	r3, [pc, #20]	; (90008264 <pvTaskIncrementMutexHeldCount+0x24>)
9000824e:	681b      	ldr	r3, [r3, #0]
90008250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
90008252:	3201      	adds	r2, #1
90008254:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
90008256:	4b03      	ldr	r3, [pc, #12]	; (90008264 <pvTaskIncrementMutexHeldCount+0x24>)
90008258:	681b      	ldr	r3, [r3, #0]
	}
9000825a:	4618      	mov	r0, r3
9000825c:	46bd      	mov	sp, r7
9000825e:	f85d 7b04 	ldr.w	r7, [sp], #4
90008262:	4770      	bx	lr
90008264:	20003a58 	.word	0x20003a58

90008268 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
90008268:	b580      	push	{r7, lr}
9000826a:	b084      	sub	sp, #16
9000826c:	af00      	add	r7, sp, #0
9000826e:	6078      	str	r0, [r7, #4]
90008270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
90008272:	4b21      	ldr	r3, [pc, #132]	; (900082f8 <prvAddCurrentTaskToDelayedList+0x90>)
90008274:	681b      	ldr	r3, [r3, #0]
90008276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90008278:	4b20      	ldr	r3, [pc, #128]	; (900082fc <prvAddCurrentTaskToDelayedList+0x94>)
9000827a:	681b      	ldr	r3, [r3, #0]
9000827c:	3304      	adds	r3, #4
9000827e:	4618      	mov	r0, r3
90008280:	f7fd fe5c 	bl	90005f3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
90008284:	687b      	ldr	r3, [r7, #4]
90008286:	f1b3 3fff 	cmp.w	r3, #4294967295
9000828a:	d10a      	bne.n	900082a2 <prvAddCurrentTaskToDelayedList+0x3a>
9000828c:	683b      	ldr	r3, [r7, #0]
9000828e:	2b00      	cmp	r3, #0
90008290:	d007      	beq.n	900082a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90008292:	4b1a      	ldr	r3, [pc, #104]	; (900082fc <prvAddCurrentTaskToDelayedList+0x94>)
90008294:	681b      	ldr	r3, [r3, #0]
90008296:	3304      	adds	r3, #4
90008298:	4619      	mov	r1, r3
9000829a:	4819      	ldr	r0, [pc, #100]	; (90008300 <prvAddCurrentTaskToDelayedList+0x98>)
9000829c:	f7fd fdf1 	bl	90005e82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
900082a0:	e026      	b.n	900082f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
900082a2:	68fa      	ldr	r2, [r7, #12]
900082a4:	687b      	ldr	r3, [r7, #4]
900082a6:	4413      	add	r3, r2
900082a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
900082aa:	4b14      	ldr	r3, [pc, #80]	; (900082fc <prvAddCurrentTaskToDelayedList+0x94>)
900082ac:	681b      	ldr	r3, [r3, #0]
900082ae:	68ba      	ldr	r2, [r7, #8]
900082b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
900082b2:	68ba      	ldr	r2, [r7, #8]
900082b4:	68fb      	ldr	r3, [r7, #12]
900082b6:	429a      	cmp	r2, r3
900082b8:	d209      	bcs.n	900082ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900082ba:	4b12      	ldr	r3, [pc, #72]	; (90008304 <prvAddCurrentTaskToDelayedList+0x9c>)
900082bc:	681a      	ldr	r2, [r3, #0]
900082be:	4b0f      	ldr	r3, [pc, #60]	; (900082fc <prvAddCurrentTaskToDelayedList+0x94>)
900082c0:	681b      	ldr	r3, [r3, #0]
900082c2:	3304      	adds	r3, #4
900082c4:	4619      	mov	r1, r3
900082c6:	4610      	mov	r0, r2
900082c8:	f7fd fdff 	bl	90005eca <vListInsert>
}
900082cc:	e010      	b.n	900082f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900082ce:	4b0e      	ldr	r3, [pc, #56]	; (90008308 <prvAddCurrentTaskToDelayedList+0xa0>)
900082d0:	681a      	ldr	r2, [r3, #0]
900082d2:	4b0a      	ldr	r3, [pc, #40]	; (900082fc <prvAddCurrentTaskToDelayedList+0x94>)
900082d4:	681b      	ldr	r3, [r3, #0]
900082d6:	3304      	adds	r3, #4
900082d8:	4619      	mov	r1, r3
900082da:	4610      	mov	r0, r2
900082dc:	f7fd fdf5 	bl	90005eca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
900082e0:	4b0a      	ldr	r3, [pc, #40]	; (9000830c <prvAddCurrentTaskToDelayedList+0xa4>)
900082e2:	681b      	ldr	r3, [r3, #0]
900082e4:	68ba      	ldr	r2, [r7, #8]
900082e6:	429a      	cmp	r2, r3
900082e8:	d202      	bcs.n	900082f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
900082ea:	4a08      	ldr	r2, [pc, #32]	; (9000830c <prvAddCurrentTaskToDelayedList+0xa4>)
900082ec:	68bb      	ldr	r3, [r7, #8]
900082ee:	6013      	str	r3, [r2, #0]
}
900082f0:	bf00      	nop
900082f2:	3710      	adds	r7, #16
900082f4:	46bd      	mov	sp, r7
900082f6:	bd80      	pop	{r7, pc}
900082f8:	20003f30 	.word	0x20003f30
900082fc:	20003a58 	.word	0x20003a58
90008300:	20003f18 	.word	0x20003f18
90008304:	20003ee8 	.word	0x20003ee8
90008308:	20003ee4 	.word	0x20003ee4
9000830c:	20003f4c 	.word	0x20003f4c

90008310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
90008310:	b580      	push	{r7, lr}
90008312:	b08a      	sub	sp, #40	; 0x28
90008314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
90008316:	2300      	movs	r3, #0
90008318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
9000831a:	f000 fb15 	bl	90008948 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
9000831e:	4b1d      	ldr	r3, [pc, #116]	; (90008394 <xTimerCreateTimerTask+0x84>)
90008320:	681b      	ldr	r3, [r3, #0]
90008322:	2b00      	cmp	r3, #0
90008324:	d021      	beq.n	9000836a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
90008326:	2300      	movs	r3, #0
90008328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
9000832a:	2300      	movs	r3, #0
9000832c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000832e:	1d3a      	adds	r2, r7, #4
90008330:	f107 0108 	add.w	r1, r7, #8
90008334:	f107 030c 	add.w	r3, r7, #12
90008338:	4618      	mov	r0, r3
9000833a:	f7fd fd5b 	bl	90005df4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000833e:	6879      	ldr	r1, [r7, #4]
90008340:	68bb      	ldr	r3, [r7, #8]
90008342:	68fa      	ldr	r2, [r7, #12]
90008344:	9202      	str	r2, [sp, #8]
90008346:	9301      	str	r3, [sp, #4]
90008348:	2302      	movs	r3, #2
9000834a:	9300      	str	r3, [sp, #0]
9000834c:	2300      	movs	r3, #0
9000834e:	460a      	mov	r2, r1
90008350:	4911      	ldr	r1, [pc, #68]	; (90008398 <xTimerCreateTimerTask+0x88>)
90008352:	4812      	ldr	r0, [pc, #72]	; (9000839c <xTimerCreateTimerTask+0x8c>)
90008354:	f7fe ff6c 	bl	90007230 <xTaskCreateStatic>
90008358:	4603      	mov	r3, r0
9000835a:	4a11      	ldr	r2, [pc, #68]	; (900083a0 <xTimerCreateTimerTask+0x90>)
9000835c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
9000835e:	4b10      	ldr	r3, [pc, #64]	; (900083a0 <xTimerCreateTimerTask+0x90>)
90008360:	681b      	ldr	r3, [r3, #0]
90008362:	2b00      	cmp	r3, #0
90008364:	d001      	beq.n	9000836a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
90008366:	2301      	movs	r3, #1
90008368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
9000836a:	697b      	ldr	r3, [r7, #20]
9000836c:	2b00      	cmp	r3, #0
9000836e:	d10c      	bne.n	9000838a <xTimerCreateTimerTask+0x7a>
	__asm volatile
90008370:	f04f 0350 	mov.w	r3, #80	; 0x50
90008374:	b672      	cpsid	i
90008376:	f383 8811 	msr	BASEPRI, r3
9000837a:	f3bf 8f6f 	isb	sy
9000837e:	f3bf 8f4f 	dsb	sy
90008382:	b662      	cpsie	i
90008384:	613b      	str	r3, [r7, #16]
}
90008386:	bf00      	nop
90008388:	e7fe      	b.n	90008388 <xTimerCreateTimerTask+0x78>
	return xReturn;
9000838a:	697b      	ldr	r3, [r7, #20]
}
9000838c:	4618      	mov	r0, r3
9000838e:	3718      	adds	r7, #24
90008390:	46bd      	mov	sp, r7
90008392:	bd80      	pop	{r7, pc}
90008394:	20003f88 	.word	0x20003f88
90008398:	90017ae8 	.word	0x90017ae8
9000839c:	900084e1 	.word	0x900084e1
900083a0:	20003f8c 	.word	0x20003f8c

900083a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
900083a4:	b580      	push	{r7, lr}
900083a6:	b08a      	sub	sp, #40	; 0x28
900083a8:	af00      	add	r7, sp, #0
900083aa:	60f8      	str	r0, [r7, #12]
900083ac:	60b9      	str	r1, [r7, #8]
900083ae:	607a      	str	r2, [r7, #4]
900083b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
900083b2:	2300      	movs	r3, #0
900083b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
900083b6:	68fb      	ldr	r3, [r7, #12]
900083b8:	2b00      	cmp	r3, #0
900083ba:	d10c      	bne.n	900083d6 <xTimerGenericCommand+0x32>
	__asm volatile
900083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
900083c0:	b672      	cpsid	i
900083c2:	f383 8811 	msr	BASEPRI, r3
900083c6:	f3bf 8f6f 	isb	sy
900083ca:	f3bf 8f4f 	dsb	sy
900083ce:	b662      	cpsie	i
900083d0:	623b      	str	r3, [r7, #32]
}
900083d2:	bf00      	nop
900083d4:	e7fe      	b.n	900083d4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
900083d6:	4b1a      	ldr	r3, [pc, #104]	; (90008440 <xTimerGenericCommand+0x9c>)
900083d8:	681b      	ldr	r3, [r3, #0]
900083da:	2b00      	cmp	r3, #0
900083dc:	d02a      	beq.n	90008434 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
900083de:	68bb      	ldr	r3, [r7, #8]
900083e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
900083e2:	687b      	ldr	r3, [r7, #4]
900083e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
900083e6:	68fb      	ldr	r3, [r7, #12]
900083e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
900083ea:	68bb      	ldr	r3, [r7, #8]
900083ec:	2b05      	cmp	r3, #5
900083ee:	dc18      	bgt.n	90008422 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
900083f0:	f7ff fda8 	bl	90007f44 <xTaskGetSchedulerState>
900083f4:	4603      	mov	r3, r0
900083f6:	2b02      	cmp	r3, #2
900083f8:	d109      	bne.n	9000840e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
900083fa:	4b11      	ldr	r3, [pc, #68]	; (90008440 <xTimerGenericCommand+0x9c>)
900083fc:	6818      	ldr	r0, [r3, #0]
900083fe:	f107 0110 	add.w	r1, r7, #16
90008402:	2300      	movs	r3, #0
90008404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90008406:	f7fe f841 	bl	9000648c <xQueueGenericSend>
9000840a:	6278      	str	r0, [r7, #36]	; 0x24
9000840c:	e012      	b.n	90008434 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
9000840e:	4b0c      	ldr	r3, [pc, #48]	; (90008440 <xTimerGenericCommand+0x9c>)
90008410:	6818      	ldr	r0, [r3, #0]
90008412:	f107 0110 	add.w	r1, r7, #16
90008416:	2300      	movs	r3, #0
90008418:	2200      	movs	r2, #0
9000841a:	f7fe f837 	bl	9000648c <xQueueGenericSend>
9000841e:	6278      	str	r0, [r7, #36]	; 0x24
90008420:	e008      	b.n	90008434 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
90008422:	4b07      	ldr	r3, [pc, #28]	; (90008440 <xTimerGenericCommand+0x9c>)
90008424:	6818      	ldr	r0, [r3, #0]
90008426:	f107 0110 	add.w	r1, r7, #16
9000842a:	2300      	movs	r3, #0
9000842c:	683a      	ldr	r2, [r7, #0]
9000842e:	f7fe f933 	bl	90006698 <xQueueGenericSendFromISR>
90008432:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
90008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
90008436:	4618      	mov	r0, r3
90008438:	3728      	adds	r7, #40	; 0x28
9000843a:	46bd      	mov	sp, r7
9000843c:	bd80      	pop	{r7, pc}
9000843e:	bf00      	nop
90008440:	20003f88 	.word	0x20003f88

90008444 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
90008444:	b580      	push	{r7, lr}
90008446:	b088      	sub	sp, #32
90008448:	af02      	add	r7, sp, #8
9000844a:	6078      	str	r0, [r7, #4]
9000844c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000844e:	4b23      	ldr	r3, [pc, #140]	; (900084dc <prvProcessExpiredTimer+0x98>)
90008450:	681b      	ldr	r3, [r3, #0]
90008452:	68db      	ldr	r3, [r3, #12]
90008454:	68db      	ldr	r3, [r3, #12]
90008456:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90008458:	697b      	ldr	r3, [r7, #20]
9000845a:	3304      	adds	r3, #4
9000845c:	4618      	mov	r0, r3
9000845e:	f7fd fd6d 	bl	90005f3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90008462:	697b      	ldr	r3, [r7, #20]
90008464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90008468:	f003 0304 	and.w	r3, r3, #4
9000846c:	2b00      	cmp	r3, #0
9000846e:	d024      	beq.n	900084ba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90008470:	697b      	ldr	r3, [r7, #20]
90008472:	699a      	ldr	r2, [r3, #24]
90008474:	687b      	ldr	r3, [r7, #4]
90008476:	18d1      	adds	r1, r2, r3
90008478:	687b      	ldr	r3, [r7, #4]
9000847a:	683a      	ldr	r2, [r7, #0]
9000847c:	6978      	ldr	r0, [r7, #20]
9000847e:	f000 f8d3 	bl	90008628 <prvInsertTimerInActiveList>
90008482:	4603      	mov	r3, r0
90008484:	2b00      	cmp	r3, #0
90008486:	d021      	beq.n	900084cc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
90008488:	2300      	movs	r3, #0
9000848a:	9300      	str	r3, [sp, #0]
9000848c:	2300      	movs	r3, #0
9000848e:	687a      	ldr	r2, [r7, #4]
90008490:	2100      	movs	r1, #0
90008492:	6978      	ldr	r0, [r7, #20]
90008494:	f7ff ff86 	bl	900083a4 <xTimerGenericCommand>
90008498:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
9000849a:	693b      	ldr	r3, [r7, #16]
9000849c:	2b00      	cmp	r3, #0
9000849e:	d115      	bne.n	900084cc <prvProcessExpiredTimer+0x88>
	__asm volatile
900084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
900084a4:	b672      	cpsid	i
900084a6:	f383 8811 	msr	BASEPRI, r3
900084aa:	f3bf 8f6f 	isb	sy
900084ae:	f3bf 8f4f 	dsb	sy
900084b2:	b662      	cpsie	i
900084b4:	60fb      	str	r3, [r7, #12]
}
900084b6:	bf00      	nop
900084b8:	e7fe      	b.n	900084b8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900084ba:	697b      	ldr	r3, [r7, #20]
900084bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900084c0:	f023 0301 	bic.w	r3, r3, #1
900084c4:	b2da      	uxtb	r2, r3
900084c6:	697b      	ldr	r3, [r7, #20]
900084c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900084cc:	697b      	ldr	r3, [r7, #20]
900084ce:	6a1b      	ldr	r3, [r3, #32]
900084d0:	6978      	ldr	r0, [r7, #20]
900084d2:	4798      	blx	r3
}
900084d4:	bf00      	nop
900084d6:	3718      	adds	r7, #24
900084d8:	46bd      	mov	sp, r7
900084da:	bd80      	pop	{r7, pc}
900084dc:	20003f80 	.word	0x20003f80

900084e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
900084e0:	b580      	push	{r7, lr}
900084e2:	b084      	sub	sp, #16
900084e4:	af00      	add	r7, sp, #0
900084e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
900084e8:	f107 0308 	add.w	r3, r7, #8
900084ec:	4618      	mov	r0, r3
900084ee:	f000 f857 	bl	900085a0 <prvGetNextExpireTime>
900084f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
900084f4:	68bb      	ldr	r3, [r7, #8]
900084f6:	4619      	mov	r1, r3
900084f8:	68f8      	ldr	r0, [r7, #12]
900084fa:	f000 f803 	bl	90008504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
900084fe:	f000 f8d5 	bl	900086ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
90008502:	e7f1      	b.n	900084e8 <prvTimerTask+0x8>

90008504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
90008504:	b580      	push	{r7, lr}
90008506:	b084      	sub	sp, #16
90008508:	af00      	add	r7, sp, #0
9000850a:	6078      	str	r0, [r7, #4]
9000850c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
9000850e:	f7ff f8f9 	bl	90007704 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
90008512:	f107 0308 	add.w	r3, r7, #8
90008516:	4618      	mov	r0, r3
90008518:	f000 f866 	bl	900085e8 <prvSampleTimeNow>
9000851c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
9000851e:	68bb      	ldr	r3, [r7, #8]
90008520:	2b00      	cmp	r3, #0
90008522:	d130      	bne.n	90008586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90008524:	683b      	ldr	r3, [r7, #0]
90008526:	2b00      	cmp	r3, #0
90008528:	d10a      	bne.n	90008540 <prvProcessTimerOrBlockTask+0x3c>
9000852a:	687a      	ldr	r2, [r7, #4]
9000852c:	68fb      	ldr	r3, [r7, #12]
9000852e:	429a      	cmp	r2, r3
90008530:	d806      	bhi.n	90008540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
90008532:	f7ff f8f5 	bl	90007720 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
90008536:	68f9      	ldr	r1, [r7, #12]
90008538:	6878      	ldr	r0, [r7, #4]
9000853a:	f7ff ff83 	bl	90008444 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
9000853e:	e024      	b.n	9000858a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
90008540:	683b      	ldr	r3, [r7, #0]
90008542:	2b00      	cmp	r3, #0
90008544:	d008      	beq.n	90008558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
90008546:	4b13      	ldr	r3, [pc, #76]	; (90008594 <prvProcessTimerOrBlockTask+0x90>)
90008548:	681b      	ldr	r3, [r3, #0]
9000854a:	681b      	ldr	r3, [r3, #0]
9000854c:	2b00      	cmp	r3, #0
9000854e:	d101      	bne.n	90008554 <prvProcessTimerOrBlockTask+0x50>
90008550:	2301      	movs	r3, #1
90008552:	e000      	b.n	90008556 <prvProcessTimerOrBlockTask+0x52>
90008554:	2300      	movs	r3, #0
90008556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
90008558:	4b0f      	ldr	r3, [pc, #60]	; (90008598 <prvProcessTimerOrBlockTask+0x94>)
9000855a:	6818      	ldr	r0, [r3, #0]
9000855c:	687a      	ldr	r2, [r7, #4]
9000855e:	68fb      	ldr	r3, [r7, #12]
90008560:	1ad3      	subs	r3, r2, r3
90008562:	683a      	ldr	r2, [r7, #0]
90008564:	4619      	mov	r1, r3
90008566:	f7fe fe2f 	bl	900071c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
9000856a:	f7ff f8d9 	bl	90007720 <xTaskResumeAll>
9000856e:	4603      	mov	r3, r0
90008570:	2b00      	cmp	r3, #0
90008572:	d10a      	bne.n	9000858a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
90008574:	4b09      	ldr	r3, [pc, #36]	; (9000859c <prvProcessTimerOrBlockTask+0x98>)
90008576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000857a:	601a      	str	r2, [r3, #0]
9000857c:	f3bf 8f4f 	dsb	sy
90008580:	f3bf 8f6f 	isb	sy
}
90008584:	e001      	b.n	9000858a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
90008586:	f7ff f8cb 	bl	90007720 <xTaskResumeAll>
}
9000858a:	bf00      	nop
9000858c:	3710      	adds	r7, #16
9000858e:	46bd      	mov	sp, r7
90008590:	bd80      	pop	{r7, pc}
90008592:	bf00      	nop
90008594:	20003f84 	.word	0x20003f84
90008598:	20003f88 	.word	0x20003f88
9000859c:	e000ed04 	.word	0xe000ed04

900085a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
900085a0:	b480      	push	{r7}
900085a2:	b085      	sub	sp, #20
900085a4:	af00      	add	r7, sp, #0
900085a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
900085a8:	4b0e      	ldr	r3, [pc, #56]	; (900085e4 <prvGetNextExpireTime+0x44>)
900085aa:	681b      	ldr	r3, [r3, #0]
900085ac:	681b      	ldr	r3, [r3, #0]
900085ae:	2b00      	cmp	r3, #0
900085b0:	d101      	bne.n	900085b6 <prvGetNextExpireTime+0x16>
900085b2:	2201      	movs	r2, #1
900085b4:	e000      	b.n	900085b8 <prvGetNextExpireTime+0x18>
900085b6:	2200      	movs	r2, #0
900085b8:	687b      	ldr	r3, [r7, #4]
900085ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
900085bc:	687b      	ldr	r3, [r7, #4]
900085be:	681b      	ldr	r3, [r3, #0]
900085c0:	2b00      	cmp	r3, #0
900085c2:	d105      	bne.n	900085d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900085c4:	4b07      	ldr	r3, [pc, #28]	; (900085e4 <prvGetNextExpireTime+0x44>)
900085c6:	681b      	ldr	r3, [r3, #0]
900085c8:	68db      	ldr	r3, [r3, #12]
900085ca:	681b      	ldr	r3, [r3, #0]
900085cc:	60fb      	str	r3, [r7, #12]
900085ce:	e001      	b.n	900085d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
900085d0:	2300      	movs	r3, #0
900085d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
900085d4:	68fb      	ldr	r3, [r7, #12]
}
900085d6:	4618      	mov	r0, r3
900085d8:	3714      	adds	r7, #20
900085da:	46bd      	mov	sp, r7
900085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900085e0:	4770      	bx	lr
900085e2:	bf00      	nop
900085e4:	20003f80 	.word	0x20003f80

900085e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
900085e8:	b580      	push	{r7, lr}
900085ea:	b084      	sub	sp, #16
900085ec:	af00      	add	r7, sp, #0
900085ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
900085f0:	f7ff f936 	bl	90007860 <xTaskGetTickCount>
900085f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
900085f6:	4b0b      	ldr	r3, [pc, #44]	; (90008624 <prvSampleTimeNow+0x3c>)
900085f8:	681b      	ldr	r3, [r3, #0]
900085fa:	68fa      	ldr	r2, [r7, #12]
900085fc:	429a      	cmp	r2, r3
900085fe:	d205      	bcs.n	9000860c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
90008600:	f000 f93c 	bl	9000887c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
90008604:	687b      	ldr	r3, [r7, #4]
90008606:	2201      	movs	r2, #1
90008608:	601a      	str	r2, [r3, #0]
9000860a:	e002      	b.n	90008612 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
9000860c:	687b      	ldr	r3, [r7, #4]
9000860e:	2200      	movs	r2, #0
90008610:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
90008612:	4a04      	ldr	r2, [pc, #16]	; (90008624 <prvSampleTimeNow+0x3c>)
90008614:	68fb      	ldr	r3, [r7, #12]
90008616:	6013      	str	r3, [r2, #0]

	return xTimeNow;
90008618:	68fb      	ldr	r3, [r7, #12]
}
9000861a:	4618      	mov	r0, r3
9000861c:	3710      	adds	r7, #16
9000861e:	46bd      	mov	sp, r7
90008620:	bd80      	pop	{r7, pc}
90008622:	bf00      	nop
90008624:	20003f90 	.word	0x20003f90

90008628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
90008628:	b580      	push	{r7, lr}
9000862a:	b086      	sub	sp, #24
9000862c:	af00      	add	r7, sp, #0
9000862e:	60f8      	str	r0, [r7, #12]
90008630:	60b9      	str	r1, [r7, #8]
90008632:	607a      	str	r2, [r7, #4]
90008634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
90008636:	2300      	movs	r3, #0
90008638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000863a:	68fb      	ldr	r3, [r7, #12]
9000863c:	68ba      	ldr	r2, [r7, #8]
9000863e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90008640:	68fb      	ldr	r3, [r7, #12]
90008642:	68fa      	ldr	r2, [r7, #12]
90008644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
90008646:	68ba      	ldr	r2, [r7, #8]
90008648:	687b      	ldr	r3, [r7, #4]
9000864a:	429a      	cmp	r2, r3
9000864c:	d812      	bhi.n	90008674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000864e:	687a      	ldr	r2, [r7, #4]
90008650:	683b      	ldr	r3, [r7, #0]
90008652:	1ad2      	subs	r2, r2, r3
90008654:	68fb      	ldr	r3, [r7, #12]
90008656:	699b      	ldr	r3, [r3, #24]
90008658:	429a      	cmp	r2, r3
9000865a:	d302      	bcc.n	90008662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
9000865c:	2301      	movs	r3, #1
9000865e:	617b      	str	r3, [r7, #20]
90008660:	e01b      	b.n	9000869a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90008662:	4b10      	ldr	r3, [pc, #64]	; (900086a4 <prvInsertTimerInActiveList+0x7c>)
90008664:	681a      	ldr	r2, [r3, #0]
90008666:	68fb      	ldr	r3, [r7, #12]
90008668:	3304      	adds	r3, #4
9000866a:	4619      	mov	r1, r3
9000866c:	4610      	mov	r0, r2
9000866e:	f7fd fc2c 	bl	90005eca <vListInsert>
90008672:	e012      	b.n	9000869a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
90008674:	687a      	ldr	r2, [r7, #4]
90008676:	683b      	ldr	r3, [r7, #0]
90008678:	429a      	cmp	r2, r3
9000867a:	d206      	bcs.n	9000868a <prvInsertTimerInActiveList+0x62>
9000867c:	68ba      	ldr	r2, [r7, #8]
9000867e:	683b      	ldr	r3, [r7, #0]
90008680:	429a      	cmp	r2, r3
90008682:	d302      	bcc.n	9000868a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
90008684:	2301      	movs	r3, #1
90008686:	617b      	str	r3, [r7, #20]
90008688:	e007      	b.n	9000869a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000868a:	4b07      	ldr	r3, [pc, #28]	; (900086a8 <prvInsertTimerInActiveList+0x80>)
9000868c:	681a      	ldr	r2, [r3, #0]
9000868e:	68fb      	ldr	r3, [r7, #12]
90008690:	3304      	adds	r3, #4
90008692:	4619      	mov	r1, r3
90008694:	4610      	mov	r0, r2
90008696:	f7fd fc18 	bl	90005eca <vListInsert>
		}
	}

	return xProcessTimerNow;
9000869a:	697b      	ldr	r3, [r7, #20]
}
9000869c:	4618      	mov	r0, r3
9000869e:	3718      	adds	r7, #24
900086a0:	46bd      	mov	sp, r7
900086a2:	bd80      	pop	{r7, pc}
900086a4:	20003f84 	.word	0x20003f84
900086a8:	20003f80 	.word	0x20003f80

900086ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
900086ac:	b580      	push	{r7, lr}
900086ae:	b08e      	sub	sp, #56	; 0x38
900086b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
900086b2:	e0d0      	b.n	90008856 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
900086b4:	687b      	ldr	r3, [r7, #4]
900086b6:	2b00      	cmp	r3, #0
900086b8:	da1a      	bge.n	900086f0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
900086ba:	1d3b      	adds	r3, r7, #4
900086bc:	3304      	adds	r3, #4
900086be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
900086c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900086c2:	2b00      	cmp	r3, #0
900086c4:	d10c      	bne.n	900086e0 <prvProcessReceivedCommands+0x34>
	__asm volatile
900086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
900086ca:	b672      	cpsid	i
900086cc:	f383 8811 	msr	BASEPRI, r3
900086d0:	f3bf 8f6f 	isb	sy
900086d4:	f3bf 8f4f 	dsb	sy
900086d8:	b662      	cpsie	i
900086da:	61fb      	str	r3, [r7, #28]
}
900086dc:	bf00      	nop
900086de:	e7fe      	b.n	900086de <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
900086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900086e2:	681b      	ldr	r3, [r3, #0]
900086e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
900086e6:	6850      	ldr	r0, [r2, #4]
900086e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
900086ea:	6892      	ldr	r2, [r2, #8]
900086ec:	4611      	mov	r1, r2
900086ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
900086f0:	687b      	ldr	r3, [r7, #4]
900086f2:	2b00      	cmp	r3, #0
900086f4:	f2c0 80ae 	blt.w	90008854 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
900086f8:	68fb      	ldr	r3, [r7, #12]
900086fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
900086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
900086fe:	695b      	ldr	r3, [r3, #20]
90008700:	2b00      	cmp	r3, #0
90008702:	d004      	beq.n	9000870e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008706:	3304      	adds	r3, #4
90008708:	4618      	mov	r0, r3
9000870a:	f7fd fc17 	bl	90005f3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
9000870e:	463b      	mov	r3, r7
90008710:	4618      	mov	r0, r3
90008712:	f7ff ff69 	bl	900085e8 <prvSampleTimeNow>
90008716:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
90008718:	687b      	ldr	r3, [r7, #4]
9000871a:	2b09      	cmp	r3, #9
9000871c:	f200 809b 	bhi.w	90008856 <prvProcessReceivedCommands+0x1aa>
90008720:	a201      	add	r2, pc, #4	; (adr r2, 90008728 <prvProcessReceivedCommands+0x7c>)
90008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008726:	bf00      	nop
90008728:	90008751 	.word	0x90008751
9000872c:	90008751 	.word	0x90008751
90008730:	90008751 	.word	0x90008751
90008734:	900087c9 	.word	0x900087c9
90008738:	900087dd 	.word	0x900087dd
9000873c:	9000882b 	.word	0x9000882b
90008740:	90008751 	.word	0x90008751
90008744:	90008751 	.word	0x90008751
90008748:	900087c9 	.word	0x900087c9
9000874c:	900087dd 	.word	0x900087dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90008756:	f043 0301 	orr.w	r3, r3, #1
9000875a:	b2da      	uxtb	r2, r3
9000875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000875e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
90008762:	68ba      	ldr	r2, [r7, #8]
90008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008766:	699b      	ldr	r3, [r3, #24]
90008768:	18d1      	adds	r1, r2, r3
9000876a:	68bb      	ldr	r3, [r7, #8]
9000876c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000876e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90008770:	f7ff ff5a 	bl	90008628 <prvInsertTimerInActiveList>
90008774:	4603      	mov	r3, r0
90008776:	2b00      	cmp	r3, #0
90008778:	d06d      	beq.n	90008856 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000877c:	6a1b      	ldr	r3, [r3, #32]
9000877e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90008780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90008788:	f003 0304 	and.w	r3, r3, #4
9000878c:	2b00      	cmp	r3, #0
9000878e:	d062      	beq.n	90008856 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
90008790:	68ba      	ldr	r2, [r7, #8]
90008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008794:	699b      	ldr	r3, [r3, #24]
90008796:	441a      	add	r2, r3
90008798:	2300      	movs	r3, #0
9000879a:	9300      	str	r3, [sp, #0]
9000879c:	2300      	movs	r3, #0
9000879e:	2100      	movs	r1, #0
900087a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
900087a2:	f7ff fdff 	bl	900083a4 <xTimerGenericCommand>
900087a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
900087a8:	6a3b      	ldr	r3, [r7, #32]
900087aa:	2b00      	cmp	r3, #0
900087ac:	d153      	bne.n	90008856 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
900087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
900087b2:	b672      	cpsid	i
900087b4:	f383 8811 	msr	BASEPRI, r3
900087b8:	f3bf 8f6f 	isb	sy
900087bc:	f3bf 8f4f 	dsb	sy
900087c0:	b662      	cpsie	i
900087c2:	61bb      	str	r3, [r7, #24]
}
900087c4:	bf00      	nop
900087c6:	e7fe      	b.n	900087c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900087ce:	f023 0301 	bic.w	r3, r3, #1
900087d2:	b2da      	uxtb	r2, r3
900087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
900087da:	e03c      	b.n	90008856 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
900087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900087e2:	f043 0301 	orr.w	r3, r3, #1
900087e6:	b2da      	uxtb	r2, r3
900087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
900087ee:	68ba      	ldr	r2, [r7, #8]
900087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
900087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087f6:	699b      	ldr	r3, [r3, #24]
900087f8:	2b00      	cmp	r3, #0
900087fa:	d10c      	bne.n	90008816 <prvProcessReceivedCommands+0x16a>
	__asm volatile
900087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
90008800:	b672      	cpsid	i
90008802:	f383 8811 	msr	BASEPRI, r3
90008806:	f3bf 8f6f 	isb	sy
9000880a:	f3bf 8f4f 	dsb	sy
9000880e:	b662      	cpsie	i
90008810:	617b      	str	r3, [r7, #20]
}
90008812:	bf00      	nop
90008814:	e7fe      	b.n	90008814 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
90008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008818:	699a      	ldr	r2, [r3, #24]
9000881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000881c:	18d1      	adds	r1, r2, r3
9000881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90008822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90008824:	f7ff ff00 	bl	90008628 <prvInsertTimerInActiveList>
					break;
90008828:	e015      	b.n	90008856 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
9000882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000882c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90008830:	f003 0302 	and.w	r3, r3, #2
90008834:	2b00      	cmp	r3, #0
90008836:	d103      	bne.n	90008840 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
90008838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000883a:	f000 fbc5 	bl	90008fc8 <vPortFree>
9000883e:	e00a      	b.n	90008856 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
90008842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90008846:	f023 0301 	bic.w	r3, r3, #1
9000884a:	b2da      	uxtb	r2, r3
9000884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000884e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
90008852:	e000      	b.n	90008856 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
90008854:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
90008856:	4b08      	ldr	r3, [pc, #32]	; (90008878 <prvProcessReceivedCommands+0x1cc>)
90008858:	681b      	ldr	r3, [r3, #0]
9000885a:	1d39      	adds	r1, r7, #4
9000885c:	2200      	movs	r2, #0
9000885e:	4618      	mov	r0, r3
90008860:	f7fe f850 	bl	90006904 <xQueueReceive>
90008864:	4603      	mov	r3, r0
90008866:	2b00      	cmp	r3, #0
90008868:	f47f af24 	bne.w	900086b4 <prvProcessReceivedCommands+0x8>
	}
}
9000886c:	bf00      	nop
9000886e:	bf00      	nop
90008870:	3730      	adds	r7, #48	; 0x30
90008872:	46bd      	mov	sp, r7
90008874:	bd80      	pop	{r7, pc}
90008876:	bf00      	nop
90008878:	20003f88 	.word	0x20003f88

9000887c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
9000887c:	b580      	push	{r7, lr}
9000887e:	b088      	sub	sp, #32
90008880:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
90008882:	e04a      	b.n	9000891a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90008884:	4b2e      	ldr	r3, [pc, #184]	; (90008940 <prvSwitchTimerLists+0xc4>)
90008886:	681b      	ldr	r3, [r3, #0]
90008888:	68db      	ldr	r3, [r3, #12]
9000888a:	681b      	ldr	r3, [r3, #0]
9000888c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000888e:	4b2c      	ldr	r3, [pc, #176]	; (90008940 <prvSwitchTimerLists+0xc4>)
90008890:	681b      	ldr	r3, [r3, #0]
90008892:	68db      	ldr	r3, [r3, #12]
90008894:	68db      	ldr	r3, [r3, #12]
90008896:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90008898:	68fb      	ldr	r3, [r7, #12]
9000889a:	3304      	adds	r3, #4
9000889c:	4618      	mov	r0, r3
9000889e:	f7fd fb4d 	bl	90005f3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900088a2:	68fb      	ldr	r3, [r7, #12]
900088a4:	6a1b      	ldr	r3, [r3, #32]
900088a6:	68f8      	ldr	r0, [r7, #12]
900088a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900088aa:	68fb      	ldr	r3, [r7, #12]
900088ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900088b0:	f003 0304 	and.w	r3, r3, #4
900088b4:	2b00      	cmp	r3, #0
900088b6:	d030      	beq.n	9000891a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
900088b8:	68fb      	ldr	r3, [r7, #12]
900088ba:	699b      	ldr	r3, [r3, #24]
900088bc:	693a      	ldr	r2, [r7, #16]
900088be:	4413      	add	r3, r2
900088c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
900088c2:	68ba      	ldr	r2, [r7, #8]
900088c4:	693b      	ldr	r3, [r7, #16]
900088c6:	429a      	cmp	r2, r3
900088c8:	d90e      	bls.n	900088e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
900088ca:	68fb      	ldr	r3, [r7, #12]
900088cc:	68ba      	ldr	r2, [r7, #8]
900088ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
900088d0:	68fb      	ldr	r3, [r7, #12]
900088d2:	68fa      	ldr	r2, [r7, #12]
900088d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900088d6:	4b1a      	ldr	r3, [pc, #104]	; (90008940 <prvSwitchTimerLists+0xc4>)
900088d8:	681a      	ldr	r2, [r3, #0]
900088da:	68fb      	ldr	r3, [r7, #12]
900088dc:	3304      	adds	r3, #4
900088de:	4619      	mov	r1, r3
900088e0:	4610      	mov	r0, r2
900088e2:	f7fd faf2 	bl	90005eca <vListInsert>
900088e6:	e018      	b.n	9000891a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
900088e8:	2300      	movs	r3, #0
900088ea:	9300      	str	r3, [sp, #0]
900088ec:	2300      	movs	r3, #0
900088ee:	693a      	ldr	r2, [r7, #16]
900088f0:	2100      	movs	r1, #0
900088f2:	68f8      	ldr	r0, [r7, #12]
900088f4:	f7ff fd56 	bl	900083a4 <xTimerGenericCommand>
900088f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
900088fa:	687b      	ldr	r3, [r7, #4]
900088fc:	2b00      	cmp	r3, #0
900088fe:	d10c      	bne.n	9000891a <prvSwitchTimerLists+0x9e>
	__asm volatile
90008900:	f04f 0350 	mov.w	r3, #80	; 0x50
90008904:	b672      	cpsid	i
90008906:	f383 8811 	msr	BASEPRI, r3
9000890a:	f3bf 8f6f 	isb	sy
9000890e:	f3bf 8f4f 	dsb	sy
90008912:	b662      	cpsie	i
90008914:	603b      	str	r3, [r7, #0]
}
90008916:	bf00      	nop
90008918:	e7fe      	b.n	90008918 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000891a:	4b09      	ldr	r3, [pc, #36]	; (90008940 <prvSwitchTimerLists+0xc4>)
9000891c:	681b      	ldr	r3, [r3, #0]
9000891e:	681b      	ldr	r3, [r3, #0]
90008920:	2b00      	cmp	r3, #0
90008922:	d1af      	bne.n	90008884 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
90008924:	4b06      	ldr	r3, [pc, #24]	; (90008940 <prvSwitchTimerLists+0xc4>)
90008926:	681b      	ldr	r3, [r3, #0]
90008928:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
9000892a:	4b06      	ldr	r3, [pc, #24]	; (90008944 <prvSwitchTimerLists+0xc8>)
9000892c:	681b      	ldr	r3, [r3, #0]
9000892e:	4a04      	ldr	r2, [pc, #16]	; (90008940 <prvSwitchTimerLists+0xc4>)
90008930:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
90008932:	4a04      	ldr	r2, [pc, #16]	; (90008944 <prvSwitchTimerLists+0xc8>)
90008934:	697b      	ldr	r3, [r7, #20]
90008936:	6013      	str	r3, [r2, #0]
}
90008938:	bf00      	nop
9000893a:	3718      	adds	r7, #24
9000893c:	46bd      	mov	sp, r7
9000893e:	bd80      	pop	{r7, pc}
90008940:	20003f80 	.word	0x20003f80
90008944:	20003f84 	.word	0x20003f84

90008948 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
90008948:	b580      	push	{r7, lr}
9000894a:	b082      	sub	sp, #8
9000894c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
9000894e:	f000 f945 	bl	90008bdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
90008952:	4b15      	ldr	r3, [pc, #84]	; (900089a8 <prvCheckForValidListAndQueue+0x60>)
90008954:	681b      	ldr	r3, [r3, #0]
90008956:	2b00      	cmp	r3, #0
90008958:	d120      	bne.n	9000899c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
9000895a:	4814      	ldr	r0, [pc, #80]	; (900089ac <prvCheckForValidListAndQueue+0x64>)
9000895c:	f7fd fa64 	bl	90005e28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90008960:	4813      	ldr	r0, [pc, #76]	; (900089b0 <prvCheckForValidListAndQueue+0x68>)
90008962:	f7fd fa61 	bl	90005e28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
90008966:	4b13      	ldr	r3, [pc, #76]	; (900089b4 <prvCheckForValidListAndQueue+0x6c>)
90008968:	4a10      	ldr	r2, [pc, #64]	; (900089ac <prvCheckForValidListAndQueue+0x64>)
9000896a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
9000896c:	4b12      	ldr	r3, [pc, #72]	; (900089b8 <prvCheckForValidListAndQueue+0x70>)
9000896e:	4a10      	ldr	r2, [pc, #64]	; (900089b0 <prvCheckForValidListAndQueue+0x68>)
90008970:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90008972:	2300      	movs	r3, #0
90008974:	9300      	str	r3, [sp, #0]
90008976:	4b11      	ldr	r3, [pc, #68]	; (900089bc <prvCheckForValidListAndQueue+0x74>)
90008978:	4a11      	ldr	r2, [pc, #68]	; (900089c0 <prvCheckForValidListAndQueue+0x78>)
9000897a:	2110      	movs	r1, #16
9000897c:	200a      	movs	r0, #10
9000897e:	f7fd fb71 	bl	90006064 <xQueueGenericCreateStatic>
90008982:	4603      	mov	r3, r0
90008984:	4a08      	ldr	r2, [pc, #32]	; (900089a8 <prvCheckForValidListAndQueue+0x60>)
90008986:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
90008988:	4b07      	ldr	r3, [pc, #28]	; (900089a8 <prvCheckForValidListAndQueue+0x60>)
9000898a:	681b      	ldr	r3, [r3, #0]
9000898c:	2b00      	cmp	r3, #0
9000898e:	d005      	beq.n	9000899c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90008990:	4b05      	ldr	r3, [pc, #20]	; (900089a8 <prvCheckForValidListAndQueue+0x60>)
90008992:	681b      	ldr	r3, [r3, #0]
90008994:	490b      	ldr	r1, [pc, #44]	; (900089c4 <prvCheckForValidListAndQueue+0x7c>)
90008996:	4618      	mov	r0, r3
90008998:	f7fe fbc2 	bl	90007120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000899c:	f000 f952 	bl	90008c44 <vPortExitCritical>
}
900089a0:	bf00      	nop
900089a2:	46bd      	mov	sp, r7
900089a4:	bd80      	pop	{r7, pc}
900089a6:	bf00      	nop
900089a8:	20003f88 	.word	0x20003f88
900089ac:	20003f58 	.word	0x20003f58
900089b0:	20003f6c 	.word	0x20003f6c
900089b4:	20003f80 	.word	0x20003f80
900089b8:	20003f84 	.word	0x20003f84
900089bc:	20004034 	.word	0x20004034
900089c0:	20003f94 	.word	0x20003f94
900089c4:	90017af0 	.word	0x90017af0

900089c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
900089c8:	b480      	push	{r7}
900089ca:	b085      	sub	sp, #20
900089cc:	af00      	add	r7, sp, #0
900089ce:	60f8      	str	r0, [r7, #12]
900089d0:	60b9      	str	r1, [r7, #8]
900089d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
900089d4:	68fb      	ldr	r3, [r7, #12]
900089d6:	3b04      	subs	r3, #4
900089d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
900089da:	68fb      	ldr	r3, [r7, #12]
900089dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
900089e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
900089e2:	68fb      	ldr	r3, [r7, #12]
900089e4:	3b04      	subs	r3, #4
900089e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
900089e8:	68bb      	ldr	r3, [r7, #8]
900089ea:	f023 0201 	bic.w	r2, r3, #1
900089ee:	68fb      	ldr	r3, [r7, #12]
900089f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
900089f2:	68fb      	ldr	r3, [r7, #12]
900089f4:	3b04      	subs	r3, #4
900089f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
900089f8:	4a0c      	ldr	r2, [pc, #48]	; (90008a2c <pxPortInitialiseStack+0x64>)
900089fa:	68fb      	ldr	r3, [r7, #12]
900089fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
900089fe:	68fb      	ldr	r3, [r7, #12]
90008a00:	3b14      	subs	r3, #20
90008a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
90008a04:	687a      	ldr	r2, [r7, #4]
90008a06:	68fb      	ldr	r3, [r7, #12]
90008a08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
90008a0a:	68fb      	ldr	r3, [r7, #12]
90008a0c:	3b04      	subs	r3, #4
90008a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
90008a10:	68fb      	ldr	r3, [r7, #12]
90008a12:	f06f 0202 	mvn.w	r2, #2
90008a16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
90008a18:	68fb      	ldr	r3, [r7, #12]
90008a1a:	3b20      	subs	r3, #32
90008a1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
90008a1e:	68fb      	ldr	r3, [r7, #12]
}
90008a20:	4618      	mov	r0, r3
90008a22:	3714      	adds	r7, #20
90008a24:	46bd      	mov	sp, r7
90008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
90008a2a:	4770      	bx	lr
90008a2c:	90008a31 	.word	0x90008a31

90008a30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
90008a30:	b480      	push	{r7}
90008a32:	b085      	sub	sp, #20
90008a34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
90008a36:	2300      	movs	r3, #0
90008a38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
90008a3a:	4b14      	ldr	r3, [pc, #80]	; (90008a8c <prvTaskExitError+0x5c>)
90008a3c:	681b      	ldr	r3, [r3, #0]
90008a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
90008a42:	d00c      	beq.n	90008a5e <prvTaskExitError+0x2e>
	__asm volatile
90008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
90008a48:	b672      	cpsid	i
90008a4a:	f383 8811 	msr	BASEPRI, r3
90008a4e:	f3bf 8f6f 	isb	sy
90008a52:	f3bf 8f4f 	dsb	sy
90008a56:	b662      	cpsie	i
90008a58:	60fb      	str	r3, [r7, #12]
}
90008a5a:	bf00      	nop
90008a5c:	e7fe      	b.n	90008a5c <prvTaskExitError+0x2c>
	__asm volatile
90008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
90008a62:	b672      	cpsid	i
90008a64:	f383 8811 	msr	BASEPRI, r3
90008a68:	f3bf 8f6f 	isb	sy
90008a6c:	f3bf 8f4f 	dsb	sy
90008a70:	b662      	cpsie	i
90008a72:	60bb      	str	r3, [r7, #8]
}
90008a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
90008a76:	bf00      	nop
90008a78:	687b      	ldr	r3, [r7, #4]
90008a7a:	2b00      	cmp	r3, #0
90008a7c:	d0fc      	beq.n	90008a78 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
90008a7e:	bf00      	nop
90008a80:	bf00      	nop
90008a82:	3714      	adds	r7, #20
90008a84:	46bd      	mov	sp, r7
90008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
90008a8a:	4770      	bx	lr
90008a8c:	2000000c 	.word	0x2000000c

90008a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
90008a90:	4b07      	ldr	r3, [pc, #28]	; (90008ab0 <pxCurrentTCBConst2>)
90008a92:	6819      	ldr	r1, [r3, #0]
90008a94:	6808      	ldr	r0, [r1, #0]
90008a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008a9a:	f380 8809 	msr	PSP, r0
90008a9e:	f3bf 8f6f 	isb	sy
90008aa2:	f04f 0000 	mov.w	r0, #0
90008aa6:	f380 8811 	msr	BASEPRI, r0
90008aaa:	4770      	bx	lr
90008aac:	f3af 8000 	nop.w

90008ab0 <pxCurrentTCBConst2>:
90008ab0:	20003a58 	.word	0x20003a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
90008ab4:	bf00      	nop
90008ab6:	bf00      	nop

90008ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
90008ab8:	4808      	ldr	r0, [pc, #32]	; (90008adc <prvPortStartFirstTask+0x24>)
90008aba:	6800      	ldr	r0, [r0, #0]
90008abc:	6800      	ldr	r0, [r0, #0]
90008abe:	f380 8808 	msr	MSP, r0
90008ac2:	f04f 0000 	mov.w	r0, #0
90008ac6:	f380 8814 	msr	CONTROL, r0
90008aca:	b662      	cpsie	i
90008acc:	b661      	cpsie	f
90008ace:	f3bf 8f4f 	dsb	sy
90008ad2:	f3bf 8f6f 	isb	sy
90008ad6:	df00      	svc	0
90008ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
90008ada:	bf00      	nop
90008adc:	e000ed08 	.word	0xe000ed08

90008ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
90008ae0:	b580      	push	{r7, lr}
90008ae2:	b084      	sub	sp, #16
90008ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
90008ae6:	4b37      	ldr	r3, [pc, #220]	; (90008bc4 <xPortStartScheduler+0xe4>)
90008ae8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
90008aea:	68fb      	ldr	r3, [r7, #12]
90008aec:	781b      	ldrb	r3, [r3, #0]
90008aee:	b2db      	uxtb	r3, r3
90008af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
90008af2:	68fb      	ldr	r3, [r7, #12]
90008af4:	22ff      	movs	r2, #255	; 0xff
90008af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
90008af8:	68fb      	ldr	r3, [r7, #12]
90008afa:	781b      	ldrb	r3, [r3, #0]
90008afc:	b2db      	uxtb	r3, r3
90008afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
90008b00:	78fb      	ldrb	r3, [r7, #3]
90008b02:	b2db      	uxtb	r3, r3
90008b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
90008b08:	b2da      	uxtb	r2, r3
90008b0a:	4b2f      	ldr	r3, [pc, #188]	; (90008bc8 <xPortStartScheduler+0xe8>)
90008b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
90008b0e:	4b2f      	ldr	r3, [pc, #188]	; (90008bcc <xPortStartScheduler+0xec>)
90008b10:	2207      	movs	r2, #7
90008b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90008b14:	e009      	b.n	90008b2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
90008b16:	4b2d      	ldr	r3, [pc, #180]	; (90008bcc <xPortStartScheduler+0xec>)
90008b18:	681b      	ldr	r3, [r3, #0]
90008b1a:	3b01      	subs	r3, #1
90008b1c:	4a2b      	ldr	r2, [pc, #172]	; (90008bcc <xPortStartScheduler+0xec>)
90008b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
90008b20:	78fb      	ldrb	r3, [r7, #3]
90008b22:	b2db      	uxtb	r3, r3
90008b24:	005b      	lsls	r3, r3, #1
90008b26:	b2db      	uxtb	r3, r3
90008b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90008b2a:	78fb      	ldrb	r3, [r7, #3]
90008b2c:	b2db      	uxtb	r3, r3
90008b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90008b32:	2b80      	cmp	r3, #128	; 0x80
90008b34:	d0ef      	beq.n	90008b16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
90008b36:	4b25      	ldr	r3, [pc, #148]	; (90008bcc <xPortStartScheduler+0xec>)
90008b38:	681b      	ldr	r3, [r3, #0]
90008b3a:	f1c3 0307 	rsb	r3, r3, #7
90008b3e:	2b04      	cmp	r3, #4
90008b40:	d00c      	beq.n	90008b5c <xPortStartScheduler+0x7c>
	__asm volatile
90008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
90008b46:	b672      	cpsid	i
90008b48:	f383 8811 	msr	BASEPRI, r3
90008b4c:	f3bf 8f6f 	isb	sy
90008b50:	f3bf 8f4f 	dsb	sy
90008b54:	b662      	cpsie	i
90008b56:	60bb      	str	r3, [r7, #8]
}
90008b58:	bf00      	nop
90008b5a:	e7fe      	b.n	90008b5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
90008b5c:	4b1b      	ldr	r3, [pc, #108]	; (90008bcc <xPortStartScheduler+0xec>)
90008b5e:	681b      	ldr	r3, [r3, #0]
90008b60:	021b      	lsls	r3, r3, #8
90008b62:	4a1a      	ldr	r2, [pc, #104]	; (90008bcc <xPortStartScheduler+0xec>)
90008b64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
90008b66:	4b19      	ldr	r3, [pc, #100]	; (90008bcc <xPortStartScheduler+0xec>)
90008b68:	681b      	ldr	r3, [r3, #0]
90008b6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90008b6e:	4a17      	ldr	r2, [pc, #92]	; (90008bcc <xPortStartScheduler+0xec>)
90008b70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
90008b72:	687b      	ldr	r3, [r7, #4]
90008b74:	b2da      	uxtb	r2, r3
90008b76:	68fb      	ldr	r3, [r7, #12]
90008b78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
90008b7a:	4b15      	ldr	r3, [pc, #84]	; (90008bd0 <xPortStartScheduler+0xf0>)
90008b7c:	681b      	ldr	r3, [r3, #0]
90008b7e:	4a14      	ldr	r2, [pc, #80]	; (90008bd0 <xPortStartScheduler+0xf0>)
90008b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90008b84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
90008b86:	4b12      	ldr	r3, [pc, #72]	; (90008bd0 <xPortStartScheduler+0xf0>)
90008b88:	681b      	ldr	r3, [r3, #0]
90008b8a:	4a11      	ldr	r2, [pc, #68]	; (90008bd0 <xPortStartScheduler+0xf0>)
90008b8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
90008b90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
90008b92:	f000 f8dd 	bl	90008d50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
90008b96:	4b0f      	ldr	r3, [pc, #60]	; (90008bd4 <xPortStartScheduler+0xf4>)
90008b98:	2200      	movs	r2, #0
90008b9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
90008b9c:	f000 f8fc 	bl	90008d98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
90008ba0:	4b0d      	ldr	r3, [pc, #52]	; (90008bd8 <xPortStartScheduler+0xf8>)
90008ba2:	681b      	ldr	r3, [r3, #0]
90008ba4:	4a0c      	ldr	r2, [pc, #48]	; (90008bd8 <xPortStartScheduler+0xf8>)
90008ba6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
90008baa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
90008bac:	f7ff ff84 	bl	90008ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
90008bb0:	f7fe ff34 	bl	90007a1c <vTaskSwitchContext>
	prvTaskExitError();
90008bb4:	f7ff ff3c 	bl	90008a30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
90008bb8:	2300      	movs	r3, #0
}
90008bba:	4618      	mov	r0, r3
90008bbc:	3710      	adds	r7, #16
90008bbe:	46bd      	mov	sp, r7
90008bc0:	bd80      	pop	{r7, pc}
90008bc2:	bf00      	nop
90008bc4:	e000e400 	.word	0xe000e400
90008bc8:	20004084 	.word	0x20004084
90008bcc:	20004088 	.word	0x20004088
90008bd0:	e000ed20 	.word	0xe000ed20
90008bd4:	2000000c 	.word	0x2000000c
90008bd8:	e000ef34 	.word	0xe000ef34

90008bdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
90008bdc:	b480      	push	{r7}
90008bde:	b083      	sub	sp, #12
90008be0:	af00      	add	r7, sp, #0
	__asm volatile
90008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
90008be6:	b672      	cpsid	i
90008be8:	f383 8811 	msr	BASEPRI, r3
90008bec:	f3bf 8f6f 	isb	sy
90008bf0:	f3bf 8f4f 	dsb	sy
90008bf4:	b662      	cpsie	i
90008bf6:	607b      	str	r3, [r7, #4]
}
90008bf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
90008bfa:	4b10      	ldr	r3, [pc, #64]	; (90008c3c <vPortEnterCritical+0x60>)
90008bfc:	681b      	ldr	r3, [r3, #0]
90008bfe:	3301      	adds	r3, #1
90008c00:	4a0e      	ldr	r2, [pc, #56]	; (90008c3c <vPortEnterCritical+0x60>)
90008c02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
90008c04:	4b0d      	ldr	r3, [pc, #52]	; (90008c3c <vPortEnterCritical+0x60>)
90008c06:	681b      	ldr	r3, [r3, #0]
90008c08:	2b01      	cmp	r3, #1
90008c0a:	d111      	bne.n	90008c30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
90008c0c:	4b0c      	ldr	r3, [pc, #48]	; (90008c40 <vPortEnterCritical+0x64>)
90008c0e:	681b      	ldr	r3, [r3, #0]
90008c10:	b2db      	uxtb	r3, r3
90008c12:	2b00      	cmp	r3, #0
90008c14:	d00c      	beq.n	90008c30 <vPortEnterCritical+0x54>
	__asm volatile
90008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
90008c1a:	b672      	cpsid	i
90008c1c:	f383 8811 	msr	BASEPRI, r3
90008c20:	f3bf 8f6f 	isb	sy
90008c24:	f3bf 8f4f 	dsb	sy
90008c28:	b662      	cpsie	i
90008c2a:	603b      	str	r3, [r7, #0]
}
90008c2c:	bf00      	nop
90008c2e:	e7fe      	b.n	90008c2e <vPortEnterCritical+0x52>
	}
}
90008c30:	bf00      	nop
90008c32:	370c      	adds	r7, #12
90008c34:	46bd      	mov	sp, r7
90008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
90008c3a:	4770      	bx	lr
90008c3c:	2000000c 	.word	0x2000000c
90008c40:	e000ed04 	.word	0xe000ed04

90008c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
90008c44:	b480      	push	{r7}
90008c46:	b083      	sub	sp, #12
90008c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
90008c4a:	4b13      	ldr	r3, [pc, #76]	; (90008c98 <vPortExitCritical+0x54>)
90008c4c:	681b      	ldr	r3, [r3, #0]
90008c4e:	2b00      	cmp	r3, #0
90008c50:	d10c      	bne.n	90008c6c <vPortExitCritical+0x28>
	__asm volatile
90008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
90008c56:	b672      	cpsid	i
90008c58:	f383 8811 	msr	BASEPRI, r3
90008c5c:	f3bf 8f6f 	isb	sy
90008c60:	f3bf 8f4f 	dsb	sy
90008c64:	b662      	cpsie	i
90008c66:	607b      	str	r3, [r7, #4]
}
90008c68:	bf00      	nop
90008c6a:	e7fe      	b.n	90008c6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
90008c6c:	4b0a      	ldr	r3, [pc, #40]	; (90008c98 <vPortExitCritical+0x54>)
90008c6e:	681b      	ldr	r3, [r3, #0]
90008c70:	3b01      	subs	r3, #1
90008c72:	4a09      	ldr	r2, [pc, #36]	; (90008c98 <vPortExitCritical+0x54>)
90008c74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
90008c76:	4b08      	ldr	r3, [pc, #32]	; (90008c98 <vPortExitCritical+0x54>)
90008c78:	681b      	ldr	r3, [r3, #0]
90008c7a:	2b00      	cmp	r3, #0
90008c7c:	d105      	bne.n	90008c8a <vPortExitCritical+0x46>
90008c7e:	2300      	movs	r3, #0
90008c80:	603b      	str	r3, [r7, #0]
	__asm volatile
90008c82:	683b      	ldr	r3, [r7, #0]
90008c84:	f383 8811 	msr	BASEPRI, r3
}
90008c88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
90008c8a:	bf00      	nop
90008c8c:	370c      	adds	r7, #12
90008c8e:	46bd      	mov	sp, r7
90008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
90008c94:	4770      	bx	lr
90008c96:	bf00      	nop
90008c98:	2000000c 	.word	0x2000000c
90008c9c:	00000000 	.word	0x00000000

90008ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
90008ca0:	f3ef 8009 	mrs	r0, PSP
90008ca4:	f3bf 8f6f 	isb	sy
90008ca8:	4b15      	ldr	r3, [pc, #84]	; (90008d00 <pxCurrentTCBConst>)
90008caa:	681a      	ldr	r2, [r3, #0]
90008cac:	f01e 0f10 	tst.w	lr, #16
90008cb0:	bf08      	it	eq
90008cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
90008cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008cba:	6010      	str	r0, [r2, #0]
90008cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
90008cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
90008cc4:	b672      	cpsid	i
90008cc6:	f380 8811 	msr	BASEPRI, r0
90008cca:	f3bf 8f4f 	dsb	sy
90008cce:	f3bf 8f6f 	isb	sy
90008cd2:	b662      	cpsie	i
90008cd4:	f7fe fea2 	bl	90007a1c <vTaskSwitchContext>
90008cd8:	f04f 0000 	mov.w	r0, #0
90008cdc:	f380 8811 	msr	BASEPRI, r0
90008ce0:	bc09      	pop	{r0, r3}
90008ce2:	6819      	ldr	r1, [r3, #0]
90008ce4:	6808      	ldr	r0, [r1, #0]
90008ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008cea:	f01e 0f10 	tst.w	lr, #16
90008cee:	bf08      	it	eq
90008cf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
90008cf4:	f380 8809 	msr	PSP, r0
90008cf8:	f3bf 8f6f 	isb	sy
90008cfc:	4770      	bx	lr
90008cfe:	bf00      	nop

90008d00 <pxCurrentTCBConst>:
90008d00:	20003a58 	.word	0x20003a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
90008d04:	bf00      	nop
90008d06:	bf00      	nop

90008d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
90008d08:	b580      	push	{r7, lr}
90008d0a:	b082      	sub	sp, #8
90008d0c:	af00      	add	r7, sp, #0
	__asm volatile
90008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
90008d12:	b672      	cpsid	i
90008d14:	f383 8811 	msr	BASEPRI, r3
90008d18:	f3bf 8f6f 	isb	sy
90008d1c:	f3bf 8f4f 	dsb	sy
90008d20:	b662      	cpsie	i
90008d22:	607b      	str	r3, [r7, #4]
}
90008d24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
90008d26:	f7fe fdbd 	bl	900078a4 <xTaskIncrementTick>
90008d2a:	4603      	mov	r3, r0
90008d2c:	2b00      	cmp	r3, #0
90008d2e:	d003      	beq.n	90008d38 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
90008d30:	4b06      	ldr	r3, [pc, #24]	; (90008d4c <xPortSysTickHandler+0x44>)
90008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90008d36:	601a      	str	r2, [r3, #0]
90008d38:	2300      	movs	r3, #0
90008d3a:	603b      	str	r3, [r7, #0]
	__asm volatile
90008d3c:	683b      	ldr	r3, [r7, #0]
90008d3e:	f383 8811 	msr	BASEPRI, r3
}
90008d42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
90008d44:	bf00      	nop
90008d46:	3708      	adds	r7, #8
90008d48:	46bd      	mov	sp, r7
90008d4a:	bd80      	pop	{r7, pc}
90008d4c:	e000ed04 	.word	0xe000ed04

90008d50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
90008d50:	b480      	push	{r7}
90008d52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
90008d54:	4b0b      	ldr	r3, [pc, #44]	; (90008d84 <vPortSetupTimerInterrupt+0x34>)
90008d56:	2200      	movs	r2, #0
90008d58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
90008d5a:	4b0b      	ldr	r3, [pc, #44]	; (90008d88 <vPortSetupTimerInterrupt+0x38>)
90008d5c:	2200      	movs	r2, #0
90008d5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
90008d60:	4b0a      	ldr	r3, [pc, #40]	; (90008d8c <vPortSetupTimerInterrupt+0x3c>)
90008d62:	681b      	ldr	r3, [r3, #0]
90008d64:	4a0a      	ldr	r2, [pc, #40]	; (90008d90 <vPortSetupTimerInterrupt+0x40>)
90008d66:	fba2 2303 	umull	r2, r3, r2, r3
90008d6a:	099b      	lsrs	r3, r3, #6
90008d6c:	4a09      	ldr	r2, [pc, #36]	; (90008d94 <vPortSetupTimerInterrupt+0x44>)
90008d6e:	3b01      	subs	r3, #1
90008d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
90008d72:	4b04      	ldr	r3, [pc, #16]	; (90008d84 <vPortSetupTimerInterrupt+0x34>)
90008d74:	2207      	movs	r2, #7
90008d76:	601a      	str	r2, [r3, #0]
}
90008d78:	bf00      	nop
90008d7a:	46bd      	mov	sp, r7
90008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
90008d80:	4770      	bx	lr
90008d82:	bf00      	nop
90008d84:	e000e010 	.word	0xe000e010
90008d88:	e000e018 	.word	0xe000e018
90008d8c:	20000000 	.word	0x20000000
90008d90:	10624dd3 	.word	0x10624dd3
90008d94:	e000e014 	.word	0xe000e014

90008d98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
90008d98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 90008da8 <vPortEnableVFP+0x10>
90008d9c:	6801      	ldr	r1, [r0, #0]
90008d9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90008da2:	6001      	str	r1, [r0, #0]
90008da4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
90008da6:	bf00      	nop
90008da8:	e000ed88 	.word	0xe000ed88

90008dac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
90008dac:	b480      	push	{r7}
90008dae:	b085      	sub	sp, #20
90008db0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
90008db2:	f3ef 8305 	mrs	r3, IPSR
90008db6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
90008db8:	68fb      	ldr	r3, [r7, #12]
90008dba:	2b0f      	cmp	r3, #15
90008dbc:	d916      	bls.n	90008dec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
90008dbe:	4a19      	ldr	r2, [pc, #100]	; (90008e24 <vPortValidateInterruptPriority+0x78>)
90008dc0:	68fb      	ldr	r3, [r7, #12]
90008dc2:	4413      	add	r3, r2
90008dc4:	781b      	ldrb	r3, [r3, #0]
90008dc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
90008dc8:	4b17      	ldr	r3, [pc, #92]	; (90008e28 <vPortValidateInterruptPriority+0x7c>)
90008dca:	781b      	ldrb	r3, [r3, #0]
90008dcc:	7afa      	ldrb	r2, [r7, #11]
90008dce:	429a      	cmp	r2, r3
90008dd0:	d20c      	bcs.n	90008dec <vPortValidateInterruptPriority+0x40>
	__asm volatile
90008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
90008dd6:	b672      	cpsid	i
90008dd8:	f383 8811 	msr	BASEPRI, r3
90008ddc:	f3bf 8f6f 	isb	sy
90008de0:	f3bf 8f4f 	dsb	sy
90008de4:	b662      	cpsie	i
90008de6:	607b      	str	r3, [r7, #4]
}
90008de8:	bf00      	nop
90008dea:	e7fe      	b.n	90008dea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
90008dec:	4b0f      	ldr	r3, [pc, #60]	; (90008e2c <vPortValidateInterruptPriority+0x80>)
90008dee:	681b      	ldr	r3, [r3, #0]
90008df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
90008df4:	4b0e      	ldr	r3, [pc, #56]	; (90008e30 <vPortValidateInterruptPriority+0x84>)
90008df6:	681b      	ldr	r3, [r3, #0]
90008df8:	429a      	cmp	r2, r3
90008dfa:	d90c      	bls.n	90008e16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
90008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
90008e00:	b672      	cpsid	i
90008e02:	f383 8811 	msr	BASEPRI, r3
90008e06:	f3bf 8f6f 	isb	sy
90008e0a:	f3bf 8f4f 	dsb	sy
90008e0e:	b662      	cpsie	i
90008e10:	603b      	str	r3, [r7, #0]
}
90008e12:	bf00      	nop
90008e14:	e7fe      	b.n	90008e14 <vPortValidateInterruptPriority+0x68>
	}
90008e16:	bf00      	nop
90008e18:	3714      	adds	r7, #20
90008e1a:	46bd      	mov	sp, r7
90008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
90008e20:	4770      	bx	lr
90008e22:	bf00      	nop
90008e24:	e000e3f0 	.word	0xe000e3f0
90008e28:	20004084 	.word	0x20004084
90008e2c:	e000ed0c 	.word	0xe000ed0c
90008e30:	20004088 	.word	0x20004088

90008e34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
90008e34:	b580      	push	{r7, lr}
90008e36:	b08a      	sub	sp, #40	; 0x28
90008e38:	af00      	add	r7, sp, #0
90008e3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
90008e3c:	2300      	movs	r3, #0
90008e3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
90008e40:	f7fe fc60 	bl	90007704 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
90008e44:	4b5b      	ldr	r3, [pc, #364]	; (90008fb4 <pvPortMalloc+0x180>)
90008e46:	681b      	ldr	r3, [r3, #0]
90008e48:	2b00      	cmp	r3, #0
90008e4a:	d101      	bne.n	90008e50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
90008e4c:	f000 f91a 	bl	90009084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
90008e50:	4b59      	ldr	r3, [pc, #356]	; (90008fb8 <pvPortMalloc+0x184>)
90008e52:	681a      	ldr	r2, [r3, #0]
90008e54:	687b      	ldr	r3, [r7, #4]
90008e56:	4013      	ands	r3, r2
90008e58:	2b00      	cmp	r3, #0
90008e5a:	f040 8092 	bne.w	90008f82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
90008e5e:	687b      	ldr	r3, [r7, #4]
90008e60:	2b00      	cmp	r3, #0
90008e62:	d01f      	beq.n	90008ea4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
90008e64:	2208      	movs	r2, #8
90008e66:	687b      	ldr	r3, [r7, #4]
90008e68:	4413      	add	r3, r2
90008e6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
90008e6c:	687b      	ldr	r3, [r7, #4]
90008e6e:	f003 0307 	and.w	r3, r3, #7
90008e72:	2b00      	cmp	r3, #0
90008e74:	d016      	beq.n	90008ea4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
90008e76:	687b      	ldr	r3, [r7, #4]
90008e78:	f023 0307 	bic.w	r3, r3, #7
90008e7c:	3308      	adds	r3, #8
90008e7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
90008e80:	687b      	ldr	r3, [r7, #4]
90008e82:	f003 0307 	and.w	r3, r3, #7
90008e86:	2b00      	cmp	r3, #0
90008e88:	d00c      	beq.n	90008ea4 <pvPortMalloc+0x70>
	__asm volatile
90008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
90008e8e:	b672      	cpsid	i
90008e90:	f383 8811 	msr	BASEPRI, r3
90008e94:	f3bf 8f6f 	isb	sy
90008e98:	f3bf 8f4f 	dsb	sy
90008e9c:	b662      	cpsie	i
90008e9e:	617b      	str	r3, [r7, #20]
}
90008ea0:	bf00      	nop
90008ea2:	e7fe      	b.n	90008ea2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
90008ea4:	687b      	ldr	r3, [r7, #4]
90008ea6:	2b00      	cmp	r3, #0
90008ea8:	d06b      	beq.n	90008f82 <pvPortMalloc+0x14e>
90008eaa:	4b44      	ldr	r3, [pc, #272]	; (90008fbc <pvPortMalloc+0x188>)
90008eac:	681b      	ldr	r3, [r3, #0]
90008eae:	687a      	ldr	r2, [r7, #4]
90008eb0:	429a      	cmp	r2, r3
90008eb2:	d866      	bhi.n	90008f82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
90008eb4:	4b42      	ldr	r3, [pc, #264]	; (90008fc0 <pvPortMalloc+0x18c>)
90008eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
90008eb8:	4b41      	ldr	r3, [pc, #260]	; (90008fc0 <pvPortMalloc+0x18c>)
90008eba:	681b      	ldr	r3, [r3, #0]
90008ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
90008ebe:	e004      	b.n	90008eca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
90008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
90008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008ec6:	681b      	ldr	r3, [r3, #0]
90008ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
90008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008ecc:	685b      	ldr	r3, [r3, #4]
90008ece:	687a      	ldr	r2, [r7, #4]
90008ed0:	429a      	cmp	r2, r3
90008ed2:	d903      	bls.n	90008edc <pvPortMalloc+0xa8>
90008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008ed6:	681b      	ldr	r3, [r3, #0]
90008ed8:	2b00      	cmp	r3, #0
90008eda:	d1f1      	bne.n	90008ec0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
90008edc:	4b35      	ldr	r3, [pc, #212]	; (90008fb4 <pvPortMalloc+0x180>)
90008ede:	681b      	ldr	r3, [r3, #0]
90008ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90008ee2:	429a      	cmp	r2, r3
90008ee4:	d04d      	beq.n	90008f82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
90008ee6:	6a3b      	ldr	r3, [r7, #32]
90008ee8:	681b      	ldr	r3, [r3, #0]
90008eea:	2208      	movs	r2, #8
90008eec:	4413      	add	r3, r2
90008eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
90008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008ef2:	681a      	ldr	r2, [r3, #0]
90008ef4:	6a3b      	ldr	r3, [r7, #32]
90008ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
90008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008efa:	685a      	ldr	r2, [r3, #4]
90008efc:	687b      	ldr	r3, [r7, #4]
90008efe:	1ad2      	subs	r2, r2, r3
90008f00:	2308      	movs	r3, #8
90008f02:	005b      	lsls	r3, r3, #1
90008f04:	429a      	cmp	r2, r3
90008f06:	d921      	bls.n	90008f4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
90008f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90008f0a:	687b      	ldr	r3, [r7, #4]
90008f0c:	4413      	add	r3, r2
90008f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
90008f10:	69bb      	ldr	r3, [r7, #24]
90008f12:	f003 0307 	and.w	r3, r3, #7
90008f16:	2b00      	cmp	r3, #0
90008f18:	d00c      	beq.n	90008f34 <pvPortMalloc+0x100>
	__asm volatile
90008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
90008f1e:	b672      	cpsid	i
90008f20:	f383 8811 	msr	BASEPRI, r3
90008f24:	f3bf 8f6f 	isb	sy
90008f28:	f3bf 8f4f 	dsb	sy
90008f2c:	b662      	cpsie	i
90008f2e:	613b      	str	r3, [r7, #16]
}
90008f30:	bf00      	nop
90008f32:	e7fe      	b.n	90008f32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
90008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008f36:	685a      	ldr	r2, [r3, #4]
90008f38:	687b      	ldr	r3, [r7, #4]
90008f3a:	1ad2      	subs	r2, r2, r3
90008f3c:	69bb      	ldr	r3, [r7, #24]
90008f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
90008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008f42:	687a      	ldr	r2, [r7, #4]
90008f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
90008f46:	69b8      	ldr	r0, [r7, #24]
90008f48:	f000 f8fe 	bl	90009148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
90008f4c:	4b1b      	ldr	r3, [pc, #108]	; (90008fbc <pvPortMalloc+0x188>)
90008f4e:	681a      	ldr	r2, [r3, #0]
90008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008f52:	685b      	ldr	r3, [r3, #4]
90008f54:	1ad3      	subs	r3, r2, r3
90008f56:	4a19      	ldr	r2, [pc, #100]	; (90008fbc <pvPortMalloc+0x188>)
90008f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90008f5a:	4b18      	ldr	r3, [pc, #96]	; (90008fbc <pvPortMalloc+0x188>)
90008f5c:	681a      	ldr	r2, [r3, #0]
90008f5e:	4b19      	ldr	r3, [pc, #100]	; (90008fc4 <pvPortMalloc+0x190>)
90008f60:	681b      	ldr	r3, [r3, #0]
90008f62:	429a      	cmp	r2, r3
90008f64:	d203      	bcs.n	90008f6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
90008f66:	4b15      	ldr	r3, [pc, #84]	; (90008fbc <pvPortMalloc+0x188>)
90008f68:	681b      	ldr	r3, [r3, #0]
90008f6a:	4a16      	ldr	r2, [pc, #88]	; (90008fc4 <pvPortMalloc+0x190>)
90008f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
90008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008f70:	685a      	ldr	r2, [r3, #4]
90008f72:	4b11      	ldr	r3, [pc, #68]	; (90008fb8 <pvPortMalloc+0x184>)
90008f74:	681b      	ldr	r3, [r3, #0]
90008f76:	431a      	orrs	r2, r3
90008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
90008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008f7e:	2200      	movs	r2, #0
90008f80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
90008f82:	f7fe fbcd 	bl	90007720 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
90008f86:	69fb      	ldr	r3, [r7, #28]
90008f88:	f003 0307 	and.w	r3, r3, #7
90008f8c:	2b00      	cmp	r3, #0
90008f8e:	d00c      	beq.n	90008faa <pvPortMalloc+0x176>
	__asm volatile
90008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
90008f94:	b672      	cpsid	i
90008f96:	f383 8811 	msr	BASEPRI, r3
90008f9a:	f3bf 8f6f 	isb	sy
90008f9e:	f3bf 8f4f 	dsb	sy
90008fa2:	b662      	cpsie	i
90008fa4:	60fb      	str	r3, [r7, #12]
}
90008fa6:	bf00      	nop
90008fa8:	e7fe      	b.n	90008fa8 <pvPortMalloc+0x174>
	return pvReturn;
90008faa:	69fb      	ldr	r3, [r7, #28]
}
90008fac:	4618      	mov	r0, r3
90008fae:	3728      	adds	r7, #40	; 0x28
90008fb0:	46bd      	mov	sp, r7
90008fb2:	bd80      	pop	{r7, pc}
90008fb4:	20007c94 	.word	0x20007c94
90008fb8:	20007ca0 	.word	0x20007ca0
90008fbc:	20007c98 	.word	0x20007c98
90008fc0:	20007c8c 	.word	0x20007c8c
90008fc4:	20007c9c 	.word	0x20007c9c

90008fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
90008fc8:	b580      	push	{r7, lr}
90008fca:	b086      	sub	sp, #24
90008fcc:	af00      	add	r7, sp, #0
90008fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
90008fd0:	687b      	ldr	r3, [r7, #4]
90008fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
90008fd4:	687b      	ldr	r3, [r7, #4]
90008fd6:	2b00      	cmp	r3, #0
90008fd8:	d04c      	beq.n	90009074 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
90008fda:	2308      	movs	r3, #8
90008fdc:	425b      	negs	r3, r3
90008fde:	697a      	ldr	r2, [r7, #20]
90008fe0:	4413      	add	r3, r2
90008fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
90008fe4:	697b      	ldr	r3, [r7, #20]
90008fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
90008fe8:	693b      	ldr	r3, [r7, #16]
90008fea:	685a      	ldr	r2, [r3, #4]
90008fec:	4b23      	ldr	r3, [pc, #140]	; (9000907c <vPortFree+0xb4>)
90008fee:	681b      	ldr	r3, [r3, #0]
90008ff0:	4013      	ands	r3, r2
90008ff2:	2b00      	cmp	r3, #0
90008ff4:	d10c      	bne.n	90009010 <vPortFree+0x48>
	__asm volatile
90008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
90008ffa:	b672      	cpsid	i
90008ffc:	f383 8811 	msr	BASEPRI, r3
90009000:	f3bf 8f6f 	isb	sy
90009004:	f3bf 8f4f 	dsb	sy
90009008:	b662      	cpsie	i
9000900a:	60fb      	str	r3, [r7, #12]
}
9000900c:	bf00      	nop
9000900e:	e7fe      	b.n	9000900e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
90009010:	693b      	ldr	r3, [r7, #16]
90009012:	681b      	ldr	r3, [r3, #0]
90009014:	2b00      	cmp	r3, #0
90009016:	d00c      	beq.n	90009032 <vPortFree+0x6a>
	__asm volatile
90009018:	f04f 0350 	mov.w	r3, #80	; 0x50
9000901c:	b672      	cpsid	i
9000901e:	f383 8811 	msr	BASEPRI, r3
90009022:	f3bf 8f6f 	isb	sy
90009026:	f3bf 8f4f 	dsb	sy
9000902a:	b662      	cpsie	i
9000902c:	60bb      	str	r3, [r7, #8]
}
9000902e:	bf00      	nop
90009030:	e7fe      	b.n	90009030 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
90009032:	693b      	ldr	r3, [r7, #16]
90009034:	685a      	ldr	r2, [r3, #4]
90009036:	4b11      	ldr	r3, [pc, #68]	; (9000907c <vPortFree+0xb4>)
90009038:	681b      	ldr	r3, [r3, #0]
9000903a:	4013      	ands	r3, r2
9000903c:	2b00      	cmp	r3, #0
9000903e:	d019      	beq.n	90009074 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
90009040:	693b      	ldr	r3, [r7, #16]
90009042:	681b      	ldr	r3, [r3, #0]
90009044:	2b00      	cmp	r3, #0
90009046:	d115      	bne.n	90009074 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
90009048:	693b      	ldr	r3, [r7, #16]
9000904a:	685a      	ldr	r2, [r3, #4]
9000904c:	4b0b      	ldr	r3, [pc, #44]	; (9000907c <vPortFree+0xb4>)
9000904e:	681b      	ldr	r3, [r3, #0]
90009050:	43db      	mvns	r3, r3
90009052:	401a      	ands	r2, r3
90009054:	693b      	ldr	r3, [r7, #16]
90009056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
90009058:	f7fe fb54 	bl	90007704 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
9000905c:	693b      	ldr	r3, [r7, #16]
9000905e:	685a      	ldr	r2, [r3, #4]
90009060:	4b07      	ldr	r3, [pc, #28]	; (90009080 <vPortFree+0xb8>)
90009062:	681b      	ldr	r3, [r3, #0]
90009064:	4413      	add	r3, r2
90009066:	4a06      	ldr	r2, [pc, #24]	; (90009080 <vPortFree+0xb8>)
90009068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
9000906a:	6938      	ldr	r0, [r7, #16]
9000906c:	f000 f86c 	bl	90009148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
90009070:	f7fe fb56 	bl	90007720 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
90009074:	bf00      	nop
90009076:	3718      	adds	r7, #24
90009078:	46bd      	mov	sp, r7
9000907a:	bd80      	pop	{r7, pc}
9000907c:	20007ca0 	.word	0x20007ca0
90009080:	20007c98 	.word	0x20007c98

90009084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
90009084:	b480      	push	{r7}
90009086:	b085      	sub	sp, #20
90009088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
9000908a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
9000908e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
90009090:	4b27      	ldr	r3, [pc, #156]	; (90009130 <prvHeapInit+0xac>)
90009092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
90009094:	68fb      	ldr	r3, [r7, #12]
90009096:	f003 0307 	and.w	r3, r3, #7
9000909a:	2b00      	cmp	r3, #0
9000909c:	d00c      	beq.n	900090b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000909e:	68fb      	ldr	r3, [r7, #12]
900090a0:	3307      	adds	r3, #7
900090a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
900090a4:	68fb      	ldr	r3, [r7, #12]
900090a6:	f023 0307 	bic.w	r3, r3, #7
900090aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
900090ac:	68ba      	ldr	r2, [r7, #8]
900090ae:	68fb      	ldr	r3, [r7, #12]
900090b0:	1ad3      	subs	r3, r2, r3
900090b2:	4a1f      	ldr	r2, [pc, #124]	; (90009130 <prvHeapInit+0xac>)
900090b4:	4413      	add	r3, r2
900090b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
900090b8:	68fb      	ldr	r3, [r7, #12]
900090ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
900090bc:	4a1d      	ldr	r2, [pc, #116]	; (90009134 <prvHeapInit+0xb0>)
900090be:	687b      	ldr	r3, [r7, #4]
900090c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
900090c2:	4b1c      	ldr	r3, [pc, #112]	; (90009134 <prvHeapInit+0xb0>)
900090c4:	2200      	movs	r2, #0
900090c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
900090c8:	687b      	ldr	r3, [r7, #4]
900090ca:	68ba      	ldr	r2, [r7, #8]
900090cc:	4413      	add	r3, r2
900090ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
900090d0:	2208      	movs	r2, #8
900090d2:	68fb      	ldr	r3, [r7, #12]
900090d4:	1a9b      	subs	r3, r3, r2
900090d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
900090d8:	68fb      	ldr	r3, [r7, #12]
900090da:	f023 0307 	bic.w	r3, r3, #7
900090de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
900090e0:	68fb      	ldr	r3, [r7, #12]
900090e2:	4a15      	ldr	r2, [pc, #84]	; (90009138 <prvHeapInit+0xb4>)
900090e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
900090e6:	4b14      	ldr	r3, [pc, #80]	; (90009138 <prvHeapInit+0xb4>)
900090e8:	681b      	ldr	r3, [r3, #0]
900090ea:	2200      	movs	r2, #0
900090ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
900090ee:	4b12      	ldr	r3, [pc, #72]	; (90009138 <prvHeapInit+0xb4>)
900090f0:	681b      	ldr	r3, [r3, #0]
900090f2:	2200      	movs	r2, #0
900090f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
900090f6:	687b      	ldr	r3, [r7, #4]
900090f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
900090fa:	683b      	ldr	r3, [r7, #0]
900090fc:	68fa      	ldr	r2, [r7, #12]
900090fe:	1ad2      	subs	r2, r2, r3
90009100:	683b      	ldr	r3, [r7, #0]
90009102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
90009104:	4b0c      	ldr	r3, [pc, #48]	; (90009138 <prvHeapInit+0xb4>)
90009106:	681a      	ldr	r2, [r3, #0]
90009108:	683b      	ldr	r3, [r7, #0]
9000910a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000910c:	683b      	ldr	r3, [r7, #0]
9000910e:	685b      	ldr	r3, [r3, #4]
90009110:	4a0a      	ldr	r2, [pc, #40]	; (9000913c <prvHeapInit+0xb8>)
90009112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
90009114:	683b      	ldr	r3, [r7, #0]
90009116:	685b      	ldr	r3, [r3, #4]
90009118:	4a09      	ldr	r2, [pc, #36]	; (90009140 <prvHeapInit+0xbc>)
9000911a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000911c:	4b09      	ldr	r3, [pc, #36]	; (90009144 <prvHeapInit+0xc0>)
9000911e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
90009122:	601a      	str	r2, [r3, #0]
}
90009124:	bf00      	nop
90009126:	3714      	adds	r7, #20
90009128:	46bd      	mov	sp, r7
9000912a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000912e:	4770      	bx	lr
90009130:	2000408c 	.word	0x2000408c
90009134:	20007c8c 	.word	0x20007c8c
90009138:	20007c94 	.word	0x20007c94
9000913c:	20007c9c 	.word	0x20007c9c
90009140:	20007c98 	.word	0x20007c98
90009144:	20007ca0 	.word	0x20007ca0

90009148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
90009148:	b480      	push	{r7}
9000914a:	b085      	sub	sp, #20
9000914c:	af00      	add	r7, sp, #0
9000914e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
90009150:	4b28      	ldr	r3, [pc, #160]	; (900091f4 <prvInsertBlockIntoFreeList+0xac>)
90009152:	60fb      	str	r3, [r7, #12]
90009154:	e002      	b.n	9000915c <prvInsertBlockIntoFreeList+0x14>
90009156:	68fb      	ldr	r3, [r7, #12]
90009158:	681b      	ldr	r3, [r3, #0]
9000915a:	60fb      	str	r3, [r7, #12]
9000915c:	68fb      	ldr	r3, [r7, #12]
9000915e:	681b      	ldr	r3, [r3, #0]
90009160:	687a      	ldr	r2, [r7, #4]
90009162:	429a      	cmp	r2, r3
90009164:	d8f7      	bhi.n	90009156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
90009166:	68fb      	ldr	r3, [r7, #12]
90009168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000916a:	68fb      	ldr	r3, [r7, #12]
9000916c:	685b      	ldr	r3, [r3, #4]
9000916e:	68ba      	ldr	r2, [r7, #8]
90009170:	4413      	add	r3, r2
90009172:	687a      	ldr	r2, [r7, #4]
90009174:	429a      	cmp	r2, r3
90009176:	d108      	bne.n	9000918a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
90009178:	68fb      	ldr	r3, [r7, #12]
9000917a:	685a      	ldr	r2, [r3, #4]
9000917c:	687b      	ldr	r3, [r7, #4]
9000917e:	685b      	ldr	r3, [r3, #4]
90009180:	441a      	add	r2, r3
90009182:	68fb      	ldr	r3, [r7, #12]
90009184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
90009186:	68fb      	ldr	r3, [r7, #12]
90009188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
9000918a:	687b      	ldr	r3, [r7, #4]
9000918c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000918e:	687b      	ldr	r3, [r7, #4]
90009190:	685b      	ldr	r3, [r3, #4]
90009192:	68ba      	ldr	r2, [r7, #8]
90009194:	441a      	add	r2, r3
90009196:	68fb      	ldr	r3, [r7, #12]
90009198:	681b      	ldr	r3, [r3, #0]
9000919a:	429a      	cmp	r2, r3
9000919c:	d118      	bne.n	900091d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000919e:	68fb      	ldr	r3, [r7, #12]
900091a0:	681a      	ldr	r2, [r3, #0]
900091a2:	4b15      	ldr	r3, [pc, #84]	; (900091f8 <prvInsertBlockIntoFreeList+0xb0>)
900091a4:	681b      	ldr	r3, [r3, #0]
900091a6:	429a      	cmp	r2, r3
900091a8:	d00d      	beq.n	900091c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
900091aa:	687b      	ldr	r3, [r7, #4]
900091ac:	685a      	ldr	r2, [r3, #4]
900091ae:	68fb      	ldr	r3, [r7, #12]
900091b0:	681b      	ldr	r3, [r3, #0]
900091b2:	685b      	ldr	r3, [r3, #4]
900091b4:	441a      	add	r2, r3
900091b6:	687b      	ldr	r3, [r7, #4]
900091b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
900091ba:	68fb      	ldr	r3, [r7, #12]
900091bc:	681b      	ldr	r3, [r3, #0]
900091be:	681a      	ldr	r2, [r3, #0]
900091c0:	687b      	ldr	r3, [r7, #4]
900091c2:	601a      	str	r2, [r3, #0]
900091c4:	e008      	b.n	900091d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
900091c6:	4b0c      	ldr	r3, [pc, #48]	; (900091f8 <prvInsertBlockIntoFreeList+0xb0>)
900091c8:	681a      	ldr	r2, [r3, #0]
900091ca:	687b      	ldr	r3, [r7, #4]
900091cc:	601a      	str	r2, [r3, #0]
900091ce:	e003      	b.n	900091d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
900091d0:	68fb      	ldr	r3, [r7, #12]
900091d2:	681a      	ldr	r2, [r3, #0]
900091d4:	687b      	ldr	r3, [r7, #4]
900091d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
900091d8:	68fa      	ldr	r2, [r7, #12]
900091da:	687b      	ldr	r3, [r7, #4]
900091dc:	429a      	cmp	r2, r3
900091de:	d002      	beq.n	900091e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
900091e0:	68fb      	ldr	r3, [r7, #12]
900091e2:	687a      	ldr	r2, [r7, #4]
900091e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
900091e6:	bf00      	nop
900091e8:	3714      	adds	r7, #20
900091ea:	46bd      	mov	sp, r7
900091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
900091f0:	4770      	bx	lr
900091f2:	bf00      	nop
900091f4:	20007c8c 	.word	0x20007c8c
900091f8:	20007c94 	.word	0x20007c94

900091fc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
900091fc:	b580      	push	{r7, lr}
900091fe:	b084      	sub	sp, #16
90009200:	af00      	add	r7, sp, #0
90009202:	6078      	str	r0, [r7, #4]
90009204:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
90009206:	683b      	ldr	r3, [r7, #0]
90009208:	681b      	ldr	r3, [r3, #0]
9000920a:	330c      	adds	r3, #12
9000920c:	461a      	mov	r2, r3
9000920e:	6839      	ldr	r1, [r7, #0]
90009210:	6878      	ldr	r0, [r7, #4]
90009212:	f002 fa73 	bl	9000b6fc <tcpip_send_msg_wait_sem>
90009216:	4603      	mov	r3, r0
90009218:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
9000921a:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000921e:	2b00      	cmp	r3, #0
90009220:	d103      	bne.n	9000922a <netconn_apimsg+0x2e>
    return apimsg->err;
90009222:	683b      	ldr	r3, [r7, #0]
90009224:	f993 3004 	ldrsb.w	r3, [r3, #4]
90009228:	e001      	b.n	9000922e <netconn_apimsg+0x32>
  }
  return err;
9000922a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
9000922e:	4618      	mov	r0, r3
90009230:	3710      	adds	r7, #16
90009232:	46bd      	mov	sp, r7
90009234:	bd80      	pop	{r7, pc}
	...

90009238 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
90009238:	b580      	push	{r7, lr}
9000923a:	b08c      	sub	sp, #48	; 0x30
9000923c:	af00      	add	r7, sp, #0
9000923e:	4603      	mov	r3, r0
90009240:	603a      	str	r2, [r7, #0]
90009242:	71fb      	strb	r3, [r7, #7]
90009244:	460b      	mov	r3, r1
90009246:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
90009248:	79fb      	ldrb	r3, [r7, #7]
9000924a:	6839      	ldr	r1, [r7, #0]
9000924c:	4618      	mov	r0, r3
9000924e:	f001 f923 	bl	9000a498 <netconn_alloc>
90009252:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
90009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009256:	2b00      	cmp	r3, #0
90009258:	d054      	beq.n	90009304 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
9000925a:	79bb      	ldrb	r3, [r7, #6]
9000925c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
9000925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009260:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
90009262:	f107 0308 	add.w	r3, r7, #8
90009266:	4619      	mov	r1, r3
90009268:	4829      	ldr	r0, [pc, #164]	; (90009310 <netconn_new_with_proto_and_callback+0xd8>)
9000926a:	f7ff ffc7 	bl	900091fc <netconn_apimsg>
9000926e:	4603      	mov	r3, r0
90009270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
90009274:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
90009278:	2b00      	cmp	r3, #0
9000927a:	d043      	beq.n	90009304 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
9000927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000927e:	685b      	ldr	r3, [r3, #4]
90009280:	2b00      	cmp	r3, #0
90009282:	d005      	beq.n	90009290 <netconn_new_with_proto_and_callback+0x58>
90009284:	4b23      	ldr	r3, [pc, #140]	; (90009314 <netconn_new_with_proto_and_callback+0xdc>)
90009286:	22a3      	movs	r2, #163	; 0xa3
90009288:	4923      	ldr	r1, [pc, #140]	; (90009318 <netconn_new_with_proto_and_callback+0xe0>)
9000928a:	4824      	ldr	r0, [pc, #144]	; (9000931c <netconn_new_with_proto_and_callback+0xe4>)
9000928c:	f00d fcd8 	bl	90016c40 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
90009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009292:	3310      	adds	r3, #16
90009294:	4618      	mov	r0, r3
90009296:	f00d f973 	bl	90016580 <sys_mbox_valid>
9000929a:	4603      	mov	r3, r0
9000929c:	2b00      	cmp	r3, #0
9000929e:	d105      	bne.n	900092ac <netconn_new_with_proto_and_callback+0x74>
900092a0:	4b1c      	ldr	r3, [pc, #112]	; (90009314 <netconn_new_with_proto_and_callback+0xdc>)
900092a2:	22a4      	movs	r2, #164	; 0xa4
900092a4:	491e      	ldr	r1, [pc, #120]	; (90009320 <netconn_new_with_proto_and_callback+0xe8>)
900092a6:	481d      	ldr	r0, [pc, #116]	; (9000931c <netconn_new_with_proto_and_callback+0xe4>)
900092a8:	f00d fcca 	bl	90016c40 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
900092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900092ae:	3314      	adds	r3, #20
900092b0:	4618      	mov	r0, r3
900092b2:	f00d f965 	bl	90016580 <sys_mbox_valid>
900092b6:	4603      	mov	r3, r0
900092b8:	2b00      	cmp	r3, #0
900092ba:	d005      	beq.n	900092c8 <netconn_new_with_proto_and_callback+0x90>
900092bc:	4b15      	ldr	r3, [pc, #84]	; (90009314 <netconn_new_with_proto_and_callback+0xdc>)
900092be:	22a6      	movs	r2, #166	; 0xa6
900092c0:	4918      	ldr	r1, [pc, #96]	; (90009324 <netconn_new_with_proto_and_callback+0xec>)
900092c2:	4816      	ldr	r0, [pc, #88]	; (9000931c <netconn_new_with_proto_and_callback+0xe4>)
900092c4:	f00d fcbc 	bl	90016c40 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
900092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900092ca:	330c      	adds	r3, #12
900092cc:	4618      	mov	r0, r3
900092ce:	f00d f9e5 	bl	9001669c <sys_sem_valid>
900092d2:	4603      	mov	r3, r0
900092d4:	2b00      	cmp	r3, #0
900092d6:	d105      	bne.n	900092e4 <netconn_new_with_proto_and_callback+0xac>
900092d8:	4b0e      	ldr	r3, [pc, #56]	; (90009314 <netconn_new_with_proto_and_callback+0xdc>)
900092da:	22a9      	movs	r2, #169	; 0xa9
900092dc:	4912      	ldr	r1, [pc, #72]	; (90009328 <netconn_new_with_proto_and_callback+0xf0>)
900092de:	480f      	ldr	r0, [pc, #60]	; (9000931c <netconn_new_with_proto_and_callback+0xe4>)
900092e0:	f00d fcae 	bl	90016c40 <iprintf>
      sys_sem_free(&conn->op_completed);
900092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900092e6:	330c      	adds	r3, #12
900092e8:	4618      	mov	r0, r3
900092ea:	f00d f9ca 	bl	90016682 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
900092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900092f0:	3310      	adds	r3, #16
900092f2:	4618      	mov	r0, r3
900092f4:	f00d f8d0 	bl	90016498 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
900092f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
900092fa:	2007      	movs	r0, #7
900092fc:	f002 ffae 	bl	9000c25c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
90009300:	2300      	movs	r3, #0
90009302:	e000      	b.n	90009306 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
90009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
90009306:	4618      	mov	r0, r3
90009308:	3730      	adds	r7, #48	; 0x30
9000930a:	46bd      	mov	sp, r7
9000930c:	bd80      	pop	{r7, pc}
9000930e:	bf00      	nop
90009310:	9000a46d 	.word	0x9000a46d
90009314:	90017af8 	.word	0x90017af8
90009318:	90017b2c 	.word	0x90017b2c
9000931c:	90017b50 	.word	0x90017b50
90009320:	90017b78 	.word	0x90017b78
90009324:	90017b90 	.word	0x90017b90
90009328:	90017bb4 	.word	0x90017bb4

9000932c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
9000932c:	b580      	push	{r7, lr}
9000932e:	b08c      	sub	sp, #48	; 0x30
90009330:	af00      	add	r7, sp, #0
90009332:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
90009334:	687b      	ldr	r3, [r7, #4]
90009336:	2b00      	cmp	r3, #0
90009338:	d101      	bne.n	9000933e <netconn_prepare_delete+0x12>
    return ERR_OK;
9000933a:	2300      	movs	r3, #0
9000933c:	e014      	b.n	90009368 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
9000933e:	687b      	ldr	r3, [r7, #4]
90009340:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
90009342:	2329      	movs	r3, #41	; 0x29
90009344:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
90009346:	f107 030c 	add.w	r3, r7, #12
9000934a:	4619      	mov	r1, r3
9000934c:	4808      	ldr	r0, [pc, #32]	; (90009370 <netconn_prepare_delete+0x44>)
9000934e:	f7ff ff55 	bl	900091fc <netconn_apimsg>
90009352:	4603      	mov	r3, r0
90009354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
90009358:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
9000935c:	2b00      	cmp	r3, #0
9000935e:	d002      	beq.n	90009366 <netconn_prepare_delete+0x3a>
    return err;
90009360:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
90009364:	e000      	b.n	90009368 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
90009366:	2300      	movs	r3, #0
}
90009368:	4618      	mov	r0, r3
9000936a:	3730      	adds	r7, #48	; 0x30
9000936c:	46bd      	mov	sp, r7
9000936e:	bd80      	pop	{r7, pc}
90009370:	9000a9d9 	.word	0x9000a9d9

90009374 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
90009374:	b580      	push	{r7, lr}
90009376:	b084      	sub	sp, #16
90009378:	af00      	add	r7, sp, #0
9000937a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
9000937c:	687b      	ldr	r3, [r7, #4]
9000937e:	2b00      	cmp	r3, #0
90009380:	d101      	bne.n	90009386 <netconn_delete+0x12>
    return ERR_OK;
90009382:	2300      	movs	r3, #0
90009384:	e00d      	b.n	900093a2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
90009386:	6878      	ldr	r0, [r7, #4]
90009388:	f7ff ffd0 	bl	9000932c <netconn_prepare_delete>
9000938c:	4603      	mov	r3, r0
9000938e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
90009390:	f997 300f 	ldrsb.w	r3, [r7, #15]
90009394:	2b00      	cmp	r3, #0
90009396:	d102      	bne.n	9000939e <netconn_delete+0x2a>
    netconn_free(conn);
90009398:	6878      	ldr	r0, [r7, #4]
9000939a:	f001 f8eb 	bl	9000a574 <netconn_free>
  }
  return err;
9000939e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
900093a2:	4618      	mov	r0, r3
900093a4:	3710      	adds	r7, #16
900093a6:	46bd      	mov	sp, r7
900093a8:	bd80      	pop	{r7, pc}
	...

900093ac <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
900093ac:	b580      	push	{r7, lr}
900093ae:	b08e      	sub	sp, #56	; 0x38
900093b0:	af00      	add	r7, sp, #0
900093b2:	60f8      	str	r0, [r7, #12]
900093b4:	60b9      	str	r1, [r7, #8]
900093b6:	4613      	mov	r3, r2
900093b8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
900093ba:	68fb      	ldr	r3, [r7, #12]
900093bc:	2b00      	cmp	r3, #0
900093be:	d109      	bne.n	900093d4 <netconn_bind+0x28>
900093c0:	4b11      	ldr	r3, [pc, #68]	; (90009408 <netconn_bind+0x5c>)
900093c2:	f44f 729c 	mov.w	r2, #312	; 0x138
900093c6:	4911      	ldr	r1, [pc, #68]	; (9000940c <netconn_bind+0x60>)
900093c8:	4811      	ldr	r0, [pc, #68]	; (90009410 <netconn_bind+0x64>)
900093ca:	f00d fc39 	bl	90016c40 <iprintf>
900093ce:	f06f 030f 	mvn.w	r3, #15
900093d2:	e015      	b.n	90009400 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
900093d4:	68bb      	ldr	r3, [r7, #8]
900093d6:	2b00      	cmp	r3, #0
900093d8:	d101      	bne.n	900093de <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
900093da:	4b0e      	ldr	r3, [pc, #56]	; (90009414 <netconn_bind+0x68>)
900093dc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
900093de:	68fb      	ldr	r3, [r7, #12]
900093e0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
900093e2:	68bb      	ldr	r3, [r7, #8]
900093e4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
900093e6:	88fb      	ldrh	r3, [r7, #6]
900093e8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
900093ea:	f107 0314 	add.w	r3, r7, #20
900093ee:	4619      	mov	r1, r3
900093f0:	4809      	ldr	r0, [pc, #36]	; (90009418 <netconn_bind+0x6c>)
900093f2:	f7ff ff03 	bl	900091fc <netconn_apimsg>
900093f6:	4603      	mov	r3, r0
900093f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
900093fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
90009400:	4618      	mov	r0, r3
90009402:	3738      	adds	r7, #56	; 0x38
90009404:	46bd      	mov	sp, r7
90009406:	bd80      	pop	{r7, pc}
90009408:	90017af8 	.word	0x90017af8
9000940c:	90017c30 	.word	0x90017c30
90009410:	90017b50 	.word	0x90017b50
90009414:	9001bdd4 	.word	0x9001bdd4
90009418:	9000aba1 	.word	0x9000aba1

9000941c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
9000941c:	b580      	push	{r7, lr}
9000941e:	b08c      	sub	sp, #48	; 0x30
90009420:	af00      	add	r7, sp, #0
90009422:	6078      	str	r0, [r7, #4]
90009424:	460b      	mov	r3, r1
90009426:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
90009428:	687b      	ldr	r3, [r7, #4]
9000942a:	2b00      	cmp	r3, #0
9000942c:	d109      	bne.n	90009442 <netconn_listen_with_backlog+0x26>
9000942e:	4b0d      	ldr	r3, [pc, #52]	; (90009464 <netconn_listen_with_backlog+0x48>)
90009430:	f240 12bb 	movw	r2, #443	; 0x1bb
90009434:	490c      	ldr	r1, [pc, #48]	; (90009468 <netconn_listen_with_backlog+0x4c>)
90009436:	480d      	ldr	r0, [pc, #52]	; (9000946c <netconn_listen_with_backlog+0x50>)
90009438:	f00d fc02 	bl	90016c40 <iprintf>
9000943c:	f06f 030f 	mvn.w	r3, #15
90009440:	e00c      	b.n	9000945c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
90009442:	687b      	ldr	r3, [r7, #4]
90009444:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
90009446:	f107 030c 	add.w	r3, r7, #12
9000944a:	4619      	mov	r1, r3
9000944c:	4808      	ldr	r0, [pc, #32]	; (90009470 <netconn_listen_with_backlog+0x54>)
9000944e:	f7ff fed5 	bl	900091fc <netconn_apimsg>
90009452:	4603      	mov	r3, r0
90009454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
90009458:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
9000945c:	4618      	mov	r0, r3
9000945e:	3730      	adds	r7, #48	; 0x30
90009460:	46bd      	mov	sp, r7
90009462:	bd80      	pop	{r7, pc}
90009464:	90017af8 	.word	0x90017af8
90009468:	90017cb0 	.word	0x90017cb0
9000946c:	90017b50 	.word	0x90017b50
90009470:	9000ac15 	.word	0x9000ac15

90009474 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
90009474:	b580      	push	{r7, lr}
90009476:	b086      	sub	sp, #24
90009478:	af00      	add	r7, sp, #0
9000947a:	6078      	str	r0, [r7, #4]
9000947c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
9000947e:	683b      	ldr	r3, [r7, #0]
90009480:	2b00      	cmp	r3, #0
90009482:	d109      	bne.n	90009498 <netconn_accept+0x24>
90009484:	4b3d      	ldr	r3, [pc, #244]	; (9000957c <netconn_accept+0x108>)
90009486:	f240 12e1 	movw	r2, #481	; 0x1e1
9000948a:	493d      	ldr	r1, [pc, #244]	; (90009580 <netconn_accept+0x10c>)
9000948c:	483d      	ldr	r0, [pc, #244]	; (90009584 <netconn_accept+0x110>)
9000948e:	f00d fbd7 	bl	90016c40 <iprintf>
90009492:	f06f 030f 	mvn.w	r3, #15
90009496:	e06c      	b.n	90009572 <netconn_accept+0xfe>
  *new_conn = NULL;
90009498:	683b      	ldr	r3, [r7, #0]
9000949a:	2200      	movs	r2, #0
9000949c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
9000949e:	687b      	ldr	r3, [r7, #4]
900094a0:	2b00      	cmp	r3, #0
900094a2:	d109      	bne.n	900094b8 <netconn_accept+0x44>
900094a4:	4b35      	ldr	r3, [pc, #212]	; (9000957c <netconn_accept+0x108>)
900094a6:	f240 12e3 	movw	r2, #483	; 0x1e3
900094aa:	4937      	ldr	r1, [pc, #220]	; (90009588 <netconn_accept+0x114>)
900094ac:	4835      	ldr	r0, [pc, #212]	; (90009584 <netconn_accept+0x110>)
900094ae:	f00d fbc7 	bl	90016c40 <iprintf>
900094b2:	f06f 030f 	mvn.w	r3, #15
900094b6:	e05c      	b.n	90009572 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
900094b8:	6878      	ldr	r0, [r7, #4]
900094ba:	f000 fb6c 	bl	90009b96 <netconn_err>
900094be:	4603      	mov	r3, r0
900094c0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
900094c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
900094c6:	2b00      	cmp	r3, #0
900094c8:	d002      	beq.n	900094d0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
900094ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
900094ce:	e050      	b.n	90009572 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
900094d0:	687b      	ldr	r3, [r7, #4]
900094d2:	3314      	adds	r3, #20
900094d4:	4618      	mov	r0, r3
900094d6:	f00d f853 	bl	90016580 <sys_mbox_valid>
900094da:	4603      	mov	r3, r0
900094dc:	2b00      	cmp	r3, #0
900094de:	d005      	beq.n	900094ec <netconn_accept+0x78>
900094e0:	687b      	ldr	r3, [r7, #4]
900094e2:	7f1b      	ldrb	r3, [r3, #28]
900094e4:	f003 0301 	and.w	r3, r3, #1
900094e8:	2b00      	cmp	r3, #0
900094ea:	d002      	beq.n	900094f2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
900094ec:	f06f 030e 	mvn.w	r3, #14
900094f0:	e03f      	b.n	90009572 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
900094f2:	687b      	ldr	r3, [r7, #4]
900094f4:	7f1b      	ldrb	r3, [r3, #28]
900094f6:	f003 0302 	and.w	r3, r3, #2
900094fa:	2b00      	cmp	r3, #0
900094fc:	d00e      	beq.n	9000951c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
900094fe:	687b      	ldr	r3, [r7, #4]
90009500:	3314      	adds	r3, #20
90009502:	f107 020c 	add.w	r2, r7, #12
90009506:	4611      	mov	r1, r2
90009508:	4618      	mov	r0, r3
9000950a:	f00d f822 	bl	90016552 <sys_arch_mbox_tryfetch>
9000950e:	4603      	mov	r3, r0
90009510:	f1b3 3fff 	cmp.w	r3, #4294967295
90009514:	d10a      	bne.n	9000952c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
90009516:	f06f 0306 	mvn.w	r3, #6
9000951a:	e02a      	b.n	90009572 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
9000951c:	687b      	ldr	r3, [r7, #4]
9000951e:	3314      	adds	r3, #20
90009520:	f107 010c 	add.w	r1, r7, #12
90009524:	2200      	movs	r2, #0
90009526:	4618      	mov	r0, r3
90009528:	f00c ffe2 	bl	900164f0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
9000952c:	687b      	ldr	r3, [r7, #4]
9000952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009530:	2b00      	cmp	r3, #0
90009532:	d005      	beq.n	90009540 <netconn_accept+0xcc>
90009534:	687b      	ldr	r3, [r7, #4]
90009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009538:	2200      	movs	r2, #0
9000953a:	2101      	movs	r1, #1
9000953c:	6878      	ldr	r0, [r7, #4]
9000953e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
90009540:	68fb      	ldr	r3, [r7, #12]
90009542:	f107 0213 	add.w	r2, r7, #19
90009546:	4611      	mov	r1, r2
90009548:	4618      	mov	r0, r3
9000954a:	f000 fb75 	bl	90009c38 <lwip_netconn_is_err_msg>
9000954e:	4603      	mov	r3, r0
90009550:	2b00      	cmp	r3, #0
90009552:	d002      	beq.n	9000955a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
90009554:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009558:	e00b      	b.n	90009572 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
9000955a:	68fb      	ldr	r3, [r7, #12]
9000955c:	2b00      	cmp	r3, #0
9000955e:	d102      	bne.n	90009566 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
90009560:	f06f 030e 	mvn.w	r3, #14
90009564:	e005      	b.n	90009572 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
90009566:	68fb      	ldr	r3, [r7, #12]
90009568:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
9000956a:	683b      	ldr	r3, [r7, #0]
9000956c:	697a      	ldr	r2, [r7, #20]
9000956e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
90009570:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
90009572:	4618      	mov	r0, r3
90009574:	3718      	adds	r7, #24
90009576:	46bd      	mov	sp, r7
90009578:	bd80      	pop	{r7, pc}
9000957a:	bf00      	nop
9000957c:	90017af8 	.word	0x90017af8
90009580:	90017cd0 	.word	0x90017cd0
90009584:	90017b50 	.word	0x90017b50
90009588:	90017cf0 	.word	0x90017cf0

9000958c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
9000958c:	b580      	push	{r7, lr}
9000958e:	b088      	sub	sp, #32
90009590:	af00      	add	r7, sp, #0
90009592:	60f8      	str	r0, [r7, #12]
90009594:	60b9      	str	r1, [r7, #8]
90009596:	4613      	mov	r3, r2
90009598:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
9000959a:	2300      	movs	r3, #0
9000959c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
9000959e:	68bb      	ldr	r3, [r7, #8]
900095a0:	2b00      	cmp	r3, #0
900095a2:	d109      	bne.n	900095b8 <netconn_recv_data+0x2c>
900095a4:	4b58      	ldr	r3, [pc, #352]	; (90009708 <netconn_recv_data+0x17c>)
900095a6:	f44f 7212 	mov.w	r2, #584	; 0x248
900095aa:	4958      	ldr	r1, [pc, #352]	; (9000970c <netconn_recv_data+0x180>)
900095ac:	4858      	ldr	r0, [pc, #352]	; (90009710 <netconn_recv_data+0x184>)
900095ae:	f00d fb47 	bl	90016c40 <iprintf>
900095b2:	f06f 030f 	mvn.w	r3, #15
900095b6:	e0a2      	b.n	900096fe <netconn_recv_data+0x172>
  *new_buf = NULL;
900095b8:	68bb      	ldr	r3, [r7, #8]
900095ba:	2200      	movs	r2, #0
900095bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
900095be:	68fb      	ldr	r3, [r7, #12]
900095c0:	2b00      	cmp	r3, #0
900095c2:	d109      	bne.n	900095d8 <netconn_recv_data+0x4c>
900095c4:	4b50      	ldr	r3, [pc, #320]	; (90009708 <netconn_recv_data+0x17c>)
900095c6:	f240 224a 	movw	r2, #586	; 0x24a
900095ca:	4952      	ldr	r1, [pc, #328]	; (90009714 <netconn_recv_data+0x188>)
900095cc:	4850      	ldr	r0, [pc, #320]	; (90009710 <netconn_recv_data+0x184>)
900095ce:	f00d fb37 	bl	90016c40 <iprintf>
900095d2:	f06f 030f 	mvn.w	r3, #15
900095d6:	e092      	b.n	900096fe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
900095d8:	68fb      	ldr	r3, [r7, #12]
900095da:	3310      	adds	r3, #16
900095dc:	4618      	mov	r0, r3
900095de:	f00c ffcf 	bl	90016580 <sys_mbox_valid>
900095e2:	4603      	mov	r3, r0
900095e4:	2b00      	cmp	r3, #0
900095e6:	d10e      	bne.n	90009606 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
900095e8:	68f8      	ldr	r0, [r7, #12]
900095ea:	f000 fad4 	bl	90009b96 <netconn_err>
900095ee:	4603      	mov	r3, r0
900095f0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
900095f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
900095f6:	2b00      	cmp	r3, #0
900095f8:	d002      	beq.n	90009600 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
900095fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
900095fe:	e07e      	b.n	900096fe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
90009600:	f06f 030a 	mvn.w	r3, #10
90009604:	e07b      	b.n	900096fe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
90009606:	68fb      	ldr	r3, [r7, #12]
90009608:	7f1b      	ldrb	r3, [r3, #28]
9000960a:	f003 0302 	and.w	r3, r3, #2
9000960e:	2b00      	cmp	r3, #0
90009610:	d10f      	bne.n	90009632 <netconn_recv_data+0xa6>
90009612:	79fb      	ldrb	r3, [r7, #7]
90009614:	f003 0304 	and.w	r3, r3, #4
90009618:	2b00      	cmp	r3, #0
9000961a:	d10a      	bne.n	90009632 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
9000961c:	68fb      	ldr	r3, [r7, #12]
9000961e:	7f1b      	ldrb	r3, [r3, #28]
90009620:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
90009624:	2b00      	cmp	r3, #0
90009626:	d104      	bne.n	90009632 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
90009628:	68fb      	ldr	r3, [r7, #12]
9000962a:	f993 3008 	ldrsb.w	r3, [r3, #8]
9000962e:	2b00      	cmp	r3, #0
90009630:	d023      	beq.n	9000967a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
90009632:	68fb      	ldr	r3, [r7, #12]
90009634:	3310      	adds	r3, #16
90009636:	f107 0218 	add.w	r2, r7, #24
9000963a:	4611      	mov	r1, r2
9000963c:	4618      	mov	r0, r3
9000963e:	f00c ff88 	bl	90016552 <sys_arch_mbox_tryfetch>
90009642:	4603      	mov	r3, r0
90009644:	f1b3 3fff 	cmp.w	r3, #4294967295
90009648:	d11f      	bne.n	9000968a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
9000964a:	68f8      	ldr	r0, [r7, #12]
9000964c:	f000 faa3 	bl	90009b96 <netconn_err>
90009650:	4603      	mov	r3, r0
90009652:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
90009654:	f997 301d 	ldrsb.w	r3, [r7, #29]
90009658:	2b00      	cmp	r3, #0
9000965a:	d002      	beq.n	90009662 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
9000965c:	f997 301d 	ldrsb.w	r3, [r7, #29]
90009660:	e04d      	b.n	900096fe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
90009662:	68fb      	ldr	r3, [r7, #12]
90009664:	7f1b      	ldrb	r3, [r3, #28]
90009666:	f003 0301 	and.w	r3, r3, #1
9000966a:	2b00      	cmp	r3, #0
9000966c:	d002      	beq.n	90009674 <netconn_recv_data+0xe8>
        return ERR_CONN;
9000966e:	f06f 030a 	mvn.w	r3, #10
90009672:	e044      	b.n	900096fe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
90009674:	f06f 0306 	mvn.w	r3, #6
90009678:	e041      	b.n	900096fe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
9000967a:	68fb      	ldr	r3, [r7, #12]
9000967c:	3310      	adds	r3, #16
9000967e:	f107 0118 	add.w	r1, r7, #24
90009682:	2200      	movs	r2, #0
90009684:	4618      	mov	r0, r3
90009686:	f00c ff33 	bl	900164f0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
9000968a:	68fb      	ldr	r3, [r7, #12]
9000968c:	781b      	ldrb	r3, [r3, #0]
9000968e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90009692:	2b10      	cmp	r3, #16
90009694:	d117      	bne.n	900096c6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
90009696:	69bb      	ldr	r3, [r7, #24]
90009698:	f107 0217 	add.w	r2, r7, #23
9000969c:	4611      	mov	r1, r2
9000969e:	4618      	mov	r0, r3
900096a0:	f000 faca 	bl	90009c38 <lwip_netconn_is_err_msg>
900096a4:	4603      	mov	r3, r0
900096a6:	2b00      	cmp	r3, #0
900096a8:	d009      	beq.n	900096be <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
900096aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
900096ae:	f113 0f0f 	cmn.w	r3, #15
900096b2:	d101      	bne.n	900096b8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
900096b4:	2300      	movs	r3, #0
900096b6:	e022      	b.n	900096fe <netconn_recv_data+0x172>
      }
      return err;
900096b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
900096bc:	e01f      	b.n	900096fe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
900096be:	69bb      	ldr	r3, [r7, #24]
900096c0:	891b      	ldrh	r3, [r3, #8]
900096c2:	83fb      	strh	r3, [r7, #30]
900096c4:	e00d      	b.n	900096e2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
900096c6:	69bb      	ldr	r3, [r7, #24]
900096c8:	2b00      	cmp	r3, #0
900096ca:	d106      	bne.n	900096da <netconn_recv_data+0x14e>
900096cc:	4b0e      	ldr	r3, [pc, #56]	; (90009708 <netconn_recv_data+0x17c>)
900096ce:	f240 2291 	movw	r2, #657	; 0x291
900096d2:	4911      	ldr	r1, [pc, #68]	; (90009718 <netconn_recv_data+0x18c>)
900096d4:	480e      	ldr	r0, [pc, #56]	; (90009710 <netconn_recv_data+0x184>)
900096d6:	f00d fab3 	bl	90016c40 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
900096da:	69bb      	ldr	r3, [r7, #24]
900096dc:	681b      	ldr	r3, [r3, #0]
900096de:	891b      	ldrh	r3, [r3, #8]
900096e0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
900096e2:	68fb      	ldr	r3, [r7, #12]
900096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900096e6:	2b00      	cmp	r3, #0
900096e8:	d005      	beq.n	900096f6 <netconn_recv_data+0x16a>
900096ea:	68fb      	ldr	r3, [r7, #12]
900096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900096ee:	8bfa      	ldrh	r2, [r7, #30]
900096f0:	2101      	movs	r1, #1
900096f2:	68f8      	ldr	r0, [r7, #12]
900096f4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
900096f6:	69ba      	ldr	r2, [r7, #24]
900096f8:	68bb      	ldr	r3, [r7, #8]
900096fa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
900096fc:	2300      	movs	r3, #0
}
900096fe:	4618      	mov	r0, r3
90009700:	3720      	adds	r7, #32
90009702:	46bd      	mov	sp, r7
90009704:	bd80      	pop	{r7, pc}
90009706:	bf00      	nop
90009708:	90017af8 	.word	0x90017af8
9000970c:	90017d10 	.word	0x90017d10
90009710:	90017b50 	.word	0x90017b50
90009714:	90017d30 	.word	0x90017d30
90009718:	90017d4c 	.word	0x90017d4c

9000971c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
9000971c:	b580      	push	{r7, lr}
9000971e:	b084      	sub	sp, #16
90009720:	af00      	add	r7, sp, #0
90009722:	60f8      	str	r0, [r7, #12]
90009724:	60b9      	str	r1, [r7, #8]
90009726:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
90009728:	68fb      	ldr	r3, [r7, #12]
9000972a:	2b00      	cmp	r3, #0
9000972c:	d005      	beq.n	9000973a <netconn_tcp_recvd_msg+0x1e>
9000972e:	68fb      	ldr	r3, [r7, #12]
90009730:	781b      	ldrb	r3, [r3, #0]
90009732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90009736:	2b10      	cmp	r3, #16
90009738:	d009      	beq.n	9000974e <netconn_tcp_recvd_msg+0x32>
9000973a:	4b0c      	ldr	r3, [pc, #48]	; (9000976c <netconn_tcp_recvd_msg+0x50>)
9000973c:	f240 22a7 	movw	r2, #679	; 0x2a7
90009740:	490b      	ldr	r1, [pc, #44]	; (90009770 <netconn_tcp_recvd_msg+0x54>)
90009742:	480c      	ldr	r0, [pc, #48]	; (90009774 <netconn_tcp_recvd_msg+0x58>)
90009744:	f00d fa7c 	bl	90016c40 <iprintf>
90009748:	f06f 030f 	mvn.w	r3, #15
9000974c:	e00a      	b.n	90009764 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
9000974e:	687b      	ldr	r3, [r7, #4]
90009750:	68fa      	ldr	r2, [r7, #12]
90009752:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
90009754:	687b      	ldr	r3, [r7, #4]
90009756:	68ba      	ldr	r2, [r7, #8]
90009758:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
9000975a:	6879      	ldr	r1, [r7, #4]
9000975c:	4806      	ldr	r0, [pc, #24]	; (90009778 <netconn_tcp_recvd_msg+0x5c>)
9000975e:	f7ff fd4d 	bl	900091fc <netconn_apimsg>
90009762:	4603      	mov	r3, r0
}
90009764:	4618      	mov	r0, r3
90009766:	3710      	adds	r7, #16
90009768:	46bd      	mov	sp, r7
9000976a:	bd80      	pop	{r7, pc}
9000976c:	90017af8 	.word	0x90017af8
90009770:	90017d58 	.word	0x90017d58
90009774:	90017b50 	.word	0x90017b50
90009778:	9000ad45 	.word	0x9000ad45

9000977c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
9000977c:	b580      	push	{r7, lr}
9000977e:	b090      	sub	sp, #64	; 0x40
90009780:	af00      	add	r7, sp, #0
90009782:	60f8      	str	r0, [r7, #12]
90009784:	60b9      	str	r1, [r7, #8]
90009786:	4613      	mov	r3, r2
90009788:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
9000978a:	68fb      	ldr	r3, [r7, #12]
9000978c:	3310      	adds	r3, #16
9000978e:	4618      	mov	r0, r3
90009790:	f00c fef6 	bl	90016580 <sys_mbox_valid>
90009794:	4603      	mov	r3, r0
90009796:	2b00      	cmp	r3, #0
90009798:	d102      	bne.n	900097a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
9000979a:	f06f 030a 	mvn.w	r3, #10
9000979e:	e06d      	b.n	9000987c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
900097a0:	68fb      	ldr	r3, [r7, #12]
900097a2:	7f1b      	ldrb	r3, [r3, #28]
900097a4:	b25b      	sxtb	r3, r3
900097a6:	2b00      	cmp	r3, #0
900097a8:	da07      	bge.n	900097ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
900097aa:	68fb      	ldr	r3, [r7, #12]
900097ac:	7f1b      	ldrb	r3, [r3, #28]
900097ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900097b2:	b2da      	uxtb	r2, r3
900097b4:	68fb      	ldr	r3, [r7, #12]
900097b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
900097b8:	e039      	b.n	9000982e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
900097ba:	79fb      	ldrb	r3, [r7, #7]
900097bc:	461a      	mov	r2, r3
900097be:	68b9      	ldr	r1, [r7, #8]
900097c0:	68f8      	ldr	r0, [r7, #12]
900097c2:	f7ff fee3 	bl	9000958c <netconn_recv_data>
900097c6:	4603      	mov	r3, r0
900097c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
900097cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
900097d0:	2b00      	cmp	r3, #0
900097d2:	d002      	beq.n	900097da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
900097d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
900097d8:	e050      	b.n	9000987c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
900097da:	68bb      	ldr	r3, [r7, #8]
900097dc:	681b      	ldr	r3, [r3, #0]
900097de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
900097e0:	79fb      	ldrb	r3, [r7, #7]
900097e2:	f003 0308 	and.w	r3, r3, #8
900097e6:	2b00      	cmp	r3, #0
900097e8:	d10e      	bne.n	90009808 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
900097ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900097ec:	2b00      	cmp	r3, #0
900097ee:	d002      	beq.n	900097f6 <netconn_recv_data_tcp+0x7a>
900097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900097f2:	891b      	ldrh	r3, [r3, #8]
900097f4:	e000      	b.n	900097f8 <netconn_recv_data_tcp+0x7c>
900097f6:	2301      	movs	r3, #1
900097f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
900097fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
900097fc:	f107 0214 	add.w	r2, r7, #20
90009800:	4619      	mov	r1, r3
90009802:	68f8      	ldr	r0, [r7, #12]
90009804:	f7ff ff8a 	bl	9000971c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
90009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000980a:	2b00      	cmp	r3, #0
9000980c:	d134      	bne.n	90009878 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
9000980e:	79fb      	ldrb	r3, [r7, #7]
90009810:	f003 0310 	and.w	r3, r3, #16
90009814:	2b00      	cmp	r3, #0
90009816:	d009      	beq.n	9000982c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
90009818:	68fb      	ldr	r3, [r7, #12]
9000981a:	7f1b      	ldrb	r3, [r3, #28]
9000981c:	f063 037f 	orn	r3, r3, #127	; 0x7f
90009820:	b2da      	uxtb	r2, r3
90009822:	68fb      	ldr	r3, [r7, #12]
90009824:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
90009826:	f06f 0306 	mvn.w	r3, #6
9000982a:	e027      	b.n	9000987c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
9000982c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
9000982e:	68fb      	ldr	r3, [r7, #12]
90009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009832:	2b00      	cmp	r3, #0
90009834:	d005      	beq.n	90009842 <netconn_recv_data_tcp+0xc6>
90009836:	68fb      	ldr	r3, [r7, #12]
90009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000983a:	2200      	movs	r2, #0
9000983c:	2101      	movs	r1, #1
9000983e:	68f8      	ldr	r0, [r7, #12]
90009840:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
90009842:	68fb      	ldr	r3, [r7, #12]
90009844:	685b      	ldr	r3, [r3, #4]
90009846:	2b00      	cmp	r3, #0
90009848:	d10f      	bne.n	9000986a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
9000984a:	68f8      	ldr	r0, [r7, #12]
9000984c:	f000 f9a3 	bl	90009b96 <netconn_err>
90009850:	4603      	mov	r3, r0
90009852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
90009856:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
9000985a:	2b00      	cmp	r3, #0
9000985c:	d002      	beq.n	90009864 <netconn_recv_data_tcp+0xe8>
          return err;
9000985e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
90009862:	e00b      	b.n	9000987c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
90009864:	f06f 030d 	mvn.w	r3, #13
90009868:	e008      	b.n	9000987c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
9000986a:	2101      	movs	r1, #1
9000986c:	68f8      	ldr	r0, [r7, #12]
9000986e:	f000 f955 	bl	90009b1c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
90009872:	f06f 030e 	mvn.w	r3, #14
90009876:	e001      	b.n	9000987c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
90009878:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
9000987c:	4618      	mov	r0, r3
9000987e:	3740      	adds	r7, #64	; 0x40
90009880:	46bd      	mov	sp, r7
90009882:	bd80      	pop	{r7, pc}

90009884 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
90009884:	b580      	push	{r7, lr}
90009886:	b086      	sub	sp, #24
90009888:	af00      	add	r7, sp, #0
9000988a:	6078      	str	r0, [r7, #4]
9000988c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
9000988e:	2300      	movs	r3, #0
90009890:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
90009892:	683b      	ldr	r3, [r7, #0]
90009894:	2b00      	cmp	r3, #0
90009896:	d109      	bne.n	900098ac <netconn_recv+0x28>
90009898:	4b32      	ldr	r3, [pc, #200]	; (90009964 <netconn_recv+0xe0>)
9000989a:	f240 3263 	movw	r2, #867	; 0x363
9000989e:	4932      	ldr	r1, [pc, #200]	; (90009968 <netconn_recv+0xe4>)
900098a0:	4832      	ldr	r0, [pc, #200]	; (9000996c <netconn_recv+0xe8>)
900098a2:	f00d f9cd 	bl	90016c40 <iprintf>
900098a6:	f06f 030f 	mvn.w	r3, #15
900098aa:	e056      	b.n	9000995a <netconn_recv+0xd6>
  *new_buf = NULL;
900098ac:	683b      	ldr	r3, [r7, #0]
900098ae:	2200      	movs	r2, #0
900098b0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
900098b2:	687b      	ldr	r3, [r7, #4]
900098b4:	2b00      	cmp	r3, #0
900098b6:	d109      	bne.n	900098cc <netconn_recv+0x48>
900098b8:	4b2a      	ldr	r3, [pc, #168]	; (90009964 <netconn_recv+0xe0>)
900098ba:	f240 3265 	movw	r2, #869	; 0x365
900098be:	492c      	ldr	r1, [pc, #176]	; (90009970 <netconn_recv+0xec>)
900098c0:	482a      	ldr	r0, [pc, #168]	; (9000996c <netconn_recv+0xe8>)
900098c2:	f00d f9bd 	bl	90016c40 <iprintf>
900098c6:	f06f 030f 	mvn.w	r3, #15
900098ca:	e046      	b.n	9000995a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
900098cc:	687b      	ldr	r3, [r7, #4]
900098ce:	781b      	ldrb	r3, [r3, #0]
900098d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
900098d4:	2b10      	cmp	r3, #16
900098d6:	d13a      	bne.n	9000994e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
900098d8:	2300      	movs	r3, #0
900098da:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
900098dc:	2006      	movs	r0, #6
900098de:	f002 fc6b 	bl	9000c1b8 <memp_malloc>
900098e2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
900098e4:	697b      	ldr	r3, [r7, #20]
900098e6:	2b00      	cmp	r3, #0
900098e8:	d102      	bne.n	900098f0 <netconn_recv+0x6c>
      return ERR_MEM;
900098ea:	f04f 33ff 	mov.w	r3, #4294967295
900098ee:	e034      	b.n	9000995a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
900098f0:	f107 030c 	add.w	r3, r7, #12
900098f4:	2200      	movs	r2, #0
900098f6:	4619      	mov	r1, r3
900098f8:	6878      	ldr	r0, [r7, #4]
900098fa:	f7ff ff3f 	bl	9000977c <netconn_recv_data_tcp>
900098fe:	4603      	mov	r3, r0
90009900:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
90009902:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009906:	2b00      	cmp	r3, #0
90009908:	d006      	beq.n	90009918 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
9000990a:	6979      	ldr	r1, [r7, #20]
9000990c:	2006      	movs	r0, #6
9000990e:	f002 fca5 	bl	9000c25c <memp_free>
      return err;
90009912:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009916:	e020      	b.n	9000995a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
90009918:	68fb      	ldr	r3, [r7, #12]
9000991a:	2b00      	cmp	r3, #0
9000991c:	d106      	bne.n	9000992c <netconn_recv+0xa8>
9000991e:	4b11      	ldr	r3, [pc, #68]	; (90009964 <netconn_recv+0xe0>)
90009920:	f240 3279 	movw	r2, #889	; 0x379
90009924:	4913      	ldr	r1, [pc, #76]	; (90009974 <netconn_recv+0xf0>)
90009926:	4811      	ldr	r0, [pc, #68]	; (9000996c <netconn_recv+0xe8>)
90009928:	f00d f98a 	bl	90016c40 <iprintf>

    buf->p = p;
9000992c:	68fa      	ldr	r2, [r7, #12]
9000992e:	697b      	ldr	r3, [r7, #20]
90009930:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
90009932:	68fa      	ldr	r2, [r7, #12]
90009934:	697b      	ldr	r3, [r7, #20]
90009936:	605a      	str	r2, [r3, #4]
    buf->port = 0;
90009938:	697b      	ldr	r3, [r7, #20]
9000993a:	2200      	movs	r2, #0
9000993c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
9000993e:	697b      	ldr	r3, [r7, #20]
90009940:	2200      	movs	r2, #0
90009942:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
90009944:	683b      	ldr	r3, [r7, #0]
90009946:	697a      	ldr	r2, [r7, #20]
90009948:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
9000994a:	2300      	movs	r3, #0
9000994c:	e005      	b.n	9000995a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
9000994e:	2200      	movs	r2, #0
90009950:	6839      	ldr	r1, [r7, #0]
90009952:	6878      	ldr	r0, [r7, #4]
90009954:	f7ff fe1a 	bl	9000958c <netconn_recv_data>
90009958:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
9000995a:	4618      	mov	r0, r3
9000995c:	3718      	adds	r7, #24
9000995e:	46bd      	mov	sp, r7
90009960:	bd80      	pop	{r7, pc}
90009962:	bf00      	nop
90009964:	90017af8 	.word	0x90017af8
90009968:	90017d10 	.word	0x90017d10
9000996c:	90017b50 	.word	0x90017b50
90009970:	90017d30 	.word	0x90017d30
90009974:	90017da8 	.word	0x90017da8

90009978 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
90009978:	b580      	push	{r7, lr}
9000997a:	b088      	sub	sp, #32
9000997c:	af02      	add	r7, sp, #8
9000997e:	60f8      	str	r0, [r7, #12]
90009980:	60b9      	str	r1, [r7, #8]
90009982:	607a      	str	r2, [r7, #4]
90009984:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
90009986:	68bb      	ldr	r3, [r7, #8]
90009988:	613b      	str	r3, [r7, #16]
  vector.len = size;
9000998a:	687b      	ldr	r3, [r7, #4]
9000998c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
9000998e:	78fa      	ldrb	r2, [r7, #3]
90009990:	f107 0110 	add.w	r1, r7, #16
90009994:	6a3b      	ldr	r3, [r7, #32]
90009996:	9300      	str	r3, [sp, #0]
90009998:	4613      	mov	r3, r2
9000999a:	2201      	movs	r2, #1
9000999c:	68f8      	ldr	r0, [r7, #12]
9000999e:	f000 f805 	bl	900099ac <netconn_write_vectors_partly>
900099a2:	4603      	mov	r3, r0
}
900099a4:	4618      	mov	r0, r3
900099a6:	3718      	adds	r7, #24
900099a8:	46bd      	mov	sp, r7
900099aa:	bd80      	pop	{r7, pc}

900099ac <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
900099ac:	b580      	push	{r7, lr}
900099ae:	b092      	sub	sp, #72	; 0x48
900099b0:	af00      	add	r7, sp, #0
900099b2:	60f8      	str	r0, [r7, #12]
900099b4:	60b9      	str	r1, [r7, #8]
900099b6:	4611      	mov	r1, r2
900099b8:	461a      	mov	r2, r3
900099ba:	460b      	mov	r3, r1
900099bc:	80fb      	strh	r3, [r7, #6]
900099be:	4613      	mov	r3, r2
900099c0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
900099c2:	68fb      	ldr	r3, [r7, #12]
900099c4:	2b00      	cmp	r3, #0
900099c6:	d109      	bne.n	900099dc <netconn_write_vectors_partly+0x30>
900099c8:	4b4e      	ldr	r3, [pc, #312]	; (90009b04 <netconn_write_vectors_partly+0x158>)
900099ca:	f240 32ee 	movw	r2, #1006	; 0x3ee
900099ce:	494e      	ldr	r1, [pc, #312]	; (90009b08 <netconn_write_vectors_partly+0x15c>)
900099d0:	484e      	ldr	r0, [pc, #312]	; (90009b0c <netconn_write_vectors_partly+0x160>)
900099d2:	f00d f935 	bl	90016c40 <iprintf>
900099d6:	f06f 030f 	mvn.w	r3, #15
900099da:	e08e      	b.n	90009afa <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
900099dc:	68fb      	ldr	r3, [r7, #12]
900099de:	781b      	ldrb	r3, [r3, #0]
900099e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
900099e4:	2b10      	cmp	r3, #16
900099e6:	d009      	beq.n	900099fc <netconn_write_vectors_partly+0x50>
900099e8:	4b46      	ldr	r3, [pc, #280]	; (90009b04 <netconn_write_vectors_partly+0x158>)
900099ea:	f240 32ef 	movw	r2, #1007	; 0x3ef
900099ee:	4948      	ldr	r1, [pc, #288]	; (90009b10 <netconn_write_vectors_partly+0x164>)
900099f0:	4846      	ldr	r0, [pc, #280]	; (90009b0c <netconn_write_vectors_partly+0x160>)
900099f2:	f00d f925 	bl	90016c40 <iprintf>
900099f6:	f06f 0305 	mvn.w	r3, #5
900099fa:	e07e      	b.n	90009afa <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
900099fc:	68fb      	ldr	r3, [r7, #12]
900099fe:	7f1b      	ldrb	r3, [r3, #28]
90009a00:	f003 0302 	and.w	r3, r3, #2
90009a04:	2b00      	cmp	r3, #0
90009a06:	d104      	bne.n	90009a12 <netconn_write_vectors_partly+0x66>
90009a08:	797b      	ldrb	r3, [r7, #5]
90009a0a:	f003 0304 	and.w	r3, r3, #4
90009a0e:	2b00      	cmp	r3, #0
90009a10:	d001      	beq.n	90009a16 <netconn_write_vectors_partly+0x6a>
90009a12:	2301      	movs	r3, #1
90009a14:	e000      	b.n	90009a18 <netconn_write_vectors_partly+0x6c>
90009a16:	2300      	movs	r3, #0
90009a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
90009a1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
90009a20:	2b00      	cmp	r3, #0
90009a22:	d005      	beq.n	90009a30 <netconn_write_vectors_partly+0x84>
90009a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90009a26:	2b00      	cmp	r3, #0
90009a28:	d102      	bne.n	90009a30 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
90009a2a:	f06f 0305 	mvn.w	r3, #5
90009a2e:	e064      	b.n	90009afa <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
90009a30:	2300      	movs	r3, #0
90009a32:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
90009a34:	2300      	movs	r3, #0
90009a36:	643b      	str	r3, [r7, #64]	; 0x40
90009a38:	e015      	b.n	90009a66 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
90009a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90009a3c:	00db      	lsls	r3, r3, #3
90009a3e:	68ba      	ldr	r2, [r7, #8]
90009a40:	4413      	add	r3, r2
90009a42:	685b      	ldr	r3, [r3, #4]
90009a44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90009a46:	4413      	add	r3, r2
90009a48:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
90009a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90009a4c:	00db      	lsls	r3, r3, #3
90009a4e:	68ba      	ldr	r2, [r7, #8]
90009a50:	4413      	add	r3, r2
90009a52:	685b      	ldr	r3, [r3, #4]
90009a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90009a56:	429a      	cmp	r2, r3
90009a58:	d202      	bcs.n	90009a60 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
90009a5a:	f06f 0305 	mvn.w	r3, #5
90009a5e:	e04c      	b.n	90009afa <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
90009a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90009a62:	3301      	adds	r3, #1
90009a64:	643b      	str	r3, [r7, #64]	; 0x40
90009a66:	88fb      	ldrh	r3, [r7, #6]
90009a68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
90009a6a:	429a      	cmp	r2, r3
90009a6c:	dbe5      	blt.n	90009a3a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
90009a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90009a70:	2b00      	cmp	r3, #0
90009a72:	d101      	bne.n	90009a78 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
90009a74:	2300      	movs	r3, #0
90009a76:	e040      	b.n	90009afa <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
90009a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90009a7a:	2b00      	cmp	r3, #0
90009a7c:	da0a      	bge.n	90009a94 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
90009a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90009a80:	2b00      	cmp	r3, #0
90009a82:	d102      	bne.n	90009a8a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
90009a84:	f06f 0305 	mvn.w	r3, #5
90009a88:	e037      	b.n	90009afa <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
90009a8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
90009a8e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
90009a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90009a92:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
90009a94:	68fb      	ldr	r3, [r7, #12]
90009a96:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
90009a98:	68bb      	ldr	r3, [r7, #8]
90009a9a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
90009a9c:	88fb      	ldrh	r3, [r7, #6]
90009a9e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
90009aa0:	2300      	movs	r3, #0
90009aa2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
90009aa4:	797b      	ldrb	r3, [r7, #5]
90009aa6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
90009aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90009aac:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
90009aae:	2300      	movs	r3, #0
90009ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
90009ab2:	f107 0314 	add.w	r3, r7, #20
90009ab6:	4619      	mov	r1, r3
90009ab8:	4816      	ldr	r0, [pc, #88]	; (90009b14 <netconn_write_vectors_partly+0x168>)
90009aba:	f7ff fb9f 	bl	900091fc <netconn_apimsg>
90009abe:	4603      	mov	r3, r0
90009ac0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
90009ac4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
90009ac8:	2b00      	cmp	r3, #0
90009aca:	d114      	bne.n	90009af6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
90009acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90009ace:	2b00      	cmp	r3, #0
90009ad0:	d002      	beq.n	90009ad8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
90009ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90009ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90009ad6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
90009ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
90009adc:	2b00      	cmp	r3, #0
90009ade:	d10a      	bne.n	90009af6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
90009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90009ae4:	429a      	cmp	r2, r3
90009ae6:	d006      	beq.n	90009af6 <netconn_write_vectors_partly+0x14a>
90009ae8:	4b06      	ldr	r3, [pc, #24]	; (90009b04 <netconn_write_vectors_partly+0x158>)
90009aea:	f44f 6286 	mov.w	r2, #1072	; 0x430
90009aee:	490a      	ldr	r1, [pc, #40]	; (90009b18 <netconn_write_vectors_partly+0x16c>)
90009af0:	4806      	ldr	r0, [pc, #24]	; (90009b0c <netconn_write_vectors_partly+0x160>)
90009af2:	f00d f8a5 	bl	90016c40 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
90009af6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
90009afa:	4618      	mov	r0, r3
90009afc:	3748      	adds	r7, #72	; 0x48
90009afe:	46bd      	mov	sp, r7
90009b00:	bd80      	pop	{r7, pc}
90009b02:	bf00      	nop
90009b04:	90017af8 	.word	0x90017af8
90009b08:	90017dd0 	.word	0x90017dd0
90009b0c:	90017b50 	.word	0x90017b50
90009b10:	90017dec 	.word	0x90017dec
90009b14:	9000b149 	.word	0x9000b149
90009b18:	90017e10 	.word	0x90017e10

90009b1c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
90009b1c:	b580      	push	{r7, lr}
90009b1e:	b08c      	sub	sp, #48	; 0x30
90009b20:	af00      	add	r7, sp, #0
90009b22:	6078      	str	r0, [r7, #4]
90009b24:	460b      	mov	r3, r1
90009b26:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
90009b28:	687b      	ldr	r3, [r7, #4]
90009b2a:	2b00      	cmp	r3, #0
90009b2c:	d109      	bne.n	90009b42 <netconn_close_shutdown+0x26>
90009b2e:	4b0f      	ldr	r3, [pc, #60]	; (90009b6c <netconn_close_shutdown+0x50>)
90009b30:	f240 4247 	movw	r2, #1095	; 0x447
90009b34:	490e      	ldr	r1, [pc, #56]	; (90009b70 <netconn_close_shutdown+0x54>)
90009b36:	480f      	ldr	r0, [pc, #60]	; (90009b74 <netconn_close_shutdown+0x58>)
90009b38:	f00d f882 	bl	90016c40 <iprintf>
90009b3c:	f06f 030f 	mvn.w	r3, #15
90009b40:	e010      	b.n	90009b64 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
90009b42:	687b      	ldr	r3, [r7, #4]
90009b44:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
90009b46:	78fb      	ldrb	r3, [r7, #3]
90009b48:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
90009b4a:	2329      	movs	r3, #41	; 0x29
90009b4c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
90009b4e:	f107 030c 	add.w	r3, r7, #12
90009b52:	4619      	mov	r1, r3
90009b54:	4808      	ldr	r0, [pc, #32]	; (90009b78 <netconn_close_shutdown+0x5c>)
90009b56:	f7ff fb51 	bl	900091fc <netconn_apimsg>
90009b5a:	4603      	mov	r3, r0
90009b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
90009b60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
90009b64:	4618      	mov	r0, r3
90009b66:	3730      	adds	r7, #48	; 0x30
90009b68:	46bd      	mov	sp, r7
90009b6a:	bd80      	pop	{r7, pc}
90009b6c:	90017af8 	.word	0x90017af8
90009b70:	90017e34 	.word	0x90017e34
90009b74:	90017b50 	.word	0x90017b50
90009b78:	9000b261 	.word	0x9000b261

90009b7c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
90009b7c:	b580      	push	{r7, lr}
90009b7e:	b082      	sub	sp, #8
90009b80:	af00      	add	r7, sp, #0
90009b82:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
90009b84:	2103      	movs	r1, #3
90009b86:	6878      	ldr	r0, [r7, #4]
90009b88:	f7ff ffc8 	bl	90009b1c <netconn_close_shutdown>
90009b8c:	4603      	mov	r3, r0
}
90009b8e:	4618      	mov	r0, r3
90009b90:	3708      	adds	r7, #8
90009b92:	46bd      	mov	sp, r7
90009b94:	bd80      	pop	{r7, pc}

90009b96 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
90009b96:	b580      	push	{r7, lr}
90009b98:	b084      	sub	sp, #16
90009b9a:	af00      	add	r7, sp, #0
90009b9c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
90009b9e:	687b      	ldr	r3, [r7, #4]
90009ba0:	2b00      	cmp	r3, #0
90009ba2:	d101      	bne.n	90009ba8 <netconn_err+0x12>
    return ERR_OK;
90009ba4:	2300      	movs	r3, #0
90009ba6:	e00d      	b.n	90009bc4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
90009ba8:	f00c fdf4 	bl	90016794 <sys_arch_protect>
90009bac:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
90009bae:	687b      	ldr	r3, [r7, #4]
90009bb0:	7a1b      	ldrb	r3, [r3, #8]
90009bb2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
90009bb4:	687b      	ldr	r3, [r7, #4]
90009bb6:	2200      	movs	r2, #0
90009bb8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
90009bba:	68f8      	ldr	r0, [r7, #12]
90009bbc:	f00c fdf8 	bl	900167b0 <sys_arch_unprotect>
  return err;
90009bc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
90009bc4:	4618      	mov	r0, r3
90009bc6:	3710      	adds	r7, #16
90009bc8:	46bd      	mov	sp, r7
90009bca:	bd80      	pop	{r7, pc}

90009bcc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
90009bcc:	b580      	push	{r7, lr}
90009bce:	b082      	sub	sp, #8
90009bd0:	af00      	add	r7, sp, #0
90009bd2:	4603      	mov	r3, r0
90009bd4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
90009bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
90009bda:	f113 0f0d 	cmn.w	r3, #13
90009bde:	d009      	beq.n	90009bf4 <lwip_netconn_err_to_msg+0x28>
90009be0:	f113 0f0d 	cmn.w	r3, #13
90009be4:	dc0c      	bgt.n	90009c00 <lwip_netconn_err_to_msg+0x34>
90009be6:	f113 0f0f 	cmn.w	r3, #15
90009bea:	d007      	beq.n	90009bfc <lwip_netconn_err_to_msg+0x30>
90009bec:	f113 0f0e 	cmn.w	r3, #14
90009bf0:	d002      	beq.n	90009bf8 <lwip_netconn_err_to_msg+0x2c>
90009bf2:	e005      	b.n	90009c00 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
90009bf4:	4b0a      	ldr	r3, [pc, #40]	; (90009c20 <lwip_netconn_err_to_msg+0x54>)
90009bf6:	e00e      	b.n	90009c16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
90009bf8:	4b0a      	ldr	r3, [pc, #40]	; (90009c24 <lwip_netconn_err_to_msg+0x58>)
90009bfa:	e00c      	b.n	90009c16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
90009bfc:	4b0a      	ldr	r3, [pc, #40]	; (90009c28 <lwip_netconn_err_to_msg+0x5c>)
90009bfe:	e00a      	b.n	90009c16 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
90009c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
90009c04:	2b00      	cmp	r3, #0
90009c06:	d005      	beq.n	90009c14 <lwip_netconn_err_to_msg+0x48>
90009c08:	4b08      	ldr	r3, [pc, #32]	; (90009c2c <lwip_netconn_err_to_msg+0x60>)
90009c0a:	227d      	movs	r2, #125	; 0x7d
90009c0c:	4908      	ldr	r1, [pc, #32]	; (90009c30 <lwip_netconn_err_to_msg+0x64>)
90009c0e:	4809      	ldr	r0, [pc, #36]	; (90009c34 <lwip_netconn_err_to_msg+0x68>)
90009c10:	f00d f816 	bl	90016c40 <iprintf>
      return NULL;
90009c14:	2300      	movs	r3, #0
  }
}
90009c16:	4618      	mov	r0, r3
90009c18:	3708      	adds	r7, #8
90009c1a:	46bd      	mov	sp, r7
90009c1c:	bd80      	pop	{r7, pc}
90009c1e:	bf00      	nop
90009c20:	9001b028 	.word	0x9001b028
90009c24:	9001b029 	.word	0x9001b029
90009c28:	9001b02a 	.word	0x9001b02a
90009c2c:	90017e50 	.word	0x90017e50
90009c30:	90017e84 	.word	0x90017e84
90009c34:	90017e94 	.word	0x90017e94

90009c38 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
90009c38:	b580      	push	{r7, lr}
90009c3a:	b082      	sub	sp, #8
90009c3c:	af00      	add	r7, sp, #0
90009c3e:	6078      	str	r0, [r7, #4]
90009c40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
90009c42:	683b      	ldr	r3, [r7, #0]
90009c44:	2b00      	cmp	r3, #0
90009c46:	d105      	bne.n	90009c54 <lwip_netconn_is_err_msg+0x1c>
90009c48:	4b12      	ldr	r3, [pc, #72]	; (90009c94 <lwip_netconn_is_err_msg+0x5c>)
90009c4a:	2285      	movs	r2, #133	; 0x85
90009c4c:	4912      	ldr	r1, [pc, #72]	; (90009c98 <lwip_netconn_is_err_msg+0x60>)
90009c4e:	4813      	ldr	r0, [pc, #76]	; (90009c9c <lwip_netconn_is_err_msg+0x64>)
90009c50:	f00c fff6 	bl	90016c40 <iprintf>

  if (msg == &netconn_aborted) {
90009c54:	687b      	ldr	r3, [r7, #4]
90009c56:	4a12      	ldr	r2, [pc, #72]	; (90009ca0 <lwip_netconn_is_err_msg+0x68>)
90009c58:	4293      	cmp	r3, r2
90009c5a:	d104      	bne.n	90009c66 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
90009c5c:	683b      	ldr	r3, [r7, #0]
90009c5e:	22f3      	movs	r2, #243	; 0xf3
90009c60:	701a      	strb	r2, [r3, #0]
    return 1;
90009c62:	2301      	movs	r3, #1
90009c64:	e012      	b.n	90009c8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
90009c66:	687b      	ldr	r3, [r7, #4]
90009c68:	4a0e      	ldr	r2, [pc, #56]	; (90009ca4 <lwip_netconn_is_err_msg+0x6c>)
90009c6a:	4293      	cmp	r3, r2
90009c6c:	d104      	bne.n	90009c78 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
90009c6e:	683b      	ldr	r3, [r7, #0]
90009c70:	22f2      	movs	r2, #242	; 0xf2
90009c72:	701a      	strb	r2, [r3, #0]
    return 1;
90009c74:	2301      	movs	r3, #1
90009c76:	e009      	b.n	90009c8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
90009c78:	687b      	ldr	r3, [r7, #4]
90009c7a:	4a0b      	ldr	r2, [pc, #44]	; (90009ca8 <lwip_netconn_is_err_msg+0x70>)
90009c7c:	4293      	cmp	r3, r2
90009c7e:	d104      	bne.n	90009c8a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
90009c80:	683b      	ldr	r3, [r7, #0]
90009c82:	22f1      	movs	r2, #241	; 0xf1
90009c84:	701a      	strb	r2, [r3, #0]
    return 1;
90009c86:	2301      	movs	r3, #1
90009c88:	e000      	b.n	90009c8c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
90009c8a:	2300      	movs	r3, #0
}
90009c8c:	4618      	mov	r0, r3
90009c8e:	3708      	adds	r7, #8
90009c90:	46bd      	mov	sp, r7
90009c92:	bd80      	pop	{r7, pc}
90009c94:	90017e50 	.word	0x90017e50
90009c98:	90017ebc 	.word	0x90017ebc
90009c9c:	90017e94 	.word	0x90017e94
90009ca0:	9001b028 	.word	0x9001b028
90009ca4:	9001b029 	.word	0x9001b029
90009ca8:	9001b02a 	.word	0x9001b02a

90009cac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
90009cac:	b580      	push	{r7, lr}
90009cae:	b088      	sub	sp, #32
90009cb0:	af00      	add	r7, sp, #0
90009cb2:	60f8      	str	r0, [r7, #12]
90009cb4:	60b9      	str	r1, [r7, #8]
90009cb6:	607a      	str	r2, [r7, #4]
90009cb8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
90009cba:	68bb      	ldr	r3, [r7, #8]
90009cbc:	2b00      	cmp	r3, #0
90009cbe:	d105      	bne.n	90009ccc <recv_udp+0x20>
90009cc0:	4b34      	ldr	r3, [pc, #208]	; (90009d94 <recv_udp+0xe8>)
90009cc2:	22e5      	movs	r2, #229	; 0xe5
90009cc4:	4934      	ldr	r1, [pc, #208]	; (90009d98 <recv_udp+0xec>)
90009cc6:	4835      	ldr	r0, [pc, #212]	; (90009d9c <recv_udp+0xf0>)
90009cc8:	f00c ffba 	bl	90016c40 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
90009ccc:	68fb      	ldr	r3, [r7, #12]
90009cce:	2b00      	cmp	r3, #0
90009cd0:	d105      	bne.n	90009cde <recv_udp+0x32>
90009cd2:	4b30      	ldr	r3, [pc, #192]	; (90009d94 <recv_udp+0xe8>)
90009cd4:	22e6      	movs	r2, #230	; 0xe6
90009cd6:	4932      	ldr	r1, [pc, #200]	; (90009da0 <recv_udp+0xf4>)
90009cd8:	4830      	ldr	r0, [pc, #192]	; (90009d9c <recv_udp+0xf0>)
90009cda:	f00c ffb1 	bl	90016c40 <iprintf>
  conn = (struct netconn *)arg;
90009cde:	68fb      	ldr	r3, [r7, #12]
90009ce0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
90009ce2:	69fb      	ldr	r3, [r7, #28]
90009ce4:	2b00      	cmp	r3, #0
90009ce6:	d103      	bne.n	90009cf0 <recv_udp+0x44>
    pbuf_free(p);
90009ce8:	6878      	ldr	r0, [r7, #4]
90009cea:	f003 f95b 	bl	9000cfa4 <pbuf_free>
    return;
90009cee:	e04d      	b.n	90009d8c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
90009cf0:	69fb      	ldr	r3, [r7, #28]
90009cf2:	685b      	ldr	r3, [r3, #4]
90009cf4:	68ba      	ldr	r2, [r7, #8]
90009cf6:	429a      	cmp	r2, r3
90009cf8:	d005      	beq.n	90009d06 <recv_udp+0x5a>
90009cfa:	4b26      	ldr	r3, [pc, #152]	; (90009d94 <recv_udp+0xe8>)
90009cfc:	22ee      	movs	r2, #238	; 0xee
90009cfe:	4929      	ldr	r1, [pc, #164]	; (90009da4 <recv_udp+0xf8>)
90009d00:	4826      	ldr	r0, [pc, #152]	; (90009d9c <recv_udp+0xf0>)
90009d02:	f00c ff9d 	bl	90016c40 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
90009d06:	69fb      	ldr	r3, [r7, #28]
90009d08:	3310      	adds	r3, #16
90009d0a:	4618      	mov	r0, r3
90009d0c:	f00c fc38 	bl	90016580 <sys_mbox_valid>
90009d10:	4603      	mov	r3, r0
90009d12:	2b00      	cmp	r3, #0
90009d14:	d103      	bne.n	90009d1e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
90009d16:	6878      	ldr	r0, [r7, #4]
90009d18:	f003 f944 	bl	9000cfa4 <pbuf_free>
    return;
90009d1c:	e036      	b.n	90009d8c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
90009d1e:	2006      	movs	r0, #6
90009d20:	f002 fa4a 	bl	9000c1b8 <memp_malloc>
90009d24:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
90009d26:	69bb      	ldr	r3, [r7, #24]
90009d28:	2b00      	cmp	r3, #0
90009d2a:	d103      	bne.n	90009d34 <recv_udp+0x88>
    pbuf_free(p);
90009d2c:	6878      	ldr	r0, [r7, #4]
90009d2e:	f003 f939 	bl	9000cfa4 <pbuf_free>
    return;
90009d32:	e02b      	b.n	90009d8c <recv_udp+0xe0>
  } else {
    buf->p = p;
90009d34:	69bb      	ldr	r3, [r7, #24]
90009d36:	687a      	ldr	r2, [r7, #4]
90009d38:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
90009d3a:	69bb      	ldr	r3, [r7, #24]
90009d3c:	687a      	ldr	r2, [r7, #4]
90009d3e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
90009d40:	683b      	ldr	r3, [r7, #0]
90009d42:	2b00      	cmp	r3, #0
90009d44:	d002      	beq.n	90009d4c <recv_udp+0xa0>
90009d46:	683b      	ldr	r3, [r7, #0]
90009d48:	681b      	ldr	r3, [r3, #0]
90009d4a:	e000      	b.n	90009d4e <recv_udp+0xa2>
90009d4c:	2300      	movs	r3, #0
90009d4e:	69ba      	ldr	r2, [r7, #24]
90009d50:	6093      	str	r3, [r2, #8]
    buf->port = port;
90009d52:	69bb      	ldr	r3, [r7, #24]
90009d54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
90009d56:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
90009d58:	687b      	ldr	r3, [r7, #4]
90009d5a:	891b      	ldrh	r3, [r3, #8]
90009d5c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
90009d5e:	69fb      	ldr	r3, [r7, #28]
90009d60:	3310      	adds	r3, #16
90009d62:	69b9      	ldr	r1, [r7, #24]
90009d64:	4618      	mov	r0, r3
90009d66:	f00c fba9 	bl	900164bc <sys_mbox_trypost>
90009d6a:	4603      	mov	r3, r0
90009d6c:	2b00      	cmp	r3, #0
90009d6e:	d003      	beq.n	90009d78 <recv_udp+0xcc>
    netbuf_delete(buf);
90009d70:	69b8      	ldr	r0, [r7, #24]
90009d72:	f001 fb01 	bl	9000b378 <netbuf_delete>
    return;
90009d76:	e009      	b.n	90009d8c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
90009d78:	69fb      	ldr	r3, [r7, #28]
90009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009d7c:	2b00      	cmp	r3, #0
90009d7e:	d005      	beq.n	90009d8c <recv_udp+0xe0>
90009d80:	69fb      	ldr	r3, [r7, #28]
90009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009d84:	8afa      	ldrh	r2, [r7, #22]
90009d86:	2100      	movs	r1, #0
90009d88:	69f8      	ldr	r0, [r7, #28]
90009d8a:	4798      	blx	r3
  }
}
90009d8c:	3720      	adds	r7, #32
90009d8e:	46bd      	mov	sp, r7
90009d90:	bd80      	pop	{r7, pc}
90009d92:	bf00      	nop
90009d94:	90017e50 	.word	0x90017e50
90009d98:	90017ec8 	.word	0x90017ec8
90009d9c:	90017e94 	.word	0x90017e94
90009da0:	90017eec 	.word	0x90017eec
90009da4:	90017f0c 	.word	0x90017f0c

90009da8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
90009da8:	b580      	push	{r7, lr}
90009daa:	b088      	sub	sp, #32
90009dac:	af00      	add	r7, sp, #0
90009dae:	60f8      	str	r0, [r7, #12]
90009db0:	60b9      	str	r1, [r7, #8]
90009db2:	607a      	str	r2, [r7, #4]
90009db4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
90009db6:	68bb      	ldr	r3, [r7, #8]
90009db8:	2b00      	cmp	r3, #0
90009dba:	d106      	bne.n	90009dca <recv_tcp+0x22>
90009dbc:	4b36      	ldr	r3, [pc, #216]	; (90009e98 <recv_tcp+0xf0>)
90009dbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
90009dc2:	4936      	ldr	r1, [pc, #216]	; (90009e9c <recv_tcp+0xf4>)
90009dc4:	4836      	ldr	r0, [pc, #216]	; (90009ea0 <recv_tcp+0xf8>)
90009dc6:	f00c ff3b 	bl	90016c40 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
90009dca:	68fb      	ldr	r3, [r7, #12]
90009dcc:	2b00      	cmp	r3, #0
90009dce:	d106      	bne.n	90009dde <recv_tcp+0x36>
90009dd0:	4b31      	ldr	r3, [pc, #196]	; (90009e98 <recv_tcp+0xf0>)
90009dd2:	f240 122d 	movw	r2, #301	; 0x12d
90009dd6:	4933      	ldr	r1, [pc, #204]	; (90009ea4 <recv_tcp+0xfc>)
90009dd8:	4831      	ldr	r0, [pc, #196]	; (90009ea0 <recv_tcp+0xf8>)
90009dda:	f00c ff31 	bl	90016c40 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
90009dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
90009de2:	2b00      	cmp	r3, #0
90009de4:	d006      	beq.n	90009df4 <recv_tcp+0x4c>
90009de6:	4b2c      	ldr	r3, [pc, #176]	; (90009e98 <recv_tcp+0xf0>)
90009de8:	f44f 7297 	mov.w	r2, #302	; 0x12e
90009dec:	492e      	ldr	r1, [pc, #184]	; (90009ea8 <recv_tcp+0x100>)
90009dee:	482c      	ldr	r0, [pc, #176]	; (90009ea0 <recv_tcp+0xf8>)
90009df0:	f00c ff26 	bl	90016c40 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
90009df4:	68fb      	ldr	r3, [r7, #12]
90009df6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
90009df8:	697b      	ldr	r3, [r7, #20]
90009dfa:	2b00      	cmp	r3, #0
90009dfc:	d102      	bne.n	90009e04 <recv_tcp+0x5c>
    return ERR_VAL;
90009dfe:	f06f 0305 	mvn.w	r3, #5
90009e02:	e045      	b.n	90009e90 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
90009e04:	697b      	ldr	r3, [r7, #20]
90009e06:	685b      	ldr	r3, [r3, #4]
90009e08:	68ba      	ldr	r2, [r7, #8]
90009e0a:	429a      	cmp	r2, r3
90009e0c:	d006      	beq.n	90009e1c <recv_tcp+0x74>
90009e0e:	4b22      	ldr	r3, [pc, #136]	; (90009e98 <recv_tcp+0xf0>)
90009e10:	f240 1235 	movw	r2, #309	; 0x135
90009e14:	4925      	ldr	r1, [pc, #148]	; (90009eac <recv_tcp+0x104>)
90009e16:	4822      	ldr	r0, [pc, #136]	; (90009ea0 <recv_tcp+0xf8>)
90009e18:	f00c ff12 	bl	90016c40 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
90009e1c:	697b      	ldr	r3, [r7, #20]
90009e1e:	3310      	adds	r3, #16
90009e20:	4618      	mov	r0, r3
90009e22:	f00c fbad 	bl	90016580 <sys_mbox_valid>
90009e26:	4603      	mov	r3, r0
90009e28:	2b00      	cmp	r3, #0
90009e2a:	d10d      	bne.n	90009e48 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
90009e2c:	687b      	ldr	r3, [r7, #4]
90009e2e:	2b00      	cmp	r3, #0
90009e30:	d008      	beq.n	90009e44 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
90009e32:	687b      	ldr	r3, [r7, #4]
90009e34:	891b      	ldrh	r3, [r3, #8]
90009e36:	4619      	mov	r1, r3
90009e38:	68b8      	ldr	r0, [r7, #8]
90009e3a:	f004 f86b 	bl	9000df14 <tcp_recved>
      pbuf_free(p);
90009e3e:	6878      	ldr	r0, [r7, #4]
90009e40:	f003 f8b0 	bl	9000cfa4 <pbuf_free>
    }
    return ERR_OK;
90009e44:	2300      	movs	r3, #0
90009e46:	e023      	b.n	90009e90 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
90009e48:	687b      	ldr	r3, [r7, #4]
90009e4a:	2b00      	cmp	r3, #0
90009e4c:	d005      	beq.n	90009e5a <recv_tcp+0xb2>
    msg = p;
90009e4e:	687b      	ldr	r3, [r7, #4]
90009e50:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
90009e52:	687b      	ldr	r3, [r7, #4]
90009e54:	891b      	ldrh	r3, [r3, #8]
90009e56:	83fb      	strh	r3, [r7, #30]
90009e58:	e003      	b.n	90009e62 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
90009e5a:	4b15      	ldr	r3, [pc, #84]	; (90009eb0 <recv_tcp+0x108>)
90009e5c:	61bb      	str	r3, [r7, #24]
    len = 0;
90009e5e:	2300      	movs	r3, #0
90009e60:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
90009e62:	697b      	ldr	r3, [r7, #20]
90009e64:	3310      	adds	r3, #16
90009e66:	69b9      	ldr	r1, [r7, #24]
90009e68:	4618      	mov	r0, r3
90009e6a:	f00c fb27 	bl	900164bc <sys_mbox_trypost>
90009e6e:	4603      	mov	r3, r0
90009e70:	2b00      	cmp	r3, #0
90009e72:	d002      	beq.n	90009e7a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
90009e74:	f04f 33ff 	mov.w	r3, #4294967295
90009e78:	e00a      	b.n	90009e90 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
90009e7a:	697b      	ldr	r3, [r7, #20]
90009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009e7e:	2b00      	cmp	r3, #0
90009e80:	d005      	beq.n	90009e8e <recv_tcp+0xe6>
90009e82:	697b      	ldr	r3, [r7, #20]
90009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009e86:	8bfa      	ldrh	r2, [r7, #30]
90009e88:	2100      	movs	r1, #0
90009e8a:	6978      	ldr	r0, [r7, #20]
90009e8c:	4798      	blx	r3
  }

  return ERR_OK;
90009e8e:	2300      	movs	r3, #0
}
90009e90:	4618      	mov	r0, r3
90009e92:	3720      	adds	r7, #32
90009e94:	46bd      	mov	sp, r7
90009e96:	bd80      	pop	{r7, pc}
90009e98:	90017e50 	.word	0x90017e50
90009e9c:	90017f2c 	.word	0x90017f2c
90009ea0:	90017e94 	.word	0x90017e94
90009ea4:	90017f50 	.word	0x90017f50
90009ea8:	90017f70 	.word	0x90017f70
90009eac:	90017f88 	.word	0x90017f88
90009eb0:	9001b02a 	.word	0x9001b02a

90009eb4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
90009eb4:	b580      	push	{r7, lr}
90009eb6:	b084      	sub	sp, #16
90009eb8:	af00      	add	r7, sp, #0
90009eba:	6078      	str	r0, [r7, #4]
90009ebc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
90009ebe:	687b      	ldr	r3, [r7, #4]
90009ec0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
90009ec2:	68fb      	ldr	r3, [r7, #12]
90009ec4:	2b00      	cmp	r3, #0
90009ec6:	d106      	bne.n	90009ed6 <poll_tcp+0x22>
90009ec8:	4b29      	ldr	r3, [pc, #164]	; (90009f70 <poll_tcp+0xbc>)
90009eca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
90009ece:	4929      	ldr	r1, [pc, #164]	; (90009f74 <poll_tcp+0xc0>)
90009ed0:	4829      	ldr	r0, [pc, #164]	; (90009f78 <poll_tcp+0xc4>)
90009ed2:	f00c feb5 	bl	90016c40 <iprintf>

  if (conn->state == NETCONN_WRITE) {
90009ed6:	68fb      	ldr	r3, [r7, #12]
90009ed8:	785b      	ldrb	r3, [r3, #1]
90009eda:	2b01      	cmp	r3, #1
90009edc:	d104      	bne.n	90009ee8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
90009ede:	2101      	movs	r1, #1
90009ee0:	68f8      	ldr	r0, [r7, #12]
90009ee2:	f000 ff65 	bl	9000adb0 <lwip_netconn_do_writemore>
90009ee6:	e016      	b.n	90009f16 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
90009ee8:	68fb      	ldr	r3, [r7, #12]
90009eea:	785b      	ldrb	r3, [r3, #1]
90009eec:	2b04      	cmp	r3, #4
90009eee:	d112      	bne.n	90009f16 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
90009ef0:	68fb      	ldr	r3, [r7, #12]
90009ef2:	6a1b      	ldr	r3, [r3, #32]
90009ef4:	2b00      	cmp	r3, #0
90009ef6:	d00a      	beq.n	90009f0e <poll_tcp+0x5a>
90009ef8:	68fb      	ldr	r3, [r7, #12]
90009efa:	6a1b      	ldr	r3, [r3, #32]
90009efc:	7a5b      	ldrb	r3, [r3, #9]
90009efe:	2b00      	cmp	r3, #0
90009f00:	d005      	beq.n	90009f0e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
90009f02:	68fb      	ldr	r3, [r7, #12]
90009f04:	6a1b      	ldr	r3, [r3, #32]
90009f06:	7a5a      	ldrb	r2, [r3, #9]
90009f08:	3a01      	subs	r2, #1
90009f0a:	b2d2      	uxtb	r2, r2
90009f0c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
90009f0e:	2101      	movs	r1, #1
90009f10:	68f8      	ldr	r0, [r7, #12]
90009f12:	f000 fbf7 	bl	9000a704 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
90009f16:	68fb      	ldr	r3, [r7, #12]
90009f18:	7f1b      	ldrb	r3, [r3, #28]
90009f1a:	f003 0310 	and.w	r3, r3, #16
90009f1e:	2b00      	cmp	r3, #0
90009f20:	d021      	beq.n	90009f66 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
90009f22:	68fb      	ldr	r3, [r7, #12]
90009f24:	685b      	ldr	r3, [r3, #4]
90009f26:	2b00      	cmp	r3, #0
90009f28:	d01d      	beq.n	90009f66 <poll_tcp+0xb2>
90009f2a:	68fb      	ldr	r3, [r7, #12]
90009f2c:	685b      	ldr	r3, [r3, #4]
90009f2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90009f32:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
90009f36:	d316      	bcc.n	90009f66 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
90009f38:	68fb      	ldr	r3, [r7, #12]
90009f3a:	685b      	ldr	r3, [r3, #4]
90009f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
90009f40:	2b04      	cmp	r3, #4
90009f42:	d810      	bhi.n	90009f66 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
90009f44:	68fb      	ldr	r3, [r7, #12]
90009f46:	7f1b      	ldrb	r3, [r3, #28]
90009f48:	f023 0310 	bic.w	r3, r3, #16
90009f4c:	b2da      	uxtb	r2, r3
90009f4e:	68fb      	ldr	r3, [r7, #12]
90009f50:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
90009f52:	68fb      	ldr	r3, [r7, #12]
90009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009f56:	2b00      	cmp	r3, #0
90009f58:	d005      	beq.n	90009f66 <poll_tcp+0xb2>
90009f5a:	68fb      	ldr	r3, [r7, #12]
90009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009f5e:	2200      	movs	r2, #0
90009f60:	2102      	movs	r1, #2
90009f62:	68f8      	ldr	r0, [r7, #12]
90009f64:	4798      	blx	r3
    }
  }

  return ERR_OK;
90009f66:	2300      	movs	r3, #0
}
90009f68:	4618      	mov	r0, r3
90009f6a:	3710      	adds	r7, #16
90009f6c:	46bd      	mov	sp, r7
90009f6e:	bd80      	pop	{r7, pc}
90009f70:	90017e50 	.word	0x90017e50
90009f74:	90017fa8 	.word	0x90017fa8
90009f78:	90017e94 	.word	0x90017e94

90009f7c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
90009f7c:	b580      	push	{r7, lr}
90009f7e:	b086      	sub	sp, #24
90009f80:	af00      	add	r7, sp, #0
90009f82:	60f8      	str	r0, [r7, #12]
90009f84:	60b9      	str	r1, [r7, #8]
90009f86:	4613      	mov	r3, r2
90009f88:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
90009f8a:	68fb      	ldr	r3, [r7, #12]
90009f8c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
90009f8e:	697b      	ldr	r3, [r7, #20]
90009f90:	2b00      	cmp	r3, #0
90009f92:	d106      	bne.n	90009fa2 <sent_tcp+0x26>
90009f94:	4b20      	ldr	r3, [pc, #128]	; (9000a018 <sent_tcp+0x9c>)
90009f96:	f240 1293 	movw	r2, #403	; 0x193
90009f9a:	4920      	ldr	r1, [pc, #128]	; (9000a01c <sent_tcp+0xa0>)
90009f9c:	4820      	ldr	r0, [pc, #128]	; (9000a020 <sent_tcp+0xa4>)
90009f9e:	f00c fe4f 	bl	90016c40 <iprintf>

  if (conn) {
90009fa2:	697b      	ldr	r3, [r7, #20]
90009fa4:	2b00      	cmp	r3, #0
90009fa6:	d032      	beq.n	9000a00e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
90009fa8:	697b      	ldr	r3, [r7, #20]
90009faa:	785b      	ldrb	r3, [r3, #1]
90009fac:	2b01      	cmp	r3, #1
90009fae:	d104      	bne.n	90009fba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
90009fb0:	2101      	movs	r1, #1
90009fb2:	6978      	ldr	r0, [r7, #20]
90009fb4:	f000 fefc 	bl	9000adb0 <lwip_netconn_do_writemore>
90009fb8:	e007      	b.n	90009fca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
90009fba:	697b      	ldr	r3, [r7, #20]
90009fbc:	785b      	ldrb	r3, [r3, #1]
90009fbe:	2b04      	cmp	r3, #4
90009fc0:	d103      	bne.n	90009fca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
90009fc2:	2101      	movs	r1, #1
90009fc4:	6978      	ldr	r0, [r7, #20]
90009fc6:	f000 fb9d 	bl	9000a704 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
90009fca:	697b      	ldr	r3, [r7, #20]
90009fcc:	685b      	ldr	r3, [r3, #4]
90009fce:	2b00      	cmp	r3, #0
90009fd0:	d01d      	beq.n	9000a00e <sent_tcp+0x92>
90009fd2:	697b      	ldr	r3, [r7, #20]
90009fd4:	685b      	ldr	r3, [r3, #4]
90009fd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90009fda:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
90009fde:	d316      	bcc.n	9000a00e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
90009fe0:	697b      	ldr	r3, [r7, #20]
90009fe2:	685b      	ldr	r3, [r3, #4]
90009fe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
90009fe8:	2b04      	cmp	r3, #4
90009fea:	d810      	bhi.n	9000a00e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
90009fec:	697b      	ldr	r3, [r7, #20]
90009fee:	7f1b      	ldrb	r3, [r3, #28]
90009ff0:	f023 0310 	bic.w	r3, r3, #16
90009ff4:	b2da      	uxtb	r2, r3
90009ff6:	697b      	ldr	r3, [r7, #20]
90009ff8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
90009ffa:	697b      	ldr	r3, [r7, #20]
90009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009ffe:	2b00      	cmp	r3, #0
9000a000:	d005      	beq.n	9000a00e <sent_tcp+0x92>
9000a002:	697b      	ldr	r3, [r7, #20]
9000a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a006:	88fa      	ldrh	r2, [r7, #6]
9000a008:	2102      	movs	r1, #2
9000a00a:	6978      	ldr	r0, [r7, #20]
9000a00c:	4798      	blx	r3
    }
  }

  return ERR_OK;
9000a00e:	2300      	movs	r3, #0
}
9000a010:	4618      	mov	r0, r3
9000a012:	3718      	adds	r7, #24
9000a014:	46bd      	mov	sp, r7
9000a016:	bd80      	pop	{r7, pc}
9000a018:	90017e50 	.word	0x90017e50
9000a01c:	90017fa8 	.word	0x90017fa8
9000a020:	90017e94 	.word	0x90017e94

9000a024 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
9000a024:	b580      	push	{r7, lr}
9000a026:	b088      	sub	sp, #32
9000a028:	af00      	add	r7, sp, #0
9000a02a:	6078      	str	r0, [r7, #4]
9000a02c:	460b      	mov	r3, r1
9000a02e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
9000a030:	687b      	ldr	r3, [r7, #4]
9000a032:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
9000a034:	69fb      	ldr	r3, [r7, #28]
9000a036:	2b00      	cmp	r3, #0
9000a038:	d106      	bne.n	9000a048 <err_tcp+0x24>
9000a03a:	4b5f      	ldr	r3, [pc, #380]	; (9000a1b8 <err_tcp+0x194>)
9000a03c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
9000a040:	495e      	ldr	r1, [pc, #376]	; (9000a1bc <err_tcp+0x198>)
9000a042:	485f      	ldr	r0, [pc, #380]	; (9000a1c0 <err_tcp+0x19c>)
9000a044:	f00c fdfc 	bl	90016c40 <iprintf>

  SYS_ARCH_PROTECT(lev);
9000a048:	f00c fba4 	bl	90016794 <sys_arch_protect>
9000a04c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
9000a04e:	69fb      	ldr	r3, [r7, #28]
9000a050:	2200      	movs	r2, #0
9000a052:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
9000a054:	69fb      	ldr	r3, [r7, #28]
9000a056:	78fa      	ldrb	r2, [r7, #3]
9000a058:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
9000a05a:	69fb      	ldr	r3, [r7, #28]
9000a05c:	7f1b      	ldrb	r3, [r3, #28]
9000a05e:	f043 0301 	orr.w	r3, r3, #1
9000a062:	b2da      	uxtb	r2, r3
9000a064:	69fb      	ldr	r3, [r7, #28]
9000a066:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
9000a068:	69fb      	ldr	r3, [r7, #28]
9000a06a:	785b      	ldrb	r3, [r3, #1]
9000a06c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
9000a06e:	69fb      	ldr	r3, [r7, #28]
9000a070:	2200      	movs	r2, #0
9000a072:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
9000a074:	69b8      	ldr	r0, [r7, #24]
9000a076:	f00c fb9b 	bl	900167b0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
9000a07a:	69fb      	ldr	r3, [r7, #28]
9000a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a07e:	2b00      	cmp	r3, #0
9000a080:	d005      	beq.n	9000a08e <err_tcp+0x6a>
9000a082:	69fb      	ldr	r3, [r7, #28]
9000a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a086:	2200      	movs	r2, #0
9000a088:	2104      	movs	r1, #4
9000a08a:	69f8      	ldr	r0, [r7, #28]
9000a08c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000a08e:	69fb      	ldr	r3, [r7, #28]
9000a090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a092:	2b00      	cmp	r3, #0
9000a094:	d005      	beq.n	9000a0a2 <err_tcp+0x7e>
9000a096:	69fb      	ldr	r3, [r7, #28]
9000a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a09a:	2200      	movs	r2, #0
9000a09c:	2100      	movs	r1, #0
9000a09e:	69f8      	ldr	r0, [r7, #28]
9000a0a0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
9000a0a2:	69fb      	ldr	r3, [r7, #28]
9000a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a0a6:	2b00      	cmp	r3, #0
9000a0a8:	d005      	beq.n	9000a0b6 <err_tcp+0x92>
9000a0aa:	69fb      	ldr	r3, [r7, #28]
9000a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a0ae:	2200      	movs	r2, #0
9000a0b0:	2102      	movs	r1, #2
9000a0b2:	69f8      	ldr	r0, [r7, #28]
9000a0b4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
9000a0b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
9000a0ba:	4618      	mov	r0, r3
9000a0bc:	f7ff fd86 	bl	90009bcc <lwip_netconn_err_to_msg>
9000a0c0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
9000a0c2:	69fb      	ldr	r3, [r7, #28]
9000a0c4:	3310      	adds	r3, #16
9000a0c6:	4618      	mov	r0, r3
9000a0c8:	f00c fa5a 	bl	90016580 <sys_mbox_valid>
9000a0cc:	4603      	mov	r3, r0
9000a0ce:	2b00      	cmp	r3, #0
9000a0d0:	d005      	beq.n	9000a0de <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
9000a0d2:	69fb      	ldr	r3, [r7, #28]
9000a0d4:	3310      	adds	r3, #16
9000a0d6:	6939      	ldr	r1, [r7, #16]
9000a0d8:	4618      	mov	r0, r3
9000a0da:	f00c f9ef 	bl	900164bc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
9000a0de:	69fb      	ldr	r3, [r7, #28]
9000a0e0:	3314      	adds	r3, #20
9000a0e2:	4618      	mov	r0, r3
9000a0e4:	f00c fa4c 	bl	90016580 <sys_mbox_valid>
9000a0e8:	4603      	mov	r3, r0
9000a0ea:	2b00      	cmp	r3, #0
9000a0ec:	d005      	beq.n	9000a0fa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
9000a0ee:	69fb      	ldr	r3, [r7, #28]
9000a0f0:	3314      	adds	r3, #20
9000a0f2:	6939      	ldr	r1, [r7, #16]
9000a0f4:	4618      	mov	r0, r3
9000a0f6:	f00c f9e1 	bl	900164bc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
9000a0fa:	7dfb      	ldrb	r3, [r7, #23]
9000a0fc:	2b01      	cmp	r3, #1
9000a0fe:	d005      	beq.n	9000a10c <err_tcp+0xe8>
9000a100:	7dfb      	ldrb	r3, [r7, #23]
9000a102:	2b04      	cmp	r3, #4
9000a104:	d002      	beq.n	9000a10c <err_tcp+0xe8>
9000a106:	7dfb      	ldrb	r3, [r7, #23]
9000a108:	2b03      	cmp	r3, #3
9000a10a:	d143      	bne.n	9000a194 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
9000a10c:	69fb      	ldr	r3, [r7, #28]
9000a10e:	7f1b      	ldrb	r3, [r3, #28]
9000a110:	f003 0304 	and.w	r3, r3, #4
9000a114:	2b00      	cmp	r3, #0
9000a116:	bf14      	ite	ne
9000a118:	2301      	movne	r3, #1
9000a11a:	2300      	moveq	r3, #0
9000a11c:	b2db      	uxtb	r3, r3
9000a11e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
9000a120:	69fb      	ldr	r3, [r7, #28]
9000a122:	7f1b      	ldrb	r3, [r3, #28]
9000a124:	f023 0304 	bic.w	r3, r3, #4
9000a128:	b2da      	uxtb	r2, r3
9000a12a:	69fb      	ldr	r3, [r7, #28]
9000a12c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
9000a12e:	68fb      	ldr	r3, [r7, #12]
9000a130:	2b00      	cmp	r3, #0
9000a132:	d13b      	bne.n	9000a1ac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
9000a134:	69fb      	ldr	r3, [r7, #28]
9000a136:	6a1b      	ldr	r3, [r3, #32]
9000a138:	2b00      	cmp	r3, #0
9000a13a:	d106      	bne.n	9000a14a <err_tcp+0x126>
9000a13c:	4b1e      	ldr	r3, [pc, #120]	; (9000a1b8 <err_tcp+0x194>)
9000a13e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
9000a142:	4920      	ldr	r1, [pc, #128]	; (9000a1c4 <err_tcp+0x1a0>)
9000a144:	481e      	ldr	r0, [pc, #120]	; (9000a1c0 <err_tcp+0x19c>)
9000a146:	f00c fd7b 	bl	90016c40 <iprintf>
      if (old_state == NETCONN_CLOSE) {
9000a14a:	7dfb      	ldrb	r3, [r7, #23]
9000a14c:	2b04      	cmp	r3, #4
9000a14e:	d104      	bne.n	9000a15a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
9000a150:	69fb      	ldr	r3, [r7, #28]
9000a152:	6a1b      	ldr	r3, [r3, #32]
9000a154:	2200      	movs	r2, #0
9000a156:	711a      	strb	r2, [r3, #4]
9000a158:	e003      	b.n	9000a162 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
9000a15a:	69fb      	ldr	r3, [r7, #28]
9000a15c:	6a1b      	ldr	r3, [r3, #32]
9000a15e:	78fa      	ldrb	r2, [r7, #3]
9000a160:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
9000a162:	69fb      	ldr	r3, [r7, #28]
9000a164:	6a1b      	ldr	r3, [r3, #32]
9000a166:	681b      	ldr	r3, [r3, #0]
9000a168:	330c      	adds	r3, #12
9000a16a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
9000a16c:	68b8      	ldr	r0, [r7, #8]
9000a16e:	f00c fa95 	bl	9001669c <sys_sem_valid>
9000a172:	4603      	mov	r3, r0
9000a174:	2b00      	cmp	r3, #0
9000a176:	d106      	bne.n	9000a186 <err_tcp+0x162>
9000a178:	4b0f      	ldr	r3, [pc, #60]	; (9000a1b8 <err_tcp+0x194>)
9000a17a:	f240 12ef 	movw	r2, #495	; 0x1ef
9000a17e:	4912      	ldr	r1, [pc, #72]	; (9000a1c8 <err_tcp+0x1a4>)
9000a180:	480f      	ldr	r0, [pc, #60]	; (9000a1c0 <err_tcp+0x19c>)
9000a182:	f00c fd5d 	bl	90016c40 <iprintf>
      conn->current_msg = NULL;
9000a186:	69fb      	ldr	r3, [r7, #28]
9000a188:	2200      	movs	r2, #0
9000a18a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
9000a18c:	68b8      	ldr	r0, [r7, #8]
9000a18e:	f00c fa6b 	bl	90016668 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
9000a192:	e00b      	b.n	9000a1ac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
9000a194:	69fb      	ldr	r3, [r7, #28]
9000a196:	6a1b      	ldr	r3, [r3, #32]
9000a198:	2b00      	cmp	r3, #0
9000a19a:	d008      	beq.n	9000a1ae <err_tcp+0x18a>
9000a19c:	4b06      	ldr	r3, [pc, #24]	; (9000a1b8 <err_tcp+0x194>)
9000a19e:	f240 12f7 	movw	r2, #503	; 0x1f7
9000a1a2:	490a      	ldr	r1, [pc, #40]	; (9000a1cc <err_tcp+0x1a8>)
9000a1a4:	4806      	ldr	r0, [pc, #24]	; (9000a1c0 <err_tcp+0x19c>)
9000a1a6:	f00c fd4b 	bl	90016c40 <iprintf>
  }
}
9000a1aa:	e000      	b.n	9000a1ae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
9000a1ac:	bf00      	nop
}
9000a1ae:	bf00      	nop
9000a1b0:	3720      	adds	r7, #32
9000a1b2:	46bd      	mov	sp, r7
9000a1b4:	bd80      	pop	{r7, pc}
9000a1b6:	bf00      	nop
9000a1b8:	90017e50 	.word	0x90017e50
9000a1bc:	90017fa8 	.word	0x90017fa8
9000a1c0:	90017e94 	.word	0x90017e94
9000a1c4:	90017fb8 	.word	0x90017fb8
9000a1c8:	90017fd4 	.word	0x90017fd4
9000a1cc:	90017ff0 	.word	0x90017ff0

9000a1d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
9000a1d0:	b580      	push	{r7, lr}
9000a1d2:	b084      	sub	sp, #16
9000a1d4:	af00      	add	r7, sp, #0
9000a1d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
9000a1d8:	687b      	ldr	r3, [r7, #4]
9000a1da:	685b      	ldr	r3, [r3, #4]
9000a1dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
9000a1de:	6879      	ldr	r1, [r7, #4]
9000a1e0:	68f8      	ldr	r0, [r7, #12]
9000a1e2:	f004 fd5d 	bl	9000eca0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
9000a1e6:	490a      	ldr	r1, [pc, #40]	; (9000a210 <setup_tcp+0x40>)
9000a1e8:	68f8      	ldr	r0, [r7, #12]
9000a1ea:	f004 fd6b 	bl	9000ecc4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
9000a1ee:	4909      	ldr	r1, [pc, #36]	; (9000a214 <setup_tcp+0x44>)
9000a1f0:	68f8      	ldr	r0, [r7, #12]
9000a1f2:	f004 fd89 	bl	9000ed08 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
9000a1f6:	2202      	movs	r2, #2
9000a1f8:	4907      	ldr	r1, [pc, #28]	; (9000a218 <setup_tcp+0x48>)
9000a1fa:	68f8      	ldr	r0, [r7, #12]
9000a1fc:	f004 fde0 	bl	9000edc0 <tcp_poll>
  tcp_err(pcb, err_tcp);
9000a200:	4906      	ldr	r1, [pc, #24]	; (9000a21c <setup_tcp+0x4c>)
9000a202:	68f8      	ldr	r0, [r7, #12]
9000a204:	f004 fda2 	bl	9000ed4c <tcp_err>
}
9000a208:	bf00      	nop
9000a20a:	3710      	adds	r7, #16
9000a20c:	46bd      	mov	sp, r7
9000a20e:	bd80      	pop	{r7, pc}
9000a210:	90009da9 	.word	0x90009da9
9000a214:	90009f7d 	.word	0x90009f7d
9000a218:	90009eb5 	.word	0x90009eb5
9000a21c:	9000a025 	.word	0x9000a025

9000a220 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
9000a220:	b590      	push	{r4, r7, lr}
9000a222:	b089      	sub	sp, #36	; 0x24
9000a224:	af00      	add	r7, sp, #0
9000a226:	60f8      	str	r0, [r7, #12]
9000a228:	60b9      	str	r1, [r7, #8]
9000a22a:	4613      	mov	r3, r2
9000a22c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
9000a22e:	68fb      	ldr	r3, [r7, #12]
9000a230:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
9000a232:	69fb      	ldr	r3, [r7, #28]
9000a234:	2b00      	cmp	r3, #0
9000a236:	d102      	bne.n	9000a23e <accept_function+0x1e>
    return ERR_VAL;
9000a238:	f06f 0305 	mvn.w	r3, #5
9000a23c:	e0a1      	b.n	9000a382 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
9000a23e:	69fb      	ldr	r3, [r7, #28]
9000a240:	3314      	adds	r3, #20
9000a242:	4618      	mov	r0, r3
9000a244:	f00c f99c 	bl	90016580 <sys_mbox_valid>
9000a248:	4603      	mov	r3, r0
9000a24a:	2b00      	cmp	r3, #0
9000a24c:	d102      	bne.n	9000a254 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
9000a24e:	f06f 0305 	mvn.w	r3, #5
9000a252:	e096      	b.n	9000a382 <accept_function+0x162>
  }

  if (newpcb == NULL) {
9000a254:	68bb      	ldr	r3, [r7, #8]
9000a256:	2b00      	cmp	r3, #0
9000a258:	d11b      	bne.n	9000a292 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
9000a25a:	69fb      	ldr	r3, [r7, #28]
9000a25c:	f103 0414 	add.w	r4, r3, #20
9000a260:	f06f 000c 	mvn.w	r0, #12
9000a264:	f7ff fcb2 	bl	90009bcc <lwip_netconn_err_to_msg>
9000a268:	4603      	mov	r3, r0
9000a26a:	4619      	mov	r1, r3
9000a26c:	4620      	mov	r0, r4
9000a26e:	f00c f925 	bl	900164bc <sys_mbox_trypost>
9000a272:	4603      	mov	r3, r0
9000a274:	2b00      	cmp	r3, #0
9000a276:	d109      	bne.n	9000a28c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000a278:	69fb      	ldr	r3, [r7, #28]
9000a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a27c:	2b00      	cmp	r3, #0
9000a27e:	d005      	beq.n	9000a28c <accept_function+0x6c>
9000a280:	69fb      	ldr	r3, [r7, #28]
9000a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a284:	2200      	movs	r2, #0
9000a286:	2100      	movs	r1, #0
9000a288:	69f8      	ldr	r0, [r7, #28]
9000a28a:	4798      	blx	r3
    }
    return ERR_VAL;
9000a28c:	f06f 0305 	mvn.w	r3, #5
9000a290:	e077      	b.n	9000a382 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
9000a292:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000a296:	2b00      	cmp	r3, #0
9000a298:	d006      	beq.n	9000a2a8 <accept_function+0x88>
9000a29a:	4b3c      	ldr	r3, [pc, #240]	; (9000a38c <accept_function+0x16c>)
9000a29c:	f240 222a 	movw	r2, #554	; 0x22a
9000a2a0:	493b      	ldr	r1, [pc, #236]	; (9000a390 <accept_function+0x170>)
9000a2a2:	483c      	ldr	r0, [pc, #240]	; (9000a394 <accept_function+0x174>)
9000a2a4:	f00c fccc 	bl	90016c40 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
9000a2a8:	69fb      	ldr	r3, [r7, #28]
9000a2aa:	781a      	ldrb	r2, [r3, #0]
9000a2ac:	69fb      	ldr	r3, [r7, #28]
9000a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a2b0:	4619      	mov	r1, r3
9000a2b2:	4610      	mov	r0, r2
9000a2b4:	f000 f8f0 	bl	9000a498 <netconn_alloc>
9000a2b8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
9000a2ba:	69bb      	ldr	r3, [r7, #24]
9000a2bc:	2b00      	cmp	r3, #0
9000a2be:	d11b      	bne.n	9000a2f8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
9000a2c0:	69fb      	ldr	r3, [r7, #28]
9000a2c2:	f103 0414 	add.w	r4, r3, #20
9000a2c6:	f06f 000c 	mvn.w	r0, #12
9000a2ca:	f7ff fc7f 	bl	90009bcc <lwip_netconn_err_to_msg>
9000a2ce:	4603      	mov	r3, r0
9000a2d0:	4619      	mov	r1, r3
9000a2d2:	4620      	mov	r0, r4
9000a2d4:	f00c f8f2 	bl	900164bc <sys_mbox_trypost>
9000a2d8:	4603      	mov	r3, r0
9000a2da:	2b00      	cmp	r3, #0
9000a2dc:	d109      	bne.n	9000a2f2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000a2de:	69fb      	ldr	r3, [r7, #28]
9000a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a2e2:	2b00      	cmp	r3, #0
9000a2e4:	d005      	beq.n	9000a2f2 <accept_function+0xd2>
9000a2e6:	69fb      	ldr	r3, [r7, #28]
9000a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a2ea:	2200      	movs	r2, #0
9000a2ec:	2100      	movs	r1, #0
9000a2ee:	69f8      	ldr	r0, [r7, #28]
9000a2f0:	4798      	blx	r3
    }
    return ERR_MEM;
9000a2f2:	f04f 33ff 	mov.w	r3, #4294967295
9000a2f6:	e044      	b.n	9000a382 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
9000a2f8:	69bb      	ldr	r3, [r7, #24]
9000a2fa:	68ba      	ldr	r2, [r7, #8]
9000a2fc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
9000a2fe:	69b8      	ldr	r0, [r7, #24]
9000a300:	f7ff ff66 	bl	9000a1d0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
9000a304:	69fb      	ldr	r3, [r7, #28]
9000a306:	3314      	adds	r3, #20
9000a308:	69b9      	ldr	r1, [r7, #24]
9000a30a:	4618      	mov	r0, r3
9000a30c:	f00c f8d6 	bl	900164bc <sys_mbox_trypost>
9000a310:	4603      	mov	r3, r0
9000a312:	2b00      	cmp	r3, #0
9000a314:	d02a      	beq.n	9000a36c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
9000a316:	69bb      	ldr	r3, [r7, #24]
9000a318:	685b      	ldr	r3, [r3, #4]
9000a31a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
9000a31c:	2100      	movs	r1, #0
9000a31e:	6978      	ldr	r0, [r7, #20]
9000a320:	f004 fcbe 	bl	9000eca0 <tcp_arg>
    tcp_recv(pcb, NULL);
9000a324:	2100      	movs	r1, #0
9000a326:	6978      	ldr	r0, [r7, #20]
9000a328:	f004 fccc 	bl	9000ecc4 <tcp_recv>
    tcp_sent(pcb, NULL);
9000a32c:	2100      	movs	r1, #0
9000a32e:	6978      	ldr	r0, [r7, #20]
9000a330:	f004 fcea 	bl	9000ed08 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
9000a334:	2200      	movs	r2, #0
9000a336:	2100      	movs	r1, #0
9000a338:	6978      	ldr	r0, [r7, #20]
9000a33a:	f004 fd41 	bl	9000edc0 <tcp_poll>
    tcp_err(pcb, NULL);
9000a33e:	2100      	movs	r1, #0
9000a340:	6978      	ldr	r0, [r7, #20]
9000a342:	f004 fd03 	bl	9000ed4c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
9000a346:	69bb      	ldr	r3, [r7, #24]
9000a348:	2200      	movs	r2, #0
9000a34a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
9000a34c:	69bb      	ldr	r3, [r7, #24]
9000a34e:	3310      	adds	r3, #16
9000a350:	4618      	mov	r0, r3
9000a352:	f00c f8a1 	bl	90016498 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
9000a356:	69bb      	ldr	r3, [r7, #24]
9000a358:	3310      	adds	r3, #16
9000a35a:	4618      	mov	r0, r3
9000a35c:	f00c f921 	bl	900165a2 <sys_mbox_set_invalid>
    netconn_free(newconn);
9000a360:	69b8      	ldr	r0, [r7, #24]
9000a362:	f000 f907 	bl	9000a574 <netconn_free>
    return ERR_MEM;
9000a366:	f04f 33ff 	mov.w	r3, #4294967295
9000a36a:	e00a      	b.n	9000a382 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000a36c:	69fb      	ldr	r3, [r7, #28]
9000a36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a370:	2b00      	cmp	r3, #0
9000a372:	d005      	beq.n	9000a380 <accept_function+0x160>
9000a374:	69fb      	ldr	r3, [r7, #28]
9000a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a378:	2200      	movs	r2, #0
9000a37a:	2100      	movs	r1, #0
9000a37c:	69f8      	ldr	r0, [r7, #28]
9000a37e:	4798      	blx	r3
  }

  return ERR_OK;
9000a380:	2300      	movs	r3, #0
}
9000a382:	4618      	mov	r0, r3
9000a384:	3724      	adds	r7, #36	; 0x24
9000a386:	46bd      	mov	sp, r7
9000a388:	bd90      	pop	{r4, r7, pc}
9000a38a:	bf00      	nop
9000a38c:	90017e50 	.word	0x90017e50
9000a390:	9001800c 	.word	0x9001800c
9000a394:	90017e94 	.word	0x90017e94

9000a398 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
9000a398:	b590      	push	{r4, r7, lr}
9000a39a:	b085      	sub	sp, #20
9000a39c:	af00      	add	r7, sp, #0
9000a39e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
9000a3a0:	2300      	movs	r3, #0
9000a3a2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
9000a3a4:	687b      	ldr	r3, [r7, #4]
9000a3a6:	681b      	ldr	r3, [r3, #0]
9000a3a8:	685b      	ldr	r3, [r3, #4]
9000a3aa:	2b00      	cmp	r3, #0
9000a3ac:	d006      	beq.n	9000a3bc <pcb_new+0x24>
9000a3ae:	4b2b      	ldr	r3, [pc, #172]	; (9000a45c <pcb_new+0xc4>)
9000a3b0:	f240 2265 	movw	r2, #613	; 0x265
9000a3b4:	492a      	ldr	r1, [pc, #168]	; (9000a460 <pcb_new+0xc8>)
9000a3b6:	482b      	ldr	r0, [pc, #172]	; (9000a464 <pcb_new+0xcc>)
9000a3b8:	f00c fc42 	bl	90016c40 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
9000a3bc:	687b      	ldr	r3, [r7, #4]
9000a3be:	681b      	ldr	r3, [r3, #0]
9000a3c0:	781b      	ldrb	r3, [r3, #0]
9000a3c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000a3c6:	2b10      	cmp	r3, #16
9000a3c8:	d022      	beq.n	9000a410 <pcb_new+0x78>
9000a3ca:	2b20      	cmp	r3, #32
9000a3cc:	d133      	bne.n	9000a436 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
9000a3ce:	687b      	ldr	r3, [r7, #4]
9000a3d0:	681c      	ldr	r4, [r3, #0]
9000a3d2:	7bfb      	ldrb	r3, [r7, #15]
9000a3d4:	4618      	mov	r0, r3
9000a3d6:	f009 fd42 	bl	90013e5e <udp_new_ip_type>
9000a3da:	4603      	mov	r3, r0
9000a3dc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
9000a3de:	687b      	ldr	r3, [r7, #4]
9000a3e0:	681b      	ldr	r3, [r3, #0]
9000a3e2:	685b      	ldr	r3, [r3, #4]
9000a3e4:	2b00      	cmp	r3, #0
9000a3e6:	d02a      	beq.n	9000a43e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
9000a3e8:	687b      	ldr	r3, [r7, #4]
9000a3ea:	681b      	ldr	r3, [r3, #0]
9000a3ec:	781b      	ldrb	r3, [r3, #0]
9000a3ee:	2b22      	cmp	r3, #34	; 0x22
9000a3f0:	d104      	bne.n	9000a3fc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
9000a3f2:	687b      	ldr	r3, [r7, #4]
9000a3f4:	681b      	ldr	r3, [r3, #0]
9000a3f6:	685b      	ldr	r3, [r3, #4]
9000a3f8:	2201      	movs	r2, #1
9000a3fa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
9000a3fc:	687b      	ldr	r3, [r7, #4]
9000a3fe:	681b      	ldr	r3, [r3, #0]
9000a400:	6858      	ldr	r0, [r3, #4]
9000a402:	687b      	ldr	r3, [r7, #4]
9000a404:	681b      	ldr	r3, [r3, #0]
9000a406:	461a      	mov	r2, r3
9000a408:	4917      	ldr	r1, [pc, #92]	; (9000a468 <pcb_new+0xd0>)
9000a40a:	f009 fcaf 	bl	90013d6c <udp_recv>
      }
      break;
9000a40e:	e016      	b.n	9000a43e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
9000a410:	687b      	ldr	r3, [r7, #4]
9000a412:	681c      	ldr	r4, [r3, #0]
9000a414:	7bfb      	ldrb	r3, [r7, #15]
9000a416:	4618      	mov	r0, r3
9000a418:	f004 fc34 	bl	9000ec84 <tcp_new_ip_type>
9000a41c:	4603      	mov	r3, r0
9000a41e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
9000a420:	687b      	ldr	r3, [r7, #4]
9000a422:	681b      	ldr	r3, [r3, #0]
9000a424:	685b      	ldr	r3, [r3, #4]
9000a426:	2b00      	cmp	r3, #0
9000a428:	d00b      	beq.n	9000a442 <pcb_new+0xaa>
        setup_tcp(msg->conn);
9000a42a:	687b      	ldr	r3, [r7, #4]
9000a42c:	681b      	ldr	r3, [r3, #0]
9000a42e:	4618      	mov	r0, r3
9000a430:	f7ff fece 	bl	9000a1d0 <setup_tcp>
      }
      break;
9000a434:	e005      	b.n	9000a442 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
9000a436:	687b      	ldr	r3, [r7, #4]
9000a438:	22fa      	movs	r2, #250	; 0xfa
9000a43a:	711a      	strb	r2, [r3, #4]
      return;
9000a43c:	e00a      	b.n	9000a454 <pcb_new+0xbc>
      break;
9000a43e:	bf00      	nop
9000a440:	e000      	b.n	9000a444 <pcb_new+0xac>
      break;
9000a442:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
9000a444:	687b      	ldr	r3, [r7, #4]
9000a446:	681b      	ldr	r3, [r3, #0]
9000a448:	685b      	ldr	r3, [r3, #4]
9000a44a:	2b00      	cmp	r3, #0
9000a44c:	d102      	bne.n	9000a454 <pcb_new+0xbc>
    msg->err = ERR_MEM;
9000a44e:	687b      	ldr	r3, [r7, #4]
9000a450:	22ff      	movs	r2, #255	; 0xff
9000a452:	711a      	strb	r2, [r3, #4]
  }
}
9000a454:	3714      	adds	r7, #20
9000a456:	46bd      	mov	sp, r7
9000a458:	bd90      	pop	{r4, r7, pc}
9000a45a:	bf00      	nop
9000a45c:	90017e50 	.word	0x90017e50
9000a460:	90018034 	.word	0x90018034
9000a464:	90017e94 	.word	0x90017e94
9000a468:	90009cad 	.word	0x90009cad

9000a46c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
9000a46c:	b580      	push	{r7, lr}
9000a46e:	b084      	sub	sp, #16
9000a470:	af00      	add	r7, sp, #0
9000a472:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
9000a474:	687b      	ldr	r3, [r7, #4]
9000a476:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
9000a478:	68fb      	ldr	r3, [r7, #12]
9000a47a:	2200      	movs	r2, #0
9000a47c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
9000a47e:	68fb      	ldr	r3, [r7, #12]
9000a480:	681b      	ldr	r3, [r3, #0]
9000a482:	685b      	ldr	r3, [r3, #4]
9000a484:	2b00      	cmp	r3, #0
9000a486:	d102      	bne.n	9000a48e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
9000a488:	68f8      	ldr	r0, [r7, #12]
9000a48a:	f7ff ff85 	bl	9000a398 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
9000a48e:	bf00      	nop
9000a490:	3710      	adds	r7, #16
9000a492:	46bd      	mov	sp, r7
9000a494:	bd80      	pop	{r7, pc}
	...

9000a498 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
9000a498:	b580      	push	{r7, lr}
9000a49a:	b086      	sub	sp, #24
9000a49c:	af00      	add	r7, sp, #0
9000a49e:	4603      	mov	r3, r0
9000a4a0:	6039      	str	r1, [r7, #0]
9000a4a2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
9000a4a4:	2300      	movs	r3, #0
9000a4a6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
9000a4a8:	2007      	movs	r0, #7
9000a4aa:	f001 fe85 	bl	9000c1b8 <memp_malloc>
9000a4ae:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
9000a4b0:	68fb      	ldr	r3, [r7, #12]
9000a4b2:	2b00      	cmp	r3, #0
9000a4b4:	d101      	bne.n	9000a4ba <netconn_alloc+0x22>
    return NULL;
9000a4b6:	2300      	movs	r3, #0
9000a4b8:	e052      	b.n	9000a560 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
9000a4ba:	68fb      	ldr	r3, [r7, #12]
9000a4bc:	2200      	movs	r2, #0
9000a4be:	721a      	strb	r2, [r3, #8]
  conn->type = t;
9000a4c0:	68fb      	ldr	r3, [r7, #12]
9000a4c2:	79fa      	ldrb	r2, [r7, #7]
9000a4c4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
9000a4c6:	68fb      	ldr	r3, [r7, #12]
9000a4c8:	2200      	movs	r2, #0
9000a4ca:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
9000a4cc:	79fb      	ldrb	r3, [r7, #7]
9000a4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000a4d2:	2b10      	cmp	r3, #16
9000a4d4:	d004      	beq.n	9000a4e0 <netconn_alloc+0x48>
9000a4d6:	2b20      	cmp	r3, #32
9000a4d8:	d105      	bne.n	9000a4e6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
9000a4da:	2306      	movs	r3, #6
9000a4dc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
9000a4de:	e00a      	b.n	9000a4f6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
9000a4e0:	2306      	movs	r3, #6
9000a4e2:	617b      	str	r3, [r7, #20]
      break;
9000a4e4:	e007      	b.n	9000a4f6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
9000a4e6:	4b20      	ldr	r3, [pc, #128]	; (9000a568 <netconn_alloc+0xd0>)
9000a4e8:	f240 22e5 	movw	r2, #741	; 0x2e5
9000a4ec:	491f      	ldr	r1, [pc, #124]	; (9000a56c <netconn_alloc+0xd4>)
9000a4ee:	4820      	ldr	r0, [pc, #128]	; (9000a570 <netconn_alloc+0xd8>)
9000a4f0:	f00c fba6 	bl	90016c40 <iprintf>
      goto free_and_return;
9000a4f4:	e02f      	b.n	9000a556 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
9000a4f6:	68fb      	ldr	r3, [r7, #12]
9000a4f8:	3310      	adds	r3, #16
9000a4fa:	6979      	ldr	r1, [r7, #20]
9000a4fc:	4618      	mov	r0, r3
9000a4fe:	f00b ffb1 	bl	90016464 <sys_mbox_new>
9000a502:	4603      	mov	r3, r0
9000a504:	2b00      	cmp	r3, #0
9000a506:	d125      	bne.n	9000a554 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
9000a508:	68fb      	ldr	r3, [r7, #12]
9000a50a:	330c      	adds	r3, #12
9000a50c:	2100      	movs	r1, #0
9000a50e:	4618      	mov	r0, r3
9000a510:	f00c f854 	bl	900165bc <sys_sem_new>
9000a514:	4603      	mov	r3, r0
9000a516:	2b00      	cmp	r3, #0
9000a518:	d005      	beq.n	9000a526 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
9000a51a:	68fb      	ldr	r3, [r7, #12]
9000a51c:	3310      	adds	r3, #16
9000a51e:	4618      	mov	r0, r3
9000a520:	f00b ffba 	bl	90016498 <sys_mbox_free>
    goto free_and_return;
9000a524:	e017      	b.n	9000a556 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
9000a526:	68fb      	ldr	r3, [r7, #12]
9000a528:	3314      	adds	r3, #20
9000a52a:	4618      	mov	r0, r3
9000a52c:	f00c f839 	bl	900165a2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
9000a530:	68fb      	ldr	r3, [r7, #12]
9000a532:	2200      	movs	r2, #0
9000a534:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
9000a536:	68fb      	ldr	r3, [r7, #12]
9000a538:	f04f 32ff 	mov.w	r2, #4294967295
9000a53c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
9000a53e:	68fb      	ldr	r3, [r7, #12]
9000a540:	683a      	ldr	r2, [r7, #0]
9000a542:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
9000a544:	68fb      	ldr	r3, [r7, #12]
9000a546:	2200      	movs	r2, #0
9000a548:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
9000a54a:	68fb      	ldr	r3, [r7, #12]
9000a54c:	7cfa      	ldrb	r2, [r7, #19]
9000a54e:	771a      	strb	r2, [r3, #28]
  return conn;
9000a550:	68fb      	ldr	r3, [r7, #12]
9000a552:	e005      	b.n	9000a560 <netconn_alloc+0xc8>
    goto free_and_return;
9000a554:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
9000a556:	68f9      	ldr	r1, [r7, #12]
9000a558:	2007      	movs	r0, #7
9000a55a:	f001 fe7f 	bl	9000c25c <memp_free>
  return NULL;
9000a55e:	2300      	movs	r3, #0
}
9000a560:	4618      	mov	r0, r3
9000a562:	3718      	adds	r7, #24
9000a564:	46bd      	mov	sp, r7
9000a566:	bd80      	pop	{r7, pc}
9000a568:	90017e50 	.word	0x90017e50
9000a56c:	90018054 	.word	0x90018054
9000a570:	90017e94 	.word	0x90017e94

9000a574 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
9000a574:	b580      	push	{r7, lr}
9000a576:	b082      	sub	sp, #8
9000a578:	af00      	add	r7, sp, #0
9000a57a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
9000a57c:	687b      	ldr	r3, [r7, #4]
9000a57e:	685b      	ldr	r3, [r3, #4]
9000a580:	2b00      	cmp	r3, #0
9000a582:	d006      	beq.n	9000a592 <netconn_free+0x1e>
9000a584:	4b1b      	ldr	r3, [pc, #108]	; (9000a5f4 <netconn_free+0x80>)
9000a586:	f44f 7247 	mov.w	r2, #796	; 0x31c
9000a58a:	491b      	ldr	r1, [pc, #108]	; (9000a5f8 <netconn_free+0x84>)
9000a58c:	481b      	ldr	r0, [pc, #108]	; (9000a5fc <netconn_free+0x88>)
9000a58e:	f00c fb57 	bl	90016c40 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
9000a592:	687b      	ldr	r3, [r7, #4]
9000a594:	3310      	adds	r3, #16
9000a596:	4618      	mov	r0, r3
9000a598:	f00b fff2 	bl	90016580 <sys_mbox_valid>
9000a59c:	4603      	mov	r3, r0
9000a59e:	2b00      	cmp	r3, #0
9000a5a0:	d006      	beq.n	9000a5b0 <netconn_free+0x3c>
9000a5a2:	4b14      	ldr	r3, [pc, #80]	; (9000a5f4 <netconn_free+0x80>)
9000a5a4:	f240 3223 	movw	r2, #803	; 0x323
9000a5a8:	4915      	ldr	r1, [pc, #84]	; (9000a600 <netconn_free+0x8c>)
9000a5aa:	4814      	ldr	r0, [pc, #80]	; (9000a5fc <netconn_free+0x88>)
9000a5ac:	f00c fb48 	bl	90016c40 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
9000a5b0:	687b      	ldr	r3, [r7, #4]
9000a5b2:	3314      	adds	r3, #20
9000a5b4:	4618      	mov	r0, r3
9000a5b6:	f00b ffe3 	bl	90016580 <sys_mbox_valid>
9000a5ba:	4603      	mov	r3, r0
9000a5bc:	2b00      	cmp	r3, #0
9000a5be:	d006      	beq.n	9000a5ce <netconn_free+0x5a>
9000a5c0:	4b0c      	ldr	r3, [pc, #48]	; (9000a5f4 <netconn_free+0x80>)
9000a5c2:	f240 3226 	movw	r2, #806	; 0x326
9000a5c6:	490f      	ldr	r1, [pc, #60]	; (9000a604 <netconn_free+0x90>)
9000a5c8:	480c      	ldr	r0, [pc, #48]	; (9000a5fc <netconn_free+0x88>)
9000a5ca:	f00c fb39 	bl	90016c40 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
9000a5ce:	687b      	ldr	r3, [r7, #4]
9000a5d0:	330c      	adds	r3, #12
9000a5d2:	4618      	mov	r0, r3
9000a5d4:	f00c f855 	bl	90016682 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
9000a5d8:	687b      	ldr	r3, [r7, #4]
9000a5da:	330c      	adds	r3, #12
9000a5dc:	4618      	mov	r0, r3
9000a5de:	f00c f86e 	bl	900166be <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
9000a5e2:	6879      	ldr	r1, [r7, #4]
9000a5e4:	2007      	movs	r0, #7
9000a5e6:	f001 fe39 	bl	9000c25c <memp_free>
}
9000a5ea:	bf00      	nop
9000a5ec:	3708      	adds	r7, #8
9000a5ee:	46bd      	mov	sp, r7
9000a5f0:	bd80      	pop	{r7, pc}
9000a5f2:	bf00      	nop
9000a5f4:	90017e50 	.word	0x90017e50
9000a5f8:	9001807c 	.word	0x9001807c
9000a5fc:	90017e94 	.word	0x90017e94
9000a600:	900180ac 	.word	0x900180ac
9000a604:	900180e8 	.word	0x900180e8

9000a608 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
9000a608:	b580      	push	{r7, lr}
9000a60a:	b086      	sub	sp, #24
9000a60c:	af00      	add	r7, sp, #0
9000a60e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
9000a610:	687b      	ldr	r3, [r7, #4]
9000a612:	3310      	adds	r3, #16
9000a614:	4618      	mov	r0, r3
9000a616:	f00b ffb3 	bl	90016580 <sys_mbox_valid>
9000a61a:	4603      	mov	r3, r0
9000a61c:	2b00      	cmp	r3, #0
9000a61e:	d02f      	beq.n	9000a680 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
9000a620:	e018      	b.n	9000a654 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
9000a622:	687b      	ldr	r3, [r7, #4]
9000a624:	781b      	ldrb	r3, [r3, #0]
9000a626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000a62a:	2b10      	cmp	r3, #16
9000a62c:	d10e      	bne.n	9000a64c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
9000a62e:	693b      	ldr	r3, [r7, #16]
9000a630:	f107 020f 	add.w	r2, r7, #15
9000a634:	4611      	mov	r1, r2
9000a636:	4618      	mov	r0, r3
9000a638:	f7ff fafe 	bl	90009c38 <lwip_netconn_is_err_msg>
9000a63c:	4603      	mov	r3, r0
9000a63e:	2b00      	cmp	r3, #0
9000a640:	d108      	bne.n	9000a654 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
9000a642:	693b      	ldr	r3, [r7, #16]
9000a644:	4618      	mov	r0, r3
9000a646:	f002 fcad 	bl	9000cfa4 <pbuf_free>
9000a64a:	e003      	b.n	9000a654 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
9000a64c:	693b      	ldr	r3, [r7, #16]
9000a64e:	4618      	mov	r0, r3
9000a650:	f000 fe92 	bl	9000b378 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
9000a654:	687b      	ldr	r3, [r7, #4]
9000a656:	3310      	adds	r3, #16
9000a658:	f107 0210 	add.w	r2, r7, #16
9000a65c:	4611      	mov	r1, r2
9000a65e:	4618      	mov	r0, r3
9000a660:	f00b ff77 	bl	90016552 <sys_arch_mbox_tryfetch>
9000a664:	4603      	mov	r3, r0
9000a666:	f1b3 3fff 	cmp.w	r3, #4294967295
9000a66a:	d1da      	bne.n	9000a622 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
9000a66c:	687b      	ldr	r3, [r7, #4]
9000a66e:	3310      	adds	r3, #16
9000a670:	4618      	mov	r0, r3
9000a672:	f00b ff11 	bl	90016498 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
9000a676:	687b      	ldr	r3, [r7, #4]
9000a678:	3310      	adds	r3, #16
9000a67a:	4618      	mov	r0, r3
9000a67c:	f00b ff91 	bl	900165a2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
9000a680:	687b      	ldr	r3, [r7, #4]
9000a682:	3314      	adds	r3, #20
9000a684:	4618      	mov	r0, r3
9000a686:	f00b ff7b 	bl	90016580 <sys_mbox_valid>
9000a68a:	4603      	mov	r3, r0
9000a68c:	2b00      	cmp	r3, #0
9000a68e:	d034      	beq.n	9000a6fa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
9000a690:	e01d      	b.n	9000a6ce <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
9000a692:	693b      	ldr	r3, [r7, #16]
9000a694:	f107 020e 	add.w	r2, r7, #14
9000a698:	4611      	mov	r1, r2
9000a69a:	4618      	mov	r0, r3
9000a69c:	f7ff facc 	bl	90009c38 <lwip_netconn_is_err_msg>
9000a6a0:	4603      	mov	r3, r0
9000a6a2:	2b00      	cmp	r3, #0
9000a6a4:	d113      	bne.n	9000a6ce <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
9000a6a6:	693b      	ldr	r3, [r7, #16]
9000a6a8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
9000a6aa:	6978      	ldr	r0, [r7, #20]
9000a6ac:	f7ff ffac 	bl	9000a608 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
9000a6b0:	697b      	ldr	r3, [r7, #20]
9000a6b2:	685b      	ldr	r3, [r3, #4]
9000a6b4:	2b00      	cmp	r3, #0
9000a6b6:	d007      	beq.n	9000a6c8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
9000a6b8:	697b      	ldr	r3, [r7, #20]
9000a6ba:	685b      	ldr	r3, [r3, #4]
9000a6bc:	4618      	mov	r0, r3
9000a6be:	f003 fa61 	bl	9000db84 <tcp_abort>
            newconn->pcb.tcp = NULL;
9000a6c2:	697b      	ldr	r3, [r7, #20]
9000a6c4:	2200      	movs	r2, #0
9000a6c6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
9000a6c8:	6978      	ldr	r0, [r7, #20]
9000a6ca:	f7ff ff53 	bl	9000a574 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
9000a6ce:	687b      	ldr	r3, [r7, #4]
9000a6d0:	3314      	adds	r3, #20
9000a6d2:	f107 0210 	add.w	r2, r7, #16
9000a6d6:	4611      	mov	r1, r2
9000a6d8:	4618      	mov	r0, r3
9000a6da:	f00b ff3a 	bl	90016552 <sys_arch_mbox_tryfetch>
9000a6de:	4603      	mov	r3, r0
9000a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
9000a6e4:	d1d5      	bne.n	9000a692 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
9000a6e6:	687b      	ldr	r3, [r7, #4]
9000a6e8:	3314      	adds	r3, #20
9000a6ea:	4618      	mov	r0, r3
9000a6ec:	f00b fed4 	bl	90016498 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
9000a6f0:	687b      	ldr	r3, [r7, #4]
9000a6f2:	3314      	adds	r3, #20
9000a6f4:	4618      	mov	r0, r3
9000a6f6:	f00b ff54 	bl	900165a2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
9000a6fa:	bf00      	nop
9000a6fc:	3718      	adds	r7, #24
9000a6fe:	46bd      	mov	sp, r7
9000a700:	bd80      	pop	{r7, pc}
	...

9000a704 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
9000a704:	b580      	push	{r7, lr}
9000a706:	b086      	sub	sp, #24
9000a708:	af00      	add	r7, sp, #0
9000a70a:	6078      	str	r0, [r7, #4]
9000a70c:	460b      	mov	r3, r1
9000a70e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
9000a710:	2300      	movs	r3, #0
9000a712:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
9000a714:	687b      	ldr	r3, [r7, #4]
9000a716:	2b00      	cmp	r3, #0
9000a718:	d106      	bne.n	9000a728 <lwip_netconn_do_close_internal+0x24>
9000a71a:	4b87      	ldr	r3, [pc, #540]	; (9000a938 <lwip_netconn_do_close_internal+0x234>)
9000a71c:	f240 32a2 	movw	r2, #930	; 0x3a2
9000a720:	4986      	ldr	r1, [pc, #536]	; (9000a93c <lwip_netconn_do_close_internal+0x238>)
9000a722:	4887      	ldr	r0, [pc, #540]	; (9000a940 <lwip_netconn_do_close_internal+0x23c>)
9000a724:	f00c fa8c 	bl	90016c40 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
9000a728:	687b      	ldr	r3, [r7, #4]
9000a72a:	781b      	ldrb	r3, [r3, #0]
9000a72c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000a730:	2b10      	cmp	r3, #16
9000a732:	d006      	beq.n	9000a742 <lwip_netconn_do_close_internal+0x3e>
9000a734:	4b80      	ldr	r3, [pc, #512]	; (9000a938 <lwip_netconn_do_close_internal+0x234>)
9000a736:	f240 32a3 	movw	r2, #931	; 0x3a3
9000a73a:	4982      	ldr	r1, [pc, #520]	; (9000a944 <lwip_netconn_do_close_internal+0x240>)
9000a73c:	4880      	ldr	r0, [pc, #512]	; (9000a940 <lwip_netconn_do_close_internal+0x23c>)
9000a73e:	f00c fa7f 	bl	90016c40 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
9000a742:	687b      	ldr	r3, [r7, #4]
9000a744:	785b      	ldrb	r3, [r3, #1]
9000a746:	2b04      	cmp	r3, #4
9000a748:	d006      	beq.n	9000a758 <lwip_netconn_do_close_internal+0x54>
9000a74a:	4b7b      	ldr	r3, [pc, #492]	; (9000a938 <lwip_netconn_do_close_internal+0x234>)
9000a74c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
9000a750:	497d      	ldr	r1, [pc, #500]	; (9000a948 <lwip_netconn_do_close_internal+0x244>)
9000a752:	487b      	ldr	r0, [pc, #492]	; (9000a940 <lwip_netconn_do_close_internal+0x23c>)
9000a754:	f00c fa74 	bl	90016c40 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
9000a758:	687b      	ldr	r3, [r7, #4]
9000a75a:	685b      	ldr	r3, [r3, #4]
9000a75c:	2b00      	cmp	r3, #0
9000a75e:	d106      	bne.n	9000a76e <lwip_netconn_do_close_internal+0x6a>
9000a760:	4b75      	ldr	r3, [pc, #468]	; (9000a938 <lwip_netconn_do_close_internal+0x234>)
9000a762:	f240 32a5 	movw	r2, #933	; 0x3a5
9000a766:	4979      	ldr	r1, [pc, #484]	; (9000a94c <lwip_netconn_do_close_internal+0x248>)
9000a768:	4875      	ldr	r0, [pc, #468]	; (9000a940 <lwip_netconn_do_close_internal+0x23c>)
9000a76a:	f00c fa69 	bl	90016c40 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
9000a76e:	687b      	ldr	r3, [r7, #4]
9000a770:	6a1b      	ldr	r3, [r3, #32]
9000a772:	2b00      	cmp	r3, #0
9000a774:	d106      	bne.n	9000a784 <lwip_netconn_do_close_internal+0x80>
9000a776:	4b70      	ldr	r3, [pc, #448]	; (9000a938 <lwip_netconn_do_close_internal+0x234>)
9000a778:	f240 32a6 	movw	r2, #934	; 0x3a6
9000a77c:	4974      	ldr	r1, [pc, #464]	; (9000a950 <lwip_netconn_do_close_internal+0x24c>)
9000a77e:	4870      	ldr	r0, [pc, #448]	; (9000a940 <lwip_netconn_do_close_internal+0x23c>)
9000a780:	f00c fa5e 	bl	90016c40 <iprintf>

  tpcb = conn->pcb.tcp;
9000a784:	687b      	ldr	r3, [r7, #4]
9000a786:	685b      	ldr	r3, [r3, #4]
9000a788:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
9000a78a:	687b      	ldr	r3, [r7, #4]
9000a78c:	6a1b      	ldr	r3, [r3, #32]
9000a78e:	7a1b      	ldrb	r3, [r3, #8]
9000a790:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
9000a792:	7bfb      	ldrb	r3, [r7, #15]
9000a794:	f003 0301 	and.w	r3, r3, #1
9000a798:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
9000a79a:	7bfb      	ldrb	r3, [r7, #15]
9000a79c:	f003 0302 	and.w	r3, r3, #2
9000a7a0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
9000a7a2:	7bfb      	ldrb	r3, [r7, #15]
9000a7a4:	2b03      	cmp	r3, #3
9000a7a6:	d102      	bne.n	9000a7ae <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
9000a7a8:	2301      	movs	r3, #1
9000a7aa:	75bb      	strb	r3, [r7, #22]
9000a7ac:	e01f      	b.n	9000a7ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
9000a7ae:	7bbb      	ldrb	r3, [r7, #14]
9000a7b0:	2b00      	cmp	r3, #0
9000a7b2:	d00e      	beq.n	9000a7d2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
9000a7b4:	693b      	ldr	r3, [r7, #16]
9000a7b6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
9000a7b8:	2b05      	cmp	r3, #5
9000a7ba:	d007      	beq.n	9000a7cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
9000a7bc:	693b      	ldr	r3, [r7, #16]
9000a7be:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
9000a7c0:	2b06      	cmp	r3, #6
9000a7c2:	d003      	beq.n	9000a7cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
9000a7c4:	693b      	ldr	r3, [r7, #16]
9000a7c6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
9000a7c8:	2b08      	cmp	r3, #8
9000a7ca:	d102      	bne.n	9000a7d2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
9000a7cc:	2301      	movs	r3, #1
9000a7ce:	75bb      	strb	r3, [r7, #22]
9000a7d0:	e00d      	b.n	9000a7ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
9000a7d2:	7b7b      	ldrb	r3, [r7, #13]
9000a7d4:	2b00      	cmp	r3, #0
9000a7d6:	d008      	beq.n	9000a7ea <lwip_netconn_do_close_internal+0xe6>
9000a7d8:	693b      	ldr	r3, [r7, #16]
9000a7da:	8b5b      	ldrh	r3, [r3, #26]
9000a7dc:	f003 0310 	and.w	r3, r3, #16
9000a7e0:	2b00      	cmp	r3, #0
9000a7e2:	d002      	beq.n	9000a7ea <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
9000a7e4:	2301      	movs	r3, #1
9000a7e6:	75bb      	strb	r3, [r7, #22]
9000a7e8:	e001      	b.n	9000a7ee <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
9000a7ea:	2300      	movs	r3, #0
9000a7ec:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
9000a7ee:	7dbb      	ldrb	r3, [r7, #22]
9000a7f0:	2b00      	cmp	r3, #0
9000a7f2:	d003      	beq.n	9000a7fc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
9000a7f4:	2100      	movs	r1, #0
9000a7f6:	6938      	ldr	r0, [r7, #16]
9000a7f8:	f004 fa52 	bl	9000eca0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
9000a7fc:	693b      	ldr	r3, [r7, #16]
9000a7fe:	7d1b      	ldrb	r3, [r3, #20]
9000a800:	2b01      	cmp	r3, #1
9000a802:	d104      	bne.n	9000a80e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
9000a804:	2100      	movs	r1, #0
9000a806:	6938      	ldr	r0, [r7, #16]
9000a808:	f004 fac2 	bl	9000ed90 <tcp_accept>
9000a80c:	e01d      	b.n	9000a84a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
9000a80e:	7bbb      	ldrb	r3, [r7, #14]
9000a810:	2b00      	cmp	r3, #0
9000a812:	d007      	beq.n	9000a824 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
9000a814:	2100      	movs	r1, #0
9000a816:	6938      	ldr	r0, [r7, #16]
9000a818:	f004 fa54 	bl	9000ecc4 <tcp_recv>
      tcp_accept(tpcb, NULL);
9000a81c:	2100      	movs	r1, #0
9000a81e:	6938      	ldr	r0, [r7, #16]
9000a820:	f004 fab6 	bl	9000ed90 <tcp_accept>
    }
    if (shut_tx) {
9000a824:	7b7b      	ldrb	r3, [r7, #13]
9000a826:	2b00      	cmp	r3, #0
9000a828:	d003      	beq.n	9000a832 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
9000a82a:	2100      	movs	r1, #0
9000a82c:	6938      	ldr	r0, [r7, #16]
9000a82e:	f004 fa6b 	bl	9000ed08 <tcp_sent>
    }
    if (shut_close) {
9000a832:	7dbb      	ldrb	r3, [r7, #22]
9000a834:	2b00      	cmp	r3, #0
9000a836:	d008      	beq.n	9000a84a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
9000a838:	2200      	movs	r2, #0
9000a83a:	2100      	movs	r1, #0
9000a83c:	6938      	ldr	r0, [r7, #16]
9000a83e:	f004 fabf 	bl	9000edc0 <tcp_poll>
      tcp_err(tpcb, NULL);
9000a842:	2100      	movs	r1, #0
9000a844:	6938      	ldr	r0, [r7, #16]
9000a846:	f004 fa81 	bl	9000ed4c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
9000a84a:	7dbb      	ldrb	r3, [r7, #22]
9000a84c:	2b00      	cmp	r3, #0
9000a84e:	d005      	beq.n	9000a85c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
9000a850:	6938      	ldr	r0, [r7, #16]
9000a852:	f003 f851 	bl	9000d8f8 <tcp_close>
9000a856:	4603      	mov	r3, r0
9000a858:	75fb      	strb	r3, [r7, #23]
9000a85a:	e007      	b.n	9000a86c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
9000a85c:	7bbb      	ldrb	r3, [r7, #14]
9000a85e:	7b7a      	ldrb	r2, [r7, #13]
9000a860:	4619      	mov	r1, r3
9000a862:	6938      	ldr	r0, [r7, #16]
9000a864:	f003 f874 	bl	9000d950 <tcp_shutdown>
9000a868:	4603      	mov	r3, r0
9000a86a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
9000a86c:	f997 3017 	ldrsb.w	r3, [r7, #23]
9000a870:	2b00      	cmp	r3, #0
9000a872:	d102      	bne.n	9000a87a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
9000a874:	2301      	movs	r3, #1
9000a876:	757b      	strb	r3, [r7, #21]
9000a878:	e016      	b.n	9000a8a8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
9000a87a:	f997 3017 	ldrsb.w	r3, [r7, #23]
9000a87e:	f1b3 3fff 	cmp.w	r3, #4294967295
9000a882:	d10f      	bne.n	9000a8a4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
9000a884:	687b      	ldr	r3, [r7, #4]
9000a886:	6a1b      	ldr	r3, [r3, #32]
9000a888:	7a5b      	ldrb	r3, [r3, #9]
9000a88a:	2b00      	cmp	r3, #0
9000a88c:	d10c      	bne.n	9000a8a8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
9000a88e:	2301      	movs	r3, #1
9000a890:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
9000a892:	7dbb      	ldrb	r3, [r7, #22]
9000a894:	2b00      	cmp	r3, #0
9000a896:	d007      	beq.n	9000a8a8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
9000a898:	6938      	ldr	r0, [r7, #16]
9000a89a:	f003 f973 	bl	9000db84 <tcp_abort>
          err = ERR_OK;
9000a89e:	2300      	movs	r3, #0
9000a8a0:	75fb      	strb	r3, [r7, #23]
9000a8a2:	e001      	b.n	9000a8a8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
9000a8a4:	2301      	movs	r3, #1
9000a8a6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
9000a8a8:	7d7b      	ldrb	r3, [r7, #21]
9000a8aa:	2b00      	cmp	r3, #0
9000a8ac:	d052      	beq.n	9000a954 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
9000a8ae:	687b      	ldr	r3, [r7, #4]
9000a8b0:	6a1b      	ldr	r3, [r3, #32]
9000a8b2:	681b      	ldr	r3, [r3, #0]
9000a8b4:	330c      	adds	r3, #12
9000a8b6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
9000a8b8:	687b      	ldr	r3, [r7, #4]
9000a8ba:	6a1b      	ldr	r3, [r3, #32]
9000a8bc:	7dfa      	ldrb	r2, [r7, #23]
9000a8be:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
9000a8c0:	687b      	ldr	r3, [r7, #4]
9000a8c2:	2200      	movs	r2, #0
9000a8c4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
9000a8c6:	687b      	ldr	r3, [r7, #4]
9000a8c8:	2200      	movs	r2, #0
9000a8ca:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
9000a8cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
9000a8d0:	2b00      	cmp	r3, #0
9000a8d2:	d129      	bne.n	9000a928 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
9000a8d4:	7dbb      	ldrb	r3, [r7, #22]
9000a8d6:	2b00      	cmp	r3, #0
9000a8d8:	d00c      	beq.n	9000a8f4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
9000a8da:	687b      	ldr	r3, [r7, #4]
9000a8dc:	2200      	movs	r2, #0
9000a8de:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
9000a8e0:	687b      	ldr	r3, [r7, #4]
9000a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a8e4:	2b00      	cmp	r3, #0
9000a8e6:	d005      	beq.n	9000a8f4 <lwip_netconn_do_close_internal+0x1f0>
9000a8e8:	687b      	ldr	r3, [r7, #4]
9000a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a8ec:	2200      	movs	r2, #0
9000a8ee:	2104      	movs	r1, #4
9000a8f0:	6878      	ldr	r0, [r7, #4]
9000a8f2:	4798      	blx	r3
      }
      if (shut_rx) {
9000a8f4:	7bbb      	ldrb	r3, [r7, #14]
9000a8f6:	2b00      	cmp	r3, #0
9000a8f8:	d009      	beq.n	9000a90e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000a8fa:	687b      	ldr	r3, [r7, #4]
9000a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a8fe:	2b00      	cmp	r3, #0
9000a900:	d005      	beq.n	9000a90e <lwip_netconn_do_close_internal+0x20a>
9000a902:	687b      	ldr	r3, [r7, #4]
9000a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a906:	2200      	movs	r2, #0
9000a908:	2100      	movs	r1, #0
9000a90a:	6878      	ldr	r0, [r7, #4]
9000a90c:	4798      	blx	r3
      }
      if (shut_tx) {
9000a90e:	7b7b      	ldrb	r3, [r7, #13]
9000a910:	2b00      	cmp	r3, #0
9000a912:	d009      	beq.n	9000a928 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
9000a914:	687b      	ldr	r3, [r7, #4]
9000a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a918:	2b00      	cmp	r3, #0
9000a91a:	d005      	beq.n	9000a928 <lwip_netconn_do_close_internal+0x224>
9000a91c:	687b      	ldr	r3, [r7, #4]
9000a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a920:	2200      	movs	r2, #0
9000a922:	2102      	movs	r1, #2
9000a924:	6878      	ldr	r0, [r7, #4]
9000a926:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
9000a928:	78fb      	ldrb	r3, [r7, #3]
9000a92a:	2b00      	cmp	r3, #0
9000a92c:	d002      	beq.n	9000a934 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
9000a92e:	68b8      	ldr	r0, [r7, #8]
9000a930:	f00b fe9a 	bl	90016668 <sys_sem_signal>
    }
    return ERR_OK;
9000a934:	2300      	movs	r3, #0
9000a936:	e03c      	b.n	9000a9b2 <lwip_netconn_do_close_internal+0x2ae>
9000a938:	90017e50 	.word	0x90017e50
9000a93c:	90018124 	.word	0x90018124
9000a940:	90017e94 	.word	0x90017e94
9000a944:	90018134 	.word	0x90018134
9000a948:	90018154 	.word	0x90018154
9000a94c:	90018178 	.word	0x90018178
9000a950:	90017fb8 	.word	0x90017fb8
  }
  if (!close_finished) {
9000a954:	7d7b      	ldrb	r3, [r7, #21]
9000a956:	2b00      	cmp	r3, #0
9000a958:	d11e      	bne.n	9000a998 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
9000a95a:	693b      	ldr	r3, [r7, #16]
9000a95c:	7d1b      	ldrb	r3, [r3, #20]
9000a95e:	2b01      	cmp	r3, #1
9000a960:	d106      	bne.n	9000a970 <lwip_netconn_do_close_internal+0x26c>
9000a962:	4b16      	ldr	r3, [pc, #88]	; (9000a9bc <lwip_netconn_do_close_internal+0x2b8>)
9000a964:	f240 4241 	movw	r2, #1089	; 0x441
9000a968:	4915      	ldr	r1, [pc, #84]	; (9000a9c0 <lwip_netconn_do_close_internal+0x2bc>)
9000a96a:	4816      	ldr	r0, [pc, #88]	; (9000a9c4 <lwip_netconn_do_close_internal+0x2c0>)
9000a96c:	f00c f968 	bl	90016c40 <iprintf>
    if (shut_tx) {
9000a970:	7b7b      	ldrb	r3, [r7, #13]
9000a972:	2b00      	cmp	r3, #0
9000a974:	d003      	beq.n	9000a97e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
9000a976:	4914      	ldr	r1, [pc, #80]	; (9000a9c8 <lwip_netconn_do_close_internal+0x2c4>)
9000a978:	6938      	ldr	r0, [r7, #16]
9000a97a:	f004 f9c5 	bl	9000ed08 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
9000a97e:	2201      	movs	r2, #1
9000a980:	4912      	ldr	r1, [pc, #72]	; (9000a9cc <lwip_netconn_do_close_internal+0x2c8>)
9000a982:	6938      	ldr	r0, [r7, #16]
9000a984:	f004 fa1c 	bl	9000edc0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
9000a988:	4911      	ldr	r1, [pc, #68]	; (9000a9d0 <lwip_netconn_do_close_internal+0x2cc>)
9000a98a:	6938      	ldr	r0, [r7, #16]
9000a98c:	f004 f9de 	bl	9000ed4c <tcp_err>
    tcp_arg(tpcb, conn);
9000a990:	6879      	ldr	r1, [r7, #4]
9000a992:	6938      	ldr	r0, [r7, #16]
9000a994:	f004 f984 	bl	9000eca0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
9000a998:	f997 3017 	ldrsb.w	r3, [r7, #23]
9000a99c:	2b00      	cmp	r3, #0
9000a99e:	d106      	bne.n	9000a9ae <lwip_netconn_do_close_internal+0x2aa>
9000a9a0:	4b06      	ldr	r3, [pc, #24]	; (9000a9bc <lwip_netconn_do_close_internal+0x2b8>)
9000a9a2:	f240 424d 	movw	r2, #1101	; 0x44d
9000a9a6:	490b      	ldr	r1, [pc, #44]	; (9000a9d4 <lwip_netconn_do_close_internal+0x2d0>)
9000a9a8:	4806      	ldr	r0, [pc, #24]	; (9000a9c4 <lwip_netconn_do_close_internal+0x2c0>)
9000a9aa:	f00c f949 	bl	90016c40 <iprintf>
  return err;
9000a9ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
9000a9b2:	4618      	mov	r0, r3
9000a9b4:	3718      	adds	r7, #24
9000a9b6:	46bd      	mov	sp, r7
9000a9b8:	bd80      	pop	{r7, pc}
9000a9ba:	bf00      	nop
9000a9bc:	90017e50 	.word	0x90017e50
9000a9c0:	9001818c 	.word	0x9001818c
9000a9c4:	90017e94 	.word	0x90017e94
9000a9c8:	90009f7d 	.word	0x90009f7d
9000a9cc:	90009eb5 	.word	0x90009eb5
9000a9d0:	9000a025 	.word	0x9000a025
9000a9d4:	900181b0 	.word	0x900181b0

9000a9d8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
9000a9d8:	b580      	push	{r7, lr}
9000a9da:	b084      	sub	sp, #16
9000a9dc:	af00      	add	r7, sp, #0
9000a9de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
9000a9e0:	687b      	ldr	r3, [r7, #4]
9000a9e2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
9000a9e4:	68fb      	ldr	r3, [r7, #12]
9000a9e6:	681b      	ldr	r3, [r3, #0]
9000a9e8:	785b      	ldrb	r3, [r3, #1]
9000a9ea:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
9000a9ec:	7afb      	ldrb	r3, [r7, #11]
9000a9ee:	2b00      	cmp	r3, #0
9000a9f0:	d00d      	beq.n	9000aa0e <lwip_netconn_do_delconn+0x36>
9000a9f2:	68fb      	ldr	r3, [r7, #12]
9000a9f4:	681b      	ldr	r3, [r3, #0]
9000a9f6:	781b      	ldrb	r3, [r3, #0]
9000a9f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000a9fc:	2b10      	cmp	r3, #16
9000a9fe:	d006      	beq.n	9000aa0e <lwip_netconn_do_delconn+0x36>
9000aa00:	4b60      	ldr	r3, [pc, #384]	; (9000ab84 <lwip_netconn_do_delconn+0x1ac>)
9000aa02:	f240 425e 	movw	r2, #1118	; 0x45e
9000aa06:	4960      	ldr	r1, [pc, #384]	; (9000ab88 <lwip_netconn_do_delconn+0x1b0>)
9000aa08:	4860      	ldr	r0, [pc, #384]	; (9000ab8c <lwip_netconn_do_delconn+0x1b4>)
9000aa0a:	f00c f919 	bl	90016c40 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
9000aa0e:	7afb      	ldrb	r3, [r7, #11]
9000aa10:	2b00      	cmp	r3, #0
9000aa12:	d005      	beq.n	9000aa20 <lwip_netconn_do_delconn+0x48>
9000aa14:	7afb      	ldrb	r3, [r7, #11]
9000aa16:	2b02      	cmp	r3, #2
9000aa18:	d002      	beq.n	9000aa20 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
9000aa1a:	7afb      	ldrb	r3, [r7, #11]
9000aa1c:	2b03      	cmp	r3, #3
9000aa1e:	d109      	bne.n	9000aa34 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
9000aa20:	7afb      	ldrb	r3, [r7, #11]
9000aa22:	2b03      	cmp	r3, #3
9000aa24:	d10a      	bne.n	9000aa3c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
9000aa26:	68fb      	ldr	r3, [r7, #12]
9000aa28:	681b      	ldr	r3, [r3, #0]
9000aa2a:	7f1b      	ldrb	r3, [r3, #28]
9000aa2c:	f003 0304 	and.w	r3, r3, #4
9000aa30:	2b00      	cmp	r3, #0
9000aa32:	d103      	bne.n	9000aa3c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
9000aa34:	68fb      	ldr	r3, [r7, #12]
9000aa36:	22fb      	movs	r2, #251	; 0xfb
9000aa38:	711a      	strb	r2, [r3, #4]
9000aa3a:	e097      	b.n	9000ab6c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
9000aa3c:	7afb      	ldrb	r3, [r7, #11]
9000aa3e:	2b03      	cmp	r3, #3
9000aa40:	d10d      	bne.n	9000aa5e <lwip_netconn_do_delconn+0x86>
9000aa42:	68fb      	ldr	r3, [r7, #12]
9000aa44:	681b      	ldr	r3, [r3, #0]
9000aa46:	7f1b      	ldrb	r3, [r3, #28]
9000aa48:	f003 0304 	and.w	r3, r3, #4
9000aa4c:	2b00      	cmp	r3, #0
9000aa4e:	d106      	bne.n	9000aa5e <lwip_netconn_do_delconn+0x86>
9000aa50:	4b4c      	ldr	r3, [pc, #304]	; (9000ab84 <lwip_netconn_do_delconn+0x1ac>)
9000aa52:	f240 427a 	movw	r2, #1146	; 0x47a
9000aa56:	494e      	ldr	r1, [pc, #312]	; (9000ab90 <lwip_netconn_do_delconn+0x1b8>)
9000aa58:	484c      	ldr	r0, [pc, #304]	; (9000ab8c <lwip_netconn_do_delconn+0x1b4>)
9000aa5a:	f00c f8f1 	bl	90016c40 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
9000aa5e:	68fb      	ldr	r3, [r7, #12]
9000aa60:	2200      	movs	r2, #0
9000aa62:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
9000aa64:	68fb      	ldr	r3, [r7, #12]
9000aa66:	681b      	ldr	r3, [r3, #0]
9000aa68:	4618      	mov	r0, r3
9000aa6a:	f7ff fdcd 	bl	9000a608 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
9000aa6e:	68fb      	ldr	r3, [r7, #12]
9000aa70:	681b      	ldr	r3, [r3, #0]
9000aa72:	685b      	ldr	r3, [r3, #4]
9000aa74:	2b00      	cmp	r3, #0
9000aa76:	d05f      	beq.n	9000ab38 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
9000aa78:	68fb      	ldr	r3, [r7, #12]
9000aa7a:	681b      	ldr	r3, [r3, #0]
9000aa7c:	781b      	ldrb	r3, [r3, #0]
9000aa7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000aa82:	2b10      	cmp	r3, #16
9000aa84:	d00d      	beq.n	9000aaa2 <lwip_netconn_do_delconn+0xca>
9000aa86:	2b20      	cmp	r3, #32
9000aa88:	d151      	bne.n	9000ab2e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
9000aa8a:	68fb      	ldr	r3, [r7, #12]
9000aa8c:	681b      	ldr	r3, [r3, #0]
9000aa8e:	685b      	ldr	r3, [r3, #4]
9000aa90:	2200      	movs	r2, #0
9000aa92:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
9000aa94:	68fb      	ldr	r3, [r7, #12]
9000aa96:	681b      	ldr	r3, [r3, #0]
9000aa98:	685b      	ldr	r3, [r3, #4]
9000aa9a:	4618      	mov	r0, r3
9000aa9c:	f009 f986 	bl	90013dac <udp_remove>
          break;
9000aaa0:	e046      	b.n	9000ab30 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
9000aaa2:	68fb      	ldr	r3, [r7, #12]
9000aaa4:	681b      	ldr	r3, [r3, #0]
9000aaa6:	6a1b      	ldr	r3, [r3, #32]
9000aaa8:	2b00      	cmp	r3, #0
9000aaaa:	d006      	beq.n	9000aaba <lwip_netconn_do_delconn+0xe2>
9000aaac:	4b35      	ldr	r3, [pc, #212]	; (9000ab84 <lwip_netconn_do_delconn+0x1ac>)
9000aaae:	f240 4294 	movw	r2, #1172	; 0x494
9000aab2:	4938      	ldr	r1, [pc, #224]	; (9000ab94 <lwip_netconn_do_delconn+0x1bc>)
9000aab4:	4835      	ldr	r0, [pc, #212]	; (9000ab8c <lwip_netconn_do_delconn+0x1b4>)
9000aab6:	f00c f8c3 	bl	90016c40 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
9000aaba:	68fb      	ldr	r3, [r7, #12]
9000aabc:	681b      	ldr	r3, [r3, #0]
9000aabe:	2204      	movs	r2, #4
9000aac0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
9000aac2:	68fb      	ldr	r3, [r7, #12]
9000aac4:	2203      	movs	r2, #3
9000aac6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
9000aac8:	68fb      	ldr	r3, [r7, #12]
9000aaca:	681b      	ldr	r3, [r3, #0]
9000aacc:	68fa      	ldr	r2, [r7, #12]
9000aace:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
9000aad0:	68fb      	ldr	r3, [r7, #12]
9000aad2:	681b      	ldr	r3, [r3, #0]
9000aad4:	2100      	movs	r1, #0
9000aad6:	4618      	mov	r0, r3
9000aad8:	f7ff fe14 	bl	9000a704 <lwip_netconn_do_close_internal>
9000aadc:	4603      	mov	r3, r0
9000aade:	2b00      	cmp	r3, #0
9000aae0:	d04b      	beq.n	9000ab7a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
9000aae2:	68fb      	ldr	r3, [r7, #12]
9000aae4:	681b      	ldr	r3, [r3, #0]
9000aae6:	785b      	ldrb	r3, [r3, #1]
9000aae8:	2b04      	cmp	r3, #4
9000aaea:	d006      	beq.n	9000aafa <lwip_netconn_do_delconn+0x122>
9000aaec:	4b25      	ldr	r3, [pc, #148]	; (9000ab84 <lwip_netconn_do_delconn+0x1ac>)
9000aaee:	f240 429a 	movw	r2, #1178	; 0x49a
9000aaf2:	4929      	ldr	r1, [pc, #164]	; (9000ab98 <lwip_netconn_do_delconn+0x1c0>)
9000aaf4:	4825      	ldr	r0, [pc, #148]	; (9000ab8c <lwip_netconn_do_delconn+0x1b4>)
9000aaf6:	f00c f8a3 	bl	90016c40 <iprintf>
            UNLOCK_TCPIP_CORE();
9000aafa:	4828      	ldr	r0, [pc, #160]	; (9000ab9c <lwip_netconn_do_delconn+0x1c4>)
9000aafc:	f00b fe1d 	bl	9001673a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
9000ab00:	68fb      	ldr	r3, [r7, #12]
9000ab02:	681b      	ldr	r3, [r3, #0]
9000ab04:	330c      	adds	r3, #12
9000ab06:	2100      	movs	r1, #0
9000ab08:	4618      	mov	r0, r3
9000ab0a:	f00b fd7c 	bl	90016606 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
9000ab0e:	4823      	ldr	r0, [pc, #140]	; (9000ab9c <lwip_netconn_do_delconn+0x1c4>)
9000ab10:	f00b fe04 	bl	9001671c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
9000ab14:	68fb      	ldr	r3, [r7, #12]
9000ab16:	681b      	ldr	r3, [r3, #0]
9000ab18:	785b      	ldrb	r3, [r3, #1]
9000ab1a:	2b00      	cmp	r3, #0
9000ab1c:	d02d      	beq.n	9000ab7a <lwip_netconn_do_delconn+0x1a2>
9000ab1e:	4b19      	ldr	r3, [pc, #100]	; (9000ab84 <lwip_netconn_do_delconn+0x1ac>)
9000ab20:	f240 429e 	movw	r2, #1182	; 0x49e
9000ab24:	491c      	ldr	r1, [pc, #112]	; (9000ab98 <lwip_netconn_do_delconn+0x1c0>)
9000ab26:	4819      	ldr	r0, [pc, #100]	; (9000ab8c <lwip_netconn_do_delconn+0x1b4>)
9000ab28:	f00c f88a 	bl	90016c40 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
9000ab2c:	e025      	b.n	9000ab7a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
9000ab2e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
9000ab30:	68fb      	ldr	r3, [r7, #12]
9000ab32:	681b      	ldr	r3, [r3, #0]
9000ab34:	2200      	movs	r2, #0
9000ab36:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
9000ab38:	68fb      	ldr	r3, [r7, #12]
9000ab3a:	681b      	ldr	r3, [r3, #0]
9000ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ab3e:	2b00      	cmp	r3, #0
9000ab40:	d007      	beq.n	9000ab52 <lwip_netconn_do_delconn+0x17a>
9000ab42:	68fb      	ldr	r3, [r7, #12]
9000ab44:	681b      	ldr	r3, [r3, #0]
9000ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ab48:	68fa      	ldr	r2, [r7, #12]
9000ab4a:	6810      	ldr	r0, [r2, #0]
9000ab4c:	2200      	movs	r2, #0
9000ab4e:	2100      	movs	r1, #0
9000ab50:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
9000ab52:	68fb      	ldr	r3, [r7, #12]
9000ab54:	681b      	ldr	r3, [r3, #0]
9000ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ab58:	2b00      	cmp	r3, #0
9000ab5a:	d007      	beq.n	9000ab6c <lwip_netconn_do_delconn+0x194>
9000ab5c:	68fb      	ldr	r3, [r7, #12]
9000ab5e:	681b      	ldr	r3, [r3, #0]
9000ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ab62:	68fa      	ldr	r2, [r7, #12]
9000ab64:	6810      	ldr	r0, [r2, #0]
9000ab66:	2200      	movs	r2, #0
9000ab68:	2102      	movs	r1, #2
9000ab6a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
9000ab6c:	68fb      	ldr	r3, [r7, #12]
9000ab6e:	681b      	ldr	r3, [r3, #0]
9000ab70:	330c      	adds	r3, #12
9000ab72:	4618      	mov	r0, r3
9000ab74:	f00b fd92 	bl	9001669c <sys_sem_valid>
9000ab78:	e000      	b.n	9000ab7c <lwip_netconn_do_delconn+0x1a4>
          return;
9000ab7a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
9000ab7c:	3710      	adds	r7, #16
9000ab7e:	46bd      	mov	sp, r7
9000ab80:	bd80      	pop	{r7, pc}
9000ab82:	bf00      	nop
9000ab84:	90017e50 	.word	0x90017e50
9000ab88:	900181c0 	.word	0x900181c0
9000ab8c:	90017e94 	.word	0x90017e94
9000ab90:	900181d4 	.word	0x900181d4
9000ab94:	900181f4 	.word	0x900181f4
9000ab98:	90018210 	.word	0x90018210
9000ab9c:	20007cb0 	.word	0x20007cb0

9000aba0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
9000aba0:	b580      	push	{r7, lr}
9000aba2:	b084      	sub	sp, #16
9000aba4:	af00      	add	r7, sp, #0
9000aba6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
9000aba8:	687b      	ldr	r3, [r7, #4]
9000abaa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
9000abac:	68bb      	ldr	r3, [r7, #8]
9000abae:	681b      	ldr	r3, [r3, #0]
9000abb0:	685b      	ldr	r3, [r3, #4]
9000abb2:	2b00      	cmp	r3, #0
9000abb4:	d025      	beq.n	9000ac02 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
9000abb6:	68bb      	ldr	r3, [r7, #8]
9000abb8:	681b      	ldr	r3, [r3, #0]
9000abba:	781b      	ldrb	r3, [r3, #0]
9000abbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000abc0:	2b10      	cmp	r3, #16
9000abc2:	d00e      	beq.n	9000abe2 <lwip_netconn_do_bind+0x42>
9000abc4:	2b20      	cmp	r3, #32
9000abc6:	d119      	bne.n	9000abfc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
9000abc8:	68bb      	ldr	r3, [r7, #8]
9000abca:	681b      	ldr	r3, [r3, #0]
9000abcc:	6858      	ldr	r0, [r3, #4]
9000abce:	68bb      	ldr	r3, [r7, #8]
9000abd0:	6899      	ldr	r1, [r3, #8]
9000abd2:	68bb      	ldr	r3, [r7, #8]
9000abd4:	899b      	ldrh	r3, [r3, #12]
9000abd6:	461a      	mov	r2, r3
9000abd8:	f009 f840 	bl	90013c5c <udp_bind>
9000abdc:	4603      	mov	r3, r0
9000abde:	73fb      	strb	r3, [r7, #15]
        break;
9000abe0:	e011      	b.n	9000ac06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
9000abe2:	68bb      	ldr	r3, [r7, #8]
9000abe4:	681b      	ldr	r3, [r3, #0]
9000abe6:	6858      	ldr	r0, [r3, #4]
9000abe8:	68bb      	ldr	r3, [r7, #8]
9000abea:	6899      	ldr	r1, [r3, #8]
9000abec:	68bb      	ldr	r3, [r7, #8]
9000abee:	899b      	ldrh	r3, [r3, #12]
9000abf0:	461a      	mov	r2, r3
9000abf2:	f002 ffd3 	bl	9000db9c <tcp_bind>
9000abf6:	4603      	mov	r3, r0
9000abf8:	73fb      	strb	r3, [r7, #15]
        break;
9000abfa:	e004      	b.n	9000ac06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
9000abfc:	23fa      	movs	r3, #250	; 0xfa
9000abfe:	73fb      	strb	r3, [r7, #15]
        break;
9000ac00:	e001      	b.n	9000ac06 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
9000ac02:	23fa      	movs	r3, #250	; 0xfa
9000ac04:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
9000ac06:	68bb      	ldr	r3, [r7, #8]
9000ac08:	7bfa      	ldrb	r2, [r7, #15]
9000ac0a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
9000ac0c:	bf00      	nop
9000ac0e:	3710      	adds	r7, #16
9000ac10:	46bd      	mov	sp, r7
9000ac12:	bd80      	pop	{r7, pc}

9000ac14 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
9000ac14:	b580      	push	{r7, lr}
9000ac16:	b086      	sub	sp, #24
9000ac18:	af00      	add	r7, sp, #0
9000ac1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
9000ac1c:	687b      	ldr	r3, [r7, #4]
9000ac1e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
9000ac20:	697b      	ldr	r3, [r7, #20]
9000ac22:	681b      	ldr	r3, [r3, #0]
9000ac24:	685b      	ldr	r3, [r3, #4]
9000ac26:	2b00      	cmp	r3, #0
9000ac28:	d07f      	beq.n	9000ad2a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
9000ac2a:	697b      	ldr	r3, [r7, #20]
9000ac2c:	681b      	ldr	r3, [r3, #0]
9000ac2e:	781b      	ldrb	r3, [r3, #0]
9000ac30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000ac34:	2b10      	cmp	r3, #16
9000ac36:	d175      	bne.n	9000ad24 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
9000ac38:	697b      	ldr	r3, [r7, #20]
9000ac3a:	681b      	ldr	r3, [r3, #0]
9000ac3c:	785b      	ldrb	r3, [r3, #1]
9000ac3e:	2b00      	cmp	r3, #0
9000ac40:	d165      	bne.n	9000ad0e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
9000ac42:	697b      	ldr	r3, [r7, #20]
9000ac44:	681b      	ldr	r3, [r3, #0]
9000ac46:	685b      	ldr	r3, [r3, #4]
9000ac48:	7d1b      	ldrb	r3, [r3, #20]
9000ac4a:	2b00      	cmp	r3, #0
9000ac4c:	d002      	beq.n	9000ac54 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
9000ac4e:	23fa      	movs	r3, #250	; 0xfa
9000ac50:	72fb      	strb	r3, [r7, #11]
9000ac52:	e06c      	b.n	9000ad2e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
9000ac54:	23ff      	movs	r3, #255	; 0xff
9000ac56:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
9000ac58:	697b      	ldr	r3, [r7, #20]
9000ac5a:	681b      	ldr	r3, [r3, #0]
9000ac5c:	685b      	ldr	r3, [r3, #4]
9000ac5e:	f107 020b 	add.w	r2, r7, #11
9000ac62:	7cf9      	ldrb	r1, [r7, #19]
9000ac64:	4618      	mov	r0, r3
9000ac66:	f003 f851 	bl	9000dd0c <tcp_listen_with_backlog_and_err>
9000ac6a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
9000ac6c:	68fb      	ldr	r3, [r7, #12]
9000ac6e:	2b00      	cmp	r3, #0
9000ac70:	d05d      	beq.n	9000ad2e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
9000ac72:	697b      	ldr	r3, [r7, #20]
9000ac74:	681b      	ldr	r3, [r3, #0]
9000ac76:	3310      	adds	r3, #16
9000ac78:	4618      	mov	r0, r3
9000ac7a:	f00b fc81 	bl	90016580 <sys_mbox_valid>
9000ac7e:	4603      	mov	r3, r0
9000ac80:	2b00      	cmp	r3, #0
9000ac82:	d00b      	beq.n	9000ac9c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
9000ac84:	697b      	ldr	r3, [r7, #20]
9000ac86:	681b      	ldr	r3, [r3, #0]
9000ac88:	3310      	adds	r3, #16
9000ac8a:	4618      	mov	r0, r3
9000ac8c:	f00b fc04 	bl	90016498 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
9000ac90:	697b      	ldr	r3, [r7, #20]
9000ac92:	681b      	ldr	r3, [r3, #0]
9000ac94:	3310      	adds	r3, #16
9000ac96:	4618      	mov	r0, r3
9000ac98:	f00b fc83 	bl	900165a2 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
9000ac9c:	2300      	movs	r3, #0
9000ac9e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
9000aca0:	697b      	ldr	r3, [r7, #20]
9000aca2:	681b      	ldr	r3, [r3, #0]
9000aca4:	3314      	adds	r3, #20
9000aca6:	4618      	mov	r0, r3
9000aca8:	f00b fc6a 	bl	90016580 <sys_mbox_valid>
9000acac:	4603      	mov	r3, r0
9000acae:	2b00      	cmp	r3, #0
9000acb0:	d108      	bne.n	9000acc4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
9000acb2:	697b      	ldr	r3, [r7, #20]
9000acb4:	681b      	ldr	r3, [r3, #0]
9000acb6:	3314      	adds	r3, #20
9000acb8:	2106      	movs	r1, #6
9000acba:	4618      	mov	r0, r3
9000acbc:	f00b fbd2 	bl	90016464 <sys_mbox_new>
9000acc0:	4603      	mov	r3, r0
9000acc2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
9000acc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
9000acc8:	2b00      	cmp	r3, #0
9000acca:	d118      	bne.n	9000acfe <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
9000accc:	697b      	ldr	r3, [r7, #20]
9000acce:	681b      	ldr	r3, [r3, #0]
9000acd0:	2202      	movs	r2, #2
9000acd2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
9000acd4:	697b      	ldr	r3, [r7, #20]
9000acd6:	681b      	ldr	r3, [r3, #0]
9000acd8:	68fa      	ldr	r2, [r7, #12]
9000acda:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
9000acdc:	697b      	ldr	r3, [r7, #20]
9000acde:	681b      	ldr	r3, [r3, #0]
9000ace0:	685a      	ldr	r2, [r3, #4]
9000ace2:	697b      	ldr	r3, [r7, #20]
9000ace4:	681b      	ldr	r3, [r3, #0]
9000ace6:	4619      	mov	r1, r3
9000ace8:	4610      	mov	r0, r2
9000acea:	f003 ffd9 	bl	9000eca0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
9000acee:	697b      	ldr	r3, [r7, #20]
9000acf0:	681b      	ldr	r3, [r3, #0]
9000acf2:	685b      	ldr	r3, [r3, #4]
9000acf4:	4912      	ldr	r1, [pc, #72]	; (9000ad40 <lwip_netconn_do_listen+0x12c>)
9000acf6:	4618      	mov	r0, r3
9000acf8:	f004 f84a 	bl	9000ed90 <tcp_accept>
9000acfc:	e017      	b.n	9000ad2e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
9000acfe:	68f8      	ldr	r0, [r7, #12]
9000ad00:	f002 fdfa 	bl	9000d8f8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
9000ad04:	697b      	ldr	r3, [r7, #20]
9000ad06:	681b      	ldr	r3, [r3, #0]
9000ad08:	2200      	movs	r2, #0
9000ad0a:	605a      	str	r2, [r3, #4]
9000ad0c:	e00f      	b.n	9000ad2e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
9000ad0e:	697b      	ldr	r3, [r7, #20]
9000ad10:	681b      	ldr	r3, [r3, #0]
9000ad12:	785b      	ldrb	r3, [r3, #1]
9000ad14:	2b02      	cmp	r3, #2
9000ad16:	d102      	bne.n	9000ad1e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
9000ad18:	2300      	movs	r3, #0
9000ad1a:	72fb      	strb	r3, [r7, #11]
9000ad1c:	e007      	b.n	9000ad2e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
9000ad1e:	23f5      	movs	r3, #245	; 0xf5
9000ad20:	72fb      	strb	r3, [r7, #11]
9000ad22:	e004      	b.n	9000ad2e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
9000ad24:	23f0      	movs	r3, #240	; 0xf0
9000ad26:	72fb      	strb	r3, [r7, #11]
9000ad28:	e001      	b.n	9000ad2e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
9000ad2a:	23f5      	movs	r3, #245	; 0xf5
9000ad2c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
9000ad2e:	f997 200b 	ldrsb.w	r2, [r7, #11]
9000ad32:	697b      	ldr	r3, [r7, #20]
9000ad34:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
9000ad36:	bf00      	nop
9000ad38:	3718      	adds	r7, #24
9000ad3a:	46bd      	mov	sp, r7
9000ad3c:	bd80      	pop	{r7, pc}
9000ad3e:	bf00      	nop
9000ad40:	9000a221 	.word	0x9000a221

9000ad44 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
9000ad44:	b580      	push	{r7, lr}
9000ad46:	b086      	sub	sp, #24
9000ad48:	af00      	add	r7, sp, #0
9000ad4a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
9000ad4c:	687b      	ldr	r3, [r7, #4]
9000ad4e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
9000ad50:	693b      	ldr	r3, [r7, #16]
9000ad52:	2200      	movs	r2, #0
9000ad54:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
9000ad56:	693b      	ldr	r3, [r7, #16]
9000ad58:	681b      	ldr	r3, [r3, #0]
9000ad5a:	685b      	ldr	r3, [r3, #4]
9000ad5c:	2b00      	cmp	r3, #0
9000ad5e:	d022      	beq.n	9000ada6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
9000ad60:	693b      	ldr	r3, [r7, #16]
9000ad62:	681b      	ldr	r3, [r3, #0]
9000ad64:	781b      	ldrb	r3, [r3, #0]
9000ad66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000ad6a:	2b10      	cmp	r3, #16
9000ad6c:	d11b      	bne.n	9000ada6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
9000ad6e:	693b      	ldr	r3, [r7, #16]
9000ad70:	689b      	ldr	r3, [r3, #8]
9000ad72:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
9000ad74:	697b      	ldr	r3, [r7, #20]
9000ad76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000ad7a:	d202      	bcs.n	9000ad82 <lwip_netconn_do_recv+0x3e>
9000ad7c:	697b      	ldr	r3, [r7, #20]
9000ad7e:	b29b      	uxth	r3, r3
9000ad80:	e001      	b.n	9000ad86 <lwip_netconn_do_recv+0x42>
9000ad82:	f64f 73ff 	movw	r3, #65535	; 0xffff
9000ad86:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
9000ad88:	693b      	ldr	r3, [r7, #16]
9000ad8a:	681b      	ldr	r3, [r3, #0]
9000ad8c:	685b      	ldr	r3, [r3, #4]
9000ad8e:	89fa      	ldrh	r2, [r7, #14]
9000ad90:	4611      	mov	r1, r2
9000ad92:	4618      	mov	r0, r3
9000ad94:	f003 f8be 	bl	9000df14 <tcp_recved>
        remaining -= recved;
9000ad98:	89fb      	ldrh	r3, [r7, #14]
9000ad9a:	697a      	ldr	r2, [r7, #20]
9000ad9c:	1ad3      	subs	r3, r2, r3
9000ad9e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
9000ada0:	697b      	ldr	r3, [r7, #20]
9000ada2:	2b00      	cmp	r3, #0
9000ada4:	d1e6      	bne.n	9000ad74 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
9000ada6:	bf00      	nop
9000ada8:	3718      	adds	r7, #24
9000adaa:	46bd      	mov	sp, r7
9000adac:	bd80      	pop	{r7, pc}
	...

9000adb0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
9000adb0:	b580      	push	{r7, lr}
9000adb2:	b088      	sub	sp, #32
9000adb4:	af00      	add	r7, sp, #0
9000adb6:	6078      	str	r0, [r7, #4]
9000adb8:	460b      	mov	r3, r1
9000adba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
9000adbc:	2300      	movs	r3, #0
9000adbe:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
9000adc0:	687b      	ldr	r3, [r7, #4]
9000adc2:	2b00      	cmp	r3, #0
9000adc4:	d106      	bne.n	9000add4 <lwip_netconn_do_writemore+0x24>
9000adc6:	4b96      	ldr	r3, [pc, #600]	; (9000b020 <lwip_netconn_do_writemore+0x270>)
9000adc8:	f240 6273 	movw	r2, #1651	; 0x673
9000adcc:	4995      	ldr	r1, [pc, #596]	; (9000b024 <lwip_netconn_do_writemore+0x274>)
9000adce:	4896      	ldr	r0, [pc, #600]	; (9000b028 <lwip_netconn_do_writemore+0x278>)
9000add0:	f00b ff36 	bl	90016c40 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
9000add4:	687b      	ldr	r3, [r7, #4]
9000add6:	785b      	ldrb	r3, [r3, #1]
9000add8:	2b01      	cmp	r3, #1
9000adda:	d006      	beq.n	9000adea <lwip_netconn_do_writemore+0x3a>
9000addc:	4b90      	ldr	r3, [pc, #576]	; (9000b020 <lwip_netconn_do_writemore+0x270>)
9000adde:	f240 6274 	movw	r2, #1652	; 0x674
9000ade2:	4992      	ldr	r1, [pc, #584]	; (9000b02c <lwip_netconn_do_writemore+0x27c>)
9000ade4:	4890      	ldr	r0, [pc, #576]	; (9000b028 <lwip_netconn_do_writemore+0x278>)
9000ade6:	f00b ff2b 	bl	90016c40 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
9000adea:	687b      	ldr	r3, [r7, #4]
9000adec:	6a1b      	ldr	r3, [r3, #32]
9000adee:	2b00      	cmp	r3, #0
9000adf0:	d106      	bne.n	9000ae00 <lwip_netconn_do_writemore+0x50>
9000adf2:	4b8b      	ldr	r3, [pc, #556]	; (9000b020 <lwip_netconn_do_writemore+0x270>)
9000adf4:	f240 6275 	movw	r2, #1653	; 0x675
9000adf8:	498d      	ldr	r1, [pc, #564]	; (9000b030 <lwip_netconn_do_writemore+0x280>)
9000adfa:	488b      	ldr	r0, [pc, #556]	; (9000b028 <lwip_netconn_do_writemore+0x278>)
9000adfc:	f00b ff20 	bl	90016c40 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
9000ae00:	687b      	ldr	r3, [r7, #4]
9000ae02:	685b      	ldr	r3, [r3, #4]
9000ae04:	2b00      	cmp	r3, #0
9000ae06:	d106      	bne.n	9000ae16 <lwip_netconn_do_writemore+0x66>
9000ae08:	4b85      	ldr	r3, [pc, #532]	; (9000b020 <lwip_netconn_do_writemore+0x270>)
9000ae0a:	f240 6276 	movw	r2, #1654	; 0x676
9000ae0e:	4989      	ldr	r1, [pc, #548]	; (9000b034 <lwip_netconn_do_writemore+0x284>)
9000ae10:	4885      	ldr	r0, [pc, #532]	; (9000b028 <lwip_netconn_do_writemore+0x278>)
9000ae12:	f00b ff15 	bl	90016c40 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
9000ae16:	687b      	ldr	r3, [r7, #4]
9000ae18:	6a1b      	ldr	r3, [r3, #32]
9000ae1a:	699a      	ldr	r2, [r3, #24]
9000ae1c:	687b      	ldr	r3, [r7, #4]
9000ae1e:	6a1b      	ldr	r3, [r3, #32]
9000ae20:	695b      	ldr	r3, [r3, #20]
9000ae22:	429a      	cmp	r2, r3
9000ae24:	d306      	bcc.n	9000ae34 <lwip_netconn_do_writemore+0x84>
9000ae26:	4b7e      	ldr	r3, [pc, #504]	; (9000b020 <lwip_netconn_do_writemore+0x270>)
9000ae28:	f240 6277 	movw	r2, #1655	; 0x677
9000ae2c:	4982      	ldr	r1, [pc, #520]	; (9000b038 <lwip_netconn_do_writemore+0x288>)
9000ae2e:	487e      	ldr	r0, [pc, #504]	; (9000b028 <lwip_netconn_do_writemore+0x278>)
9000ae30:	f00b ff06 	bl	90016c40 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
9000ae34:	687b      	ldr	r3, [r7, #4]
9000ae36:	6a1b      	ldr	r3, [r3, #32]
9000ae38:	899b      	ldrh	r3, [r3, #12]
9000ae3a:	2b00      	cmp	r3, #0
9000ae3c:	d106      	bne.n	9000ae4c <lwip_netconn_do_writemore+0x9c>
9000ae3e:	4b78      	ldr	r3, [pc, #480]	; (9000b020 <lwip_netconn_do_writemore+0x270>)
9000ae40:	f240 6279 	movw	r2, #1657	; 0x679
9000ae44:	497d      	ldr	r1, [pc, #500]	; (9000b03c <lwip_netconn_do_writemore+0x28c>)
9000ae46:	4878      	ldr	r0, [pc, #480]	; (9000b028 <lwip_netconn_do_writemore+0x278>)
9000ae48:	f00b fefa 	bl	90016c40 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
9000ae4c:	687b      	ldr	r3, [r7, #4]
9000ae4e:	6a1b      	ldr	r3, [r3, #32]
9000ae50:	7f1b      	ldrb	r3, [r3, #28]
9000ae52:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
9000ae54:	687b      	ldr	r3, [r7, #4]
9000ae56:	7f1b      	ldrb	r3, [r3, #28]
9000ae58:	f003 0302 	and.w	r3, r3, #2
9000ae5c:	2b00      	cmp	r3, #0
9000ae5e:	d104      	bne.n	9000ae6a <lwip_netconn_do_writemore+0xba>
9000ae60:	7ebb      	ldrb	r3, [r7, #26]
9000ae62:	f003 0304 	and.w	r3, r3, #4
9000ae66:	2b00      	cmp	r3, #0
9000ae68:	d001      	beq.n	9000ae6e <lwip_netconn_do_writemore+0xbe>
9000ae6a:	2301      	movs	r3, #1
9000ae6c:	e000      	b.n	9000ae70 <lwip_netconn_do_writemore+0xc0>
9000ae6e:	2300      	movs	r3, #0
9000ae70:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
9000ae72:	687b      	ldr	r3, [r7, #4]
9000ae74:	6a1b      	ldr	r3, [r3, #32]
9000ae76:	689b      	ldr	r3, [r3, #8]
9000ae78:	681a      	ldr	r2, [r3, #0]
9000ae7a:	687b      	ldr	r3, [r7, #4]
9000ae7c:	6a1b      	ldr	r3, [r3, #32]
9000ae7e:	691b      	ldr	r3, [r3, #16]
9000ae80:	4413      	add	r3, r2
9000ae82:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
9000ae84:	687b      	ldr	r3, [r7, #4]
9000ae86:	6a1b      	ldr	r3, [r3, #32]
9000ae88:	689b      	ldr	r3, [r3, #8]
9000ae8a:	685a      	ldr	r2, [r3, #4]
9000ae8c:	687b      	ldr	r3, [r7, #4]
9000ae8e:	6a1b      	ldr	r3, [r3, #32]
9000ae90:	691b      	ldr	r3, [r3, #16]
9000ae92:	1ad3      	subs	r3, r2, r3
9000ae94:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
9000ae96:	693b      	ldr	r3, [r7, #16]
9000ae98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000ae9c:	d307      	bcc.n	9000aeae <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
9000ae9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
9000aea2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
9000aea4:	7ebb      	ldrb	r3, [r7, #26]
9000aea6:	f043 0302 	orr.w	r3, r3, #2
9000aeaa:	76bb      	strb	r3, [r7, #26]
9000aeac:	e001      	b.n	9000aeb2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
9000aeae:	693b      	ldr	r3, [r7, #16]
9000aeb0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
9000aeb2:	687b      	ldr	r3, [r7, #4]
9000aeb4:	685b      	ldr	r3, [r3, #4]
9000aeb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
9000aeba:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
9000aebc:	89fa      	ldrh	r2, [r7, #14]
9000aebe:	8bbb      	ldrh	r3, [r7, #28]
9000aec0:	429a      	cmp	r2, r3
9000aec2:	d216      	bcs.n	9000aef2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
9000aec4:	89fb      	ldrh	r3, [r7, #14]
9000aec6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
9000aec8:	7e3b      	ldrb	r3, [r7, #24]
9000aeca:	2b00      	cmp	r3, #0
9000aecc:	d00d      	beq.n	9000aeea <lwip_netconn_do_writemore+0x13a>
          if (!len) {
9000aece:	8bbb      	ldrh	r3, [r7, #28]
9000aed0:	2b00      	cmp	r3, #0
9000aed2:	d10e      	bne.n	9000aef2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
9000aed4:	687b      	ldr	r3, [r7, #4]
9000aed6:	6a1b      	ldr	r3, [r3, #32]
9000aed8:	699b      	ldr	r3, [r3, #24]
9000aeda:	2b00      	cmp	r3, #0
9000aedc:	d102      	bne.n	9000aee4 <lwip_netconn_do_writemore+0x134>
9000aede:	f06f 0306 	mvn.w	r3, #6
9000aee2:	e000      	b.n	9000aee6 <lwip_netconn_do_writemore+0x136>
9000aee4:	2300      	movs	r3, #0
9000aee6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
9000aee8:	e07d      	b.n	9000afe6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
9000aeea:	7ebb      	ldrb	r3, [r7, #26]
9000aeec:	f043 0302 	orr.w	r3, r3, #2
9000aef0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
9000aef2:	687b      	ldr	r3, [r7, #4]
9000aef4:	6a1b      	ldr	r3, [r3, #32]
9000aef6:	691a      	ldr	r2, [r3, #16]
9000aef8:	8bbb      	ldrh	r3, [r7, #28]
9000aefa:	441a      	add	r2, r3
9000aefc:	687b      	ldr	r3, [r7, #4]
9000aefe:	6a1b      	ldr	r3, [r3, #32]
9000af00:	689b      	ldr	r3, [r3, #8]
9000af02:	685b      	ldr	r3, [r3, #4]
9000af04:	429a      	cmp	r2, r3
9000af06:	d906      	bls.n	9000af16 <lwip_netconn_do_writemore+0x166>
9000af08:	4b45      	ldr	r3, [pc, #276]	; (9000b020 <lwip_netconn_do_writemore+0x270>)
9000af0a:	f240 62a3 	movw	r2, #1699	; 0x6a3
9000af0e:	494c      	ldr	r1, [pc, #304]	; (9000b040 <lwip_netconn_do_writemore+0x290>)
9000af10:	4845      	ldr	r0, [pc, #276]	; (9000b028 <lwip_netconn_do_writemore+0x278>)
9000af12:	f00b fe95 	bl	90016c40 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
9000af16:	8bbb      	ldrh	r3, [r7, #28]
9000af18:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000af1c:	4293      	cmp	r3, r2
9000af1e:	d103      	bne.n	9000af28 <lwip_netconn_do_writemore+0x178>
9000af20:	693b      	ldr	r3, [r7, #16]
9000af22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000af26:	d209      	bcs.n	9000af3c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
9000af28:	693b      	ldr	r3, [r7, #16]
9000af2a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
9000af2c:	8bba      	ldrh	r2, [r7, #28]
9000af2e:	429a      	cmp	r2, r3
9000af30:	d10b      	bne.n	9000af4a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
9000af32:	687b      	ldr	r3, [r7, #4]
9000af34:	6a1b      	ldr	r3, [r3, #32]
9000af36:	899b      	ldrh	r3, [r3, #12]
9000af38:	2b01      	cmp	r3, #1
9000af3a:	d906      	bls.n	9000af4a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
9000af3c:	2301      	movs	r3, #1
9000af3e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
9000af40:	7ebb      	ldrb	r3, [r7, #26]
9000af42:	f043 0302 	orr.w	r3, r3, #2
9000af46:	76bb      	strb	r3, [r7, #26]
9000af48:	e001      	b.n	9000af4e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
9000af4a:	2300      	movs	r3, #0
9000af4c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
9000af4e:	687b      	ldr	r3, [r7, #4]
9000af50:	6858      	ldr	r0, [r3, #4]
9000af52:	7ebb      	ldrb	r3, [r7, #26]
9000af54:	8bba      	ldrh	r2, [r7, #28]
9000af56:	6979      	ldr	r1, [r7, #20]
9000af58:	f006 fde4 	bl	90011b24 <tcp_write>
9000af5c:	4603      	mov	r3, r0
9000af5e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
9000af60:	f997 301f 	ldrsb.w	r3, [r7, #31]
9000af64:	2b00      	cmp	r3, #0
9000af66:	d12c      	bne.n	9000afc2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
9000af68:	687b      	ldr	r3, [r7, #4]
9000af6a:	6a1b      	ldr	r3, [r3, #32]
9000af6c:	6999      	ldr	r1, [r3, #24]
9000af6e:	8bba      	ldrh	r2, [r7, #28]
9000af70:	687b      	ldr	r3, [r7, #4]
9000af72:	6a1b      	ldr	r3, [r3, #32]
9000af74:	440a      	add	r2, r1
9000af76:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
9000af78:	687b      	ldr	r3, [r7, #4]
9000af7a:	6a1b      	ldr	r3, [r3, #32]
9000af7c:	6919      	ldr	r1, [r3, #16]
9000af7e:	8bba      	ldrh	r2, [r7, #28]
9000af80:	687b      	ldr	r3, [r7, #4]
9000af82:	6a1b      	ldr	r3, [r3, #32]
9000af84:	440a      	add	r2, r1
9000af86:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
9000af88:	687b      	ldr	r3, [r7, #4]
9000af8a:	6a1b      	ldr	r3, [r3, #32]
9000af8c:	691a      	ldr	r2, [r3, #16]
9000af8e:	687b      	ldr	r3, [r7, #4]
9000af90:	6a1b      	ldr	r3, [r3, #32]
9000af92:	689b      	ldr	r3, [r3, #8]
9000af94:	685b      	ldr	r3, [r3, #4]
9000af96:	429a      	cmp	r2, r3
9000af98:	d113      	bne.n	9000afc2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
9000af9a:	687b      	ldr	r3, [r7, #4]
9000af9c:	6a1b      	ldr	r3, [r3, #32]
9000af9e:	899a      	ldrh	r2, [r3, #12]
9000afa0:	3a01      	subs	r2, #1
9000afa2:	b292      	uxth	r2, r2
9000afa4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
9000afa6:	687b      	ldr	r3, [r7, #4]
9000afa8:	6a1b      	ldr	r3, [r3, #32]
9000afaa:	899b      	ldrh	r3, [r3, #12]
9000afac:	2b00      	cmp	r3, #0
9000afae:	d008      	beq.n	9000afc2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
9000afb0:	687b      	ldr	r3, [r7, #4]
9000afb2:	6a1b      	ldr	r3, [r3, #32]
9000afb4:	689a      	ldr	r2, [r3, #8]
9000afb6:	3208      	adds	r2, #8
9000afb8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
9000afba:	687b      	ldr	r3, [r7, #4]
9000afbc:	6a1b      	ldr	r3, [r3, #32]
9000afbe:	2200      	movs	r2, #0
9000afc0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
9000afc2:	7e7b      	ldrb	r3, [r7, #25]
9000afc4:	2b00      	cmp	r3, #0
9000afc6:	d004      	beq.n	9000afd2 <lwip_netconn_do_writemore+0x222>
9000afc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
9000afcc:	2b00      	cmp	r3, #0
9000afce:	f43f af50 	beq.w	9000ae72 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
9000afd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
9000afd6:	2b00      	cmp	r3, #0
9000afd8:	d004      	beq.n	9000afe4 <lwip_netconn_do_writemore+0x234>
9000afda:	f997 301f 	ldrsb.w	r3, [r7, #31]
9000afde:	f1b3 3fff 	cmp.w	r3, #4294967295
9000afe2:	d146      	bne.n	9000b072 <lwip_netconn_do_writemore+0x2c2>
err_mem:
9000afe4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
9000afe6:	7e3b      	ldrb	r3, [r7, #24]
9000afe8:	2b00      	cmp	r3, #0
9000afea:	d02b      	beq.n	9000b044 <lwip_netconn_do_writemore+0x294>
9000afec:	687b      	ldr	r3, [r7, #4]
9000afee:	6a1b      	ldr	r3, [r3, #32]
9000aff0:	699a      	ldr	r2, [r3, #24]
9000aff2:	687b      	ldr	r3, [r7, #4]
9000aff4:	6a1b      	ldr	r3, [r3, #32]
9000aff6:	695b      	ldr	r3, [r3, #20]
9000aff8:	429a      	cmp	r2, r3
9000affa:	d223      	bcs.n	9000b044 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
9000affc:	687b      	ldr	r3, [r7, #4]
9000affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b000:	2b00      	cmp	r3, #0
9000b002:	d005      	beq.n	9000b010 <lwip_netconn_do_writemore+0x260>
9000b004:	687b      	ldr	r3, [r7, #4]
9000b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b008:	2200      	movs	r2, #0
9000b00a:	2103      	movs	r1, #3
9000b00c:	6878      	ldr	r0, [r7, #4]
9000b00e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
9000b010:	687b      	ldr	r3, [r7, #4]
9000b012:	7f1b      	ldrb	r3, [r3, #28]
9000b014:	f043 0310 	orr.w	r3, r3, #16
9000b018:	b2da      	uxtb	r2, r3
9000b01a:	687b      	ldr	r3, [r7, #4]
9000b01c:	771a      	strb	r2, [r3, #28]
9000b01e:	e028      	b.n	9000b072 <lwip_netconn_do_writemore+0x2c2>
9000b020:	90017e50 	.word	0x90017e50
9000b024:	90017fa8 	.word	0x90017fa8
9000b028:	90017e94 	.word	0x90017e94
9000b02c:	900182b0 	.word	0x900182b0
9000b030:	90017fb8 	.word	0x90017fb8
9000b034:	900182d0 	.word	0x900182d0
9000b038:	900182e8 	.word	0x900182e8
9000b03c:	90018328 	.word	0x90018328
9000b040:	90018350 	.word	0x90018350
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
9000b044:	687b      	ldr	r3, [r7, #4]
9000b046:	685b      	ldr	r3, [r3, #4]
9000b048:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
9000b04c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
9000b050:	d305      	bcc.n	9000b05e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
9000b052:	687b      	ldr	r3, [r7, #4]
9000b054:	685b      	ldr	r3, [r3, #4]
9000b056:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
9000b05a:	2b04      	cmp	r3, #4
9000b05c:	d909      	bls.n	9000b072 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
9000b05e:	687b      	ldr	r3, [r7, #4]
9000b060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b062:	2b00      	cmp	r3, #0
9000b064:	d005      	beq.n	9000b072 <lwip_netconn_do_writemore+0x2c2>
9000b066:	687b      	ldr	r3, [r7, #4]
9000b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b06a:	2200      	movs	r2, #0
9000b06c:	2103      	movs	r1, #3
9000b06e:	6878      	ldr	r0, [r7, #4]
9000b070:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
9000b072:	f997 301f 	ldrsb.w	r3, [r7, #31]
9000b076:	2b00      	cmp	r3, #0
9000b078:	d11d      	bne.n	9000b0b6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
9000b07a:	687b      	ldr	r3, [r7, #4]
9000b07c:	6a1b      	ldr	r3, [r3, #32]
9000b07e:	699a      	ldr	r2, [r3, #24]
9000b080:	687b      	ldr	r3, [r7, #4]
9000b082:	6a1b      	ldr	r3, [r3, #32]
9000b084:	695b      	ldr	r3, [r3, #20]
9000b086:	429a      	cmp	r2, r3
9000b088:	d002      	beq.n	9000b090 <lwip_netconn_do_writemore+0x2e0>
9000b08a:	7e3b      	ldrb	r3, [r7, #24]
9000b08c:	2b00      	cmp	r3, #0
9000b08e:	d001      	beq.n	9000b094 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
9000b090:	2301      	movs	r3, #1
9000b092:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
9000b094:	687b      	ldr	r3, [r7, #4]
9000b096:	685b      	ldr	r3, [r3, #4]
9000b098:	4618      	mov	r0, r3
9000b09a:	f007 fb2d 	bl	900126f8 <tcp_output>
9000b09e:	4603      	mov	r3, r0
9000b0a0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
9000b0a2:	f997 300c 	ldrsb.w	r3, [r7, #12]
9000b0a6:	f113 0f04 	cmn.w	r3, #4
9000b0aa:	d12c      	bne.n	9000b106 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
9000b0ac:	7b3b      	ldrb	r3, [r7, #12]
9000b0ae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
9000b0b0:	2301      	movs	r3, #1
9000b0b2:	76fb      	strb	r3, [r7, #27]
9000b0b4:	e027      	b.n	9000b106 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
9000b0b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
9000b0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
9000b0be:	d120      	bne.n	9000b102 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
9000b0c0:	687b      	ldr	r3, [r7, #4]
9000b0c2:	685b      	ldr	r3, [r3, #4]
9000b0c4:	4618      	mov	r0, r3
9000b0c6:	f007 fb17 	bl	900126f8 <tcp_output>
9000b0ca:	4603      	mov	r3, r0
9000b0cc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
9000b0ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
9000b0d2:	f113 0f04 	cmn.w	r3, #4
9000b0d6:	d104      	bne.n	9000b0e2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
9000b0d8:	7b7b      	ldrb	r3, [r7, #13]
9000b0da:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
9000b0dc:	2301      	movs	r3, #1
9000b0de:	76fb      	strb	r3, [r7, #27]
9000b0e0:	e011      	b.n	9000b106 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
9000b0e2:	7e3b      	ldrb	r3, [r7, #24]
9000b0e4:	2b00      	cmp	r3, #0
9000b0e6:	d00e      	beq.n	9000b106 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
9000b0e8:	687b      	ldr	r3, [r7, #4]
9000b0ea:	6a1b      	ldr	r3, [r3, #32]
9000b0ec:	699b      	ldr	r3, [r3, #24]
9000b0ee:	2b00      	cmp	r3, #0
9000b0f0:	d102      	bne.n	9000b0f8 <lwip_netconn_do_writemore+0x348>
9000b0f2:	f06f 0306 	mvn.w	r3, #6
9000b0f6:	e000      	b.n	9000b0fa <lwip_netconn_do_writemore+0x34a>
9000b0f8:	2300      	movs	r3, #0
9000b0fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
9000b0fc:	2301      	movs	r3, #1
9000b0fe:	76fb      	strb	r3, [r7, #27]
9000b100:	e001      	b.n	9000b106 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
9000b102:	2301      	movs	r3, #1
9000b104:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
9000b106:	7efb      	ldrb	r3, [r7, #27]
9000b108:	2b00      	cmp	r3, #0
9000b10a:	d015      	beq.n	9000b138 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
9000b10c:	687b      	ldr	r3, [r7, #4]
9000b10e:	6a1b      	ldr	r3, [r3, #32]
9000b110:	681b      	ldr	r3, [r3, #0]
9000b112:	330c      	adds	r3, #12
9000b114:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
9000b116:	687b      	ldr	r3, [r7, #4]
9000b118:	6a1b      	ldr	r3, [r3, #32]
9000b11a:	7ffa      	ldrb	r2, [r7, #31]
9000b11c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
9000b11e:	687b      	ldr	r3, [r7, #4]
9000b120:	2200      	movs	r2, #0
9000b122:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
9000b124:	687b      	ldr	r3, [r7, #4]
9000b126:	2200      	movs	r2, #0
9000b128:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
9000b12a:	78fb      	ldrb	r3, [r7, #3]
9000b12c:	2b00      	cmp	r3, #0
9000b12e:	d006      	beq.n	9000b13e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
9000b130:	68b8      	ldr	r0, [r7, #8]
9000b132:	f00b fa99 	bl	90016668 <sys_sem_signal>
9000b136:	e002      	b.n	9000b13e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
9000b138:	f04f 33ff 	mov.w	r3, #4294967295
9000b13c:	e000      	b.n	9000b140 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
9000b13e:	2300      	movs	r3, #0
}
9000b140:	4618      	mov	r0, r3
9000b142:	3720      	adds	r7, #32
9000b144:	46bd      	mov	sp, r7
9000b146:	bd80      	pop	{r7, pc}

9000b148 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
9000b148:	b580      	push	{r7, lr}
9000b14a:	b084      	sub	sp, #16
9000b14c:	af00      	add	r7, sp, #0
9000b14e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
9000b150:	687b      	ldr	r3, [r7, #4]
9000b152:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
9000b154:	68bb      	ldr	r3, [r7, #8]
9000b156:	681b      	ldr	r3, [r3, #0]
9000b158:	4618      	mov	r0, r3
9000b15a:	f7fe fd1c 	bl	90009b96 <netconn_err>
9000b15e:	4603      	mov	r3, r0
9000b160:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
9000b162:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000b166:	2b00      	cmp	r3, #0
9000b168:	d166      	bne.n	9000b238 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
9000b16a:	68bb      	ldr	r3, [r7, #8]
9000b16c:	681b      	ldr	r3, [r3, #0]
9000b16e:	781b      	ldrb	r3, [r3, #0]
9000b170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000b174:	2b10      	cmp	r3, #16
9000b176:	d15d      	bne.n	9000b234 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
9000b178:	68bb      	ldr	r3, [r7, #8]
9000b17a:	681b      	ldr	r3, [r3, #0]
9000b17c:	785b      	ldrb	r3, [r3, #1]
9000b17e:	2b00      	cmp	r3, #0
9000b180:	d002      	beq.n	9000b188 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
9000b182:	23fb      	movs	r3, #251	; 0xfb
9000b184:	73fb      	strb	r3, [r7, #15]
9000b186:	e057      	b.n	9000b238 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
9000b188:	68bb      	ldr	r3, [r7, #8]
9000b18a:	681b      	ldr	r3, [r3, #0]
9000b18c:	685b      	ldr	r3, [r3, #4]
9000b18e:	2b00      	cmp	r3, #0
9000b190:	d04d      	beq.n	9000b22e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
9000b192:	68bb      	ldr	r3, [r7, #8]
9000b194:	681b      	ldr	r3, [r3, #0]
9000b196:	2201      	movs	r2, #1
9000b198:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
9000b19a:	68bb      	ldr	r3, [r7, #8]
9000b19c:	681b      	ldr	r3, [r3, #0]
9000b19e:	6a1b      	ldr	r3, [r3, #32]
9000b1a0:	2b00      	cmp	r3, #0
9000b1a2:	d006      	beq.n	9000b1b2 <lwip_netconn_do_write+0x6a>
9000b1a4:	4b28      	ldr	r3, [pc, #160]	; (9000b248 <lwip_netconn_do_write+0x100>)
9000b1a6:	f240 7223 	movw	r2, #1827	; 0x723
9000b1aa:	4928      	ldr	r1, [pc, #160]	; (9000b24c <lwip_netconn_do_write+0x104>)
9000b1ac:	4828      	ldr	r0, [pc, #160]	; (9000b250 <lwip_netconn_do_write+0x108>)
9000b1ae:	f00b fd47 	bl	90016c40 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
9000b1b2:	68bb      	ldr	r3, [r7, #8]
9000b1b4:	695b      	ldr	r3, [r3, #20]
9000b1b6:	2b00      	cmp	r3, #0
9000b1b8:	d106      	bne.n	9000b1c8 <lwip_netconn_do_write+0x80>
9000b1ba:	4b23      	ldr	r3, [pc, #140]	; (9000b248 <lwip_netconn_do_write+0x100>)
9000b1bc:	f240 7224 	movw	r2, #1828	; 0x724
9000b1c0:	4924      	ldr	r1, [pc, #144]	; (9000b254 <lwip_netconn_do_write+0x10c>)
9000b1c2:	4823      	ldr	r0, [pc, #140]	; (9000b250 <lwip_netconn_do_write+0x108>)
9000b1c4:	f00b fd3c 	bl	90016c40 <iprintf>
        msg->conn->current_msg = msg;
9000b1c8:	68bb      	ldr	r3, [r7, #8]
9000b1ca:	681b      	ldr	r3, [r3, #0]
9000b1cc:	68ba      	ldr	r2, [r7, #8]
9000b1ce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
9000b1d0:	68bb      	ldr	r3, [r7, #8]
9000b1d2:	681b      	ldr	r3, [r3, #0]
9000b1d4:	2100      	movs	r1, #0
9000b1d6:	4618      	mov	r0, r3
9000b1d8:	f7ff fdea 	bl	9000adb0 <lwip_netconn_do_writemore>
9000b1dc:	4603      	mov	r3, r0
9000b1de:	2b00      	cmp	r3, #0
9000b1e0:	d02e      	beq.n	9000b240 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
9000b1e2:	68bb      	ldr	r3, [r7, #8]
9000b1e4:	681b      	ldr	r3, [r3, #0]
9000b1e6:	785b      	ldrb	r3, [r3, #1]
9000b1e8:	2b01      	cmp	r3, #1
9000b1ea:	d006      	beq.n	9000b1fa <lwip_netconn_do_write+0xb2>
9000b1ec:	4b16      	ldr	r3, [pc, #88]	; (9000b248 <lwip_netconn_do_write+0x100>)
9000b1ee:	f44f 62e5 	mov.w	r2, #1832	; 0x728
9000b1f2:	4919      	ldr	r1, [pc, #100]	; (9000b258 <lwip_netconn_do_write+0x110>)
9000b1f4:	4816      	ldr	r0, [pc, #88]	; (9000b250 <lwip_netconn_do_write+0x108>)
9000b1f6:	f00b fd23 	bl	90016c40 <iprintf>
          UNLOCK_TCPIP_CORE();
9000b1fa:	4818      	ldr	r0, [pc, #96]	; (9000b25c <lwip_netconn_do_write+0x114>)
9000b1fc:	f00b fa9d 	bl	9001673a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
9000b200:	68bb      	ldr	r3, [r7, #8]
9000b202:	681b      	ldr	r3, [r3, #0]
9000b204:	330c      	adds	r3, #12
9000b206:	2100      	movs	r1, #0
9000b208:	4618      	mov	r0, r3
9000b20a:	f00b f9fc 	bl	90016606 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
9000b20e:	4813      	ldr	r0, [pc, #76]	; (9000b25c <lwip_netconn_do_write+0x114>)
9000b210:	f00b fa84 	bl	9001671c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
9000b214:	68bb      	ldr	r3, [r7, #8]
9000b216:	681b      	ldr	r3, [r3, #0]
9000b218:	785b      	ldrb	r3, [r3, #1]
9000b21a:	2b01      	cmp	r3, #1
9000b21c:	d110      	bne.n	9000b240 <lwip_netconn_do_write+0xf8>
9000b21e:	4b0a      	ldr	r3, [pc, #40]	; (9000b248 <lwip_netconn_do_write+0x100>)
9000b220:	f240 722c 	movw	r2, #1836	; 0x72c
9000b224:	490c      	ldr	r1, [pc, #48]	; (9000b258 <lwip_netconn_do_write+0x110>)
9000b226:	480a      	ldr	r0, [pc, #40]	; (9000b250 <lwip_netconn_do_write+0x108>)
9000b228:	f00b fd0a 	bl	90016c40 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
9000b22c:	e008      	b.n	9000b240 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
9000b22e:	23f5      	movs	r3, #245	; 0xf5
9000b230:	73fb      	strb	r3, [r7, #15]
9000b232:	e001      	b.n	9000b238 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
9000b234:	23fa      	movs	r3, #250	; 0xfa
9000b236:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
9000b238:	68bb      	ldr	r3, [r7, #8]
9000b23a:	7bfa      	ldrb	r2, [r7, #15]
9000b23c:	711a      	strb	r2, [r3, #4]
9000b23e:	e000      	b.n	9000b242 <lwip_netconn_do_write+0xfa>
        return;
9000b240:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
9000b242:	3710      	adds	r7, #16
9000b244:	46bd      	mov	sp, r7
9000b246:	bd80      	pop	{r7, pc}
9000b248:	90017e50 	.word	0x90017e50
9000b24c:	900181f4 	.word	0x900181f4
9000b250:	90017e94 	.word	0x90017e94
9000b254:	9001837c 	.word	0x9001837c
9000b258:	90018210 	.word	0x90018210
9000b25c:	20007cb0 	.word	0x20007cb0

9000b260 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
9000b260:	b580      	push	{r7, lr}
9000b262:	b084      	sub	sp, #16
9000b264:	af00      	add	r7, sp, #0
9000b266:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
9000b268:	687b      	ldr	r3, [r7, #4]
9000b26a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
9000b26c:	68fb      	ldr	r3, [r7, #12]
9000b26e:	681b      	ldr	r3, [r3, #0]
9000b270:	785b      	ldrb	r3, [r3, #1]
9000b272:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
9000b274:	68fb      	ldr	r3, [r7, #12]
9000b276:	681b      	ldr	r3, [r3, #0]
9000b278:	685b      	ldr	r3, [r3, #4]
9000b27a:	2b00      	cmp	r3, #0
9000b27c:	d069      	beq.n	9000b352 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
9000b27e:	68fb      	ldr	r3, [r7, #12]
9000b280:	681b      	ldr	r3, [r3, #0]
9000b282:	781b      	ldrb	r3, [r3, #0]
9000b284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
9000b288:	2b10      	cmp	r3, #16
9000b28a:	d162      	bne.n	9000b352 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
9000b28c:	68fb      	ldr	r3, [r7, #12]
9000b28e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
9000b290:	2b03      	cmp	r3, #3
9000b292:	d002      	beq.n	9000b29a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
9000b294:	7afb      	ldrb	r3, [r7, #11]
9000b296:	2b02      	cmp	r3, #2
9000b298:	d05b      	beq.n	9000b352 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
9000b29a:	7afb      	ldrb	r3, [r7, #11]
9000b29c:	2b03      	cmp	r3, #3
9000b29e:	d103      	bne.n	9000b2a8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
9000b2a0:	68fb      	ldr	r3, [r7, #12]
9000b2a2:	22f5      	movs	r2, #245	; 0xf5
9000b2a4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
9000b2a6:	e059      	b.n	9000b35c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
9000b2a8:	7afb      	ldrb	r3, [r7, #11]
9000b2aa:	2b01      	cmp	r3, #1
9000b2ac:	d103      	bne.n	9000b2b6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
9000b2ae:	68fb      	ldr	r3, [r7, #12]
9000b2b0:	22fb      	movs	r2, #251	; 0xfb
9000b2b2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
9000b2b4:	e052      	b.n	9000b35c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
9000b2b6:	68fb      	ldr	r3, [r7, #12]
9000b2b8:	7a1b      	ldrb	r3, [r3, #8]
9000b2ba:	f003 0301 	and.w	r3, r3, #1
9000b2be:	2b00      	cmp	r3, #0
9000b2c0:	d004      	beq.n	9000b2cc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
9000b2c2:	68fb      	ldr	r3, [r7, #12]
9000b2c4:	681b      	ldr	r3, [r3, #0]
9000b2c6:	4618      	mov	r0, r3
9000b2c8:	f7ff f99e 	bl	9000a608 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
9000b2cc:	68fb      	ldr	r3, [r7, #12]
9000b2ce:	681b      	ldr	r3, [r3, #0]
9000b2d0:	6a1b      	ldr	r3, [r3, #32]
9000b2d2:	2b00      	cmp	r3, #0
9000b2d4:	d006      	beq.n	9000b2e4 <lwip_netconn_do_close+0x84>
9000b2d6:	4b23      	ldr	r3, [pc, #140]	; (9000b364 <lwip_netconn_do_close+0x104>)
9000b2d8:	f240 72bd 	movw	r2, #1981	; 0x7bd
9000b2dc:	4922      	ldr	r1, [pc, #136]	; (9000b368 <lwip_netconn_do_close+0x108>)
9000b2de:	4823      	ldr	r0, [pc, #140]	; (9000b36c <lwip_netconn_do_close+0x10c>)
9000b2e0:	f00b fcae 	bl	90016c40 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
9000b2e4:	68fb      	ldr	r3, [r7, #12]
9000b2e6:	681b      	ldr	r3, [r3, #0]
9000b2e8:	2204      	movs	r2, #4
9000b2ea:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
9000b2ec:	68fb      	ldr	r3, [r7, #12]
9000b2ee:	681b      	ldr	r3, [r3, #0]
9000b2f0:	68fa      	ldr	r2, [r7, #12]
9000b2f2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
9000b2f4:	68fb      	ldr	r3, [r7, #12]
9000b2f6:	681b      	ldr	r3, [r3, #0]
9000b2f8:	2100      	movs	r1, #0
9000b2fa:	4618      	mov	r0, r3
9000b2fc:	f7ff fa02 	bl	9000a704 <lwip_netconn_do_close_internal>
9000b300:	4603      	mov	r3, r0
9000b302:	2b00      	cmp	r3, #0
9000b304:	d029      	beq.n	9000b35a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
9000b306:	68fb      	ldr	r3, [r7, #12]
9000b308:	681b      	ldr	r3, [r3, #0]
9000b30a:	785b      	ldrb	r3, [r3, #1]
9000b30c:	2b04      	cmp	r3, #4
9000b30e:	d006      	beq.n	9000b31e <lwip_netconn_do_close+0xbe>
9000b310:	4b14      	ldr	r3, [pc, #80]	; (9000b364 <lwip_netconn_do_close+0x104>)
9000b312:	f240 72c2 	movw	r2, #1986	; 0x7c2
9000b316:	4916      	ldr	r1, [pc, #88]	; (9000b370 <lwip_netconn_do_close+0x110>)
9000b318:	4814      	ldr	r0, [pc, #80]	; (9000b36c <lwip_netconn_do_close+0x10c>)
9000b31a:	f00b fc91 	bl	90016c40 <iprintf>
        UNLOCK_TCPIP_CORE();
9000b31e:	4815      	ldr	r0, [pc, #84]	; (9000b374 <lwip_netconn_do_close+0x114>)
9000b320:	f00b fa0b 	bl	9001673a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
9000b324:	68fb      	ldr	r3, [r7, #12]
9000b326:	681b      	ldr	r3, [r3, #0]
9000b328:	330c      	adds	r3, #12
9000b32a:	2100      	movs	r1, #0
9000b32c:	4618      	mov	r0, r3
9000b32e:	f00b f96a 	bl	90016606 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
9000b332:	4810      	ldr	r0, [pc, #64]	; (9000b374 <lwip_netconn_do_close+0x114>)
9000b334:	f00b f9f2 	bl	9001671c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
9000b338:	68fb      	ldr	r3, [r7, #12]
9000b33a:	681b      	ldr	r3, [r3, #0]
9000b33c:	785b      	ldrb	r3, [r3, #1]
9000b33e:	2b00      	cmp	r3, #0
9000b340:	d00b      	beq.n	9000b35a <lwip_netconn_do_close+0xfa>
9000b342:	4b08      	ldr	r3, [pc, #32]	; (9000b364 <lwip_netconn_do_close+0x104>)
9000b344:	f240 72c6 	movw	r2, #1990	; 0x7c6
9000b348:	4909      	ldr	r1, [pc, #36]	; (9000b370 <lwip_netconn_do_close+0x110>)
9000b34a:	4808      	ldr	r0, [pc, #32]	; (9000b36c <lwip_netconn_do_close+0x10c>)
9000b34c:	f00b fc78 	bl	90016c40 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
9000b350:	e003      	b.n	9000b35a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
9000b352:	68fb      	ldr	r3, [r7, #12]
9000b354:	22f5      	movs	r2, #245	; 0xf5
9000b356:	711a      	strb	r2, [r3, #4]
9000b358:	e000      	b.n	9000b35c <lwip_netconn_do_close+0xfc>
      return;
9000b35a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
9000b35c:	3710      	adds	r7, #16
9000b35e:	46bd      	mov	sp, r7
9000b360:	bd80      	pop	{r7, pc}
9000b362:	bf00      	nop
9000b364:	90017e50 	.word	0x90017e50
9000b368:	900181f4 	.word	0x900181f4
9000b36c:	90017e94 	.word	0x90017e94
9000b370:	90018210 	.word	0x90018210
9000b374:	20007cb0 	.word	0x20007cb0

9000b378 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
9000b378:	b580      	push	{r7, lr}
9000b37a:	b082      	sub	sp, #8
9000b37c:	af00      	add	r7, sp, #0
9000b37e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
9000b380:	687b      	ldr	r3, [r7, #4]
9000b382:	2b00      	cmp	r3, #0
9000b384:	d013      	beq.n	9000b3ae <netbuf_delete+0x36>
    if (buf->p != NULL) {
9000b386:	687b      	ldr	r3, [r7, #4]
9000b388:	681b      	ldr	r3, [r3, #0]
9000b38a:	2b00      	cmp	r3, #0
9000b38c:	d00b      	beq.n	9000b3a6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
9000b38e:	687b      	ldr	r3, [r7, #4]
9000b390:	681b      	ldr	r3, [r3, #0]
9000b392:	4618      	mov	r0, r3
9000b394:	f001 fe06 	bl	9000cfa4 <pbuf_free>
      buf->p = buf->ptr = NULL;
9000b398:	687b      	ldr	r3, [r7, #4]
9000b39a:	2200      	movs	r2, #0
9000b39c:	605a      	str	r2, [r3, #4]
9000b39e:	687b      	ldr	r3, [r7, #4]
9000b3a0:	685a      	ldr	r2, [r3, #4]
9000b3a2:	687b      	ldr	r3, [r7, #4]
9000b3a4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
9000b3a6:	6879      	ldr	r1, [r7, #4]
9000b3a8:	2006      	movs	r0, #6
9000b3aa:	f000 ff57 	bl	9000c25c <memp_free>
  }
}
9000b3ae:	bf00      	nop
9000b3b0:	3708      	adds	r7, #8
9000b3b2:	46bd      	mov	sp, r7
9000b3b4:	bd80      	pop	{r7, pc}
	...

9000b3b8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
9000b3b8:	b580      	push	{r7, lr}
9000b3ba:	b084      	sub	sp, #16
9000b3bc:	af00      	add	r7, sp, #0
9000b3be:	60f8      	str	r0, [r7, #12]
9000b3c0:	60b9      	str	r1, [r7, #8]
9000b3c2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
9000b3c4:	68fb      	ldr	r3, [r7, #12]
9000b3c6:	2b00      	cmp	r3, #0
9000b3c8:	d108      	bne.n	9000b3dc <netbuf_data+0x24>
9000b3ca:	4b1b      	ldr	r3, [pc, #108]	; (9000b438 <netbuf_data+0x80>)
9000b3cc:	22c6      	movs	r2, #198	; 0xc6
9000b3ce:	491b      	ldr	r1, [pc, #108]	; (9000b43c <netbuf_data+0x84>)
9000b3d0:	481b      	ldr	r0, [pc, #108]	; (9000b440 <netbuf_data+0x88>)
9000b3d2:	f00b fc35 	bl	90016c40 <iprintf>
9000b3d6:	f06f 030f 	mvn.w	r3, #15
9000b3da:	e029      	b.n	9000b430 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
9000b3dc:	68bb      	ldr	r3, [r7, #8]
9000b3de:	2b00      	cmp	r3, #0
9000b3e0:	d108      	bne.n	9000b3f4 <netbuf_data+0x3c>
9000b3e2:	4b15      	ldr	r3, [pc, #84]	; (9000b438 <netbuf_data+0x80>)
9000b3e4:	22c7      	movs	r2, #199	; 0xc7
9000b3e6:	4917      	ldr	r1, [pc, #92]	; (9000b444 <netbuf_data+0x8c>)
9000b3e8:	4815      	ldr	r0, [pc, #84]	; (9000b440 <netbuf_data+0x88>)
9000b3ea:	f00b fc29 	bl	90016c40 <iprintf>
9000b3ee:	f06f 030f 	mvn.w	r3, #15
9000b3f2:	e01d      	b.n	9000b430 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
9000b3f4:	687b      	ldr	r3, [r7, #4]
9000b3f6:	2b00      	cmp	r3, #0
9000b3f8:	d108      	bne.n	9000b40c <netbuf_data+0x54>
9000b3fa:	4b0f      	ldr	r3, [pc, #60]	; (9000b438 <netbuf_data+0x80>)
9000b3fc:	22c8      	movs	r2, #200	; 0xc8
9000b3fe:	4912      	ldr	r1, [pc, #72]	; (9000b448 <netbuf_data+0x90>)
9000b400:	480f      	ldr	r0, [pc, #60]	; (9000b440 <netbuf_data+0x88>)
9000b402:	f00b fc1d 	bl	90016c40 <iprintf>
9000b406:	f06f 030f 	mvn.w	r3, #15
9000b40a:	e011      	b.n	9000b430 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
9000b40c:	68fb      	ldr	r3, [r7, #12]
9000b40e:	685b      	ldr	r3, [r3, #4]
9000b410:	2b00      	cmp	r3, #0
9000b412:	d102      	bne.n	9000b41a <netbuf_data+0x62>
    return ERR_BUF;
9000b414:	f06f 0301 	mvn.w	r3, #1
9000b418:	e00a      	b.n	9000b430 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
9000b41a:	68fb      	ldr	r3, [r7, #12]
9000b41c:	685b      	ldr	r3, [r3, #4]
9000b41e:	685a      	ldr	r2, [r3, #4]
9000b420:	68bb      	ldr	r3, [r7, #8]
9000b422:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
9000b424:	68fb      	ldr	r3, [r7, #12]
9000b426:	685b      	ldr	r3, [r3, #4]
9000b428:	895a      	ldrh	r2, [r3, #10]
9000b42a:	687b      	ldr	r3, [r7, #4]
9000b42c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
9000b42e:	2300      	movs	r3, #0
}
9000b430:	4618      	mov	r0, r3
9000b432:	3710      	adds	r7, #16
9000b434:	46bd      	mov	sp, r7
9000b436:	bd80      	pop	{r7, pc}
9000b438:	900183a8 	.word	0x900183a8
9000b43c:	900184b0 	.word	0x900184b0
9000b440:	900183f8 	.word	0x900183f8
9000b444:	900184cc 	.word	0x900184cc
9000b448:	900184ec 	.word	0x900184ec

9000b44c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
9000b44c:	b580      	push	{r7, lr}
9000b44e:	b084      	sub	sp, #16
9000b450:	af00      	add	r7, sp, #0
9000b452:	6078      	str	r0, [r7, #4]
9000b454:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
9000b456:	f008 fa07 	bl	90013868 <sys_timeouts_sleeptime>
9000b45a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
9000b45c:	68fb      	ldr	r3, [r7, #12]
9000b45e:	f1b3 3fff 	cmp.w	r3, #4294967295
9000b462:	d10b      	bne.n	9000b47c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
9000b464:	4813      	ldr	r0, [pc, #76]	; (9000b4b4 <tcpip_timeouts_mbox_fetch+0x68>)
9000b466:	f00b f968 	bl	9001673a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
9000b46a:	2200      	movs	r2, #0
9000b46c:	6839      	ldr	r1, [r7, #0]
9000b46e:	6878      	ldr	r0, [r7, #4]
9000b470:	f00b f83e 	bl	900164f0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
9000b474:	480f      	ldr	r0, [pc, #60]	; (9000b4b4 <tcpip_timeouts_mbox_fetch+0x68>)
9000b476:	f00b f951 	bl	9001671c <sys_mutex_lock>
    return;
9000b47a:	e018      	b.n	9000b4ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
9000b47c:	68fb      	ldr	r3, [r7, #12]
9000b47e:	2b00      	cmp	r3, #0
9000b480:	d102      	bne.n	9000b488 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
9000b482:	f008 f9b7 	bl	900137f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
9000b486:	e7e6      	b.n	9000b456 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
9000b488:	480a      	ldr	r0, [pc, #40]	; (9000b4b4 <tcpip_timeouts_mbox_fetch+0x68>)
9000b48a:	f00b f956 	bl	9001673a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
9000b48e:	68fa      	ldr	r2, [r7, #12]
9000b490:	6839      	ldr	r1, [r7, #0]
9000b492:	6878      	ldr	r0, [r7, #4]
9000b494:	f00b f82c 	bl	900164f0 <sys_arch_mbox_fetch>
9000b498:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
9000b49a:	4806      	ldr	r0, [pc, #24]	; (9000b4b4 <tcpip_timeouts_mbox_fetch+0x68>)
9000b49c:	f00b f93e 	bl	9001671c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
9000b4a0:	68bb      	ldr	r3, [r7, #8]
9000b4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
9000b4a6:	d102      	bne.n	9000b4ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
9000b4a8:	f008 f9a4 	bl	900137f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
9000b4ac:	e7d3      	b.n	9000b456 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
9000b4ae:	3710      	adds	r7, #16
9000b4b0:	46bd      	mov	sp, r7
9000b4b2:	bd80      	pop	{r7, pc}
9000b4b4:	20007cb0 	.word	0x20007cb0

9000b4b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
9000b4b8:	b580      	push	{r7, lr}
9000b4ba:	b084      	sub	sp, #16
9000b4bc:	af00      	add	r7, sp, #0
9000b4be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
9000b4c0:	4810      	ldr	r0, [pc, #64]	; (9000b504 <tcpip_thread+0x4c>)
9000b4c2:	f00b f92b 	bl	9001671c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
9000b4c6:	4b10      	ldr	r3, [pc, #64]	; (9000b508 <tcpip_thread+0x50>)
9000b4c8:	681b      	ldr	r3, [r3, #0]
9000b4ca:	2b00      	cmp	r3, #0
9000b4cc:	d005      	beq.n	9000b4da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
9000b4ce:	4b0e      	ldr	r3, [pc, #56]	; (9000b508 <tcpip_thread+0x50>)
9000b4d0:	681b      	ldr	r3, [r3, #0]
9000b4d2:	4a0e      	ldr	r2, [pc, #56]	; (9000b50c <tcpip_thread+0x54>)
9000b4d4:	6812      	ldr	r2, [r2, #0]
9000b4d6:	4610      	mov	r0, r2
9000b4d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
9000b4da:	f107 030c 	add.w	r3, r7, #12
9000b4de:	4619      	mov	r1, r3
9000b4e0:	480b      	ldr	r0, [pc, #44]	; (9000b510 <tcpip_thread+0x58>)
9000b4e2:	f7ff ffb3 	bl	9000b44c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
9000b4e6:	68fb      	ldr	r3, [r7, #12]
9000b4e8:	2b00      	cmp	r3, #0
9000b4ea:	d106      	bne.n	9000b4fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
9000b4ec:	4b09      	ldr	r3, [pc, #36]	; (9000b514 <tcpip_thread+0x5c>)
9000b4ee:	2291      	movs	r2, #145	; 0x91
9000b4f0:	4909      	ldr	r1, [pc, #36]	; (9000b518 <tcpip_thread+0x60>)
9000b4f2:	480a      	ldr	r0, [pc, #40]	; (9000b51c <tcpip_thread+0x64>)
9000b4f4:	f00b fba4 	bl	90016c40 <iprintf>
      continue;
9000b4f8:	e003      	b.n	9000b502 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
9000b4fa:	68fb      	ldr	r3, [r7, #12]
9000b4fc:	4618      	mov	r0, r3
9000b4fe:	f000 f80f 	bl	9000b520 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
9000b502:	e7ea      	b.n	9000b4da <tcpip_thread+0x22>
9000b504:	20007cb0 	.word	0x20007cb0
9000b508:	20007ca4 	.word	0x20007ca4
9000b50c:	20007ca8 	.word	0x20007ca8
9000b510:	20007cac 	.word	0x20007cac
9000b514:	90018540 	.word	0x90018540
9000b518:	90018570 	.word	0x90018570
9000b51c:	90018590 	.word	0x90018590

9000b520 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
9000b520:	b580      	push	{r7, lr}
9000b522:	b082      	sub	sp, #8
9000b524:	af00      	add	r7, sp, #0
9000b526:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
9000b528:	687b      	ldr	r3, [r7, #4]
9000b52a:	781b      	ldrb	r3, [r3, #0]
9000b52c:	2b02      	cmp	r3, #2
9000b52e:	d026      	beq.n	9000b57e <tcpip_thread_handle_msg+0x5e>
9000b530:	2b02      	cmp	r3, #2
9000b532:	dc2b      	bgt.n	9000b58c <tcpip_thread_handle_msg+0x6c>
9000b534:	2b00      	cmp	r3, #0
9000b536:	d002      	beq.n	9000b53e <tcpip_thread_handle_msg+0x1e>
9000b538:	2b01      	cmp	r3, #1
9000b53a:	d015      	beq.n	9000b568 <tcpip_thread_handle_msg+0x48>
9000b53c:	e026      	b.n	9000b58c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
9000b53e:	687b      	ldr	r3, [r7, #4]
9000b540:	68db      	ldr	r3, [r3, #12]
9000b542:	687a      	ldr	r2, [r7, #4]
9000b544:	6850      	ldr	r0, [r2, #4]
9000b546:	687a      	ldr	r2, [r7, #4]
9000b548:	6892      	ldr	r2, [r2, #8]
9000b54a:	4611      	mov	r1, r2
9000b54c:	4798      	blx	r3
9000b54e:	4603      	mov	r3, r0
9000b550:	2b00      	cmp	r3, #0
9000b552:	d004      	beq.n	9000b55e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
9000b554:	687b      	ldr	r3, [r7, #4]
9000b556:	685b      	ldr	r3, [r3, #4]
9000b558:	4618      	mov	r0, r3
9000b55a:	f001 fd23 	bl	9000cfa4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
9000b55e:	6879      	ldr	r1, [r7, #4]
9000b560:	2009      	movs	r0, #9
9000b562:	f000 fe7b 	bl	9000c25c <memp_free>
      break;
9000b566:	e018      	b.n	9000b59a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
9000b568:	687b      	ldr	r3, [r7, #4]
9000b56a:	685b      	ldr	r3, [r3, #4]
9000b56c:	687a      	ldr	r2, [r7, #4]
9000b56e:	6892      	ldr	r2, [r2, #8]
9000b570:	4610      	mov	r0, r2
9000b572:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
9000b574:	6879      	ldr	r1, [r7, #4]
9000b576:	2008      	movs	r0, #8
9000b578:	f000 fe70 	bl	9000c25c <memp_free>
      break;
9000b57c:	e00d      	b.n	9000b59a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
9000b57e:	687b      	ldr	r3, [r7, #4]
9000b580:	685b      	ldr	r3, [r3, #4]
9000b582:	687a      	ldr	r2, [r7, #4]
9000b584:	6892      	ldr	r2, [r2, #8]
9000b586:	4610      	mov	r0, r2
9000b588:	4798      	blx	r3
      break;
9000b58a:	e006      	b.n	9000b59a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
9000b58c:	4b05      	ldr	r3, [pc, #20]	; (9000b5a4 <tcpip_thread_handle_msg+0x84>)
9000b58e:	22cf      	movs	r2, #207	; 0xcf
9000b590:	4905      	ldr	r1, [pc, #20]	; (9000b5a8 <tcpip_thread_handle_msg+0x88>)
9000b592:	4806      	ldr	r0, [pc, #24]	; (9000b5ac <tcpip_thread_handle_msg+0x8c>)
9000b594:	f00b fb54 	bl	90016c40 <iprintf>
      break;
9000b598:	bf00      	nop
  }
}
9000b59a:	bf00      	nop
9000b59c:	3708      	adds	r7, #8
9000b59e:	46bd      	mov	sp, r7
9000b5a0:	bd80      	pop	{r7, pc}
9000b5a2:	bf00      	nop
9000b5a4:	90018540 	.word	0x90018540
9000b5a8:	90018570 	.word	0x90018570
9000b5ac:	90018590 	.word	0x90018590

9000b5b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
9000b5b0:	b580      	push	{r7, lr}
9000b5b2:	b086      	sub	sp, #24
9000b5b4:	af00      	add	r7, sp, #0
9000b5b6:	60f8      	str	r0, [r7, #12]
9000b5b8:	60b9      	str	r1, [r7, #8]
9000b5ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
9000b5bc:	481a      	ldr	r0, [pc, #104]	; (9000b628 <tcpip_inpkt+0x78>)
9000b5be:	f00a ffdf 	bl	90016580 <sys_mbox_valid>
9000b5c2:	4603      	mov	r3, r0
9000b5c4:	2b00      	cmp	r3, #0
9000b5c6:	d105      	bne.n	9000b5d4 <tcpip_inpkt+0x24>
9000b5c8:	4b18      	ldr	r3, [pc, #96]	; (9000b62c <tcpip_inpkt+0x7c>)
9000b5ca:	22fc      	movs	r2, #252	; 0xfc
9000b5cc:	4918      	ldr	r1, [pc, #96]	; (9000b630 <tcpip_inpkt+0x80>)
9000b5ce:	4819      	ldr	r0, [pc, #100]	; (9000b634 <tcpip_inpkt+0x84>)
9000b5d0:	f00b fb36 	bl	90016c40 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
9000b5d4:	2009      	movs	r0, #9
9000b5d6:	f000 fdef 	bl	9000c1b8 <memp_malloc>
9000b5da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
9000b5dc:	697b      	ldr	r3, [r7, #20]
9000b5de:	2b00      	cmp	r3, #0
9000b5e0:	d102      	bne.n	9000b5e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
9000b5e2:	f04f 33ff 	mov.w	r3, #4294967295
9000b5e6:	e01a      	b.n	9000b61e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
9000b5e8:	697b      	ldr	r3, [r7, #20]
9000b5ea:	2200      	movs	r2, #0
9000b5ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
9000b5ee:	697b      	ldr	r3, [r7, #20]
9000b5f0:	68fa      	ldr	r2, [r7, #12]
9000b5f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
9000b5f4:	697b      	ldr	r3, [r7, #20]
9000b5f6:	68ba      	ldr	r2, [r7, #8]
9000b5f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
9000b5fa:	697b      	ldr	r3, [r7, #20]
9000b5fc:	687a      	ldr	r2, [r7, #4]
9000b5fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
9000b600:	6979      	ldr	r1, [r7, #20]
9000b602:	4809      	ldr	r0, [pc, #36]	; (9000b628 <tcpip_inpkt+0x78>)
9000b604:	f00a ff5a 	bl	900164bc <sys_mbox_trypost>
9000b608:	4603      	mov	r3, r0
9000b60a:	2b00      	cmp	r3, #0
9000b60c:	d006      	beq.n	9000b61c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
9000b60e:	6979      	ldr	r1, [r7, #20]
9000b610:	2009      	movs	r0, #9
9000b612:	f000 fe23 	bl	9000c25c <memp_free>
    return ERR_MEM;
9000b616:	f04f 33ff 	mov.w	r3, #4294967295
9000b61a:	e000      	b.n	9000b61e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
9000b61c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
9000b61e:	4618      	mov	r0, r3
9000b620:	3718      	adds	r7, #24
9000b622:	46bd      	mov	sp, r7
9000b624:	bd80      	pop	{r7, pc}
9000b626:	bf00      	nop
9000b628:	20007cac 	.word	0x20007cac
9000b62c:	90018540 	.word	0x90018540
9000b630:	900185b8 	.word	0x900185b8
9000b634:	90018590 	.word	0x90018590

9000b638 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
9000b638:	b580      	push	{r7, lr}
9000b63a:	b082      	sub	sp, #8
9000b63c:	af00      	add	r7, sp, #0
9000b63e:	6078      	str	r0, [r7, #4]
9000b640:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
9000b642:	683b      	ldr	r3, [r7, #0]
9000b644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000b648:	f003 0318 	and.w	r3, r3, #24
9000b64c:	2b00      	cmp	r3, #0
9000b64e:	d006      	beq.n	9000b65e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
9000b650:	4a08      	ldr	r2, [pc, #32]	; (9000b674 <tcpip_input+0x3c>)
9000b652:	6839      	ldr	r1, [r7, #0]
9000b654:	6878      	ldr	r0, [r7, #4]
9000b656:	f7ff ffab 	bl	9000b5b0 <tcpip_inpkt>
9000b65a:	4603      	mov	r3, r0
9000b65c:	e005      	b.n	9000b66a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
9000b65e:	4a06      	ldr	r2, [pc, #24]	; (9000b678 <tcpip_input+0x40>)
9000b660:	6839      	ldr	r1, [r7, #0]
9000b662:	6878      	ldr	r0, [r7, #4]
9000b664:	f7ff ffa4 	bl	9000b5b0 <tcpip_inpkt>
9000b668:	4603      	mov	r3, r0
}
9000b66a:	4618      	mov	r0, r3
9000b66c:	3708      	adds	r7, #8
9000b66e:	46bd      	mov	sp, r7
9000b670:	bd80      	pop	{r7, pc}
9000b672:	bf00      	nop
9000b674:	900162b9 	.word	0x900162b9
9000b678:	900151c1 	.word	0x900151c1

9000b67c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
9000b67c:	b580      	push	{r7, lr}
9000b67e:	b084      	sub	sp, #16
9000b680:	af00      	add	r7, sp, #0
9000b682:	6078      	str	r0, [r7, #4]
9000b684:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
9000b686:	4819      	ldr	r0, [pc, #100]	; (9000b6ec <tcpip_try_callback+0x70>)
9000b688:	f00a ff7a 	bl	90016580 <sys_mbox_valid>
9000b68c:	4603      	mov	r3, r0
9000b68e:	2b00      	cmp	r3, #0
9000b690:	d106      	bne.n	9000b6a0 <tcpip_try_callback+0x24>
9000b692:	4b17      	ldr	r3, [pc, #92]	; (9000b6f0 <tcpip_try_callback+0x74>)
9000b694:	f240 125d 	movw	r2, #349	; 0x15d
9000b698:	4916      	ldr	r1, [pc, #88]	; (9000b6f4 <tcpip_try_callback+0x78>)
9000b69a:	4817      	ldr	r0, [pc, #92]	; (9000b6f8 <tcpip_try_callback+0x7c>)
9000b69c:	f00b fad0 	bl	90016c40 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
9000b6a0:	2008      	movs	r0, #8
9000b6a2:	f000 fd89 	bl	9000c1b8 <memp_malloc>
9000b6a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
9000b6a8:	68fb      	ldr	r3, [r7, #12]
9000b6aa:	2b00      	cmp	r3, #0
9000b6ac:	d102      	bne.n	9000b6b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
9000b6ae:	f04f 33ff 	mov.w	r3, #4294967295
9000b6b2:	e017      	b.n	9000b6e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
9000b6b4:	68fb      	ldr	r3, [r7, #12]
9000b6b6:	2201      	movs	r2, #1
9000b6b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
9000b6ba:	68fb      	ldr	r3, [r7, #12]
9000b6bc:	687a      	ldr	r2, [r7, #4]
9000b6be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
9000b6c0:	68fb      	ldr	r3, [r7, #12]
9000b6c2:	683a      	ldr	r2, [r7, #0]
9000b6c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
9000b6c6:	68f9      	ldr	r1, [r7, #12]
9000b6c8:	4808      	ldr	r0, [pc, #32]	; (9000b6ec <tcpip_try_callback+0x70>)
9000b6ca:	f00a fef7 	bl	900164bc <sys_mbox_trypost>
9000b6ce:	4603      	mov	r3, r0
9000b6d0:	2b00      	cmp	r3, #0
9000b6d2:	d006      	beq.n	9000b6e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
9000b6d4:	68f9      	ldr	r1, [r7, #12]
9000b6d6:	2008      	movs	r0, #8
9000b6d8:	f000 fdc0 	bl	9000c25c <memp_free>
    return ERR_MEM;
9000b6dc:	f04f 33ff 	mov.w	r3, #4294967295
9000b6e0:	e000      	b.n	9000b6e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
9000b6e2:	2300      	movs	r3, #0
}
9000b6e4:	4618      	mov	r0, r3
9000b6e6:	3710      	adds	r7, #16
9000b6e8:	46bd      	mov	sp, r7
9000b6ea:	bd80      	pop	{r7, pc}
9000b6ec:	20007cac 	.word	0x20007cac
9000b6f0:	90018540 	.word	0x90018540
9000b6f4:	900185b8 	.word	0x900185b8
9000b6f8:	90018590 	.word	0x90018590

9000b6fc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
9000b6fc:	b580      	push	{r7, lr}
9000b6fe:	b084      	sub	sp, #16
9000b700:	af00      	add	r7, sp, #0
9000b702:	60f8      	str	r0, [r7, #12]
9000b704:	60b9      	str	r1, [r7, #8]
9000b706:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
9000b708:	4806      	ldr	r0, [pc, #24]	; (9000b724 <tcpip_send_msg_wait_sem+0x28>)
9000b70a:	f00b f807 	bl	9001671c <sys_mutex_lock>
  fn(apimsg);
9000b70e:	68fb      	ldr	r3, [r7, #12]
9000b710:	68b8      	ldr	r0, [r7, #8]
9000b712:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
9000b714:	4803      	ldr	r0, [pc, #12]	; (9000b724 <tcpip_send_msg_wait_sem+0x28>)
9000b716:	f00b f810 	bl	9001673a <sys_mutex_unlock>
  return ERR_OK;
9000b71a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
9000b71c:	4618      	mov	r0, r3
9000b71e:	3710      	adds	r7, #16
9000b720:	46bd      	mov	sp, r7
9000b722:	bd80      	pop	{r7, pc}
9000b724:	20007cb0 	.word	0x20007cb0

9000b728 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
9000b728:	b580      	push	{r7, lr}
9000b72a:	b084      	sub	sp, #16
9000b72c:	af02      	add	r7, sp, #8
9000b72e:	6078      	str	r0, [r7, #4]
9000b730:	6039      	str	r1, [r7, #0]
  lwip_init();
9000b732:	f000 f8b9 	bl	9000b8a8 <lwip_init>

  tcpip_init_done = initfunc;
9000b736:	4a17      	ldr	r2, [pc, #92]	; (9000b794 <tcpip_init+0x6c>)
9000b738:	687b      	ldr	r3, [r7, #4]
9000b73a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
9000b73c:	4a16      	ldr	r2, [pc, #88]	; (9000b798 <tcpip_init+0x70>)
9000b73e:	683b      	ldr	r3, [r7, #0]
9000b740:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
9000b742:	2106      	movs	r1, #6
9000b744:	4815      	ldr	r0, [pc, #84]	; (9000b79c <tcpip_init+0x74>)
9000b746:	f00a fe8d 	bl	90016464 <sys_mbox_new>
9000b74a:	4603      	mov	r3, r0
9000b74c:	2b00      	cmp	r3, #0
9000b74e:	d006      	beq.n	9000b75e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
9000b750:	4b13      	ldr	r3, [pc, #76]	; (9000b7a0 <tcpip_init+0x78>)
9000b752:	f240 2261 	movw	r2, #609	; 0x261
9000b756:	4913      	ldr	r1, [pc, #76]	; (9000b7a4 <tcpip_init+0x7c>)
9000b758:	4813      	ldr	r0, [pc, #76]	; (9000b7a8 <tcpip_init+0x80>)
9000b75a:	f00b fa71 	bl	90016c40 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
9000b75e:	4813      	ldr	r0, [pc, #76]	; (9000b7ac <tcpip_init+0x84>)
9000b760:	f00a ffc6 	bl	900166f0 <sys_mutex_new>
9000b764:	4603      	mov	r3, r0
9000b766:	2b00      	cmp	r3, #0
9000b768:	d006      	beq.n	9000b778 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
9000b76a:	4b0d      	ldr	r3, [pc, #52]	; (9000b7a0 <tcpip_init+0x78>)
9000b76c:	f240 2265 	movw	r2, #613	; 0x265
9000b770:	490f      	ldr	r1, [pc, #60]	; (9000b7b0 <tcpip_init+0x88>)
9000b772:	480d      	ldr	r0, [pc, #52]	; (9000b7a8 <tcpip_init+0x80>)
9000b774:	f00b fa64 	bl	90016c40 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
9000b778:	2318      	movs	r3, #24
9000b77a:	9300      	str	r3, [sp, #0]
9000b77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000b780:	2200      	movs	r2, #0
9000b782:	490c      	ldr	r1, [pc, #48]	; (9000b7b4 <tcpip_init+0x8c>)
9000b784:	480c      	ldr	r0, [pc, #48]	; (9000b7b8 <tcpip_init+0x90>)
9000b786:	f00a ffe5 	bl	90016754 <sys_thread_new>
}
9000b78a:	bf00      	nop
9000b78c:	3708      	adds	r7, #8
9000b78e:	46bd      	mov	sp, r7
9000b790:	bd80      	pop	{r7, pc}
9000b792:	bf00      	nop
9000b794:	20007ca4 	.word	0x20007ca4
9000b798:	20007ca8 	.word	0x20007ca8
9000b79c:	20007cac 	.word	0x20007cac
9000b7a0:	90018540 	.word	0x90018540
9000b7a4:	900185c8 	.word	0x900185c8
9000b7a8:	90018590 	.word	0x90018590
9000b7ac:	20007cb0 	.word	0x20007cb0
9000b7b0:	900185ec 	.word	0x900185ec
9000b7b4:	9000b4b9 	.word	0x9000b4b9
9000b7b8:	90018610 	.word	0x90018610

9000b7bc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
9000b7bc:	b580      	push	{r7, lr}
9000b7be:	b084      	sub	sp, #16
9000b7c0:	af00      	add	r7, sp, #0
9000b7c2:	6078      	str	r0, [r7, #4]
9000b7c4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
9000b7c6:	687b      	ldr	r3, [r7, #4]
9000b7c8:	2b00      	cmp	r3, #0
9000b7ca:	d002      	beq.n	9000b7d2 <fs_open+0x16>
9000b7cc:	683b      	ldr	r3, [r7, #0]
9000b7ce:	2b00      	cmp	r3, #0
9000b7d0:	d102      	bne.n	9000b7d8 <fs_open+0x1c>
    return ERR_ARG;
9000b7d2:	f06f 030f 	mvn.w	r3, #15
9000b7d6:	e028      	b.n	9000b82a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
9000b7d8:	4b16      	ldr	r3, [pc, #88]	; (9000b834 <fs_open+0x78>)
9000b7da:	60fb      	str	r3, [r7, #12]
9000b7dc:	e020      	b.n	9000b820 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
9000b7de:	68fb      	ldr	r3, [r7, #12]
9000b7e0:	685b      	ldr	r3, [r3, #4]
9000b7e2:	4619      	mov	r1, r3
9000b7e4:	6838      	ldr	r0, [r7, #0]
9000b7e6:	f7f4 fd2b 	bl	90000240 <strcmp>
9000b7ea:	4603      	mov	r3, r0
9000b7ec:	2b00      	cmp	r3, #0
9000b7ee:	d114      	bne.n	9000b81a <fs_open+0x5e>
      file->data = (const char *)f->data;
9000b7f0:	68fb      	ldr	r3, [r7, #12]
9000b7f2:	689a      	ldr	r2, [r3, #8]
9000b7f4:	687b      	ldr	r3, [r7, #4]
9000b7f6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
9000b7f8:	68fb      	ldr	r3, [r7, #12]
9000b7fa:	68da      	ldr	r2, [r3, #12]
9000b7fc:	687b      	ldr	r3, [r7, #4]
9000b7fe:	605a      	str	r2, [r3, #4]
      file->index = f->len;
9000b800:	68fb      	ldr	r3, [r7, #12]
9000b802:	68da      	ldr	r2, [r3, #12]
9000b804:	687b      	ldr	r3, [r7, #4]
9000b806:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
9000b808:	687b      	ldr	r3, [r7, #4]
9000b80a:	2200      	movs	r2, #0
9000b80c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
9000b80e:	68fb      	ldr	r3, [r7, #12]
9000b810:	7c1a      	ldrb	r2, [r3, #16]
9000b812:	687b      	ldr	r3, [r7, #4]
9000b814:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
9000b816:	2300      	movs	r3, #0
9000b818:	e007      	b.n	9000b82a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
9000b81a:	68fb      	ldr	r3, [r7, #12]
9000b81c:	681b      	ldr	r3, [r3, #0]
9000b81e:	60fb      	str	r3, [r7, #12]
9000b820:	68fb      	ldr	r3, [r7, #12]
9000b822:	2b00      	cmp	r3, #0
9000b824:	d1db      	bne.n	9000b7de <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
9000b826:	f06f 0305 	mvn.w	r3, #5
}
9000b82a:	4618      	mov	r0, r3
9000b82c:	3710      	adds	r7, #16
9000b82e:	46bd      	mov	sp, r7
9000b830:	bd80      	pop	{r7, pc}
9000b832:	bf00      	nop
9000b834:	9001bcb0 	.word	0x9001bcb0

9000b838 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
9000b838:	b480      	push	{r7}
9000b83a:	b083      	sub	sp, #12
9000b83c:	af00      	add	r7, sp, #0
9000b83e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
9000b840:	bf00      	nop
9000b842:	370c      	adds	r7, #12
9000b844:	46bd      	mov	sp, r7
9000b846:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b84a:	4770      	bx	lr

9000b84c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
9000b84c:	b480      	push	{r7}
9000b84e:	b083      	sub	sp, #12
9000b850:	af00      	add	r7, sp, #0
9000b852:	4603      	mov	r3, r0
9000b854:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
9000b856:	88fb      	ldrh	r3, [r7, #6]
9000b858:	021b      	lsls	r3, r3, #8
9000b85a:	b21a      	sxth	r2, r3
9000b85c:	88fb      	ldrh	r3, [r7, #6]
9000b85e:	0a1b      	lsrs	r3, r3, #8
9000b860:	b29b      	uxth	r3, r3
9000b862:	b21b      	sxth	r3, r3
9000b864:	4313      	orrs	r3, r2
9000b866:	b21b      	sxth	r3, r3
9000b868:	b29b      	uxth	r3, r3
}
9000b86a:	4618      	mov	r0, r3
9000b86c:	370c      	adds	r7, #12
9000b86e:	46bd      	mov	sp, r7
9000b870:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b874:	4770      	bx	lr

9000b876 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
9000b876:	b480      	push	{r7}
9000b878:	b083      	sub	sp, #12
9000b87a:	af00      	add	r7, sp, #0
9000b87c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
9000b87e:	687b      	ldr	r3, [r7, #4]
9000b880:	061a      	lsls	r2, r3, #24
9000b882:	687b      	ldr	r3, [r7, #4]
9000b884:	021b      	lsls	r3, r3, #8
9000b886:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
9000b88a:	431a      	orrs	r2, r3
9000b88c:	687b      	ldr	r3, [r7, #4]
9000b88e:	0a1b      	lsrs	r3, r3, #8
9000b890:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9000b894:	431a      	orrs	r2, r3
9000b896:	687b      	ldr	r3, [r7, #4]
9000b898:	0e1b      	lsrs	r3, r3, #24
9000b89a:	4313      	orrs	r3, r2
}
9000b89c:	4618      	mov	r0, r3
9000b89e:	370c      	adds	r7, #12
9000b8a0:	46bd      	mov	sp, r7
9000b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b8a6:	4770      	bx	lr

9000b8a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
9000b8a8:	b580      	push	{r7, lr}
9000b8aa:	b082      	sub	sp, #8
9000b8ac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
9000b8ae:	2300      	movs	r3, #0
9000b8b0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
9000b8b2:	f00a ff11 	bl	900166d8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
9000b8b6:	f000 f8d5 	bl	9000ba64 <mem_init>
  memp_init();
9000b8ba:	f000 fc31 	bl	9000c120 <memp_init>
  pbuf_init();
  netif_init();
9000b8be:	f000 fcf7 	bl	9000c2b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
9000b8c2:	f008 f809 	bl	900138d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
9000b8c6:	f001 fe07 	bl	9000d4d8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
9000b8ca:	f007 ff4b 	bl	90013764 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
9000b8ce:	bf00      	nop
9000b8d0:	3708      	adds	r7, #8
9000b8d2:	46bd      	mov	sp, r7
9000b8d4:	bd80      	pop	{r7, pc}
	...

9000b8d8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
9000b8d8:	b480      	push	{r7}
9000b8da:	b083      	sub	sp, #12
9000b8dc:	af00      	add	r7, sp, #0
9000b8de:	4603      	mov	r3, r0
9000b8e0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
9000b8e2:	4b05      	ldr	r3, [pc, #20]	; (9000b8f8 <ptr_to_mem+0x20>)
9000b8e4:	681a      	ldr	r2, [r3, #0]
9000b8e6:	88fb      	ldrh	r3, [r7, #6]
9000b8e8:	4413      	add	r3, r2
}
9000b8ea:	4618      	mov	r0, r3
9000b8ec:	370c      	adds	r7, #12
9000b8ee:	46bd      	mov	sp, r7
9000b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b8f4:	4770      	bx	lr
9000b8f6:	bf00      	nop
9000b8f8:	2000a4e0 	.word	0x2000a4e0

9000b8fc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
9000b8fc:	b480      	push	{r7}
9000b8fe:	b083      	sub	sp, #12
9000b900:	af00      	add	r7, sp, #0
9000b902:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
9000b904:	4b05      	ldr	r3, [pc, #20]	; (9000b91c <mem_to_ptr+0x20>)
9000b906:	681b      	ldr	r3, [r3, #0]
9000b908:	687a      	ldr	r2, [r7, #4]
9000b90a:	1ad3      	subs	r3, r2, r3
9000b90c:	b29b      	uxth	r3, r3
}
9000b90e:	4618      	mov	r0, r3
9000b910:	370c      	adds	r7, #12
9000b912:	46bd      	mov	sp, r7
9000b914:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b918:	4770      	bx	lr
9000b91a:	bf00      	nop
9000b91c:	2000a4e0 	.word	0x2000a4e0

9000b920 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
9000b920:	b590      	push	{r4, r7, lr}
9000b922:	b085      	sub	sp, #20
9000b924:	af00      	add	r7, sp, #0
9000b926:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
9000b928:	4b45      	ldr	r3, [pc, #276]	; (9000ba40 <plug_holes+0x120>)
9000b92a:	681b      	ldr	r3, [r3, #0]
9000b92c:	687a      	ldr	r2, [r7, #4]
9000b92e:	429a      	cmp	r2, r3
9000b930:	d206      	bcs.n	9000b940 <plug_holes+0x20>
9000b932:	4b44      	ldr	r3, [pc, #272]	; (9000ba44 <plug_holes+0x124>)
9000b934:	f240 12df 	movw	r2, #479	; 0x1df
9000b938:	4943      	ldr	r1, [pc, #268]	; (9000ba48 <plug_holes+0x128>)
9000b93a:	4844      	ldr	r0, [pc, #272]	; (9000ba4c <plug_holes+0x12c>)
9000b93c:	f00b f980 	bl	90016c40 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
9000b940:	4b43      	ldr	r3, [pc, #268]	; (9000ba50 <plug_holes+0x130>)
9000b942:	681b      	ldr	r3, [r3, #0]
9000b944:	687a      	ldr	r2, [r7, #4]
9000b946:	429a      	cmp	r2, r3
9000b948:	d306      	bcc.n	9000b958 <plug_holes+0x38>
9000b94a:	4b3e      	ldr	r3, [pc, #248]	; (9000ba44 <plug_holes+0x124>)
9000b94c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
9000b950:	4940      	ldr	r1, [pc, #256]	; (9000ba54 <plug_holes+0x134>)
9000b952:	483e      	ldr	r0, [pc, #248]	; (9000ba4c <plug_holes+0x12c>)
9000b954:	f00b f974 	bl	90016c40 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
9000b958:	687b      	ldr	r3, [r7, #4]
9000b95a:	791b      	ldrb	r3, [r3, #4]
9000b95c:	2b00      	cmp	r3, #0
9000b95e:	d006      	beq.n	9000b96e <plug_holes+0x4e>
9000b960:	4b38      	ldr	r3, [pc, #224]	; (9000ba44 <plug_holes+0x124>)
9000b962:	f240 12e1 	movw	r2, #481	; 0x1e1
9000b966:	493c      	ldr	r1, [pc, #240]	; (9000ba58 <plug_holes+0x138>)
9000b968:	4838      	ldr	r0, [pc, #224]	; (9000ba4c <plug_holes+0x12c>)
9000b96a:	f00b f969 	bl	90016c40 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
9000b96e:	687b      	ldr	r3, [r7, #4]
9000b970:	881b      	ldrh	r3, [r3, #0]
9000b972:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b976:	d906      	bls.n	9000b986 <plug_holes+0x66>
9000b978:	4b32      	ldr	r3, [pc, #200]	; (9000ba44 <plug_holes+0x124>)
9000b97a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
9000b97e:	4937      	ldr	r1, [pc, #220]	; (9000ba5c <plug_holes+0x13c>)
9000b980:	4832      	ldr	r0, [pc, #200]	; (9000ba4c <plug_holes+0x12c>)
9000b982:	f00b f95d 	bl	90016c40 <iprintf>

  nmem = ptr_to_mem(mem->next);
9000b986:	687b      	ldr	r3, [r7, #4]
9000b988:	881b      	ldrh	r3, [r3, #0]
9000b98a:	4618      	mov	r0, r3
9000b98c:	f7ff ffa4 	bl	9000b8d8 <ptr_to_mem>
9000b990:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
9000b992:	687a      	ldr	r2, [r7, #4]
9000b994:	68fb      	ldr	r3, [r7, #12]
9000b996:	429a      	cmp	r2, r3
9000b998:	d024      	beq.n	9000b9e4 <plug_holes+0xc4>
9000b99a:	68fb      	ldr	r3, [r7, #12]
9000b99c:	791b      	ldrb	r3, [r3, #4]
9000b99e:	2b00      	cmp	r3, #0
9000b9a0:	d120      	bne.n	9000b9e4 <plug_holes+0xc4>
9000b9a2:	4b2b      	ldr	r3, [pc, #172]	; (9000ba50 <plug_holes+0x130>)
9000b9a4:	681b      	ldr	r3, [r3, #0]
9000b9a6:	68fa      	ldr	r2, [r7, #12]
9000b9a8:	429a      	cmp	r2, r3
9000b9aa:	d01b      	beq.n	9000b9e4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
9000b9ac:	4b2c      	ldr	r3, [pc, #176]	; (9000ba60 <plug_holes+0x140>)
9000b9ae:	681b      	ldr	r3, [r3, #0]
9000b9b0:	68fa      	ldr	r2, [r7, #12]
9000b9b2:	429a      	cmp	r2, r3
9000b9b4:	d102      	bne.n	9000b9bc <plug_holes+0x9c>
      lfree = mem;
9000b9b6:	4a2a      	ldr	r2, [pc, #168]	; (9000ba60 <plug_holes+0x140>)
9000b9b8:	687b      	ldr	r3, [r7, #4]
9000b9ba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
9000b9bc:	68fb      	ldr	r3, [r7, #12]
9000b9be:	881a      	ldrh	r2, [r3, #0]
9000b9c0:	687b      	ldr	r3, [r7, #4]
9000b9c2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
9000b9c4:	68fb      	ldr	r3, [r7, #12]
9000b9c6:	881b      	ldrh	r3, [r3, #0]
9000b9c8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b9cc:	d00a      	beq.n	9000b9e4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
9000b9ce:	68fb      	ldr	r3, [r7, #12]
9000b9d0:	881b      	ldrh	r3, [r3, #0]
9000b9d2:	4618      	mov	r0, r3
9000b9d4:	f7ff ff80 	bl	9000b8d8 <ptr_to_mem>
9000b9d8:	4604      	mov	r4, r0
9000b9da:	6878      	ldr	r0, [r7, #4]
9000b9dc:	f7ff ff8e 	bl	9000b8fc <mem_to_ptr>
9000b9e0:	4603      	mov	r3, r0
9000b9e2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
9000b9e4:	687b      	ldr	r3, [r7, #4]
9000b9e6:	885b      	ldrh	r3, [r3, #2]
9000b9e8:	4618      	mov	r0, r3
9000b9ea:	f7ff ff75 	bl	9000b8d8 <ptr_to_mem>
9000b9ee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
9000b9f0:	68ba      	ldr	r2, [r7, #8]
9000b9f2:	687b      	ldr	r3, [r7, #4]
9000b9f4:	429a      	cmp	r2, r3
9000b9f6:	d01f      	beq.n	9000ba38 <plug_holes+0x118>
9000b9f8:	68bb      	ldr	r3, [r7, #8]
9000b9fa:	791b      	ldrb	r3, [r3, #4]
9000b9fc:	2b00      	cmp	r3, #0
9000b9fe:	d11b      	bne.n	9000ba38 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
9000ba00:	4b17      	ldr	r3, [pc, #92]	; (9000ba60 <plug_holes+0x140>)
9000ba02:	681b      	ldr	r3, [r3, #0]
9000ba04:	687a      	ldr	r2, [r7, #4]
9000ba06:	429a      	cmp	r2, r3
9000ba08:	d102      	bne.n	9000ba10 <plug_holes+0xf0>
      lfree = pmem;
9000ba0a:	4a15      	ldr	r2, [pc, #84]	; (9000ba60 <plug_holes+0x140>)
9000ba0c:	68bb      	ldr	r3, [r7, #8]
9000ba0e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
9000ba10:	687b      	ldr	r3, [r7, #4]
9000ba12:	881a      	ldrh	r2, [r3, #0]
9000ba14:	68bb      	ldr	r3, [r7, #8]
9000ba16:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
9000ba18:	687b      	ldr	r3, [r7, #4]
9000ba1a:	881b      	ldrh	r3, [r3, #0]
9000ba1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000ba20:	d00a      	beq.n	9000ba38 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
9000ba22:	687b      	ldr	r3, [r7, #4]
9000ba24:	881b      	ldrh	r3, [r3, #0]
9000ba26:	4618      	mov	r0, r3
9000ba28:	f7ff ff56 	bl	9000b8d8 <ptr_to_mem>
9000ba2c:	4604      	mov	r4, r0
9000ba2e:	68b8      	ldr	r0, [r7, #8]
9000ba30:	f7ff ff64 	bl	9000b8fc <mem_to_ptr>
9000ba34:	4603      	mov	r3, r0
9000ba36:	8063      	strh	r3, [r4, #2]
    }
  }
}
9000ba38:	bf00      	nop
9000ba3a:	3714      	adds	r7, #20
9000ba3c:	46bd      	mov	sp, r7
9000ba3e:	bd90      	pop	{r4, r7, pc}
9000ba40:	2000a4e0 	.word	0x2000a4e0
9000ba44:	90018620 	.word	0x90018620
9000ba48:	90018650 	.word	0x90018650
9000ba4c:	90018668 	.word	0x90018668
9000ba50:	2000a4e4 	.word	0x2000a4e4
9000ba54:	90018690 	.word	0x90018690
9000ba58:	900186ac 	.word	0x900186ac
9000ba5c:	900186c8 	.word	0x900186c8
9000ba60:	2000a4ec 	.word	0x2000a4ec

9000ba64 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
9000ba64:	b580      	push	{r7, lr}
9000ba66:	b082      	sub	sp, #8
9000ba68:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
9000ba6a:	4b1f      	ldr	r3, [pc, #124]	; (9000bae8 <mem_init+0x84>)
9000ba6c:	3303      	adds	r3, #3
9000ba6e:	f023 0303 	bic.w	r3, r3, #3
9000ba72:	461a      	mov	r2, r3
9000ba74:	4b1d      	ldr	r3, [pc, #116]	; (9000baec <mem_init+0x88>)
9000ba76:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
9000ba78:	4b1c      	ldr	r3, [pc, #112]	; (9000baec <mem_init+0x88>)
9000ba7a:	681b      	ldr	r3, [r3, #0]
9000ba7c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
9000ba7e:	687b      	ldr	r3, [r7, #4]
9000ba80:	f44f 5220 	mov.w	r2, #10240	; 0x2800
9000ba84:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
9000ba86:	687b      	ldr	r3, [r7, #4]
9000ba88:	2200      	movs	r2, #0
9000ba8a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
9000ba8c:	687b      	ldr	r3, [r7, #4]
9000ba8e:	2200      	movs	r2, #0
9000ba90:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
9000ba92:	f44f 5020 	mov.w	r0, #10240	; 0x2800
9000ba96:	f7ff ff1f 	bl	9000b8d8 <ptr_to_mem>
9000ba9a:	4603      	mov	r3, r0
9000ba9c:	4a14      	ldr	r2, [pc, #80]	; (9000baf0 <mem_init+0x8c>)
9000ba9e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
9000baa0:	4b13      	ldr	r3, [pc, #76]	; (9000baf0 <mem_init+0x8c>)
9000baa2:	681b      	ldr	r3, [r3, #0]
9000baa4:	2201      	movs	r2, #1
9000baa6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
9000baa8:	4b11      	ldr	r3, [pc, #68]	; (9000baf0 <mem_init+0x8c>)
9000baaa:	681b      	ldr	r3, [r3, #0]
9000baac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
9000bab0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
9000bab2:	4b0f      	ldr	r3, [pc, #60]	; (9000baf0 <mem_init+0x8c>)
9000bab4:	681b      	ldr	r3, [r3, #0]
9000bab6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
9000baba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
9000babc:	4b0b      	ldr	r3, [pc, #44]	; (9000baec <mem_init+0x88>)
9000babe:	681b      	ldr	r3, [r3, #0]
9000bac0:	4a0c      	ldr	r2, [pc, #48]	; (9000baf4 <mem_init+0x90>)
9000bac2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
9000bac4:	480c      	ldr	r0, [pc, #48]	; (9000baf8 <mem_init+0x94>)
9000bac6:	f00a fe13 	bl	900166f0 <sys_mutex_new>
9000baca:	4603      	mov	r3, r0
9000bacc:	2b00      	cmp	r3, #0
9000bace:	d006      	beq.n	9000bade <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
9000bad0:	4b0a      	ldr	r3, [pc, #40]	; (9000bafc <mem_init+0x98>)
9000bad2:	f240 221f 	movw	r2, #543	; 0x21f
9000bad6:	490a      	ldr	r1, [pc, #40]	; (9000bb00 <mem_init+0x9c>)
9000bad8:	480a      	ldr	r0, [pc, #40]	; (9000bb04 <mem_init+0xa0>)
9000bada:	f00b f8b1 	bl	90016c40 <iprintf>
  }
}
9000bade:	bf00      	nop
9000bae0:	3708      	adds	r7, #8
9000bae2:	46bd      	mov	sp, r7
9000bae4:	bd80      	pop	{r7, pc}
9000bae6:	bf00      	nop
9000bae8:	20007ccc 	.word	0x20007ccc
9000baec:	2000a4e0 	.word	0x2000a4e0
9000baf0:	2000a4e4 	.word	0x2000a4e4
9000baf4:	2000a4ec 	.word	0x2000a4ec
9000baf8:	2000a4e8 	.word	0x2000a4e8
9000bafc:	90018620 	.word	0x90018620
9000bb00:	900186f4 	.word	0x900186f4
9000bb04:	90018668 	.word	0x90018668

9000bb08 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
9000bb08:	b580      	push	{r7, lr}
9000bb0a:	b086      	sub	sp, #24
9000bb0c:	af00      	add	r7, sp, #0
9000bb0e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
9000bb10:	6878      	ldr	r0, [r7, #4]
9000bb12:	f7ff fef3 	bl	9000b8fc <mem_to_ptr>
9000bb16:	4603      	mov	r3, r0
9000bb18:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
9000bb1a:	687b      	ldr	r3, [r7, #4]
9000bb1c:	881b      	ldrh	r3, [r3, #0]
9000bb1e:	4618      	mov	r0, r3
9000bb20:	f7ff feda 	bl	9000b8d8 <ptr_to_mem>
9000bb24:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
9000bb26:	687b      	ldr	r3, [r7, #4]
9000bb28:	885b      	ldrh	r3, [r3, #2]
9000bb2a:	4618      	mov	r0, r3
9000bb2c:	f7ff fed4 	bl	9000b8d8 <ptr_to_mem>
9000bb30:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
9000bb32:	687b      	ldr	r3, [r7, #4]
9000bb34:	881b      	ldrh	r3, [r3, #0]
9000bb36:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000bb3a:	d818      	bhi.n	9000bb6e <mem_link_valid+0x66>
9000bb3c:	687b      	ldr	r3, [r7, #4]
9000bb3e:	885b      	ldrh	r3, [r3, #2]
9000bb40:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000bb44:	d813      	bhi.n	9000bb6e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
9000bb46:	687b      	ldr	r3, [r7, #4]
9000bb48:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
9000bb4a:	8afa      	ldrh	r2, [r7, #22]
9000bb4c:	429a      	cmp	r2, r3
9000bb4e:	d004      	beq.n	9000bb5a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
9000bb50:	68fb      	ldr	r3, [r7, #12]
9000bb52:	881b      	ldrh	r3, [r3, #0]
9000bb54:	8afa      	ldrh	r2, [r7, #22]
9000bb56:	429a      	cmp	r2, r3
9000bb58:	d109      	bne.n	9000bb6e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
9000bb5a:	4b08      	ldr	r3, [pc, #32]	; (9000bb7c <mem_link_valid+0x74>)
9000bb5c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
9000bb5e:	693a      	ldr	r2, [r7, #16]
9000bb60:	429a      	cmp	r2, r3
9000bb62:	d006      	beq.n	9000bb72 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
9000bb64:	693b      	ldr	r3, [r7, #16]
9000bb66:	885b      	ldrh	r3, [r3, #2]
9000bb68:	8afa      	ldrh	r2, [r7, #22]
9000bb6a:	429a      	cmp	r2, r3
9000bb6c:	d001      	beq.n	9000bb72 <mem_link_valid+0x6a>
    return 0;
9000bb6e:	2300      	movs	r3, #0
9000bb70:	e000      	b.n	9000bb74 <mem_link_valid+0x6c>
  }
  return 1;
9000bb72:	2301      	movs	r3, #1
}
9000bb74:	4618      	mov	r0, r3
9000bb76:	3718      	adds	r7, #24
9000bb78:	46bd      	mov	sp, r7
9000bb7a:	bd80      	pop	{r7, pc}
9000bb7c:	2000a4e4 	.word	0x2000a4e4

9000bb80 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
9000bb80:	b580      	push	{r7, lr}
9000bb82:	b088      	sub	sp, #32
9000bb84:	af00      	add	r7, sp, #0
9000bb86:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
9000bb88:	687b      	ldr	r3, [r7, #4]
9000bb8a:	2b00      	cmp	r3, #0
9000bb8c:	d070      	beq.n	9000bc70 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
9000bb8e:	687b      	ldr	r3, [r7, #4]
9000bb90:	f003 0303 	and.w	r3, r3, #3
9000bb94:	2b00      	cmp	r3, #0
9000bb96:	d00d      	beq.n	9000bbb4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
9000bb98:	4b37      	ldr	r3, [pc, #220]	; (9000bc78 <mem_free+0xf8>)
9000bb9a:	f240 2273 	movw	r2, #627	; 0x273
9000bb9e:	4937      	ldr	r1, [pc, #220]	; (9000bc7c <mem_free+0xfc>)
9000bba0:	4837      	ldr	r0, [pc, #220]	; (9000bc80 <mem_free+0x100>)
9000bba2:	f00b f84d 	bl	90016c40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000bba6:	f00a fdf5 	bl	90016794 <sys_arch_protect>
9000bbaa:	60f8      	str	r0, [r7, #12]
9000bbac:	68f8      	ldr	r0, [r7, #12]
9000bbae:	f00a fdff 	bl	900167b0 <sys_arch_unprotect>
    return;
9000bbb2:	e05e      	b.n	9000bc72 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
9000bbb4:	687b      	ldr	r3, [r7, #4]
9000bbb6:	3b08      	subs	r3, #8
9000bbb8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
9000bbba:	4b32      	ldr	r3, [pc, #200]	; (9000bc84 <mem_free+0x104>)
9000bbbc:	681b      	ldr	r3, [r3, #0]
9000bbbe:	69fa      	ldr	r2, [r7, #28]
9000bbc0:	429a      	cmp	r2, r3
9000bbc2:	d306      	bcc.n	9000bbd2 <mem_free+0x52>
9000bbc4:	687b      	ldr	r3, [r7, #4]
9000bbc6:	f103 020c 	add.w	r2, r3, #12
9000bbca:	4b2f      	ldr	r3, [pc, #188]	; (9000bc88 <mem_free+0x108>)
9000bbcc:	681b      	ldr	r3, [r3, #0]
9000bbce:	429a      	cmp	r2, r3
9000bbd0:	d90d      	bls.n	9000bbee <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
9000bbd2:	4b29      	ldr	r3, [pc, #164]	; (9000bc78 <mem_free+0xf8>)
9000bbd4:	f240 227f 	movw	r2, #639	; 0x27f
9000bbd8:	492c      	ldr	r1, [pc, #176]	; (9000bc8c <mem_free+0x10c>)
9000bbda:	4829      	ldr	r0, [pc, #164]	; (9000bc80 <mem_free+0x100>)
9000bbdc:	f00b f830 	bl	90016c40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000bbe0:	f00a fdd8 	bl	90016794 <sys_arch_protect>
9000bbe4:	6138      	str	r0, [r7, #16]
9000bbe6:	6938      	ldr	r0, [r7, #16]
9000bbe8:	f00a fde2 	bl	900167b0 <sys_arch_unprotect>
    return;
9000bbec:	e041      	b.n	9000bc72 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
9000bbee:	4828      	ldr	r0, [pc, #160]	; (9000bc90 <mem_free+0x110>)
9000bbf0:	f00a fd94 	bl	9001671c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
9000bbf4:	69fb      	ldr	r3, [r7, #28]
9000bbf6:	791b      	ldrb	r3, [r3, #4]
9000bbf8:	2b00      	cmp	r3, #0
9000bbfa:	d110      	bne.n	9000bc1e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
9000bbfc:	4b1e      	ldr	r3, [pc, #120]	; (9000bc78 <mem_free+0xf8>)
9000bbfe:	f44f 7223 	mov.w	r2, #652	; 0x28c
9000bc02:	4924      	ldr	r1, [pc, #144]	; (9000bc94 <mem_free+0x114>)
9000bc04:	481e      	ldr	r0, [pc, #120]	; (9000bc80 <mem_free+0x100>)
9000bc06:	f00b f81b 	bl	90016c40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
9000bc0a:	4821      	ldr	r0, [pc, #132]	; (9000bc90 <mem_free+0x110>)
9000bc0c:	f00a fd95 	bl	9001673a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000bc10:	f00a fdc0 	bl	90016794 <sys_arch_protect>
9000bc14:	6178      	str	r0, [r7, #20]
9000bc16:	6978      	ldr	r0, [r7, #20]
9000bc18:	f00a fdca 	bl	900167b0 <sys_arch_unprotect>
    return;
9000bc1c:	e029      	b.n	9000bc72 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
9000bc1e:	69f8      	ldr	r0, [r7, #28]
9000bc20:	f7ff ff72 	bl	9000bb08 <mem_link_valid>
9000bc24:	4603      	mov	r3, r0
9000bc26:	2b00      	cmp	r3, #0
9000bc28:	d110      	bne.n	9000bc4c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
9000bc2a:	4b13      	ldr	r3, [pc, #76]	; (9000bc78 <mem_free+0xf8>)
9000bc2c:	f240 2295 	movw	r2, #661	; 0x295
9000bc30:	4919      	ldr	r1, [pc, #100]	; (9000bc98 <mem_free+0x118>)
9000bc32:	4813      	ldr	r0, [pc, #76]	; (9000bc80 <mem_free+0x100>)
9000bc34:	f00b f804 	bl	90016c40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
9000bc38:	4815      	ldr	r0, [pc, #84]	; (9000bc90 <mem_free+0x110>)
9000bc3a:	f00a fd7e 	bl	9001673a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000bc3e:	f00a fda9 	bl	90016794 <sys_arch_protect>
9000bc42:	61b8      	str	r0, [r7, #24]
9000bc44:	69b8      	ldr	r0, [r7, #24]
9000bc46:	f00a fdb3 	bl	900167b0 <sys_arch_unprotect>
    return;
9000bc4a:	e012      	b.n	9000bc72 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
9000bc4c:	69fb      	ldr	r3, [r7, #28]
9000bc4e:	2200      	movs	r2, #0
9000bc50:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
9000bc52:	4b12      	ldr	r3, [pc, #72]	; (9000bc9c <mem_free+0x11c>)
9000bc54:	681b      	ldr	r3, [r3, #0]
9000bc56:	69fa      	ldr	r2, [r7, #28]
9000bc58:	429a      	cmp	r2, r3
9000bc5a:	d202      	bcs.n	9000bc62 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
9000bc5c:	4a0f      	ldr	r2, [pc, #60]	; (9000bc9c <mem_free+0x11c>)
9000bc5e:	69fb      	ldr	r3, [r7, #28]
9000bc60:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
9000bc62:	69f8      	ldr	r0, [r7, #28]
9000bc64:	f7ff fe5c 	bl	9000b920 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
9000bc68:	4809      	ldr	r0, [pc, #36]	; (9000bc90 <mem_free+0x110>)
9000bc6a:	f00a fd66 	bl	9001673a <sys_mutex_unlock>
9000bc6e:	e000      	b.n	9000bc72 <mem_free+0xf2>
    return;
9000bc70:	bf00      	nop
}
9000bc72:	3720      	adds	r7, #32
9000bc74:	46bd      	mov	sp, r7
9000bc76:	bd80      	pop	{r7, pc}
9000bc78:	90018620 	.word	0x90018620
9000bc7c:	90018710 	.word	0x90018710
9000bc80:	90018668 	.word	0x90018668
9000bc84:	2000a4e0 	.word	0x2000a4e0
9000bc88:	2000a4e4 	.word	0x2000a4e4
9000bc8c:	90018734 	.word	0x90018734
9000bc90:	2000a4e8 	.word	0x2000a4e8
9000bc94:	90018750 	.word	0x90018750
9000bc98:	90018778 	.word	0x90018778
9000bc9c:	2000a4ec 	.word	0x2000a4ec

9000bca0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
9000bca0:	b580      	push	{r7, lr}
9000bca2:	b088      	sub	sp, #32
9000bca4:	af00      	add	r7, sp, #0
9000bca6:	6078      	str	r0, [r7, #4]
9000bca8:	460b      	mov	r3, r1
9000bcaa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
9000bcac:	887b      	ldrh	r3, [r7, #2]
9000bcae:	3303      	adds	r3, #3
9000bcb0:	b29b      	uxth	r3, r3
9000bcb2:	f023 0303 	bic.w	r3, r3, #3
9000bcb6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
9000bcb8:	8bfb      	ldrh	r3, [r7, #30]
9000bcba:	2b0b      	cmp	r3, #11
9000bcbc:	d801      	bhi.n	9000bcc2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
9000bcbe:	230c      	movs	r3, #12
9000bcc0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
9000bcc2:	8bfb      	ldrh	r3, [r7, #30]
9000bcc4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000bcc8:	d803      	bhi.n	9000bcd2 <mem_trim+0x32>
9000bcca:	8bfa      	ldrh	r2, [r7, #30]
9000bccc:	887b      	ldrh	r3, [r7, #2]
9000bcce:	429a      	cmp	r2, r3
9000bcd0:	d201      	bcs.n	9000bcd6 <mem_trim+0x36>
    return NULL;
9000bcd2:	2300      	movs	r3, #0
9000bcd4:	e0d8      	b.n	9000be88 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
9000bcd6:	4b6e      	ldr	r3, [pc, #440]	; (9000be90 <mem_trim+0x1f0>)
9000bcd8:	681b      	ldr	r3, [r3, #0]
9000bcda:	687a      	ldr	r2, [r7, #4]
9000bcdc:	429a      	cmp	r2, r3
9000bcde:	d304      	bcc.n	9000bcea <mem_trim+0x4a>
9000bce0:	4b6c      	ldr	r3, [pc, #432]	; (9000be94 <mem_trim+0x1f4>)
9000bce2:	681b      	ldr	r3, [r3, #0]
9000bce4:	687a      	ldr	r2, [r7, #4]
9000bce6:	429a      	cmp	r2, r3
9000bce8:	d306      	bcc.n	9000bcf8 <mem_trim+0x58>
9000bcea:	4b6b      	ldr	r3, [pc, #428]	; (9000be98 <mem_trim+0x1f8>)
9000bcec:	f240 22d1 	movw	r2, #721	; 0x2d1
9000bcf0:	496a      	ldr	r1, [pc, #424]	; (9000be9c <mem_trim+0x1fc>)
9000bcf2:	486b      	ldr	r0, [pc, #428]	; (9000bea0 <mem_trim+0x200>)
9000bcf4:	f00a ffa4 	bl	90016c40 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
9000bcf8:	4b65      	ldr	r3, [pc, #404]	; (9000be90 <mem_trim+0x1f0>)
9000bcfa:	681b      	ldr	r3, [r3, #0]
9000bcfc:	687a      	ldr	r2, [r7, #4]
9000bcfe:	429a      	cmp	r2, r3
9000bd00:	d304      	bcc.n	9000bd0c <mem_trim+0x6c>
9000bd02:	4b64      	ldr	r3, [pc, #400]	; (9000be94 <mem_trim+0x1f4>)
9000bd04:	681b      	ldr	r3, [r3, #0]
9000bd06:	687a      	ldr	r2, [r7, #4]
9000bd08:	429a      	cmp	r2, r3
9000bd0a:	d307      	bcc.n	9000bd1c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000bd0c:	f00a fd42 	bl	90016794 <sys_arch_protect>
9000bd10:	60b8      	str	r0, [r7, #8]
9000bd12:	68b8      	ldr	r0, [r7, #8]
9000bd14:	f00a fd4c 	bl	900167b0 <sys_arch_unprotect>
    return rmem;
9000bd18:	687b      	ldr	r3, [r7, #4]
9000bd1a:	e0b5      	b.n	9000be88 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
9000bd1c:	687b      	ldr	r3, [r7, #4]
9000bd1e:	3b08      	subs	r3, #8
9000bd20:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
9000bd22:	69b8      	ldr	r0, [r7, #24]
9000bd24:	f7ff fdea 	bl	9000b8fc <mem_to_ptr>
9000bd28:	4603      	mov	r3, r0
9000bd2a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
9000bd2c:	69bb      	ldr	r3, [r7, #24]
9000bd2e:	881a      	ldrh	r2, [r3, #0]
9000bd30:	8afb      	ldrh	r3, [r7, #22]
9000bd32:	1ad3      	subs	r3, r2, r3
9000bd34:	b29b      	uxth	r3, r3
9000bd36:	3b08      	subs	r3, #8
9000bd38:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
9000bd3a:	8bfa      	ldrh	r2, [r7, #30]
9000bd3c:	8abb      	ldrh	r3, [r7, #20]
9000bd3e:	429a      	cmp	r2, r3
9000bd40:	d906      	bls.n	9000bd50 <mem_trim+0xb0>
9000bd42:	4b55      	ldr	r3, [pc, #340]	; (9000be98 <mem_trim+0x1f8>)
9000bd44:	f44f 7239 	mov.w	r2, #740	; 0x2e4
9000bd48:	4956      	ldr	r1, [pc, #344]	; (9000bea4 <mem_trim+0x204>)
9000bd4a:	4855      	ldr	r0, [pc, #340]	; (9000bea0 <mem_trim+0x200>)
9000bd4c:	f00a ff78 	bl	90016c40 <iprintf>
  if (newsize > size) {
9000bd50:	8bfa      	ldrh	r2, [r7, #30]
9000bd52:	8abb      	ldrh	r3, [r7, #20]
9000bd54:	429a      	cmp	r2, r3
9000bd56:	d901      	bls.n	9000bd5c <mem_trim+0xbc>
    /* not supported */
    return NULL;
9000bd58:	2300      	movs	r3, #0
9000bd5a:	e095      	b.n	9000be88 <mem_trim+0x1e8>
  }
  if (newsize == size) {
9000bd5c:	8bfa      	ldrh	r2, [r7, #30]
9000bd5e:	8abb      	ldrh	r3, [r7, #20]
9000bd60:	429a      	cmp	r2, r3
9000bd62:	d101      	bne.n	9000bd68 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
9000bd64:	687b      	ldr	r3, [r7, #4]
9000bd66:	e08f      	b.n	9000be88 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
9000bd68:	484f      	ldr	r0, [pc, #316]	; (9000bea8 <mem_trim+0x208>)
9000bd6a:	f00a fcd7 	bl	9001671c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
9000bd6e:	69bb      	ldr	r3, [r7, #24]
9000bd70:	881b      	ldrh	r3, [r3, #0]
9000bd72:	4618      	mov	r0, r3
9000bd74:	f7ff fdb0 	bl	9000b8d8 <ptr_to_mem>
9000bd78:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
9000bd7a:	693b      	ldr	r3, [r7, #16]
9000bd7c:	791b      	ldrb	r3, [r3, #4]
9000bd7e:	2b00      	cmp	r3, #0
9000bd80:	d13f      	bne.n	9000be02 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
9000bd82:	69bb      	ldr	r3, [r7, #24]
9000bd84:	881b      	ldrh	r3, [r3, #0]
9000bd86:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000bd8a:	d106      	bne.n	9000bd9a <mem_trim+0xfa>
9000bd8c:	4b42      	ldr	r3, [pc, #264]	; (9000be98 <mem_trim+0x1f8>)
9000bd8e:	f240 22f5 	movw	r2, #757	; 0x2f5
9000bd92:	4946      	ldr	r1, [pc, #280]	; (9000beac <mem_trim+0x20c>)
9000bd94:	4842      	ldr	r0, [pc, #264]	; (9000bea0 <mem_trim+0x200>)
9000bd96:	f00a ff53 	bl	90016c40 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
9000bd9a:	693b      	ldr	r3, [r7, #16]
9000bd9c:	881b      	ldrh	r3, [r3, #0]
9000bd9e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
9000bda0:	8afa      	ldrh	r2, [r7, #22]
9000bda2:	8bfb      	ldrh	r3, [r7, #30]
9000bda4:	4413      	add	r3, r2
9000bda6:	b29b      	uxth	r3, r3
9000bda8:	3308      	adds	r3, #8
9000bdaa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
9000bdac:	4b40      	ldr	r3, [pc, #256]	; (9000beb0 <mem_trim+0x210>)
9000bdae:	681b      	ldr	r3, [r3, #0]
9000bdb0:	693a      	ldr	r2, [r7, #16]
9000bdb2:	429a      	cmp	r2, r3
9000bdb4:	d106      	bne.n	9000bdc4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
9000bdb6:	89fb      	ldrh	r3, [r7, #14]
9000bdb8:	4618      	mov	r0, r3
9000bdba:	f7ff fd8d 	bl	9000b8d8 <ptr_to_mem>
9000bdbe:	4603      	mov	r3, r0
9000bdc0:	4a3b      	ldr	r2, [pc, #236]	; (9000beb0 <mem_trim+0x210>)
9000bdc2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
9000bdc4:	89fb      	ldrh	r3, [r7, #14]
9000bdc6:	4618      	mov	r0, r3
9000bdc8:	f7ff fd86 	bl	9000b8d8 <ptr_to_mem>
9000bdcc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
9000bdce:	693b      	ldr	r3, [r7, #16]
9000bdd0:	2200      	movs	r2, #0
9000bdd2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
9000bdd4:	693b      	ldr	r3, [r7, #16]
9000bdd6:	89ba      	ldrh	r2, [r7, #12]
9000bdd8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
9000bdda:	693b      	ldr	r3, [r7, #16]
9000bddc:	8afa      	ldrh	r2, [r7, #22]
9000bdde:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
9000bde0:	69bb      	ldr	r3, [r7, #24]
9000bde2:	89fa      	ldrh	r2, [r7, #14]
9000bde4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
9000bde6:	693b      	ldr	r3, [r7, #16]
9000bde8:	881b      	ldrh	r3, [r3, #0]
9000bdea:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000bdee:	d047      	beq.n	9000be80 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
9000bdf0:	693b      	ldr	r3, [r7, #16]
9000bdf2:	881b      	ldrh	r3, [r3, #0]
9000bdf4:	4618      	mov	r0, r3
9000bdf6:	f7ff fd6f 	bl	9000b8d8 <ptr_to_mem>
9000bdfa:	4602      	mov	r2, r0
9000bdfc:	89fb      	ldrh	r3, [r7, #14]
9000bdfe:	8053      	strh	r3, [r2, #2]
9000be00:	e03e      	b.n	9000be80 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
9000be02:	8bfb      	ldrh	r3, [r7, #30]
9000be04:	f103 0214 	add.w	r2, r3, #20
9000be08:	8abb      	ldrh	r3, [r7, #20]
9000be0a:	429a      	cmp	r2, r3
9000be0c:	d838      	bhi.n	9000be80 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
9000be0e:	8afa      	ldrh	r2, [r7, #22]
9000be10:	8bfb      	ldrh	r3, [r7, #30]
9000be12:	4413      	add	r3, r2
9000be14:	b29b      	uxth	r3, r3
9000be16:	3308      	adds	r3, #8
9000be18:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
9000be1a:	69bb      	ldr	r3, [r7, #24]
9000be1c:	881b      	ldrh	r3, [r3, #0]
9000be1e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000be22:	d106      	bne.n	9000be32 <mem_trim+0x192>
9000be24:	4b1c      	ldr	r3, [pc, #112]	; (9000be98 <mem_trim+0x1f8>)
9000be26:	f240 3216 	movw	r2, #790	; 0x316
9000be2a:	4920      	ldr	r1, [pc, #128]	; (9000beac <mem_trim+0x20c>)
9000be2c:	481c      	ldr	r0, [pc, #112]	; (9000bea0 <mem_trim+0x200>)
9000be2e:	f00a ff07 	bl	90016c40 <iprintf>
    mem2 = ptr_to_mem(ptr2);
9000be32:	89fb      	ldrh	r3, [r7, #14]
9000be34:	4618      	mov	r0, r3
9000be36:	f7ff fd4f 	bl	9000b8d8 <ptr_to_mem>
9000be3a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
9000be3c:	4b1c      	ldr	r3, [pc, #112]	; (9000beb0 <mem_trim+0x210>)
9000be3e:	681b      	ldr	r3, [r3, #0]
9000be40:	693a      	ldr	r2, [r7, #16]
9000be42:	429a      	cmp	r2, r3
9000be44:	d202      	bcs.n	9000be4c <mem_trim+0x1ac>
      lfree = mem2;
9000be46:	4a1a      	ldr	r2, [pc, #104]	; (9000beb0 <mem_trim+0x210>)
9000be48:	693b      	ldr	r3, [r7, #16]
9000be4a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
9000be4c:	693b      	ldr	r3, [r7, #16]
9000be4e:	2200      	movs	r2, #0
9000be50:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
9000be52:	69bb      	ldr	r3, [r7, #24]
9000be54:	881a      	ldrh	r2, [r3, #0]
9000be56:	693b      	ldr	r3, [r7, #16]
9000be58:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
9000be5a:	693b      	ldr	r3, [r7, #16]
9000be5c:	8afa      	ldrh	r2, [r7, #22]
9000be5e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
9000be60:	69bb      	ldr	r3, [r7, #24]
9000be62:	89fa      	ldrh	r2, [r7, #14]
9000be64:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
9000be66:	693b      	ldr	r3, [r7, #16]
9000be68:	881b      	ldrh	r3, [r3, #0]
9000be6a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000be6e:	d007      	beq.n	9000be80 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
9000be70:	693b      	ldr	r3, [r7, #16]
9000be72:	881b      	ldrh	r3, [r3, #0]
9000be74:	4618      	mov	r0, r3
9000be76:	f7ff fd2f 	bl	9000b8d8 <ptr_to_mem>
9000be7a:	4602      	mov	r2, r0
9000be7c:	89fb      	ldrh	r3, [r7, #14]
9000be7e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
9000be80:	4809      	ldr	r0, [pc, #36]	; (9000bea8 <mem_trim+0x208>)
9000be82:	f00a fc5a 	bl	9001673a <sys_mutex_unlock>
  return rmem;
9000be86:	687b      	ldr	r3, [r7, #4]
}
9000be88:	4618      	mov	r0, r3
9000be8a:	3720      	adds	r7, #32
9000be8c:	46bd      	mov	sp, r7
9000be8e:	bd80      	pop	{r7, pc}
9000be90:	2000a4e0 	.word	0x2000a4e0
9000be94:	2000a4e4 	.word	0x2000a4e4
9000be98:	90018620 	.word	0x90018620
9000be9c:	900187ac 	.word	0x900187ac
9000bea0:	90018668 	.word	0x90018668
9000bea4:	900187c4 	.word	0x900187c4
9000bea8:	2000a4e8 	.word	0x2000a4e8
9000beac:	900187e4 	.word	0x900187e4
9000beb0:	2000a4ec 	.word	0x2000a4ec

9000beb4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
9000beb4:	b580      	push	{r7, lr}
9000beb6:	b088      	sub	sp, #32
9000beb8:	af00      	add	r7, sp, #0
9000beba:	4603      	mov	r3, r0
9000bebc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
9000bebe:	88fb      	ldrh	r3, [r7, #6]
9000bec0:	2b00      	cmp	r3, #0
9000bec2:	d101      	bne.n	9000bec8 <mem_malloc+0x14>
    return NULL;
9000bec4:	2300      	movs	r3, #0
9000bec6:	e0e2      	b.n	9000c08e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
9000bec8:	88fb      	ldrh	r3, [r7, #6]
9000beca:	3303      	adds	r3, #3
9000becc:	b29b      	uxth	r3, r3
9000bece:	f023 0303 	bic.w	r3, r3, #3
9000bed2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
9000bed4:	8bbb      	ldrh	r3, [r7, #28]
9000bed6:	2b0b      	cmp	r3, #11
9000bed8:	d801      	bhi.n	9000bede <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
9000beda:	230c      	movs	r3, #12
9000bedc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
9000bede:	8bbb      	ldrh	r3, [r7, #28]
9000bee0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000bee4:	d803      	bhi.n	9000beee <mem_malloc+0x3a>
9000bee6:	8bba      	ldrh	r2, [r7, #28]
9000bee8:	88fb      	ldrh	r3, [r7, #6]
9000beea:	429a      	cmp	r2, r3
9000beec:	d201      	bcs.n	9000bef2 <mem_malloc+0x3e>
    return NULL;
9000beee:	2300      	movs	r3, #0
9000bef0:	e0cd      	b.n	9000c08e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
9000bef2:	4869      	ldr	r0, [pc, #420]	; (9000c098 <mem_malloc+0x1e4>)
9000bef4:	f00a fc12 	bl	9001671c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
9000bef8:	4b68      	ldr	r3, [pc, #416]	; (9000c09c <mem_malloc+0x1e8>)
9000befa:	681b      	ldr	r3, [r3, #0]
9000befc:	4618      	mov	r0, r3
9000befe:	f7ff fcfd 	bl	9000b8fc <mem_to_ptr>
9000bf02:	4603      	mov	r3, r0
9000bf04:	83fb      	strh	r3, [r7, #30]
9000bf06:	e0b7      	b.n	9000c078 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
9000bf08:	8bfb      	ldrh	r3, [r7, #30]
9000bf0a:	4618      	mov	r0, r3
9000bf0c:	f7ff fce4 	bl	9000b8d8 <ptr_to_mem>
9000bf10:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
9000bf12:	697b      	ldr	r3, [r7, #20]
9000bf14:	791b      	ldrb	r3, [r3, #4]
9000bf16:	2b00      	cmp	r3, #0
9000bf18:	f040 80a7 	bne.w	9000c06a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
9000bf1c:	697b      	ldr	r3, [r7, #20]
9000bf1e:	881b      	ldrh	r3, [r3, #0]
9000bf20:	461a      	mov	r2, r3
9000bf22:	8bfb      	ldrh	r3, [r7, #30]
9000bf24:	1ad3      	subs	r3, r2, r3
9000bf26:	f1a3 0208 	sub.w	r2, r3, #8
9000bf2a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
9000bf2c:	429a      	cmp	r2, r3
9000bf2e:	f0c0 809c 	bcc.w	9000c06a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
9000bf32:	697b      	ldr	r3, [r7, #20]
9000bf34:	881b      	ldrh	r3, [r3, #0]
9000bf36:	461a      	mov	r2, r3
9000bf38:	8bfb      	ldrh	r3, [r7, #30]
9000bf3a:	1ad3      	subs	r3, r2, r3
9000bf3c:	f1a3 0208 	sub.w	r2, r3, #8
9000bf40:	8bbb      	ldrh	r3, [r7, #28]
9000bf42:	3314      	adds	r3, #20
9000bf44:	429a      	cmp	r2, r3
9000bf46:	d333      	bcc.n	9000bfb0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
9000bf48:	8bfa      	ldrh	r2, [r7, #30]
9000bf4a:	8bbb      	ldrh	r3, [r7, #28]
9000bf4c:	4413      	add	r3, r2
9000bf4e:	b29b      	uxth	r3, r3
9000bf50:	3308      	adds	r3, #8
9000bf52:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
9000bf54:	8a7b      	ldrh	r3, [r7, #18]
9000bf56:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000bf5a:	d106      	bne.n	9000bf6a <mem_malloc+0xb6>
9000bf5c:	4b50      	ldr	r3, [pc, #320]	; (9000c0a0 <mem_malloc+0x1ec>)
9000bf5e:	f240 3287 	movw	r2, #903	; 0x387
9000bf62:	4950      	ldr	r1, [pc, #320]	; (9000c0a4 <mem_malloc+0x1f0>)
9000bf64:	4850      	ldr	r0, [pc, #320]	; (9000c0a8 <mem_malloc+0x1f4>)
9000bf66:	f00a fe6b 	bl	90016c40 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
9000bf6a:	8a7b      	ldrh	r3, [r7, #18]
9000bf6c:	4618      	mov	r0, r3
9000bf6e:	f7ff fcb3 	bl	9000b8d8 <ptr_to_mem>
9000bf72:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
9000bf74:	68fb      	ldr	r3, [r7, #12]
9000bf76:	2200      	movs	r2, #0
9000bf78:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
9000bf7a:	697b      	ldr	r3, [r7, #20]
9000bf7c:	881a      	ldrh	r2, [r3, #0]
9000bf7e:	68fb      	ldr	r3, [r7, #12]
9000bf80:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
9000bf82:	68fb      	ldr	r3, [r7, #12]
9000bf84:	8bfa      	ldrh	r2, [r7, #30]
9000bf86:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
9000bf88:	697b      	ldr	r3, [r7, #20]
9000bf8a:	8a7a      	ldrh	r2, [r7, #18]
9000bf8c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
9000bf8e:	697b      	ldr	r3, [r7, #20]
9000bf90:	2201      	movs	r2, #1
9000bf92:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
9000bf94:	68fb      	ldr	r3, [r7, #12]
9000bf96:	881b      	ldrh	r3, [r3, #0]
9000bf98:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000bf9c:	d00b      	beq.n	9000bfb6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
9000bf9e:	68fb      	ldr	r3, [r7, #12]
9000bfa0:	881b      	ldrh	r3, [r3, #0]
9000bfa2:	4618      	mov	r0, r3
9000bfa4:	f7ff fc98 	bl	9000b8d8 <ptr_to_mem>
9000bfa8:	4602      	mov	r2, r0
9000bfaa:	8a7b      	ldrh	r3, [r7, #18]
9000bfac:	8053      	strh	r3, [r2, #2]
9000bfae:	e002      	b.n	9000bfb6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
9000bfb0:	697b      	ldr	r3, [r7, #20]
9000bfb2:	2201      	movs	r2, #1
9000bfb4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
9000bfb6:	4b39      	ldr	r3, [pc, #228]	; (9000c09c <mem_malloc+0x1e8>)
9000bfb8:	681b      	ldr	r3, [r3, #0]
9000bfba:	697a      	ldr	r2, [r7, #20]
9000bfbc:	429a      	cmp	r2, r3
9000bfbe:	d127      	bne.n	9000c010 <mem_malloc+0x15c>
          struct mem *cur = lfree;
9000bfc0:	4b36      	ldr	r3, [pc, #216]	; (9000c09c <mem_malloc+0x1e8>)
9000bfc2:	681b      	ldr	r3, [r3, #0]
9000bfc4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
9000bfc6:	e005      	b.n	9000bfd4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
9000bfc8:	69bb      	ldr	r3, [r7, #24]
9000bfca:	881b      	ldrh	r3, [r3, #0]
9000bfcc:	4618      	mov	r0, r3
9000bfce:	f7ff fc83 	bl	9000b8d8 <ptr_to_mem>
9000bfd2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
9000bfd4:	69bb      	ldr	r3, [r7, #24]
9000bfd6:	791b      	ldrb	r3, [r3, #4]
9000bfd8:	2b00      	cmp	r3, #0
9000bfda:	d004      	beq.n	9000bfe6 <mem_malloc+0x132>
9000bfdc:	4b33      	ldr	r3, [pc, #204]	; (9000c0ac <mem_malloc+0x1f8>)
9000bfde:	681b      	ldr	r3, [r3, #0]
9000bfe0:	69ba      	ldr	r2, [r7, #24]
9000bfe2:	429a      	cmp	r2, r3
9000bfe4:	d1f0      	bne.n	9000bfc8 <mem_malloc+0x114>
          }
          lfree = cur;
9000bfe6:	4a2d      	ldr	r2, [pc, #180]	; (9000c09c <mem_malloc+0x1e8>)
9000bfe8:	69bb      	ldr	r3, [r7, #24]
9000bfea:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
9000bfec:	4b2b      	ldr	r3, [pc, #172]	; (9000c09c <mem_malloc+0x1e8>)
9000bfee:	681a      	ldr	r2, [r3, #0]
9000bff0:	4b2e      	ldr	r3, [pc, #184]	; (9000c0ac <mem_malloc+0x1f8>)
9000bff2:	681b      	ldr	r3, [r3, #0]
9000bff4:	429a      	cmp	r2, r3
9000bff6:	d00b      	beq.n	9000c010 <mem_malloc+0x15c>
9000bff8:	4b28      	ldr	r3, [pc, #160]	; (9000c09c <mem_malloc+0x1e8>)
9000bffa:	681b      	ldr	r3, [r3, #0]
9000bffc:	791b      	ldrb	r3, [r3, #4]
9000bffe:	2b00      	cmp	r3, #0
9000c000:	d006      	beq.n	9000c010 <mem_malloc+0x15c>
9000c002:	4b27      	ldr	r3, [pc, #156]	; (9000c0a0 <mem_malloc+0x1ec>)
9000c004:	f240 32b5 	movw	r2, #949	; 0x3b5
9000c008:	4929      	ldr	r1, [pc, #164]	; (9000c0b0 <mem_malloc+0x1fc>)
9000c00a:	4827      	ldr	r0, [pc, #156]	; (9000c0a8 <mem_malloc+0x1f4>)
9000c00c:	f00a fe18 	bl	90016c40 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
9000c010:	4821      	ldr	r0, [pc, #132]	; (9000c098 <mem_malloc+0x1e4>)
9000c012:	f00a fb92 	bl	9001673a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
9000c016:	8bba      	ldrh	r2, [r7, #28]
9000c018:	697b      	ldr	r3, [r7, #20]
9000c01a:	4413      	add	r3, r2
9000c01c:	3308      	adds	r3, #8
9000c01e:	4a23      	ldr	r2, [pc, #140]	; (9000c0ac <mem_malloc+0x1f8>)
9000c020:	6812      	ldr	r2, [r2, #0]
9000c022:	4293      	cmp	r3, r2
9000c024:	d906      	bls.n	9000c034 <mem_malloc+0x180>
9000c026:	4b1e      	ldr	r3, [pc, #120]	; (9000c0a0 <mem_malloc+0x1ec>)
9000c028:	f240 32b9 	movw	r2, #953	; 0x3b9
9000c02c:	4921      	ldr	r1, [pc, #132]	; (9000c0b4 <mem_malloc+0x200>)
9000c02e:	481e      	ldr	r0, [pc, #120]	; (9000c0a8 <mem_malloc+0x1f4>)
9000c030:	f00a fe06 	bl	90016c40 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
9000c034:	697b      	ldr	r3, [r7, #20]
9000c036:	f003 0303 	and.w	r3, r3, #3
9000c03a:	2b00      	cmp	r3, #0
9000c03c:	d006      	beq.n	9000c04c <mem_malloc+0x198>
9000c03e:	4b18      	ldr	r3, [pc, #96]	; (9000c0a0 <mem_malloc+0x1ec>)
9000c040:	f240 32bb 	movw	r2, #955	; 0x3bb
9000c044:	491c      	ldr	r1, [pc, #112]	; (9000c0b8 <mem_malloc+0x204>)
9000c046:	4818      	ldr	r0, [pc, #96]	; (9000c0a8 <mem_malloc+0x1f4>)
9000c048:	f00a fdfa 	bl	90016c40 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
9000c04c:	697b      	ldr	r3, [r7, #20]
9000c04e:	f003 0303 	and.w	r3, r3, #3
9000c052:	2b00      	cmp	r3, #0
9000c054:	d006      	beq.n	9000c064 <mem_malloc+0x1b0>
9000c056:	4b12      	ldr	r3, [pc, #72]	; (9000c0a0 <mem_malloc+0x1ec>)
9000c058:	f240 32bd 	movw	r2, #957	; 0x3bd
9000c05c:	4917      	ldr	r1, [pc, #92]	; (9000c0bc <mem_malloc+0x208>)
9000c05e:	4812      	ldr	r0, [pc, #72]	; (9000c0a8 <mem_malloc+0x1f4>)
9000c060:	f00a fdee 	bl	90016c40 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
9000c064:	697b      	ldr	r3, [r7, #20]
9000c066:	3308      	adds	r3, #8
9000c068:	e011      	b.n	9000c08e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
9000c06a:	8bfb      	ldrh	r3, [r7, #30]
9000c06c:	4618      	mov	r0, r3
9000c06e:	f7ff fc33 	bl	9000b8d8 <ptr_to_mem>
9000c072:	4603      	mov	r3, r0
9000c074:	881b      	ldrh	r3, [r3, #0]
9000c076:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
9000c078:	8bfa      	ldrh	r2, [r7, #30]
9000c07a:	8bbb      	ldrh	r3, [r7, #28]
9000c07c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
9000c080:	429a      	cmp	r2, r3
9000c082:	f4ff af41 	bcc.w	9000bf08 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
9000c086:	4804      	ldr	r0, [pc, #16]	; (9000c098 <mem_malloc+0x1e4>)
9000c088:	f00a fb57 	bl	9001673a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
9000c08c:	2300      	movs	r3, #0
}
9000c08e:	4618      	mov	r0, r3
9000c090:	3720      	adds	r7, #32
9000c092:	46bd      	mov	sp, r7
9000c094:	bd80      	pop	{r7, pc}
9000c096:	bf00      	nop
9000c098:	2000a4e8 	.word	0x2000a4e8
9000c09c:	2000a4ec 	.word	0x2000a4ec
9000c0a0:	90018620 	.word	0x90018620
9000c0a4:	900187e4 	.word	0x900187e4
9000c0a8:	90018668 	.word	0x90018668
9000c0ac:	2000a4e4 	.word	0x2000a4e4
9000c0b0:	900187f8 	.word	0x900187f8
9000c0b4:	90018814 	.word	0x90018814
9000c0b8:	90018844 	.word	0x90018844
9000c0bc:	90018874 	.word	0x90018874

9000c0c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
9000c0c0:	b480      	push	{r7}
9000c0c2:	b085      	sub	sp, #20
9000c0c4:	af00      	add	r7, sp, #0
9000c0c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
9000c0c8:	687b      	ldr	r3, [r7, #4]
9000c0ca:	689b      	ldr	r3, [r3, #8]
9000c0cc:	2200      	movs	r2, #0
9000c0ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
9000c0d0:	687b      	ldr	r3, [r7, #4]
9000c0d2:	685b      	ldr	r3, [r3, #4]
9000c0d4:	3303      	adds	r3, #3
9000c0d6:	f023 0303 	bic.w	r3, r3, #3
9000c0da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
9000c0dc:	2300      	movs	r3, #0
9000c0de:	60fb      	str	r3, [r7, #12]
9000c0e0:	e011      	b.n	9000c106 <memp_init_pool+0x46>
    memp->next = *desc->tab;
9000c0e2:	687b      	ldr	r3, [r7, #4]
9000c0e4:	689b      	ldr	r3, [r3, #8]
9000c0e6:	681a      	ldr	r2, [r3, #0]
9000c0e8:	68bb      	ldr	r3, [r7, #8]
9000c0ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
9000c0ec:	687b      	ldr	r3, [r7, #4]
9000c0ee:	689b      	ldr	r3, [r3, #8]
9000c0f0:	68ba      	ldr	r2, [r7, #8]
9000c0f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
9000c0f4:	687b      	ldr	r3, [r7, #4]
9000c0f6:	881b      	ldrh	r3, [r3, #0]
9000c0f8:	461a      	mov	r2, r3
9000c0fa:	68bb      	ldr	r3, [r7, #8]
9000c0fc:	4413      	add	r3, r2
9000c0fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
9000c100:	68fb      	ldr	r3, [r7, #12]
9000c102:	3301      	adds	r3, #1
9000c104:	60fb      	str	r3, [r7, #12]
9000c106:	687b      	ldr	r3, [r7, #4]
9000c108:	885b      	ldrh	r3, [r3, #2]
9000c10a:	461a      	mov	r2, r3
9000c10c:	68fb      	ldr	r3, [r7, #12]
9000c10e:	4293      	cmp	r3, r2
9000c110:	dbe7      	blt.n	9000c0e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
9000c112:	bf00      	nop
9000c114:	bf00      	nop
9000c116:	3714      	adds	r7, #20
9000c118:	46bd      	mov	sp, r7
9000c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c11e:	4770      	bx	lr

9000c120 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
9000c120:	b580      	push	{r7, lr}
9000c122:	b082      	sub	sp, #8
9000c124:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
9000c126:	2300      	movs	r3, #0
9000c128:	80fb      	strh	r3, [r7, #6]
9000c12a:	e009      	b.n	9000c140 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
9000c12c:	88fb      	ldrh	r3, [r7, #6]
9000c12e:	4a08      	ldr	r2, [pc, #32]	; (9000c150 <memp_init+0x30>)
9000c130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000c134:	4618      	mov	r0, r3
9000c136:	f7ff ffc3 	bl	9000c0c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
9000c13a:	88fb      	ldrh	r3, [r7, #6]
9000c13c:	3301      	adds	r3, #1
9000c13e:	80fb      	strh	r3, [r7, #6]
9000c140:	88fb      	ldrh	r3, [r7, #6]
9000c142:	2b0c      	cmp	r3, #12
9000c144:	d9f2      	bls.n	9000c12c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
9000c146:	bf00      	nop
9000c148:	bf00      	nop
9000c14a:	3708      	adds	r7, #8
9000c14c:	46bd      	mov	sp, r7
9000c14e:	bd80      	pop	{r7, pc}
9000c150:	9001bd60 	.word	0x9001bd60

9000c154 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
9000c154:	b580      	push	{r7, lr}
9000c156:	b084      	sub	sp, #16
9000c158:	af00      	add	r7, sp, #0
9000c15a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
9000c15c:	f00a fb1a 	bl	90016794 <sys_arch_protect>
9000c160:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
9000c162:	687b      	ldr	r3, [r7, #4]
9000c164:	689b      	ldr	r3, [r3, #8]
9000c166:	681b      	ldr	r3, [r3, #0]
9000c168:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
9000c16a:	68bb      	ldr	r3, [r7, #8]
9000c16c:	2b00      	cmp	r3, #0
9000c16e:	d015      	beq.n	9000c19c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
9000c170:	687b      	ldr	r3, [r7, #4]
9000c172:	689b      	ldr	r3, [r3, #8]
9000c174:	68ba      	ldr	r2, [r7, #8]
9000c176:	6812      	ldr	r2, [r2, #0]
9000c178:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
9000c17a:	68bb      	ldr	r3, [r7, #8]
9000c17c:	f003 0303 	and.w	r3, r3, #3
9000c180:	2b00      	cmp	r3, #0
9000c182:	d006      	beq.n	9000c192 <do_memp_malloc_pool+0x3e>
9000c184:	4b09      	ldr	r3, [pc, #36]	; (9000c1ac <do_memp_malloc_pool+0x58>)
9000c186:	f44f 728c 	mov.w	r2, #280	; 0x118
9000c18a:	4909      	ldr	r1, [pc, #36]	; (9000c1b0 <do_memp_malloc_pool+0x5c>)
9000c18c:	4809      	ldr	r0, [pc, #36]	; (9000c1b4 <do_memp_malloc_pool+0x60>)
9000c18e:	f00a fd57 	bl	90016c40 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
9000c192:	68f8      	ldr	r0, [r7, #12]
9000c194:	f00a fb0c 	bl	900167b0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
9000c198:	68bb      	ldr	r3, [r7, #8]
9000c19a:	e003      	b.n	9000c1a4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
9000c19c:	68f8      	ldr	r0, [r7, #12]
9000c19e:	f00a fb07 	bl	900167b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
9000c1a2:	2300      	movs	r3, #0
}
9000c1a4:	4618      	mov	r0, r3
9000c1a6:	3710      	adds	r7, #16
9000c1a8:	46bd      	mov	sp, r7
9000c1aa:	bd80      	pop	{r7, pc}
9000c1ac:	90018898 	.word	0x90018898
9000c1b0:	900188c8 	.word	0x900188c8
9000c1b4:	900188ec 	.word	0x900188ec

9000c1b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
9000c1b8:	b580      	push	{r7, lr}
9000c1ba:	b084      	sub	sp, #16
9000c1bc:	af00      	add	r7, sp, #0
9000c1be:	4603      	mov	r3, r0
9000c1c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
9000c1c2:	79fb      	ldrb	r3, [r7, #7]
9000c1c4:	2b0c      	cmp	r3, #12
9000c1c6:	d908      	bls.n	9000c1da <memp_malloc+0x22>
9000c1c8:	4b0a      	ldr	r3, [pc, #40]	; (9000c1f4 <memp_malloc+0x3c>)
9000c1ca:	f240 1257 	movw	r2, #343	; 0x157
9000c1ce:	490a      	ldr	r1, [pc, #40]	; (9000c1f8 <memp_malloc+0x40>)
9000c1d0:	480a      	ldr	r0, [pc, #40]	; (9000c1fc <memp_malloc+0x44>)
9000c1d2:	f00a fd35 	bl	90016c40 <iprintf>
9000c1d6:	2300      	movs	r3, #0
9000c1d8:	e008      	b.n	9000c1ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
9000c1da:	79fb      	ldrb	r3, [r7, #7]
9000c1dc:	4a08      	ldr	r2, [pc, #32]	; (9000c200 <memp_malloc+0x48>)
9000c1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000c1e2:	4618      	mov	r0, r3
9000c1e4:	f7ff ffb6 	bl	9000c154 <do_memp_malloc_pool>
9000c1e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
9000c1ea:	68fb      	ldr	r3, [r7, #12]
}
9000c1ec:	4618      	mov	r0, r3
9000c1ee:	3710      	adds	r7, #16
9000c1f0:	46bd      	mov	sp, r7
9000c1f2:	bd80      	pop	{r7, pc}
9000c1f4:	90018898 	.word	0x90018898
9000c1f8:	90018928 	.word	0x90018928
9000c1fc:	900188ec 	.word	0x900188ec
9000c200:	9001bd60 	.word	0x9001bd60

9000c204 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
9000c204:	b580      	push	{r7, lr}
9000c206:	b084      	sub	sp, #16
9000c208:	af00      	add	r7, sp, #0
9000c20a:	6078      	str	r0, [r7, #4]
9000c20c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
9000c20e:	683b      	ldr	r3, [r7, #0]
9000c210:	f003 0303 	and.w	r3, r3, #3
9000c214:	2b00      	cmp	r3, #0
9000c216:	d006      	beq.n	9000c226 <do_memp_free_pool+0x22>
9000c218:	4b0d      	ldr	r3, [pc, #52]	; (9000c250 <do_memp_free_pool+0x4c>)
9000c21a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
9000c21e:	490d      	ldr	r1, [pc, #52]	; (9000c254 <do_memp_free_pool+0x50>)
9000c220:	480d      	ldr	r0, [pc, #52]	; (9000c258 <do_memp_free_pool+0x54>)
9000c222:	f00a fd0d 	bl	90016c40 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
9000c226:	683b      	ldr	r3, [r7, #0]
9000c228:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
9000c22a:	f00a fab3 	bl	90016794 <sys_arch_protect>
9000c22e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
9000c230:	687b      	ldr	r3, [r7, #4]
9000c232:	689b      	ldr	r3, [r3, #8]
9000c234:	681a      	ldr	r2, [r3, #0]
9000c236:	68fb      	ldr	r3, [r7, #12]
9000c238:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
9000c23a:	687b      	ldr	r3, [r7, #4]
9000c23c:	689b      	ldr	r3, [r3, #8]
9000c23e:	68fa      	ldr	r2, [r7, #12]
9000c240:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
9000c242:	68b8      	ldr	r0, [r7, #8]
9000c244:	f00a fab4 	bl	900167b0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
9000c248:	bf00      	nop
9000c24a:	3710      	adds	r7, #16
9000c24c:	46bd      	mov	sp, r7
9000c24e:	bd80      	pop	{r7, pc}
9000c250:	90018898 	.word	0x90018898
9000c254:	90018948 	.word	0x90018948
9000c258:	900188ec 	.word	0x900188ec

9000c25c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
9000c25c:	b580      	push	{r7, lr}
9000c25e:	b082      	sub	sp, #8
9000c260:	af00      	add	r7, sp, #0
9000c262:	4603      	mov	r3, r0
9000c264:	6039      	str	r1, [r7, #0]
9000c266:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
9000c268:	79fb      	ldrb	r3, [r7, #7]
9000c26a:	2b0c      	cmp	r3, #12
9000c26c:	d907      	bls.n	9000c27e <memp_free+0x22>
9000c26e:	4b0c      	ldr	r3, [pc, #48]	; (9000c2a0 <memp_free+0x44>)
9000c270:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
9000c274:	490b      	ldr	r1, [pc, #44]	; (9000c2a4 <memp_free+0x48>)
9000c276:	480c      	ldr	r0, [pc, #48]	; (9000c2a8 <memp_free+0x4c>)
9000c278:	f00a fce2 	bl	90016c40 <iprintf>
9000c27c:	e00c      	b.n	9000c298 <memp_free+0x3c>

  if (mem == NULL) {
9000c27e:	683b      	ldr	r3, [r7, #0]
9000c280:	2b00      	cmp	r3, #0
9000c282:	d008      	beq.n	9000c296 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
9000c284:	79fb      	ldrb	r3, [r7, #7]
9000c286:	4a09      	ldr	r2, [pc, #36]	; (9000c2ac <memp_free+0x50>)
9000c288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000c28c:	6839      	ldr	r1, [r7, #0]
9000c28e:	4618      	mov	r0, r3
9000c290:	f7ff ffb8 	bl	9000c204 <do_memp_free_pool>
9000c294:	e000      	b.n	9000c298 <memp_free+0x3c>
    return;
9000c296:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
9000c298:	3708      	adds	r7, #8
9000c29a:	46bd      	mov	sp, r7
9000c29c:	bd80      	pop	{r7, pc}
9000c29e:	bf00      	nop
9000c2a0:	90018898 	.word	0x90018898
9000c2a4:	90018968 	.word	0x90018968
9000c2a8:	900188ec 	.word	0x900188ec
9000c2ac:	9001bd60 	.word	0x9001bd60

9000c2b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
9000c2b0:	b480      	push	{r7}
9000c2b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
9000c2b4:	bf00      	nop
9000c2b6:	46bd      	mov	sp, r7
9000c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c2bc:	4770      	bx	lr
	...

9000c2c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
9000c2c0:	b580      	push	{r7, lr}
9000c2c2:	b086      	sub	sp, #24
9000c2c4:	af00      	add	r7, sp, #0
9000c2c6:	60f8      	str	r0, [r7, #12]
9000c2c8:	60b9      	str	r1, [r7, #8]
9000c2ca:	607a      	str	r2, [r7, #4]
9000c2cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
9000c2ce:	68fb      	ldr	r3, [r7, #12]
9000c2d0:	2b00      	cmp	r3, #0
9000c2d2:	d108      	bne.n	9000c2e6 <netif_add+0x26>
9000c2d4:	4b57      	ldr	r3, [pc, #348]	; (9000c434 <netif_add+0x174>)
9000c2d6:	f240 1227 	movw	r2, #295	; 0x127
9000c2da:	4957      	ldr	r1, [pc, #348]	; (9000c438 <netif_add+0x178>)
9000c2dc:	4857      	ldr	r0, [pc, #348]	; (9000c43c <netif_add+0x17c>)
9000c2de:	f00a fcaf 	bl	90016c40 <iprintf>
9000c2e2:	2300      	movs	r3, #0
9000c2e4:	e0a2      	b.n	9000c42c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
9000c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000c2e8:	2b00      	cmp	r3, #0
9000c2ea:	d108      	bne.n	9000c2fe <netif_add+0x3e>
9000c2ec:	4b51      	ldr	r3, [pc, #324]	; (9000c434 <netif_add+0x174>)
9000c2ee:	f44f 7294 	mov.w	r2, #296	; 0x128
9000c2f2:	4953      	ldr	r1, [pc, #332]	; (9000c440 <netif_add+0x180>)
9000c2f4:	4851      	ldr	r0, [pc, #324]	; (9000c43c <netif_add+0x17c>)
9000c2f6:	f00a fca3 	bl	90016c40 <iprintf>
9000c2fa:	2300      	movs	r3, #0
9000c2fc:	e096      	b.n	9000c42c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
9000c2fe:	68bb      	ldr	r3, [r7, #8]
9000c300:	2b00      	cmp	r3, #0
9000c302:	d101      	bne.n	9000c308 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
9000c304:	4b4f      	ldr	r3, [pc, #316]	; (9000c444 <netif_add+0x184>)
9000c306:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
9000c308:	687b      	ldr	r3, [r7, #4]
9000c30a:	2b00      	cmp	r3, #0
9000c30c:	d101      	bne.n	9000c312 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
9000c30e:	4b4d      	ldr	r3, [pc, #308]	; (9000c444 <netif_add+0x184>)
9000c310:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
9000c312:	683b      	ldr	r3, [r7, #0]
9000c314:	2b00      	cmp	r3, #0
9000c316:	d101      	bne.n	9000c31c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
9000c318:	4b4a      	ldr	r3, [pc, #296]	; (9000c444 <netif_add+0x184>)
9000c31a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
9000c31c:	68fb      	ldr	r3, [r7, #12]
9000c31e:	2200      	movs	r2, #0
9000c320:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
9000c322:	68fb      	ldr	r3, [r7, #12]
9000c324:	2200      	movs	r2, #0
9000c326:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
9000c328:	68fb      	ldr	r3, [r7, #12]
9000c32a:	2200      	movs	r2, #0
9000c32c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
9000c32e:	68fb      	ldr	r3, [r7, #12]
9000c330:	4a45      	ldr	r2, [pc, #276]	; (9000c448 <netif_add+0x188>)
9000c332:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
9000c334:	68fb      	ldr	r3, [r7, #12]
9000c336:	2200      	movs	r2, #0
9000c338:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
9000c33a:	68fb      	ldr	r3, [r7, #12]
9000c33c:	2200      	movs	r2, #0
9000c33e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
9000c342:	68fb      	ldr	r3, [r7, #12]
9000c344:	2200      	movs	r2, #0
9000c346:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
9000c348:	68fb      	ldr	r3, [r7, #12]
9000c34a:	6a3a      	ldr	r2, [r7, #32]
9000c34c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
9000c34e:	4b3f      	ldr	r3, [pc, #252]	; (9000c44c <netif_add+0x18c>)
9000c350:	781a      	ldrb	r2, [r3, #0]
9000c352:	68fb      	ldr	r3, [r7, #12]
9000c354:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
9000c358:	68fb      	ldr	r3, [r7, #12]
9000c35a:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000c35c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
9000c35e:	683b      	ldr	r3, [r7, #0]
9000c360:	687a      	ldr	r2, [r7, #4]
9000c362:	68b9      	ldr	r1, [r7, #8]
9000c364:	68f8      	ldr	r0, [r7, #12]
9000c366:	f000 f913 	bl	9000c590 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
9000c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000c36c:	68f8      	ldr	r0, [r7, #12]
9000c36e:	4798      	blx	r3
9000c370:	4603      	mov	r3, r0
9000c372:	2b00      	cmp	r3, #0
9000c374:	d001      	beq.n	9000c37a <netif_add+0xba>
    return NULL;
9000c376:	2300      	movs	r3, #0
9000c378:	e058      	b.n	9000c42c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
9000c37a:	68fb      	ldr	r3, [r7, #12]
9000c37c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000c380:	2bff      	cmp	r3, #255	; 0xff
9000c382:	d103      	bne.n	9000c38c <netif_add+0xcc>
        netif->num = 0;
9000c384:	68fb      	ldr	r3, [r7, #12]
9000c386:	2200      	movs	r2, #0
9000c388:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
9000c38c:	2300      	movs	r3, #0
9000c38e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
9000c390:	4b2f      	ldr	r3, [pc, #188]	; (9000c450 <netif_add+0x190>)
9000c392:	681b      	ldr	r3, [r3, #0]
9000c394:	617b      	str	r3, [r7, #20]
9000c396:	e02b      	b.n	9000c3f0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
9000c398:	697a      	ldr	r2, [r7, #20]
9000c39a:	68fb      	ldr	r3, [r7, #12]
9000c39c:	429a      	cmp	r2, r3
9000c39e:	d106      	bne.n	9000c3ae <netif_add+0xee>
9000c3a0:	4b24      	ldr	r3, [pc, #144]	; (9000c434 <netif_add+0x174>)
9000c3a2:	f240 128b 	movw	r2, #395	; 0x18b
9000c3a6:	492b      	ldr	r1, [pc, #172]	; (9000c454 <netif_add+0x194>)
9000c3a8:	4824      	ldr	r0, [pc, #144]	; (9000c43c <netif_add+0x17c>)
9000c3aa:	f00a fc49 	bl	90016c40 <iprintf>
        num_netifs++;
9000c3ae:	693b      	ldr	r3, [r7, #16]
9000c3b0:	3301      	adds	r3, #1
9000c3b2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
9000c3b4:	693b      	ldr	r3, [r7, #16]
9000c3b6:	2bff      	cmp	r3, #255	; 0xff
9000c3b8:	dd06      	ble.n	9000c3c8 <netif_add+0x108>
9000c3ba:	4b1e      	ldr	r3, [pc, #120]	; (9000c434 <netif_add+0x174>)
9000c3bc:	f240 128d 	movw	r2, #397	; 0x18d
9000c3c0:	4925      	ldr	r1, [pc, #148]	; (9000c458 <netif_add+0x198>)
9000c3c2:	481e      	ldr	r0, [pc, #120]	; (9000c43c <netif_add+0x17c>)
9000c3c4:	f00a fc3c 	bl	90016c40 <iprintf>
        if (netif2->num == netif->num) {
9000c3c8:	697b      	ldr	r3, [r7, #20]
9000c3ca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
9000c3ce:	68fb      	ldr	r3, [r7, #12]
9000c3d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000c3d4:	429a      	cmp	r2, r3
9000c3d6:	d108      	bne.n	9000c3ea <netif_add+0x12a>
          netif->num++;
9000c3d8:	68fb      	ldr	r3, [r7, #12]
9000c3da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000c3de:	3301      	adds	r3, #1
9000c3e0:	b2da      	uxtb	r2, r3
9000c3e2:	68fb      	ldr	r3, [r7, #12]
9000c3e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
9000c3e8:	e005      	b.n	9000c3f6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
9000c3ea:	697b      	ldr	r3, [r7, #20]
9000c3ec:	681b      	ldr	r3, [r3, #0]
9000c3ee:	617b      	str	r3, [r7, #20]
9000c3f0:	697b      	ldr	r3, [r7, #20]
9000c3f2:	2b00      	cmp	r3, #0
9000c3f4:	d1d0      	bne.n	9000c398 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
9000c3f6:	697b      	ldr	r3, [r7, #20]
9000c3f8:	2b00      	cmp	r3, #0
9000c3fa:	d1be      	bne.n	9000c37a <netif_add+0xba>
  }
  if (netif->num == 254) {
9000c3fc:	68fb      	ldr	r3, [r7, #12]
9000c3fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000c402:	2bfe      	cmp	r3, #254	; 0xfe
9000c404:	d103      	bne.n	9000c40e <netif_add+0x14e>
    netif_num = 0;
9000c406:	4b11      	ldr	r3, [pc, #68]	; (9000c44c <netif_add+0x18c>)
9000c408:	2200      	movs	r2, #0
9000c40a:	701a      	strb	r2, [r3, #0]
9000c40c:	e006      	b.n	9000c41c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
9000c40e:	68fb      	ldr	r3, [r7, #12]
9000c410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000c414:	3301      	adds	r3, #1
9000c416:	b2da      	uxtb	r2, r3
9000c418:	4b0c      	ldr	r3, [pc, #48]	; (9000c44c <netif_add+0x18c>)
9000c41a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
9000c41c:	4b0c      	ldr	r3, [pc, #48]	; (9000c450 <netif_add+0x190>)
9000c41e:	681a      	ldr	r2, [r3, #0]
9000c420:	68fb      	ldr	r3, [r7, #12]
9000c422:	601a      	str	r2, [r3, #0]
  netif_list = netif;
9000c424:	4a0a      	ldr	r2, [pc, #40]	; (9000c450 <netif_add+0x190>)
9000c426:	68fb      	ldr	r3, [r7, #12]
9000c428:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
9000c42a:	68fb      	ldr	r3, [r7, #12]
}
9000c42c:	4618      	mov	r0, r3
9000c42e:	3718      	adds	r7, #24
9000c430:	46bd      	mov	sp, r7
9000c432:	bd80      	pop	{r7, pc}
9000c434:	90018984 	.word	0x90018984
9000c438:	90018a18 	.word	0x90018a18
9000c43c:	900189d4 	.word	0x900189d4
9000c440:	90018a34 	.word	0x90018a34
9000c444:	9001bdd4 	.word	0x9001bdd4
9000c448:	9000c86b 	.word	0x9000c86b
9000c44c:	2000d5c4 	.word	0x2000d5c4
9000c450:	2000d5bc 	.word	0x2000d5bc
9000c454:	90018a58 	.word	0x90018a58
9000c458:	90018a6c 	.word	0x90018a6c

9000c45c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
9000c45c:	b580      	push	{r7, lr}
9000c45e:	b082      	sub	sp, #8
9000c460:	af00      	add	r7, sp, #0
9000c462:	6078      	str	r0, [r7, #4]
9000c464:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
9000c466:	6839      	ldr	r1, [r7, #0]
9000c468:	6878      	ldr	r0, [r7, #4]
9000c46a:	f002 fe4f 	bl	9000f10c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
9000c46e:	6839      	ldr	r1, [r7, #0]
9000c470:	6878      	ldr	r0, [r7, #4]
9000c472:	f007 fd01 	bl	90013e78 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
9000c476:	bf00      	nop
9000c478:	3708      	adds	r7, #8
9000c47a:	46bd      	mov	sp, r7
9000c47c:	bd80      	pop	{r7, pc}
	...

9000c480 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
9000c480:	b580      	push	{r7, lr}
9000c482:	b086      	sub	sp, #24
9000c484:	af00      	add	r7, sp, #0
9000c486:	60f8      	str	r0, [r7, #12]
9000c488:	60b9      	str	r1, [r7, #8]
9000c48a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
9000c48c:	68bb      	ldr	r3, [r7, #8]
9000c48e:	2b00      	cmp	r3, #0
9000c490:	d106      	bne.n	9000c4a0 <netif_do_set_ipaddr+0x20>
9000c492:	4b1d      	ldr	r3, [pc, #116]	; (9000c508 <netif_do_set_ipaddr+0x88>)
9000c494:	f240 12cb 	movw	r2, #459	; 0x1cb
9000c498:	491c      	ldr	r1, [pc, #112]	; (9000c50c <netif_do_set_ipaddr+0x8c>)
9000c49a:	481d      	ldr	r0, [pc, #116]	; (9000c510 <netif_do_set_ipaddr+0x90>)
9000c49c:	f00a fbd0 	bl	90016c40 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
9000c4a0:	687b      	ldr	r3, [r7, #4]
9000c4a2:	2b00      	cmp	r3, #0
9000c4a4:	d106      	bne.n	9000c4b4 <netif_do_set_ipaddr+0x34>
9000c4a6:	4b18      	ldr	r3, [pc, #96]	; (9000c508 <netif_do_set_ipaddr+0x88>)
9000c4a8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
9000c4ac:	4917      	ldr	r1, [pc, #92]	; (9000c50c <netif_do_set_ipaddr+0x8c>)
9000c4ae:	4818      	ldr	r0, [pc, #96]	; (9000c510 <netif_do_set_ipaddr+0x90>)
9000c4b0:	f00a fbc6 	bl	90016c40 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
9000c4b4:	68bb      	ldr	r3, [r7, #8]
9000c4b6:	681a      	ldr	r2, [r3, #0]
9000c4b8:	68fb      	ldr	r3, [r7, #12]
9000c4ba:	3304      	adds	r3, #4
9000c4bc:	681b      	ldr	r3, [r3, #0]
9000c4be:	429a      	cmp	r2, r3
9000c4c0:	d01c      	beq.n	9000c4fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
9000c4c2:	68bb      	ldr	r3, [r7, #8]
9000c4c4:	681b      	ldr	r3, [r3, #0]
9000c4c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
9000c4c8:	68fb      	ldr	r3, [r7, #12]
9000c4ca:	3304      	adds	r3, #4
9000c4cc:	681a      	ldr	r2, [r3, #0]
9000c4ce:	687b      	ldr	r3, [r7, #4]
9000c4d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
9000c4d2:	f107 0314 	add.w	r3, r7, #20
9000c4d6:	4619      	mov	r1, r3
9000c4d8:	6878      	ldr	r0, [r7, #4]
9000c4da:	f7ff ffbf 	bl	9000c45c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
9000c4de:	68bb      	ldr	r3, [r7, #8]
9000c4e0:	2b00      	cmp	r3, #0
9000c4e2:	d002      	beq.n	9000c4ea <netif_do_set_ipaddr+0x6a>
9000c4e4:	68bb      	ldr	r3, [r7, #8]
9000c4e6:	681b      	ldr	r3, [r3, #0]
9000c4e8:	e000      	b.n	9000c4ec <netif_do_set_ipaddr+0x6c>
9000c4ea:	2300      	movs	r3, #0
9000c4ec:	68fa      	ldr	r2, [r7, #12]
9000c4ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
9000c4f0:	2101      	movs	r1, #1
9000c4f2:	68f8      	ldr	r0, [r7, #12]
9000c4f4:	f000 f8d2 	bl	9000c69c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
9000c4f8:	2301      	movs	r3, #1
9000c4fa:	e000      	b.n	9000c4fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
9000c4fc:	2300      	movs	r3, #0
}
9000c4fe:	4618      	mov	r0, r3
9000c500:	3718      	adds	r7, #24
9000c502:	46bd      	mov	sp, r7
9000c504:	bd80      	pop	{r7, pc}
9000c506:	bf00      	nop
9000c508:	90018984 	.word	0x90018984
9000c50c:	90018a9c 	.word	0x90018a9c
9000c510:	900189d4 	.word	0x900189d4

9000c514 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
9000c514:	b480      	push	{r7}
9000c516:	b085      	sub	sp, #20
9000c518:	af00      	add	r7, sp, #0
9000c51a:	60f8      	str	r0, [r7, #12]
9000c51c:	60b9      	str	r1, [r7, #8]
9000c51e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
9000c520:	68bb      	ldr	r3, [r7, #8]
9000c522:	681a      	ldr	r2, [r3, #0]
9000c524:	68fb      	ldr	r3, [r7, #12]
9000c526:	3308      	adds	r3, #8
9000c528:	681b      	ldr	r3, [r3, #0]
9000c52a:	429a      	cmp	r2, r3
9000c52c:	d00a      	beq.n	9000c544 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
9000c52e:	68bb      	ldr	r3, [r7, #8]
9000c530:	2b00      	cmp	r3, #0
9000c532:	d002      	beq.n	9000c53a <netif_do_set_netmask+0x26>
9000c534:	68bb      	ldr	r3, [r7, #8]
9000c536:	681b      	ldr	r3, [r3, #0]
9000c538:	e000      	b.n	9000c53c <netif_do_set_netmask+0x28>
9000c53a:	2300      	movs	r3, #0
9000c53c:	68fa      	ldr	r2, [r7, #12]
9000c53e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
9000c540:	2301      	movs	r3, #1
9000c542:	e000      	b.n	9000c546 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
9000c544:	2300      	movs	r3, #0
}
9000c546:	4618      	mov	r0, r3
9000c548:	3714      	adds	r7, #20
9000c54a:	46bd      	mov	sp, r7
9000c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c550:	4770      	bx	lr

9000c552 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
9000c552:	b480      	push	{r7}
9000c554:	b085      	sub	sp, #20
9000c556:	af00      	add	r7, sp, #0
9000c558:	60f8      	str	r0, [r7, #12]
9000c55a:	60b9      	str	r1, [r7, #8]
9000c55c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
9000c55e:	68bb      	ldr	r3, [r7, #8]
9000c560:	681a      	ldr	r2, [r3, #0]
9000c562:	68fb      	ldr	r3, [r7, #12]
9000c564:	330c      	adds	r3, #12
9000c566:	681b      	ldr	r3, [r3, #0]
9000c568:	429a      	cmp	r2, r3
9000c56a:	d00a      	beq.n	9000c582 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
9000c56c:	68bb      	ldr	r3, [r7, #8]
9000c56e:	2b00      	cmp	r3, #0
9000c570:	d002      	beq.n	9000c578 <netif_do_set_gw+0x26>
9000c572:	68bb      	ldr	r3, [r7, #8]
9000c574:	681b      	ldr	r3, [r3, #0]
9000c576:	e000      	b.n	9000c57a <netif_do_set_gw+0x28>
9000c578:	2300      	movs	r3, #0
9000c57a:	68fa      	ldr	r2, [r7, #12]
9000c57c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
9000c57e:	2301      	movs	r3, #1
9000c580:	e000      	b.n	9000c584 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
9000c582:	2300      	movs	r3, #0
}
9000c584:	4618      	mov	r0, r3
9000c586:	3714      	adds	r7, #20
9000c588:	46bd      	mov	sp, r7
9000c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c58e:	4770      	bx	lr

9000c590 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
9000c590:	b580      	push	{r7, lr}
9000c592:	b088      	sub	sp, #32
9000c594:	af00      	add	r7, sp, #0
9000c596:	60f8      	str	r0, [r7, #12]
9000c598:	60b9      	str	r1, [r7, #8]
9000c59a:	607a      	str	r2, [r7, #4]
9000c59c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
9000c59e:	2300      	movs	r3, #0
9000c5a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
9000c5a2:	2300      	movs	r3, #0
9000c5a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
9000c5a6:	68bb      	ldr	r3, [r7, #8]
9000c5a8:	2b00      	cmp	r3, #0
9000c5aa:	d101      	bne.n	9000c5b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
9000c5ac:	4b1c      	ldr	r3, [pc, #112]	; (9000c620 <netif_set_addr+0x90>)
9000c5ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
9000c5b0:	687b      	ldr	r3, [r7, #4]
9000c5b2:	2b00      	cmp	r3, #0
9000c5b4:	d101      	bne.n	9000c5ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
9000c5b6:	4b1a      	ldr	r3, [pc, #104]	; (9000c620 <netif_set_addr+0x90>)
9000c5b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
9000c5ba:	683b      	ldr	r3, [r7, #0]
9000c5bc:	2b00      	cmp	r3, #0
9000c5be:	d101      	bne.n	9000c5c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
9000c5c0:	4b17      	ldr	r3, [pc, #92]	; (9000c620 <netif_set_addr+0x90>)
9000c5c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
9000c5c4:	68bb      	ldr	r3, [r7, #8]
9000c5c6:	2b00      	cmp	r3, #0
9000c5c8:	d003      	beq.n	9000c5d2 <netif_set_addr+0x42>
9000c5ca:	68bb      	ldr	r3, [r7, #8]
9000c5cc:	681b      	ldr	r3, [r3, #0]
9000c5ce:	2b00      	cmp	r3, #0
9000c5d0:	d101      	bne.n	9000c5d6 <netif_set_addr+0x46>
9000c5d2:	2301      	movs	r3, #1
9000c5d4:	e000      	b.n	9000c5d8 <netif_set_addr+0x48>
9000c5d6:	2300      	movs	r3, #0
9000c5d8:	617b      	str	r3, [r7, #20]
  if (remove) {
9000c5da:	697b      	ldr	r3, [r7, #20]
9000c5dc:	2b00      	cmp	r3, #0
9000c5de:	d006      	beq.n	9000c5ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
9000c5e0:	f107 0310 	add.w	r3, r7, #16
9000c5e4:	461a      	mov	r2, r3
9000c5e6:	68b9      	ldr	r1, [r7, #8]
9000c5e8:	68f8      	ldr	r0, [r7, #12]
9000c5ea:	f7ff ff49 	bl	9000c480 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
9000c5ee:	69fa      	ldr	r2, [r7, #28]
9000c5f0:	6879      	ldr	r1, [r7, #4]
9000c5f2:	68f8      	ldr	r0, [r7, #12]
9000c5f4:	f7ff ff8e 	bl	9000c514 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
9000c5f8:	69ba      	ldr	r2, [r7, #24]
9000c5fa:	6839      	ldr	r1, [r7, #0]
9000c5fc:	68f8      	ldr	r0, [r7, #12]
9000c5fe:	f7ff ffa8 	bl	9000c552 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
9000c602:	697b      	ldr	r3, [r7, #20]
9000c604:	2b00      	cmp	r3, #0
9000c606:	d106      	bne.n	9000c616 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
9000c608:	f107 0310 	add.w	r3, r7, #16
9000c60c:	461a      	mov	r2, r3
9000c60e:	68b9      	ldr	r1, [r7, #8]
9000c610:	68f8      	ldr	r0, [r7, #12]
9000c612:	f7ff ff35 	bl	9000c480 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
9000c616:	bf00      	nop
9000c618:	3720      	adds	r7, #32
9000c61a:	46bd      	mov	sp, r7
9000c61c:	bd80      	pop	{r7, pc}
9000c61e:	bf00      	nop
9000c620:	9001bdd4 	.word	0x9001bdd4

9000c624 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
9000c624:	b480      	push	{r7}
9000c626:	b083      	sub	sp, #12
9000c628:	af00      	add	r7, sp, #0
9000c62a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
9000c62c:	4a04      	ldr	r2, [pc, #16]	; (9000c640 <netif_set_default+0x1c>)
9000c62e:	687b      	ldr	r3, [r7, #4]
9000c630:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
9000c632:	bf00      	nop
9000c634:	370c      	adds	r7, #12
9000c636:	46bd      	mov	sp, r7
9000c638:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c63c:	4770      	bx	lr
9000c63e:	bf00      	nop
9000c640:	2000d5c0 	.word	0x2000d5c0

9000c644 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
9000c644:	b580      	push	{r7, lr}
9000c646:	b082      	sub	sp, #8
9000c648:	af00      	add	r7, sp, #0
9000c64a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
9000c64c:	687b      	ldr	r3, [r7, #4]
9000c64e:	2b00      	cmp	r3, #0
9000c650:	d107      	bne.n	9000c662 <netif_set_up+0x1e>
9000c652:	4b0f      	ldr	r3, [pc, #60]	; (9000c690 <netif_set_up+0x4c>)
9000c654:	f44f 7254 	mov.w	r2, #848	; 0x350
9000c658:	490e      	ldr	r1, [pc, #56]	; (9000c694 <netif_set_up+0x50>)
9000c65a:	480f      	ldr	r0, [pc, #60]	; (9000c698 <netif_set_up+0x54>)
9000c65c:	f00a faf0 	bl	90016c40 <iprintf>
9000c660:	e013      	b.n	9000c68a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
9000c662:	687b      	ldr	r3, [r7, #4]
9000c664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c668:	f003 0301 	and.w	r3, r3, #1
9000c66c:	2b00      	cmp	r3, #0
9000c66e:	d10c      	bne.n	9000c68a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
9000c670:	687b      	ldr	r3, [r7, #4]
9000c672:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c676:	f043 0301 	orr.w	r3, r3, #1
9000c67a:	b2da      	uxtb	r2, r3
9000c67c:	687b      	ldr	r3, [r7, #4]
9000c67e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
9000c682:	2103      	movs	r1, #3
9000c684:	6878      	ldr	r0, [r7, #4]
9000c686:	f000 f809 	bl	9000c69c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
9000c68a:	3708      	adds	r7, #8
9000c68c:	46bd      	mov	sp, r7
9000c68e:	bd80      	pop	{r7, pc}
9000c690:	90018984 	.word	0x90018984
9000c694:	90018b0c 	.word	0x90018b0c
9000c698:	900189d4 	.word	0x900189d4

9000c69c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
9000c69c:	b580      	push	{r7, lr}
9000c69e:	b082      	sub	sp, #8
9000c6a0:	af00      	add	r7, sp, #0
9000c6a2:	6078      	str	r0, [r7, #4]
9000c6a4:	460b      	mov	r3, r1
9000c6a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
9000c6a8:	687b      	ldr	r3, [r7, #4]
9000c6aa:	2b00      	cmp	r3, #0
9000c6ac:	d106      	bne.n	9000c6bc <netif_issue_reports+0x20>
9000c6ae:	4b18      	ldr	r3, [pc, #96]	; (9000c710 <netif_issue_reports+0x74>)
9000c6b0:	f240 326d 	movw	r2, #877	; 0x36d
9000c6b4:	4917      	ldr	r1, [pc, #92]	; (9000c714 <netif_issue_reports+0x78>)
9000c6b6:	4818      	ldr	r0, [pc, #96]	; (9000c718 <netif_issue_reports+0x7c>)
9000c6b8:	f00a fac2 	bl	90016c40 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
9000c6bc:	687b      	ldr	r3, [r7, #4]
9000c6be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c6c2:	f003 0304 	and.w	r3, r3, #4
9000c6c6:	2b00      	cmp	r3, #0
9000c6c8:	d01e      	beq.n	9000c708 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
9000c6ca:	687b      	ldr	r3, [r7, #4]
9000c6cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c6d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
9000c6d4:	2b00      	cmp	r3, #0
9000c6d6:	d017      	beq.n	9000c708 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
9000c6d8:	78fb      	ldrb	r3, [r7, #3]
9000c6da:	f003 0301 	and.w	r3, r3, #1
9000c6de:	2b00      	cmp	r3, #0
9000c6e0:	d013      	beq.n	9000c70a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
9000c6e2:	687b      	ldr	r3, [r7, #4]
9000c6e4:	3304      	adds	r3, #4
9000c6e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
9000c6e8:	2b00      	cmp	r3, #0
9000c6ea:	d00e      	beq.n	9000c70a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
9000c6ec:	687b      	ldr	r3, [r7, #4]
9000c6ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c6f2:	f003 0308 	and.w	r3, r3, #8
9000c6f6:	2b00      	cmp	r3, #0
9000c6f8:	d007      	beq.n	9000c70a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
9000c6fa:	687b      	ldr	r3, [r7, #4]
9000c6fc:	3304      	adds	r3, #4
9000c6fe:	4619      	mov	r1, r3
9000c700:	6878      	ldr	r0, [r7, #4]
9000c702:	f008 fb23 	bl	90014d4c <etharp_request>
9000c706:	e000      	b.n	9000c70a <netif_issue_reports+0x6e>
    return;
9000c708:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
9000c70a:	3708      	adds	r7, #8
9000c70c:	46bd      	mov	sp, r7
9000c70e:	bd80      	pop	{r7, pc}
9000c710:	90018984 	.word	0x90018984
9000c714:	90018b28 	.word	0x90018b28
9000c718:	900189d4 	.word	0x900189d4

9000c71c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
9000c71c:	b580      	push	{r7, lr}
9000c71e:	b082      	sub	sp, #8
9000c720:	af00      	add	r7, sp, #0
9000c722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
9000c724:	687b      	ldr	r3, [r7, #4]
9000c726:	2b00      	cmp	r3, #0
9000c728:	d107      	bne.n	9000c73a <netif_set_down+0x1e>
9000c72a:	4b12      	ldr	r3, [pc, #72]	; (9000c774 <netif_set_down+0x58>)
9000c72c:	f240 329b 	movw	r2, #923	; 0x39b
9000c730:	4911      	ldr	r1, [pc, #68]	; (9000c778 <netif_set_down+0x5c>)
9000c732:	4812      	ldr	r0, [pc, #72]	; (9000c77c <netif_set_down+0x60>)
9000c734:	f00a fa84 	bl	90016c40 <iprintf>
9000c738:	e019      	b.n	9000c76e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
9000c73a:	687b      	ldr	r3, [r7, #4]
9000c73c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c740:	f003 0301 	and.w	r3, r3, #1
9000c744:	2b00      	cmp	r3, #0
9000c746:	d012      	beq.n	9000c76e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
9000c748:	687b      	ldr	r3, [r7, #4]
9000c74a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c74e:	f023 0301 	bic.w	r3, r3, #1
9000c752:	b2da      	uxtb	r2, r3
9000c754:	687b      	ldr	r3, [r7, #4]
9000c756:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
9000c75a:	687b      	ldr	r3, [r7, #4]
9000c75c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c760:	f003 0308 	and.w	r3, r3, #8
9000c764:	2b00      	cmp	r3, #0
9000c766:	d002      	beq.n	9000c76e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
9000c768:	6878      	ldr	r0, [r7, #4]
9000c76a:	f007 fead 	bl	900144c8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
9000c76e:	3708      	adds	r7, #8
9000c770:	46bd      	mov	sp, r7
9000c772:	bd80      	pop	{r7, pc}
9000c774:	90018984 	.word	0x90018984
9000c778:	90018b4c 	.word	0x90018b4c
9000c77c:	900189d4 	.word	0x900189d4

9000c780 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
9000c780:	b580      	push	{r7, lr}
9000c782:	b082      	sub	sp, #8
9000c784:	af00      	add	r7, sp, #0
9000c786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
9000c788:	687b      	ldr	r3, [r7, #4]
9000c78a:	2b00      	cmp	r3, #0
9000c78c:	d107      	bne.n	9000c79e <netif_set_link_up+0x1e>
9000c78e:	4b13      	ldr	r3, [pc, #76]	; (9000c7dc <netif_set_link_up+0x5c>)
9000c790:	f44f 7278 	mov.w	r2, #992	; 0x3e0
9000c794:	4912      	ldr	r1, [pc, #72]	; (9000c7e0 <netif_set_link_up+0x60>)
9000c796:	4813      	ldr	r0, [pc, #76]	; (9000c7e4 <netif_set_link_up+0x64>)
9000c798:	f00a fa52 	bl	90016c40 <iprintf>
9000c79c:	e01b      	b.n	9000c7d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
9000c79e:	687b      	ldr	r3, [r7, #4]
9000c7a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c7a4:	f003 0304 	and.w	r3, r3, #4
9000c7a8:	2b00      	cmp	r3, #0
9000c7aa:	d114      	bne.n	9000c7d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
9000c7ac:	687b      	ldr	r3, [r7, #4]
9000c7ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c7b2:	f043 0304 	orr.w	r3, r3, #4
9000c7b6:	b2da      	uxtb	r2, r3
9000c7b8:	687b      	ldr	r3, [r7, #4]
9000c7ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
9000c7be:	2103      	movs	r1, #3
9000c7c0:	6878      	ldr	r0, [r7, #4]
9000c7c2:	f7ff ff6b 	bl	9000c69c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
9000c7c6:	687b      	ldr	r3, [r7, #4]
9000c7c8:	69db      	ldr	r3, [r3, #28]
9000c7ca:	2b00      	cmp	r3, #0
9000c7cc:	d003      	beq.n	9000c7d6 <netif_set_link_up+0x56>
9000c7ce:	687b      	ldr	r3, [r7, #4]
9000c7d0:	69db      	ldr	r3, [r3, #28]
9000c7d2:	6878      	ldr	r0, [r7, #4]
9000c7d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
9000c7d6:	3708      	adds	r7, #8
9000c7d8:	46bd      	mov	sp, r7
9000c7da:	bd80      	pop	{r7, pc}
9000c7dc:	90018984 	.word	0x90018984
9000c7e0:	90018b6c 	.word	0x90018b6c
9000c7e4:	900189d4 	.word	0x900189d4

9000c7e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
9000c7e8:	b580      	push	{r7, lr}
9000c7ea:	b082      	sub	sp, #8
9000c7ec:	af00      	add	r7, sp, #0
9000c7ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
9000c7f0:	687b      	ldr	r3, [r7, #4]
9000c7f2:	2b00      	cmp	r3, #0
9000c7f4:	d107      	bne.n	9000c806 <netif_set_link_down+0x1e>
9000c7f6:	4b11      	ldr	r3, [pc, #68]	; (9000c83c <netif_set_link_down+0x54>)
9000c7f8:	f240 4206 	movw	r2, #1030	; 0x406
9000c7fc:	4910      	ldr	r1, [pc, #64]	; (9000c840 <netif_set_link_down+0x58>)
9000c7fe:	4811      	ldr	r0, [pc, #68]	; (9000c844 <netif_set_link_down+0x5c>)
9000c800:	f00a fa1e 	bl	90016c40 <iprintf>
9000c804:	e017      	b.n	9000c836 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
9000c806:	687b      	ldr	r3, [r7, #4]
9000c808:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c80c:	f003 0304 	and.w	r3, r3, #4
9000c810:	2b00      	cmp	r3, #0
9000c812:	d010      	beq.n	9000c836 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
9000c814:	687b      	ldr	r3, [r7, #4]
9000c816:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000c81a:	f023 0304 	bic.w	r3, r3, #4
9000c81e:	b2da      	uxtb	r2, r3
9000c820:	687b      	ldr	r3, [r7, #4]
9000c822:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
9000c826:	687b      	ldr	r3, [r7, #4]
9000c828:	69db      	ldr	r3, [r3, #28]
9000c82a:	2b00      	cmp	r3, #0
9000c82c:	d003      	beq.n	9000c836 <netif_set_link_down+0x4e>
9000c82e:	687b      	ldr	r3, [r7, #4]
9000c830:	69db      	ldr	r3, [r3, #28]
9000c832:	6878      	ldr	r0, [r7, #4]
9000c834:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
9000c836:	3708      	adds	r7, #8
9000c838:	46bd      	mov	sp, r7
9000c83a:	bd80      	pop	{r7, pc}
9000c83c:	90018984 	.word	0x90018984
9000c840:	90018b90 	.word	0x90018b90
9000c844:	900189d4 	.word	0x900189d4

9000c848 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
9000c848:	b480      	push	{r7}
9000c84a:	b083      	sub	sp, #12
9000c84c:	af00      	add	r7, sp, #0
9000c84e:	6078      	str	r0, [r7, #4]
9000c850:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
9000c852:	687b      	ldr	r3, [r7, #4]
9000c854:	2b00      	cmp	r3, #0
9000c856:	d002      	beq.n	9000c85e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
9000c858:	687b      	ldr	r3, [r7, #4]
9000c85a:	683a      	ldr	r2, [r7, #0]
9000c85c:	61da      	str	r2, [r3, #28]
  }
}
9000c85e:	bf00      	nop
9000c860:	370c      	adds	r7, #12
9000c862:	46bd      	mov	sp, r7
9000c864:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c868:	4770      	bx	lr

9000c86a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
9000c86a:	b480      	push	{r7}
9000c86c:	b085      	sub	sp, #20
9000c86e:	af00      	add	r7, sp, #0
9000c870:	60f8      	str	r0, [r7, #12]
9000c872:	60b9      	str	r1, [r7, #8]
9000c874:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
9000c876:	f06f 030b 	mvn.w	r3, #11
}
9000c87a:	4618      	mov	r0, r3
9000c87c:	3714      	adds	r7, #20
9000c87e:	46bd      	mov	sp, r7
9000c880:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c884:	4770      	bx	lr
	...

9000c888 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
9000c888:	b480      	push	{r7}
9000c88a:	b085      	sub	sp, #20
9000c88c:	af00      	add	r7, sp, #0
9000c88e:	4603      	mov	r3, r0
9000c890:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
9000c892:	79fb      	ldrb	r3, [r7, #7]
9000c894:	2b00      	cmp	r3, #0
9000c896:	d013      	beq.n	9000c8c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
9000c898:	4b0d      	ldr	r3, [pc, #52]	; (9000c8d0 <netif_get_by_index+0x48>)
9000c89a:	681b      	ldr	r3, [r3, #0]
9000c89c:	60fb      	str	r3, [r7, #12]
9000c89e:	e00c      	b.n	9000c8ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
9000c8a0:	68fb      	ldr	r3, [r7, #12]
9000c8a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000c8a6:	3301      	adds	r3, #1
9000c8a8:	b2db      	uxtb	r3, r3
9000c8aa:	79fa      	ldrb	r2, [r7, #7]
9000c8ac:	429a      	cmp	r2, r3
9000c8ae:	d101      	bne.n	9000c8b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
9000c8b0:	68fb      	ldr	r3, [r7, #12]
9000c8b2:	e006      	b.n	9000c8c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
9000c8b4:	68fb      	ldr	r3, [r7, #12]
9000c8b6:	681b      	ldr	r3, [r3, #0]
9000c8b8:	60fb      	str	r3, [r7, #12]
9000c8ba:	68fb      	ldr	r3, [r7, #12]
9000c8bc:	2b00      	cmp	r3, #0
9000c8be:	d1ef      	bne.n	9000c8a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
9000c8c0:	2300      	movs	r3, #0
}
9000c8c2:	4618      	mov	r0, r3
9000c8c4:	3714      	adds	r7, #20
9000c8c6:	46bd      	mov	sp, r7
9000c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c8cc:	4770      	bx	lr
9000c8ce:	bf00      	nop
9000c8d0:	2000d5bc 	.word	0x2000d5bc

9000c8d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
9000c8d4:	b580      	push	{r7, lr}
9000c8d6:	b082      	sub	sp, #8
9000c8d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
9000c8da:	f009 ff5b 	bl	90016794 <sys_arch_protect>
9000c8de:	6038      	str	r0, [r7, #0]
9000c8e0:	4b0d      	ldr	r3, [pc, #52]	; (9000c918 <pbuf_free_ooseq+0x44>)
9000c8e2:	2200      	movs	r2, #0
9000c8e4:	701a      	strb	r2, [r3, #0]
9000c8e6:	6838      	ldr	r0, [r7, #0]
9000c8e8:	f009 ff62 	bl	900167b0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
9000c8ec:	4b0b      	ldr	r3, [pc, #44]	; (9000c91c <pbuf_free_ooseq+0x48>)
9000c8ee:	681b      	ldr	r3, [r3, #0]
9000c8f0:	607b      	str	r3, [r7, #4]
9000c8f2:	e00a      	b.n	9000c90a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
9000c8f4:	687b      	ldr	r3, [r7, #4]
9000c8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000c8f8:	2b00      	cmp	r3, #0
9000c8fa:	d003      	beq.n	9000c904 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
9000c8fc:	6878      	ldr	r0, [r7, #4]
9000c8fe:	f002 fc43 	bl	9000f188 <tcp_free_ooseq>
      return;
9000c902:	e005      	b.n	9000c910 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
9000c904:	687b      	ldr	r3, [r7, #4]
9000c906:	68db      	ldr	r3, [r3, #12]
9000c908:	607b      	str	r3, [r7, #4]
9000c90a:	687b      	ldr	r3, [r7, #4]
9000c90c:	2b00      	cmp	r3, #0
9000c90e:	d1f1      	bne.n	9000c8f4 <pbuf_free_ooseq+0x20>
    }
  }
}
9000c910:	3708      	adds	r7, #8
9000c912:	46bd      	mov	sp, r7
9000c914:	bd80      	pop	{r7, pc}
9000c916:	bf00      	nop
9000c918:	2000d5c5 	.word	0x2000d5c5
9000c91c:	2000d5d4 	.word	0x2000d5d4

9000c920 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
9000c920:	b580      	push	{r7, lr}
9000c922:	b082      	sub	sp, #8
9000c924:	af00      	add	r7, sp, #0
9000c926:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
9000c928:	f7ff ffd4 	bl	9000c8d4 <pbuf_free_ooseq>
}
9000c92c:	bf00      	nop
9000c92e:	3708      	adds	r7, #8
9000c930:	46bd      	mov	sp, r7
9000c932:	bd80      	pop	{r7, pc}

9000c934 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
9000c934:	b580      	push	{r7, lr}
9000c936:	b082      	sub	sp, #8
9000c938:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
9000c93a:	f009 ff2b 	bl	90016794 <sys_arch_protect>
9000c93e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
9000c940:	4b0f      	ldr	r3, [pc, #60]	; (9000c980 <pbuf_pool_is_empty+0x4c>)
9000c942:	781b      	ldrb	r3, [r3, #0]
9000c944:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
9000c946:	4b0e      	ldr	r3, [pc, #56]	; (9000c980 <pbuf_pool_is_empty+0x4c>)
9000c948:	2201      	movs	r2, #1
9000c94a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
9000c94c:	6878      	ldr	r0, [r7, #4]
9000c94e:	f009 ff2f 	bl	900167b0 <sys_arch_unprotect>

  if (!queued) {
9000c952:	78fb      	ldrb	r3, [r7, #3]
9000c954:	2b00      	cmp	r3, #0
9000c956:	d10f      	bne.n	9000c978 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
9000c958:	2100      	movs	r1, #0
9000c95a:	480a      	ldr	r0, [pc, #40]	; (9000c984 <pbuf_pool_is_empty+0x50>)
9000c95c:	f7fe fe8e 	bl	9000b67c <tcpip_try_callback>
9000c960:	4603      	mov	r3, r0
9000c962:	2b00      	cmp	r3, #0
9000c964:	d008      	beq.n	9000c978 <pbuf_pool_is_empty+0x44>
9000c966:	f009 ff15 	bl	90016794 <sys_arch_protect>
9000c96a:	6078      	str	r0, [r7, #4]
9000c96c:	4b04      	ldr	r3, [pc, #16]	; (9000c980 <pbuf_pool_is_empty+0x4c>)
9000c96e:	2200      	movs	r2, #0
9000c970:	701a      	strb	r2, [r3, #0]
9000c972:	6878      	ldr	r0, [r7, #4]
9000c974:	f009 ff1c 	bl	900167b0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
9000c978:	bf00      	nop
9000c97a:	3708      	adds	r7, #8
9000c97c:	46bd      	mov	sp, r7
9000c97e:	bd80      	pop	{r7, pc}
9000c980:	2000d5c5 	.word	0x2000d5c5
9000c984:	9000c921 	.word	0x9000c921

9000c988 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
9000c988:	b480      	push	{r7}
9000c98a:	b085      	sub	sp, #20
9000c98c:	af00      	add	r7, sp, #0
9000c98e:	60f8      	str	r0, [r7, #12]
9000c990:	60b9      	str	r1, [r7, #8]
9000c992:	4611      	mov	r1, r2
9000c994:	461a      	mov	r2, r3
9000c996:	460b      	mov	r3, r1
9000c998:	80fb      	strh	r3, [r7, #6]
9000c99a:	4613      	mov	r3, r2
9000c99c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
9000c99e:	68fb      	ldr	r3, [r7, #12]
9000c9a0:	2200      	movs	r2, #0
9000c9a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
9000c9a4:	68fb      	ldr	r3, [r7, #12]
9000c9a6:	68ba      	ldr	r2, [r7, #8]
9000c9a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
9000c9aa:	68fb      	ldr	r3, [r7, #12]
9000c9ac:	88fa      	ldrh	r2, [r7, #6]
9000c9ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
9000c9b0:	68fb      	ldr	r3, [r7, #12]
9000c9b2:	88ba      	ldrh	r2, [r7, #4]
9000c9b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
9000c9b6:	8b3b      	ldrh	r3, [r7, #24]
9000c9b8:	b2da      	uxtb	r2, r3
9000c9ba:	68fb      	ldr	r3, [r7, #12]
9000c9bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
9000c9be:	68fb      	ldr	r3, [r7, #12]
9000c9c0:	7f3a      	ldrb	r2, [r7, #28]
9000c9c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
9000c9c4:	68fb      	ldr	r3, [r7, #12]
9000c9c6:	2201      	movs	r2, #1
9000c9c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
9000c9ca:	68fb      	ldr	r3, [r7, #12]
9000c9cc:	2200      	movs	r2, #0
9000c9ce:	73da      	strb	r2, [r3, #15]
}
9000c9d0:	bf00      	nop
9000c9d2:	3714      	adds	r7, #20
9000c9d4:	46bd      	mov	sp, r7
9000c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c9da:	4770      	bx	lr

9000c9dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
9000c9dc:	b580      	push	{r7, lr}
9000c9de:	b08c      	sub	sp, #48	; 0x30
9000c9e0:	af02      	add	r7, sp, #8
9000c9e2:	4603      	mov	r3, r0
9000c9e4:	71fb      	strb	r3, [r7, #7]
9000c9e6:	460b      	mov	r3, r1
9000c9e8:	80bb      	strh	r3, [r7, #4]
9000c9ea:	4613      	mov	r3, r2
9000c9ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
9000c9ee:	79fb      	ldrb	r3, [r7, #7]
9000c9f0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
9000c9f2:	887b      	ldrh	r3, [r7, #2]
9000c9f4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
9000c9f8:	d07f      	beq.n	9000cafa <pbuf_alloc+0x11e>
9000c9fa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
9000c9fe:	f300 80c8 	bgt.w	9000cb92 <pbuf_alloc+0x1b6>
9000ca02:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
9000ca06:	d010      	beq.n	9000ca2a <pbuf_alloc+0x4e>
9000ca08:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
9000ca0c:	f300 80c1 	bgt.w	9000cb92 <pbuf_alloc+0x1b6>
9000ca10:	2b01      	cmp	r3, #1
9000ca12:	d002      	beq.n	9000ca1a <pbuf_alloc+0x3e>
9000ca14:	2b41      	cmp	r3, #65	; 0x41
9000ca16:	f040 80bc 	bne.w	9000cb92 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
9000ca1a:	887a      	ldrh	r2, [r7, #2]
9000ca1c:	88bb      	ldrh	r3, [r7, #4]
9000ca1e:	4619      	mov	r1, r3
9000ca20:	2000      	movs	r0, #0
9000ca22:	f000 f8d1 	bl	9000cbc8 <pbuf_alloc_reference>
9000ca26:	6278      	str	r0, [r7, #36]	; 0x24
      break;
9000ca28:	e0bd      	b.n	9000cba6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
9000ca2a:	2300      	movs	r3, #0
9000ca2c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
9000ca2e:	2300      	movs	r3, #0
9000ca30:	61fb      	str	r3, [r7, #28]
      rem_len = length;
9000ca32:	88bb      	ldrh	r3, [r7, #4]
9000ca34:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
9000ca36:	200c      	movs	r0, #12
9000ca38:	f7ff fbbe 	bl	9000c1b8 <memp_malloc>
9000ca3c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
9000ca3e:	693b      	ldr	r3, [r7, #16]
9000ca40:	2b00      	cmp	r3, #0
9000ca42:	d109      	bne.n	9000ca58 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
9000ca44:	f7ff ff76 	bl	9000c934 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
9000ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ca4a:	2b00      	cmp	r3, #0
9000ca4c:	d002      	beq.n	9000ca54 <pbuf_alloc+0x78>
            pbuf_free(p);
9000ca4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000ca50:	f000 faa8 	bl	9000cfa4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
9000ca54:	2300      	movs	r3, #0
9000ca56:	e0a7      	b.n	9000cba8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
9000ca58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000ca5a:	3303      	adds	r3, #3
9000ca5c:	b29b      	uxth	r3, r3
9000ca5e:	f023 0303 	bic.w	r3, r3, #3
9000ca62:	b29b      	uxth	r3, r3
9000ca64:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
9000ca68:	b29b      	uxth	r3, r3
9000ca6a:	8b7a      	ldrh	r2, [r7, #26]
9000ca6c:	4293      	cmp	r3, r2
9000ca6e:	bf28      	it	cs
9000ca70:	4613      	movcs	r3, r2
9000ca72:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
9000ca74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000ca76:	3310      	adds	r3, #16
9000ca78:	693a      	ldr	r2, [r7, #16]
9000ca7a:	4413      	add	r3, r2
9000ca7c:	3303      	adds	r3, #3
9000ca7e:	f023 0303 	bic.w	r3, r3, #3
9000ca82:	4618      	mov	r0, r3
9000ca84:	89f9      	ldrh	r1, [r7, #14]
9000ca86:	8b7a      	ldrh	r2, [r7, #26]
9000ca88:	2300      	movs	r3, #0
9000ca8a:	9301      	str	r3, [sp, #4]
9000ca8c:	887b      	ldrh	r3, [r7, #2]
9000ca8e:	9300      	str	r3, [sp, #0]
9000ca90:	460b      	mov	r3, r1
9000ca92:	4601      	mov	r1, r0
9000ca94:	6938      	ldr	r0, [r7, #16]
9000ca96:	f7ff ff77 	bl	9000c988 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
9000ca9a:	693b      	ldr	r3, [r7, #16]
9000ca9c:	685b      	ldr	r3, [r3, #4]
9000ca9e:	f003 0303 	and.w	r3, r3, #3
9000caa2:	2b00      	cmp	r3, #0
9000caa4:	d006      	beq.n	9000cab4 <pbuf_alloc+0xd8>
9000caa6:	4b42      	ldr	r3, [pc, #264]	; (9000cbb0 <pbuf_alloc+0x1d4>)
9000caa8:	f44f 7280 	mov.w	r2, #256	; 0x100
9000caac:	4941      	ldr	r1, [pc, #260]	; (9000cbb4 <pbuf_alloc+0x1d8>)
9000caae:	4842      	ldr	r0, [pc, #264]	; (9000cbb8 <pbuf_alloc+0x1dc>)
9000cab0:	f00a f8c6 	bl	90016c40 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
9000cab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000cab6:	3303      	adds	r3, #3
9000cab8:	f023 0303 	bic.w	r3, r3, #3
9000cabc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
9000cac0:	d106      	bne.n	9000cad0 <pbuf_alloc+0xf4>
9000cac2:	4b3b      	ldr	r3, [pc, #236]	; (9000cbb0 <pbuf_alloc+0x1d4>)
9000cac4:	f44f 7281 	mov.w	r2, #258	; 0x102
9000cac8:	493c      	ldr	r1, [pc, #240]	; (9000cbbc <pbuf_alloc+0x1e0>)
9000caca:	483b      	ldr	r0, [pc, #236]	; (9000cbb8 <pbuf_alloc+0x1dc>)
9000cacc:	f00a f8b8 	bl	90016c40 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
9000cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cad2:	2b00      	cmp	r3, #0
9000cad4:	d102      	bne.n	9000cadc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
9000cad6:	693b      	ldr	r3, [r7, #16]
9000cad8:	627b      	str	r3, [r7, #36]	; 0x24
9000cada:	e002      	b.n	9000cae2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
9000cadc:	69fb      	ldr	r3, [r7, #28]
9000cade:	693a      	ldr	r2, [r7, #16]
9000cae0:	601a      	str	r2, [r3, #0]
        }
        last = q;
9000cae2:	693b      	ldr	r3, [r7, #16]
9000cae4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
9000cae6:	8b7a      	ldrh	r2, [r7, #26]
9000cae8:	89fb      	ldrh	r3, [r7, #14]
9000caea:	1ad3      	subs	r3, r2, r3
9000caec:	837b      	strh	r3, [r7, #26]
        offset = 0;
9000caee:	2300      	movs	r3, #0
9000caf0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
9000caf2:	8b7b      	ldrh	r3, [r7, #26]
9000caf4:	2b00      	cmp	r3, #0
9000caf6:	d19e      	bne.n	9000ca36 <pbuf_alloc+0x5a>
      break;
9000caf8:	e055      	b.n	9000cba6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
9000cafa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000cafc:	3303      	adds	r3, #3
9000cafe:	b29b      	uxth	r3, r3
9000cb00:	f023 0303 	bic.w	r3, r3, #3
9000cb04:	b29a      	uxth	r2, r3
9000cb06:	88bb      	ldrh	r3, [r7, #4]
9000cb08:	3303      	adds	r3, #3
9000cb0a:	b29b      	uxth	r3, r3
9000cb0c:	f023 0303 	bic.w	r3, r3, #3
9000cb10:	b29b      	uxth	r3, r3
9000cb12:	4413      	add	r3, r2
9000cb14:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
9000cb16:	8b3b      	ldrh	r3, [r7, #24]
9000cb18:	3310      	adds	r3, #16
9000cb1a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
9000cb1c:	8b3a      	ldrh	r2, [r7, #24]
9000cb1e:	88bb      	ldrh	r3, [r7, #4]
9000cb20:	3303      	adds	r3, #3
9000cb22:	f023 0303 	bic.w	r3, r3, #3
9000cb26:	429a      	cmp	r2, r3
9000cb28:	d306      	bcc.n	9000cb38 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
9000cb2a:	8afa      	ldrh	r2, [r7, #22]
9000cb2c:	88bb      	ldrh	r3, [r7, #4]
9000cb2e:	3303      	adds	r3, #3
9000cb30:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
9000cb34:	429a      	cmp	r2, r3
9000cb36:	d201      	bcs.n	9000cb3c <pbuf_alloc+0x160>
        return NULL;
9000cb38:	2300      	movs	r3, #0
9000cb3a:	e035      	b.n	9000cba8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
9000cb3c:	8afb      	ldrh	r3, [r7, #22]
9000cb3e:	4618      	mov	r0, r3
9000cb40:	f7ff f9b8 	bl	9000beb4 <mem_malloc>
9000cb44:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
9000cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cb48:	2b00      	cmp	r3, #0
9000cb4a:	d101      	bne.n	9000cb50 <pbuf_alloc+0x174>
        return NULL;
9000cb4c:	2300      	movs	r3, #0
9000cb4e:	e02b      	b.n	9000cba8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
9000cb50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000cb52:	3310      	adds	r3, #16
9000cb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000cb56:	4413      	add	r3, r2
9000cb58:	3303      	adds	r3, #3
9000cb5a:	f023 0303 	bic.w	r3, r3, #3
9000cb5e:	4618      	mov	r0, r3
9000cb60:	88b9      	ldrh	r1, [r7, #4]
9000cb62:	88ba      	ldrh	r2, [r7, #4]
9000cb64:	2300      	movs	r3, #0
9000cb66:	9301      	str	r3, [sp, #4]
9000cb68:	887b      	ldrh	r3, [r7, #2]
9000cb6a:	9300      	str	r3, [sp, #0]
9000cb6c:	460b      	mov	r3, r1
9000cb6e:	4601      	mov	r1, r0
9000cb70:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000cb72:	f7ff ff09 	bl	9000c988 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
9000cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cb78:	685b      	ldr	r3, [r3, #4]
9000cb7a:	f003 0303 	and.w	r3, r3, #3
9000cb7e:	2b00      	cmp	r3, #0
9000cb80:	d010      	beq.n	9000cba4 <pbuf_alloc+0x1c8>
9000cb82:	4b0b      	ldr	r3, [pc, #44]	; (9000cbb0 <pbuf_alloc+0x1d4>)
9000cb84:	f44f 7291 	mov.w	r2, #290	; 0x122
9000cb88:	490d      	ldr	r1, [pc, #52]	; (9000cbc0 <pbuf_alloc+0x1e4>)
9000cb8a:	480b      	ldr	r0, [pc, #44]	; (9000cbb8 <pbuf_alloc+0x1dc>)
9000cb8c:	f00a f858 	bl	90016c40 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
9000cb90:	e008      	b.n	9000cba4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
9000cb92:	4b07      	ldr	r3, [pc, #28]	; (9000cbb0 <pbuf_alloc+0x1d4>)
9000cb94:	f240 1227 	movw	r2, #295	; 0x127
9000cb98:	490a      	ldr	r1, [pc, #40]	; (9000cbc4 <pbuf_alloc+0x1e8>)
9000cb9a:	4807      	ldr	r0, [pc, #28]	; (9000cbb8 <pbuf_alloc+0x1dc>)
9000cb9c:	f00a f850 	bl	90016c40 <iprintf>
      return NULL;
9000cba0:	2300      	movs	r3, #0
9000cba2:	e001      	b.n	9000cba8 <pbuf_alloc+0x1cc>
      break;
9000cba4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
9000cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
9000cba8:	4618      	mov	r0, r3
9000cbaa:	3728      	adds	r7, #40	; 0x28
9000cbac:	46bd      	mov	sp, r7
9000cbae:	bd80      	pop	{r7, pc}
9000cbb0:	90018bb4 	.word	0x90018bb4
9000cbb4:	90018be4 	.word	0x90018be4
9000cbb8:	90018c14 	.word	0x90018c14
9000cbbc:	90018c3c 	.word	0x90018c3c
9000cbc0:	90018c70 	.word	0x90018c70
9000cbc4:	90018c9c 	.word	0x90018c9c

9000cbc8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
9000cbc8:	b580      	push	{r7, lr}
9000cbca:	b086      	sub	sp, #24
9000cbcc:	af02      	add	r7, sp, #8
9000cbce:	6078      	str	r0, [r7, #4]
9000cbd0:	460b      	mov	r3, r1
9000cbd2:	807b      	strh	r3, [r7, #2]
9000cbd4:	4613      	mov	r3, r2
9000cbd6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
9000cbd8:	883b      	ldrh	r3, [r7, #0]
9000cbda:	2b41      	cmp	r3, #65	; 0x41
9000cbdc:	d009      	beq.n	9000cbf2 <pbuf_alloc_reference+0x2a>
9000cbde:	883b      	ldrh	r3, [r7, #0]
9000cbe0:	2b01      	cmp	r3, #1
9000cbe2:	d006      	beq.n	9000cbf2 <pbuf_alloc_reference+0x2a>
9000cbe4:	4b0f      	ldr	r3, [pc, #60]	; (9000cc24 <pbuf_alloc_reference+0x5c>)
9000cbe6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
9000cbea:	490f      	ldr	r1, [pc, #60]	; (9000cc28 <pbuf_alloc_reference+0x60>)
9000cbec:	480f      	ldr	r0, [pc, #60]	; (9000cc2c <pbuf_alloc_reference+0x64>)
9000cbee:	f00a f827 	bl	90016c40 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
9000cbf2:	200b      	movs	r0, #11
9000cbf4:	f7ff fae0 	bl	9000c1b8 <memp_malloc>
9000cbf8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
9000cbfa:	68fb      	ldr	r3, [r7, #12]
9000cbfc:	2b00      	cmp	r3, #0
9000cbfe:	d101      	bne.n	9000cc04 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
9000cc00:	2300      	movs	r3, #0
9000cc02:	e00b      	b.n	9000cc1c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
9000cc04:	8879      	ldrh	r1, [r7, #2]
9000cc06:	887a      	ldrh	r2, [r7, #2]
9000cc08:	2300      	movs	r3, #0
9000cc0a:	9301      	str	r3, [sp, #4]
9000cc0c:	883b      	ldrh	r3, [r7, #0]
9000cc0e:	9300      	str	r3, [sp, #0]
9000cc10:	460b      	mov	r3, r1
9000cc12:	6879      	ldr	r1, [r7, #4]
9000cc14:	68f8      	ldr	r0, [r7, #12]
9000cc16:	f7ff feb7 	bl	9000c988 <pbuf_init_alloced_pbuf>
  return p;
9000cc1a:	68fb      	ldr	r3, [r7, #12]
}
9000cc1c:	4618      	mov	r0, r3
9000cc1e:	3710      	adds	r7, #16
9000cc20:	46bd      	mov	sp, r7
9000cc22:	bd80      	pop	{r7, pc}
9000cc24:	90018bb4 	.word	0x90018bb4
9000cc28:	90018cb8 	.word	0x90018cb8
9000cc2c:	90018c14 	.word	0x90018c14

9000cc30 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
9000cc30:	b580      	push	{r7, lr}
9000cc32:	b088      	sub	sp, #32
9000cc34:	af02      	add	r7, sp, #8
9000cc36:	607b      	str	r3, [r7, #4]
9000cc38:	4603      	mov	r3, r0
9000cc3a:	73fb      	strb	r3, [r7, #15]
9000cc3c:	460b      	mov	r3, r1
9000cc3e:	81bb      	strh	r3, [r7, #12]
9000cc40:	4613      	mov	r3, r2
9000cc42:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
9000cc44:	7bfb      	ldrb	r3, [r7, #15]
9000cc46:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
9000cc48:	8a7b      	ldrh	r3, [r7, #18]
9000cc4a:	3303      	adds	r3, #3
9000cc4c:	f023 0203 	bic.w	r2, r3, #3
9000cc50:	89bb      	ldrh	r3, [r7, #12]
9000cc52:	441a      	add	r2, r3
9000cc54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000cc56:	429a      	cmp	r2, r3
9000cc58:	d901      	bls.n	9000cc5e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
9000cc5a:	2300      	movs	r3, #0
9000cc5c:	e018      	b.n	9000cc90 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
9000cc5e:	6a3b      	ldr	r3, [r7, #32]
9000cc60:	2b00      	cmp	r3, #0
9000cc62:	d007      	beq.n	9000cc74 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
9000cc64:	8a7b      	ldrh	r3, [r7, #18]
9000cc66:	3303      	adds	r3, #3
9000cc68:	f023 0303 	bic.w	r3, r3, #3
9000cc6c:	6a3a      	ldr	r2, [r7, #32]
9000cc6e:	4413      	add	r3, r2
9000cc70:	617b      	str	r3, [r7, #20]
9000cc72:	e001      	b.n	9000cc78 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
9000cc74:	2300      	movs	r3, #0
9000cc76:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
9000cc78:	6878      	ldr	r0, [r7, #4]
9000cc7a:	89b9      	ldrh	r1, [r7, #12]
9000cc7c:	89ba      	ldrh	r2, [r7, #12]
9000cc7e:	2302      	movs	r3, #2
9000cc80:	9301      	str	r3, [sp, #4]
9000cc82:	897b      	ldrh	r3, [r7, #10]
9000cc84:	9300      	str	r3, [sp, #0]
9000cc86:	460b      	mov	r3, r1
9000cc88:	6979      	ldr	r1, [r7, #20]
9000cc8a:	f7ff fe7d 	bl	9000c988 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
9000cc8e:	687b      	ldr	r3, [r7, #4]
}
9000cc90:	4618      	mov	r0, r3
9000cc92:	3718      	adds	r7, #24
9000cc94:	46bd      	mov	sp, r7
9000cc96:	bd80      	pop	{r7, pc}

9000cc98 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
9000cc98:	b580      	push	{r7, lr}
9000cc9a:	b084      	sub	sp, #16
9000cc9c:	af00      	add	r7, sp, #0
9000cc9e:	6078      	str	r0, [r7, #4]
9000cca0:	460b      	mov	r3, r1
9000cca2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
9000cca4:	687b      	ldr	r3, [r7, #4]
9000cca6:	2b00      	cmp	r3, #0
9000cca8:	d106      	bne.n	9000ccb8 <pbuf_realloc+0x20>
9000ccaa:	4b3a      	ldr	r3, [pc, #232]	; (9000cd94 <pbuf_realloc+0xfc>)
9000ccac:	f44f 72cc 	mov.w	r2, #408	; 0x198
9000ccb0:	4939      	ldr	r1, [pc, #228]	; (9000cd98 <pbuf_realloc+0x100>)
9000ccb2:	483a      	ldr	r0, [pc, #232]	; (9000cd9c <pbuf_realloc+0x104>)
9000ccb4:	f009 ffc4 	bl	90016c40 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
9000ccb8:	687b      	ldr	r3, [r7, #4]
9000ccba:	891b      	ldrh	r3, [r3, #8]
9000ccbc:	887a      	ldrh	r2, [r7, #2]
9000ccbe:	429a      	cmp	r2, r3
9000ccc0:	d263      	bcs.n	9000cd8a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
9000ccc2:	687b      	ldr	r3, [r7, #4]
9000ccc4:	891a      	ldrh	r2, [r3, #8]
9000ccc6:	887b      	ldrh	r3, [r7, #2]
9000ccc8:	1ad3      	subs	r3, r2, r3
9000ccca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
9000cccc:	887b      	ldrh	r3, [r7, #2]
9000ccce:	817b      	strh	r3, [r7, #10]
  q = p;
9000ccd0:	687b      	ldr	r3, [r7, #4]
9000ccd2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
9000ccd4:	e018      	b.n	9000cd08 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
9000ccd6:	68fb      	ldr	r3, [r7, #12]
9000ccd8:	895b      	ldrh	r3, [r3, #10]
9000ccda:	897a      	ldrh	r2, [r7, #10]
9000ccdc:	1ad3      	subs	r3, r2, r3
9000ccde:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
9000cce0:	68fb      	ldr	r3, [r7, #12]
9000cce2:	891a      	ldrh	r2, [r3, #8]
9000cce4:	893b      	ldrh	r3, [r7, #8]
9000cce6:	1ad3      	subs	r3, r2, r3
9000cce8:	b29a      	uxth	r2, r3
9000ccea:	68fb      	ldr	r3, [r7, #12]
9000ccec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
9000ccee:	68fb      	ldr	r3, [r7, #12]
9000ccf0:	681b      	ldr	r3, [r3, #0]
9000ccf2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
9000ccf4:	68fb      	ldr	r3, [r7, #12]
9000ccf6:	2b00      	cmp	r3, #0
9000ccf8:	d106      	bne.n	9000cd08 <pbuf_realloc+0x70>
9000ccfa:	4b26      	ldr	r3, [pc, #152]	; (9000cd94 <pbuf_realloc+0xfc>)
9000ccfc:	f240 12af 	movw	r2, #431	; 0x1af
9000cd00:	4927      	ldr	r1, [pc, #156]	; (9000cda0 <pbuf_realloc+0x108>)
9000cd02:	4826      	ldr	r0, [pc, #152]	; (9000cd9c <pbuf_realloc+0x104>)
9000cd04:	f009 ff9c 	bl	90016c40 <iprintf>
  while (rem_len > q->len) {
9000cd08:	68fb      	ldr	r3, [r7, #12]
9000cd0a:	895b      	ldrh	r3, [r3, #10]
9000cd0c:	897a      	ldrh	r2, [r7, #10]
9000cd0e:	429a      	cmp	r2, r3
9000cd10:	d8e1      	bhi.n	9000ccd6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
9000cd12:	68fb      	ldr	r3, [r7, #12]
9000cd14:	7b1b      	ldrb	r3, [r3, #12]
9000cd16:	f003 030f 	and.w	r3, r3, #15
9000cd1a:	2b00      	cmp	r3, #0
9000cd1c:	d121      	bne.n	9000cd62 <pbuf_realloc+0xca>
9000cd1e:	68fb      	ldr	r3, [r7, #12]
9000cd20:	895b      	ldrh	r3, [r3, #10]
9000cd22:	897a      	ldrh	r2, [r7, #10]
9000cd24:	429a      	cmp	r2, r3
9000cd26:	d01c      	beq.n	9000cd62 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
9000cd28:	68fb      	ldr	r3, [r7, #12]
9000cd2a:	7b5b      	ldrb	r3, [r3, #13]
9000cd2c:	f003 0302 	and.w	r3, r3, #2
9000cd30:	2b00      	cmp	r3, #0
9000cd32:	d116      	bne.n	9000cd62 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
9000cd34:	68fb      	ldr	r3, [r7, #12]
9000cd36:	685a      	ldr	r2, [r3, #4]
9000cd38:	68fb      	ldr	r3, [r7, #12]
9000cd3a:	1ad3      	subs	r3, r2, r3
9000cd3c:	b29a      	uxth	r2, r3
9000cd3e:	897b      	ldrh	r3, [r7, #10]
9000cd40:	4413      	add	r3, r2
9000cd42:	b29b      	uxth	r3, r3
9000cd44:	4619      	mov	r1, r3
9000cd46:	68f8      	ldr	r0, [r7, #12]
9000cd48:	f7fe ffaa 	bl	9000bca0 <mem_trim>
9000cd4c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
9000cd4e:	68fb      	ldr	r3, [r7, #12]
9000cd50:	2b00      	cmp	r3, #0
9000cd52:	d106      	bne.n	9000cd62 <pbuf_realloc+0xca>
9000cd54:	4b0f      	ldr	r3, [pc, #60]	; (9000cd94 <pbuf_realloc+0xfc>)
9000cd56:	f240 12bd 	movw	r2, #445	; 0x1bd
9000cd5a:	4912      	ldr	r1, [pc, #72]	; (9000cda4 <pbuf_realloc+0x10c>)
9000cd5c:	480f      	ldr	r0, [pc, #60]	; (9000cd9c <pbuf_realloc+0x104>)
9000cd5e:	f009 ff6f 	bl	90016c40 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
9000cd62:	68fb      	ldr	r3, [r7, #12]
9000cd64:	897a      	ldrh	r2, [r7, #10]
9000cd66:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
9000cd68:	68fb      	ldr	r3, [r7, #12]
9000cd6a:	895a      	ldrh	r2, [r3, #10]
9000cd6c:	68fb      	ldr	r3, [r7, #12]
9000cd6e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
9000cd70:	68fb      	ldr	r3, [r7, #12]
9000cd72:	681b      	ldr	r3, [r3, #0]
9000cd74:	2b00      	cmp	r3, #0
9000cd76:	d004      	beq.n	9000cd82 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
9000cd78:	68fb      	ldr	r3, [r7, #12]
9000cd7a:	681b      	ldr	r3, [r3, #0]
9000cd7c:	4618      	mov	r0, r3
9000cd7e:	f000 f911 	bl	9000cfa4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
9000cd82:	68fb      	ldr	r3, [r7, #12]
9000cd84:	2200      	movs	r2, #0
9000cd86:	601a      	str	r2, [r3, #0]
9000cd88:	e000      	b.n	9000cd8c <pbuf_realloc+0xf4>
    return;
9000cd8a:	bf00      	nop

}
9000cd8c:	3710      	adds	r7, #16
9000cd8e:	46bd      	mov	sp, r7
9000cd90:	bd80      	pop	{r7, pc}
9000cd92:	bf00      	nop
9000cd94:	90018bb4 	.word	0x90018bb4
9000cd98:	90018ccc 	.word	0x90018ccc
9000cd9c:	90018c14 	.word	0x90018c14
9000cda0:	90018ce4 	.word	0x90018ce4
9000cda4:	90018cfc 	.word	0x90018cfc

9000cda8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
9000cda8:	b580      	push	{r7, lr}
9000cdaa:	b086      	sub	sp, #24
9000cdac:	af00      	add	r7, sp, #0
9000cdae:	60f8      	str	r0, [r7, #12]
9000cdb0:	60b9      	str	r1, [r7, #8]
9000cdb2:	4613      	mov	r3, r2
9000cdb4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
9000cdb6:	68fb      	ldr	r3, [r7, #12]
9000cdb8:	2b00      	cmp	r3, #0
9000cdba:	d106      	bne.n	9000cdca <pbuf_add_header_impl+0x22>
9000cdbc:	4b2b      	ldr	r3, [pc, #172]	; (9000ce6c <pbuf_add_header_impl+0xc4>)
9000cdbe:	f240 12df 	movw	r2, #479	; 0x1df
9000cdc2:	492b      	ldr	r1, [pc, #172]	; (9000ce70 <pbuf_add_header_impl+0xc8>)
9000cdc4:	482b      	ldr	r0, [pc, #172]	; (9000ce74 <pbuf_add_header_impl+0xcc>)
9000cdc6:	f009 ff3b 	bl	90016c40 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
9000cdca:	68fb      	ldr	r3, [r7, #12]
9000cdcc:	2b00      	cmp	r3, #0
9000cdce:	d003      	beq.n	9000cdd8 <pbuf_add_header_impl+0x30>
9000cdd0:	68bb      	ldr	r3, [r7, #8]
9000cdd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000cdd6:	d301      	bcc.n	9000cddc <pbuf_add_header_impl+0x34>
    return 1;
9000cdd8:	2301      	movs	r3, #1
9000cdda:	e043      	b.n	9000ce64 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
9000cddc:	68bb      	ldr	r3, [r7, #8]
9000cdde:	2b00      	cmp	r3, #0
9000cde0:	d101      	bne.n	9000cde6 <pbuf_add_header_impl+0x3e>
    return 0;
9000cde2:	2300      	movs	r3, #0
9000cde4:	e03e      	b.n	9000ce64 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
9000cde6:	68bb      	ldr	r3, [r7, #8]
9000cde8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
9000cdea:	68fb      	ldr	r3, [r7, #12]
9000cdec:	891a      	ldrh	r2, [r3, #8]
9000cdee:	8a7b      	ldrh	r3, [r7, #18]
9000cdf0:	4413      	add	r3, r2
9000cdf2:	b29b      	uxth	r3, r3
9000cdf4:	8a7a      	ldrh	r2, [r7, #18]
9000cdf6:	429a      	cmp	r2, r3
9000cdf8:	d901      	bls.n	9000cdfe <pbuf_add_header_impl+0x56>
    return 1;
9000cdfa:	2301      	movs	r3, #1
9000cdfc:	e032      	b.n	9000ce64 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
9000cdfe:	68fb      	ldr	r3, [r7, #12]
9000ce00:	7b1b      	ldrb	r3, [r3, #12]
9000ce02:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
9000ce04:	8a3b      	ldrh	r3, [r7, #16]
9000ce06:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000ce0a:	2b00      	cmp	r3, #0
9000ce0c:	d00c      	beq.n	9000ce28 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
9000ce0e:	68fb      	ldr	r3, [r7, #12]
9000ce10:	685a      	ldr	r2, [r3, #4]
9000ce12:	68bb      	ldr	r3, [r7, #8]
9000ce14:	425b      	negs	r3, r3
9000ce16:	4413      	add	r3, r2
9000ce18:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
9000ce1a:	68fb      	ldr	r3, [r7, #12]
9000ce1c:	3310      	adds	r3, #16
9000ce1e:	697a      	ldr	r2, [r7, #20]
9000ce20:	429a      	cmp	r2, r3
9000ce22:	d20d      	bcs.n	9000ce40 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
9000ce24:	2301      	movs	r3, #1
9000ce26:	e01d      	b.n	9000ce64 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
9000ce28:	79fb      	ldrb	r3, [r7, #7]
9000ce2a:	2b00      	cmp	r3, #0
9000ce2c:	d006      	beq.n	9000ce3c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
9000ce2e:	68fb      	ldr	r3, [r7, #12]
9000ce30:	685a      	ldr	r2, [r3, #4]
9000ce32:	68bb      	ldr	r3, [r7, #8]
9000ce34:	425b      	negs	r3, r3
9000ce36:	4413      	add	r3, r2
9000ce38:	617b      	str	r3, [r7, #20]
9000ce3a:	e001      	b.n	9000ce40 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
9000ce3c:	2301      	movs	r3, #1
9000ce3e:	e011      	b.n	9000ce64 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
9000ce40:	68fb      	ldr	r3, [r7, #12]
9000ce42:	697a      	ldr	r2, [r7, #20]
9000ce44:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
9000ce46:	68fb      	ldr	r3, [r7, #12]
9000ce48:	895a      	ldrh	r2, [r3, #10]
9000ce4a:	8a7b      	ldrh	r3, [r7, #18]
9000ce4c:	4413      	add	r3, r2
9000ce4e:	b29a      	uxth	r2, r3
9000ce50:	68fb      	ldr	r3, [r7, #12]
9000ce52:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
9000ce54:	68fb      	ldr	r3, [r7, #12]
9000ce56:	891a      	ldrh	r2, [r3, #8]
9000ce58:	8a7b      	ldrh	r3, [r7, #18]
9000ce5a:	4413      	add	r3, r2
9000ce5c:	b29a      	uxth	r2, r3
9000ce5e:	68fb      	ldr	r3, [r7, #12]
9000ce60:	811a      	strh	r2, [r3, #8]


  return 0;
9000ce62:	2300      	movs	r3, #0
}
9000ce64:	4618      	mov	r0, r3
9000ce66:	3718      	adds	r7, #24
9000ce68:	46bd      	mov	sp, r7
9000ce6a:	bd80      	pop	{r7, pc}
9000ce6c:	90018bb4 	.word	0x90018bb4
9000ce70:	90018d18 	.word	0x90018d18
9000ce74:	90018c14 	.word	0x90018c14

9000ce78 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
9000ce78:	b580      	push	{r7, lr}
9000ce7a:	b082      	sub	sp, #8
9000ce7c:	af00      	add	r7, sp, #0
9000ce7e:	6078      	str	r0, [r7, #4]
9000ce80:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
9000ce82:	2200      	movs	r2, #0
9000ce84:	6839      	ldr	r1, [r7, #0]
9000ce86:	6878      	ldr	r0, [r7, #4]
9000ce88:	f7ff ff8e 	bl	9000cda8 <pbuf_add_header_impl>
9000ce8c:	4603      	mov	r3, r0
}
9000ce8e:	4618      	mov	r0, r3
9000ce90:	3708      	adds	r7, #8
9000ce92:	46bd      	mov	sp, r7
9000ce94:	bd80      	pop	{r7, pc}
	...

9000ce98 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
9000ce98:	b580      	push	{r7, lr}
9000ce9a:	b084      	sub	sp, #16
9000ce9c:	af00      	add	r7, sp, #0
9000ce9e:	6078      	str	r0, [r7, #4]
9000cea0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
9000cea2:	687b      	ldr	r3, [r7, #4]
9000cea4:	2b00      	cmp	r3, #0
9000cea6:	d106      	bne.n	9000ceb6 <pbuf_remove_header+0x1e>
9000cea8:	4b20      	ldr	r3, [pc, #128]	; (9000cf2c <pbuf_remove_header+0x94>)
9000ceaa:	f240 224b 	movw	r2, #587	; 0x24b
9000ceae:	4920      	ldr	r1, [pc, #128]	; (9000cf30 <pbuf_remove_header+0x98>)
9000ceb0:	4820      	ldr	r0, [pc, #128]	; (9000cf34 <pbuf_remove_header+0x9c>)
9000ceb2:	f009 fec5 	bl	90016c40 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
9000ceb6:	687b      	ldr	r3, [r7, #4]
9000ceb8:	2b00      	cmp	r3, #0
9000ceba:	d003      	beq.n	9000cec4 <pbuf_remove_header+0x2c>
9000cebc:	683b      	ldr	r3, [r7, #0]
9000cebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000cec2:	d301      	bcc.n	9000cec8 <pbuf_remove_header+0x30>
    return 1;
9000cec4:	2301      	movs	r3, #1
9000cec6:	e02c      	b.n	9000cf22 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
9000cec8:	683b      	ldr	r3, [r7, #0]
9000ceca:	2b00      	cmp	r3, #0
9000cecc:	d101      	bne.n	9000ced2 <pbuf_remove_header+0x3a>
    return 0;
9000cece:	2300      	movs	r3, #0
9000ced0:	e027      	b.n	9000cf22 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
9000ced2:	683b      	ldr	r3, [r7, #0]
9000ced4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
9000ced6:	687b      	ldr	r3, [r7, #4]
9000ced8:	895b      	ldrh	r3, [r3, #10]
9000ceda:	89fa      	ldrh	r2, [r7, #14]
9000cedc:	429a      	cmp	r2, r3
9000cede:	d908      	bls.n	9000cef2 <pbuf_remove_header+0x5a>
9000cee0:	4b12      	ldr	r3, [pc, #72]	; (9000cf2c <pbuf_remove_header+0x94>)
9000cee2:	f240 2255 	movw	r2, #597	; 0x255
9000cee6:	4914      	ldr	r1, [pc, #80]	; (9000cf38 <pbuf_remove_header+0xa0>)
9000cee8:	4812      	ldr	r0, [pc, #72]	; (9000cf34 <pbuf_remove_header+0x9c>)
9000ceea:	f009 fea9 	bl	90016c40 <iprintf>
9000ceee:	2301      	movs	r3, #1
9000cef0:	e017      	b.n	9000cf22 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
9000cef2:	687b      	ldr	r3, [r7, #4]
9000cef4:	685b      	ldr	r3, [r3, #4]
9000cef6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
9000cef8:	687b      	ldr	r3, [r7, #4]
9000cefa:	685a      	ldr	r2, [r3, #4]
9000cefc:	683b      	ldr	r3, [r7, #0]
9000cefe:	441a      	add	r2, r3
9000cf00:	687b      	ldr	r3, [r7, #4]
9000cf02:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
9000cf04:	687b      	ldr	r3, [r7, #4]
9000cf06:	895a      	ldrh	r2, [r3, #10]
9000cf08:	89fb      	ldrh	r3, [r7, #14]
9000cf0a:	1ad3      	subs	r3, r2, r3
9000cf0c:	b29a      	uxth	r2, r3
9000cf0e:	687b      	ldr	r3, [r7, #4]
9000cf10:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
9000cf12:	687b      	ldr	r3, [r7, #4]
9000cf14:	891a      	ldrh	r2, [r3, #8]
9000cf16:	89fb      	ldrh	r3, [r7, #14]
9000cf18:	1ad3      	subs	r3, r2, r3
9000cf1a:	b29a      	uxth	r2, r3
9000cf1c:	687b      	ldr	r3, [r7, #4]
9000cf1e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
9000cf20:	2300      	movs	r3, #0
}
9000cf22:	4618      	mov	r0, r3
9000cf24:	3710      	adds	r7, #16
9000cf26:	46bd      	mov	sp, r7
9000cf28:	bd80      	pop	{r7, pc}
9000cf2a:	bf00      	nop
9000cf2c:	90018bb4 	.word	0x90018bb4
9000cf30:	90018d18 	.word	0x90018d18
9000cf34:	90018c14 	.word	0x90018c14
9000cf38:	90018d24 	.word	0x90018d24

9000cf3c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
9000cf3c:	b580      	push	{r7, lr}
9000cf3e:	b082      	sub	sp, #8
9000cf40:	af00      	add	r7, sp, #0
9000cf42:	6078      	str	r0, [r7, #4]
9000cf44:	460b      	mov	r3, r1
9000cf46:	807b      	strh	r3, [r7, #2]
9000cf48:	4613      	mov	r3, r2
9000cf4a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
9000cf4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9000cf50:	2b00      	cmp	r3, #0
9000cf52:	da08      	bge.n	9000cf66 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
9000cf54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9000cf58:	425b      	negs	r3, r3
9000cf5a:	4619      	mov	r1, r3
9000cf5c:	6878      	ldr	r0, [r7, #4]
9000cf5e:	f7ff ff9b 	bl	9000ce98 <pbuf_remove_header>
9000cf62:	4603      	mov	r3, r0
9000cf64:	e007      	b.n	9000cf76 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
9000cf66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9000cf6a:	787a      	ldrb	r2, [r7, #1]
9000cf6c:	4619      	mov	r1, r3
9000cf6e:	6878      	ldr	r0, [r7, #4]
9000cf70:	f7ff ff1a 	bl	9000cda8 <pbuf_add_header_impl>
9000cf74:	4603      	mov	r3, r0
  }
}
9000cf76:	4618      	mov	r0, r3
9000cf78:	3708      	adds	r7, #8
9000cf7a:	46bd      	mov	sp, r7
9000cf7c:	bd80      	pop	{r7, pc}

9000cf7e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
9000cf7e:	b580      	push	{r7, lr}
9000cf80:	b082      	sub	sp, #8
9000cf82:	af00      	add	r7, sp, #0
9000cf84:	6078      	str	r0, [r7, #4]
9000cf86:	460b      	mov	r3, r1
9000cf88:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
9000cf8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9000cf8e:	2201      	movs	r2, #1
9000cf90:	4619      	mov	r1, r3
9000cf92:	6878      	ldr	r0, [r7, #4]
9000cf94:	f7ff ffd2 	bl	9000cf3c <pbuf_header_impl>
9000cf98:	4603      	mov	r3, r0
}
9000cf9a:	4618      	mov	r0, r3
9000cf9c:	3708      	adds	r7, #8
9000cf9e:	46bd      	mov	sp, r7
9000cfa0:	bd80      	pop	{r7, pc}
	...

9000cfa4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
9000cfa4:	b580      	push	{r7, lr}
9000cfa6:	b088      	sub	sp, #32
9000cfa8:	af00      	add	r7, sp, #0
9000cfaa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
9000cfac:	687b      	ldr	r3, [r7, #4]
9000cfae:	2b00      	cmp	r3, #0
9000cfb0:	d10b      	bne.n	9000cfca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
9000cfb2:	687b      	ldr	r3, [r7, #4]
9000cfb4:	2b00      	cmp	r3, #0
9000cfb6:	d106      	bne.n	9000cfc6 <pbuf_free+0x22>
9000cfb8:	4b3b      	ldr	r3, [pc, #236]	; (9000d0a8 <pbuf_free+0x104>)
9000cfba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
9000cfbe:	493b      	ldr	r1, [pc, #236]	; (9000d0ac <pbuf_free+0x108>)
9000cfc0:	483b      	ldr	r0, [pc, #236]	; (9000d0b0 <pbuf_free+0x10c>)
9000cfc2:	f009 fe3d 	bl	90016c40 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
9000cfc6:	2300      	movs	r3, #0
9000cfc8:	e069      	b.n	9000d09e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
9000cfca:	2300      	movs	r3, #0
9000cfcc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
9000cfce:	e062      	b.n	9000d096 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
9000cfd0:	f009 fbe0 	bl	90016794 <sys_arch_protect>
9000cfd4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
9000cfd6:	687b      	ldr	r3, [r7, #4]
9000cfd8:	7b9b      	ldrb	r3, [r3, #14]
9000cfda:	2b00      	cmp	r3, #0
9000cfdc:	d106      	bne.n	9000cfec <pbuf_free+0x48>
9000cfde:	4b32      	ldr	r3, [pc, #200]	; (9000d0a8 <pbuf_free+0x104>)
9000cfe0:	f240 22f1 	movw	r2, #753	; 0x2f1
9000cfe4:	4933      	ldr	r1, [pc, #204]	; (9000d0b4 <pbuf_free+0x110>)
9000cfe6:	4832      	ldr	r0, [pc, #200]	; (9000d0b0 <pbuf_free+0x10c>)
9000cfe8:	f009 fe2a 	bl	90016c40 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
9000cfec:	687b      	ldr	r3, [r7, #4]
9000cfee:	7b9b      	ldrb	r3, [r3, #14]
9000cff0:	3b01      	subs	r3, #1
9000cff2:	b2da      	uxtb	r2, r3
9000cff4:	687b      	ldr	r3, [r7, #4]
9000cff6:	739a      	strb	r2, [r3, #14]
9000cff8:	687b      	ldr	r3, [r7, #4]
9000cffa:	7b9b      	ldrb	r3, [r3, #14]
9000cffc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
9000cffe:	69b8      	ldr	r0, [r7, #24]
9000d000:	f009 fbd6 	bl	900167b0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
9000d004:	7dfb      	ldrb	r3, [r7, #23]
9000d006:	2b00      	cmp	r3, #0
9000d008:	d143      	bne.n	9000d092 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
9000d00a:	687b      	ldr	r3, [r7, #4]
9000d00c:	681b      	ldr	r3, [r3, #0]
9000d00e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
9000d010:	687b      	ldr	r3, [r7, #4]
9000d012:	7b1b      	ldrb	r3, [r3, #12]
9000d014:	f003 030f 	and.w	r3, r3, #15
9000d018:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
9000d01a:	687b      	ldr	r3, [r7, #4]
9000d01c:	7b5b      	ldrb	r3, [r3, #13]
9000d01e:	f003 0302 	and.w	r3, r3, #2
9000d022:	2b00      	cmp	r3, #0
9000d024:	d011      	beq.n	9000d04a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
9000d026:	687b      	ldr	r3, [r7, #4]
9000d028:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
9000d02a:	68bb      	ldr	r3, [r7, #8]
9000d02c:	691b      	ldr	r3, [r3, #16]
9000d02e:	2b00      	cmp	r3, #0
9000d030:	d106      	bne.n	9000d040 <pbuf_free+0x9c>
9000d032:	4b1d      	ldr	r3, [pc, #116]	; (9000d0a8 <pbuf_free+0x104>)
9000d034:	f240 22ff 	movw	r2, #767	; 0x2ff
9000d038:	491f      	ldr	r1, [pc, #124]	; (9000d0b8 <pbuf_free+0x114>)
9000d03a:	481d      	ldr	r0, [pc, #116]	; (9000d0b0 <pbuf_free+0x10c>)
9000d03c:	f009 fe00 	bl	90016c40 <iprintf>
        pc->custom_free_function(p);
9000d040:	68bb      	ldr	r3, [r7, #8]
9000d042:	691b      	ldr	r3, [r3, #16]
9000d044:	6878      	ldr	r0, [r7, #4]
9000d046:	4798      	blx	r3
9000d048:	e01d      	b.n	9000d086 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
9000d04a:	7bfb      	ldrb	r3, [r7, #15]
9000d04c:	2b02      	cmp	r3, #2
9000d04e:	d104      	bne.n	9000d05a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
9000d050:	6879      	ldr	r1, [r7, #4]
9000d052:	200c      	movs	r0, #12
9000d054:	f7ff f902 	bl	9000c25c <memp_free>
9000d058:	e015      	b.n	9000d086 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
9000d05a:	7bfb      	ldrb	r3, [r7, #15]
9000d05c:	2b01      	cmp	r3, #1
9000d05e:	d104      	bne.n	9000d06a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
9000d060:	6879      	ldr	r1, [r7, #4]
9000d062:	200b      	movs	r0, #11
9000d064:	f7ff f8fa 	bl	9000c25c <memp_free>
9000d068:	e00d      	b.n	9000d086 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
9000d06a:	7bfb      	ldrb	r3, [r7, #15]
9000d06c:	2b00      	cmp	r3, #0
9000d06e:	d103      	bne.n	9000d078 <pbuf_free+0xd4>
          mem_free(p);
9000d070:	6878      	ldr	r0, [r7, #4]
9000d072:	f7fe fd85 	bl	9000bb80 <mem_free>
9000d076:	e006      	b.n	9000d086 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
9000d078:	4b0b      	ldr	r3, [pc, #44]	; (9000d0a8 <pbuf_free+0x104>)
9000d07a:	f240 320f 	movw	r2, #783	; 0x30f
9000d07e:	490f      	ldr	r1, [pc, #60]	; (9000d0bc <pbuf_free+0x118>)
9000d080:	480b      	ldr	r0, [pc, #44]	; (9000d0b0 <pbuf_free+0x10c>)
9000d082:	f009 fddd 	bl	90016c40 <iprintf>
        }
      }
      count++;
9000d086:	7ffb      	ldrb	r3, [r7, #31]
9000d088:	3301      	adds	r3, #1
9000d08a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
9000d08c:	693b      	ldr	r3, [r7, #16]
9000d08e:	607b      	str	r3, [r7, #4]
9000d090:	e001      	b.n	9000d096 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
9000d092:	2300      	movs	r3, #0
9000d094:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
9000d096:	687b      	ldr	r3, [r7, #4]
9000d098:	2b00      	cmp	r3, #0
9000d09a:	d199      	bne.n	9000cfd0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
9000d09c:	7ffb      	ldrb	r3, [r7, #31]
}
9000d09e:	4618      	mov	r0, r3
9000d0a0:	3720      	adds	r7, #32
9000d0a2:	46bd      	mov	sp, r7
9000d0a4:	bd80      	pop	{r7, pc}
9000d0a6:	bf00      	nop
9000d0a8:	90018bb4 	.word	0x90018bb4
9000d0ac:	90018d18 	.word	0x90018d18
9000d0b0:	90018c14 	.word	0x90018c14
9000d0b4:	90018d44 	.word	0x90018d44
9000d0b8:	90018d5c 	.word	0x90018d5c
9000d0bc:	90018d80 	.word	0x90018d80

9000d0c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
9000d0c0:	b480      	push	{r7}
9000d0c2:	b085      	sub	sp, #20
9000d0c4:	af00      	add	r7, sp, #0
9000d0c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
9000d0c8:	2300      	movs	r3, #0
9000d0ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
9000d0cc:	e005      	b.n	9000d0da <pbuf_clen+0x1a>
    ++len;
9000d0ce:	89fb      	ldrh	r3, [r7, #14]
9000d0d0:	3301      	adds	r3, #1
9000d0d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
9000d0d4:	687b      	ldr	r3, [r7, #4]
9000d0d6:	681b      	ldr	r3, [r3, #0]
9000d0d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
9000d0da:	687b      	ldr	r3, [r7, #4]
9000d0dc:	2b00      	cmp	r3, #0
9000d0de:	d1f6      	bne.n	9000d0ce <pbuf_clen+0xe>
  }
  return len;
9000d0e0:	89fb      	ldrh	r3, [r7, #14]
}
9000d0e2:	4618      	mov	r0, r3
9000d0e4:	3714      	adds	r7, #20
9000d0e6:	46bd      	mov	sp, r7
9000d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d0ec:	4770      	bx	lr
	...

9000d0f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
9000d0f0:	b580      	push	{r7, lr}
9000d0f2:	b084      	sub	sp, #16
9000d0f4:	af00      	add	r7, sp, #0
9000d0f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
9000d0f8:	687b      	ldr	r3, [r7, #4]
9000d0fa:	2b00      	cmp	r3, #0
9000d0fc:	d016      	beq.n	9000d12c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
9000d0fe:	f009 fb49 	bl	90016794 <sys_arch_protect>
9000d102:	60f8      	str	r0, [r7, #12]
9000d104:	687b      	ldr	r3, [r7, #4]
9000d106:	7b9b      	ldrb	r3, [r3, #14]
9000d108:	3301      	adds	r3, #1
9000d10a:	b2da      	uxtb	r2, r3
9000d10c:	687b      	ldr	r3, [r7, #4]
9000d10e:	739a      	strb	r2, [r3, #14]
9000d110:	68f8      	ldr	r0, [r7, #12]
9000d112:	f009 fb4d 	bl	900167b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
9000d116:	687b      	ldr	r3, [r7, #4]
9000d118:	7b9b      	ldrb	r3, [r3, #14]
9000d11a:	2b00      	cmp	r3, #0
9000d11c:	d106      	bne.n	9000d12c <pbuf_ref+0x3c>
9000d11e:	4b05      	ldr	r3, [pc, #20]	; (9000d134 <pbuf_ref+0x44>)
9000d120:	f240 3242 	movw	r2, #834	; 0x342
9000d124:	4904      	ldr	r1, [pc, #16]	; (9000d138 <pbuf_ref+0x48>)
9000d126:	4805      	ldr	r0, [pc, #20]	; (9000d13c <pbuf_ref+0x4c>)
9000d128:	f009 fd8a 	bl	90016c40 <iprintf>
  }
}
9000d12c:	bf00      	nop
9000d12e:	3710      	adds	r7, #16
9000d130:	46bd      	mov	sp, r7
9000d132:	bd80      	pop	{r7, pc}
9000d134:	90018bb4 	.word	0x90018bb4
9000d138:	90018d94 	.word	0x90018d94
9000d13c:	90018c14 	.word	0x90018c14

9000d140 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
9000d140:	b580      	push	{r7, lr}
9000d142:	b084      	sub	sp, #16
9000d144:	af00      	add	r7, sp, #0
9000d146:	6078      	str	r0, [r7, #4]
9000d148:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
9000d14a:	687b      	ldr	r3, [r7, #4]
9000d14c:	2b00      	cmp	r3, #0
9000d14e:	d002      	beq.n	9000d156 <pbuf_cat+0x16>
9000d150:	683b      	ldr	r3, [r7, #0]
9000d152:	2b00      	cmp	r3, #0
9000d154:	d107      	bne.n	9000d166 <pbuf_cat+0x26>
9000d156:	4b20      	ldr	r3, [pc, #128]	; (9000d1d8 <pbuf_cat+0x98>)
9000d158:	f240 3259 	movw	r2, #857	; 0x359
9000d15c:	491f      	ldr	r1, [pc, #124]	; (9000d1dc <pbuf_cat+0x9c>)
9000d15e:	4820      	ldr	r0, [pc, #128]	; (9000d1e0 <pbuf_cat+0xa0>)
9000d160:	f009 fd6e 	bl	90016c40 <iprintf>
9000d164:	e034      	b.n	9000d1d0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
9000d166:	687b      	ldr	r3, [r7, #4]
9000d168:	60fb      	str	r3, [r7, #12]
9000d16a:	e00a      	b.n	9000d182 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
9000d16c:	68fb      	ldr	r3, [r7, #12]
9000d16e:	891a      	ldrh	r2, [r3, #8]
9000d170:	683b      	ldr	r3, [r7, #0]
9000d172:	891b      	ldrh	r3, [r3, #8]
9000d174:	4413      	add	r3, r2
9000d176:	b29a      	uxth	r2, r3
9000d178:	68fb      	ldr	r3, [r7, #12]
9000d17a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
9000d17c:	68fb      	ldr	r3, [r7, #12]
9000d17e:	681b      	ldr	r3, [r3, #0]
9000d180:	60fb      	str	r3, [r7, #12]
9000d182:	68fb      	ldr	r3, [r7, #12]
9000d184:	681b      	ldr	r3, [r3, #0]
9000d186:	2b00      	cmp	r3, #0
9000d188:	d1f0      	bne.n	9000d16c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
9000d18a:	68fb      	ldr	r3, [r7, #12]
9000d18c:	891a      	ldrh	r2, [r3, #8]
9000d18e:	68fb      	ldr	r3, [r7, #12]
9000d190:	895b      	ldrh	r3, [r3, #10]
9000d192:	429a      	cmp	r2, r3
9000d194:	d006      	beq.n	9000d1a4 <pbuf_cat+0x64>
9000d196:	4b10      	ldr	r3, [pc, #64]	; (9000d1d8 <pbuf_cat+0x98>)
9000d198:	f240 3262 	movw	r2, #866	; 0x362
9000d19c:	4911      	ldr	r1, [pc, #68]	; (9000d1e4 <pbuf_cat+0xa4>)
9000d19e:	4810      	ldr	r0, [pc, #64]	; (9000d1e0 <pbuf_cat+0xa0>)
9000d1a0:	f009 fd4e 	bl	90016c40 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
9000d1a4:	68fb      	ldr	r3, [r7, #12]
9000d1a6:	681b      	ldr	r3, [r3, #0]
9000d1a8:	2b00      	cmp	r3, #0
9000d1aa:	d006      	beq.n	9000d1ba <pbuf_cat+0x7a>
9000d1ac:	4b0a      	ldr	r3, [pc, #40]	; (9000d1d8 <pbuf_cat+0x98>)
9000d1ae:	f240 3263 	movw	r2, #867	; 0x363
9000d1b2:	490d      	ldr	r1, [pc, #52]	; (9000d1e8 <pbuf_cat+0xa8>)
9000d1b4:	480a      	ldr	r0, [pc, #40]	; (9000d1e0 <pbuf_cat+0xa0>)
9000d1b6:	f009 fd43 	bl	90016c40 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
9000d1ba:	68fb      	ldr	r3, [r7, #12]
9000d1bc:	891a      	ldrh	r2, [r3, #8]
9000d1be:	683b      	ldr	r3, [r7, #0]
9000d1c0:	891b      	ldrh	r3, [r3, #8]
9000d1c2:	4413      	add	r3, r2
9000d1c4:	b29a      	uxth	r2, r3
9000d1c6:	68fb      	ldr	r3, [r7, #12]
9000d1c8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
9000d1ca:	68fb      	ldr	r3, [r7, #12]
9000d1cc:	683a      	ldr	r2, [r7, #0]
9000d1ce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
9000d1d0:	3710      	adds	r7, #16
9000d1d2:	46bd      	mov	sp, r7
9000d1d4:	bd80      	pop	{r7, pc}
9000d1d6:	bf00      	nop
9000d1d8:	90018bb4 	.word	0x90018bb4
9000d1dc:	90018da8 	.word	0x90018da8
9000d1e0:	90018c14 	.word	0x90018c14
9000d1e4:	90018de0 	.word	0x90018de0
9000d1e8:	90018e10 	.word	0x90018e10

9000d1ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
9000d1ec:	b580      	push	{r7, lr}
9000d1ee:	b086      	sub	sp, #24
9000d1f0:	af00      	add	r7, sp, #0
9000d1f2:	6078      	str	r0, [r7, #4]
9000d1f4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
9000d1f6:	2300      	movs	r3, #0
9000d1f8:	617b      	str	r3, [r7, #20]
9000d1fa:	2300      	movs	r3, #0
9000d1fc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
9000d1fe:	687b      	ldr	r3, [r7, #4]
9000d200:	2b00      	cmp	r3, #0
9000d202:	d008      	beq.n	9000d216 <pbuf_copy+0x2a>
9000d204:	683b      	ldr	r3, [r7, #0]
9000d206:	2b00      	cmp	r3, #0
9000d208:	d005      	beq.n	9000d216 <pbuf_copy+0x2a>
9000d20a:	687b      	ldr	r3, [r7, #4]
9000d20c:	891a      	ldrh	r2, [r3, #8]
9000d20e:	683b      	ldr	r3, [r7, #0]
9000d210:	891b      	ldrh	r3, [r3, #8]
9000d212:	429a      	cmp	r2, r3
9000d214:	d209      	bcs.n	9000d22a <pbuf_copy+0x3e>
9000d216:	4b57      	ldr	r3, [pc, #348]	; (9000d374 <pbuf_copy+0x188>)
9000d218:	f240 32c9 	movw	r2, #969	; 0x3c9
9000d21c:	4956      	ldr	r1, [pc, #344]	; (9000d378 <pbuf_copy+0x18c>)
9000d21e:	4857      	ldr	r0, [pc, #348]	; (9000d37c <pbuf_copy+0x190>)
9000d220:	f009 fd0e 	bl	90016c40 <iprintf>
9000d224:	f06f 030f 	mvn.w	r3, #15
9000d228:	e09f      	b.n	9000d36a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
9000d22a:	687b      	ldr	r3, [r7, #4]
9000d22c:	895b      	ldrh	r3, [r3, #10]
9000d22e:	461a      	mov	r2, r3
9000d230:	697b      	ldr	r3, [r7, #20]
9000d232:	1ad2      	subs	r2, r2, r3
9000d234:	683b      	ldr	r3, [r7, #0]
9000d236:	895b      	ldrh	r3, [r3, #10]
9000d238:	4619      	mov	r1, r3
9000d23a:	693b      	ldr	r3, [r7, #16]
9000d23c:	1acb      	subs	r3, r1, r3
9000d23e:	429a      	cmp	r2, r3
9000d240:	d306      	bcc.n	9000d250 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
9000d242:	683b      	ldr	r3, [r7, #0]
9000d244:	895b      	ldrh	r3, [r3, #10]
9000d246:	461a      	mov	r2, r3
9000d248:	693b      	ldr	r3, [r7, #16]
9000d24a:	1ad3      	subs	r3, r2, r3
9000d24c:	60fb      	str	r3, [r7, #12]
9000d24e:	e005      	b.n	9000d25c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
9000d250:	687b      	ldr	r3, [r7, #4]
9000d252:	895b      	ldrh	r3, [r3, #10]
9000d254:	461a      	mov	r2, r3
9000d256:	697b      	ldr	r3, [r7, #20]
9000d258:	1ad3      	subs	r3, r2, r3
9000d25a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
9000d25c:	687b      	ldr	r3, [r7, #4]
9000d25e:	685a      	ldr	r2, [r3, #4]
9000d260:	697b      	ldr	r3, [r7, #20]
9000d262:	18d0      	adds	r0, r2, r3
9000d264:	683b      	ldr	r3, [r7, #0]
9000d266:	685a      	ldr	r2, [r3, #4]
9000d268:	693b      	ldr	r3, [r7, #16]
9000d26a:	4413      	add	r3, r2
9000d26c:	68fa      	ldr	r2, [r7, #12]
9000d26e:	4619      	mov	r1, r3
9000d270:	f009 fbf0 	bl	90016a54 <memcpy>
    offset_to += len;
9000d274:	697a      	ldr	r2, [r7, #20]
9000d276:	68fb      	ldr	r3, [r7, #12]
9000d278:	4413      	add	r3, r2
9000d27a:	617b      	str	r3, [r7, #20]
    offset_from += len;
9000d27c:	693a      	ldr	r2, [r7, #16]
9000d27e:	68fb      	ldr	r3, [r7, #12]
9000d280:	4413      	add	r3, r2
9000d282:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
9000d284:	687b      	ldr	r3, [r7, #4]
9000d286:	895b      	ldrh	r3, [r3, #10]
9000d288:	461a      	mov	r2, r3
9000d28a:	697b      	ldr	r3, [r7, #20]
9000d28c:	4293      	cmp	r3, r2
9000d28e:	d906      	bls.n	9000d29e <pbuf_copy+0xb2>
9000d290:	4b38      	ldr	r3, [pc, #224]	; (9000d374 <pbuf_copy+0x188>)
9000d292:	f240 32d9 	movw	r2, #985	; 0x3d9
9000d296:	493a      	ldr	r1, [pc, #232]	; (9000d380 <pbuf_copy+0x194>)
9000d298:	4838      	ldr	r0, [pc, #224]	; (9000d37c <pbuf_copy+0x190>)
9000d29a:	f009 fcd1 	bl	90016c40 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
9000d29e:	683b      	ldr	r3, [r7, #0]
9000d2a0:	895b      	ldrh	r3, [r3, #10]
9000d2a2:	461a      	mov	r2, r3
9000d2a4:	693b      	ldr	r3, [r7, #16]
9000d2a6:	4293      	cmp	r3, r2
9000d2a8:	d906      	bls.n	9000d2b8 <pbuf_copy+0xcc>
9000d2aa:	4b32      	ldr	r3, [pc, #200]	; (9000d374 <pbuf_copy+0x188>)
9000d2ac:	f240 32da 	movw	r2, #986	; 0x3da
9000d2b0:	4934      	ldr	r1, [pc, #208]	; (9000d384 <pbuf_copy+0x198>)
9000d2b2:	4832      	ldr	r0, [pc, #200]	; (9000d37c <pbuf_copy+0x190>)
9000d2b4:	f009 fcc4 	bl	90016c40 <iprintf>
    if (offset_from >= p_from->len) {
9000d2b8:	683b      	ldr	r3, [r7, #0]
9000d2ba:	895b      	ldrh	r3, [r3, #10]
9000d2bc:	461a      	mov	r2, r3
9000d2be:	693b      	ldr	r3, [r7, #16]
9000d2c0:	4293      	cmp	r3, r2
9000d2c2:	d304      	bcc.n	9000d2ce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
9000d2c4:	2300      	movs	r3, #0
9000d2c6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
9000d2c8:	683b      	ldr	r3, [r7, #0]
9000d2ca:	681b      	ldr	r3, [r3, #0]
9000d2cc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
9000d2ce:	687b      	ldr	r3, [r7, #4]
9000d2d0:	895b      	ldrh	r3, [r3, #10]
9000d2d2:	461a      	mov	r2, r3
9000d2d4:	697b      	ldr	r3, [r7, #20]
9000d2d6:	4293      	cmp	r3, r2
9000d2d8:	d114      	bne.n	9000d304 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
9000d2da:	2300      	movs	r3, #0
9000d2dc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
9000d2de:	687b      	ldr	r3, [r7, #4]
9000d2e0:	681b      	ldr	r3, [r3, #0]
9000d2e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
9000d2e4:	687b      	ldr	r3, [r7, #4]
9000d2e6:	2b00      	cmp	r3, #0
9000d2e8:	d10c      	bne.n	9000d304 <pbuf_copy+0x118>
9000d2ea:	683b      	ldr	r3, [r7, #0]
9000d2ec:	2b00      	cmp	r3, #0
9000d2ee:	d009      	beq.n	9000d304 <pbuf_copy+0x118>
9000d2f0:	4b20      	ldr	r3, [pc, #128]	; (9000d374 <pbuf_copy+0x188>)
9000d2f2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
9000d2f6:	4924      	ldr	r1, [pc, #144]	; (9000d388 <pbuf_copy+0x19c>)
9000d2f8:	4820      	ldr	r0, [pc, #128]	; (9000d37c <pbuf_copy+0x190>)
9000d2fa:	f009 fca1 	bl	90016c40 <iprintf>
9000d2fe:	f06f 030f 	mvn.w	r3, #15
9000d302:	e032      	b.n	9000d36a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
9000d304:	683b      	ldr	r3, [r7, #0]
9000d306:	2b00      	cmp	r3, #0
9000d308:	d013      	beq.n	9000d332 <pbuf_copy+0x146>
9000d30a:	683b      	ldr	r3, [r7, #0]
9000d30c:	895a      	ldrh	r2, [r3, #10]
9000d30e:	683b      	ldr	r3, [r7, #0]
9000d310:	891b      	ldrh	r3, [r3, #8]
9000d312:	429a      	cmp	r2, r3
9000d314:	d10d      	bne.n	9000d332 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000d316:	683b      	ldr	r3, [r7, #0]
9000d318:	681b      	ldr	r3, [r3, #0]
9000d31a:	2b00      	cmp	r3, #0
9000d31c:	d009      	beq.n	9000d332 <pbuf_copy+0x146>
9000d31e:	4b15      	ldr	r3, [pc, #84]	; (9000d374 <pbuf_copy+0x188>)
9000d320:	f240 32e9 	movw	r2, #1001	; 0x3e9
9000d324:	4919      	ldr	r1, [pc, #100]	; (9000d38c <pbuf_copy+0x1a0>)
9000d326:	4815      	ldr	r0, [pc, #84]	; (9000d37c <pbuf_copy+0x190>)
9000d328:	f009 fc8a 	bl	90016c40 <iprintf>
9000d32c:	f06f 0305 	mvn.w	r3, #5
9000d330:	e01b      	b.n	9000d36a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
9000d332:	687b      	ldr	r3, [r7, #4]
9000d334:	2b00      	cmp	r3, #0
9000d336:	d013      	beq.n	9000d360 <pbuf_copy+0x174>
9000d338:	687b      	ldr	r3, [r7, #4]
9000d33a:	895a      	ldrh	r2, [r3, #10]
9000d33c:	687b      	ldr	r3, [r7, #4]
9000d33e:	891b      	ldrh	r3, [r3, #8]
9000d340:	429a      	cmp	r2, r3
9000d342:	d10d      	bne.n	9000d360 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000d344:	687b      	ldr	r3, [r7, #4]
9000d346:	681b      	ldr	r3, [r3, #0]
9000d348:	2b00      	cmp	r3, #0
9000d34a:	d009      	beq.n	9000d360 <pbuf_copy+0x174>
9000d34c:	4b09      	ldr	r3, [pc, #36]	; (9000d374 <pbuf_copy+0x188>)
9000d34e:	f240 32ee 	movw	r2, #1006	; 0x3ee
9000d352:	490e      	ldr	r1, [pc, #56]	; (9000d38c <pbuf_copy+0x1a0>)
9000d354:	4809      	ldr	r0, [pc, #36]	; (9000d37c <pbuf_copy+0x190>)
9000d356:	f009 fc73 	bl	90016c40 <iprintf>
9000d35a:	f06f 0305 	mvn.w	r3, #5
9000d35e:	e004      	b.n	9000d36a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
9000d360:	683b      	ldr	r3, [r7, #0]
9000d362:	2b00      	cmp	r3, #0
9000d364:	f47f af61 	bne.w	9000d22a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
9000d368:	2300      	movs	r3, #0
}
9000d36a:	4618      	mov	r0, r3
9000d36c:	3718      	adds	r7, #24
9000d36e:	46bd      	mov	sp, r7
9000d370:	bd80      	pop	{r7, pc}
9000d372:	bf00      	nop
9000d374:	90018bb4 	.word	0x90018bb4
9000d378:	90018e5c 	.word	0x90018e5c
9000d37c:	90018c14 	.word	0x90018c14
9000d380:	90018e8c 	.word	0x90018e8c
9000d384:	90018ea4 	.word	0x90018ea4
9000d388:	90018ec0 	.word	0x90018ec0
9000d38c:	90018ed0 	.word	0x90018ed0

9000d390 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
9000d390:	b580      	push	{r7, lr}
9000d392:	b088      	sub	sp, #32
9000d394:	af00      	add	r7, sp, #0
9000d396:	60f8      	str	r0, [r7, #12]
9000d398:	60b9      	str	r1, [r7, #8]
9000d39a:	4611      	mov	r1, r2
9000d39c:	461a      	mov	r2, r3
9000d39e:	460b      	mov	r3, r1
9000d3a0:	80fb      	strh	r3, [r7, #6]
9000d3a2:	4613      	mov	r3, r2
9000d3a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
9000d3a6:	2300      	movs	r3, #0
9000d3a8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
9000d3aa:	2300      	movs	r3, #0
9000d3ac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
9000d3ae:	68fb      	ldr	r3, [r7, #12]
9000d3b0:	2b00      	cmp	r3, #0
9000d3b2:	d108      	bne.n	9000d3c6 <pbuf_copy_partial+0x36>
9000d3b4:	4b2b      	ldr	r3, [pc, #172]	; (9000d464 <pbuf_copy_partial+0xd4>)
9000d3b6:	f240 420a 	movw	r2, #1034	; 0x40a
9000d3ba:	492b      	ldr	r1, [pc, #172]	; (9000d468 <pbuf_copy_partial+0xd8>)
9000d3bc:	482b      	ldr	r0, [pc, #172]	; (9000d46c <pbuf_copy_partial+0xdc>)
9000d3be:	f009 fc3f 	bl	90016c40 <iprintf>
9000d3c2:	2300      	movs	r3, #0
9000d3c4:	e04a      	b.n	9000d45c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
9000d3c6:	68bb      	ldr	r3, [r7, #8]
9000d3c8:	2b00      	cmp	r3, #0
9000d3ca:	d108      	bne.n	9000d3de <pbuf_copy_partial+0x4e>
9000d3cc:	4b25      	ldr	r3, [pc, #148]	; (9000d464 <pbuf_copy_partial+0xd4>)
9000d3ce:	f240 420b 	movw	r2, #1035	; 0x40b
9000d3d2:	4927      	ldr	r1, [pc, #156]	; (9000d470 <pbuf_copy_partial+0xe0>)
9000d3d4:	4825      	ldr	r0, [pc, #148]	; (9000d46c <pbuf_copy_partial+0xdc>)
9000d3d6:	f009 fc33 	bl	90016c40 <iprintf>
9000d3da:	2300      	movs	r3, #0
9000d3dc:	e03e      	b.n	9000d45c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
9000d3de:	68fb      	ldr	r3, [r7, #12]
9000d3e0:	61fb      	str	r3, [r7, #28]
9000d3e2:	e034      	b.n	9000d44e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
9000d3e4:	88bb      	ldrh	r3, [r7, #4]
9000d3e6:	2b00      	cmp	r3, #0
9000d3e8:	d00a      	beq.n	9000d400 <pbuf_copy_partial+0x70>
9000d3ea:	69fb      	ldr	r3, [r7, #28]
9000d3ec:	895b      	ldrh	r3, [r3, #10]
9000d3ee:	88ba      	ldrh	r2, [r7, #4]
9000d3f0:	429a      	cmp	r2, r3
9000d3f2:	d305      	bcc.n	9000d400 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
9000d3f4:	69fb      	ldr	r3, [r7, #28]
9000d3f6:	895b      	ldrh	r3, [r3, #10]
9000d3f8:	88ba      	ldrh	r2, [r7, #4]
9000d3fa:	1ad3      	subs	r3, r2, r3
9000d3fc:	80bb      	strh	r3, [r7, #4]
9000d3fe:	e023      	b.n	9000d448 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
9000d400:	69fb      	ldr	r3, [r7, #28]
9000d402:	895a      	ldrh	r2, [r3, #10]
9000d404:	88bb      	ldrh	r3, [r7, #4]
9000d406:	1ad3      	subs	r3, r2, r3
9000d408:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
9000d40a:	8b3a      	ldrh	r2, [r7, #24]
9000d40c:	88fb      	ldrh	r3, [r7, #6]
9000d40e:	429a      	cmp	r2, r3
9000d410:	d901      	bls.n	9000d416 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
9000d412:	88fb      	ldrh	r3, [r7, #6]
9000d414:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
9000d416:	8b7b      	ldrh	r3, [r7, #26]
9000d418:	68ba      	ldr	r2, [r7, #8]
9000d41a:	18d0      	adds	r0, r2, r3
9000d41c:	69fb      	ldr	r3, [r7, #28]
9000d41e:	685a      	ldr	r2, [r3, #4]
9000d420:	88bb      	ldrh	r3, [r7, #4]
9000d422:	4413      	add	r3, r2
9000d424:	8b3a      	ldrh	r2, [r7, #24]
9000d426:	4619      	mov	r1, r3
9000d428:	f009 fb14 	bl	90016a54 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
9000d42c:	8afa      	ldrh	r2, [r7, #22]
9000d42e:	8b3b      	ldrh	r3, [r7, #24]
9000d430:	4413      	add	r3, r2
9000d432:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
9000d434:	8b7a      	ldrh	r2, [r7, #26]
9000d436:	8b3b      	ldrh	r3, [r7, #24]
9000d438:	4413      	add	r3, r2
9000d43a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
9000d43c:	88fa      	ldrh	r2, [r7, #6]
9000d43e:	8b3b      	ldrh	r3, [r7, #24]
9000d440:	1ad3      	subs	r3, r2, r3
9000d442:	80fb      	strh	r3, [r7, #6]
      offset = 0;
9000d444:	2300      	movs	r3, #0
9000d446:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
9000d448:	69fb      	ldr	r3, [r7, #28]
9000d44a:	681b      	ldr	r3, [r3, #0]
9000d44c:	61fb      	str	r3, [r7, #28]
9000d44e:	88fb      	ldrh	r3, [r7, #6]
9000d450:	2b00      	cmp	r3, #0
9000d452:	d002      	beq.n	9000d45a <pbuf_copy_partial+0xca>
9000d454:	69fb      	ldr	r3, [r7, #28]
9000d456:	2b00      	cmp	r3, #0
9000d458:	d1c4      	bne.n	9000d3e4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
9000d45a:	8afb      	ldrh	r3, [r7, #22]
}
9000d45c:	4618      	mov	r0, r3
9000d45e:	3720      	adds	r7, #32
9000d460:	46bd      	mov	sp, r7
9000d462:	bd80      	pop	{r7, pc}
9000d464:	90018bb4 	.word	0x90018bb4
9000d468:	90018efc 	.word	0x90018efc
9000d46c:	90018c14 	.word	0x90018c14
9000d470:	90018f1c 	.word	0x90018f1c

9000d474 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
9000d474:	b580      	push	{r7, lr}
9000d476:	b084      	sub	sp, #16
9000d478:	af00      	add	r7, sp, #0
9000d47a:	4603      	mov	r3, r0
9000d47c:	603a      	str	r2, [r7, #0]
9000d47e:	71fb      	strb	r3, [r7, #7]
9000d480:	460b      	mov	r3, r1
9000d482:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
9000d484:	683b      	ldr	r3, [r7, #0]
9000d486:	8919      	ldrh	r1, [r3, #8]
9000d488:	88ba      	ldrh	r2, [r7, #4]
9000d48a:	79fb      	ldrb	r3, [r7, #7]
9000d48c:	4618      	mov	r0, r3
9000d48e:	f7ff faa5 	bl	9000c9dc <pbuf_alloc>
9000d492:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
9000d494:	68fb      	ldr	r3, [r7, #12]
9000d496:	2b00      	cmp	r3, #0
9000d498:	d101      	bne.n	9000d49e <pbuf_clone+0x2a>
    return NULL;
9000d49a:	2300      	movs	r3, #0
9000d49c:	e011      	b.n	9000d4c2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
9000d49e:	6839      	ldr	r1, [r7, #0]
9000d4a0:	68f8      	ldr	r0, [r7, #12]
9000d4a2:	f7ff fea3 	bl	9000d1ec <pbuf_copy>
9000d4a6:	4603      	mov	r3, r0
9000d4a8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
9000d4aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
9000d4ae:	2b00      	cmp	r3, #0
9000d4b0:	d006      	beq.n	9000d4c0 <pbuf_clone+0x4c>
9000d4b2:	4b06      	ldr	r3, [pc, #24]	; (9000d4cc <pbuf_clone+0x58>)
9000d4b4:	f240 5224 	movw	r2, #1316	; 0x524
9000d4b8:	4905      	ldr	r1, [pc, #20]	; (9000d4d0 <pbuf_clone+0x5c>)
9000d4ba:	4806      	ldr	r0, [pc, #24]	; (9000d4d4 <pbuf_clone+0x60>)
9000d4bc:	f009 fbc0 	bl	90016c40 <iprintf>
  return q;
9000d4c0:	68fb      	ldr	r3, [r7, #12]
}
9000d4c2:	4618      	mov	r0, r3
9000d4c4:	3710      	adds	r7, #16
9000d4c6:	46bd      	mov	sp, r7
9000d4c8:	bd80      	pop	{r7, pc}
9000d4ca:	bf00      	nop
9000d4cc:	90018bb4 	.word	0x90018bb4
9000d4d0:	90019028 	.word	0x90019028
9000d4d4:	90018c14 	.word	0x90018c14

9000d4d8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
9000d4d8:	b580      	push	{r7, lr}
9000d4da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
9000d4dc:	f009 fbc8 	bl	90016c70 <rand>
9000d4e0:	4603      	mov	r3, r0
9000d4e2:	b29b      	uxth	r3, r3
9000d4e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
9000d4e8:	b29b      	uxth	r3, r3
9000d4ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
9000d4ee:	b29a      	uxth	r2, r3
9000d4f0:	4b01      	ldr	r3, [pc, #4]	; (9000d4f8 <tcp_init+0x20>)
9000d4f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
9000d4f4:	bf00      	nop
9000d4f6:	bd80      	pop	{r7, pc}
9000d4f8:	20000010 	.word	0x20000010

9000d4fc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
9000d4fc:	b580      	push	{r7, lr}
9000d4fe:	b082      	sub	sp, #8
9000d500:	af00      	add	r7, sp, #0
9000d502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
9000d504:	687b      	ldr	r3, [r7, #4]
9000d506:	7d1b      	ldrb	r3, [r3, #20]
9000d508:	2b01      	cmp	r3, #1
9000d50a:	d105      	bne.n	9000d518 <tcp_free+0x1c>
9000d50c:	4b06      	ldr	r3, [pc, #24]	; (9000d528 <tcp_free+0x2c>)
9000d50e:	22d4      	movs	r2, #212	; 0xd4
9000d510:	4906      	ldr	r1, [pc, #24]	; (9000d52c <tcp_free+0x30>)
9000d512:	4807      	ldr	r0, [pc, #28]	; (9000d530 <tcp_free+0x34>)
9000d514:	f009 fb94 	bl	90016c40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
9000d518:	6879      	ldr	r1, [r7, #4]
9000d51a:	2001      	movs	r0, #1
9000d51c:	f7fe fe9e 	bl	9000c25c <memp_free>
}
9000d520:	bf00      	nop
9000d522:	3708      	adds	r7, #8
9000d524:	46bd      	mov	sp, r7
9000d526:	bd80      	pop	{r7, pc}
9000d528:	900190b4 	.word	0x900190b4
9000d52c:	900190e4 	.word	0x900190e4
9000d530:	900190f8 	.word	0x900190f8

9000d534 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
9000d534:	b580      	push	{r7, lr}
9000d536:	b082      	sub	sp, #8
9000d538:	af00      	add	r7, sp, #0
9000d53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
9000d53c:	687b      	ldr	r3, [r7, #4]
9000d53e:	7d1b      	ldrb	r3, [r3, #20]
9000d540:	2b01      	cmp	r3, #1
9000d542:	d105      	bne.n	9000d550 <tcp_free_listen+0x1c>
9000d544:	4b06      	ldr	r3, [pc, #24]	; (9000d560 <tcp_free_listen+0x2c>)
9000d546:	22df      	movs	r2, #223	; 0xdf
9000d548:	4906      	ldr	r1, [pc, #24]	; (9000d564 <tcp_free_listen+0x30>)
9000d54a:	4807      	ldr	r0, [pc, #28]	; (9000d568 <tcp_free_listen+0x34>)
9000d54c:	f009 fb78 	bl	90016c40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
9000d550:	6879      	ldr	r1, [r7, #4]
9000d552:	2002      	movs	r0, #2
9000d554:	f7fe fe82 	bl	9000c25c <memp_free>
}
9000d558:	bf00      	nop
9000d55a:	3708      	adds	r7, #8
9000d55c:	46bd      	mov	sp, r7
9000d55e:	bd80      	pop	{r7, pc}
9000d560:	900190b4 	.word	0x900190b4
9000d564:	90019120 	.word	0x90019120
9000d568:	900190f8 	.word	0x900190f8

9000d56c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
9000d56c:	b580      	push	{r7, lr}
9000d56e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
9000d570:	f001 f8a6 	bl	9000e6c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
9000d574:	4b07      	ldr	r3, [pc, #28]	; (9000d594 <tcp_tmr+0x28>)
9000d576:	781b      	ldrb	r3, [r3, #0]
9000d578:	3301      	adds	r3, #1
9000d57a:	b2da      	uxtb	r2, r3
9000d57c:	4b05      	ldr	r3, [pc, #20]	; (9000d594 <tcp_tmr+0x28>)
9000d57e:	701a      	strb	r2, [r3, #0]
9000d580:	4b04      	ldr	r3, [pc, #16]	; (9000d594 <tcp_tmr+0x28>)
9000d582:	781b      	ldrb	r3, [r3, #0]
9000d584:	f003 0301 	and.w	r3, r3, #1
9000d588:	2b00      	cmp	r3, #0
9000d58a:	d001      	beq.n	9000d590 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
9000d58c:	f000 fd58 	bl	9000e040 <tcp_slowtmr>
  }
}
9000d590:	bf00      	nop
9000d592:	bd80      	pop	{r7, pc}
9000d594:	2000d5dd 	.word	0x2000d5dd

9000d598 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
9000d598:	b580      	push	{r7, lr}
9000d59a:	b084      	sub	sp, #16
9000d59c:	af00      	add	r7, sp, #0
9000d59e:	6078      	str	r0, [r7, #4]
9000d5a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
9000d5a2:	683b      	ldr	r3, [r7, #0]
9000d5a4:	2b00      	cmp	r3, #0
9000d5a6:	d105      	bne.n	9000d5b4 <tcp_remove_listener+0x1c>
9000d5a8:	4b0d      	ldr	r3, [pc, #52]	; (9000d5e0 <tcp_remove_listener+0x48>)
9000d5aa:	22ff      	movs	r2, #255	; 0xff
9000d5ac:	490d      	ldr	r1, [pc, #52]	; (9000d5e4 <tcp_remove_listener+0x4c>)
9000d5ae:	480e      	ldr	r0, [pc, #56]	; (9000d5e8 <tcp_remove_listener+0x50>)
9000d5b0:	f009 fb46 	bl	90016c40 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
9000d5b4:	687b      	ldr	r3, [r7, #4]
9000d5b6:	60fb      	str	r3, [r7, #12]
9000d5b8:	e00a      	b.n	9000d5d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
9000d5ba:	68fb      	ldr	r3, [r7, #12]
9000d5bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000d5be:	683a      	ldr	r2, [r7, #0]
9000d5c0:	429a      	cmp	r2, r3
9000d5c2:	d102      	bne.n	9000d5ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
9000d5c4:	68fb      	ldr	r3, [r7, #12]
9000d5c6:	2200      	movs	r2, #0
9000d5c8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
9000d5ca:	68fb      	ldr	r3, [r7, #12]
9000d5cc:	68db      	ldr	r3, [r3, #12]
9000d5ce:	60fb      	str	r3, [r7, #12]
9000d5d0:	68fb      	ldr	r3, [r7, #12]
9000d5d2:	2b00      	cmp	r3, #0
9000d5d4:	d1f1      	bne.n	9000d5ba <tcp_remove_listener+0x22>
    }
  }
}
9000d5d6:	bf00      	nop
9000d5d8:	bf00      	nop
9000d5da:	3710      	adds	r7, #16
9000d5dc:	46bd      	mov	sp, r7
9000d5de:	bd80      	pop	{r7, pc}
9000d5e0:	900190b4 	.word	0x900190b4
9000d5e4:	9001913c 	.word	0x9001913c
9000d5e8:	900190f8 	.word	0x900190f8

9000d5ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
9000d5ec:	b580      	push	{r7, lr}
9000d5ee:	b084      	sub	sp, #16
9000d5f0:	af00      	add	r7, sp, #0
9000d5f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
9000d5f4:	687b      	ldr	r3, [r7, #4]
9000d5f6:	2b00      	cmp	r3, #0
9000d5f8:	d106      	bne.n	9000d608 <tcp_listen_closed+0x1c>
9000d5fa:	4b14      	ldr	r3, [pc, #80]	; (9000d64c <tcp_listen_closed+0x60>)
9000d5fc:	f240 1211 	movw	r2, #273	; 0x111
9000d600:	4913      	ldr	r1, [pc, #76]	; (9000d650 <tcp_listen_closed+0x64>)
9000d602:	4814      	ldr	r0, [pc, #80]	; (9000d654 <tcp_listen_closed+0x68>)
9000d604:	f009 fb1c 	bl	90016c40 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
9000d608:	687b      	ldr	r3, [r7, #4]
9000d60a:	7d1b      	ldrb	r3, [r3, #20]
9000d60c:	2b01      	cmp	r3, #1
9000d60e:	d006      	beq.n	9000d61e <tcp_listen_closed+0x32>
9000d610:	4b0e      	ldr	r3, [pc, #56]	; (9000d64c <tcp_listen_closed+0x60>)
9000d612:	f44f 7289 	mov.w	r2, #274	; 0x112
9000d616:	4910      	ldr	r1, [pc, #64]	; (9000d658 <tcp_listen_closed+0x6c>)
9000d618:	480e      	ldr	r0, [pc, #56]	; (9000d654 <tcp_listen_closed+0x68>)
9000d61a:	f009 fb11 	bl	90016c40 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
9000d61e:	2301      	movs	r3, #1
9000d620:	60fb      	str	r3, [r7, #12]
9000d622:	e00b      	b.n	9000d63c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
9000d624:	4a0d      	ldr	r2, [pc, #52]	; (9000d65c <tcp_listen_closed+0x70>)
9000d626:	68fb      	ldr	r3, [r7, #12]
9000d628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000d62c:	681b      	ldr	r3, [r3, #0]
9000d62e:	6879      	ldr	r1, [r7, #4]
9000d630:	4618      	mov	r0, r3
9000d632:	f7ff ffb1 	bl	9000d598 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
9000d636:	68fb      	ldr	r3, [r7, #12]
9000d638:	3301      	adds	r3, #1
9000d63a:	60fb      	str	r3, [r7, #12]
9000d63c:	68fb      	ldr	r3, [r7, #12]
9000d63e:	2b03      	cmp	r3, #3
9000d640:	d9f0      	bls.n	9000d624 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
9000d642:	bf00      	nop
9000d644:	bf00      	nop
9000d646:	3710      	adds	r7, #16
9000d648:	46bd      	mov	sp, r7
9000d64a:	bd80      	pop	{r7, pc}
9000d64c:	900190b4 	.word	0x900190b4
9000d650:	90019164 	.word	0x90019164
9000d654:	900190f8 	.word	0x900190f8
9000d658:	90019170 	.word	0x90019170
9000d65c:	9001bdac 	.word	0x9001bdac

9000d660 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
9000d660:	b5b0      	push	{r4, r5, r7, lr}
9000d662:	b088      	sub	sp, #32
9000d664:	af04      	add	r7, sp, #16
9000d666:	6078      	str	r0, [r7, #4]
9000d668:	460b      	mov	r3, r1
9000d66a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
9000d66c:	687b      	ldr	r3, [r7, #4]
9000d66e:	2b00      	cmp	r3, #0
9000d670:	d106      	bne.n	9000d680 <tcp_close_shutdown+0x20>
9000d672:	4b63      	ldr	r3, [pc, #396]	; (9000d800 <tcp_close_shutdown+0x1a0>)
9000d674:	f44f 72af 	mov.w	r2, #350	; 0x15e
9000d678:	4962      	ldr	r1, [pc, #392]	; (9000d804 <tcp_close_shutdown+0x1a4>)
9000d67a:	4863      	ldr	r0, [pc, #396]	; (9000d808 <tcp_close_shutdown+0x1a8>)
9000d67c:	f009 fae0 	bl	90016c40 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
9000d680:	78fb      	ldrb	r3, [r7, #3]
9000d682:	2b00      	cmp	r3, #0
9000d684:	d066      	beq.n	9000d754 <tcp_close_shutdown+0xf4>
9000d686:	687b      	ldr	r3, [r7, #4]
9000d688:	7d1b      	ldrb	r3, [r3, #20]
9000d68a:	2b04      	cmp	r3, #4
9000d68c:	d003      	beq.n	9000d696 <tcp_close_shutdown+0x36>
9000d68e:	687b      	ldr	r3, [r7, #4]
9000d690:	7d1b      	ldrb	r3, [r3, #20]
9000d692:	2b07      	cmp	r3, #7
9000d694:	d15e      	bne.n	9000d754 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
9000d696:	687b      	ldr	r3, [r7, #4]
9000d698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000d69a:	2b00      	cmp	r3, #0
9000d69c:	d104      	bne.n	9000d6a8 <tcp_close_shutdown+0x48>
9000d69e:	687b      	ldr	r3, [r7, #4]
9000d6a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000d6a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000d6a6:	d055      	beq.n	9000d754 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
9000d6a8:	687b      	ldr	r3, [r7, #4]
9000d6aa:	8b5b      	ldrh	r3, [r3, #26]
9000d6ac:	f003 0310 	and.w	r3, r3, #16
9000d6b0:	2b00      	cmp	r3, #0
9000d6b2:	d106      	bne.n	9000d6c2 <tcp_close_shutdown+0x62>
9000d6b4:	4b52      	ldr	r3, [pc, #328]	; (9000d800 <tcp_close_shutdown+0x1a0>)
9000d6b6:	f44f 72b2 	mov.w	r2, #356	; 0x164
9000d6ba:	4954      	ldr	r1, [pc, #336]	; (9000d80c <tcp_close_shutdown+0x1ac>)
9000d6bc:	4852      	ldr	r0, [pc, #328]	; (9000d808 <tcp_close_shutdown+0x1a8>)
9000d6be:	f009 fabf 	bl	90016c40 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
9000d6c2:	687b      	ldr	r3, [r7, #4]
9000d6c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
9000d6c6:	687b      	ldr	r3, [r7, #4]
9000d6c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
9000d6ca:	687d      	ldr	r5, [r7, #4]
9000d6cc:	687b      	ldr	r3, [r7, #4]
9000d6ce:	3304      	adds	r3, #4
9000d6d0:	687a      	ldr	r2, [r7, #4]
9000d6d2:	8ad2      	ldrh	r2, [r2, #22]
9000d6d4:	6879      	ldr	r1, [r7, #4]
9000d6d6:	8b09      	ldrh	r1, [r1, #24]
9000d6d8:	9102      	str	r1, [sp, #8]
9000d6da:	9201      	str	r2, [sp, #4]
9000d6dc:	9300      	str	r3, [sp, #0]
9000d6de:	462b      	mov	r3, r5
9000d6e0:	4622      	mov	r2, r4
9000d6e2:	4601      	mov	r1, r0
9000d6e4:	6878      	ldr	r0, [r7, #4]
9000d6e6:	f005 fdbb 	bl	90013260 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
9000d6ea:	6878      	ldr	r0, [r7, #4]
9000d6ec:	f001 fb98 	bl	9000ee20 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
9000d6f0:	4b47      	ldr	r3, [pc, #284]	; (9000d810 <tcp_close_shutdown+0x1b0>)
9000d6f2:	681b      	ldr	r3, [r3, #0]
9000d6f4:	687a      	ldr	r2, [r7, #4]
9000d6f6:	429a      	cmp	r2, r3
9000d6f8:	d105      	bne.n	9000d706 <tcp_close_shutdown+0xa6>
9000d6fa:	4b45      	ldr	r3, [pc, #276]	; (9000d810 <tcp_close_shutdown+0x1b0>)
9000d6fc:	681b      	ldr	r3, [r3, #0]
9000d6fe:	68db      	ldr	r3, [r3, #12]
9000d700:	4a43      	ldr	r2, [pc, #268]	; (9000d810 <tcp_close_shutdown+0x1b0>)
9000d702:	6013      	str	r3, [r2, #0]
9000d704:	e013      	b.n	9000d72e <tcp_close_shutdown+0xce>
9000d706:	4b42      	ldr	r3, [pc, #264]	; (9000d810 <tcp_close_shutdown+0x1b0>)
9000d708:	681b      	ldr	r3, [r3, #0]
9000d70a:	60fb      	str	r3, [r7, #12]
9000d70c:	e00c      	b.n	9000d728 <tcp_close_shutdown+0xc8>
9000d70e:	68fb      	ldr	r3, [r7, #12]
9000d710:	68db      	ldr	r3, [r3, #12]
9000d712:	687a      	ldr	r2, [r7, #4]
9000d714:	429a      	cmp	r2, r3
9000d716:	d104      	bne.n	9000d722 <tcp_close_shutdown+0xc2>
9000d718:	687b      	ldr	r3, [r7, #4]
9000d71a:	68da      	ldr	r2, [r3, #12]
9000d71c:	68fb      	ldr	r3, [r7, #12]
9000d71e:	60da      	str	r2, [r3, #12]
9000d720:	e005      	b.n	9000d72e <tcp_close_shutdown+0xce>
9000d722:	68fb      	ldr	r3, [r7, #12]
9000d724:	68db      	ldr	r3, [r3, #12]
9000d726:	60fb      	str	r3, [r7, #12]
9000d728:	68fb      	ldr	r3, [r7, #12]
9000d72a:	2b00      	cmp	r3, #0
9000d72c:	d1ef      	bne.n	9000d70e <tcp_close_shutdown+0xae>
9000d72e:	687b      	ldr	r3, [r7, #4]
9000d730:	2200      	movs	r2, #0
9000d732:	60da      	str	r2, [r3, #12]
9000d734:	4b37      	ldr	r3, [pc, #220]	; (9000d814 <tcp_close_shutdown+0x1b4>)
9000d736:	2201      	movs	r2, #1
9000d738:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
9000d73a:	4b37      	ldr	r3, [pc, #220]	; (9000d818 <tcp_close_shutdown+0x1b8>)
9000d73c:	681b      	ldr	r3, [r3, #0]
9000d73e:	687a      	ldr	r2, [r7, #4]
9000d740:	429a      	cmp	r2, r3
9000d742:	d102      	bne.n	9000d74a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
9000d744:	f004 f830 	bl	900117a8 <tcp_trigger_input_pcb_close>
9000d748:	e002      	b.n	9000d750 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
9000d74a:	6878      	ldr	r0, [r7, #4]
9000d74c:	f7ff fed6 	bl	9000d4fc <tcp_free>
      }
      return ERR_OK;
9000d750:	2300      	movs	r3, #0
9000d752:	e050      	b.n	9000d7f6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
9000d754:	687b      	ldr	r3, [r7, #4]
9000d756:	7d1b      	ldrb	r3, [r3, #20]
9000d758:	2b02      	cmp	r3, #2
9000d75a:	d03b      	beq.n	9000d7d4 <tcp_close_shutdown+0x174>
9000d75c:	2b02      	cmp	r3, #2
9000d75e:	dc44      	bgt.n	9000d7ea <tcp_close_shutdown+0x18a>
9000d760:	2b00      	cmp	r3, #0
9000d762:	d002      	beq.n	9000d76a <tcp_close_shutdown+0x10a>
9000d764:	2b01      	cmp	r3, #1
9000d766:	d02a      	beq.n	9000d7be <tcp_close_shutdown+0x15e>
9000d768:	e03f      	b.n	9000d7ea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
9000d76a:	687b      	ldr	r3, [r7, #4]
9000d76c:	8adb      	ldrh	r3, [r3, #22]
9000d76e:	2b00      	cmp	r3, #0
9000d770:	d021      	beq.n	9000d7b6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
9000d772:	4b2a      	ldr	r3, [pc, #168]	; (9000d81c <tcp_close_shutdown+0x1bc>)
9000d774:	681b      	ldr	r3, [r3, #0]
9000d776:	687a      	ldr	r2, [r7, #4]
9000d778:	429a      	cmp	r2, r3
9000d77a:	d105      	bne.n	9000d788 <tcp_close_shutdown+0x128>
9000d77c:	4b27      	ldr	r3, [pc, #156]	; (9000d81c <tcp_close_shutdown+0x1bc>)
9000d77e:	681b      	ldr	r3, [r3, #0]
9000d780:	68db      	ldr	r3, [r3, #12]
9000d782:	4a26      	ldr	r2, [pc, #152]	; (9000d81c <tcp_close_shutdown+0x1bc>)
9000d784:	6013      	str	r3, [r2, #0]
9000d786:	e013      	b.n	9000d7b0 <tcp_close_shutdown+0x150>
9000d788:	4b24      	ldr	r3, [pc, #144]	; (9000d81c <tcp_close_shutdown+0x1bc>)
9000d78a:	681b      	ldr	r3, [r3, #0]
9000d78c:	60bb      	str	r3, [r7, #8]
9000d78e:	e00c      	b.n	9000d7aa <tcp_close_shutdown+0x14a>
9000d790:	68bb      	ldr	r3, [r7, #8]
9000d792:	68db      	ldr	r3, [r3, #12]
9000d794:	687a      	ldr	r2, [r7, #4]
9000d796:	429a      	cmp	r2, r3
9000d798:	d104      	bne.n	9000d7a4 <tcp_close_shutdown+0x144>
9000d79a:	687b      	ldr	r3, [r7, #4]
9000d79c:	68da      	ldr	r2, [r3, #12]
9000d79e:	68bb      	ldr	r3, [r7, #8]
9000d7a0:	60da      	str	r2, [r3, #12]
9000d7a2:	e005      	b.n	9000d7b0 <tcp_close_shutdown+0x150>
9000d7a4:	68bb      	ldr	r3, [r7, #8]
9000d7a6:	68db      	ldr	r3, [r3, #12]
9000d7a8:	60bb      	str	r3, [r7, #8]
9000d7aa:	68bb      	ldr	r3, [r7, #8]
9000d7ac:	2b00      	cmp	r3, #0
9000d7ae:	d1ef      	bne.n	9000d790 <tcp_close_shutdown+0x130>
9000d7b0:	687b      	ldr	r3, [r7, #4]
9000d7b2:	2200      	movs	r2, #0
9000d7b4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
9000d7b6:	6878      	ldr	r0, [r7, #4]
9000d7b8:	f7ff fea0 	bl	9000d4fc <tcp_free>
      break;
9000d7bc:	e01a      	b.n	9000d7f4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
9000d7be:	6878      	ldr	r0, [r7, #4]
9000d7c0:	f7ff ff14 	bl	9000d5ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
9000d7c4:	6879      	ldr	r1, [r7, #4]
9000d7c6:	4816      	ldr	r0, [pc, #88]	; (9000d820 <tcp_close_shutdown+0x1c0>)
9000d7c8:	f001 fb7a 	bl	9000eec0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
9000d7cc:	6878      	ldr	r0, [r7, #4]
9000d7ce:	f7ff feb1 	bl	9000d534 <tcp_free_listen>
      break;
9000d7d2:	e00f      	b.n	9000d7f4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
9000d7d4:	6879      	ldr	r1, [r7, #4]
9000d7d6:	480e      	ldr	r0, [pc, #56]	; (9000d810 <tcp_close_shutdown+0x1b0>)
9000d7d8:	f001 fb72 	bl	9000eec0 <tcp_pcb_remove>
9000d7dc:	4b0d      	ldr	r3, [pc, #52]	; (9000d814 <tcp_close_shutdown+0x1b4>)
9000d7de:	2201      	movs	r2, #1
9000d7e0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
9000d7e2:	6878      	ldr	r0, [r7, #4]
9000d7e4:	f7ff fe8a 	bl	9000d4fc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
9000d7e8:	e004      	b.n	9000d7f4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
9000d7ea:	6878      	ldr	r0, [r7, #4]
9000d7ec:	f000 f81a 	bl	9000d824 <tcp_close_shutdown_fin>
9000d7f0:	4603      	mov	r3, r0
9000d7f2:	e000      	b.n	9000d7f6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
9000d7f4:	2300      	movs	r3, #0
}
9000d7f6:	4618      	mov	r0, r3
9000d7f8:	3710      	adds	r7, #16
9000d7fa:	46bd      	mov	sp, r7
9000d7fc:	bdb0      	pop	{r4, r5, r7, pc}
9000d7fe:	bf00      	nop
9000d800:	900190b4 	.word	0x900190b4
9000d804:	90019188 	.word	0x90019188
9000d808:	900190f8 	.word	0x900190f8
9000d80c:	900191a8 	.word	0x900191a8
9000d810:	2000d5d4 	.word	0x2000d5d4
9000d814:	2000d5dc 	.word	0x2000d5dc
9000d818:	2000d614 	.word	0x2000d614
9000d81c:	2000d5cc 	.word	0x2000d5cc
9000d820:	2000d5d0 	.word	0x2000d5d0

9000d824 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
9000d824:	b580      	push	{r7, lr}
9000d826:	b084      	sub	sp, #16
9000d828:	af00      	add	r7, sp, #0
9000d82a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
9000d82c:	687b      	ldr	r3, [r7, #4]
9000d82e:	2b00      	cmp	r3, #0
9000d830:	d106      	bne.n	9000d840 <tcp_close_shutdown_fin+0x1c>
9000d832:	4b2e      	ldr	r3, [pc, #184]	; (9000d8ec <tcp_close_shutdown_fin+0xc8>)
9000d834:	f44f 72ce 	mov.w	r2, #412	; 0x19c
9000d838:	492d      	ldr	r1, [pc, #180]	; (9000d8f0 <tcp_close_shutdown_fin+0xcc>)
9000d83a:	482e      	ldr	r0, [pc, #184]	; (9000d8f4 <tcp_close_shutdown_fin+0xd0>)
9000d83c:	f009 fa00 	bl	90016c40 <iprintf>

  switch (pcb->state) {
9000d840:	687b      	ldr	r3, [r7, #4]
9000d842:	7d1b      	ldrb	r3, [r3, #20]
9000d844:	2b07      	cmp	r3, #7
9000d846:	d020      	beq.n	9000d88a <tcp_close_shutdown_fin+0x66>
9000d848:	2b07      	cmp	r3, #7
9000d84a:	dc2b      	bgt.n	9000d8a4 <tcp_close_shutdown_fin+0x80>
9000d84c:	2b03      	cmp	r3, #3
9000d84e:	d002      	beq.n	9000d856 <tcp_close_shutdown_fin+0x32>
9000d850:	2b04      	cmp	r3, #4
9000d852:	d00d      	beq.n	9000d870 <tcp_close_shutdown_fin+0x4c>
9000d854:	e026      	b.n	9000d8a4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
9000d856:	6878      	ldr	r0, [r7, #4]
9000d858:	f004 fe10 	bl	9001247c <tcp_send_fin>
9000d85c:	4603      	mov	r3, r0
9000d85e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
9000d860:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000d864:	2b00      	cmp	r3, #0
9000d866:	d11f      	bne.n	9000d8a8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
9000d868:	687b      	ldr	r3, [r7, #4]
9000d86a:	2205      	movs	r2, #5
9000d86c:	751a      	strb	r2, [r3, #20]
      }
      break;
9000d86e:	e01b      	b.n	9000d8a8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
9000d870:	6878      	ldr	r0, [r7, #4]
9000d872:	f004 fe03 	bl	9001247c <tcp_send_fin>
9000d876:	4603      	mov	r3, r0
9000d878:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
9000d87a:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000d87e:	2b00      	cmp	r3, #0
9000d880:	d114      	bne.n	9000d8ac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
9000d882:	687b      	ldr	r3, [r7, #4]
9000d884:	2205      	movs	r2, #5
9000d886:	751a      	strb	r2, [r3, #20]
      }
      break;
9000d888:	e010      	b.n	9000d8ac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
9000d88a:	6878      	ldr	r0, [r7, #4]
9000d88c:	f004 fdf6 	bl	9001247c <tcp_send_fin>
9000d890:	4603      	mov	r3, r0
9000d892:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
9000d894:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000d898:	2b00      	cmp	r3, #0
9000d89a:	d109      	bne.n	9000d8b0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
9000d89c:	687b      	ldr	r3, [r7, #4]
9000d89e:	2209      	movs	r2, #9
9000d8a0:	751a      	strb	r2, [r3, #20]
      }
      break;
9000d8a2:	e005      	b.n	9000d8b0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
9000d8a4:	2300      	movs	r3, #0
9000d8a6:	e01c      	b.n	9000d8e2 <tcp_close_shutdown_fin+0xbe>
      break;
9000d8a8:	bf00      	nop
9000d8aa:	e002      	b.n	9000d8b2 <tcp_close_shutdown_fin+0x8e>
      break;
9000d8ac:	bf00      	nop
9000d8ae:	e000      	b.n	9000d8b2 <tcp_close_shutdown_fin+0x8e>
      break;
9000d8b0:	bf00      	nop
  }

  if (err == ERR_OK) {
9000d8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000d8b6:	2b00      	cmp	r3, #0
9000d8b8:	d103      	bne.n	9000d8c2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
9000d8ba:	6878      	ldr	r0, [r7, #4]
9000d8bc:	f004 ff1c 	bl	900126f8 <tcp_output>
9000d8c0:	e00d      	b.n	9000d8de <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
9000d8c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000d8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
9000d8ca:	d108      	bne.n	9000d8de <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
9000d8cc:	687b      	ldr	r3, [r7, #4]
9000d8ce:	8b5b      	ldrh	r3, [r3, #26]
9000d8d0:	f043 0308 	orr.w	r3, r3, #8
9000d8d4:	b29a      	uxth	r2, r3
9000d8d6:	687b      	ldr	r3, [r7, #4]
9000d8d8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
9000d8da:	2300      	movs	r3, #0
9000d8dc:	e001      	b.n	9000d8e2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
9000d8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
9000d8e2:	4618      	mov	r0, r3
9000d8e4:	3710      	adds	r7, #16
9000d8e6:	46bd      	mov	sp, r7
9000d8e8:	bd80      	pop	{r7, pc}
9000d8ea:	bf00      	nop
9000d8ec:	900190b4 	.word	0x900190b4
9000d8f0:	90019164 	.word	0x90019164
9000d8f4:	900190f8 	.word	0x900190f8

9000d8f8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
9000d8f8:	b580      	push	{r7, lr}
9000d8fa:	b082      	sub	sp, #8
9000d8fc:	af00      	add	r7, sp, #0
9000d8fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
9000d900:	687b      	ldr	r3, [r7, #4]
9000d902:	2b00      	cmp	r3, #0
9000d904:	d109      	bne.n	9000d91a <tcp_close+0x22>
9000d906:	4b0f      	ldr	r3, [pc, #60]	; (9000d944 <tcp_close+0x4c>)
9000d908:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
9000d90c:	490e      	ldr	r1, [pc, #56]	; (9000d948 <tcp_close+0x50>)
9000d90e:	480f      	ldr	r0, [pc, #60]	; (9000d94c <tcp_close+0x54>)
9000d910:	f009 f996 	bl	90016c40 <iprintf>
9000d914:	f06f 030f 	mvn.w	r3, #15
9000d918:	e00f      	b.n	9000d93a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
9000d91a:	687b      	ldr	r3, [r7, #4]
9000d91c:	7d1b      	ldrb	r3, [r3, #20]
9000d91e:	2b01      	cmp	r3, #1
9000d920:	d006      	beq.n	9000d930 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
9000d922:	687b      	ldr	r3, [r7, #4]
9000d924:	8b5b      	ldrh	r3, [r3, #26]
9000d926:	f043 0310 	orr.w	r3, r3, #16
9000d92a:	b29a      	uxth	r2, r3
9000d92c:	687b      	ldr	r3, [r7, #4]
9000d92e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
9000d930:	2101      	movs	r1, #1
9000d932:	6878      	ldr	r0, [r7, #4]
9000d934:	f7ff fe94 	bl	9000d660 <tcp_close_shutdown>
9000d938:	4603      	mov	r3, r0
}
9000d93a:	4618      	mov	r0, r3
9000d93c:	3708      	adds	r7, #8
9000d93e:	46bd      	mov	sp, r7
9000d940:	bd80      	pop	{r7, pc}
9000d942:	bf00      	nop
9000d944:	900190b4 	.word	0x900190b4
9000d948:	900191c4 	.word	0x900191c4
9000d94c:	900190f8 	.word	0x900190f8

9000d950 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
9000d950:	b580      	push	{r7, lr}
9000d952:	b084      	sub	sp, #16
9000d954:	af00      	add	r7, sp, #0
9000d956:	60f8      	str	r0, [r7, #12]
9000d958:	60b9      	str	r1, [r7, #8]
9000d95a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
9000d95c:	68fb      	ldr	r3, [r7, #12]
9000d95e:	2b00      	cmp	r3, #0
9000d960:	d109      	bne.n	9000d976 <tcp_shutdown+0x26>
9000d962:	4b26      	ldr	r3, [pc, #152]	; (9000d9fc <tcp_shutdown+0xac>)
9000d964:	f240 2207 	movw	r2, #519	; 0x207
9000d968:	4925      	ldr	r1, [pc, #148]	; (9000da00 <tcp_shutdown+0xb0>)
9000d96a:	4826      	ldr	r0, [pc, #152]	; (9000da04 <tcp_shutdown+0xb4>)
9000d96c:	f009 f968 	bl	90016c40 <iprintf>
9000d970:	f06f 030f 	mvn.w	r3, #15
9000d974:	e03d      	b.n	9000d9f2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
9000d976:	68fb      	ldr	r3, [r7, #12]
9000d978:	7d1b      	ldrb	r3, [r3, #20]
9000d97a:	2b01      	cmp	r3, #1
9000d97c:	d102      	bne.n	9000d984 <tcp_shutdown+0x34>
    return ERR_CONN;
9000d97e:	f06f 030a 	mvn.w	r3, #10
9000d982:	e036      	b.n	9000d9f2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
9000d984:	68bb      	ldr	r3, [r7, #8]
9000d986:	2b00      	cmp	r3, #0
9000d988:	d01b      	beq.n	9000d9c2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
9000d98a:	68fb      	ldr	r3, [r7, #12]
9000d98c:	8b5b      	ldrh	r3, [r3, #26]
9000d98e:	f043 0310 	orr.w	r3, r3, #16
9000d992:	b29a      	uxth	r2, r3
9000d994:	68fb      	ldr	r3, [r7, #12]
9000d996:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
9000d998:	687b      	ldr	r3, [r7, #4]
9000d99a:	2b00      	cmp	r3, #0
9000d99c:	d005      	beq.n	9000d9aa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
9000d99e:	2101      	movs	r1, #1
9000d9a0:	68f8      	ldr	r0, [r7, #12]
9000d9a2:	f7ff fe5d 	bl	9000d660 <tcp_close_shutdown>
9000d9a6:	4603      	mov	r3, r0
9000d9a8:	e023      	b.n	9000d9f2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
9000d9aa:	68fb      	ldr	r3, [r7, #12]
9000d9ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000d9ae:	2b00      	cmp	r3, #0
9000d9b0:	d007      	beq.n	9000d9c2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
9000d9b2:	68fb      	ldr	r3, [r7, #12]
9000d9b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000d9b6:	4618      	mov	r0, r3
9000d9b8:	f7ff faf4 	bl	9000cfa4 <pbuf_free>
      pcb->refused_data = NULL;
9000d9bc:	68fb      	ldr	r3, [r7, #12]
9000d9be:	2200      	movs	r2, #0
9000d9c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
9000d9c2:	687b      	ldr	r3, [r7, #4]
9000d9c4:	2b00      	cmp	r3, #0
9000d9c6:	d013      	beq.n	9000d9f0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
9000d9c8:	68fb      	ldr	r3, [r7, #12]
9000d9ca:	7d1b      	ldrb	r3, [r3, #20]
9000d9cc:	2b04      	cmp	r3, #4
9000d9ce:	dc02      	bgt.n	9000d9d6 <tcp_shutdown+0x86>
9000d9d0:	2b03      	cmp	r3, #3
9000d9d2:	da02      	bge.n	9000d9da <tcp_shutdown+0x8a>
9000d9d4:	e009      	b.n	9000d9ea <tcp_shutdown+0x9a>
9000d9d6:	2b07      	cmp	r3, #7
9000d9d8:	d107      	bne.n	9000d9ea <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
9000d9da:	68bb      	ldr	r3, [r7, #8]
9000d9dc:	b2db      	uxtb	r3, r3
9000d9de:	4619      	mov	r1, r3
9000d9e0:	68f8      	ldr	r0, [r7, #12]
9000d9e2:	f7ff fe3d 	bl	9000d660 <tcp_close_shutdown>
9000d9e6:	4603      	mov	r3, r0
9000d9e8:	e003      	b.n	9000d9f2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
9000d9ea:	f06f 030a 	mvn.w	r3, #10
9000d9ee:	e000      	b.n	9000d9f2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
9000d9f0:	2300      	movs	r3, #0
}
9000d9f2:	4618      	mov	r0, r3
9000d9f4:	3710      	adds	r7, #16
9000d9f6:	46bd      	mov	sp, r7
9000d9f8:	bd80      	pop	{r7, pc}
9000d9fa:	bf00      	nop
9000d9fc:	900190b4 	.word	0x900190b4
9000da00:	900191dc 	.word	0x900191dc
9000da04:	900190f8 	.word	0x900190f8

9000da08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
9000da08:	b580      	push	{r7, lr}
9000da0a:	b08e      	sub	sp, #56	; 0x38
9000da0c:	af04      	add	r7, sp, #16
9000da0e:	6078      	str	r0, [r7, #4]
9000da10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
9000da12:	687b      	ldr	r3, [r7, #4]
9000da14:	2b00      	cmp	r3, #0
9000da16:	d107      	bne.n	9000da28 <tcp_abandon+0x20>
9000da18:	4b52      	ldr	r3, [pc, #328]	; (9000db64 <tcp_abandon+0x15c>)
9000da1a:	f240 223d 	movw	r2, #573	; 0x23d
9000da1e:	4952      	ldr	r1, [pc, #328]	; (9000db68 <tcp_abandon+0x160>)
9000da20:	4852      	ldr	r0, [pc, #328]	; (9000db6c <tcp_abandon+0x164>)
9000da22:	f009 f90d 	bl	90016c40 <iprintf>
9000da26:	e099      	b.n	9000db5c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
9000da28:	687b      	ldr	r3, [r7, #4]
9000da2a:	7d1b      	ldrb	r3, [r3, #20]
9000da2c:	2b01      	cmp	r3, #1
9000da2e:	d106      	bne.n	9000da3e <tcp_abandon+0x36>
9000da30:	4b4c      	ldr	r3, [pc, #304]	; (9000db64 <tcp_abandon+0x15c>)
9000da32:	f44f 7210 	mov.w	r2, #576	; 0x240
9000da36:	494e      	ldr	r1, [pc, #312]	; (9000db70 <tcp_abandon+0x168>)
9000da38:	484c      	ldr	r0, [pc, #304]	; (9000db6c <tcp_abandon+0x164>)
9000da3a:	f009 f901 	bl	90016c40 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
9000da3e:	687b      	ldr	r3, [r7, #4]
9000da40:	7d1b      	ldrb	r3, [r3, #20]
9000da42:	2b0a      	cmp	r3, #10
9000da44:	d107      	bne.n	9000da56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
9000da46:	6879      	ldr	r1, [r7, #4]
9000da48:	484a      	ldr	r0, [pc, #296]	; (9000db74 <tcp_abandon+0x16c>)
9000da4a:	f001 fa39 	bl	9000eec0 <tcp_pcb_remove>
    tcp_free(pcb);
9000da4e:	6878      	ldr	r0, [r7, #4]
9000da50:	f7ff fd54 	bl	9000d4fc <tcp_free>
9000da54:	e082      	b.n	9000db5c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
9000da56:	2300      	movs	r3, #0
9000da58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
9000da5a:	2300      	movs	r3, #0
9000da5c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
9000da5e:	687b      	ldr	r3, [r7, #4]
9000da60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000da62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
9000da64:	687b      	ldr	r3, [r7, #4]
9000da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000da68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
9000da6a:	687b      	ldr	r3, [r7, #4]
9000da6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000da70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
9000da72:	687b      	ldr	r3, [r7, #4]
9000da74:	691b      	ldr	r3, [r3, #16]
9000da76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
9000da78:	687b      	ldr	r3, [r7, #4]
9000da7a:	7d1b      	ldrb	r3, [r3, #20]
9000da7c:	2b00      	cmp	r3, #0
9000da7e:	d126      	bne.n	9000dace <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
9000da80:	687b      	ldr	r3, [r7, #4]
9000da82:	8adb      	ldrh	r3, [r3, #22]
9000da84:	2b00      	cmp	r3, #0
9000da86:	d02e      	beq.n	9000dae6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
9000da88:	4b3b      	ldr	r3, [pc, #236]	; (9000db78 <tcp_abandon+0x170>)
9000da8a:	681b      	ldr	r3, [r3, #0]
9000da8c:	687a      	ldr	r2, [r7, #4]
9000da8e:	429a      	cmp	r2, r3
9000da90:	d105      	bne.n	9000da9e <tcp_abandon+0x96>
9000da92:	4b39      	ldr	r3, [pc, #228]	; (9000db78 <tcp_abandon+0x170>)
9000da94:	681b      	ldr	r3, [r3, #0]
9000da96:	68db      	ldr	r3, [r3, #12]
9000da98:	4a37      	ldr	r2, [pc, #220]	; (9000db78 <tcp_abandon+0x170>)
9000da9a:	6013      	str	r3, [r2, #0]
9000da9c:	e013      	b.n	9000dac6 <tcp_abandon+0xbe>
9000da9e:	4b36      	ldr	r3, [pc, #216]	; (9000db78 <tcp_abandon+0x170>)
9000daa0:	681b      	ldr	r3, [r3, #0]
9000daa2:	61fb      	str	r3, [r7, #28]
9000daa4:	e00c      	b.n	9000dac0 <tcp_abandon+0xb8>
9000daa6:	69fb      	ldr	r3, [r7, #28]
9000daa8:	68db      	ldr	r3, [r3, #12]
9000daaa:	687a      	ldr	r2, [r7, #4]
9000daac:	429a      	cmp	r2, r3
9000daae:	d104      	bne.n	9000daba <tcp_abandon+0xb2>
9000dab0:	687b      	ldr	r3, [r7, #4]
9000dab2:	68da      	ldr	r2, [r3, #12]
9000dab4:	69fb      	ldr	r3, [r7, #28]
9000dab6:	60da      	str	r2, [r3, #12]
9000dab8:	e005      	b.n	9000dac6 <tcp_abandon+0xbe>
9000daba:	69fb      	ldr	r3, [r7, #28]
9000dabc:	68db      	ldr	r3, [r3, #12]
9000dabe:	61fb      	str	r3, [r7, #28]
9000dac0:	69fb      	ldr	r3, [r7, #28]
9000dac2:	2b00      	cmp	r3, #0
9000dac4:	d1ef      	bne.n	9000daa6 <tcp_abandon+0x9e>
9000dac6:	687b      	ldr	r3, [r7, #4]
9000dac8:	2200      	movs	r2, #0
9000daca:	60da      	str	r2, [r3, #12]
9000dacc:	e00b      	b.n	9000dae6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
9000dace:	683b      	ldr	r3, [r7, #0]
9000dad0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
9000dad2:	687b      	ldr	r3, [r7, #4]
9000dad4:	8adb      	ldrh	r3, [r3, #22]
9000dad6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
9000dad8:	6879      	ldr	r1, [r7, #4]
9000dada:	4828      	ldr	r0, [pc, #160]	; (9000db7c <tcp_abandon+0x174>)
9000dadc:	f001 f9f0 	bl	9000eec0 <tcp_pcb_remove>
9000dae0:	4b27      	ldr	r3, [pc, #156]	; (9000db80 <tcp_abandon+0x178>)
9000dae2:	2201      	movs	r2, #1
9000dae4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
9000dae6:	687b      	ldr	r3, [r7, #4]
9000dae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000daea:	2b00      	cmp	r3, #0
9000daec:	d004      	beq.n	9000daf8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
9000daee:	687b      	ldr	r3, [r7, #4]
9000daf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000daf2:	4618      	mov	r0, r3
9000daf4:	f000 fec4 	bl	9000e880 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
9000daf8:	687b      	ldr	r3, [r7, #4]
9000dafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000dafc:	2b00      	cmp	r3, #0
9000dafe:	d004      	beq.n	9000db0a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
9000db00:	687b      	ldr	r3, [r7, #4]
9000db02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000db04:	4618      	mov	r0, r3
9000db06:	f000 febb 	bl	9000e880 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
9000db0a:	687b      	ldr	r3, [r7, #4]
9000db0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000db0e:	2b00      	cmp	r3, #0
9000db10:	d004      	beq.n	9000db1c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
9000db12:	687b      	ldr	r3, [r7, #4]
9000db14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000db16:	4618      	mov	r0, r3
9000db18:	f000 feb2 	bl	9000e880 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
9000db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000db1e:	2b00      	cmp	r3, #0
9000db20:	d00e      	beq.n	9000db40 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
9000db22:	6879      	ldr	r1, [r7, #4]
9000db24:	687b      	ldr	r3, [r7, #4]
9000db26:	3304      	adds	r3, #4
9000db28:	687a      	ldr	r2, [r7, #4]
9000db2a:	8b12      	ldrh	r2, [r2, #24]
9000db2c:	9202      	str	r2, [sp, #8]
9000db2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
9000db30:	9201      	str	r2, [sp, #4]
9000db32:	9300      	str	r3, [sp, #0]
9000db34:	460b      	mov	r3, r1
9000db36:	697a      	ldr	r2, [r7, #20]
9000db38:	69b9      	ldr	r1, [r7, #24]
9000db3a:	6878      	ldr	r0, [r7, #4]
9000db3c:	f005 fb90 	bl	90013260 <tcp_rst>
    }
    last_state = pcb->state;
9000db40:	687b      	ldr	r3, [r7, #4]
9000db42:	7d1b      	ldrb	r3, [r3, #20]
9000db44:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
9000db46:	6878      	ldr	r0, [r7, #4]
9000db48:	f7ff fcd8 	bl	9000d4fc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
9000db4c:	693b      	ldr	r3, [r7, #16]
9000db4e:	2b00      	cmp	r3, #0
9000db50:	d004      	beq.n	9000db5c <tcp_abandon+0x154>
9000db52:	693b      	ldr	r3, [r7, #16]
9000db54:	f06f 010c 	mvn.w	r1, #12
9000db58:	68f8      	ldr	r0, [r7, #12]
9000db5a:	4798      	blx	r3
  }
}
9000db5c:	3728      	adds	r7, #40	; 0x28
9000db5e:	46bd      	mov	sp, r7
9000db60:	bd80      	pop	{r7, pc}
9000db62:	bf00      	nop
9000db64:	900190b4 	.word	0x900190b4
9000db68:	900191f8 	.word	0x900191f8
9000db6c:	900190f8 	.word	0x900190f8
9000db70:	90019214 	.word	0x90019214
9000db74:	2000d5d8 	.word	0x2000d5d8
9000db78:	2000d5cc 	.word	0x2000d5cc
9000db7c:	2000d5d4 	.word	0x2000d5d4
9000db80:	2000d5dc 	.word	0x2000d5dc

9000db84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
9000db84:	b580      	push	{r7, lr}
9000db86:	b082      	sub	sp, #8
9000db88:	af00      	add	r7, sp, #0
9000db8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
9000db8c:	2101      	movs	r1, #1
9000db8e:	6878      	ldr	r0, [r7, #4]
9000db90:	f7ff ff3a 	bl	9000da08 <tcp_abandon>
}
9000db94:	bf00      	nop
9000db96:	3708      	adds	r7, #8
9000db98:	46bd      	mov	sp, r7
9000db9a:	bd80      	pop	{r7, pc}

9000db9c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
9000db9c:	b580      	push	{r7, lr}
9000db9e:	b088      	sub	sp, #32
9000dba0:	af00      	add	r7, sp, #0
9000dba2:	60f8      	str	r0, [r7, #12]
9000dba4:	60b9      	str	r1, [r7, #8]
9000dba6:	4613      	mov	r3, r2
9000dba8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
9000dbaa:	2304      	movs	r3, #4
9000dbac:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
9000dbae:	68bb      	ldr	r3, [r7, #8]
9000dbb0:	2b00      	cmp	r3, #0
9000dbb2:	d101      	bne.n	9000dbb8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
9000dbb4:	4b3e      	ldr	r3, [pc, #248]	; (9000dcb0 <tcp_bind+0x114>)
9000dbb6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
9000dbb8:	68fb      	ldr	r3, [r7, #12]
9000dbba:	2b00      	cmp	r3, #0
9000dbbc:	d109      	bne.n	9000dbd2 <tcp_bind+0x36>
9000dbbe:	4b3d      	ldr	r3, [pc, #244]	; (9000dcb4 <tcp_bind+0x118>)
9000dbc0:	f240 22a9 	movw	r2, #681	; 0x2a9
9000dbc4:	493c      	ldr	r1, [pc, #240]	; (9000dcb8 <tcp_bind+0x11c>)
9000dbc6:	483d      	ldr	r0, [pc, #244]	; (9000dcbc <tcp_bind+0x120>)
9000dbc8:	f009 f83a 	bl	90016c40 <iprintf>
9000dbcc:	f06f 030f 	mvn.w	r3, #15
9000dbd0:	e06a      	b.n	9000dca8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
9000dbd2:	68fb      	ldr	r3, [r7, #12]
9000dbd4:	7d1b      	ldrb	r3, [r3, #20]
9000dbd6:	2b00      	cmp	r3, #0
9000dbd8:	d009      	beq.n	9000dbee <tcp_bind+0x52>
9000dbda:	4b36      	ldr	r3, [pc, #216]	; (9000dcb4 <tcp_bind+0x118>)
9000dbdc:	f240 22ab 	movw	r2, #683	; 0x2ab
9000dbe0:	4937      	ldr	r1, [pc, #220]	; (9000dcc0 <tcp_bind+0x124>)
9000dbe2:	4836      	ldr	r0, [pc, #216]	; (9000dcbc <tcp_bind+0x120>)
9000dbe4:	f009 f82c 	bl	90016c40 <iprintf>
9000dbe8:	f06f 0305 	mvn.w	r3, #5
9000dbec:	e05c      	b.n	9000dca8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
9000dbee:	88fb      	ldrh	r3, [r7, #6]
9000dbf0:	2b00      	cmp	r3, #0
9000dbf2:	d109      	bne.n	9000dc08 <tcp_bind+0x6c>
    port = tcp_new_port();
9000dbf4:	f000 f9de 	bl	9000dfb4 <tcp_new_port>
9000dbf8:	4603      	mov	r3, r0
9000dbfa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
9000dbfc:	88fb      	ldrh	r3, [r7, #6]
9000dbfe:	2b00      	cmp	r3, #0
9000dc00:	d135      	bne.n	9000dc6e <tcp_bind+0xd2>
      return ERR_BUF;
9000dc02:	f06f 0301 	mvn.w	r3, #1
9000dc06:	e04f      	b.n	9000dca8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
9000dc08:	2300      	movs	r3, #0
9000dc0a:	61fb      	str	r3, [r7, #28]
9000dc0c:	e02b      	b.n	9000dc66 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
9000dc0e:	4a2d      	ldr	r2, [pc, #180]	; (9000dcc4 <tcp_bind+0x128>)
9000dc10:	69fb      	ldr	r3, [r7, #28]
9000dc12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000dc16:	681b      	ldr	r3, [r3, #0]
9000dc18:	61bb      	str	r3, [r7, #24]
9000dc1a:	e01e      	b.n	9000dc5a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
9000dc1c:	69bb      	ldr	r3, [r7, #24]
9000dc1e:	8adb      	ldrh	r3, [r3, #22]
9000dc20:	88fa      	ldrh	r2, [r7, #6]
9000dc22:	429a      	cmp	r2, r3
9000dc24:	d116      	bne.n	9000dc54 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
9000dc26:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
9000dc28:	2b00      	cmp	r3, #0
9000dc2a:	d010      	beq.n	9000dc4e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
9000dc2c:	69bb      	ldr	r3, [r7, #24]
9000dc2e:	681b      	ldr	r3, [r3, #0]
9000dc30:	2b00      	cmp	r3, #0
9000dc32:	d00c      	beq.n	9000dc4e <tcp_bind+0xb2>
9000dc34:	68bb      	ldr	r3, [r7, #8]
9000dc36:	2b00      	cmp	r3, #0
9000dc38:	d009      	beq.n	9000dc4e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
9000dc3a:	68bb      	ldr	r3, [r7, #8]
9000dc3c:	681b      	ldr	r3, [r3, #0]
9000dc3e:	2b00      	cmp	r3, #0
9000dc40:	d005      	beq.n	9000dc4e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
9000dc42:	69bb      	ldr	r3, [r7, #24]
9000dc44:	681a      	ldr	r2, [r3, #0]
9000dc46:	68bb      	ldr	r3, [r7, #8]
9000dc48:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
9000dc4a:	429a      	cmp	r2, r3
9000dc4c:	d102      	bne.n	9000dc54 <tcp_bind+0xb8>
              return ERR_USE;
9000dc4e:	f06f 0307 	mvn.w	r3, #7
9000dc52:	e029      	b.n	9000dca8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
9000dc54:	69bb      	ldr	r3, [r7, #24]
9000dc56:	68db      	ldr	r3, [r3, #12]
9000dc58:	61bb      	str	r3, [r7, #24]
9000dc5a:	69bb      	ldr	r3, [r7, #24]
9000dc5c:	2b00      	cmp	r3, #0
9000dc5e:	d1dd      	bne.n	9000dc1c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
9000dc60:	69fb      	ldr	r3, [r7, #28]
9000dc62:	3301      	adds	r3, #1
9000dc64:	61fb      	str	r3, [r7, #28]
9000dc66:	69fa      	ldr	r2, [r7, #28]
9000dc68:	697b      	ldr	r3, [r7, #20]
9000dc6a:	429a      	cmp	r2, r3
9000dc6c:	dbcf      	blt.n	9000dc0e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
9000dc6e:	68bb      	ldr	r3, [r7, #8]
9000dc70:	2b00      	cmp	r3, #0
9000dc72:	d00c      	beq.n	9000dc8e <tcp_bind+0xf2>
9000dc74:	68bb      	ldr	r3, [r7, #8]
9000dc76:	681b      	ldr	r3, [r3, #0]
9000dc78:	2b00      	cmp	r3, #0
9000dc7a:	d008      	beq.n	9000dc8e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
9000dc7c:	68bb      	ldr	r3, [r7, #8]
9000dc7e:	2b00      	cmp	r3, #0
9000dc80:	d002      	beq.n	9000dc88 <tcp_bind+0xec>
9000dc82:	68bb      	ldr	r3, [r7, #8]
9000dc84:	681b      	ldr	r3, [r3, #0]
9000dc86:	e000      	b.n	9000dc8a <tcp_bind+0xee>
9000dc88:	2300      	movs	r3, #0
9000dc8a:	68fa      	ldr	r2, [r7, #12]
9000dc8c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
9000dc8e:	68fb      	ldr	r3, [r7, #12]
9000dc90:	88fa      	ldrh	r2, [r7, #6]
9000dc92:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
9000dc94:	4b0c      	ldr	r3, [pc, #48]	; (9000dcc8 <tcp_bind+0x12c>)
9000dc96:	681a      	ldr	r2, [r3, #0]
9000dc98:	68fb      	ldr	r3, [r7, #12]
9000dc9a:	60da      	str	r2, [r3, #12]
9000dc9c:	4a0a      	ldr	r2, [pc, #40]	; (9000dcc8 <tcp_bind+0x12c>)
9000dc9e:	68fb      	ldr	r3, [r7, #12]
9000dca0:	6013      	str	r3, [r2, #0]
9000dca2:	f005 fc9f 	bl	900135e4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
9000dca6:	2300      	movs	r3, #0
}
9000dca8:	4618      	mov	r0, r3
9000dcaa:	3720      	adds	r7, #32
9000dcac:	46bd      	mov	sp, r7
9000dcae:	bd80      	pop	{r7, pc}
9000dcb0:	9001bdd4 	.word	0x9001bdd4
9000dcb4:	900190b4 	.word	0x900190b4
9000dcb8:	90019248 	.word	0x90019248
9000dcbc:	900190f8 	.word	0x900190f8
9000dcc0:	90019260 	.word	0x90019260
9000dcc4:	9001bdac 	.word	0x9001bdac
9000dcc8:	2000d5cc 	.word	0x2000d5cc

9000dccc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
9000dccc:	b580      	push	{r7, lr}
9000dcce:	b084      	sub	sp, #16
9000dcd0:	af00      	add	r7, sp, #0
9000dcd2:	60f8      	str	r0, [r7, #12]
9000dcd4:	60b9      	str	r1, [r7, #8]
9000dcd6:	4613      	mov	r3, r2
9000dcd8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
9000dcda:	68bb      	ldr	r3, [r7, #8]
9000dcdc:	2b00      	cmp	r3, #0
9000dcde:	d106      	bne.n	9000dcee <tcp_accept_null+0x22>
9000dce0:	4b07      	ldr	r3, [pc, #28]	; (9000dd00 <tcp_accept_null+0x34>)
9000dce2:	f240 320f 	movw	r2, #783	; 0x30f
9000dce6:	4907      	ldr	r1, [pc, #28]	; (9000dd04 <tcp_accept_null+0x38>)
9000dce8:	4807      	ldr	r0, [pc, #28]	; (9000dd08 <tcp_accept_null+0x3c>)
9000dcea:	f008 ffa9 	bl	90016c40 <iprintf>

  tcp_abort(pcb);
9000dcee:	68b8      	ldr	r0, [r7, #8]
9000dcf0:	f7ff ff48 	bl	9000db84 <tcp_abort>

  return ERR_ABRT;
9000dcf4:	f06f 030c 	mvn.w	r3, #12
}
9000dcf8:	4618      	mov	r0, r3
9000dcfa:	3710      	adds	r7, #16
9000dcfc:	46bd      	mov	sp, r7
9000dcfe:	bd80      	pop	{r7, pc}
9000dd00:	900190b4 	.word	0x900190b4
9000dd04:	90019288 	.word	0x90019288
9000dd08:	900190f8 	.word	0x900190f8

9000dd0c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
9000dd0c:	b580      	push	{r7, lr}
9000dd0e:	b088      	sub	sp, #32
9000dd10:	af00      	add	r7, sp, #0
9000dd12:	60f8      	str	r0, [r7, #12]
9000dd14:	460b      	mov	r3, r1
9000dd16:	607a      	str	r2, [r7, #4]
9000dd18:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
9000dd1a:	2300      	movs	r3, #0
9000dd1c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
9000dd1e:	68fb      	ldr	r3, [r7, #12]
9000dd20:	2b00      	cmp	r3, #0
9000dd22:	d109      	bne.n	9000dd38 <tcp_listen_with_backlog_and_err+0x2c>
9000dd24:	4b47      	ldr	r3, [pc, #284]	; (9000de44 <tcp_listen_with_backlog_and_err+0x138>)
9000dd26:	f240 3259 	movw	r2, #857	; 0x359
9000dd2a:	4947      	ldr	r1, [pc, #284]	; (9000de48 <tcp_listen_with_backlog_and_err+0x13c>)
9000dd2c:	4847      	ldr	r0, [pc, #284]	; (9000de4c <tcp_listen_with_backlog_and_err+0x140>)
9000dd2e:	f008 ff87 	bl	90016c40 <iprintf>
9000dd32:	23f0      	movs	r3, #240	; 0xf0
9000dd34:	76fb      	strb	r3, [r7, #27]
9000dd36:	e079      	b.n	9000de2c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
9000dd38:	68fb      	ldr	r3, [r7, #12]
9000dd3a:	7d1b      	ldrb	r3, [r3, #20]
9000dd3c:	2b00      	cmp	r3, #0
9000dd3e:	d009      	beq.n	9000dd54 <tcp_listen_with_backlog_and_err+0x48>
9000dd40:	4b40      	ldr	r3, [pc, #256]	; (9000de44 <tcp_listen_with_backlog_and_err+0x138>)
9000dd42:	f240 325a 	movw	r2, #858	; 0x35a
9000dd46:	4942      	ldr	r1, [pc, #264]	; (9000de50 <tcp_listen_with_backlog_and_err+0x144>)
9000dd48:	4840      	ldr	r0, [pc, #256]	; (9000de4c <tcp_listen_with_backlog_and_err+0x140>)
9000dd4a:	f008 ff79 	bl	90016c40 <iprintf>
9000dd4e:	23f1      	movs	r3, #241	; 0xf1
9000dd50:	76fb      	strb	r3, [r7, #27]
9000dd52:	e06b      	b.n	9000de2c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
9000dd54:	68fb      	ldr	r3, [r7, #12]
9000dd56:	7d1b      	ldrb	r3, [r3, #20]
9000dd58:	2b01      	cmp	r3, #1
9000dd5a:	d104      	bne.n	9000dd66 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
9000dd5c:	68fb      	ldr	r3, [r7, #12]
9000dd5e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
9000dd60:	23f7      	movs	r3, #247	; 0xf7
9000dd62:	76fb      	strb	r3, [r7, #27]
    goto done;
9000dd64:	e062      	b.n	9000de2c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
9000dd66:	2002      	movs	r0, #2
9000dd68:	f7fe fa26 	bl	9000c1b8 <memp_malloc>
9000dd6c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
9000dd6e:	69fb      	ldr	r3, [r7, #28]
9000dd70:	2b00      	cmp	r3, #0
9000dd72:	d102      	bne.n	9000dd7a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
9000dd74:	23ff      	movs	r3, #255	; 0xff
9000dd76:	76fb      	strb	r3, [r7, #27]
    goto done;
9000dd78:	e058      	b.n	9000de2c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
9000dd7a:	68fb      	ldr	r3, [r7, #12]
9000dd7c:	691a      	ldr	r2, [r3, #16]
9000dd7e:	69fb      	ldr	r3, [r7, #28]
9000dd80:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
9000dd82:	68fb      	ldr	r3, [r7, #12]
9000dd84:	8ada      	ldrh	r2, [r3, #22]
9000dd86:	69fb      	ldr	r3, [r7, #28]
9000dd88:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
9000dd8a:	69fb      	ldr	r3, [r7, #28]
9000dd8c:	2201      	movs	r2, #1
9000dd8e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
9000dd90:	68fb      	ldr	r3, [r7, #12]
9000dd92:	7d5a      	ldrb	r2, [r3, #21]
9000dd94:	69fb      	ldr	r3, [r7, #28]
9000dd96:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
9000dd98:	68fb      	ldr	r3, [r7, #12]
9000dd9a:	7a5a      	ldrb	r2, [r3, #9]
9000dd9c:	69fb      	ldr	r3, [r7, #28]
9000dd9e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
9000dda0:	69fb      	ldr	r3, [r7, #28]
9000dda2:	2200      	movs	r2, #0
9000dda4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
9000dda6:	68fb      	ldr	r3, [r7, #12]
9000dda8:	7ada      	ldrb	r2, [r3, #11]
9000ddaa:	69fb      	ldr	r3, [r7, #28]
9000ddac:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
9000ddae:	68fb      	ldr	r3, [r7, #12]
9000ddb0:	7a9a      	ldrb	r2, [r3, #10]
9000ddb2:	69fb      	ldr	r3, [r7, #28]
9000ddb4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
9000ddb6:	68fb      	ldr	r3, [r7, #12]
9000ddb8:	681a      	ldr	r2, [r3, #0]
9000ddba:	69fb      	ldr	r3, [r7, #28]
9000ddbc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
9000ddbe:	68fb      	ldr	r3, [r7, #12]
9000ddc0:	8adb      	ldrh	r3, [r3, #22]
9000ddc2:	2b00      	cmp	r3, #0
9000ddc4:	d021      	beq.n	9000de0a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
9000ddc6:	4b23      	ldr	r3, [pc, #140]	; (9000de54 <tcp_listen_with_backlog_and_err+0x148>)
9000ddc8:	681b      	ldr	r3, [r3, #0]
9000ddca:	68fa      	ldr	r2, [r7, #12]
9000ddcc:	429a      	cmp	r2, r3
9000ddce:	d105      	bne.n	9000dddc <tcp_listen_with_backlog_and_err+0xd0>
9000ddd0:	4b20      	ldr	r3, [pc, #128]	; (9000de54 <tcp_listen_with_backlog_and_err+0x148>)
9000ddd2:	681b      	ldr	r3, [r3, #0]
9000ddd4:	68db      	ldr	r3, [r3, #12]
9000ddd6:	4a1f      	ldr	r2, [pc, #124]	; (9000de54 <tcp_listen_with_backlog_and_err+0x148>)
9000ddd8:	6013      	str	r3, [r2, #0]
9000ddda:	e013      	b.n	9000de04 <tcp_listen_with_backlog_and_err+0xf8>
9000dddc:	4b1d      	ldr	r3, [pc, #116]	; (9000de54 <tcp_listen_with_backlog_and_err+0x148>)
9000ddde:	681b      	ldr	r3, [r3, #0]
9000dde0:	617b      	str	r3, [r7, #20]
9000dde2:	e00c      	b.n	9000ddfe <tcp_listen_with_backlog_and_err+0xf2>
9000dde4:	697b      	ldr	r3, [r7, #20]
9000dde6:	68db      	ldr	r3, [r3, #12]
9000dde8:	68fa      	ldr	r2, [r7, #12]
9000ddea:	429a      	cmp	r2, r3
9000ddec:	d104      	bne.n	9000ddf8 <tcp_listen_with_backlog_and_err+0xec>
9000ddee:	68fb      	ldr	r3, [r7, #12]
9000ddf0:	68da      	ldr	r2, [r3, #12]
9000ddf2:	697b      	ldr	r3, [r7, #20]
9000ddf4:	60da      	str	r2, [r3, #12]
9000ddf6:	e005      	b.n	9000de04 <tcp_listen_with_backlog_and_err+0xf8>
9000ddf8:	697b      	ldr	r3, [r7, #20]
9000ddfa:	68db      	ldr	r3, [r3, #12]
9000ddfc:	617b      	str	r3, [r7, #20]
9000ddfe:	697b      	ldr	r3, [r7, #20]
9000de00:	2b00      	cmp	r3, #0
9000de02:	d1ef      	bne.n	9000dde4 <tcp_listen_with_backlog_and_err+0xd8>
9000de04:	68fb      	ldr	r3, [r7, #12]
9000de06:	2200      	movs	r2, #0
9000de08:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
9000de0a:	68f8      	ldr	r0, [r7, #12]
9000de0c:	f7ff fb76 	bl	9000d4fc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
9000de10:	69fb      	ldr	r3, [r7, #28]
9000de12:	4a11      	ldr	r2, [pc, #68]	; (9000de58 <tcp_listen_with_backlog_and_err+0x14c>)
9000de14:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
9000de16:	4b11      	ldr	r3, [pc, #68]	; (9000de5c <tcp_listen_with_backlog_and_err+0x150>)
9000de18:	681a      	ldr	r2, [r3, #0]
9000de1a:	69fb      	ldr	r3, [r7, #28]
9000de1c:	60da      	str	r2, [r3, #12]
9000de1e:	4a0f      	ldr	r2, [pc, #60]	; (9000de5c <tcp_listen_with_backlog_and_err+0x150>)
9000de20:	69fb      	ldr	r3, [r7, #28]
9000de22:	6013      	str	r3, [r2, #0]
9000de24:	f005 fbde 	bl	900135e4 <tcp_timer_needed>
  res = ERR_OK;
9000de28:	2300      	movs	r3, #0
9000de2a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
9000de2c:	687b      	ldr	r3, [r7, #4]
9000de2e:	2b00      	cmp	r3, #0
9000de30:	d002      	beq.n	9000de38 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
9000de32:	687b      	ldr	r3, [r7, #4]
9000de34:	7efa      	ldrb	r2, [r7, #27]
9000de36:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
9000de38:	69fb      	ldr	r3, [r7, #28]
}
9000de3a:	4618      	mov	r0, r3
9000de3c:	3720      	adds	r7, #32
9000de3e:	46bd      	mov	sp, r7
9000de40:	bd80      	pop	{r7, pc}
9000de42:	bf00      	nop
9000de44:	900190b4 	.word	0x900190b4
9000de48:	900192a8 	.word	0x900192a8
9000de4c:	900190f8 	.word	0x900190f8
9000de50:	900192d8 	.word	0x900192d8
9000de54:	2000d5cc 	.word	0x2000d5cc
9000de58:	9000dccd 	.word	0x9000dccd
9000de5c:	2000d5d0 	.word	0x2000d5d0

9000de60 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
9000de60:	b580      	push	{r7, lr}
9000de62:	b084      	sub	sp, #16
9000de64:	af00      	add	r7, sp, #0
9000de66:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
9000de68:	687b      	ldr	r3, [r7, #4]
9000de6a:	2b00      	cmp	r3, #0
9000de6c:	d106      	bne.n	9000de7c <tcp_update_rcv_ann_wnd+0x1c>
9000de6e:	4b25      	ldr	r3, [pc, #148]	; (9000df04 <tcp_update_rcv_ann_wnd+0xa4>)
9000de70:	f240 32a6 	movw	r2, #934	; 0x3a6
9000de74:	4924      	ldr	r1, [pc, #144]	; (9000df08 <tcp_update_rcv_ann_wnd+0xa8>)
9000de76:	4825      	ldr	r0, [pc, #148]	; (9000df0c <tcp_update_rcv_ann_wnd+0xac>)
9000de78:	f008 fee2 	bl	90016c40 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
9000de7c:	687b      	ldr	r3, [r7, #4]
9000de7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000de80:	687a      	ldr	r2, [r7, #4]
9000de82:	8d12      	ldrh	r2, [r2, #40]	; 0x28
9000de84:	4413      	add	r3, r2
9000de86:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
9000de88:	687b      	ldr	r3, [r7, #4]
9000de8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000de8c:	687a      	ldr	r2, [r7, #4]
9000de8e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
9000de90:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
9000de94:	bf28      	it	cs
9000de96:	f44f 6286 	movcs.w	r2, #1072	; 0x430
9000de9a:	b292      	uxth	r2, r2
9000de9c:	4413      	add	r3, r2
9000de9e:	68fa      	ldr	r2, [r7, #12]
9000dea0:	1ad3      	subs	r3, r2, r3
9000dea2:	2b00      	cmp	r3, #0
9000dea4:	db08      	blt.n	9000deb8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
9000dea6:	687b      	ldr	r3, [r7, #4]
9000dea8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000deaa:	687b      	ldr	r3, [r7, #4]
9000deac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
9000deae:	687b      	ldr	r3, [r7, #4]
9000deb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000deb2:	68fa      	ldr	r2, [r7, #12]
9000deb4:	1ad3      	subs	r3, r2, r3
9000deb6:	e020      	b.n	9000defa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
9000deb8:	687b      	ldr	r3, [r7, #4]
9000deba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000debc:	687b      	ldr	r3, [r7, #4]
9000debe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000dec0:	1ad3      	subs	r3, r2, r3
9000dec2:	2b00      	cmp	r3, #0
9000dec4:	dd03      	ble.n	9000dece <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
9000dec6:	687b      	ldr	r3, [r7, #4]
9000dec8:	2200      	movs	r2, #0
9000deca:	855a      	strh	r2, [r3, #42]	; 0x2a
9000decc:	e014      	b.n	9000def8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
9000dece:	687b      	ldr	r3, [r7, #4]
9000ded0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000ded2:	687b      	ldr	r3, [r7, #4]
9000ded4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ded6:	1ad3      	subs	r3, r2, r3
9000ded8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
9000deda:	68bb      	ldr	r3, [r7, #8]
9000dedc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000dee0:	d306      	bcc.n	9000def0 <tcp_update_rcv_ann_wnd+0x90>
9000dee2:	4b08      	ldr	r3, [pc, #32]	; (9000df04 <tcp_update_rcv_ann_wnd+0xa4>)
9000dee4:	f240 32b6 	movw	r2, #950	; 0x3b6
9000dee8:	4909      	ldr	r1, [pc, #36]	; (9000df10 <tcp_update_rcv_ann_wnd+0xb0>)
9000deea:	4808      	ldr	r0, [pc, #32]	; (9000df0c <tcp_update_rcv_ann_wnd+0xac>)
9000deec:	f008 fea8 	bl	90016c40 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
9000def0:	68bb      	ldr	r3, [r7, #8]
9000def2:	b29a      	uxth	r2, r3
9000def4:	687b      	ldr	r3, [r7, #4]
9000def6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
9000def8:	2300      	movs	r3, #0
  }
}
9000defa:	4618      	mov	r0, r3
9000defc:	3710      	adds	r7, #16
9000defe:	46bd      	mov	sp, r7
9000df00:	bd80      	pop	{r7, pc}
9000df02:	bf00      	nop
9000df04:	900190b4 	.word	0x900190b4
9000df08:	90019310 	.word	0x90019310
9000df0c:	900190f8 	.word	0x900190f8
9000df10:	90019334 	.word	0x90019334

9000df14 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
9000df14:	b580      	push	{r7, lr}
9000df16:	b084      	sub	sp, #16
9000df18:	af00      	add	r7, sp, #0
9000df1a:	6078      	str	r0, [r7, #4]
9000df1c:	460b      	mov	r3, r1
9000df1e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
9000df20:	687b      	ldr	r3, [r7, #4]
9000df22:	2b00      	cmp	r3, #0
9000df24:	d107      	bne.n	9000df36 <tcp_recved+0x22>
9000df26:	4b1f      	ldr	r3, [pc, #124]	; (9000dfa4 <tcp_recved+0x90>)
9000df28:	f240 32cf 	movw	r2, #975	; 0x3cf
9000df2c:	491e      	ldr	r1, [pc, #120]	; (9000dfa8 <tcp_recved+0x94>)
9000df2e:	481f      	ldr	r0, [pc, #124]	; (9000dfac <tcp_recved+0x98>)
9000df30:	f008 fe86 	bl	90016c40 <iprintf>
9000df34:	e032      	b.n	9000df9c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
9000df36:	687b      	ldr	r3, [r7, #4]
9000df38:	7d1b      	ldrb	r3, [r3, #20]
9000df3a:	2b01      	cmp	r3, #1
9000df3c:	d106      	bne.n	9000df4c <tcp_recved+0x38>
9000df3e:	4b19      	ldr	r3, [pc, #100]	; (9000dfa4 <tcp_recved+0x90>)
9000df40:	f240 32d2 	movw	r2, #978	; 0x3d2
9000df44:	491a      	ldr	r1, [pc, #104]	; (9000dfb0 <tcp_recved+0x9c>)
9000df46:	4819      	ldr	r0, [pc, #100]	; (9000dfac <tcp_recved+0x98>)
9000df48:	f008 fe7a 	bl	90016c40 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
9000df4c:	687b      	ldr	r3, [r7, #4]
9000df4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000df50:	887b      	ldrh	r3, [r7, #2]
9000df52:	4413      	add	r3, r2
9000df54:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
9000df56:	89fb      	ldrh	r3, [r7, #14]
9000df58:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000df5c:	d804      	bhi.n	9000df68 <tcp_recved+0x54>
9000df5e:	687b      	ldr	r3, [r7, #4]
9000df60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000df62:	89fa      	ldrh	r2, [r7, #14]
9000df64:	429a      	cmp	r2, r3
9000df66:	d204      	bcs.n	9000df72 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
9000df68:	687b      	ldr	r3, [r7, #4]
9000df6a:	f44f 6206 	mov.w	r2, #2144	; 0x860
9000df6e:	851a      	strh	r2, [r3, #40]	; 0x28
9000df70:	e002      	b.n	9000df78 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
9000df72:	687b      	ldr	r3, [r7, #4]
9000df74:	89fa      	ldrh	r2, [r7, #14]
9000df76:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
9000df78:	6878      	ldr	r0, [r7, #4]
9000df7a:	f7ff ff71 	bl	9000de60 <tcp_update_rcv_ann_wnd>
9000df7e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
9000df80:	68bb      	ldr	r3, [r7, #8]
9000df82:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
9000df86:	d309      	bcc.n	9000df9c <tcp_recved+0x88>
    tcp_ack_now(pcb);
9000df88:	687b      	ldr	r3, [r7, #4]
9000df8a:	8b5b      	ldrh	r3, [r3, #26]
9000df8c:	f043 0302 	orr.w	r3, r3, #2
9000df90:	b29a      	uxth	r2, r3
9000df92:	687b      	ldr	r3, [r7, #4]
9000df94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
9000df96:	6878      	ldr	r0, [r7, #4]
9000df98:	f004 fbae 	bl	900126f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
9000df9c:	3710      	adds	r7, #16
9000df9e:	46bd      	mov	sp, r7
9000dfa0:	bd80      	pop	{r7, pc}
9000dfa2:	bf00      	nop
9000dfa4:	900190b4 	.word	0x900190b4
9000dfa8:	90019350 	.word	0x90019350
9000dfac:	900190f8 	.word	0x900190f8
9000dfb0:	90019368 	.word	0x90019368

9000dfb4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
9000dfb4:	b480      	push	{r7}
9000dfb6:	b083      	sub	sp, #12
9000dfb8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
9000dfba:	2300      	movs	r3, #0
9000dfbc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
9000dfbe:	4b1e      	ldr	r3, [pc, #120]	; (9000e038 <tcp_new_port+0x84>)
9000dfc0:	881b      	ldrh	r3, [r3, #0]
9000dfc2:	3301      	adds	r3, #1
9000dfc4:	b29a      	uxth	r2, r3
9000dfc6:	4b1c      	ldr	r3, [pc, #112]	; (9000e038 <tcp_new_port+0x84>)
9000dfc8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
9000dfca:	4b1b      	ldr	r3, [pc, #108]	; (9000e038 <tcp_new_port+0x84>)
9000dfcc:	881b      	ldrh	r3, [r3, #0]
9000dfce:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000dfd2:	4293      	cmp	r3, r2
9000dfd4:	d103      	bne.n	9000dfde <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
9000dfd6:	4b18      	ldr	r3, [pc, #96]	; (9000e038 <tcp_new_port+0x84>)
9000dfd8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
9000dfdc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
9000dfde:	2300      	movs	r3, #0
9000dfe0:	71fb      	strb	r3, [r7, #7]
9000dfe2:	e01e      	b.n	9000e022 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
9000dfe4:	79fb      	ldrb	r3, [r7, #7]
9000dfe6:	4a15      	ldr	r2, [pc, #84]	; (9000e03c <tcp_new_port+0x88>)
9000dfe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000dfec:	681b      	ldr	r3, [r3, #0]
9000dfee:	603b      	str	r3, [r7, #0]
9000dff0:	e011      	b.n	9000e016 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
9000dff2:	683b      	ldr	r3, [r7, #0]
9000dff4:	8ada      	ldrh	r2, [r3, #22]
9000dff6:	4b10      	ldr	r3, [pc, #64]	; (9000e038 <tcp_new_port+0x84>)
9000dff8:	881b      	ldrh	r3, [r3, #0]
9000dffa:	429a      	cmp	r2, r3
9000dffc:	d108      	bne.n	9000e010 <tcp_new_port+0x5c>
        n++;
9000dffe:	88bb      	ldrh	r3, [r7, #4]
9000e000:	3301      	adds	r3, #1
9000e002:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
9000e004:	88bb      	ldrh	r3, [r7, #4]
9000e006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000e00a:	d3d8      	bcc.n	9000dfbe <tcp_new_port+0xa>
          return 0;
9000e00c:	2300      	movs	r3, #0
9000e00e:	e00d      	b.n	9000e02c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
9000e010:	683b      	ldr	r3, [r7, #0]
9000e012:	68db      	ldr	r3, [r3, #12]
9000e014:	603b      	str	r3, [r7, #0]
9000e016:	683b      	ldr	r3, [r7, #0]
9000e018:	2b00      	cmp	r3, #0
9000e01a:	d1ea      	bne.n	9000dff2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
9000e01c:	79fb      	ldrb	r3, [r7, #7]
9000e01e:	3301      	adds	r3, #1
9000e020:	71fb      	strb	r3, [r7, #7]
9000e022:	79fb      	ldrb	r3, [r7, #7]
9000e024:	2b03      	cmp	r3, #3
9000e026:	d9dd      	bls.n	9000dfe4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
9000e028:	4b03      	ldr	r3, [pc, #12]	; (9000e038 <tcp_new_port+0x84>)
9000e02a:	881b      	ldrh	r3, [r3, #0]
}
9000e02c:	4618      	mov	r0, r3
9000e02e:	370c      	adds	r7, #12
9000e030:	46bd      	mov	sp, r7
9000e032:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e036:	4770      	bx	lr
9000e038:	20000010 	.word	0x20000010
9000e03c:	9001bdac 	.word	0x9001bdac

9000e040 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
9000e040:	b5b0      	push	{r4, r5, r7, lr}
9000e042:	b090      	sub	sp, #64	; 0x40
9000e044:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
9000e046:	2300      	movs	r3, #0
9000e048:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
9000e04c:	4b94      	ldr	r3, [pc, #592]	; (9000e2a0 <tcp_slowtmr+0x260>)
9000e04e:	681b      	ldr	r3, [r3, #0]
9000e050:	3301      	adds	r3, #1
9000e052:	4a93      	ldr	r2, [pc, #588]	; (9000e2a0 <tcp_slowtmr+0x260>)
9000e054:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
9000e056:	4b93      	ldr	r3, [pc, #588]	; (9000e2a4 <tcp_slowtmr+0x264>)
9000e058:	781b      	ldrb	r3, [r3, #0]
9000e05a:	3301      	adds	r3, #1
9000e05c:	b2da      	uxtb	r2, r3
9000e05e:	4b91      	ldr	r3, [pc, #580]	; (9000e2a4 <tcp_slowtmr+0x264>)
9000e060:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
9000e062:	2300      	movs	r3, #0
9000e064:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
9000e066:	4b90      	ldr	r3, [pc, #576]	; (9000e2a8 <tcp_slowtmr+0x268>)
9000e068:	681b      	ldr	r3, [r3, #0]
9000e06a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
9000e06c:	e29d      	b.n	9000e5aa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
9000e06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e070:	7d1b      	ldrb	r3, [r3, #20]
9000e072:	2b00      	cmp	r3, #0
9000e074:	d106      	bne.n	9000e084 <tcp_slowtmr+0x44>
9000e076:	4b8d      	ldr	r3, [pc, #564]	; (9000e2ac <tcp_slowtmr+0x26c>)
9000e078:	f240 42be 	movw	r2, #1214	; 0x4be
9000e07c:	498c      	ldr	r1, [pc, #560]	; (9000e2b0 <tcp_slowtmr+0x270>)
9000e07e:	488d      	ldr	r0, [pc, #564]	; (9000e2b4 <tcp_slowtmr+0x274>)
9000e080:	f008 fdde 	bl	90016c40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
9000e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e086:	7d1b      	ldrb	r3, [r3, #20]
9000e088:	2b01      	cmp	r3, #1
9000e08a:	d106      	bne.n	9000e09a <tcp_slowtmr+0x5a>
9000e08c:	4b87      	ldr	r3, [pc, #540]	; (9000e2ac <tcp_slowtmr+0x26c>)
9000e08e:	f240 42bf 	movw	r2, #1215	; 0x4bf
9000e092:	4989      	ldr	r1, [pc, #548]	; (9000e2b8 <tcp_slowtmr+0x278>)
9000e094:	4887      	ldr	r0, [pc, #540]	; (9000e2b4 <tcp_slowtmr+0x274>)
9000e096:	f008 fdd3 	bl	90016c40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
9000e09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e09c:	7d1b      	ldrb	r3, [r3, #20]
9000e09e:	2b0a      	cmp	r3, #10
9000e0a0:	d106      	bne.n	9000e0b0 <tcp_slowtmr+0x70>
9000e0a2:	4b82      	ldr	r3, [pc, #520]	; (9000e2ac <tcp_slowtmr+0x26c>)
9000e0a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
9000e0a8:	4984      	ldr	r1, [pc, #528]	; (9000e2bc <tcp_slowtmr+0x27c>)
9000e0aa:	4882      	ldr	r0, [pc, #520]	; (9000e2b4 <tcp_slowtmr+0x274>)
9000e0ac:	f008 fdc8 	bl	90016c40 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
9000e0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e0b2:	7f9a      	ldrb	r2, [r3, #30]
9000e0b4:	4b7b      	ldr	r3, [pc, #492]	; (9000e2a4 <tcp_slowtmr+0x264>)
9000e0b6:	781b      	ldrb	r3, [r3, #0]
9000e0b8:	429a      	cmp	r2, r3
9000e0ba:	d105      	bne.n	9000e0c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
9000e0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e0be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
9000e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e0c2:	68db      	ldr	r3, [r3, #12]
9000e0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
9000e0c6:	e270      	b.n	9000e5aa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
9000e0c8:	4b76      	ldr	r3, [pc, #472]	; (9000e2a4 <tcp_slowtmr+0x264>)
9000e0ca:	781a      	ldrb	r2, [r3, #0]
9000e0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e0ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
9000e0d0:	2300      	movs	r3, #0
9000e0d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
9000e0d6:	2300      	movs	r3, #0
9000e0d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
9000e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e0de:	7d1b      	ldrb	r3, [r3, #20]
9000e0e0:	2b02      	cmp	r3, #2
9000e0e2:	d10a      	bne.n	9000e0fa <tcp_slowtmr+0xba>
9000e0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e0e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000e0ea:	2b05      	cmp	r3, #5
9000e0ec:	d905      	bls.n	9000e0fa <tcp_slowtmr+0xba>
      ++pcb_remove;
9000e0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e0f2:	3301      	adds	r3, #1
9000e0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000e0f8:	e11e      	b.n	9000e338 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
9000e0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e0fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000e100:	2b0b      	cmp	r3, #11
9000e102:	d905      	bls.n	9000e110 <tcp_slowtmr+0xd0>
      ++pcb_remove;
9000e104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e108:	3301      	adds	r3, #1
9000e10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000e10e:	e113      	b.n	9000e338 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
9000e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e112:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000e116:	2b00      	cmp	r3, #0
9000e118:	d075      	beq.n	9000e206 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
9000e11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000e11e:	2b00      	cmp	r3, #0
9000e120:	d006      	beq.n	9000e130 <tcp_slowtmr+0xf0>
9000e122:	4b62      	ldr	r3, [pc, #392]	; (9000e2ac <tcp_slowtmr+0x26c>)
9000e124:	f240 42d4 	movw	r2, #1236	; 0x4d4
9000e128:	4965      	ldr	r1, [pc, #404]	; (9000e2c0 <tcp_slowtmr+0x280>)
9000e12a:	4862      	ldr	r0, [pc, #392]	; (9000e2b4 <tcp_slowtmr+0x274>)
9000e12c:	f008 fd88 	bl	90016c40 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
9000e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000e134:	2b00      	cmp	r3, #0
9000e136:	d106      	bne.n	9000e146 <tcp_slowtmr+0x106>
9000e138:	4b5c      	ldr	r3, [pc, #368]	; (9000e2ac <tcp_slowtmr+0x26c>)
9000e13a:	f240 42d5 	movw	r2, #1237	; 0x4d5
9000e13e:	4961      	ldr	r1, [pc, #388]	; (9000e2c4 <tcp_slowtmr+0x284>)
9000e140:	485c      	ldr	r0, [pc, #368]	; (9000e2b4 <tcp_slowtmr+0x274>)
9000e142:	f008 fd7d 	bl	90016c40 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
9000e146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e148:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
9000e14c:	2b0b      	cmp	r3, #11
9000e14e:	d905      	bls.n	9000e15c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
9000e150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e154:	3301      	adds	r3, #1
9000e156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000e15a:	e0ed      	b.n	9000e338 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
9000e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e15e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000e162:	3b01      	subs	r3, #1
9000e164:	4a58      	ldr	r2, [pc, #352]	; (9000e2c8 <tcp_slowtmr+0x288>)
9000e166:	5cd3      	ldrb	r3, [r2, r3]
9000e168:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
9000e16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e16c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000e170:	7c7a      	ldrb	r2, [r7, #17]
9000e172:	429a      	cmp	r2, r3
9000e174:	d907      	bls.n	9000e186 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
9000e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e178:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000e17c:	3301      	adds	r3, #1
9000e17e:	b2da      	uxtb	r2, r3
9000e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e182:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
9000e186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e188:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000e18c:	7c7a      	ldrb	r2, [r7, #17]
9000e18e:	429a      	cmp	r2, r3
9000e190:	f200 80d2 	bhi.w	9000e338 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
9000e194:	2301      	movs	r3, #1
9000e196:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
9000e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e19a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000e19e:	2b00      	cmp	r3, #0
9000e1a0:	d108      	bne.n	9000e1b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
9000e1a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e1a4:	f005 f950 	bl	90013448 <tcp_zero_window_probe>
9000e1a8:	4603      	mov	r3, r0
9000e1aa:	2b00      	cmp	r3, #0
9000e1ac:	d014      	beq.n	9000e1d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
9000e1ae:	2300      	movs	r3, #0
9000e1b0:	623b      	str	r3, [r7, #32]
9000e1b2:	e011      	b.n	9000e1d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
9000e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e1b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000e1ba:	4619      	mov	r1, r3
9000e1bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e1be:	f004 f815 	bl	900121ec <tcp_split_unsent_seg>
9000e1c2:	4603      	mov	r3, r0
9000e1c4:	2b00      	cmp	r3, #0
9000e1c6:	d107      	bne.n	9000e1d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
9000e1c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e1ca:	f004 fa95 	bl	900126f8 <tcp_output>
9000e1ce:	4603      	mov	r3, r0
9000e1d0:	2b00      	cmp	r3, #0
9000e1d2:	d101      	bne.n	9000e1d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
9000e1d4:	2300      	movs	r3, #0
9000e1d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
9000e1d8:	6a3b      	ldr	r3, [r7, #32]
9000e1da:	2b00      	cmp	r3, #0
9000e1dc:	f000 80ac 	beq.w	9000e338 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
9000e1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e1e2:	2200      	movs	r2, #0
9000e1e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
9000e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e1ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000e1ee:	2b06      	cmp	r3, #6
9000e1f0:	f200 80a2 	bhi.w	9000e338 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
9000e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e1f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000e1fa:	3301      	adds	r3, #1
9000e1fc:	b2da      	uxtb	r2, r3
9000e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e200:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
9000e204:	e098      	b.n	9000e338 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
9000e206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e208:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000e20c:	2b00      	cmp	r3, #0
9000e20e:	db0f      	blt.n	9000e230 <tcp_slowtmr+0x1f0>
9000e210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e212:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000e216:	f647 72ff 	movw	r2, #32767	; 0x7fff
9000e21a:	4293      	cmp	r3, r2
9000e21c:	d008      	beq.n	9000e230 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
9000e21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e220:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000e224:	b29b      	uxth	r3, r3
9000e226:	3301      	adds	r3, #1
9000e228:	b29b      	uxth	r3, r3
9000e22a:	b21a      	sxth	r2, r3
9000e22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e22e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
9000e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e232:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
9000e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e238:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
9000e23c:	429a      	cmp	r2, r3
9000e23e:	db7b      	blt.n	9000e338 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
9000e240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e242:	f004 fd4b 	bl	90012cdc <tcp_rexmit_rto_prepare>
9000e246:	4603      	mov	r3, r0
9000e248:	2b00      	cmp	r3, #0
9000e24a:	d007      	beq.n	9000e25c <tcp_slowtmr+0x21c>
9000e24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e24e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000e250:	2b00      	cmp	r3, #0
9000e252:	d171      	bne.n	9000e338 <tcp_slowtmr+0x2f8>
9000e254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000e258:	2b00      	cmp	r3, #0
9000e25a:	d06d      	beq.n	9000e338 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
9000e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e25e:	7d1b      	ldrb	r3, [r3, #20]
9000e260:	2b02      	cmp	r3, #2
9000e262:	d03a      	beq.n	9000e2da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
9000e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000e26a:	2b0c      	cmp	r3, #12
9000e26c:	bf28      	it	cs
9000e26e:	230c      	movcs	r3, #12
9000e270:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
9000e272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e274:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000e278:	10db      	asrs	r3, r3, #3
9000e27a:	b21b      	sxth	r3, r3
9000e27c:	461a      	mov	r2, r3
9000e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e280:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000e284:	4413      	add	r3, r2
9000e286:	7efa      	ldrb	r2, [r7, #27]
9000e288:	4910      	ldr	r1, [pc, #64]	; (9000e2cc <tcp_slowtmr+0x28c>)
9000e28a:	5c8a      	ldrb	r2, [r1, r2]
9000e28c:	4093      	lsls	r3, r2
9000e28e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
9000e290:	697b      	ldr	r3, [r7, #20]
9000e292:	f647 72fe 	movw	r2, #32766	; 0x7ffe
9000e296:	4293      	cmp	r3, r2
9000e298:	dc1a      	bgt.n	9000e2d0 <tcp_slowtmr+0x290>
9000e29a:	697b      	ldr	r3, [r7, #20]
9000e29c:	b21a      	sxth	r2, r3
9000e29e:	e019      	b.n	9000e2d4 <tcp_slowtmr+0x294>
9000e2a0:	2000d5c8 	.word	0x2000d5c8
9000e2a4:	2000d5de 	.word	0x2000d5de
9000e2a8:	2000d5d4 	.word	0x2000d5d4
9000e2ac:	900190b4 	.word	0x900190b4
9000e2b0:	900193f8 	.word	0x900193f8
9000e2b4:	900190f8 	.word	0x900190f8
9000e2b8:	90019424 	.word	0x90019424
9000e2bc:	90019450 	.word	0x90019450
9000e2c0:	90019480 	.word	0x90019480
9000e2c4:	900194b4 	.word	0x900194b4
9000e2c8:	9001bda4 	.word	0x9001bda4
9000e2cc:	9001bd94 	.word	0x9001bd94
9000e2d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
9000e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e2d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
9000e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e2dc:	2200      	movs	r2, #0
9000e2de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
9000e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e2e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000e2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e2e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000e2ec:	4293      	cmp	r3, r2
9000e2ee:	bf28      	it	cs
9000e2f0:	4613      	movcs	r3, r2
9000e2f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
9000e2f4:	8a7b      	ldrh	r3, [r7, #18]
9000e2f6:	085b      	lsrs	r3, r3, #1
9000e2f8:	b29a      	uxth	r2, r3
9000e2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e2fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
9000e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e302:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
9000e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000e30a:	005b      	lsls	r3, r3, #1
9000e30c:	b29b      	uxth	r3, r3
9000e30e:	429a      	cmp	r2, r3
9000e310:	d206      	bcs.n	9000e320 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
9000e312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000e316:	005b      	lsls	r3, r3, #1
9000e318:	b29a      	uxth	r2, r3
9000e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e31c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
9000e320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e322:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
9000e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
9000e32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e32c:	2200      	movs	r2, #0
9000e32e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
9000e332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e334:	f004 fd42 	bl	90012dbc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
9000e338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e33a:	7d1b      	ldrb	r3, [r3, #20]
9000e33c:	2b06      	cmp	r3, #6
9000e33e:	d111      	bne.n	9000e364 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
9000e340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e342:	8b5b      	ldrh	r3, [r3, #26]
9000e344:	f003 0310 	and.w	r3, r3, #16
9000e348:	2b00      	cmp	r3, #0
9000e34a:	d00b      	beq.n	9000e364 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
9000e34c:	4b9c      	ldr	r3, [pc, #624]	; (9000e5c0 <tcp_slowtmr+0x580>)
9000e34e:	681a      	ldr	r2, [r3, #0]
9000e350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e352:	6a1b      	ldr	r3, [r3, #32]
9000e354:	1ad3      	subs	r3, r2, r3
9000e356:	2b28      	cmp	r3, #40	; 0x28
9000e358:	d904      	bls.n	9000e364 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
9000e35a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e35e:	3301      	adds	r3, #1
9000e360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
9000e364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e366:	7a5b      	ldrb	r3, [r3, #9]
9000e368:	f003 0308 	and.w	r3, r3, #8
9000e36c:	2b00      	cmp	r3, #0
9000e36e:	d04a      	beq.n	9000e406 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
9000e370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e372:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
9000e374:	2b04      	cmp	r3, #4
9000e376:	d003      	beq.n	9000e380 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
9000e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e37a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
9000e37c:	2b07      	cmp	r3, #7
9000e37e:	d142      	bne.n	9000e406 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000e380:	4b8f      	ldr	r3, [pc, #572]	; (9000e5c0 <tcp_slowtmr+0x580>)
9000e382:	681a      	ldr	r2, [r3, #0]
9000e384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e386:	6a1b      	ldr	r3, [r3, #32]
9000e388:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
9000e38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e38c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
9000e390:	4b8c      	ldr	r3, [pc, #560]	; (9000e5c4 <tcp_slowtmr+0x584>)
9000e392:	440b      	add	r3, r1
9000e394:	498c      	ldr	r1, [pc, #560]	; (9000e5c8 <tcp_slowtmr+0x588>)
9000e396:	fba1 1303 	umull	r1, r3, r1, r3
9000e39a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000e39c:	429a      	cmp	r2, r3
9000e39e:	d90a      	bls.n	9000e3b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
9000e3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e3a4:	3301      	adds	r3, #1
9000e3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
9000e3aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
9000e3ae:	3301      	adds	r3, #1
9000e3b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
9000e3b4:	e027      	b.n	9000e406 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
9000e3b6:	4b82      	ldr	r3, [pc, #520]	; (9000e5c0 <tcp_slowtmr+0x580>)
9000e3b8:	681a      	ldr	r2, [r3, #0]
9000e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e3bc:	6a1b      	ldr	r3, [r3, #32]
9000e3be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
9000e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e3c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
9000e3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e3c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
9000e3cc:	4618      	mov	r0, r3
9000e3ce:	4b7f      	ldr	r3, [pc, #508]	; (9000e5cc <tcp_slowtmr+0x58c>)
9000e3d0:	fb00 f303 	mul.w	r3, r0, r3
9000e3d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
9000e3d6:	497c      	ldr	r1, [pc, #496]	; (9000e5c8 <tcp_slowtmr+0x588>)
9000e3d8:	fba1 1303 	umull	r1, r3, r1, r3
9000e3dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
9000e3de:	429a      	cmp	r2, r3
9000e3e0:	d911      	bls.n	9000e406 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
9000e3e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e3e4:	f004 fff0 	bl	900133c8 <tcp_keepalive>
9000e3e8:	4603      	mov	r3, r0
9000e3ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
9000e3ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
9000e3f2:	2b00      	cmp	r3, #0
9000e3f4:	d107      	bne.n	9000e406 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
9000e3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e3f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
9000e3fc:	3301      	adds	r3, #1
9000e3fe:	b2da      	uxtb	r2, r3
9000e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e402:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
9000e406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000e40a:	2b00      	cmp	r3, #0
9000e40c:	d011      	beq.n	9000e432 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
9000e40e:	4b6c      	ldr	r3, [pc, #432]	; (9000e5c0 <tcp_slowtmr+0x580>)
9000e410:	681a      	ldr	r2, [r3, #0]
9000e412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e414:	6a1b      	ldr	r3, [r3, #32]
9000e416:	1ad2      	subs	r2, r2, r3
9000e418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e41a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
9000e41e:	4619      	mov	r1, r3
9000e420:	460b      	mov	r3, r1
9000e422:	005b      	lsls	r3, r3, #1
9000e424:	440b      	add	r3, r1
9000e426:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
9000e428:	429a      	cmp	r2, r3
9000e42a:	d302      	bcc.n	9000e432 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
9000e42c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e42e:	f000 feab 	bl	9000f188 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
9000e432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e434:	7d1b      	ldrb	r3, [r3, #20]
9000e436:	2b03      	cmp	r3, #3
9000e438:	d10b      	bne.n	9000e452 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000e43a:	4b61      	ldr	r3, [pc, #388]	; (9000e5c0 <tcp_slowtmr+0x580>)
9000e43c:	681a      	ldr	r2, [r3, #0]
9000e43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e440:	6a1b      	ldr	r3, [r3, #32]
9000e442:	1ad3      	subs	r3, r2, r3
9000e444:	2b28      	cmp	r3, #40	; 0x28
9000e446:	d904      	bls.n	9000e452 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
9000e448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e44c:	3301      	adds	r3, #1
9000e44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
9000e452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e454:	7d1b      	ldrb	r3, [r3, #20]
9000e456:	2b09      	cmp	r3, #9
9000e458:	d10b      	bne.n	9000e472 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
9000e45a:	4b59      	ldr	r3, [pc, #356]	; (9000e5c0 <tcp_slowtmr+0x580>)
9000e45c:	681a      	ldr	r2, [r3, #0]
9000e45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e460:	6a1b      	ldr	r3, [r3, #32]
9000e462:	1ad3      	subs	r3, r2, r3
9000e464:	2bf0      	cmp	r3, #240	; 0xf0
9000e466:	d904      	bls.n	9000e472 <tcp_slowtmr+0x432>
        ++pcb_remove;
9000e468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e46c:	3301      	adds	r3, #1
9000e46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
9000e472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e476:	2b00      	cmp	r3, #0
9000e478:	d060      	beq.n	9000e53c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
9000e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000e480:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
9000e482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e484:	f000 fccc 	bl	9000ee20 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
9000e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e48a:	2b00      	cmp	r3, #0
9000e48c:	d010      	beq.n	9000e4b0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
9000e48e:	4b50      	ldr	r3, [pc, #320]	; (9000e5d0 <tcp_slowtmr+0x590>)
9000e490:	681b      	ldr	r3, [r3, #0]
9000e492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000e494:	429a      	cmp	r2, r3
9000e496:	d106      	bne.n	9000e4a6 <tcp_slowtmr+0x466>
9000e498:	4b4e      	ldr	r3, [pc, #312]	; (9000e5d4 <tcp_slowtmr+0x594>)
9000e49a:	f240 526d 	movw	r2, #1389	; 0x56d
9000e49e:	494e      	ldr	r1, [pc, #312]	; (9000e5d8 <tcp_slowtmr+0x598>)
9000e4a0:	484e      	ldr	r0, [pc, #312]	; (9000e5dc <tcp_slowtmr+0x59c>)
9000e4a2:	f008 fbcd 	bl	90016c40 <iprintf>
        prev->next = pcb->next;
9000e4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e4a8:	68da      	ldr	r2, [r3, #12]
9000e4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e4ac:	60da      	str	r2, [r3, #12]
9000e4ae:	e00f      	b.n	9000e4d0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
9000e4b0:	4b47      	ldr	r3, [pc, #284]	; (9000e5d0 <tcp_slowtmr+0x590>)
9000e4b2:	681b      	ldr	r3, [r3, #0]
9000e4b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000e4b6:	429a      	cmp	r2, r3
9000e4b8:	d006      	beq.n	9000e4c8 <tcp_slowtmr+0x488>
9000e4ba:	4b46      	ldr	r3, [pc, #280]	; (9000e5d4 <tcp_slowtmr+0x594>)
9000e4bc:	f240 5271 	movw	r2, #1393	; 0x571
9000e4c0:	4947      	ldr	r1, [pc, #284]	; (9000e5e0 <tcp_slowtmr+0x5a0>)
9000e4c2:	4846      	ldr	r0, [pc, #280]	; (9000e5dc <tcp_slowtmr+0x59c>)
9000e4c4:	f008 fbbc 	bl	90016c40 <iprintf>
        tcp_active_pcbs = pcb->next;
9000e4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e4ca:	68db      	ldr	r3, [r3, #12]
9000e4cc:	4a40      	ldr	r2, [pc, #256]	; (9000e5d0 <tcp_slowtmr+0x590>)
9000e4ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
9000e4d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
9000e4d4:	2b00      	cmp	r3, #0
9000e4d6:	d013      	beq.n	9000e500 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
9000e4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e4da:	6d18      	ldr	r0, [r3, #80]	; 0x50
9000e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e4de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
9000e4e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
9000e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e4e4:	3304      	adds	r3, #4
9000e4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000e4e8:	8ad2      	ldrh	r2, [r2, #22]
9000e4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000e4ec:	8b09      	ldrh	r1, [r1, #24]
9000e4ee:	9102      	str	r1, [sp, #8]
9000e4f0:	9201      	str	r2, [sp, #4]
9000e4f2:	9300      	str	r3, [sp, #0]
9000e4f4:	462b      	mov	r3, r5
9000e4f6:	4622      	mov	r2, r4
9000e4f8:	4601      	mov	r1, r0
9000e4fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e4fc:	f004 feb0 	bl	90013260 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
9000e500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e502:	691b      	ldr	r3, [r3, #16]
9000e504:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
9000e506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e508:	7d1b      	ldrb	r3, [r3, #20]
9000e50a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
9000e50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e50e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
9000e510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e512:	68db      	ldr	r3, [r3, #12]
9000e514:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
9000e516:	6838      	ldr	r0, [r7, #0]
9000e518:	f7fe fff0 	bl	9000d4fc <tcp_free>

      tcp_active_pcbs_changed = 0;
9000e51c:	4b31      	ldr	r3, [pc, #196]	; (9000e5e4 <tcp_slowtmr+0x5a4>)
9000e51e:	2200      	movs	r2, #0
9000e520:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
9000e522:	68fb      	ldr	r3, [r7, #12]
9000e524:	2b00      	cmp	r3, #0
9000e526:	d004      	beq.n	9000e532 <tcp_slowtmr+0x4f2>
9000e528:	68fb      	ldr	r3, [r7, #12]
9000e52a:	f06f 010c 	mvn.w	r1, #12
9000e52e:	68b8      	ldr	r0, [r7, #8]
9000e530:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
9000e532:	4b2c      	ldr	r3, [pc, #176]	; (9000e5e4 <tcp_slowtmr+0x5a4>)
9000e534:	781b      	ldrb	r3, [r3, #0]
9000e536:	2b00      	cmp	r3, #0
9000e538:	d037      	beq.n	9000e5aa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
9000e53a:	e592      	b.n	9000e062 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
9000e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e53e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
9000e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e542:	68db      	ldr	r3, [r3, #12]
9000e544:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
9000e546:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e548:	7f1b      	ldrb	r3, [r3, #28]
9000e54a:	3301      	adds	r3, #1
9000e54c:	b2da      	uxtb	r2, r3
9000e54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e550:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
9000e552:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e554:	7f1a      	ldrb	r2, [r3, #28]
9000e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e558:	7f5b      	ldrb	r3, [r3, #29]
9000e55a:	429a      	cmp	r2, r3
9000e55c:	d325      	bcc.n	9000e5aa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
9000e55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e560:	2200      	movs	r2, #0
9000e562:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
9000e564:	4b1f      	ldr	r3, [pc, #124]	; (9000e5e4 <tcp_slowtmr+0x5a4>)
9000e566:	2200      	movs	r2, #0
9000e568:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
9000e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e56c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000e570:	2b00      	cmp	r3, #0
9000e572:	d00b      	beq.n	9000e58c <tcp_slowtmr+0x54c>
9000e574:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000e57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000e57c:	6912      	ldr	r2, [r2, #16]
9000e57e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
9000e580:	4610      	mov	r0, r2
9000e582:	4798      	blx	r3
9000e584:	4603      	mov	r3, r0
9000e586:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
9000e58a:	e002      	b.n	9000e592 <tcp_slowtmr+0x552>
9000e58c:	2300      	movs	r3, #0
9000e58e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
9000e592:	4b14      	ldr	r3, [pc, #80]	; (9000e5e4 <tcp_slowtmr+0x5a4>)
9000e594:	781b      	ldrb	r3, [r3, #0]
9000e596:	2b00      	cmp	r3, #0
9000e598:	d000      	beq.n	9000e59c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
9000e59a:	e562      	b.n	9000e062 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
9000e59c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
9000e5a0:	2b00      	cmp	r3, #0
9000e5a2:	d102      	bne.n	9000e5aa <tcp_slowtmr+0x56a>
          tcp_output(prev);
9000e5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000e5a6:	f004 f8a7 	bl	900126f8 <tcp_output>
  while (pcb != NULL) {
9000e5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e5ac:	2b00      	cmp	r3, #0
9000e5ae:	f47f ad5e 	bne.w	9000e06e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
9000e5b2:	2300      	movs	r3, #0
9000e5b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
9000e5b6:	4b0c      	ldr	r3, [pc, #48]	; (9000e5e8 <tcp_slowtmr+0x5a8>)
9000e5b8:	681b      	ldr	r3, [r3, #0]
9000e5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
9000e5bc:	e069      	b.n	9000e692 <tcp_slowtmr+0x652>
9000e5be:	bf00      	nop
9000e5c0:	2000d5c8 	.word	0x2000d5c8
9000e5c4:	000a4cb8 	.word	0x000a4cb8
9000e5c8:	10624dd3 	.word	0x10624dd3
9000e5cc:	000124f8 	.word	0x000124f8
9000e5d0:	2000d5d4 	.word	0x2000d5d4
9000e5d4:	900190b4 	.word	0x900190b4
9000e5d8:	900194ec 	.word	0x900194ec
9000e5dc:	900190f8 	.word	0x900190f8
9000e5e0:	90019518 	.word	0x90019518
9000e5e4:	2000d5dc 	.word	0x2000d5dc
9000e5e8:	2000d5d8 	.word	0x2000d5d8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
9000e5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e5ee:	7d1b      	ldrb	r3, [r3, #20]
9000e5f0:	2b0a      	cmp	r3, #10
9000e5f2:	d006      	beq.n	9000e602 <tcp_slowtmr+0x5c2>
9000e5f4:	4b2b      	ldr	r3, [pc, #172]	; (9000e6a4 <tcp_slowtmr+0x664>)
9000e5f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
9000e5fa:	492b      	ldr	r1, [pc, #172]	; (9000e6a8 <tcp_slowtmr+0x668>)
9000e5fc:	482b      	ldr	r0, [pc, #172]	; (9000e6ac <tcp_slowtmr+0x66c>)
9000e5fe:	f008 fb1f 	bl	90016c40 <iprintf>
    pcb_remove = 0;
9000e602:	2300      	movs	r3, #0
9000e604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
9000e608:	4b29      	ldr	r3, [pc, #164]	; (9000e6b0 <tcp_slowtmr+0x670>)
9000e60a:	681a      	ldr	r2, [r3, #0]
9000e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e60e:	6a1b      	ldr	r3, [r3, #32]
9000e610:	1ad3      	subs	r3, r2, r3
9000e612:	2bf0      	cmp	r3, #240	; 0xf0
9000e614:	d904      	bls.n	9000e620 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
9000e616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e61a:	3301      	adds	r3, #1
9000e61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
9000e620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000e624:	2b00      	cmp	r3, #0
9000e626:	d02f      	beq.n	9000e688 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
9000e628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e62a:	f000 fbf9 	bl	9000ee20 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
9000e62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e630:	2b00      	cmp	r3, #0
9000e632:	d010      	beq.n	9000e656 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
9000e634:	4b1f      	ldr	r3, [pc, #124]	; (9000e6b4 <tcp_slowtmr+0x674>)
9000e636:	681b      	ldr	r3, [r3, #0]
9000e638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000e63a:	429a      	cmp	r2, r3
9000e63c:	d106      	bne.n	9000e64c <tcp_slowtmr+0x60c>
9000e63e:	4b19      	ldr	r3, [pc, #100]	; (9000e6a4 <tcp_slowtmr+0x664>)
9000e640:	f240 52af 	movw	r2, #1455	; 0x5af
9000e644:	491c      	ldr	r1, [pc, #112]	; (9000e6b8 <tcp_slowtmr+0x678>)
9000e646:	4819      	ldr	r0, [pc, #100]	; (9000e6ac <tcp_slowtmr+0x66c>)
9000e648:	f008 fafa 	bl	90016c40 <iprintf>
        prev->next = pcb->next;
9000e64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e64e:	68da      	ldr	r2, [r3, #12]
9000e650:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e652:	60da      	str	r2, [r3, #12]
9000e654:	e00f      	b.n	9000e676 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
9000e656:	4b17      	ldr	r3, [pc, #92]	; (9000e6b4 <tcp_slowtmr+0x674>)
9000e658:	681b      	ldr	r3, [r3, #0]
9000e65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000e65c:	429a      	cmp	r2, r3
9000e65e:	d006      	beq.n	9000e66e <tcp_slowtmr+0x62e>
9000e660:	4b10      	ldr	r3, [pc, #64]	; (9000e6a4 <tcp_slowtmr+0x664>)
9000e662:	f240 52b3 	movw	r2, #1459	; 0x5b3
9000e666:	4915      	ldr	r1, [pc, #84]	; (9000e6bc <tcp_slowtmr+0x67c>)
9000e668:	4810      	ldr	r0, [pc, #64]	; (9000e6ac <tcp_slowtmr+0x66c>)
9000e66a:	f008 fae9 	bl	90016c40 <iprintf>
        tcp_tw_pcbs = pcb->next;
9000e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e670:	68db      	ldr	r3, [r3, #12]
9000e672:	4a10      	ldr	r2, [pc, #64]	; (9000e6b4 <tcp_slowtmr+0x674>)
9000e674:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
9000e676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e678:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
9000e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e67c:	68db      	ldr	r3, [r3, #12]
9000e67e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
9000e680:	69f8      	ldr	r0, [r7, #28]
9000e682:	f7fe ff3b 	bl	9000d4fc <tcp_free>
9000e686:	e004      	b.n	9000e692 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
9000e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e68a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
9000e68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e68e:	68db      	ldr	r3, [r3, #12]
9000e690:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
9000e692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e694:	2b00      	cmp	r3, #0
9000e696:	d1a9      	bne.n	9000e5ec <tcp_slowtmr+0x5ac>
    }
  }
}
9000e698:	bf00      	nop
9000e69a:	bf00      	nop
9000e69c:	3730      	adds	r7, #48	; 0x30
9000e69e:	46bd      	mov	sp, r7
9000e6a0:	bdb0      	pop	{r4, r5, r7, pc}
9000e6a2:	bf00      	nop
9000e6a4:	900190b4 	.word	0x900190b4
9000e6a8:	90019544 	.word	0x90019544
9000e6ac:	900190f8 	.word	0x900190f8
9000e6b0:	2000d5c8 	.word	0x2000d5c8
9000e6b4:	2000d5d8 	.word	0x2000d5d8
9000e6b8:	90019574 	.word	0x90019574
9000e6bc:	9001959c 	.word	0x9001959c

9000e6c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
9000e6c0:	b580      	push	{r7, lr}
9000e6c2:	b082      	sub	sp, #8
9000e6c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
9000e6c6:	4b2d      	ldr	r3, [pc, #180]	; (9000e77c <tcp_fasttmr+0xbc>)
9000e6c8:	781b      	ldrb	r3, [r3, #0]
9000e6ca:	3301      	adds	r3, #1
9000e6cc:	b2da      	uxtb	r2, r3
9000e6ce:	4b2b      	ldr	r3, [pc, #172]	; (9000e77c <tcp_fasttmr+0xbc>)
9000e6d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
9000e6d2:	4b2b      	ldr	r3, [pc, #172]	; (9000e780 <tcp_fasttmr+0xc0>)
9000e6d4:	681b      	ldr	r3, [r3, #0]
9000e6d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
9000e6d8:	e048      	b.n	9000e76c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
9000e6da:	687b      	ldr	r3, [r7, #4]
9000e6dc:	7f9a      	ldrb	r2, [r3, #30]
9000e6de:	4b27      	ldr	r3, [pc, #156]	; (9000e77c <tcp_fasttmr+0xbc>)
9000e6e0:	781b      	ldrb	r3, [r3, #0]
9000e6e2:	429a      	cmp	r2, r3
9000e6e4:	d03f      	beq.n	9000e766 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
9000e6e6:	4b25      	ldr	r3, [pc, #148]	; (9000e77c <tcp_fasttmr+0xbc>)
9000e6e8:	781a      	ldrb	r2, [r3, #0]
9000e6ea:	687b      	ldr	r3, [r7, #4]
9000e6ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
9000e6ee:	687b      	ldr	r3, [r7, #4]
9000e6f0:	8b5b      	ldrh	r3, [r3, #26]
9000e6f2:	f003 0301 	and.w	r3, r3, #1
9000e6f6:	2b00      	cmp	r3, #0
9000e6f8:	d010      	beq.n	9000e71c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
9000e6fa:	687b      	ldr	r3, [r7, #4]
9000e6fc:	8b5b      	ldrh	r3, [r3, #26]
9000e6fe:	f043 0302 	orr.w	r3, r3, #2
9000e702:	b29a      	uxth	r2, r3
9000e704:	687b      	ldr	r3, [r7, #4]
9000e706:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
9000e708:	6878      	ldr	r0, [r7, #4]
9000e70a:	f003 fff5 	bl	900126f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9000e70e:	687b      	ldr	r3, [r7, #4]
9000e710:	8b5b      	ldrh	r3, [r3, #26]
9000e712:	f023 0303 	bic.w	r3, r3, #3
9000e716:	b29a      	uxth	r2, r3
9000e718:	687b      	ldr	r3, [r7, #4]
9000e71a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
9000e71c:	687b      	ldr	r3, [r7, #4]
9000e71e:	8b5b      	ldrh	r3, [r3, #26]
9000e720:	f003 0308 	and.w	r3, r3, #8
9000e724:	2b00      	cmp	r3, #0
9000e726:	d009      	beq.n	9000e73c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
9000e728:	687b      	ldr	r3, [r7, #4]
9000e72a:	8b5b      	ldrh	r3, [r3, #26]
9000e72c:	f023 0308 	bic.w	r3, r3, #8
9000e730:	b29a      	uxth	r2, r3
9000e732:	687b      	ldr	r3, [r7, #4]
9000e734:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
9000e736:	6878      	ldr	r0, [r7, #4]
9000e738:	f7ff f874 	bl	9000d824 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
9000e73c:	687b      	ldr	r3, [r7, #4]
9000e73e:	68db      	ldr	r3, [r3, #12]
9000e740:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
9000e742:	687b      	ldr	r3, [r7, #4]
9000e744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000e746:	2b00      	cmp	r3, #0
9000e748:	d00a      	beq.n	9000e760 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
9000e74a:	4b0e      	ldr	r3, [pc, #56]	; (9000e784 <tcp_fasttmr+0xc4>)
9000e74c:	2200      	movs	r2, #0
9000e74e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
9000e750:	6878      	ldr	r0, [r7, #4]
9000e752:	f000 f819 	bl	9000e788 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
9000e756:	4b0b      	ldr	r3, [pc, #44]	; (9000e784 <tcp_fasttmr+0xc4>)
9000e758:	781b      	ldrb	r3, [r3, #0]
9000e75a:	2b00      	cmp	r3, #0
9000e75c:	d000      	beq.n	9000e760 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
9000e75e:	e7b8      	b.n	9000e6d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
9000e760:	683b      	ldr	r3, [r7, #0]
9000e762:	607b      	str	r3, [r7, #4]
9000e764:	e002      	b.n	9000e76c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
9000e766:	687b      	ldr	r3, [r7, #4]
9000e768:	68db      	ldr	r3, [r3, #12]
9000e76a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
9000e76c:	687b      	ldr	r3, [r7, #4]
9000e76e:	2b00      	cmp	r3, #0
9000e770:	d1b3      	bne.n	9000e6da <tcp_fasttmr+0x1a>
    }
  }
}
9000e772:	bf00      	nop
9000e774:	bf00      	nop
9000e776:	3708      	adds	r7, #8
9000e778:	46bd      	mov	sp, r7
9000e77a:	bd80      	pop	{r7, pc}
9000e77c:	2000d5de 	.word	0x2000d5de
9000e780:	2000d5d4 	.word	0x2000d5d4
9000e784:	2000d5dc 	.word	0x2000d5dc

9000e788 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
9000e788:	b590      	push	{r4, r7, lr}
9000e78a:	b085      	sub	sp, #20
9000e78c:	af00      	add	r7, sp, #0
9000e78e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
9000e790:	687b      	ldr	r3, [r7, #4]
9000e792:	2b00      	cmp	r3, #0
9000e794:	d109      	bne.n	9000e7aa <tcp_process_refused_data+0x22>
9000e796:	4b37      	ldr	r3, [pc, #220]	; (9000e874 <tcp_process_refused_data+0xec>)
9000e798:	f240 6209 	movw	r2, #1545	; 0x609
9000e79c:	4936      	ldr	r1, [pc, #216]	; (9000e878 <tcp_process_refused_data+0xf0>)
9000e79e:	4837      	ldr	r0, [pc, #220]	; (9000e87c <tcp_process_refused_data+0xf4>)
9000e7a0:	f008 fa4e 	bl	90016c40 <iprintf>
9000e7a4:	f06f 030f 	mvn.w	r3, #15
9000e7a8:	e060      	b.n	9000e86c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
9000e7aa:	687b      	ldr	r3, [r7, #4]
9000e7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000e7ae:	7b5b      	ldrb	r3, [r3, #13]
9000e7b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
9000e7b2:	687b      	ldr	r3, [r7, #4]
9000e7b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000e7b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
9000e7b8:	687b      	ldr	r3, [r7, #4]
9000e7ba:	2200      	movs	r2, #0
9000e7bc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
9000e7be:	687b      	ldr	r3, [r7, #4]
9000e7c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000e7c4:	2b00      	cmp	r3, #0
9000e7c6:	d00b      	beq.n	9000e7e0 <tcp_process_refused_data+0x58>
9000e7c8:	687b      	ldr	r3, [r7, #4]
9000e7ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000e7ce:	687b      	ldr	r3, [r7, #4]
9000e7d0:	6918      	ldr	r0, [r3, #16]
9000e7d2:	2300      	movs	r3, #0
9000e7d4:	68ba      	ldr	r2, [r7, #8]
9000e7d6:	6879      	ldr	r1, [r7, #4]
9000e7d8:	47a0      	blx	r4
9000e7da:	4603      	mov	r3, r0
9000e7dc:	73fb      	strb	r3, [r7, #15]
9000e7de:	e007      	b.n	9000e7f0 <tcp_process_refused_data+0x68>
9000e7e0:	2300      	movs	r3, #0
9000e7e2:	68ba      	ldr	r2, [r7, #8]
9000e7e4:	6879      	ldr	r1, [r7, #4]
9000e7e6:	2000      	movs	r0, #0
9000e7e8:	f000 f8a4 	bl	9000e934 <tcp_recv_null>
9000e7ec:	4603      	mov	r3, r0
9000e7ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
9000e7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000e7f4:	2b00      	cmp	r3, #0
9000e7f6:	d12a      	bne.n	9000e84e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
9000e7f8:	7bbb      	ldrb	r3, [r7, #14]
9000e7fa:	f003 0320 	and.w	r3, r3, #32
9000e7fe:	2b00      	cmp	r3, #0
9000e800:	d033      	beq.n	9000e86a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
9000e802:	687b      	ldr	r3, [r7, #4]
9000e804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000e806:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000e80a:	d005      	beq.n	9000e818 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
9000e80c:	687b      	ldr	r3, [r7, #4]
9000e80e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000e810:	3301      	adds	r3, #1
9000e812:	b29a      	uxth	r2, r3
9000e814:	687b      	ldr	r3, [r7, #4]
9000e816:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
9000e818:	687b      	ldr	r3, [r7, #4]
9000e81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000e81e:	2b00      	cmp	r3, #0
9000e820:	d00b      	beq.n	9000e83a <tcp_process_refused_data+0xb2>
9000e822:	687b      	ldr	r3, [r7, #4]
9000e824:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000e828:	687b      	ldr	r3, [r7, #4]
9000e82a:	6918      	ldr	r0, [r3, #16]
9000e82c:	2300      	movs	r3, #0
9000e82e:	2200      	movs	r2, #0
9000e830:	6879      	ldr	r1, [r7, #4]
9000e832:	47a0      	blx	r4
9000e834:	4603      	mov	r3, r0
9000e836:	73fb      	strb	r3, [r7, #15]
9000e838:	e001      	b.n	9000e83e <tcp_process_refused_data+0xb6>
9000e83a:	2300      	movs	r3, #0
9000e83c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
9000e83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000e842:	f113 0f0d 	cmn.w	r3, #13
9000e846:	d110      	bne.n	9000e86a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
9000e848:	f06f 030c 	mvn.w	r3, #12
9000e84c:	e00e      	b.n	9000e86c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
9000e84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000e852:	f113 0f0d 	cmn.w	r3, #13
9000e856:	d102      	bne.n	9000e85e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
9000e858:	f06f 030c 	mvn.w	r3, #12
9000e85c:	e006      	b.n	9000e86c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
9000e85e:	687b      	ldr	r3, [r7, #4]
9000e860:	68ba      	ldr	r2, [r7, #8]
9000e862:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
9000e864:	f06f 0304 	mvn.w	r3, #4
9000e868:	e000      	b.n	9000e86c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
9000e86a:	2300      	movs	r3, #0
}
9000e86c:	4618      	mov	r0, r3
9000e86e:	3714      	adds	r7, #20
9000e870:	46bd      	mov	sp, r7
9000e872:	bd90      	pop	{r4, r7, pc}
9000e874:	900190b4 	.word	0x900190b4
9000e878:	900195c4 	.word	0x900195c4
9000e87c:	900190f8 	.word	0x900190f8

9000e880 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
9000e880:	b580      	push	{r7, lr}
9000e882:	b084      	sub	sp, #16
9000e884:	af00      	add	r7, sp, #0
9000e886:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
9000e888:	e007      	b.n	9000e89a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
9000e88a:	687b      	ldr	r3, [r7, #4]
9000e88c:	681b      	ldr	r3, [r3, #0]
9000e88e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
9000e890:	6878      	ldr	r0, [r7, #4]
9000e892:	f000 f80a 	bl	9000e8aa <tcp_seg_free>
    seg = next;
9000e896:	68fb      	ldr	r3, [r7, #12]
9000e898:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
9000e89a:	687b      	ldr	r3, [r7, #4]
9000e89c:	2b00      	cmp	r3, #0
9000e89e:	d1f4      	bne.n	9000e88a <tcp_segs_free+0xa>
  }
}
9000e8a0:	bf00      	nop
9000e8a2:	bf00      	nop
9000e8a4:	3710      	adds	r7, #16
9000e8a6:	46bd      	mov	sp, r7
9000e8a8:	bd80      	pop	{r7, pc}

9000e8aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
9000e8aa:	b580      	push	{r7, lr}
9000e8ac:	b082      	sub	sp, #8
9000e8ae:	af00      	add	r7, sp, #0
9000e8b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
9000e8b2:	687b      	ldr	r3, [r7, #4]
9000e8b4:	2b00      	cmp	r3, #0
9000e8b6:	d00c      	beq.n	9000e8d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
9000e8b8:	687b      	ldr	r3, [r7, #4]
9000e8ba:	685b      	ldr	r3, [r3, #4]
9000e8bc:	2b00      	cmp	r3, #0
9000e8be:	d004      	beq.n	9000e8ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
9000e8c0:	687b      	ldr	r3, [r7, #4]
9000e8c2:	685b      	ldr	r3, [r3, #4]
9000e8c4:	4618      	mov	r0, r3
9000e8c6:	f7fe fb6d 	bl	9000cfa4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
9000e8ca:	6879      	ldr	r1, [r7, #4]
9000e8cc:	2003      	movs	r0, #3
9000e8ce:	f7fd fcc5 	bl	9000c25c <memp_free>
  }
}
9000e8d2:	bf00      	nop
9000e8d4:	3708      	adds	r7, #8
9000e8d6:	46bd      	mov	sp, r7
9000e8d8:	bd80      	pop	{r7, pc}
	...

9000e8dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
9000e8dc:	b580      	push	{r7, lr}
9000e8de:	b084      	sub	sp, #16
9000e8e0:	af00      	add	r7, sp, #0
9000e8e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
9000e8e4:	687b      	ldr	r3, [r7, #4]
9000e8e6:	2b00      	cmp	r3, #0
9000e8e8:	d106      	bne.n	9000e8f8 <tcp_seg_copy+0x1c>
9000e8ea:	4b0f      	ldr	r3, [pc, #60]	; (9000e928 <tcp_seg_copy+0x4c>)
9000e8ec:	f240 6282 	movw	r2, #1666	; 0x682
9000e8f0:	490e      	ldr	r1, [pc, #56]	; (9000e92c <tcp_seg_copy+0x50>)
9000e8f2:	480f      	ldr	r0, [pc, #60]	; (9000e930 <tcp_seg_copy+0x54>)
9000e8f4:	f008 f9a4 	bl	90016c40 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
9000e8f8:	2003      	movs	r0, #3
9000e8fa:	f7fd fc5d 	bl	9000c1b8 <memp_malloc>
9000e8fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
9000e900:	68fb      	ldr	r3, [r7, #12]
9000e902:	2b00      	cmp	r3, #0
9000e904:	d101      	bne.n	9000e90a <tcp_seg_copy+0x2e>
    return NULL;
9000e906:	2300      	movs	r3, #0
9000e908:	e00a      	b.n	9000e920 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
9000e90a:	2210      	movs	r2, #16
9000e90c:	6879      	ldr	r1, [r7, #4]
9000e90e:	68f8      	ldr	r0, [r7, #12]
9000e910:	f008 f8a0 	bl	90016a54 <memcpy>
  pbuf_ref(cseg->p);
9000e914:	68fb      	ldr	r3, [r7, #12]
9000e916:	685b      	ldr	r3, [r3, #4]
9000e918:	4618      	mov	r0, r3
9000e91a:	f7fe fbe9 	bl	9000d0f0 <pbuf_ref>
  return cseg;
9000e91e:	68fb      	ldr	r3, [r7, #12]
}
9000e920:	4618      	mov	r0, r3
9000e922:	3710      	adds	r7, #16
9000e924:	46bd      	mov	sp, r7
9000e926:	bd80      	pop	{r7, pc}
9000e928:	900190b4 	.word	0x900190b4
9000e92c:	90019608 	.word	0x90019608
9000e930:	900190f8 	.word	0x900190f8

9000e934 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
9000e934:	b580      	push	{r7, lr}
9000e936:	b084      	sub	sp, #16
9000e938:	af00      	add	r7, sp, #0
9000e93a:	60f8      	str	r0, [r7, #12]
9000e93c:	60b9      	str	r1, [r7, #8]
9000e93e:	607a      	str	r2, [r7, #4]
9000e940:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
9000e942:	68bb      	ldr	r3, [r7, #8]
9000e944:	2b00      	cmp	r3, #0
9000e946:	d109      	bne.n	9000e95c <tcp_recv_null+0x28>
9000e948:	4b12      	ldr	r3, [pc, #72]	; (9000e994 <tcp_recv_null+0x60>)
9000e94a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
9000e94e:	4912      	ldr	r1, [pc, #72]	; (9000e998 <tcp_recv_null+0x64>)
9000e950:	4812      	ldr	r0, [pc, #72]	; (9000e99c <tcp_recv_null+0x68>)
9000e952:	f008 f975 	bl	90016c40 <iprintf>
9000e956:	f06f 030f 	mvn.w	r3, #15
9000e95a:	e016      	b.n	9000e98a <tcp_recv_null+0x56>

  if (p != NULL) {
9000e95c:	687b      	ldr	r3, [r7, #4]
9000e95e:	2b00      	cmp	r3, #0
9000e960:	d009      	beq.n	9000e976 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
9000e962:	687b      	ldr	r3, [r7, #4]
9000e964:	891b      	ldrh	r3, [r3, #8]
9000e966:	4619      	mov	r1, r3
9000e968:	68b8      	ldr	r0, [r7, #8]
9000e96a:	f7ff fad3 	bl	9000df14 <tcp_recved>
    pbuf_free(p);
9000e96e:	6878      	ldr	r0, [r7, #4]
9000e970:	f7fe fb18 	bl	9000cfa4 <pbuf_free>
9000e974:	e008      	b.n	9000e988 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
9000e976:	f997 3003 	ldrsb.w	r3, [r7, #3]
9000e97a:	2b00      	cmp	r3, #0
9000e97c:	d104      	bne.n	9000e988 <tcp_recv_null+0x54>
    return tcp_close(pcb);
9000e97e:	68b8      	ldr	r0, [r7, #8]
9000e980:	f7fe ffba 	bl	9000d8f8 <tcp_close>
9000e984:	4603      	mov	r3, r0
9000e986:	e000      	b.n	9000e98a <tcp_recv_null+0x56>
  }
  return ERR_OK;
9000e988:	2300      	movs	r3, #0
}
9000e98a:	4618      	mov	r0, r3
9000e98c:	3710      	adds	r7, #16
9000e98e:	46bd      	mov	sp, r7
9000e990:	bd80      	pop	{r7, pc}
9000e992:	bf00      	nop
9000e994:	900190b4 	.word	0x900190b4
9000e998:	90019624 	.word	0x90019624
9000e99c:	900190f8 	.word	0x900190f8

9000e9a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
9000e9a0:	b580      	push	{r7, lr}
9000e9a2:	b086      	sub	sp, #24
9000e9a4:	af00      	add	r7, sp, #0
9000e9a6:	4603      	mov	r3, r0
9000e9a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
9000e9aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000e9ae:	2b00      	cmp	r3, #0
9000e9b0:	db01      	blt.n	9000e9b6 <tcp_kill_prio+0x16>
9000e9b2:	79fb      	ldrb	r3, [r7, #7]
9000e9b4:	e000      	b.n	9000e9b8 <tcp_kill_prio+0x18>
9000e9b6:	237f      	movs	r3, #127	; 0x7f
9000e9b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
9000e9ba:	7afb      	ldrb	r3, [r7, #11]
9000e9bc:	2b00      	cmp	r3, #0
9000e9be:	d034      	beq.n	9000ea2a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
9000e9c0:	7afb      	ldrb	r3, [r7, #11]
9000e9c2:	3b01      	subs	r3, #1
9000e9c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
9000e9c6:	2300      	movs	r3, #0
9000e9c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
9000e9ca:	2300      	movs	r3, #0
9000e9cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000e9ce:	4b19      	ldr	r3, [pc, #100]	; (9000ea34 <tcp_kill_prio+0x94>)
9000e9d0:	681b      	ldr	r3, [r3, #0]
9000e9d2:	617b      	str	r3, [r7, #20]
9000e9d4:	e01f      	b.n	9000ea16 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
9000e9d6:	697b      	ldr	r3, [r7, #20]
9000e9d8:	7d5b      	ldrb	r3, [r3, #21]
9000e9da:	7afa      	ldrb	r2, [r7, #11]
9000e9dc:	429a      	cmp	r2, r3
9000e9de:	d80c      	bhi.n	9000e9fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
9000e9e0:	697b      	ldr	r3, [r7, #20]
9000e9e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
9000e9e4:	7afa      	ldrb	r2, [r7, #11]
9000e9e6:	429a      	cmp	r2, r3
9000e9e8:	d112      	bne.n	9000ea10 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
9000e9ea:	4b13      	ldr	r3, [pc, #76]	; (9000ea38 <tcp_kill_prio+0x98>)
9000e9ec:	681a      	ldr	r2, [r3, #0]
9000e9ee:	697b      	ldr	r3, [r7, #20]
9000e9f0:	6a1b      	ldr	r3, [r3, #32]
9000e9f2:	1ad3      	subs	r3, r2, r3
9000e9f4:	68fa      	ldr	r2, [r7, #12]
9000e9f6:	429a      	cmp	r2, r3
9000e9f8:	d80a      	bhi.n	9000ea10 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
9000e9fa:	4b0f      	ldr	r3, [pc, #60]	; (9000ea38 <tcp_kill_prio+0x98>)
9000e9fc:	681a      	ldr	r2, [r3, #0]
9000e9fe:	697b      	ldr	r3, [r7, #20]
9000ea00:	6a1b      	ldr	r3, [r3, #32]
9000ea02:	1ad3      	subs	r3, r2, r3
9000ea04:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
9000ea06:	697b      	ldr	r3, [r7, #20]
9000ea08:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
9000ea0a:	697b      	ldr	r3, [r7, #20]
9000ea0c:	7d5b      	ldrb	r3, [r3, #21]
9000ea0e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000ea10:	697b      	ldr	r3, [r7, #20]
9000ea12:	68db      	ldr	r3, [r3, #12]
9000ea14:	617b      	str	r3, [r7, #20]
9000ea16:	697b      	ldr	r3, [r7, #20]
9000ea18:	2b00      	cmp	r3, #0
9000ea1a:	d1dc      	bne.n	9000e9d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
9000ea1c:	693b      	ldr	r3, [r7, #16]
9000ea1e:	2b00      	cmp	r3, #0
9000ea20:	d004      	beq.n	9000ea2c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
9000ea22:	6938      	ldr	r0, [r7, #16]
9000ea24:	f7ff f8ae 	bl	9000db84 <tcp_abort>
9000ea28:	e000      	b.n	9000ea2c <tcp_kill_prio+0x8c>
    return;
9000ea2a:	bf00      	nop
  }
}
9000ea2c:	3718      	adds	r7, #24
9000ea2e:	46bd      	mov	sp, r7
9000ea30:	bd80      	pop	{r7, pc}
9000ea32:	bf00      	nop
9000ea34:	2000d5d4 	.word	0x2000d5d4
9000ea38:	2000d5c8 	.word	0x2000d5c8

9000ea3c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
9000ea3c:	b580      	push	{r7, lr}
9000ea3e:	b086      	sub	sp, #24
9000ea40:	af00      	add	r7, sp, #0
9000ea42:	4603      	mov	r3, r0
9000ea44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
9000ea46:	79fb      	ldrb	r3, [r7, #7]
9000ea48:	2b08      	cmp	r3, #8
9000ea4a:	d009      	beq.n	9000ea60 <tcp_kill_state+0x24>
9000ea4c:	79fb      	ldrb	r3, [r7, #7]
9000ea4e:	2b09      	cmp	r3, #9
9000ea50:	d006      	beq.n	9000ea60 <tcp_kill_state+0x24>
9000ea52:	4b1a      	ldr	r3, [pc, #104]	; (9000eabc <tcp_kill_state+0x80>)
9000ea54:	f240 62dd 	movw	r2, #1757	; 0x6dd
9000ea58:	4919      	ldr	r1, [pc, #100]	; (9000eac0 <tcp_kill_state+0x84>)
9000ea5a:	481a      	ldr	r0, [pc, #104]	; (9000eac4 <tcp_kill_state+0x88>)
9000ea5c:	f008 f8f0 	bl	90016c40 <iprintf>

  inactivity = 0;
9000ea60:	2300      	movs	r3, #0
9000ea62:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
9000ea64:	2300      	movs	r3, #0
9000ea66:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000ea68:	4b17      	ldr	r3, [pc, #92]	; (9000eac8 <tcp_kill_state+0x8c>)
9000ea6a:	681b      	ldr	r3, [r3, #0]
9000ea6c:	617b      	str	r3, [r7, #20]
9000ea6e:	e017      	b.n	9000eaa0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
9000ea70:	697b      	ldr	r3, [r7, #20]
9000ea72:	7d1b      	ldrb	r3, [r3, #20]
9000ea74:	79fa      	ldrb	r2, [r7, #7]
9000ea76:	429a      	cmp	r2, r3
9000ea78:	d10f      	bne.n	9000ea9a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
9000ea7a:	4b14      	ldr	r3, [pc, #80]	; (9000eacc <tcp_kill_state+0x90>)
9000ea7c:	681a      	ldr	r2, [r3, #0]
9000ea7e:	697b      	ldr	r3, [r7, #20]
9000ea80:	6a1b      	ldr	r3, [r3, #32]
9000ea82:	1ad3      	subs	r3, r2, r3
9000ea84:	68fa      	ldr	r2, [r7, #12]
9000ea86:	429a      	cmp	r2, r3
9000ea88:	d807      	bhi.n	9000ea9a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
9000ea8a:	4b10      	ldr	r3, [pc, #64]	; (9000eacc <tcp_kill_state+0x90>)
9000ea8c:	681a      	ldr	r2, [r3, #0]
9000ea8e:	697b      	ldr	r3, [r7, #20]
9000ea90:	6a1b      	ldr	r3, [r3, #32]
9000ea92:	1ad3      	subs	r3, r2, r3
9000ea94:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
9000ea96:	697b      	ldr	r3, [r7, #20]
9000ea98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000ea9a:	697b      	ldr	r3, [r7, #20]
9000ea9c:	68db      	ldr	r3, [r3, #12]
9000ea9e:	617b      	str	r3, [r7, #20]
9000eaa0:	697b      	ldr	r3, [r7, #20]
9000eaa2:	2b00      	cmp	r3, #0
9000eaa4:	d1e4      	bne.n	9000ea70 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
9000eaa6:	693b      	ldr	r3, [r7, #16]
9000eaa8:	2b00      	cmp	r3, #0
9000eaaa:	d003      	beq.n	9000eab4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
9000eaac:	2100      	movs	r1, #0
9000eaae:	6938      	ldr	r0, [r7, #16]
9000eab0:	f7fe ffaa 	bl	9000da08 <tcp_abandon>
  }
}
9000eab4:	bf00      	nop
9000eab6:	3718      	adds	r7, #24
9000eab8:	46bd      	mov	sp, r7
9000eaba:	bd80      	pop	{r7, pc}
9000eabc:	900190b4 	.word	0x900190b4
9000eac0:	90019640 	.word	0x90019640
9000eac4:	900190f8 	.word	0x900190f8
9000eac8:	2000d5d4 	.word	0x2000d5d4
9000eacc:	2000d5c8 	.word	0x2000d5c8

9000ead0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
9000ead0:	b580      	push	{r7, lr}
9000ead2:	b084      	sub	sp, #16
9000ead4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
9000ead6:	2300      	movs	r3, #0
9000ead8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
9000eada:	2300      	movs	r3, #0
9000eadc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000eade:	4b12      	ldr	r3, [pc, #72]	; (9000eb28 <tcp_kill_timewait+0x58>)
9000eae0:	681b      	ldr	r3, [r3, #0]
9000eae2:	60fb      	str	r3, [r7, #12]
9000eae4:	e012      	b.n	9000eb0c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
9000eae6:	4b11      	ldr	r3, [pc, #68]	; (9000eb2c <tcp_kill_timewait+0x5c>)
9000eae8:	681a      	ldr	r2, [r3, #0]
9000eaea:	68fb      	ldr	r3, [r7, #12]
9000eaec:	6a1b      	ldr	r3, [r3, #32]
9000eaee:	1ad3      	subs	r3, r2, r3
9000eaf0:	687a      	ldr	r2, [r7, #4]
9000eaf2:	429a      	cmp	r2, r3
9000eaf4:	d807      	bhi.n	9000eb06 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
9000eaf6:	4b0d      	ldr	r3, [pc, #52]	; (9000eb2c <tcp_kill_timewait+0x5c>)
9000eaf8:	681a      	ldr	r2, [r3, #0]
9000eafa:	68fb      	ldr	r3, [r7, #12]
9000eafc:	6a1b      	ldr	r3, [r3, #32]
9000eafe:	1ad3      	subs	r3, r2, r3
9000eb00:	607b      	str	r3, [r7, #4]
      inactive = pcb;
9000eb02:	68fb      	ldr	r3, [r7, #12]
9000eb04:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000eb06:	68fb      	ldr	r3, [r7, #12]
9000eb08:	68db      	ldr	r3, [r3, #12]
9000eb0a:	60fb      	str	r3, [r7, #12]
9000eb0c:	68fb      	ldr	r3, [r7, #12]
9000eb0e:	2b00      	cmp	r3, #0
9000eb10:	d1e9      	bne.n	9000eae6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
9000eb12:	68bb      	ldr	r3, [r7, #8]
9000eb14:	2b00      	cmp	r3, #0
9000eb16:	d002      	beq.n	9000eb1e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
9000eb18:	68b8      	ldr	r0, [r7, #8]
9000eb1a:	f7ff f833 	bl	9000db84 <tcp_abort>
  }
}
9000eb1e:	bf00      	nop
9000eb20:	3710      	adds	r7, #16
9000eb22:	46bd      	mov	sp, r7
9000eb24:	bd80      	pop	{r7, pc}
9000eb26:	bf00      	nop
9000eb28:	2000d5d8 	.word	0x2000d5d8
9000eb2c:	2000d5c8 	.word	0x2000d5c8

9000eb30 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
9000eb30:	b580      	push	{r7, lr}
9000eb32:	b082      	sub	sp, #8
9000eb34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
9000eb36:	4b10      	ldr	r3, [pc, #64]	; (9000eb78 <tcp_handle_closepend+0x48>)
9000eb38:	681b      	ldr	r3, [r3, #0]
9000eb3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
9000eb3c:	e014      	b.n	9000eb68 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
9000eb3e:	687b      	ldr	r3, [r7, #4]
9000eb40:	68db      	ldr	r3, [r3, #12]
9000eb42:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
9000eb44:	687b      	ldr	r3, [r7, #4]
9000eb46:	8b5b      	ldrh	r3, [r3, #26]
9000eb48:	f003 0308 	and.w	r3, r3, #8
9000eb4c:	2b00      	cmp	r3, #0
9000eb4e:	d009      	beq.n	9000eb64 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
9000eb50:	687b      	ldr	r3, [r7, #4]
9000eb52:	8b5b      	ldrh	r3, [r3, #26]
9000eb54:	f023 0308 	bic.w	r3, r3, #8
9000eb58:	b29a      	uxth	r2, r3
9000eb5a:	687b      	ldr	r3, [r7, #4]
9000eb5c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
9000eb5e:	6878      	ldr	r0, [r7, #4]
9000eb60:	f7fe fe60 	bl	9000d824 <tcp_close_shutdown_fin>
    }
    pcb = next;
9000eb64:	683b      	ldr	r3, [r7, #0]
9000eb66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
9000eb68:	687b      	ldr	r3, [r7, #4]
9000eb6a:	2b00      	cmp	r3, #0
9000eb6c:	d1e7      	bne.n	9000eb3e <tcp_handle_closepend+0xe>
  }
}
9000eb6e:	bf00      	nop
9000eb70:	bf00      	nop
9000eb72:	3708      	adds	r7, #8
9000eb74:	46bd      	mov	sp, r7
9000eb76:	bd80      	pop	{r7, pc}
9000eb78:	2000d5d4 	.word	0x2000d5d4

9000eb7c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
9000eb7c:	b580      	push	{r7, lr}
9000eb7e:	b084      	sub	sp, #16
9000eb80:	af00      	add	r7, sp, #0
9000eb82:	4603      	mov	r3, r0
9000eb84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000eb86:	2001      	movs	r0, #1
9000eb88:	f7fd fb16 	bl	9000c1b8 <memp_malloc>
9000eb8c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
9000eb8e:	68fb      	ldr	r3, [r7, #12]
9000eb90:	2b00      	cmp	r3, #0
9000eb92:	d126      	bne.n	9000ebe2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
9000eb94:	f7ff ffcc 	bl	9000eb30 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
9000eb98:	f7ff ff9a 	bl	9000ead0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000eb9c:	2001      	movs	r0, #1
9000eb9e:	f7fd fb0b 	bl	9000c1b8 <memp_malloc>
9000eba2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
9000eba4:	68fb      	ldr	r3, [r7, #12]
9000eba6:	2b00      	cmp	r3, #0
9000eba8:	d11b      	bne.n	9000ebe2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
9000ebaa:	2009      	movs	r0, #9
9000ebac:	f7ff ff46 	bl	9000ea3c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000ebb0:	2001      	movs	r0, #1
9000ebb2:	f7fd fb01 	bl	9000c1b8 <memp_malloc>
9000ebb6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
9000ebb8:	68fb      	ldr	r3, [r7, #12]
9000ebba:	2b00      	cmp	r3, #0
9000ebbc:	d111      	bne.n	9000ebe2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
9000ebbe:	2008      	movs	r0, #8
9000ebc0:	f7ff ff3c 	bl	9000ea3c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000ebc4:	2001      	movs	r0, #1
9000ebc6:	f7fd faf7 	bl	9000c1b8 <memp_malloc>
9000ebca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
9000ebcc:	68fb      	ldr	r3, [r7, #12]
9000ebce:	2b00      	cmp	r3, #0
9000ebd0:	d107      	bne.n	9000ebe2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
9000ebd2:	79fb      	ldrb	r3, [r7, #7]
9000ebd4:	4618      	mov	r0, r3
9000ebd6:	f7ff fee3 	bl	9000e9a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000ebda:	2001      	movs	r0, #1
9000ebdc:	f7fd faec 	bl	9000c1b8 <memp_malloc>
9000ebe0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
9000ebe2:	68fb      	ldr	r3, [r7, #12]
9000ebe4:	2b00      	cmp	r3, #0
9000ebe6:	d03f      	beq.n	9000ec68 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
9000ebe8:	229c      	movs	r2, #156	; 0x9c
9000ebea:	2100      	movs	r1, #0
9000ebec:	68f8      	ldr	r0, [r7, #12]
9000ebee:	f007 ff3f 	bl	90016a70 <memset>
    pcb->prio = prio;
9000ebf2:	68fb      	ldr	r3, [r7, #12]
9000ebf4:	79fa      	ldrb	r2, [r7, #7]
9000ebf6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
9000ebf8:	68fb      	ldr	r3, [r7, #12]
9000ebfa:	f44f 6286 	mov.w	r2, #1072	; 0x430
9000ebfe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
9000ec02:	68fb      	ldr	r3, [r7, #12]
9000ec04:	f44f 6206 	mov.w	r2, #2144	; 0x860
9000ec08:	855a      	strh	r2, [r3, #42]	; 0x2a
9000ec0a:	68fb      	ldr	r3, [r7, #12]
9000ec0c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
9000ec0e:	68fb      	ldr	r3, [r7, #12]
9000ec10:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
9000ec12:	68fb      	ldr	r3, [r7, #12]
9000ec14:	22ff      	movs	r2, #255	; 0xff
9000ec16:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
9000ec18:	68fb      	ldr	r3, [r7, #12]
9000ec1a:	f44f 7206 	mov.w	r2, #536	; 0x218
9000ec1e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
9000ec20:	68fb      	ldr	r3, [r7, #12]
9000ec22:	2206      	movs	r2, #6
9000ec24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
9000ec28:	68fb      	ldr	r3, [r7, #12]
9000ec2a:	2206      	movs	r2, #6
9000ec2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
9000ec2e:	68fb      	ldr	r3, [r7, #12]
9000ec30:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000ec34:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
9000ec36:	68fb      	ldr	r3, [r7, #12]
9000ec38:	2201      	movs	r2, #1
9000ec3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
9000ec3e:	4b0d      	ldr	r3, [pc, #52]	; (9000ec74 <tcp_alloc+0xf8>)
9000ec40:	681a      	ldr	r2, [r3, #0]
9000ec42:	68fb      	ldr	r3, [r7, #12]
9000ec44:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
9000ec46:	4b0c      	ldr	r3, [pc, #48]	; (9000ec78 <tcp_alloc+0xfc>)
9000ec48:	781a      	ldrb	r2, [r3, #0]
9000ec4a:	68fb      	ldr	r3, [r7, #12]
9000ec4c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
9000ec4e:	68fb      	ldr	r3, [r7, #12]
9000ec50:	f44f 6286 	mov.w	r2, #1072	; 0x430
9000ec54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
9000ec58:	68fb      	ldr	r3, [r7, #12]
9000ec5a:	4a08      	ldr	r2, [pc, #32]	; (9000ec7c <tcp_alloc+0x100>)
9000ec5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
9000ec60:	68fb      	ldr	r3, [r7, #12]
9000ec62:	4a07      	ldr	r2, [pc, #28]	; (9000ec80 <tcp_alloc+0x104>)
9000ec64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
9000ec68:	68fb      	ldr	r3, [r7, #12]
}
9000ec6a:	4618      	mov	r0, r3
9000ec6c:	3710      	adds	r7, #16
9000ec6e:	46bd      	mov	sp, r7
9000ec70:	bd80      	pop	{r7, pc}
9000ec72:	bf00      	nop
9000ec74:	2000d5c8 	.word	0x2000d5c8
9000ec78:	2000d5de 	.word	0x2000d5de
9000ec7c:	9000e935 	.word	0x9000e935
9000ec80:	006ddd00 	.word	0x006ddd00

9000ec84 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
9000ec84:	b580      	push	{r7, lr}
9000ec86:	b084      	sub	sp, #16
9000ec88:	af00      	add	r7, sp, #0
9000ec8a:	4603      	mov	r3, r0
9000ec8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
9000ec8e:	2040      	movs	r0, #64	; 0x40
9000ec90:	f7ff ff74 	bl	9000eb7c <tcp_alloc>
9000ec94:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
9000ec96:	68fb      	ldr	r3, [r7, #12]
}
9000ec98:	4618      	mov	r0, r3
9000ec9a:	3710      	adds	r7, #16
9000ec9c:	46bd      	mov	sp, r7
9000ec9e:	bd80      	pop	{r7, pc}

9000eca0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
9000eca0:	b480      	push	{r7}
9000eca2:	b083      	sub	sp, #12
9000eca4:	af00      	add	r7, sp, #0
9000eca6:	6078      	str	r0, [r7, #4]
9000eca8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
9000ecaa:	687b      	ldr	r3, [r7, #4]
9000ecac:	2b00      	cmp	r3, #0
9000ecae:	d002      	beq.n	9000ecb6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
9000ecb0:	687b      	ldr	r3, [r7, #4]
9000ecb2:	683a      	ldr	r2, [r7, #0]
9000ecb4:	611a      	str	r2, [r3, #16]
  }
}
9000ecb6:	bf00      	nop
9000ecb8:	370c      	adds	r7, #12
9000ecba:	46bd      	mov	sp, r7
9000ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ecc0:	4770      	bx	lr
	...

9000ecc4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
9000ecc4:	b580      	push	{r7, lr}
9000ecc6:	b082      	sub	sp, #8
9000ecc8:	af00      	add	r7, sp, #0
9000ecca:	6078      	str	r0, [r7, #4]
9000eccc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000ecce:	687b      	ldr	r3, [r7, #4]
9000ecd0:	2b00      	cmp	r3, #0
9000ecd2:	d00e      	beq.n	9000ecf2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
9000ecd4:	687b      	ldr	r3, [r7, #4]
9000ecd6:	7d1b      	ldrb	r3, [r3, #20]
9000ecd8:	2b01      	cmp	r3, #1
9000ecda:	d106      	bne.n	9000ecea <tcp_recv+0x26>
9000ecdc:	4b07      	ldr	r3, [pc, #28]	; (9000ecfc <tcp_recv+0x38>)
9000ecde:	f240 72df 	movw	r2, #2015	; 0x7df
9000ece2:	4907      	ldr	r1, [pc, #28]	; (9000ed00 <tcp_recv+0x3c>)
9000ece4:	4807      	ldr	r0, [pc, #28]	; (9000ed04 <tcp_recv+0x40>)
9000ece6:	f007 ffab 	bl	90016c40 <iprintf>
    pcb->recv = recv;
9000ecea:	687b      	ldr	r3, [r7, #4]
9000ecec:	683a      	ldr	r2, [r7, #0]
9000ecee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
9000ecf2:	bf00      	nop
9000ecf4:	3708      	adds	r7, #8
9000ecf6:	46bd      	mov	sp, r7
9000ecf8:	bd80      	pop	{r7, pc}
9000ecfa:	bf00      	nop
9000ecfc:	900190b4 	.word	0x900190b4
9000ed00:	90019650 	.word	0x90019650
9000ed04:	900190f8 	.word	0x900190f8

9000ed08 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
9000ed08:	b580      	push	{r7, lr}
9000ed0a:	b082      	sub	sp, #8
9000ed0c:	af00      	add	r7, sp, #0
9000ed0e:	6078      	str	r0, [r7, #4]
9000ed10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000ed12:	687b      	ldr	r3, [r7, #4]
9000ed14:	2b00      	cmp	r3, #0
9000ed16:	d00e      	beq.n	9000ed36 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
9000ed18:	687b      	ldr	r3, [r7, #4]
9000ed1a:	7d1b      	ldrb	r3, [r3, #20]
9000ed1c:	2b01      	cmp	r3, #1
9000ed1e:	d106      	bne.n	9000ed2e <tcp_sent+0x26>
9000ed20:	4b07      	ldr	r3, [pc, #28]	; (9000ed40 <tcp_sent+0x38>)
9000ed22:	f240 72f3 	movw	r2, #2035	; 0x7f3
9000ed26:	4907      	ldr	r1, [pc, #28]	; (9000ed44 <tcp_sent+0x3c>)
9000ed28:	4807      	ldr	r0, [pc, #28]	; (9000ed48 <tcp_sent+0x40>)
9000ed2a:	f007 ff89 	bl	90016c40 <iprintf>
    pcb->sent = sent;
9000ed2e:	687b      	ldr	r3, [r7, #4]
9000ed30:	683a      	ldr	r2, [r7, #0]
9000ed32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
9000ed36:	bf00      	nop
9000ed38:	3708      	adds	r7, #8
9000ed3a:	46bd      	mov	sp, r7
9000ed3c:	bd80      	pop	{r7, pc}
9000ed3e:	bf00      	nop
9000ed40:	900190b4 	.word	0x900190b4
9000ed44:	90019678 	.word	0x90019678
9000ed48:	900190f8 	.word	0x900190f8

9000ed4c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
9000ed4c:	b580      	push	{r7, lr}
9000ed4e:	b082      	sub	sp, #8
9000ed50:	af00      	add	r7, sp, #0
9000ed52:	6078      	str	r0, [r7, #4]
9000ed54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000ed56:	687b      	ldr	r3, [r7, #4]
9000ed58:	2b00      	cmp	r3, #0
9000ed5a:	d00e      	beq.n	9000ed7a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
9000ed5c:	687b      	ldr	r3, [r7, #4]
9000ed5e:	7d1b      	ldrb	r3, [r3, #20]
9000ed60:	2b01      	cmp	r3, #1
9000ed62:	d106      	bne.n	9000ed72 <tcp_err+0x26>
9000ed64:	4b07      	ldr	r3, [pc, #28]	; (9000ed84 <tcp_err+0x38>)
9000ed66:	f640 020d 	movw	r2, #2061	; 0x80d
9000ed6a:	4907      	ldr	r1, [pc, #28]	; (9000ed88 <tcp_err+0x3c>)
9000ed6c:	4807      	ldr	r0, [pc, #28]	; (9000ed8c <tcp_err+0x40>)
9000ed6e:	f007 ff67 	bl	90016c40 <iprintf>
    pcb->errf = err;
9000ed72:	687b      	ldr	r3, [r7, #4]
9000ed74:	683a      	ldr	r2, [r7, #0]
9000ed76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
9000ed7a:	bf00      	nop
9000ed7c:	3708      	adds	r7, #8
9000ed7e:	46bd      	mov	sp, r7
9000ed80:	bd80      	pop	{r7, pc}
9000ed82:	bf00      	nop
9000ed84:	900190b4 	.word	0x900190b4
9000ed88:	900196a0 	.word	0x900196a0
9000ed8c:	900190f8 	.word	0x900190f8

9000ed90 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
9000ed90:	b480      	push	{r7}
9000ed92:	b085      	sub	sp, #20
9000ed94:	af00      	add	r7, sp, #0
9000ed96:	6078      	str	r0, [r7, #4]
9000ed98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
9000ed9a:	687b      	ldr	r3, [r7, #4]
9000ed9c:	2b00      	cmp	r3, #0
9000ed9e:	d008      	beq.n	9000edb2 <tcp_accept+0x22>
9000eda0:	687b      	ldr	r3, [r7, #4]
9000eda2:	7d1b      	ldrb	r3, [r3, #20]
9000eda4:	2b01      	cmp	r3, #1
9000eda6:	d104      	bne.n	9000edb2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
9000eda8:	687b      	ldr	r3, [r7, #4]
9000edaa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
9000edac:	68fb      	ldr	r3, [r7, #12]
9000edae:	683a      	ldr	r2, [r7, #0]
9000edb0:	619a      	str	r2, [r3, #24]
  }
}
9000edb2:	bf00      	nop
9000edb4:	3714      	adds	r7, #20
9000edb6:	46bd      	mov	sp, r7
9000edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000edbc:	4770      	bx	lr
	...

9000edc0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
9000edc0:	b580      	push	{r7, lr}
9000edc2:	b084      	sub	sp, #16
9000edc4:	af00      	add	r7, sp, #0
9000edc6:	60f8      	str	r0, [r7, #12]
9000edc8:	60b9      	str	r1, [r7, #8]
9000edca:	4613      	mov	r3, r2
9000edcc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
9000edce:	68fb      	ldr	r3, [r7, #12]
9000edd0:	2b00      	cmp	r3, #0
9000edd2:	d107      	bne.n	9000ede4 <tcp_poll+0x24>
9000edd4:	4b0e      	ldr	r3, [pc, #56]	; (9000ee10 <tcp_poll+0x50>)
9000edd6:	f640 023d 	movw	r2, #2109	; 0x83d
9000edda:	490e      	ldr	r1, [pc, #56]	; (9000ee14 <tcp_poll+0x54>)
9000eddc:	480e      	ldr	r0, [pc, #56]	; (9000ee18 <tcp_poll+0x58>)
9000edde:	f007 ff2f 	bl	90016c40 <iprintf>
9000ede2:	e011      	b.n	9000ee08 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
9000ede4:	68fb      	ldr	r3, [r7, #12]
9000ede6:	7d1b      	ldrb	r3, [r3, #20]
9000ede8:	2b01      	cmp	r3, #1
9000edea:	d106      	bne.n	9000edfa <tcp_poll+0x3a>
9000edec:	4b08      	ldr	r3, [pc, #32]	; (9000ee10 <tcp_poll+0x50>)
9000edee:	f640 023e 	movw	r2, #2110	; 0x83e
9000edf2:	490a      	ldr	r1, [pc, #40]	; (9000ee1c <tcp_poll+0x5c>)
9000edf4:	4808      	ldr	r0, [pc, #32]	; (9000ee18 <tcp_poll+0x58>)
9000edf6:	f007 ff23 	bl	90016c40 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
9000edfa:	68fb      	ldr	r3, [r7, #12]
9000edfc:	68ba      	ldr	r2, [r7, #8]
9000edfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
9000ee02:	68fb      	ldr	r3, [r7, #12]
9000ee04:	79fa      	ldrb	r2, [r7, #7]
9000ee06:	775a      	strb	r2, [r3, #29]
}
9000ee08:	3710      	adds	r7, #16
9000ee0a:	46bd      	mov	sp, r7
9000ee0c:	bd80      	pop	{r7, pc}
9000ee0e:	bf00      	nop
9000ee10:	900190b4 	.word	0x900190b4
9000ee14:	900196c8 	.word	0x900196c8
9000ee18:	900190f8 	.word	0x900190f8
9000ee1c:	900196e0 	.word	0x900196e0

9000ee20 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
9000ee20:	b580      	push	{r7, lr}
9000ee22:	b082      	sub	sp, #8
9000ee24:	af00      	add	r7, sp, #0
9000ee26:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
9000ee28:	687b      	ldr	r3, [r7, #4]
9000ee2a:	2b00      	cmp	r3, #0
9000ee2c:	d107      	bne.n	9000ee3e <tcp_pcb_purge+0x1e>
9000ee2e:	4b21      	ldr	r3, [pc, #132]	; (9000eeb4 <tcp_pcb_purge+0x94>)
9000ee30:	f640 0251 	movw	r2, #2129	; 0x851
9000ee34:	4920      	ldr	r1, [pc, #128]	; (9000eeb8 <tcp_pcb_purge+0x98>)
9000ee36:	4821      	ldr	r0, [pc, #132]	; (9000eebc <tcp_pcb_purge+0x9c>)
9000ee38:	f007 ff02 	bl	90016c40 <iprintf>
9000ee3c:	e037      	b.n	9000eeae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
9000ee3e:	687b      	ldr	r3, [r7, #4]
9000ee40:	7d1b      	ldrb	r3, [r3, #20]
9000ee42:	2b00      	cmp	r3, #0
9000ee44:	d033      	beq.n	9000eeae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
9000ee46:	687b      	ldr	r3, [r7, #4]
9000ee48:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
9000ee4a:	2b0a      	cmp	r3, #10
9000ee4c:	d02f      	beq.n	9000eeae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
9000ee4e:	687b      	ldr	r3, [r7, #4]
9000ee50:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
9000ee52:	2b01      	cmp	r3, #1
9000ee54:	d02b      	beq.n	9000eeae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
9000ee56:	687b      	ldr	r3, [r7, #4]
9000ee58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000ee5a:	2b00      	cmp	r3, #0
9000ee5c:	d007      	beq.n	9000ee6e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
9000ee5e:	687b      	ldr	r3, [r7, #4]
9000ee60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000ee62:	4618      	mov	r0, r3
9000ee64:	f7fe f89e 	bl	9000cfa4 <pbuf_free>
      pcb->refused_data = NULL;
9000ee68:	687b      	ldr	r3, [r7, #4]
9000ee6a:	2200      	movs	r2, #0
9000ee6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
9000ee6e:	687b      	ldr	r3, [r7, #4]
9000ee70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000ee72:	2b00      	cmp	r3, #0
9000ee74:	d002      	beq.n	9000ee7c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
9000ee76:	6878      	ldr	r0, [r7, #4]
9000ee78:	f000 f986 	bl	9000f188 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
9000ee7c:	687b      	ldr	r3, [r7, #4]
9000ee7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000ee82:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
9000ee84:	687b      	ldr	r3, [r7, #4]
9000ee86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ee88:	4618      	mov	r0, r3
9000ee8a:	f7ff fcf9 	bl	9000e880 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
9000ee8e:	687b      	ldr	r3, [r7, #4]
9000ee90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ee92:	4618      	mov	r0, r3
9000ee94:	f7ff fcf4 	bl	9000e880 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
9000ee98:	687b      	ldr	r3, [r7, #4]
9000ee9a:	2200      	movs	r2, #0
9000ee9c:	66da      	str	r2, [r3, #108]	; 0x6c
9000ee9e:	687b      	ldr	r3, [r7, #4]
9000eea0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
9000eea2:	687b      	ldr	r3, [r7, #4]
9000eea4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
9000eea6:	687b      	ldr	r3, [r7, #4]
9000eea8:	2200      	movs	r2, #0
9000eeaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
9000eeae:	3708      	adds	r7, #8
9000eeb0:	46bd      	mov	sp, r7
9000eeb2:	bd80      	pop	{r7, pc}
9000eeb4:	900190b4 	.word	0x900190b4
9000eeb8:	90019700 	.word	0x90019700
9000eebc:	900190f8 	.word	0x900190f8

9000eec0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
9000eec0:	b580      	push	{r7, lr}
9000eec2:	b084      	sub	sp, #16
9000eec4:	af00      	add	r7, sp, #0
9000eec6:	6078      	str	r0, [r7, #4]
9000eec8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
9000eeca:	683b      	ldr	r3, [r7, #0]
9000eecc:	2b00      	cmp	r3, #0
9000eece:	d106      	bne.n	9000eede <tcp_pcb_remove+0x1e>
9000eed0:	4b3e      	ldr	r3, [pc, #248]	; (9000efcc <tcp_pcb_remove+0x10c>)
9000eed2:	f640 0283 	movw	r2, #2179	; 0x883
9000eed6:	493e      	ldr	r1, [pc, #248]	; (9000efd0 <tcp_pcb_remove+0x110>)
9000eed8:	483e      	ldr	r0, [pc, #248]	; (9000efd4 <tcp_pcb_remove+0x114>)
9000eeda:	f007 feb1 	bl	90016c40 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
9000eede:	687b      	ldr	r3, [r7, #4]
9000eee0:	2b00      	cmp	r3, #0
9000eee2:	d106      	bne.n	9000eef2 <tcp_pcb_remove+0x32>
9000eee4:	4b39      	ldr	r3, [pc, #228]	; (9000efcc <tcp_pcb_remove+0x10c>)
9000eee6:	f640 0284 	movw	r2, #2180	; 0x884
9000eeea:	493b      	ldr	r1, [pc, #236]	; (9000efd8 <tcp_pcb_remove+0x118>)
9000eeec:	4839      	ldr	r0, [pc, #228]	; (9000efd4 <tcp_pcb_remove+0x114>)
9000eeee:	f007 fea7 	bl	90016c40 <iprintf>

  TCP_RMV(pcblist, pcb);
9000eef2:	687b      	ldr	r3, [r7, #4]
9000eef4:	681b      	ldr	r3, [r3, #0]
9000eef6:	683a      	ldr	r2, [r7, #0]
9000eef8:	429a      	cmp	r2, r3
9000eefa:	d105      	bne.n	9000ef08 <tcp_pcb_remove+0x48>
9000eefc:	687b      	ldr	r3, [r7, #4]
9000eefe:	681b      	ldr	r3, [r3, #0]
9000ef00:	68da      	ldr	r2, [r3, #12]
9000ef02:	687b      	ldr	r3, [r7, #4]
9000ef04:	601a      	str	r2, [r3, #0]
9000ef06:	e013      	b.n	9000ef30 <tcp_pcb_remove+0x70>
9000ef08:	687b      	ldr	r3, [r7, #4]
9000ef0a:	681b      	ldr	r3, [r3, #0]
9000ef0c:	60fb      	str	r3, [r7, #12]
9000ef0e:	e00c      	b.n	9000ef2a <tcp_pcb_remove+0x6a>
9000ef10:	68fb      	ldr	r3, [r7, #12]
9000ef12:	68db      	ldr	r3, [r3, #12]
9000ef14:	683a      	ldr	r2, [r7, #0]
9000ef16:	429a      	cmp	r2, r3
9000ef18:	d104      	bne.n	9000ef24 <tcp_pcb_remove+0x64>
9000ef1a:	683b      	ldr	r3, [r7, #0]
9000ef1c:	68da      	ldr	r2, [r3, #12]
9000ef1e:	68fb      	ldr	r3, [r7, #12]
9000ef20:	60da      	str	r2, [r3, #12]
9000ef22:	e005      	b.n	9000ef30 <tcp_pcb_remove+0x70>
9000ef24:	68fb      	ldr	r3, [r7, #12]
9000ef26:	68db      	ldr	r3, [r3, #12]
9000ef28:	60fb      	str	r3, [r7, #12]
9000ef2a:	68fb      	ldr	r3, [r7, #12]
9000ef2c:	2b00      	cmp	r3, #0
9000ef2e:	d1ef      	bne.n	9000ef10 <tcp_pcb_remove+0x50>
9000ef30:	683b      	ldr	r3, [r7, #0]
9000ef32:	2200      	movs	r2, #0
9000ef34:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
9000ef36:	6838      	ldr	r0, [r7, #0]
9000ef38:	f7ff ff72 	bl	9000ee20 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
9000ef3c:	683b      	ldr	r3, [r7, #0]
9000ef3e:	7d1b      	ldrb	r3, [r3, #20]
9000ef40:	2b0a      	cmp	r3, #10
9000ef42:	d013      	beq.n	9000ef6c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
9000ef44:	683b      	ldr	r3, [r7, #0]
9000ef46:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
9000ef48:	2b01      	cmp	r3, #1
9000ef4a:	d00f      	beq.n	9000ef6c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
9000ef4c:	683b      	ldr	r3, [r7, #0]
9000ef4e:	8b5b      	ldrh	r3, [r3, #26]
9000ef50:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
9000ef54:	2b00      	cmp	r3, #0
9000ef56:	d009      	beq.n	9000ef6c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
9000ef58:	683b      	ldr	r3, [r7, #0]
9000ef5a:	8b5b      	ldrh	r3, [r3, #26]
9000ef5c:	f043 0302 	orr.w	r3, r3, #2
9000ef60:	b29a      	uxth	r2, r3
9000ef62:	683b      	ldr	r3, [r7, #0]
9000ef64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
9000ef66:	6838      	ldr	r0, [r7, #0]
9000ef68:	f003 fbc6 	bl	900126f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
9000ef6c:	683b      	ldr	r3, [r7, #0]
9000ef6e:	7d1b      	ldrb	r3, [r3, #20]
9000ef70:	2b01      	cmp	r3, #1
9000ef72:	d020      	beq.n	9000efb6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
9000ef74:	683b      	ldr	r3, [r7, #0]
9000ef76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ef78:	2b00      	cmp	r3, #0
9000ef7a:	d006      	beq.n	9000ef8a <tcp_pcb_remove+0xca>
9000ef7c:	4b13      	ldr	r3, [pc, #76]	; (9000efcc <tcp_pcb_remove+0x10c>)
9000ef7e:	f640 0293 	movw	r2, #2195	; 0x893
9000ef82:	4916      	ldr	r1, [pc, #88]	; (9000efdc <tcp_pcb_remove+0x11c>)
9000ef84:	4813      	ldr	r0, [pc, #76]	; (9000efd4 <tcp_pcb_remove+0x114>)
9000ef86:	f007 fe5b 	bl	90016c40 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
9000ef8a:	683b      	ldr	r3, [r7, #0]
9000ef8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ef8e:	2b00      	cmp	r3, #0
9000ef90:	d006      	beq.n	9000efa0 <tcp_pcb_remove+0xe0>
9000ef92:	4b0e      	ldr	r3, [pc, #56]	; (9000efcc <tcp_pcb_remove+0x10c>)
9000ef94:	f640 0294 	movw	r2, #2196	; 0x894
9000ef98:	4911      	ldr	r1, [pc, #68]	; (9000efe0 <tcp_pcb_remove+0x120>)
9000ef9a:	480e      	ldr	r0, [pc, #56]	; (9000efd4 <tcp_pcb_remove+0x114>)
9000ef9c:	f007 fe50 	bl	90016c40 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
9000efa0:	683b      	ldr	r3, [r7, #0]
9000efa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000efa4:	2b00      	cmp	r3, #0
9000efa6:	d006      	beq.n	9000efb6 <tcp_pcb_remove+0xf6>
9000efa8:	4b08      	ldr	r3, [pc, #32]	; (9000efcc <tcp_pcb_remove+0x10c>)
9000efaa:	f640 0296 	movw	r2, #2198	; 0x896
9000efae:	490d      	ldr	r1, [pc, #52]	; (9000efe4 <tcp_pcb_remove+0x124>)
9000efb0:	4808      	ldr	r0, [pc, #32]	; (9000efd4 <tcp_pcb_remove+0x114>)
9000efb2:	f007 fe45 	bl	90016c40 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
9000efb6:	683b      	ldr	r3, [r7, #0]
9000efb8:	2200      	movs	r2, #0
9000efba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
9000efbc:	683b      	ldr	r3, [r7, #0]
9000efbe:	2200      	movs	r2, #0
9000efc0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
9000efc2:	bf00      	nop
9000efc4:	3710      	adds	r7, #16
9000efc6:	46bd      	mov	sp, r7
9000efc8:	bd80      	pop	{r7, pc}
9000efca:	bf00      	nop
9000efcc:	900190b4 	.word	0x900190b4
9000efd0:	9001971c 	.word	0x9001971c
9000efd4:	900190f8 	.word	0x900190f8
9000efd8:	90019738 	.word	0x90019738
9000efdc:	90019758 	.word	0x90019758
9000efe0:	90019770 	.word	0x90019770
9000efe4:	9001978c 	.word	0x9001978c

9000efe8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
9000efe8:	b580      	push	{r7, lr}
9000efea:	b082      	sub	sp, #8
9000efec:	af00      	add	r7, sp, #0
9000efee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
9000eff0:	687b      	ldr	r3, [r7, #4]
9000eff2:	2b00      	cmp	r3, #0
9000eff4:	d106      	bne.n	9000f004 <tcp_next_iss+0x1c>
9000eff6:	4b0a      	ldr	r3, [pc, #40]	; (9000f020 <tcp_next_iss+0x38>)
9000eff8:	f640 02af 	movw	r2, #2223	; 0x8af
9000effc:	4909      	ldr	r1, [pc, #36]	; (9000f024 <tcp_next_iss+0x3c>)
9000effe:	480a      	ldr	r0, [pc, #40]	; (9000f028 <tcp_next_iss+0x40>)
9000f000:	f007 fe1e 	bl	90016c40 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
9000f004:	4b09      	ldr	r3, [pc, #36]	; (9000f02c <tcp_next_iss+0x44>)
9000f006:	681a      	ldr	r2, [r3, #0]
9000f008:	4b09      	ldr	r3, [pc, #36]	; (9000f030 <tcp_next_iss+0x48>)
9000f00a:	681b      	ldr	r3, [r3, #0]
9000f00c:	4413      	add	r3, r2
9000f00e:	4a07      	ldr	r2, [pc, #28]	; (9000f02c <tcp_next_iss+0x44>)
9000f010:	6013      	str	r3, [r2, #0]
  return iss;
9000f012:	4b06      	ldr	r3, [pc, #24]	; (9000f02c <tcp_next_iss+0x44>)
9000f014:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
9000f016:	4618      	mov	r0, r3
9000f018:	3708      	adds	r7, #8
9000f01a:	46bd      	mov	sp, r7
9000f01c:	bd80      	pop	{r7, pc}
9000f01e:	bf00      	nop
9000f020:	900190b4 	.word	0x900190b4
9000f024:	900197a4 	.word	0x900197a4
9000f028:	900190f8 	.word	0x900190f8
9000f02c:	20000014 	.word	0x20000014
9000f030:	2000d5c8 	.word	0x2000d5c8

9000f034 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
9000f034:	b580      	push	{r7, lr}
9000f036:	b086      	sub	sp, #24
9000f038:	af00      	add	r7, sp, #0
9000f03a:	4603      	mov	r3, r0
9000f03c:	60b9      	str	r1, [r7, #8]
9000f03e:	607a      	str	r2, [r7, #4]
9000f040:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
9000f042:	687b      	ldr	r3, [r7, #4]
9000f044:	2b00      	cmp	r3, #0
9000f046:	d106      	bne.n	9000f056 <tcp_eff_send_mss_netif+0x22>
9000f048:	4b14      	ldr	r3, [pc, #80]	; (9000f09c <tcp_eff_send_mss_netif+0x68>)
9000f04a:	f640 02c5 	movw	r2, #2245	; 0x8c5
9000f04e:	4914      	ldr	r1, [pc, #80]	; (9000f0a0 <tcp_eff_send_mss_netif+0x6c>)
9000f050:	4814      	ldr	r0, [pc, #80]	; (9000f0a4 <tcp_eff_send_mss_netif+0x70>)
9000f052:	f007 fdf5 	bl	90016c40 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
9000f056:	68bb      	ldr	r3, [r7, #8]
9000f058:	2b00      	cmp	r3, #0
9000f05a:	d101      	bne.n	9000f060 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
9000f05c:	89fb      	ldrh	r3, [r7, #14]
9000f05e:	e019      	b.n	9000f094 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
9000f060:	68bb      	ldr	r3, [r7, #8]
9000f062:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
9000f064:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
9000f066:	8afb      	ldrh	r3, [r7, #22]
9000f068:	2b00      	cmp	r3, #0
9000f06a:	d012      	beq.n	9000f092 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
9000f06c:	2328      	movs	r3, #40	; 0x28
9000f06e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
9000f070:	8afa      	ldrh	r2, [r7, #22]
9000f072:	8abb      	ldrh	r3, [r7, #20]
9000f074:	429a      	cmp	r2, r3
9000f076:	d904      	bls.n	9000f082 <tcp_eff_send_mss_netif+0x4e>
9000f078:	8afa      	ldrh	r2, [r7, #22]
9000f07a:	8abb      	ldrh	r3, [r7, #20]
9000f07c:	1ad3      	subs	r3, r2, r3
9000f07e:	b29b      	uxth	r3, r3
9000f080:	e000      	b.n	9000f084 <tcp_eff_send_mss_netif+0x50>
9000f082:	2300      	movs	r3, #0
9000f084:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
9000f086:	8a7a      	ldrh	r2, [r7, #18]
9000f088:	89fb      	ldrh	r3, [r7, #14]
9000f08a:	4293      	cmp	r3, r2
9000f08c:	bf28      	it	cs
9000f08e:	4613      	movcs	r3, r2
9000f090:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
9000f092:	89fb      	ldrh	r3, [r7, #14]
}
9000f094:	4618      	mov	r0, r3
9000f096:	3718      	adds	r7, #24
9000f098:	46bd      	mov	sp, r7
9000f09a:	bd80      	pop	{r7, pc}
9000f09c:	900190b4 	.word	0x900190b4
9000f0a0:	900197c0 	.word	0x900197c0
9000f0a4:	900190f8 	.word	0x900190f8

9000f0a8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
9000f0a8:	b580      	push	{r7, lr}
9000f0aa:	b084      	sub	sp, #16
9000f0ac:	af00      	add	r7, sp, #0
9000f0ae:	6078      	str	r0, [r7, #4]
9000f0b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
9000f0b2:	683b      	ldr	r3, [r7, #0]
9000f0b4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
9000f0b6:	687b      	ldr	r3, [r7, #4]
9000f0b8:	2b00      	cmp	r3, #0
9000f0ba:	d119      	bne.n	9000f0f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
9000f0bc:	4b10      	ldr	r3, [pc, #64]	; (9000f100 <tcp_netif_ip_addr_changed_pcblist+0x58>)
9000f0be:	f44f 6210 	mov.w	r2, #2304	; 0x900
9000f0c2:	4910      	ldr	r1, [pc, #64]	; (9000f104 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
9000f0c4:	4810      	ldr	r0, [pc, #64]	; (9000f108 <tcp_netif_ip_addr_changed_pcblist+0x60>)
9000f0c6:	f007 fdbb 	bl	90016c40 <iprintf>

  while (pcb != NULL) {
9000f0ca:	e011      	b.n	9000f0f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
9000f0cc:	68fb      	ldr	r3, [r7, #12]
9000f0ce:	681a      	ldr	r2, [r3, #0]
9000f0d0:	687b      	ldr	r3, [r7, #4]
9000f0d2:	681b      	ldr	r3, [r3, #0]
9000f0d4:	429a      	cmp	r2, r3
9000f0d6:	d108      	bne.n	9000f0ea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
9000f0d8:	68fb      	ldr	r3, [r7, #12]
9000f0da:	68db      	ldr	r3, [r3, #12]
9000f0dc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
9000f0de:	68f8      	ldr	r0, [r7, #12]
9000f0e0:	f7fe fd50 	bl	9000db84 <tcp_abort>
      pcb = next;
9000f0e4:	68bb      	ldr	r3, [r7, #8]
9000f0e6:	60fb      	str	r3, [r7, #12]
9000f0e8:	e002      	b.n	9000f0f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
9000f0ea:	68fb      	ldr	r3, [r7, #12]
9000f0ec:	68db      	ldr	r3, [r3, #12]
9000f0ee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
9000f0f0:	68fb      	ldr	r3, [r7, #12]
9000f0f2:	2b00      	cmp	r3, #0
9000f0f4:	d1ea      	bne.n	9000f0cc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
9000f0f6:	bf00      	nop
9000f0f8:	bf00      	nop
9000f0fa:	3710      	adds	r7, #16
9000f0fc:	46bd      	mov	sp, r7
9000f0fe:	bd80      	pop	{r7, pc}
9000f100:	900190b4 	.word	0x900190b4
9000f104:	900197e8 	.word	0x900197e8
9000f108:	900190f8 	.word	0x900190f8

9000f10c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
9000f10c:	b580      	push	{r7, lr}
9000f10e:	b084      	sub	sp, #16
9000f110:	af00      	add	r7, sp, #0
9000f112:	6078      	str	r0, [r7, #4]
9000f114:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
9000f116:	687b      	ldr	r3, [r7, #4]
9000f118:	2b00      	cmp	r3, #0
9000f11a:	d02a      	beq.n	9000f172 <tcp_netif_ip_addr_changed+0x66>
9000f11c:	687b      	ldr	r3, [r7, #4]
9000f11e:	681b      	ldr	r3, [r3, #0]
9000f120:	2b00      	cmp	r3, #0
9000f122:	d026      	beq.n	9000f172 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
9000f124:	4b15      	ldr	r3, [pc, #84]	; (9000f17c <tcp_netif_ip_addr_changed+0x70>)
9000f126:	681b      	ldr	r3, [r3, #0]
9000f128:	4619      	mov	r1, r3
9000f12a:	6878      	ldr	r0, [r7, #4]
9000f12c:	f7ff ffbc 	bl	9000f0a8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
9000f130:	4b13      	ldr	r3, [pc, #76]	; (9000f180 <tcp_netif_ip_addr_changed+0x74>)
9000f132:	681b      	ldr	r3, [r3, #0]
9000f134:	4619      	mov	r1, r3
9000f136:	6878      	ldr	r0, [r7, #4]
9000f138:	f7ff ffb6 	bl	9000f0a8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
9000f13c:	683b      	ldr	r3, [r7, #0]
9000f13e:	2b00      	cmp	r3, #0
9000f140:	d017      	beq.n	9000f172 <tcp_netif_ip_addr_changed+0x66>
9000f142:	683b      	ldr	r3, [r7, #0]
9000f144:	681b      	ldr	r3, [r3, #0]
9000f146:	2b00      	cmp	r3, #0
9000f148:	d013      	beq.n	9000f172 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000f14a:	4b0e      	ldr	r3, [pc, #56]	; (9000f184 <tcp_netif_ip_addr_changed+0x78>)
9000f14c:	681b      	ldr	r3, [r3, #0]
9000f14e:	60fb      	str	r3, [r7, #12]
9000f150:	e00c      	b.n	9000f16c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
9000f152:	68fb      	ldr	r3, [r7, #12]
9000f154:	681a      	ldr	r2, [r3, #0]
9000f156:	687b      	ldr	r3, [r7, #4]
9000f158:	681b      	ldr	r3, [r3, #0]
9000f15a:	429a      	cmp	r2, r3
9000f15c:	d103      	bne.n	9000f166 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
9000f15e:	683b      	ldr	r3, [r7, #0]
9000f160:	681a      	ldr	r2, [r3, #0]
9000f162:	68fb      	ldr	r3, [r7, #12]
9000f164:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000f166:	68fb      	ldr	r3, [r7, #12]
9000f168:	68db      	ldr	r3, [r3, #12]
9000f16a:	60fb      	str	r3, [r7, #12]
9000f16c:	68fb      	ldr	r3, [r7, #12]
9000f16e:	2b00      	cmp	r3, #0
9000f170:	d1ef      	bne.n	9000f152 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
9000f172:	bf00      	nop
9000f174:	3710      	adds	r7, #16
9000f176:	46bd      	mov	sp, r7
9000f178:	bd80      	pop	{r7, pc}
9000f17a:	bf00      	nop
9000f17c:	2000d5d4 	.word	0x2000d5d4
9000f180:	2000d5cc 	.word	0x2000d5cc
9000f184:	2000d5d0 	.word	0x2000d5d0

9000f188 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
9000f188:	b580      	push	{r7, lr}
9000f18a:	b082      	sub	sp, #8
9000f18c:	af00      	add	r7, sp, #0
9000f18e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
9000f190:	687b      	ldr	r3, [r7, #4]
9000f192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000f194:	2b00      	cmp	r3, #0
9000f196:	d007      	beq.n	9000f1a8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
9000f198:	687b      	ldr	r3, [r7, #4]
9000f19a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000f19c:	4618      	mov	r0, r3
9000f19e:	f7ff fb6f 	bl	9000e880 <tcp_segs_free>
    pcb->ooseq = NULL;
9000f1a2:	687b      	ldr	r3, [r7, #4]
9000f1a4:	2200      	movs	r2, #0
9000f1a6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
9000f1a8:	bf00      	nop
9000f1aa:	3708      	adds	r7, #8
9000f1ac:	46bd      	mov	sp, r7
9000f1ae:	bd80      	pop	{r7, pc}

9000f1b0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
9000f1b0:	b590      	push	{r4, r7, lr}
9000f1b2:	b08d      	sub	sp, #52	; 0x34
9000f1b4:	af04      	add	r7, sp, #16
9000f1b6:	6078      	str	r0, [r7, #4]
9000f1b8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
9000f1ba:	687b      	ldr	r3, [r7, #4]
9000f1bc:	2b00      	cmp	r3, #0
9000f1be:	d105      	bne.n	9000f1cc <tcp_input+0x1c>
9000f1c0:	4b9b      	ldr	r3, [pc, #620]	; (9000f430 <tcp_input+0x280>)
9000f1c2:	2283      	movs	r2, #131	; 0x83
9000f1c4:	499b      	ldr	r1, [pc, #620]	; (9000f434 <tcp_input+0x284>)
9000f1c6:	489c      	ldr	r0, [pc, #624]	; (9000f438 <tcp_input+0x288>)
9000f1c8:	f007 fd3a 	bl	90016c40 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
9000f1cc:	687b      	ldr	r3, [r7, #4]
9000f1ce:	685b      	ldr	r3, [r3, #4]
9000f1d0:	4a9a      	ldr	r2, [pc, #616]	; (9000f43c <tcp_input+0x28c>)
9000f1d2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
9000f1d4:	687b      	ldr	r3, [r7, #4]
9000f1d6:	895b      	ldrh	r3, [r3, #10]
9000f1d8:	2b13      	cmp	r3, #19
9000f1da:	f240 83d1 	bls.w	9000f980 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
9000f1de:	4b98      	ldr	r3, [pc, #608]	; (9000f440 <tcp_input+0x290>)
9000f1e0:	695b      	ldr	r3, [r3, #20]
9000f1e2:	4a97      	ldr	r2, [pc, #604]	; (9000f440 <tcp_input+0x290>)
9000f1e4:	6812      	ldr	r2, [r2, #0]
9000f1e6:	4611      	mov	r1, r2
9000f1e8:	4618      	mov	r0, r3
9000f1ea:	f006 f9e5 	bl	900155b8 <ip4_addr_isbroadcast_u32>
9000f1ee:	4603      	mov	r3, r0
9000f1f0:	2b00      	cmp	r3, #0
9000f1f2:	f040 83c7 	bne.w	9000f984 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
9000f1f6:	4b92      	ldr	r3, [pc, #584]	; (9000f440 <tcp_input+0x290>)
9000f1f8:	695b      	ldr	r3, [r3, #20]
9000f1fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
9000f1fe:	2be0      	cmp	r3, #224	; 0xe0
9000f200:	f000 83c0 	beq.w	9000f984 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
9000f204:	4b8d      	ldr	r3, [pc, #564]	; (9000f43c <tcp_input+0x28c>)
9000f206:	681b      	ldr	r3, [r3, #0]
9000f208:	899b      	ldrh	r3, [r3, #12]
9000f20a:	b29b      	uxth	r3, r3
9000f20c:	4618      	mov	r0, r3
9000f20e:	f7fc fb1d 	bl	9000b84c <lwip_htons>
9000f212:	4603      	mov	r3, r0
9000f214:	0b1b      	lsrs	r3, r3, #12
9000f216:	b29b      	uxth	r3, r3
9000f218:	b2db      	uxtb	r3, r3
9000f21a:	009b      	lsls	r3, r3, #2
9000f21c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
9000f21e:	7cbb      	ldrb	r3, [r7, #18]
9000f220:	2b13      	cmp	r3, #19
9000f222:	f240 83b1 	bls.w	9000f988 <tcp_input+0x7d8>
9000f226:	7cbb      	ldrb	r3, [r7, #18]
9000f228:	b29a      	uxth	r2, r3
9000f22a:	687b      	ldr	r3, [r7, #4]
9000f22c:	891b      	ldrh	r3, [r3, #8]
9000f22e:	429a      	cmp	r2, r3
9000f230:	f200 83aa 	bhi.w	9000f988 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
9000f234:	7cbb      	ldrb	r3, [r7, #18]
9000f236:	b29b      	uxth	r3, r3
9000f238:	3b14      	subs	r3, #20
9000f23a:	b29a      	uxth	r2, r3
9000f23c:	4b81      	ldr	r3, [pc, #516]	; (9000f444 <tcp_input+0x294>)
9000f23e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
9000f240:	4b81      	ldr	r3, [pc, #516]	; (9000f448 <tcp_input+0x298>)
9000f242:	2200      	movs	r2, #0
9000f244:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
9000f246:	687b      	ldr	r3, [r7, #4]
9000f248:	895a      	ldrh	r2, [r3, #10]
9000f24a:	7cbb      	ldrb	r3, [r7, #18]
9000f24c:	b29b      	uxth	r3, r3
9000f24e:	429a      	cmp	r2, r3
9000f250:	d309      	bcc.n	9000f266 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
9000f252:	4b7c      	ldr	r3, [pc, #496]	; (9000f444 <tcp_input+0x294>)
9000f254:	881a      	ldrh	r2, [r3, #0]
9000f256:	4b7d      	ldr	r3, [pc, #500]	; (9000f44c <tcp_input+0x29c>)
9000f258:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
9000f25a:	7cbb      	ldrb	r3, [r7, #18]
9000f25c:	4619      	mov	r1, r3
9000f25e:	6878      	ldr	r0, [r7, #4]
9000f260:	f7fd fe1a 	bl	9000ce98 <pbuf_remove_header>
9000f264:	e04e      	b.n	9000f304 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
9000f266:	687b      	ldr	r3, [r7, #4]
9000f268:	681b      	ldr	r3, [r3, #0]
9000f26a:	2b00      	cmp	r3, #0
9000f26c:	d105      	bne.n	9000f27a <tcp_input+0xca>
9000f26e:	4b70      	ldr	r3, [pc, #448]	; (9000f430 <tcp_input+0x280>)
9000f270:	22c2      	movs	r2, #194	; 0xc2
9000f272:	4977      	ldr	r1, [pc, #476]	; (9000f450 <tcp_input+0x2a0>)
9000f274:	4870      	ldr	r0, [pc, #448]	; (9000f438 <tcp_input+0x288>)
9000f276:	f007 fce3 	bl	90016c40 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
9000f27a:	2114      	movs	r1, #20
9000f27c:	6878      	ldr	r0, [r7, #4]
9000f27e:	f7fd fe0b 	bl	9000ce98 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
9000f282:	687b      	ldr	r3, [r7, #4]
9000f284:	895a      	ldrh	r2, [r3, #10]
9000f286:	4b71      	ldr	r3, [pc, #452]	; (9000f44c <tcp_input+0x29c>)
9000f288:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
9000f28a:	4b6e      	ldr	r3, [pc, #440]	; (9000f444 <tcp_input+0x294>)
9000f28c:	881a      	ldrh	r2, [r3, #0]
9000f28e:	4b6f      	ldr	r3, [pc, #444]	; (9000f44c <tcp_input+0x29c>)
9000f290:	881b      	ldrh	r3, [r3, #0]
9000f292:	1ad3      	subs	r3, r2, r3
9000f294:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
9000f296:	4b6d      	ldr	r3, [pc, #436]	; (9000f44c <tcp_input+0x29c>)
9000f298:	881b      	ldrh	r3, [r3, #0]
9000f29a:	4619      	mov	r1, r3
9000f29c:	6878      	ldr	r0, [r7, #4]
9000f29e:	f7fd fdfb 	bl	9000ce98 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
9000f2a2:	687b      	ldr	r3, [r7, #4]
9000f2a4:	681b      	ldr	r3, [r3, #0]
9000f2a6:	895b      	ldrh	r3, [r3, #10]
9000f2a8:	8a3a      	ldrh	r2, [r7, #16]
9000f2aa:	429a      	cmp	r2, r3
9000f2ac:	f200 836e 	bhi.w	9000f98c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
9000f2b0:	687b      	ldr	r3, [r7, #4]
9000f2b2:	681b      	ldr	r3, [r3, #0]
9000f2b4:	685b      	ldr	r3, [r3, #4]
9000f2b6:	4a64      	ldr	r2, [pc, #400]	; (9000f448 <tcp_input+0x298>)
9000f2b8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
9000f2ba:	687b      	ldr	r3, [r7, #4]
9000f2bc:	681b      	ldr	r3, [r3, #0]
9000f2be:	8a3a      	ldrh	r2, [r7, #16]
9000f2c0:	4611      	mov	r1, r2
9000f2c2:	4618      	mov	r0, r3
9000f2c4:	f7fd fde8 	bl	9000ce98 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
9000f2c8:	687b      	ldr	r3, [r7, #4]
9000f2ca:	891a      	ldrh	r2, [r3, #8]
9000f2cc:	8a3b      	ldrh	r3, [r7, #16]
9000f2ce:	1ad3      	subs	r3, r2, r3
9000f2d0:	b29a      	uxth	r2, r3
9000f2d2:	687b      	ldr	r3, [r7, #4]
9000f2d4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
9000f2d6:	687b      	ldr	r3, [r7, #4]
9000f2d8:	895b      	ldrh	r3, [r3, #10]
9000f2da:	2b00      	cmp	r3, #0
9000f2dc:	d005      	beq.n	9000f2ea <tcp_input+0x13a>
9000f2de:	4b54      	ldr	r3, [pc, #336]	; (9000f430 <tcp_input+0x280>)
9000f2e0:	22df      	movs	r2, #223	; 0xdf
9000f2e2:	495c      	ldr	r1, [pc, #368]	; (9000f454 <tcp_input+0x2a4>)
9000f2e4:	4854      	ldr	r0, [pc, #336]	; (9000f438 <tcp_input+0x288>)
9000f2e6:	f007 fcab 	bl	90016c40 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
9000f2ea:	687b      	ldr	r3, [r7, #4]
9000f2ec:	891a      	ldrh	r2, [r3, #8]
9000f2ee:	687b      	ldr	r3, [r7, #4]
9000f2f0:	681b      	ldr	r3, [r3, #0]
9000f2f2:	891b      	ldrh	r3, [r3, #8]
9000f2f4:	429a      	cmp	r2, r3
9000f2f6:	d005      	beq.n	9000f304 <tcp_input+0x154>
9000f2f8:	4b4d      	ldr	r3, [pc, #308]	; (9000f430 <tcp_input+0x280>)
9000f2fa:	22e0      	movs	r2, #224	; 0xe0
9000f2fc:	4956      	ldr	r1, [pc, #344]	; (9000f458 <tcp_input+0x2a8>)
9000f2fe:	484e      	ldr	r0, [pc, #312]	; (9000f438 <tcp_input+0x288>)
9000f300:	f007 fc9e 	bl	90016c40 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
9000f304:	4b4d      	ldr	r3, [pc, #308]	; (9000f43c <tcp_input+0x28c>)
9000f306:	681b      	ldr	r3, [r3, #0]
9000f308:	881b      	ldrh	r3, [r3, #0]
9000f30a:	b29b      	uxth	r3, r3
9000f30c:	4a4b      	ldr	r2, [pc, #300]	; (9000f43c <tcp_input+0x28c>)
9000f30e:	6814      	ldr	r4, [r2, #0]
9000f310:	4618      	mov	r0, r3
9000f312:	f7fc fa9b 	bl	9000b84c <lwip_htons>
9000f316:	4603      	mov	r3, r0
9000f318:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
9000f31a:	4b48      	ldr	r3, [pc, #288]	; (9000f43c <tcp_input+0x28c>)
9000f31c:	681b      	ldr	r3, [r3, #0]
9000f31e:	885b      	ldrh	r3, [r3, #2]
9000f320:	b29b      	uxth	r3, r3
9000f322:	4a46      	ldr	r2, [pc, #280]	; (9000f43c <tcp_input+0x28c>)
9000f324:	6814      	ldr	r4, [r2, #0]
9000f326:	4618      	mov	r0, r3
9000f328:	f7fc fa90 	bl	9000b84c <lwip_htons>
9000f32c:	4603      	mov	r3, r0
9000f32e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
9000f330:	4b42      	ldr	r3, [pc, #264]	; (9000f43c <tcp_input+0x28c>)
9000f332:	681b      	ldr	r3, [r3, #0]
9000f334:	685b      	ldr	r3, [r3, #4]
9000f336:	4a41      	ldr	r2, [pc, #260]	; (9000f43c <tcp_input+0x28c>)
9000f338:	6814      	ldr	r4, [r2, #0]
9000f33a:	4618      	mov	r0, r3
9000f33c:	f7fc fa9b 	bl	9000b876 <lwip_htonl>
9000f340:	4603      	mov	r3, r0
9000f342:	6063      	str	r3, [r4, #4]
9000f344:	6863      	ldr	r3, [r4, #4]
9000f346:	4a45      	ldr	r2, [pc, #276]	; (9000f45c <tcp_input+0x2ac>)
9000f348:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
9000f34a:	4b3c      	ldr	r3, [pc, #240]	; (9000f43c <tcp_input+0x28c>)
9000f34c:	681b      	ldr	r3, [r3, #0]
9000f34e:	689b      	ldr	r3, [r3, #8]
9000f350:	4a3a      	ldr	r2, [pc, #232]	; (9000f43c <tcp_input+0x28c>)
9000f352:	6814      	ldr	r4, [r2, #0]
9000f354:	4618      	mov	r0, r3
9000f356:	f7fc fa8e 	bl	9000b876 <lwip_htonl>
9000f35a:	4603      	mov	r3, r0
9000f35c:	60a3      	str	r3, [r4, #8]
9000f35e:	68a3      	ldr	r3, [r4, #8]
9000f360:	4a3f      	ldr	r2, [pc, #252]	; (9000f460 <tcp_input+0x2b0>)
9000f362:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
9000f364:	4b35      	ldr	r3, [pc, #212]	; (9000f43c <tcp_input+0x28c>)
9000f366:	681b      	ldr	r3, [r3, #0]
9000f368:	89db      	ldrh	r3, [r3, #14]
9000f36a:	b29b      	uxth	r3, r3
9000f36c:	4a33      	ldr	r2, [pc, #204]	; (9000f43c <tcp_input+0x28c>)
9000f36e:	6814      	ldr	r4, [r2, #0]
9000f370:	4618      	mov	r0, r3
9000f372:	f7fc fa6b 	bl	9000b84c <lwip_htons>
9000f376:	4603      	mov	r3, r0
9000f378:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
9000f37a:	4b30      	ldr	r3, [pc, #192]	; (9000f43c <tcp_input+0x28c>)
9000f37c:	681b      	ldr	r3, [r3, #0]
9000f37e:	899b      	ldrh	r3, [r3, #12]
9000f380:	b29b      	uxth	r3, r3
9000f382:	4618      	mov	r0, r3
9000f384:	f7fc fa62 	bl	9000b84c <lwip_htons>
9000f388:	4603      	mov	r3, r0
9000f38a:	b2db      	uxtb	r3, r3
9000f38c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000f390:	b2da      	uxtb	r2, r3
9000f392:	4b34      	ldr	r3, [pc, #208]	; (9000f464 <tcp_input+0x2b4>)
9000f394:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
9000f396:	687b      	ldr	r3, [r7, #4]
9000f398:	891a      	ldrh	r2, [r3, #8]
9000f39a:	4b33      	ldr	r3, [pc, #204]	; (9000f468 <tcp_input+0x2b8>)
9000f39c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
9000f39e:	4b31      	ldr	r3, [pc, #196]	; (9000f464 <tcp_input+0x2b4>)
9000f3a0:	781b      	ldrb	r3, [r3, #0]
9000f3a2:	f003 0303 	and.w	r3, r3, #3
9000f3a6:	2b00      	cmp	r3, #0
9000f3a8:	d00c      	beq.n	9000f3c4 <tcp_input+0x214>
    tcplen++;
9000f3aa:	4b2f      	ldr	r3, [pc, #188]	; (9000f468 <tcp_input+0x2b8>)
9000f3ac:	881b      	ldrh	r3, [r3, #0]
9000f3ae:	3301      	adds	r3, #1
9000f3b0:	b29a      	uxth	r2, r3
9000f3b2:	4b2d      	ldr	r3, [pc, #180]	; (9000f468 <tcp_input+0x2b8>)
9000f3b4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
9000f3b6:	687b      	ldr	r3, [r7, #4]
9000f3b8:	891a      	ldrh	r2, [r3, #8]
9000f3ba:	4b2b      	ldr	r3, [pc, #172]	; (9000f468 <tcp_input+0x2b8>)
9000f3bc:	881b      	ldrh	r3, [r3, #0]
9000f3be:	429a      	cmp	r2, r3
9000f3c0:	f200 82e6 	bhi.w	9000f990 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
9000f3c4:	2300      	movs	r3, #0
9000f3c6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000f3c8:	4b28      	ldr	r3, [pc, #160]	; (9000f46c <tcp_input+0x2bc>)
9000f3ca:	681b      	ldr	r3, [r3, #0]
9000f3cc:	61fb      	str	r3, [r7, #28]
9000f3ce:	e09d      	b.n	9000f50c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
9000f3d0:	69fb      	ldr	r3, [r7, #28]
9000f3d2:	7d1b      	ldrb	r3, [r3, #20]
9000f3d4:	2b00      	cmp	r3, #0
9000f3d6:	d105      	bne.n	9000f3e4 <tcp_input+0x234>
9000f3d8:	4b15      	ldr	r3, [pc, #84]	; (9000f430 <tcp_input+0x280>)
9000f3da:	22fb      	movs	r2, #251	; 0xfb
9000f3dc:	4924      	ldr	r1, [pc, #144]	; (9000f470 <tcp_input+0x2c0>)
9000f3de:	4816      	ldr	r0, [pc, #88]	; (9000f438 <tcp_input+0x288>)
9000f3e0:	f007 fc2e 	bl	90016c40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
9000f3e4:	69fb      	ldr	r3, [r7, #28]
9000f3e6:	7d1b      	ldrb	r3, [r3, #20]
9000f3e8:	2b0a      	cmp	r3, #10
9000f3ea:	d105      	bne.n	9000f3f8 <tcp_input+0x248>
9000f3ec:	4b10      	ldr	r3, [pc, #64]	; (9000f430 <tcp_input+0x280>)
9000f3ee:	22fc      	movs	r2, #252	; 0xfc
9000f3f0:	4920      	ldr	r1, [pc, #128]	; (9000f474 <tcp_input+0x2c4>)
9000f3f2:	4811      	ldr	r0, [pc, #68]	; (9000f438 <tcp_input+0x288>)
9000f3f4:	f007 fc24 	bl	90016c40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
9000f3f8:	69fb      	ldr	r3, [r7, #28]
9000f3fa:	7d1b      	ldrb	r3, [r3, #20]
9000f3fc:	2b01      	cmp	r3, #1
9000f3fe:	d105      	bne.n	9000f40c <tcp_input+0x25c>
9000f400:	4b0b      	ldr	r3, [pc, #44]	; (9000f430 <tcp_input+0x280>)
9000f402:	22fd      	movs	r2, #253	; 0xfd
9000f404:	491c      	ldr	r1, [pc, #112]	; (9000f478 <tcp_input+0x2c8>)
9000f406:	480c      	ldr	r0, [pc, #48]	; (9000f438 <tcp_input+0x288>)
9000f408:	f007 fc1a 	bl	90016c40 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000f40c:	69fb      	ldr	r3, [r7, #28]
9000f40e:	7a1b      	ldrb	r3, [r3, #8]
9000f410:	2b00      	cmp	r3, #0
9000f412:	d033      	beq.n	9000f47c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000f414:	69fb      	ldr	r3, [r7, #28]
9000f416:	7a1a      	ldrb	r2, [r3, #8]
9000f418:	4b09      	ldr	r3, [pc, #36]	; (9000f440 <tcp_input+0x290>)
9000f41a:	685b      	ldr	r3, [r3, #4]
9000f41c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000f420:	3301      	adds	r3, #1
9000f422:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000f424:	429a      	cmp	r2, r3
9000f426:	d029      	beq.n	9000f47c <tcp_input+0x2cc>
      prev = pcb;
9000f428:	69fb      	ldr	r3, [r7, #28]
9000f42a:	61bb      	str	r3, [r7, #24]
      continue;
9000f42c:	e06b      	b.n	9000f506 <tcp_input+0x356>
9000f42e:	bf00      	nop
9000f430:	9001981c 	.word	0x9001981c
9000f434:	90019850 	.word	0x90019850
9000f438:	90019868 	.word	0x90019868
9000f43c:	2000d5f0 	.word	0x2000d5f0
9000f440:	20007cb4 	.word	0x20007cb4
9000f444:	2000d5f4 	.word	0x2000d5f4
9000f448:	2000d5f8 	.word	0x2000d5f8
9000f44c:	2000d5f6 	.word	0x2000d5f6
9000f450:	90019890 	.word	0x90019890
9000f454:	900198a0 	.word	0x900198a0
9000f458:	900198ac 	.word	0x900198ac
9000f45c:	2000d600 	.word	0x2000d600
9000f460:	2000d604 	.word	0x2000d604
9000f464:	2000d60c 	.word	0x2000d60c
9000f468:	2000d60a 	.word	0x2000d60a
9000f46c:	2000d5d4 	.word	0x2000d5d4
9000f470:	900198cc 	.word	0x900198cc
9000f474:	900198f4 	.word	0x900198f4
9000f478:	90019920 	.word	0x90019920
    }

    if (pcb->remote_port == tcphdr->src &&
9000f47c:	69fb      	ldr	r3, [r7, #28]
9000f47e:	8b1a      	ldrh	r2, [r3, #24]
9000f480:	4b72      	ldr	r3, [pc, #456]	; (9000f64c <tcp_input+0x49c>)
9000f482:	681b      	ldr	r3, [r3, #0]
9000f484:	881b      	ldrh	r3, [r3, #0]
9000f486:	b29b      	uxth	r3, r3
9000f488:	429a      	cmp	r2, r3
9000f48a:	d13a      	bne.n	9000f502 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
9000f48c:	69fb      	ldr	r3, [r7, #28]
9000f48e:	8ada      	ldrh	r2, [r3, #22]
9000f490:	4b6e      	ldr	r3, [pc, #440]	; (9000f64c <tcp_input+0x49c>)
9000f492:	681b      	ldr	r3, [r3, #0]
9000f494:	885b      	ldrh	r3, [r3, #2]
9000f496:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
9000f498:	429a      	cmp	r2, r3
9000f49a:	d132      	bne.n	9000f502 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000f49c:	69fb      	ldr	r3, [r7, #28]
9000f49e:	685a      	ldr	r2, [r3, #4]
9000f4a0:	4b6b      	ldr	r3, [pc, #428]	; (9000f650 <tcp_input+0x4a0>)
9000f4a2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
9000f4a4:	429a      	cmp	r2, r3
9000f4a6:	d12c      	bne.n	9000f502 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
9000f4a8:	69fb      	ldr	r3, [r7, #28]
9000f4aa:	681a      	ldr	r2, [r3, #0]
9000f4ac:	4b68      	ldr	r3, [pc, #416]	; (9000f650 <tcp_input+0x4a0>)
9000f4ae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000f4b0:	429a      	cmp	r2, r3
9000f4b2:	d126      	bne.n	9000f502 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
9000f4b4:	69fb      	ldr	r3, [r7, #28]
9000f4b6:	68db      	ldr	r3, [r3, #12]
9000f4b8:	69fa      	ldr	r2, [r7, #28]
9000f4ba:	429a      	cmp	r2, r3
9000f4bc:	d106      	bne.n	9000f4cc <tcp_input+0x31c>
9000f4be:	4b65      	ldr	r3, [pc, #404]	; (9000f654 <tcp_input+0x4a4>)
9000f4c0:	f240 120d 	movw	r2, #269	; 0x10d
9000f4c4:	4964      	ldr	r1, [pc, #400]	; (9000f658 <tcp_input+0x4a8>)
9000f4c6:	4865      	ldr	r0, [pc, #404]	; (9000f65c <tcp_input+0x4ac>)
9000f4c8:	f007 fbba 	bl	90016c40 <iprintf>
      if (prev != NULL) {
9000f4cc:	69bb      	ldr	r3, [r7, #24]
9000f4ce:	2b00      	cmp	r3, #0
9000f4d0:	d00a      	beq.n	9000f4e8 <tcp_input+0x338>
        prev->next = pcb->next;
9000f4d2:	69fb      	ldr	r3, [r7, #28]
9000f4d4:	68da      	ldr	r2, [r3, #12]
9000f4d6:	69bb      	ldr	r3, [r7, #24]
9000f4d8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
9000f4da:	4b61      	ldr	r3, [pc, #388]	; (9000f660 <tcp_input+0x4b0>)
9000f4dc:	681a      	ldr	r2, [r3, #0]
9000f4de:	69fb      	ldr	r3, [r7, #28]
9000f4e0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
9000f4e2:	4a5f      	ldr	r2, [pc, #380]	; (9000f660 <tcp_input+0x4b0>)
9000f4e4:	69fb      	ldr	r3, [r7, #28]
9000f4e6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
9000f4e8:	69fb      	ldr	r3, [r7, #28]
9000f4ea:	68db      	ldr	r3, [r3, #12]
9000f4ec:	69fa      	ldr	r2, [r7, #28]
9000f4ee:	429a      	cmp	r2, r3
9000f4f0:	d111      	bne.n	9000f516 <tcp_input+0x366>
9000f4f2:	4b58      	ldr	r3, [pc, #352]	; (9000f654 <tcp_input+0x4a4>)
9000f4f4:	f240 1215 	movw	r2, #277	; 0x115
9000f4f8:	495a      	ldr	r1, [pc, #360]	; (9000f664 <tcp_input+0x4b4>)
9000f4fa:	4858      	ldr	r0, [pc, #352]	; (9000f65c <tcp_input+0x4ac>)
9000f4fc:	f007 fba0 	bl	90016c40 <iprintf>
      break;
9000f500:	e009      	b.n	9000f516 <tcp_input+0x366>
    }
    prev = pcb;
9000f502:	69fb      	ldr	r3, [r7, #28]
9000f504:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000f506:	69fb      	ldr	r3, [r7, #28]
9000f508:	68db      	ldr	r3, [r3, #12]
9000f50a:	61fb      	str	r3, [r7, #28]
9000f50c:	69fb      	ldr	r3, [r7, #28]
9000f50e:	2b00      	cmp	r3, #0
9000f510:	f47f af5e 	bne.w	9000f3d0 <tcp_input+0x220>
9000f514:	e000      	b.n	9000f518 <tcp_input+0x368>
      break;
9000f516:	bf00      	nop
  }

  if (pcb == NULL) {
9000f518:	69fb      	ldr	r3, [r7, #28]
9000f51a:	2b00      	cmp	r3, #0
9000f51c:	f040 80aa 	bne.w	9000f674 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000f520:	4b51      	ldr	r3, [pc, #324]	; (9000f668 <tcp_input+0x4b8>)
9000f522:	681b      	ldr	r3, [r3, #0]
9000f524:	61fb      	str	r3, [r7, #28]
9000f526:	e03f      	b.n	9000f5a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
9000f528:	69fb      	ldr	r3, [r7, #28]
9000f52a:	7d1b      	ldrb	r3, [r3, #20]
9000f52c:	2b0a      	cmp	r3, #10
9000f52e:	d006      	beq.n	9000f53e <tcp_input+0x38e>
9000f530:	4b48      	ldr	r3, [pc, #288]	; (9000f654 <tcp_input+0x4a4>)
9000f532:	f240 121f 	movw	r2, #287	; 0x11f
9000f536:	494d      	ldr	r1, [pc, #308]	; (9000f66c <tcp_input+0x4bc>)
9000f538:	4848      	ldr	r0, [pc, #288]	; (9000f65c <tcp_input+0x4ac>)
9000f53a:	f007 fb81 	bl	90016c40 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000f53e:	69fb      	ldr	r3, [r7, #28]
9000f540:	7a1b      	ldrb	r3, [r3, #8]
9000f542:	2b00      	cmp	r3, #0
9000f544:	d009      	beq.n	9000f55a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000f546:	69fb      	ldr	r3, [r7, #28]
9000f548:	7a1a      	ldrb	r2, [r3, #8]
9000f54a:	4b41      	ldr	r3, [pc, #260]	; (9000f650 <tcp_input+0x4a0>)
9000f54c:	685b      	ldr	r3, [r3, #4]
9000f54e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000f552:	3301      	adds	r3, #1
9000f554:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000f556:	429a      	cmp	r2, r3
9000f558:	d122      	bne.n	9000f5a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
9000f55a:	69fb      	ldr	r3, [r7, #28]
9000f55c:	8b1a      	ldrh	r2, [r3, #24]
9000f55e:	4b3b      	ldr	r3, [pc, #236]	; (9000f64c <tcp_input+0x49c>)
9000f560:	681b      	ldr	r3, [r3, #0]
9000f562:	881b      	ldrh	r3, [r3, #0]
9000f564:	b29b      	uxth	r3, r3
9000f566:	429a      	cmp	r2, r3
9000f568:	d11b      	bne.n	9000f5a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
9000f56a:	69fb      	ldr	r3, [r7, #28]
9000f56c:	8ada      	ldrh	r2, [r3, #22]
9000f56e:	4b37      	ldr	r3, [pc, #220]	; (9000f64c <tcp_input+0x49c>)
9000f570:	681b      	ldr	r3, [r3, #0]
9000f572:	885b      	ldrh	r3, [r3, #2]
9000f574:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
9000f576:	429a      	cmp	r2, r3
9000f578:	d113      	bne.n	9000f5a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000f57a:	69fb      	ldr	r3, [r7, #28]
9000f57c:	685a      	ldr	r2, [r3, #4]
9000f57e:	4b34      	ldr	r3, [pc, #208]	; (9000f650 <tcp_input+0x4a0>)
9000f580:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
9000f582:	429a      	cmp	r2, r3
9000f584:	d10d      	bne.n	9000f5a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
9000f586:	69fb      	ldr	r3, [r7, #28]
9000f588:	681a      	ldr	r2, [r3, #0]
9000f58a:	4b31      	ldr	r3, [pc, #196]	; (9000f650 <tcp_input+0x4a0>)
9000f58c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000f58e:	429a      	cmp	r2, r3
9000f590:	d107      	bne.n	9000f5a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
9000f592:	69f8      	ldr	r0, [r7, #28]
9000f594:	f000 fb56 	bl	9000fc44 <tcp_timewait_input>
        }
        pbuf_free(p);
9000f598:	6878      	ldr	r0, [r7, #4]
9000f59a:	f7fd fd03 	bl	9000cfa4 <pbuf_free>
        return;
9000f59e:	e1fd      	b.n	9000f99c <tcp_input+0x7ec>
        continue;
9000f5a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000f5a2:	69fb      	ldr	r3, [r7, #28]
9000f5a4:	68db      	ldr	r3, [r3, #12]
9000f5a6:	61fb      	str	r3, [r7, #28]
9000f5a8:	69fb      	ldr	r3, [r7, #28]
9000f5aa:	2b00      	cmp	r3, #0
9000f5ac:	d1bc      	bne.n	9000f528 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
9000f5ae:	2300      	movs	r3, #0
9000f5b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000f5b2:	4b2f      	ldr	r3, [pc, #188]	; (9000f670 <tcp_input+0x4c0>)
9000f5b4:	681b      	ldr	r3, [r3, #0]
9000f5b6:	617b      	str	r3, [r7, #20]
9000f5b8:	e02a      	b.n	9000f610 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
9000f5ba:	697b      	ldr	r3, [r7, #20]
9000f5bc:	7a1b      	ldrb	r3, [r3, #8]
9000f5be:	2b00      	cmp	r3, #0
9000f5c0:	d00c      	beq.n	9000f5dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000f5c2:	697b      	ldr	r3, [r7, #20]
9000f5c4:	7a1a      	ldrb	r2, [r3, #8]
9000f5c6:	4b22      	ldr	r3, [pc, #136]	; (9000f650 <tcp_input+0x4a0>)
9000f5c8:	685b      	ldr	r3, [r3, #4]
9000f5ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000f5ce:	3301      	adds	r3, #1
9000f5d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
9000f5d2:	429a      	cmp	r2, r3
9000f5d4:	d002      	beq.n	9000f5dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
9000f5d6:	697b      	ldr	r3, [r7, #20]
9000f5d8:	61bb      	str	r3, [r7, #24]
        continue;
9000f5da:	e016      	b.n	9000f60a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
9000f5dc:	697b      	ldr	r3, [r7, #20]
9000f5de:	8ada      	ldrh	r2, [r3, #22]
9000f5e0:	4b1a      	ldr	r3, [pc, #104]	; (9000f64c <tcp_input+0x49c>)
9000f5e2:	681b      	ldr	r3, [r3, #0]
9000f5e4:	885b      	ldrh	r3, [r3, #2]
9000f5e6:	b29b      	uxth	r3, r3
9000f5e8:	429a      	cmp	r2, r3
9000f5ea:	d10c      	bne.n	9000f606 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
9000f5ec:	697b      	ldr	r3, [r7, #20]
9000f5ee:	681a      	ldr	r2, [r3, #0]
9000f5f0:	4b17      	ldr	r3, [pc, #92]	; (9000f650 <tcp_input+0x4a0>)
9000f5f2:	695b      	ldr	r3, [r3, #20]
9000f5f4:	429a      	cmp	r2, r3
9000f5f6:	d00f      	beq.n	9000f618 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
9000f5f8:	697b      	ldr	r3, [r7, #20]
9000f5fa:	2b00      	cmp	r3, #0
9000f5fc:	d00d      	beq.n	9000f61a <tcp_input+0x46a>
9000f5fe:	697b      	ldr	r3, [r7, #20]
9000f600:	681b      	ldr	r3, [r3, #0]
9000f602:	2b00      	cmp	r3, #0
9000f604:	d009      	beq.n	9000f61a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
9000f606:	697b      	ldr	r3, [r7, #20]
9000f608:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000f60a:	697b      	ldr	r3, [r7, #20]
9000f60c:	68db      	ldr	r3, [r3, #12]
9000f60e:	617b      	str	r3, [r7, #20]
9000f610:	697b      	ldr	r3, [r7, #20]
9000f612:	2b00      	cmp	r3, #0
9000f614:	d1d1      	bne.n	9000f5ba <tcp_input+0x40a>
9000f616:	e000      	b.n	9000f61a <tcp_input+0x46a>
            break;
9000f618:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
9000f61a:	697b      	ldr	r3, [r7, #20]
9000f61c:	2b00      	cmp	r3, #0
9000f61e:	d029      	beq.n	9000f674 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
9000f620:	69bb      	ldr	r3, [r7, #24]
9000f622:	2b00      	cmp	r3, #0
9000f624:	d00a      	beq.n	9000f63c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
9000f626:	697b      	ldr	r3, [r7, #20]
9000f628:	68da      	ldr	r2, [r3, #12]
9000f62a:	69bb      	ldr	r3, [r7, #24]
9000f62c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
9000f62e:	4b10      	ldr	r3, [pc, #64]	; (9000f670 <tcp_input+0x4c0>)
9000f630:	681a      	ldr	r2, [r3, #0]
9000f632:	697b      	ldr	r3, [r7, #20]
9000f634:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
9000f636:	4a0e      	ldr	r2, [pc, #56]	; (9000f670 <tcp_input+0x4c0>)
9000f638:	697b      	ldr	r3, [r7, #20]
9000f63a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
9000f63c:	6978      	ldr	r0, [r7, #20]
9000f63e:	f000 fa03 	bl	9000fa48 <tcp_listen_input>
      }
      pbuf_free(p);
9000f642:	6878      	ldr	r0, [r7, #4]
9000f644:	f7fd fcae 	bl	9000cfa4 <pbuf_free>
      return;
9000f648:	e1a8      	b.n	9000f99c <tcp_input+0x7ec>
9000f64a:	bf00      	nop
9000f64c:	2000d5f0 	.word	0x2000d5f0
9000f650:	20007cb4 	.word	0x20007cb4
9000f654:	9001981c 	.word	0x9001981c
9000f658:	90019948 	.word	0x90019948
9000f65c:	90019868 	.word	0x90019868
9000f660:	2000d5d4 	.word	0x2000d5d4
9000f664:	90019974 	.word	0x90019974
9000f668:	2000d5d8 	.word	0x2000d5d8
9000f66c:	900199a0 	.word	0x900199a0
9000f670:	2000d5d0 	.word	0x2000d5d0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
9000f674:	69fb      	ldr	r3, [r7, #28]
9000f676:	2b00      	cmp	r3, #0
9000f678:	f000 8158 	beq.w	9000f92c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
9000f67c:	4b95      	ldr	r3, [pc, #596]	; (9000f8d4 <tcp_input+0x724>)
9000f67e:	2200      	movs	r2, #0
9000f680:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
9000f682:	687b      	ldr	r3, [r7, #4]
9000f684:	891a      	ldrh	r2, [r3, #8]
9000f686:	4b93      	ldr	r3, [pc, #588]	; (9000f8d4 <tcp_input+0x724>)
9000f688:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
9000f68a:	4a92      	ldr	r2, [pc, #584]	; (9000f8d4 <tcp_input+0x724>)
9000f68c:	687b      	ldr	r3, [r7, #4]
9000f68e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
9000f690:	4b91      	ldr	r3, [pc, #580]	; (9000f8d8 <tcp_input+0x728>)
9000f692:	681b      	ldr	r3, [r3, #0]
9000f694:	4a8f      	ldr	r2, [pc, #572]	; (9000f8d4 <tcp_input+0x724>)
9000f696:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
9000f698:	4b90      	ldr	r3, [pc, #576]	; (9000f8dc <tcp_input+0x72c>)
9000f69a:	2200      	movs	r2, #0
9000f69c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
9000f69e:	4b90      	ldr	r3, [pc, #576]	; (9000f8e0 <tcp_input+0x730>)
9000f6a0:	2200      	movs	r2, #0
9000f6a2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
9000f6a4:	4b8f      	ldr	r3, [pc, #572]	; (9000f8e4 <tcp_input+0x734>)
9000f6a6:	2200      	movs	r2, #0
9000f6a8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
9000f6aa:	4b8f      	ldr	r3, [pc, #572]	; (9000f8e8 <tcp_input+0x738>)
9000f6ac:	781b      	ldrb	r3, [r3, #0]
9000f6ae:	f003 0308 	and.w	r3, r3, #8
9000f6b2:	2b00      	cmp	r3, #0
9000f6b4:	d006      	beq.n	9000f6c4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
9000f6b6:	687b      	ldr	r3, [r7, #4]
9000f6b8:	7b5b      	ldrb	r3, [r3, #13]
9000f6ba:	f043 0301 	orr.w	r3, r3, #1
9000f6be:	b2da      	uxtb	r2, r3
9000f6c0:	687b      	ldr	r3, [r7, #4]
9000f6c2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
9000f6c4:	69fb      	ldr	r3, [r7, #28]
9000f6c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000f6c8:	2b00      	cmp	r3, #0
9000f6ca:	d017      	beq.n	9000f6fc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
9000f6cc:	69f8      	ldr	r0, [r7, #28]
9000f6ce:	f7ff f85b 	bl	9000e788 <tcp_process_refused_data>
9000f6d2:	4603      	mov	r3, r0
9000f6d4:	f113 0f0d 	cmn.w	r3, #13
9000f6d8:	d007      	beq.n	9000f6ea <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
9000f6da:	69fb      	ldr	r3, [r7, #28]
9000f6dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
9000f6de:	2b00      	cmp	r3, #0
9000f6e0:	d00c      	beq.n	9000f6fc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
9000f6e2:	4b82      	ldr	r3, [pc, #520]	; (9000f8ec <tcp_input+0x73c>)
9000f6e4:	881b      	ldrh	r3, [r3, #0]
9000f6e6:	2b00      	cmp	r3, #0
9000f6e8:	d008      	beq.n	9000f6fc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
9000f6ea:	69fb      	ldr	r3, [r7, #28]
9000f6ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000f6ee:	2b00      	cmp	r3, #0
9000f6f0:	f040 80e3 	bne.w	9000f8ba <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
9000f6f4:	69f8      	ldr	r0, [r7, #28]
9000f6f6:	f003 fe05 	bl	90013304 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
9000f6fa:	e0de      	b.n	9000f8ba <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
9000f6fc:	4a7c      	ldr	r2, [pc, #496]	; (9000f8f0 <tcp_input+0x740>)
9000f6fe:	69fb      	ldr	r3, [r7, #28]
9000f700:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
9000f702:	69f8      	ldr	r0, [r7, #28]
9000f704:	f000 fb18 	bl	9000fd38 <tcp_process>
9000f708:	4603      	mov	r3, r0
9000f70a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
9000f70c:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000f710:	f113 0f0d 	cmn.w	r3, #13
9000f714:	f000 80d3 	beq.w	9000f8be <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
9000f718:	4b71      	ldr	r3, [pc, #452]	; (9000f8e0 <tcp_input+0x730>)
9000f71a:	781b      	ldrb	r3, [r3, #0]
9000f71c:	f003 0308 	and.w	r3, r3, #8
9000f720:	2b00      	cmp	r3, #0
9000f722:	d015      	beq.n	9000f750 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
9000f724:	69fb      	ldr	r3, [r7, #28]
9000f726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000f72a:	2b00      	cmp	r3, #0
9000f72c:	d008      	beq.n	9000f740 <tcp_input+0x590>
9000f72e:	69fb      	ldr	r3, [r7, #28]
9000f730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000f734:	69fa      	ldr	r2, [r7, #28]
9000f736:	6912      	ldr	r2, [r2, #16]
9000f738:	f06f 010d 	mvn.w	r1, #13
9000f73c:	4610      	mov	r0, r2
9000f73e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
9000f740:	69f9      	ldr	r1, [r7, #28]
9000f742:	486c      	ldr	r0, [pc, #432]	; (9000f8f4 <tcp_input+0x744>)
9000f744:	f7ff fbbc 	bl	9000eec0 <tcp_pcb_remove>
        tcp_free(pcb);
9000f748:	69f8      	ldr	r0, [r7, #28]
9000f74a:	f7fd fed7 	bl	9000d4fc <tcp_free>
9000f74e:	e0da      	b.n	9000f906 <tcp_input+0x756>
      } else {
        err = ERR_OK;
9000f750:	2300      	movs	r3, #0
9000f752:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
9000f754:	4b63      	ldr	r3, [pc, #396]	; (9000f8e4 <tcp_input+0x734>)
9000f756:	881b      	ldrh	r3, [r3, #0]
9000f758:	2b00      	cmp	r3, #0
9000f75a:	d01d      	beq.n	9000f798 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
9000f75c:	4b61      	ldr	r3, [pc, #388]	; (9000f8e4 <tcp_input+0x734>)
9000f75e:	881b      	ldrh	r3, [r3, #0]
9000f760:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
9000f762:	69fb      	ldr	r3, [r7, #28]
9000f764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9000f768:	2b00      	cmp	r3, #0
9000f76a:	d00a      	beq.n	9000f782 <tcp_input+0x5d2>
9000f76c:	69fb      	ldr	r3, [r7, #28]
9000f76e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9000f772:	69fa      	ldr	r2, [r7, #28]
9000f774:	6910      	ldr	r0, [r2, #16]
9000f776:	89fa      	ldrh	r2, [r7, #14]
9000f778:	69f9      	ldr	r1, [r7, #28]
9000f77a:	4798      	blx	r3
9000f77c:	4603      	mov	r3, r0
9000f77e:	74fb      	strb	r3, [r7, #19]
9000f780:	e001      	b.n	9000f786 <tcp_input+0x5d6>
9000f782:	2300      	movs	r3, #0
9000f784:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
9000f786:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000f78a:	f113 0f0d 	cmn.w	r3, #13
9000f78e:	f000 8098 	beq.w	9000f8c2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
9000f792:	4b54      	ldr	r3, [pc, #336]	; (9000f8e4 <tcp_input+0x734>)
9000f794:	2200      	movs	r2, #0
9000f796:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
9000f798:	69f8      	ldr	r0, [r7, #28]
9000f79a:	f000 f915 	bl	9000f9c8 <tcp_input_delayed_close>
9000f79e:	4603      	mov	r3, r0
9000f7a0:	2b00      	cmp	r3, #0
9000f7a2:	f040 8090 	bne.w	9000f8c6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
9000f7a6:	4b4d      	ldr	r3, [pc, #308]	; (9000f8dc <tcp_input+0x72c>)
9000f7a8:	681b      	ldr	r3, [r3, #0]
9000f7aa:	2b00      	cmp	r3, #0
9000f7ac:	d041      	beq.n	9000f832 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
9000f7ae:	69fb      	ldr	r3, [r7, #28]
9000f7b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000f7b2:	2b00      	cmp	r3, #0
9000f7b4:	d006      	beq.n	9000f7c4 <tcp_input+0x614>
9000f7b6:	4b50      	ldr	r3, [pc, #320]	; (9000f8f8 <tcp_input+0x748>)
9000f7b8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
9000f7bc:	494f      	ldr	r1, [pc, #316]	; (9000f8fc <tcp_input+0x74c>)
9000f7be:	4850      	ldr	r0, [pc, #320]	; (9000f900 <tcp_input+0x750>)
9000f7c0:	f007 fa3e 	bl	90016c40 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
9000f7c4:	69fb      	ldr	r3, [r7, #28]
9000f7c6:	8b5b      	ldrh	r3, [r3, #26]
9000f7c8:	f003 0310 	and.w	r3, r3, #16
9000f7cc:	2b00      	cmp	r3, #0
9000f7ce:	d008      	beq.n	9000f7e2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
9000f7d0:	4b42      	ldr	r3, [pc, #264]	; (9000f8dc <tcp_input+0x72c>)
9000f7d2:	681b      	ldr	r3, [r3, #0]
9000f7d4:	4618      	mov	r0, r3
9000f7d6:	f7fd fbe5 	bl	9000cfa4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
9000f7da:	69f8      	ldr	r0, [r7, #28]
9000f7dc:	f7fe f9d2 	bl	9000db84 <tcp_abort>
            goto aborted;
9000f7e0:	e091      	b.n	9000f906 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
9000f7e2:	69fb      	ldr	r3, [r7, #28]
9000f7e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000f7e8:	2b00      	cmp	r3, #0
9000f7ea:	d00c      	beq.n	9000f806 <tcp_input+0x656>
9000f7ec:	69fb      	ldr	r3, [r7, #28]
9000f7ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000f7f2:	69fb      	ldr	r3, [r7, #28]
9000f7f4:	6918      	ldr	r0, [r3, #16]
9000f7f6:	4b39      	ldr	r3, [pc, #228]	; (9000f8dc <tcp_input+0x72c>)
9000f7f8:	681a      	ldr	r2, [r3, #0]
9000f7fa:	2300      	movs	r3, #0
9000f7fc:	69f9      	ldr	r1, [r7, #28]
9000f7fe:	47a0      	blx	r4
9000f800:	4603      	mov	r3, r0
9000f802:	74fb      	strb	r3, [r7, #19]
9000f804:	e008      	b.n	9000f818 <tcp_input+0x668>
9000f806:	4b35      	ldr	r3, [pc, #212]	; (9000f8dc <tcp_input+0x72c>)
9000f808:	681a      	ldr	r2, [r3, #0]
9000f80a:	2300      	movs	r3, #0
9000f80c:	69f9      	ldr	r1, [r7, #28]
9000f80e:	2000      	movs	r0, #0
9000f810:	f7ff f890 	bl	9000e934 <tcp_recv_null>
9000f814:	4603      	mov	r3, r0
9000f816:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
9000f818:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000f81c:	f113 0f0d 	cmn.w	r3, #13
9000f820:	d053      	beq.n	9000f8ca <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
9000f822:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000f826:	2b00      	cmp	r3, #0
9000f828:	d003      	beq.n	9000f832 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
9000f82a:	4b2c      	ldr	r3, [pc, #176]	; (9000f8dc <tcp_input+0x72c>)
9000f82c:	681a      	ldr	r2, [r3, #0]
9000f82e:	69fb      	ldr	r3, [r7, #28]
9000f830:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
9000f832:	4b2b      	ldr	r3, [pc, #172]	; (9000f8e0 <tcp_input+0x730>)
9000f834:	781b      	ldrb	r3, [r3, #0]
9000f836:	f003 0320 	and.w	r3, r3, #32
9000f83a:	2b00      	cmp	r3, #0
9000f83c:	d030      	beq.n	9000f8a0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
9000f83e:	69fb      	ldr	r3, [r7, #28]
9000f840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000f842:	2b00      	cmp	r3, #0
9000f844:	d009      	beq.n	9000f85a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
9000f846:	69fb      	ldr	r3, [r7, #28]
9000f848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000f84a:	7b5a      	ldrb	r2, [r3, #13]
9000f84c:	69fb      	ldr	r3, [r7, #28]
9000f84e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000f850:	f042 0220 	orr.w	r2, r2, #32
9000f854:	b2d2      	uxtb	r2, r2
9000f856:	735a      	strb	r2, [r3, #13]
9000f858:	e022      	b.n	9000f8a0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
9000f85a:	69fb      	ldr	r3, [r7, #28]
9000f85c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000f85e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000f862:	d005      	beq.n	9000f870 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
9000f864:	69fb      	ldr	r3, [r7, #28]
9000f866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000f868:	3301      	adds	r3, #1
9000f86a:	b29a      	uxth	r2, r3
9000f86c:	69fb      	ldr	r3, [r7, #28]
9000f86e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
9000f870:	69fb      	ldr	r3, [r7, #28]
9000f872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000f876:	2b00      	cmp	r3, #0
9000f878:	d00b      	beq.n	9000f892 <tcp_input+0x6e2>
9000f87a:	69fb      	ldr	r3, [r7, #28]
9000f87c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000f880:	69fb      	ldr	r3, [r7, #28]
9000f882:	6918      	ldr	r0, [r3, #16]
9000f884:	2300      	movs	r3, #0
9000f886:	2200      	movs	r2, #0
9000f888:	69f9      	ldr	r1, [r7, #28]
9000f88a:	47a0      	blx	r4
9000f88c:	4603      	mov	r3, r0
9000f88e:	74fb      	strb	r3, [r7, #19]
9000f890:	e001      	b.n	9000f896 <tcp_input+0x6e6>
9000f892:	2300      	movs	r3, #0
9000f894:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
9000f896:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000f89a:	f113 0f0d 	cmn.w	r3, #13
9000f89e:	d016      	beq.n	9000f8ce <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
9000f8a0:	4b13      	ldr	r3, [pc, #76]	; (9000f8f0 <tcp_input+0x740>)
9000f8a2:	2200      	movs	r2, #0
9000f8a4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
9000f8a6:	69f8      	ldr	r0, [r7, #28]
9000f8a8:	f000 f88e 	bl	9000f9c8 <tcp_input_delayed_close>
9000f8ac:	4603      	mov	r3, r0
9000f8ae:	2b00      	cmp	r3, #0
9000f8b0:	d128      	bne.n	9000f904 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
9000f8b2:	69f8      	ldr	r0, [r7, #28]
9000f8b4:	f002 ff20 	bl	900126f8 <tcp_output>
9000f8b8:	e025      	b.n	9000f906 <tcp_input+0x756>
        goto aborted;
9000f8ba:	bf00      	nop
9000f8bc:	e023      	b.n	9000f906 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
9000f8be:	bf00      	nop
9000f8c0:	e021      	b.n	9000f906 <tcp_input+0x756>
              goto aborted;
9000f8c2:	bf00      	nop
9000f8c4:	e01f      	b.n	9000f906 <tcp_input+0x756>
          goto aborted;
9000f8c6:	bf00      	nop
9000f8c8:	e01d      	b.n	9000f906 <tcp_input+0x756>
            goto aborted;
9000f8ca:	bf00      	nop
9000f8cc:	e01b      	b.n	9000f906 <tcp_input+0x756>
              goto aborted;
9000f8ce:	bf00      	nop
9000f8d0:	e019      	b.n	9000f906 <tcp_input+0x756>
9000f8d2:	bf00      	nop
9000f8d4:	2000d5e0 	.word	0x2000d5e0
9000f8d8:	2000d5f0 	.word	0x2000d5f0
9000f8dc:	2000d610 	.word	0x2000d610
9000f8e0:	2000d60d 	.word	0x2000d60d
9000f8e4:	2000d608 	.word	0x2000d608
9000f8e8:	2000d60c 	.word	0x2000d60c
9000f8ec:	2000d60a 	.word	0x2000d60a
9000f8f0:	2000d614 	.word	0x2000d614
9000f8f4:	2000d5d4 	.word	0x2000d5d4
9000f8f8:	9001981c 	.word	0x9001981c
9000f8fc:	900199d0 	.word	0x900199d0
9000f900:	90019868 	.word	0x90019868
          goto aborted;
9000f904:	bf00      	nop
    tcp_input_pcb = NULL;
9000f906:	4b27      	ldr	r3, [pc, #156]	; (9000f9a4 <tcp_input+0x7f4>)
9000f908:	2200      	movs	r2, #0
9000f90a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
9000f90c:	4b26      	ldr	r3, [pc, #152]	; (9000f9a8 <tcp_input+0x7f8>)
9000f90e:	2200      	movs	r2, #0
9000f910:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
9000f912:	4b26      	ldr	r3, [pc, #152]	; (9000f9ac <tcp_input+0x7fc>)
9000f914:	685b      	ldr	r3, [r3, #4]
9000f916:	2b00      	cmp	r3, #0
9000f918:	d03f      	beq.n	9000f99a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
9000f91a:	4b24      	ldr	r3, [pc, #144]	; (9000f9ac <tcp_input+0x7fc>)
9000f91c:	685b      	ldr	r3, [r3, #4]
9000f91e:	4618      	mov	r0, r3
9000f920:	f7fd fb40 	bl	9000cfa4 <pbuf_free>
      inseg.p = NULL;
9000f924:	4b21      	ldr	r3, [pc, #132]	; (9000f9ac <tcp_input+0x7fc>)
9000f926:	2200      	movs	r2, #0
9000f928:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
9000f92a:	e036      	b.n	9000f99a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
9000f92c:	4b20      	ldr	r3, [pc, #128]	; (9000f9b0 <tcp_input+0x800>)
9000f92e:	681b      	ldr	r3, [r3, #0]
9000f930:	899b      	ldrh	r3, [r3, #12]
9000f932:	b29b      	uxth	r3, r3
9000f934:	4618      	mov	r0, r3
9000f936:	f7fb ff89 	bl	9000b84c <lwip_htons>
9000f93a:	4603      	mov	r3, r0
9000f93c:	b2db      	uxtb	r3, r3
9000f93e:	f003 0304 	and.w	r3, r3, #4
9000f942:	2b00      	cmp	r3, #0
9000f944:	d118      	bne.n	9000f978 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f946:	4b1b      	ldr	r3, [pc, #108]	; (9000f9b4 <tcp_input+0x804>)
9000f948:	6819      	ldr	r1, [r3, #0]
9000f94a:	4b1b      	ldr	r3, [pc, #108]	; (9000f9b8 <tcp_input+0x808>)
9000f94c:	881b      	ldrh	r3, [r3, #0]
9000f94e:	461a      	mov	r2, r3
9000f950:	4b1a      	ldr	r3, [pc, #104]	; (9000f9bc <tcp_input+0x80c>)
9000f952:	681b      	ldr	r3, [r3, #0]
9000f954:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000f956:	4b16      	ldr	r3, [pc, #88]	; (9000f9b0 <tcp_input+0x800>)
9000f958:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f95a:	885b      	ldrh	r3, [r3, #2]
9000f95c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000f95e:	4a14      	ldr	r2, [pc, #80]	; (9000f9b0 <tcp_input+0x800>)
9000f960:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f962:	8812      	ldrh	r2, [r2, #0]
9000f964:	b292      	uxth	r2, r2
9000f966:	9202      	str	r2, [sp, #8]
9000f968:	9301      	str	r3, [sp, #4]
9000f96a:	4b15      	ldr	r3, [pc, #84]	; (9000f9c0 <tcp_input+0x810>)
9000f96c:	9300      	str	r3, [sp, #0]
9000f96e:	4b15      	ldr	r3, [pc, #84]	; (9000f9c4 <tcp_input+0x814>)
9000f970:	4602      	mov	r2, r0
9000f972:	2000      	movs	r0, #0
9000f974:	f003 fc74 	bl	90013260 <tcp_rst>
    pbuf_free(p);
9000f978:	6878      	ldr	r0, [r7, #4]
9000f97a:	f7fd fb13 	bl	9000cfa4 <pbuf_free>
  return;
9000f97e:	e00c      	b.n	9000f99a <tcp_input+0x7ea>
    goto dropped;
9000f980:	bf00      	nop
9000f982:	e006      	b.n	9000f992 <tcp_input+0x7e2>
    goto dropped;
9000f984:	bf00      	nop
9000f986:	e004      	b.n	9000f992 <tcp_input+0x7e2>
    goto dropped;
9000f988:	bf00      	nop
9000f98a:	e002      	b.n	9000f992 <tcp_input+0x7e2>
      goto dropped;
9000f98c:	bf00      	nop
9000f98e:	e000      	b.n	9000f992 <tcp_input+0x7e2>
      goto dropped;
9000f990:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
9000f992:	6878      	ldr	r0, [r7, #4]
9000f994:	f7fd fb06 	bl	9000cfa4 <pbuf_free>
9000f998:	e000      	b.n	9000f99c <tcp_input+0x7ec>
  return;
9000f99a:	bf00      	nop
}
9000f99c:	3724      	adds	r7, #36	; 0x24
9000f99e:	46bd      	mov	sp, r7
9000f9a0:	bd90      	pop	{r4, r7, pc}
9000f9a2:	bf00      	nop
9000f9a4:	2000d614 	.word	0x2000d614
9000f9a8:	2000d610 	.word	0x2000d610
9000f9ac:	2000d5e0 	.word	0x2000d5e0
9000f9b0:	2000d5f0 	.word	0x2000d5f0
9000f9b4:	2000d604 	.word	0x2000d604
9000f9b8:	2000d60a 	.word	0x2000d60a
9000f9bc:	2000d600 	.word	0x2000d600
9000f9c0:	20007cc4 	.word	0x20007cc4
9000f9c4:	20007cc8 	.word	0x20007cc8

9000f9c8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
9000f9c8:	b580      	push	{r7, lr}
9000f9ca:	b082      	sub	sp, #8
9000f9cc:	af00      	add	r7, sp, #0
9000f9ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
9000f9d0:	687b      	ldr	r3, [r7, #4]
9000f9d2:	2b00      	cmp	r3, #0
9000f9d4:	d106      	bne.n	9000f9e4 <tcp_input_delayed_close+0x1c>
9000f9d6:	4b17      	ldr	r3, [pc, #92]	; (9000fa34 <tcp_input_delayed_close+0x6c>)
9000f9d8:	f240 225a 	movw	r2, #602	; 0x25a
9000f9dc:	4916      	ldr	r1, [pc, #88]	; (9000fa38 <tcp_input_delayed_close+0x70>)
9000f9de:	4817      	ldr	r0, [pc, #92]	; (9000fa3c <tcp_input_delayed_close+0x74>)
9000f9e0:	f007 f92e 	bl	90016c40 <iprintf>

  if (recv_flags & TF_CLOSED) {
9000f9e4:	4b16      	ldr	r3, [pc, #88]	; (9000fa40 <tcp_input_delayed_close+0x78>)
9000f9e6:	781b      	ldrb	r3, [r3, #0]
9000f9e8:	f003 0310 	and.w	r3, r3, #16
9000f9ec:	2b00      	cmp	r3, #0
9000f9ee:	d01c      	beq.n	9000fa2a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
9000f9f0:	687b      	ldr	r3, [r7, #4]
9000f9f2:	8b5b      	ldrh	r3, [r3, #26]
9000f9f4:	f003 0310 	and.w	r3, r3, #16
9000f9f8:	2b00      	cmp	r3, #0
9000f9fa:	d10d      	bne.n	9000fa18 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
9000f9fc:	687b      	ldr	r3, [r7, #4]
9000f9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000fa02:	2b00      	cmp	r3, #0
9000fa04:	d008      	beq.n	9000fa18 <tcp_input_delayed_close+0x50>
9000fa06:	687b      	ldr	r3, [r7, #4]
9000fa08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000fa0c:	687a      	ldr	r2, [r7, #4]
9000fa0e:	6912      	ldr	r2, [r2, #16]
9000fa10:	f06f 010e 	mvn.w	r1, #14
9000fa14:	4610      	mov	r0, r2
9000fa16:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
9000fa18:	6879      	ldr	r1, [r7, #4]
9000fa1a:	480a      	ldr	r0, [pc, #40]	; (9000fa44 <tcp_input_delayed_close+0x7c>)
9000fa1c:	f7ff fa50 	bl	9000eec0 <tcp_pcb_remove>
    tcp_free(pcb);
9000fa20:	6878      	ldr	r0, [r7, #4]
9000fa22:	f7fd fd6b 	bl	9000d4fc <tcp_free>
    return 1;
9000fa26:	2301      	movs	r3, #1
9000fa28:	e000      	b.n	9000fa2c <tcp_input_delayed_close+0x64>
  }
  return 0;
9000fa2a:	2300      	movs	r3, #0
}
9000fa2c:	4618      	mov	r0, r3
9000fa2e:	3708      	adds	r7, #8
9000fa30:	46bd      	mov	sp, r7
9000fa32:	bd80      	pop	{r7, pc}
9000fa34:	9001981c 	.word	0x9001981c
9000fa38:	900199ec 	.word	0x900199ec
9000fa3c:	90019868 	.word	0x90019868
9000fa40:	2000d60d 	.word	0x2000d60d
9000fa44:	2000d5d4 	.word	0x2000d5d4

9000fa48 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
9000fa48:	b590      	push	{r4, r7, lr}
9000fa4a:	b08b      	sub	sp, #44	; 0x2c
9000fa4c:	af04      	add	r7, sp, #16
9000fa4e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
9000fa50:	4b6f      	ldr	r3, [pc, #444]	; (9000fc10 <tcp_listen_input+0x1c8>)
9000fa52:	781b      	ldrb	r3, [r3, #0]
9000fa54:	f003 0304 	and.w	r3, r3, #4
9000fa58:	2b00      	cmp	r3, #0
9000fa5a:	f040 80d2 	bne.w	9000fc02 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
9000fa5e:	687b      	ldr	r3, [r7, #4]
9000fa60:	2b00      	cmp	r3, #0
9000fa62:	d106      	bne.n	9000fa72 <tcp_listen_input+0x2a>
9000fa64:	4b6b      	ldr	r3, [pc, #428]	; (9000fc14 <tcp_listen_input+0x1cc>)
9000fa66:	f240 2281 	movw	r2, #641	; 0x281
9000fa6a:	496b      	ldr	r1, [pc, #428]	; (9000fc18 <tcp_listen_input+0x1d0>)
9000fa6c:	486b      	ldr	r0, [pc, #428]	; (9000fc1c <tcp_listen_input+0x1d4>)
9000fa6e:	f007 f8e7 	bl	90016c40 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
9000fa72:	4b67      	ldr	r3, [pc, #412]	; (9000fc10 <tcp_listen_input+0x1c8>)
9000fa74:	781b      	ldrb	r3, [r3, #0]
9000fa76:	f003 0310 	and.w	r3, r3, #16
9000fa7a:	2b00      	cmp	r3, #0
9000fa7c:	d019      	beq.n	9000fab2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000fa7e:	4b68      	ldr	r3, [pc, #416]	; (9000fc20 <tcp_listen_input+0x1d8>)
9000fa80:	6819      	ldr	r1, [r3, #0]
9000fa82:	4b68      	ldr	r3, [pc, #416]	; (9000fc24 <tcp_listen_input+0x1dc>)
9000fa84:	881b      	ldrh	r3, [r3, #0]
9000fa86:	461a      	mov	r2, r3
9000fa88:	4b67      	ldr	r3, [pc, #412]	; (9000fc28 <tcp_listen_input+0x1e0>)
9000fa8a:	681b      	ldr	r3, [r3, #0]
9000fa8c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000fa8e:	4b67      	ldr	r3, [pc, #412]	; (9000fc2c <tcp_listen_input+0x1e4>)
9000fa90:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000fa92:	885b      	ldrh	r3, [r3, #2]
9000fa94:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000fa96:	4a65      	ldr	r2, [pc, #404]	; (9000fc2c <tcp_listen_input+0x1e4>)
9000fa98:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000fa9a:	8812      	ldrh	r2, [r2, #0]
9000fa9c:	b292      	uxth	r2, r2
9000fa9e:	9202      	str	r2, [sp, #8]
9000faa0:	9301      	str	r3, [sp, #4]
9000faa2:	4b63      	ldr	r3, [pc, #396]	; (9000fc30 <tcp_listen_input+0x1e8>)
9000faa4:	9300      	str	r3, [sp, #0]
9000faa6:	4b63      	ldr	r3, [pc, #396]	; (9000fc34 <tcp_listen_input+0x1ec>)
9000faa8:	4602      	mov	r2, r0
9000faaa:	6878      	ldr	r0, [r7, #4]
9000faac:	f003 fbd8 	bl	90013260 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
9000fab0:	e0a9      	b.n	9000fc06 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
9000fab2:	4b57      	ldr	r3, [pc, #348]	; (9000fc10 <tcp_listen_input+0x1c8>)
9000fab4:	781b      	ldrb	r3, [r3, #0]
9000fab6:	f003 0302 	and.w	r3, r3, #2
9000faba:	2b00      	cmp	r3, #0
9000fabc:	f000 80a3 	beq.w	9000fc06 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
9000fac0:	687b      	ldr	r3, [r7, #4]
9000fac2:	7d5b      	ldrb	r3, [r3, #21]
9000fac4:	4618      	mov	r0, r3
9000fac6:	f7ff f859 	bl	9000eb7c <tcp_alloc>
9000faca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
9000facc:	697b      	ldr	r3, [r7, #20]
9000face:	2b00      	cmp	r3, #0
9000fad0:	d111      	bne.n	9000faf6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
9000fad2:	687b      	ldr	r3, [r7, #4]
9000fad4:	699b      	ldr	r3, [r3, #24]
9000fad6:	2b00      	cmp	r3, #0
9000fad8:	d00a      	beq.n	9000faf0 <tcp_listen_input+0xa8>
9000fada:	687b      	ldr	r3, [r7, #4]
9000fadc:	699b      	ldr	r3, [r3, #24]
9000fade:	687a      	ldr	r2, [r7, #4]
9000fae0:	6910      	ldr	r0, [r2, #16]
9000fae2:	f04f 32ff 	mov.w	r2, #4294967295
9000fae6:	2100      	movs	r1, #0
9000fae8:	4798      	blx	r3
9000faea:	4603      	mov	r3, r0
9000faec:	73bb      	strb	r3, [r7, #14]
      return;
9000faee:	e08b      	b.n	9000fc08 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
9000faf0:	23f0      	movs	r3, #240	; 0xf0
9000faf2:	73bb      	strb	r3, [r7, #14]
      return;
9000faf4:	e088      	b.n	9000fc08 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
9000faf6:	4b50      	ldr	r3, [pc, #320]	; (9000fc38 <tcp_listen_input+0x1f0>)
9000faf8:	695a      	ldr	r2, [r3, #20]
9000fafa:	697b      	ldr	r3, [r7, #20]
9000fafc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
9000fafe:	4b4e      	ldr	r3, [pc, #312]	; (9000fc38 <tcp_listen_input+0x1f0>)
9000fb00:	691a      	ldr	r2, [r3, #16]
9000fb02:	697b      	ldr	r3, [r7, #20]
9000fb04:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
9000fb06:	687b      	ldr	r3, [r7, #4]
9000fb08:	8ada      	ldrh	r2, [r3, #22]
9000fb0a:	697b      	ldr	r3, [r7, #20]
9000fb0c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
9000fb0e:	4b47      	ldr	r3, [pc, #284]	; (9000fc2c <tcp_listen_input+0x1e4>)
9000fb10:	681b      	ldr	r3, [r3, #0]
9000fb12:	881b      	ldrh	r3, [r3, #0]
9000fb14:	b29a      	uxth	r2, r3
9000fb16:	697b      	ldr	r3, [r7, #20]
9000fb18:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
9000fb1a:	697b      	ldr	r3, [r7, #20]
9000fb1c:	2203      	movs	r2, #3
9000fb1e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
9000fb20:	4b41      	ldr	r3, [pc, #260]	; (9000fc28 <tcp_listen_input+0x1e0>)
9000fb22:	681b      	ldr	r3, [r3, #0]
9000fb24:	1c5a      	adds	r2, r3, #1
9000fb26:	697b      	ldr	r3, [r7, #20]
9000fb28:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
9000fb2a:	697b      	ldr	r3, [r7, #20]
9000fb2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000fb2e:	697b      	ldr	r3, [r7, #20]
9000fb30:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
9000fb32:	6978      	ldr	r0, [r7, #20]
9000fb34:	f7ff fa58 	bl	9000efe8 <tcp_next_iss>
9000fb38:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
9000fb3a:	697b      	ldr	r3, [r7, #20]
9000fb3c:	693a      	ldr	r2, [r7, #16]
9000fb3e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
9000fb40:	697b      	ldr	r3, [r7, #20]
9000fb42:	693a      	ldr	r2, [r7, #16]
9000fb44:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
9000fb46:	697b      	ldr	r3, [r7, #20]
9000fb48:	693a      	ldr	r2, [r7, #16]
9000fb4a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
9000fb4c:	697b      	ldr	r3, [r7, #20]
9000fb4e:	693a      	ldr	r2, [r7, #16]
9000fb50:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
9000fb52:	4b35      	ldr	r3, [pc, #212]	; (9000fc28 <tcp_listen_input+0x1e0>)
9000fb54:	681b      	ldr	r3, [r3, #0]
9000fb56:	1e5a      	subs	r2, r3, #1
9000fb58:	697b      	ldr	r3, [r7, #20]
9000fb5a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
9000fb5c:	687b      	ldr	r3, [r7, #4]
9000fb5e:	691a      	ldr	r2, [r3, #16]
9000fb60:	697b      	ldr	r3, [r7, #20]
9000fb62:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
9000fb64:	697b      	ldr	r3, [r7, #20]
9000fb66:	687a      	ldr	r2, [r7, #4]
9000fb68:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
9000fb6a:	687b      	ldr	r3, [r7, #4]
9000fb6c:	7a5b      	ldrb	r3, [r3, #9]
9000fb6e:	f003 030c 	and.w	r3, r3, #12
9000fb72:	b2da      	uxtb	r2, r3
9000fb74:	697b      	ldr	r3, [r7, #20]
9000fb76:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
9000fb78:	687b      	ldr	r3, [r7, #4]
9000fb7a:	7a1a      	ldrb	r2, [r3, #8]
9000fb7c:	697b      	ldr	r3, [r7, #20]
9000fb7e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
9000fb80:	4b2e      	ldr	r3, [pc, #184]	; (9000fc3c <tcp_listen_input+0x1f4>)
9000fb82:	681a      	ldr	r2, [r3, #0]
9000fb84:	697b      	ldr	r3, [r7, #20]
9000fb86:	60da      	str	r2, [r3, #12]
9000fb88:	4a2c      	ldr	r2, [pc, #176]	; (9000fc3c <tcp_listen_input+0x1f4>)
9000fb8a:	697b      	ldr	r3, [r7, #20]
9000fb8c:	6013      	str	r3, [r2, #0]
9000fb8e:	f003 fd29 	bl	900135e4 <tcp_timer_needed>
9000fb92:	4b2b      	ldr	r3, [pc, #172]	; (9000fc40 <tcp_listen_input+0x1f8>)
9000fb94:	2201      	movs	r2, #1
9000fb96:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
9000fb98:	6978      	ldr	r0, [r7, #20]
9000fb9a:	f001 fd8f 	bl	900116bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
9000fb9e:	4b23      	ldr	r3, [pc, #140]	; (9000fc2c <tcp_listen_input+0x1e4>)
9000fba0:	681b      	ldr	r3, [r3, #0]
9000fba2:	89db      	ldrh	r3, [r3, #14]
9000fba4:	b29a      	uxth	r2, r3
9000fba6:	697b      	ldr	r3, [r7, #20]
9000fba8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
9000fbac:	697b      	ldr	r3, [r7, #20]
9000fbae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000fbb2:	697b      	ldr	r3, [r7, #20]
9000fbb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
9000fbb8:	697b      	ldr	r3, [r7, #20]
9000fbba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
9000fbbc:	697b      	ldr	r3, [r7, #20]
9000fbbe:	3304      	adds	r3, #4
9000fbc0:	4618      	mov	r0, r3
9000fbc2:	f005 fa63 	bl	9001508c <ip4_route>
9000fbc6:	4601      	mov	r1, r0
9000fbc8:	697b      	ldr	r3, [r7, #20]
9000fbca:	3304      	adds	r3, #4
9000fbcc:	461a      	mov	r2, r3
9000fbce:	4620      	mov	r0, r4
9000fbd0:	f7ff fa30 	bl	9000f034 <tcp_eff_send_mss_netif>
9000fbd4:	4603      	mov	r3, r0
9000fbd6:	461a      	mov	r2, r3
9000fbd8:	697b      	ldr	r3, [r7, #20]
9000fbda:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
9000fbdc:	2112      	movs	r1, #18
9000fbde:	6978      	ldr	r0, [r7, #20]
9000fbe0:	f002 fc9c 	bl	9001251c <tcp_enqueue_flags>
9000fbe4:	4603      	mov	r3, r0
9000fbe6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
9000fbe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000fbec:	2b00      	cmp	r3, #0
9000fbee:	d004      	beq.n	9000fbfa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
9000fbf0:	2100      	movs	r1, #0
9000fbf2:	6978      	ldr	r0, [r7, #20]
9000fbf4:	f7fd ff08 	bl	9000da08 <tcp_abandon>
      return;
9000fbf8:	e006      	b.n	9000fc08 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
9000fbfa:	6978      	ldr	r0, [r7, #20]
9000fbfc:	f002 fd7c 	bl	900126f8 <tcp_output>
  return;
9000fc00:	e001      	b.n	9000fc06 <tcp_listen_input+0x1be>
    return;
9000fc02:	bf00      	nop
9000fc04:	e000      	b.n	9000fc08 <tcp_listen_input+0x1c0>
  return;
9000fc06:	bf00      	nop
}
9000fc08:	371c      	adds	r7, #28
9000fc0a:	46bd      	mov	sp, r7
9000fc0c:	bd90      	pop	{r4, r7, pc}
9000fc0e:	bf00      	nop
9000fc10:	2000d60c 	.word	0x2000d60c
9000fc14:	9001981c 	.word	0x9001981c
9000fc18:	90019a14 	.word	0x90019a14
9000fc1c:	90019868 	.word	0x90019868
9000fc20:	2000d604 	.word	0x2000d604
9000fc24:	2000d60a 	.word	0x2000d60a
9000fc28:	2000d600 	.word	0x2000d600
9000fc2c:	2000d5f0 	.word	0x2000d5f0
9000fc30:	20007cc4 	.word	0x20007cc4
9000fc34:	20007cc8 	.word	0x20007cc8
9000fc38:	20007cb4 	.word	0x20007cb4
9000fc3c:	2000d5d4 	.word	0x2000d5d4
9000fc40:	2000d5dc 	.word	0x2000d5dc

9000fc44 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
9000fc44:	b580      	push	{r7, lr}
9000fc46:	b086      	sub	sp, #24
9000fc48:	af04      	add	r7, sp, #16
9000fc4a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
9000fc4c:	4b2f      	ldr	r3, [pc, #188]	; (9000fd0c <tcp_timewait_input+0xc8>)
9000fc4e:	781b      	ldrb	r3, [r3, #0]
9000fc50:	f003 0304 	and.w	r3, r3, #4
9000fc54:	2b00      	cmp	r3, #0
9000fc56:	d153      	bne.n	9000fd00 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
9000fc58:	687b      	ldr	r3, [r7, #4]
9000fc5a:	2b00      	cmp	r3, #0
9000fc5c:	d106      	bne.n	9000fc6c <tcp_timewait_input+0x28>
9000fc5e:	4b2c      	ldr	r3, [pc, #176]	; (9000fd10 <tcp_timewait_input+0xcc>)
9000fc60:	f240 22ee 	movw	r2, #750	; 0x2ee
9000fc64:	492b      	ldr	r1, [pc, #172]	; (9000fd14 <tcp_timewait_input+0xd0>)
9000fc66:	482c      	ldr	r0, [pc, #176]	; (9000fd18 <tcp_timewait_input+0xd4>)
9000fc68:	f006 ffea 	bl	90016c40 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
9000fc6c:	4b27      	ldr	r3, [pc, #156]	; (9000fd0c <tcp_timewait_input+0xc8>)
9000fc6e:	781b      	ldrb	r3, [r3, #0]
9000fc70:	f003 0302 	and.w	r3, r3, #2
9000fc74:	2b00      	cmp	r3, #0
9000fc76:	d02a      	beq.n	9000fcce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
9000fc78:	4b28      	ldr	r3, [pc, #160]	; (9000fd1c <tcp_timewait_input+0xd8>)
9000fc7a:	681a      	ldr	r2, [r3, #0]
9000fc7c:	687b      	ldr	r3, [r7, #4]
9000fc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000fc80:	1ad3      	subs	r3, r2, r3
9000fc82:	2b00      	cmp	r3, #0
9000fc84:	db2d      	blt.n	9000fce2 <tcp_timewait_input+0x9e>
9000fc86:	4b25      	ldr	r3, [pc, #148]	; (9000fd1c <tcp_timewait_input+0xd8>)
9000fc88:	681a      	ldr	r2, [r3, #0]
9000fc8a:	687b      	ldr	r3, [r7, #4]
9000fc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000fc8e:	6879      	ldr	r1, [r7, #4]
9000fc90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000fc92:	440b      	add	r3, r1
9000fc94:	1ad3      	subs	r3, r2, r3
9000fc96:	2b00      	cmp	r3, #0
9000fc98:	dc23      	bgt.n	9000fce2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000fc9a:	4b21      	ldr	r3, [pc, #132]	; (9000fd20 <tcp_timewait_input+0xdc>)
9000fc9c:	6819      	ldr	r1, [r3, #0]
9000fc9e:	4b21      	ldr	r3, [pc, #132]	; (9000fd24 <tcp_timewait_input+0xe0>)
9000fca0:	881b      	ldrh	r3, [r3, #0]
9000fca2:	461a      	mov	r2, r3
9000fca4:	4b1d      	ldr	r3, [pc, #116]	; (9000fd1c <tcp_timewait_input+0xd8>)
9000fca6:	681b      	ldr	r3, [r3, #0]
9000fca8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000fcaa:	4b1f      	ldr	r3, [pc, #124]	; (9000fd28 <tcp_timewait_input+0xe4>)
9000fcac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000fcae:	885b      	ldrh	r3, [r3, #2]
9000fcb0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000fcb2:	4a1d      	ldr	r2, [pc, #116]	; (9000fd28 <tcp_timewait_input+0xe4>)
9000fcb4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000fcb6:	8812      	ldrh	r2, [r2, #0]
9000fcb8:	b292      	uxth	r2, r2
9000fcba:	9202      	str	r2, [sp, #8]
9000fcbc:	9301      	str	r3, [sp, #4]
9000fcbe:	4b1b      	ldr	r3, [pc, #108]	; (9000fd2c <tcp_timewait_input+0xe8>)
9000fcc0:	9300      	str	r3, [sp, #0]
9000fcc2:	4b1b      	ldr	r3, [pc, #108]	; (9000fd30 <tcp_timewait_input+0xec>)
9000fcc4:	4602      	mov	r2, r0
9000fcc6:	6878      	ldr	r0, [r7, #4]
9000fcc8:	f003 faca 	bl	90013260 <tcp_rst>
      return;
9000fccc:	e01b      	b.n	9000fd06 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
9000fcce:	4b0f      	ldr	r3, [pc, #60]	; (9000fd0c <tcp_timewait_input+0xc8>)
9000fcd0:	781b      	ldrb	r3, [r3, #0]
9000fcd2:	f003 0301 	and.w	r3, r3, #1
9000fcd6:	2b00      	cmp	r3, #0
9000fcd8:	d003      	beq.n	9000fce2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
9000fcda:	4b16      	ldr	r3, [pc, #88]	; (9000fd34 <tcp_timewait_input+0xf0>)
9000fcdc:	681a      	ldr	r2, [r3, #0]
9000fcde:	687b      	ldr	r3, [r7, #4]
9000fce0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
9000fce2:	4b10      	ldr	r3, [pc, #64]	; (9000fd24 <tcp_timewait_input+0xe0>)
9000fce4:	881b      	ldrh	r3, [r3, #0]
9000fce6:	2b00      	cmp	r3, #0
9000fce8:	d00c      	beq.n	9000fd04 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
9000fcea:	687b      	ldr	r3, [r7, #4]
9000fcec:	8b5b      	ldrh	r3, [r3, #26]
9000fcee:	f043 0302 	orr.w	r3, r3, #2
9000fcf2:	b29a      	uxth	r2, r3
9000fcf4:	687b      	ldr	r3, [r7, #4]
9000fcf6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
9000fcf8:	6878      	ldr	r0, [r7, #4]
9000fcfa:	f002 fcfd 	bl	900126f8 <tcp_output>
  }
  return;
9000fcfe:	e001      	b.n	9000fd04 <tcp_timewait_input+0xc0>
    return;
9000fd00:	bf00      	nop
9000fd02:	e000      	b.n	9000fd06 <tcp_timewait_input+0xc2>
  return;
9000fd04:	bf00      	nop
}
9000fd06:	3708      	adds	r7, #8
9000fd08:	46bd      	mov	sp, r7
9000fd0a:	bd80      	pop	{r7, pc}
9000fd0c:	2000d60c 	.word	0x2000d60c
9000fd10:	9001981c 	.word	0x9001981c
9000fd14:	90019a34 	.word	0x90019a34
9000fd18:	90019868 	.word	0x90019868
9000fd1c:	2000d600 	.word	0x2000d600
9000fd20:	2000d604 	.word	0x2000d604
9000fd24:	2000d60a 	.word	0x2000d60a
9000fd28:	2000d5f0 	.word	0x2000d5f0
9000fd2c:	20007cc4 	.word	0x20007cc4
9000fd30:	20007cc8 	.word	0x20007cc8
9000fd34:	2000d5c8 	.word	0x2000d5c8

9000fd38 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
9000fd38:	b590      	push	{r4, r7, lr}
9000fd3a:	b08d      	sub	sp, #52	; 0x34
9000fd3c:	af04      	add	r7, sp, #16
9000fd3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
9000fd40:	2300      	movs	r3, #0
9000fd42:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
9000fd44:	2300      	movs	r3, #0
9000fd46:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
9000fd48:	687b      	ldr	r3, [r7, #4]
9000fd4a:	2b00      	cmp	r3, #0
9000fd4c:	d106      	bne.n	9000fd5c <tcp_process+0x24>
9000fd4e:	4b9d      	ldr	r3, [pc, #628]	; (9000ffc4 <tcp_process+0x28c>)
9000fd50:	f44f 7247 	mov.w	r2, #796	; 0x31c
9000fd54:	499c      	ldr	r1, [pc, #624]	; (9000ffc8 <tcp_process+0x290>)
9000fd56:	489d      	ldr	r0, [pc, #628]	; (9000ffcc <tcp_process+0x294>)
9000fd58:	f006 ff72 	bl	90016c40 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
9000fd5c:	4b9c      	ldr	r3, [pc, #624]	; (9000ffd0 <tcp_process+0x298>)
9000fd5e:	781b      	ldrb	r3, [r3, #0]
9000fd60:	f003 0304 	and.w	r3, r3, #4
9000fd64:	2b00      	cmp	r3, #0
9000fd66:	d04e      	beq.n	9000fe06 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
9000fd68:	687b      	ldr	r3, [r7, #4]
9000fd6a:	7d1b      	ldrb	r3, [r3, #20]
9000fd6c:	2b02      	cmp	r3, #2
9000fd6e:	d108      	bne.n	9000fd82 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
9000fd70:	687b      	ldr	r3, [r7, #4]
9000fd72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000fd74:	4b97      	ldr	r3, [pc, #604]	; (9000ffd4 <tcp_process+0x29c>)
9000fd76:	681b      	ldr	r3, [r3, #0]
9000fd78:	429a      	cmp	r2, r3
9000fd7a:	d123      	bne.n	9000fdc4 <tcp_process+0x8c>
        acceptable = 1;
9000fd7c:	2301      	movs	r3, #1
9000fd7e:	76fb      	strb	r3, [r7, #27]
9000fd80:	e020      	b.n	9000fdc4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
9000fd82:	687b      	ldr	r3, [r7, #4]
9000fd84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000fd86:	4b94      	ldr	r3, [pc, #592]	; (9000ffd8 <tcp_process+0x2a0>)
9000fd88:	681b      	ldr	r3, [r3, #0]
9000fd8a:	429a      	cmp	r2, r3
9000fd8c:	d102      	bne.n	9000fd94 <tcp_process+0x5c>
        acceptable = 1;
9000fd8e:	2301      	movs	r3, #1
9000fd90:	76fb      	strb	r3, [r7, #27]
9000fd92:	e017      	b.n	9000fdc4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
9000fd94:	4b90      	ldr	r3, [pc, #576]	; (9000ffd8 <tcp_process+0x2a0>)
9000fd96:	681a      	ldr	r2, [r3, #0]
9000fd98:	687b      	ldr	r3, [r7, #4]
9000fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000fd9c:	1ad3      	subs	r3, r2, r3
9000fd9e:	2b00      	cmp	r3, #0
9000fda0:	db10      	blt.n	9000fdc4 <tcp_process+0x8c>
9000fda2:	4b8d      	ldr	r3, [pc, #564]	; (9000ffd8 <tcp_process+0x2a0>)
9000fda4:	681a      	ldr	r2, [r3, #0]
9000fda6:	687b      	ldr	r3, [r7, #4]
9000fda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000fdaa:	6879      	ldr	r1, [r7, #4]
9000fdac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000fdae:	440b      	add	r3, r1
9000fdb0:	1ad3      	subs	r3, r2, r3
9000fdb2:	2b00      	cmp	r3, #0
9000fdb4:	dc06      	bgt.n	9000fdc4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
9000fdb6:	687b      	ldr	r3, [r7, #4]
9000fdb8:	8b5b      	ldrh	r3, [r3, #26]
9000fdba:	f043 0302 	orr.w	r3, r3, #2
9000fdbe:	b29a      	uxth	r2, r3
9000fdc0:	687b      	ldr	r3, [r7, #4]
9000fdc2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
9000fdc4:	7efb      	ldrb	r3, [r7, #27]
9000fdc6:	2b00      	cmp	r3, #0
9000fdc8:	d01b      	beq.n	9000fe02 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
9000fdca:	687b      	ldr	r3, [r7, #4]
9000fdcc:	7d1b      	ldrb	r3, [r3, #20]
9000fdce:	2b00      	cmp	r3, #0
9000fdd0:	d106      	bne.n	9000fde0 <tcp_process+0xa8>
9000fdd2:	4b7c      	ldr	r3, [pc, #496]	; (9000ffc4 <tcp_process+0x28c>)
9000fdd4:	f44f 724e 	mov.w	r2, #824	; 0x338
9000fdd8:	4980      	ldr	r1, [pc, #512]	; (9000ffdc <tcp_process+0x2a4>)
9000fdda:	487c      	ldr	r0, [pc, #496]	; (9000ffcc <tcp_process+0x294>)
9000fddc:	f006 ff30 	bl	90016c40 <iprintf>
      recv_flags |= TF_RESET;
9000fde0:	4b7f      	ldr	r3, [pc, #508]	; (9000ffe0 <tcp_process+0x2a8>)
9000fde2:	781b      	ldrb	r3, [r3, #0]
9000fde4:	f043 0308 	orr.w	r3, r3, #8
9000fde8:	b2da      	uxtb	r2, r3
9000fdea:	4b7d      	ldr	r3, [pc, #500]	; (9000ffe0 <tcp_process+0x2a8>)
9000fdec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
9000fdee:	687b      	ldr	r3, [r7, #4]
9000fdf0:	8b5b      	ldrh	r3, [r3, #26]
9000fdf2:	f023 0301 	bic.w	r3, r3, #1
9000fdf6:	b29a      	uxth	r2, r3
9000fdf8:	687b      	ldr	r3, [r7, #4]
9000fdfa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
9000fdfc:	f06f 030d 	mvn.w	r3, #13
9000fe00:	e37a      	b.n	900104f8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
9000fe02:	2300      	movs	r3, #0
9000fe04:	e378      	b.n	900104f8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
9000fe06:	4b72      	ldr	r3, [pc, #456]	; (9000ffd0 <tcp_process+0x298>)
9000fe08:	781b      	ldrb	r3, [r3, #0]
9000fe0a:	f003 0302 	and.w	r3, r3, #2
9000fe0e:	2b00      	cmp	r3, #0
9000fe10:	d010      	beq.n	9000fe34 <tcp_process+0xfc>
9000fe12:	687b      	ldr	r3, [r7, #4]
9000fe14:	7d1b      	ldrb	r3, [r3, #20]
9000fe16:	2b02      	cmp	r3, #2
9000fe18:	d00c      	beq.n	9000fe34 <tcp_process+0xfc>
9000fe1a:	687b      	ldr	r3, [r7, #4]
9000fe1c:	7d1b      	ldrb	r3, [r3, #20]
9000fe1e:	2b03      	cmp	r3, #3
9000fe20:	d008      	beq.n	9000fe34 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
9000fe22:	687b      	ldr	r3, [r7, #4]
9000fe24:	8b5b      	ldrh	r3, [r3, #26]
9000fe26:	f043 0302 	orr.w	r3, r3, #2
9000fe2a:	b29a      	uxth	r2, r3
9000fe2c:	687b      	ldr	r3, [r7, #4]
9000fe2e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
9000fe30:	2300      	movs	r3, #0
9000fe32:	e361      	b.n	900104f8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
9000fe34:	687b      	ldr	r3, [r7, #4]
9000fe36:	8b5b      	ldrh	r3, [r3, #26]
9000fe38:	f003 0310 	and.w	r3, r3, #16
9000fe3c:	2b00      	cmp	r3, #0
9000fe3e:	d103      	bne.n	9000fe48 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
9000fe40:	4b68      	ldr	r3, [pc, #416]	; (9000ffe4 <tcp_process+0x2ac>)
9000fe42:	681a      	ldr	r2, [r3, #0]
9000fe44:	687b      	ldr	r3, [r7, #4]
9000fe46:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
9000fe48:	687b      	ldr	r3, [r7, #4]
9000fe4a:	2200      	movs	r2, #0
9000fe4c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
9000fe50:	687b      	ldr	r3, [r7, #4]
9000fe52:	2200      	movs	r2, #0
9000fe54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
9000fe58:	6878      	ldr	r0, [r7, #4]
9000fe5a:	f001 fc2f 	bl	900116bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
9000fe5e:	687b      	ldr	r3, [r7, #4]
9000fe60:	7d1b      	ldrb	r3, [r3, #20]
9000fe62:	3b02      	subs	r3, #2
9000fe64:	2b07      	cmp	r3, #7
9000fe66:	f200 8337 	bhi.w	900104d8 <tcp_process+0x7a0>
9000fe6a:	a201      	add	r2, pc, #4	; (adr r2, 9000fe70 <tcp_process+0x138>)
9000fe6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000fe70:	9000fe91 	.word	0x9000fe91
9000fe74:	900100c1 	.word	0x900100c1
9000fe78:	90010239 	.word	0x90010239
9000fe7c:	90010263 	.word	0x90010263
9000fe80:	90010387 	.word	0x90010387
9000fe84:	90010239 	.word	0x90010239
9000fe88:	90010413 	.word	0x90010413
9000fe8c:	900104a3 	.word	0x900104a3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
9000fe90:	4b4f      	ldr	r3, [pc, #316]	; (9000ffd0 <tcp_process+0x298>)
9000fe92:	781b      	ldrb	r3, [r3, #0]
9000fe94:	f003 0310 	and.w	r3, r3, #16
9000fe98:	2b00      	cmp	r3, #0
9000fe9a:	f000 80e4 	beq.w	90010066 <tcp_process+0x32e>
9000fe9e:	4b4c      	ldr	r3, [pc, #304]	; (9000ffd0 <tcp_process+0x298>)
9000fea0:	781b      	ldrb	r3, [r3, #0]
9000fea2:	f003 0302 	and.w	r3, r3, #2
9000fea6:	2b00      	cmp	r3, #0
9000fea8:	f000 80dd 	beq.w	90010066 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
9000feac:	687b      	ldr	r3, [r7, #4]
9000feae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000feb0:	1c5a      	adds	r2, r3, #1
9000feb2:	4b48      	ldr	r3, [pc, #288]	; (9000ffd4 <tcp_process+0x29c>)
9000feb4:	681b      	ldr	r3, [r3, #0]
9000feb6:	429a      	cmp	r2, r3
9000feb8:	f040 80d5 	bne.w	90010066 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
9000febc:	4b46      	ldr	r3, [pc, #280]	; (9000ffd8 <tcp_process+0x2a0>)
9000febe:	681b      	ldr	r3, [r3, #0]
9000fec0:	1c5a      	adds	r2, r3, #1
9000fec2:	687b      	ldr	r3, [r7, #4]
9000fec4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
9000fec6:	687b      	ldr	r3, [r7, #4]
9000fec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000feca:	687b      	ldr	r3, [r7, #4]
9000fecc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
9000fece:	4b41      	ldr	r3, [pc, #260]	; (9000ffd4 <tcp_process+0x29c>)
9000fed0:	681a      	ldr	r2, [r3, #0]
9000fed2:	687b      	ldr	r3, [r7, #4]
9000fed4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
9000fed6:	4b44      	ldr	r3, [pc, #272]	; (9000ffe8 <tcp_process+0x2b0>)
9000fed8:	681b      	ldr	r3, [r3, #0]
9000feda:	89db      	ldrh	r3, [r3, #14]
9000fedc:	b29a      	uxth	r2, r3
9000fede:	687b      	ldr	r3, [r7, #4]
9000fee0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
9000fee4:	687b      	ldr	r3, [r7, #4]
9000fee6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000feea:	687b      	ldr	r3, [r7, #4]
9000feec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
9000fef0:	4b39      	ldr	r3, [pc, #228]	; (9000ffd8 <tcp_process+0x2a0>)
9000fef2:	681b      	ldr	r3, [r3, #0]
9000fef4:	1e5a      	subs	r2, r3, #1
9000fef6:	687b      	ldr	r3, [r7, #4]
9000fef8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
9000fefa:	687b      	ldr	r3, [r7, #4]
9000fefc:	2204      	movs	r2, #4
9000fefe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
9000ff00:	687b      	ldr	r3, [r7, #4]
9000ff02:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
9000ff04:	687b      	ldr	r3, [r7, #4]
9000ff06:	3304      	adds	r3, #4
9000ff08:	4618      	mov	r0, r3
9000ff0a:	f005 f8bf 	bl	9001508c <ip4_route>
9000ff0e:	4601      	mov	r1, r0
9000ff10:	687b      	ldr	r3, [r7, #4]
9000ff12:	3304      	adds	r3, #4
9000ff14:	461a      	mov	r2, r3
9000ff16:	4620      	mov	r0, r4
9000ff18:	f7ff f88c 	bl	9000f034 <tcp_eff_send_mss_netif>
9000ff1c:	4603      	mov	r3, r0
9000ff1e:	461a      	mov	r2, r3
9000ff20:	687b      	ldr	r3, [r7, #4]
9000ff22:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
9000ff24:	687b      	ldr	r3, [r7, #4]
9000ff26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ff28:	009a      	lsls	r2, r3, #2
9000ff2a:	687b      	ldr	r3, [r7, #4]
9000ff2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ff2e:	005b      	lsls	r3, r3, #1
9000ff30:	f241 111c 	movw	r1, #4380	; 0x111c
9000ff34:	428b      	cmp	r3, r1
9000ff36:	bf38      	it	cc
9000ff38:	460b      	movcc	r3, r1
9000ff3a:	429a      	cmp	r2, r3
9000ff3c:	d204      	bcs.n	9000ff48 <tcp_process+0x210>
9000ff3e:	687b      	ldr	r3, [r7, #4]
9000ff40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ff42:	009b      	lsls	r3, r3, #2
9000ff44:	b29b      	uxth	r3, r3
9000ff46:	e00d      	b.n	9000ff64 <tcp_process+0x22c>
9000ff48:	687b      	ldr	r3, [r7, #4]
9000ff4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ff4c:	005b      	lsls	r3, r3, #1
9000ff4e:	f241 121c 	movw	r2, #4380	; 0x111c
9000ff52:	4293      	cmp	r3, r2
9000ff54:	d904      	bls.n	9000ff60 <tcp_process+0x228>
9000ff56:	687b      	ldr	r3, [r7, #4]
9000ff58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ff5a:	005b      	lsls	r3, r3, #1
9000ff5c:	b29b      	uxth	r3, r3
9000ff5e:	e001      	b.n	9000ff64 <tcp_process+0x22c>
9000ff60:	f241 131c 	movw	r3, #4380	; 0x111c
9000ff64:	687a      	ldr	r2, [r7, #4]
9000ff66:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
9000ff6a:	687b      	ldr	r3, [r7, #4]
9000ff6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000ff70:	2b00      	cmp	r3, #0
9000ff72:	d106      	bne.n	9000ff82 <tcp_process+0x24a>
9000ff74:	4b13      	ldr	r3, [pc, #76]	; (9000ffc4 <tcp_process+0x28c>)
9000ff76:	f44f 725b 	mov.w	r2, #876	; 0x36c
9000ff7a:	491c      	ldr	r1, [pc, #112]	; (9000ffec <tcp_process+0x2b4>)
9000ff7c:	4813      	ldr	r0, [pc, #76]	; (9000ffcc <tcp_process+0x294>)
9000ff7e:	f006 fe5f 	bl	90016c40 <iprintf>
        --pcb->snd_queuelen;
9000ff82:	687b      	ldr	r3, [r7, #4]
9000ff84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000ff88:	3b01      	subs	r3, #1
9000ff8a:	b29a      	uxth	r2, r3
9000ff8c:	687b      	ldr	r3, [r7, #4]
9000ff8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
9000ff92:	687b      	ldr	r3, [r7, #4]
9000ff94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ff96:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
9000ff98:	69fb      	ldr	r3, [r7, #28]
9000ff9a:	2b00      	cmp	r3, #0
9000ff9c:	d12a      	bne.n	9000fff4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
9000ff9e:	687b      	ldr	r3, [r7, #4]
9000ffa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ffa2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
9000ffa4:	69fb      	ldr	r3, [r7, #28]
9000ffa6:	2b00      	cmp	r3, #0
9000ffa8:	d106      	bne.n	9000ffb8 <tcp_process+0x280>
9000ffaa:	4b06      	ldr	r3, [pc, #24]	; (9000ffc4 <tcp_process+0x28c>)
9000ffac:	f44f 725d 	mov.w	r2, #884	; 0x374
9000ffb0:	490f      	ldr	r1, [pc, #60]	; (9000fff0 <tcp_process+0x2b8>)
9000ffb2:	4806      	ldr	r0, [pc, #24]	; (9000ffcc <tcp_process+0x294>)
9000ffb4:	f006 fe44 	bl	90016c40 <iprintf>
          pcb->unsent = rseg->next;
9000ffb8:	69fb      	ldr	r3, [r7, #28]
9000ffba:	681a      	ldr	r2, [r3, #0]
9000ffbc:	687b      	ldr	r3, [r7, #4]
9000ffbe:	66da      	str	r2, [r3, #108]	; 0x6c
9000ffc0:	e01c      	b.n	9000fffc <tcp_process+0x2c4>
9000ffc2:	bf00      	nop
9000ffc4:	9001981c 	.word	0x9001981c
9000ffc8:	90019a54 	.word	0x90019a54
9000ffcc:	90019868 	.word	0x90019868
9000ffd0:	2000d60c 	.word	0x2000d60c
9000ffd4:	2000d604 	.word	0x2000d604
9000ffd8:	2000d600 	.word	0x2000d600
9000ffdc:	90019a70 	.word	0x90019a70
9000ffe0:	2000d60d 	.word	0x2000d60d
9000ffe4:	2000d5c8 	.word	0x2000d5c8
9000ffe8:	2000d5f0 	.word	0x2000d5f0
9000ffec:	90019a90 	.word	0x90019a90
9000fff0:	90019aa8 	.word	0x90019aa8
        } else {
          pcb->unacked = rseg->next;
9000fff4:	69fb      	ldr	r3, [r7, #28]
9000fff6:	681a      	ldr	r2, [r3, #0]
9000fff8:	687b      	ldr	r3, [r7, #4]
9000fffa:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
9000fffc:	69f8      	ldr	r0, [r7, #28]
9000fffe:	f7fe fc54 	bl	9000e8aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
90010002:	687b      	ldr	r3, [r7, #4]
90010004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90010006:	2b00      	cmp	r3, #0
90010008:	d104      	bne.n	90010014 <tcp_process+0x2dc>
          pcb->rtime = -1;
9001000a:	687b      	ldr	r3, [r7, #4]
9001000c:	f64f 72ff 	movw	r2, #65535	; 0xffff
90010010:	861a      	strh	r2, [r3, #48]	; 0x30
90010012:	e006      	b.n	90010022 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
90010014:	687b      	ldr	r3, [r7, #4]
90010016:	2200      	movs	r2, #0
90010018:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
9001001a:	687b      	ldr	r3, [r7, #4]
9001001c:	2200      	movs	r2, #0
9001001e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
90010022:	687b      	ldr	r3, [r7, #4]
90010024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90010028:	2b00      	cmp	r3, #0
9001002a:	d00a      	beq.n	90010042 <tcp_process+0x30a>
9001002c:	687b      	ldr	r3, [r7, #4]
9001002e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90010032:	687a      	ldr	r2, [r7, #4]
90010034:	6910      	ldr	r0, [r2, #16]
90010036:	2200      	movs	r2, #0
90010038:	6879      	ldr	r1, [r7, #4]
9001003a:	4798      	blx	r3
9001003c:	4603      	mov	r3, r0
9001003e:	76bb      	strb	r3, [r7, #26]
90010040:	e001      	b.n	90010046 <tcp_process+0x30e>
90010042:	2300      	movs	r3, #0
90010044:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
90010046:	f997 301a 	ldrsb.w	r3, [r7, #26]
9001004a:	f113 0f0d 	cmn.w	r3, #13
9001004e:	d102      	bne.n	90010056 <tcp_process+0x31e>
          return ERR_ABRT;
90010050:	f06f 030c 	mvn.w	r3, #12
90010054:	e250      	b.n	900104f8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
90010056:	687b      	ldr	r3, [r7, #4]
90010058:	8b5b      	ldrh	r3, [r3, #26]
9001005a:	f043 0302 	orr.w	r3, r3, #2
9001005e:	b29a      	uxth	r2, r3
90010060:	687b      	ldr	r3, [r7, #4]
90010062:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
90010064:	e23a      	b.n	900104dc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
90010066:	4b98      	ldr	r3, [pc, #608]	; (900102c8 <tcp_process+0x590>)
90010068:	781b      	ldrb	r3, [r3, #0]
9001006a:	f003 0310 	and.w	r3, r3, #16
9001006e:	2b00      	cmp	r3, #0
90010070:	f000 8234 	beq.w	900104dc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90010074:	4b95      	ldr	r3, [pc, #596]	; (900102cc <tcp_process+0x594>)
90010076:	6819      	ldr	r1, [r3, #0]
90010078:	4b95      	ldr	r3, [pc, #596]	; (900102d0 <tcp_process+0x598>)
9001007a:	881b      	ldrh	r3, [r3, #0]
9001007c:	461a      	mov	r2, r3
9001007e:	4b95      	ldr	r3, [pc, #596]	; (900102d4 <tcp_process+0x59c>)
90010080:	681b      	ldr	r3, [r3, #0]
90010082:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90010084:	4b94      	ldr	r3, [pc, #592]	; (900102d8 <tcp_process+0x5a0>)
90010086:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90010088:	885b      	ldrh	r3, [r3, #2]
9001008a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9001008c:	4a92      	ldr	r2, [pc, #584]	; (900102d8 <tcp_process+0x5a0>)
9001008e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90010090:	8812      	ldrh	r2, [r2, #0]
90010092:	b292      	uxth	r2, r2
90010094:	9202      	str	r2, [sp, #8]
90010096:	9301      	str	r3, [sp, #4]
90010098:	4b90      	ldr	r3, [pc, #576]	; (900102dc <tcp_process+0x5a4>)
9001009a:	9300      	str	r3, [sp, #0]
9001009c:	4b90      	ldr	r3, [pc, #576]	; (900102e0 <tcp_process+0x5a8>)
9001009e:	4602      	mov	r2, r0
900100a0:	6878      	ldr	r0, [r7, #4]
900100a2:	f003 f8dd 	bl	90013260 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
900100a6:	687b      	ldr	r3, [r7, #4]
900100a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
900100ac:	2b05      	cmp	r3, #5
900100ae:	f200 8215 	bhi.w	900104dc <tcp_process+0x7a4>
          pcb->rtime = 0;
900100b2:	687b      	ldr	r3, [r7, #4]
900100b4:	2200      	movs	r2, #0
900100b6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
900100b8:	6878      	ldr	r0, [r7, #4]
900100ba:	f002 fea7 	bl	90012e0c <tcp_rexmit_rto>
      break;
900100be:	e20d      	b.n	900104dc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
900100c0:	4b81      	ldr	r3, [pc, #516]	; (900102c8 <tcp_process+0x590>)
900100c2:	781b      	ldrb	r3, [r3, #0]
900100c4:	f003 0310 	and.w	r3, r3, #16
900100c8:	2b00      	cmp	r3, #0
900100ca:	f000 80a1 	beq.w	90010210 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
900100ce:	4b7f      	ldr	r3, [pc, #508]	; (900102cc <tcp_process+0x594>)
900100d0:	681a      	ldr	r2, [r3, #0]
900100d2:	687b      	ldr	r3, [r7, #4]
900100d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900100d6:	1ad3      	subs	r3, r2, r3
900100d8:	3b01      	subs	r3, #1
900100da:	2b00      	cmp	r3, #0
900100dc:	db7e      	blt.n	900101dc <tcp_process+0x4a4>
900100de:	4b7b      	ldr	r3, [pc, #492]	; (900102cc <tcp_process+0x594>)
900100e0:	681a      	ldr	r2, [r3, #0]
900100e2:	687b      	ldr	r3, [r7, #4]
900100e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900100e6:	1ad3      	subs	r3, r2, r3
900100e8:	2b00      	cmp	r3, #0
900100ea:	dc77      	bgt.n	900101dc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
900100ec:	687b      	ldr	r3, [r7, #4]
900100ee:	2204      	movs	r2, #4
900100f0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
900100f2:	687b      	ldr	r3, [r7, #4]
900100f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900100f6:	2b00      	cmp	r3, #0
900100f8:	d102      	bne.n	90010100 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
900100fa:	23fa      	movs	r3, #250	; 0xfa
900100fc:	76bb      	strb	r3, [r7, #26]
900100fe:	e01d      	b.n	9001013c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
90010100:	687b      	ldr	r3, [r7, #4]
90010102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010104:	699b      	ldr	r3, [r3, #24]
90010106:	2b00      	cmp	r3, #0
90010108:	d106      	bne.n	90010118 <tcp_process+0x3e0>
9001010a:	4b76      	ldr	r3, [pc, #472]	; (900102e4 <tcp_process+0x5ac>)
9001010c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
90010110:	4975      	ldr	r1, [pc, #468]	; (900102e8 <tcp_process+0x5b0>)
90010112:	4876      	ldr	r0, [pc, #472]	; (900102ec <tcp_process+0x5b4>)
90010114:	f006 fd94 	bl	90016c40 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
90010118:	687b      	ldr	r3, [r7, #4]
9001011a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9001011c:	699b      	ldr	r3, [r3, #24]
9001011e:	2b00      	cmp	r3, #0
90010120:	d00a      	beq.n	90010138 <tcp_process+0x400>
90010122:	687b      	ldr	r3, [r7, #4]
90010124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010126:	699b      	ldr	r3, [r3, #24]
90010128:	687a      	ldr	r2, [r7, #4]
9001012a:	6910      	ldr	r0, [r2, #16]
9001012c:	2200      	movs	r2, #0
9001012e:	6879      	ldr	r1, [r7, #4]
90010130:	4798      	blx	r3
90010132:	4603      	mov	r3, r0
90010134:	76bb      	strb	r3, [r7, #26]
90010136:	e001      	b.n	9001013c <tcp_process+0x404>
90010138:	23f0      	movs	r3, #240	; 0xf0
9001013a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
9001013c:	f997 301a 	ldrsb.w	r3, [r7, #26]
90010140:	2b00      	cmp	r3, #0
90010142:	d00a      	beq.n	9001015a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
90010144:	f997 301a 	ldrsb.w	r3, [r7, #26]
90010148:	f113 0f0d 	cmn.w	r3, #13
9001014c:	d002      	beq.n	90010154 <tcp_process+0x41c>
              tcp_abort(pcb);
9001014e:	6878      	ldr	r0, [r7, #4]
90010150:	f7fd fd18 	bl	9000db84 <tcp_abort>
            }
            return ERR_ABRT;
90010154:	f06f 030c 	mvn.w	r3, #12
90010158:	e1ce      	b.n	900104f8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
9001015a:	6878      	ldr	r0, [r7, #4]
9001015c:	f000 fae0 	bl	90010720 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
90010160:	4b63      	ldr	r3, [pc, #396]	; (900102f0 <tcp_process+0x5b8>)
90010162:	881b      	ldrh	r3, [r3, #0]
90010164:	2b00      	cmp	r3, #0
90010166:	d005      	beq.n	90010174 <tcp_process+0x43c>
            recv_acked--;
90010168:	4b61      	ldr	r3, [pc, #388]	; (900102f0 <tcp_process+0x5b8>)
9001016a:	881b      	ldrh	r3, [r3, #0]
9001016c:	3b01      	subs	r3, #1
9001016e:	b29a      	uxth	r2, r3
90010170:	4b5f      	ldr	r3, [pc, #380]	; (900102f0 <tcp_process+0x5b8>)
90010172:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
90010174:	687b      	ldr	r3, [r7, #4]
90010176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90010178:	009a      	lsls	r2, r3, #2
9001017a:	687b      	ldr	r3, [r7, #4]
9001017c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9001017e:	005b      	lsls	r3, r3, #1
90010180:	f241 111c 	movw	r1, #4380	; 0x111c
90010184:	428b      	cmp	r3, r1
90010186:	bf38      	it	cc
90010188:	460b      	movcc	r3, r1
9001018a:	429a      	cmp	r2, r3
9001018c:	d204      	bcs.n	90010198 <tcp_process+0x460>
9001018e:	687b      	ldr	r3, [r7, #4]
90010190:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90010192:	009b      	lsls	r3, r3, #2
90010194:	b29b      	uxth	r3, r3
90010196:	e00d      	b.n	900101b4 <tcp_process+0x47c>
90010198:	687b      	ldr	r3, [r7, #4]
9001019a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9001019c:	005b      	lsls	r3, r3, #1
9001019e:	f241 121c 	movw	r2, #4380	; 0x111c
900101a2:	4293      	cmp	r3, r2
900101a4:	d904      	bls.n	900101b0 <tcp_process+0x478>
900101a6:	687b      	ldr	r3, [r7, #4]
900101a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
900101aa:	005b      	lsls	r3, r3, #1
900101ac:	b29b      	uxth	r3, r3
900101ae:	e001      	b.n	900101b4 <tcp_process+0x47c>
900101b0:	f241 131c 	movw	r3, #4380	; 0x111c
900101b4:	687a      	ldr	r2, [r7, #4]
900101b6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
900101ba:	4b4e      	ldr	r3, [pc, #312]	; (900102f4 <tcp_process+0x5bc>)
900101bc:	781b      	ldrb	r3, [r3, #0]
900101be:	f003 0320 	and.w	r3, r3, #32
900101c2:	2b00      	cmp	r3, #0
900101c4:	d037      	beq.n	90010236 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
900101c6:	687b      	ldr	r3, [r7, #4]
900101c8:	8b5b      	ldrh	r3, [r3, #26]
900101ca:	f043 0302 	orr.w	r3, r3, #2
900101ce:	b29a      	uxth	r2, r3
900101d0:	687b      	ldr	r3, [r7, #4]
900101d2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
900101d4:	687b      	ldr	r3, [r7, #4]
900101d6:	2207      	movs	r2, #7
900101d8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
900101da:	e02c      	b.n	90010236 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
900101dc:	4b3b      	ldr	r3, [pc, #236]	; (900102cc <tcp_process+0x594>)
900101de:	6819      	ldr	r1, [r3, #0]
900101e0:	4b3b      	ldr	r3, [pc, #236]	; (900102d0 <tcp_process+0x598>)
900101e2:	881b      	ldrh	r3, [r3, #0]
900101e4:	461a      	mov	r2, r3
900101e6:	4b3b      	ldr	r3, [pc, #236]	; (900102d4 <tcp_process+0x59c>)
900101e8:	681b      	ldr	r3, [r3, #0]
900101ea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
900101ec:	4b3a      	ldr	r3, [pc, #232]	; (900102d8 <tcp_process+0x5a0>)
900101ee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
900101f0:	885b      	ldrh	r3, [r3, #2]
900101f2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
900101f4:	4a38      	ldr	r2, [pc, #224]	; (900102d8 <tcp_process+0x5a0>)
900101f6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
900101f8:	8812      	ldrh	r2, [r2, #0]
900101fa:	b292      	uxth	r2, r2
900101fc:	9202      	str	r2, [sp, #8]
900101fe:	9301      	str	r3, [sp, #4]
90010200:	4b36      	ldr	r3, [pc, #216]	; (900102dc <tcp_process+0x5a4>)
90010202:	9300      	str	r3, [sp, #0]
90010204:	4b36      	ldr	r3, [pc, #216]	; (900102e0 <tcp_process+0x5a8>)
90010206:	4602      	mov	r2, r0
90010208:	6878      	ldr	r0, [r7, #4]
9001020a:	f003 f829 	bl	90013260 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
9001020e:	e167      	b.n	900104e0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
90010210:	4b2d      	ldr	r3, [pc, #180]	; (900102c8 <tcp_process+0x590>)
90010212:	781b      	ldrb	r3, [r3, #0]
90010214:	f003 0302 	and.w	r3, r3, #2
90010218:	2b00      	cmp	r3, #0
9001021a:	f000 8161 	beq.w	900104e0 <tcp_process+0x7a8>
9001021e:	687b      	ldr	r3, [r7, #4]
90010220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010222:	1e5a      	subs	r2, r3, #1
90010224:	4b2b      	ldr	r3, [pc, #172]	; (900102d4 <tcp_process+0x59c>)
90010226:	681b      	ldr	r3, [r3, #0]
90010228:	429a      	cmp	r2, r3
9001022a:	f040 8159 	bne.w	900104e0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
9001022e:	6878      	ldr	r0, [r7, #4]
90010230:	f002 fe0e 	bl	90012e50 <tcp_rexmit>
      break;
90010234:	e154      	b.n	900104e0 <tcp_process+0x7a8>
90010236:	e153      	b.n	900104e0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
90010238:	6878      	ldr	r0, [r7, #4]
9001023a:	f000 fa71 	bl	90010720 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
9001023e:	4b2d      	ldr	r3, [pc, #180]	; (900102f4 <tcp_process+0x5bc>)
90010240:	781b      	ldrb	r3, [r3, #0]
90010242:	f003 0320 	and.w	r3, r3, #32
90010246:	2b00      	cmp	r3, #0
90010248:	f000 814c 	beq.w	900104e4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
9001024c:	687b      	ldr	r3, [r7, #4]
9001024e:	8b5b      	ldrh	r3, [r3, #26]
90010250:	f043 0302 	orr.w	r3, r3, #2
90010254:	b29a      	uxth	r2, r3
90010256:	687b      	ldr	r3, [r7, #4]
90010258:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
9001025a:	687b      	ldr	r3, [r7, #4]
9001025c:	2207      	movs	r2, #7
9001025e:	751a      	strb	r2, [r3, #20]
      }
      break;
90010260:	e140      	b.n	900104e4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
90010262:	6878      	ldr	r0, [r7, #4]
90010264:	f000 fa5c 	bl	90010720 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
90010268:	4b22      	ldr	r3, [pc, #136]	; (900102f4 <tcp_process+0x5bc>)
9001026a:	781b      	ldrb	r3, [r3, #0]
9001026c:	f003 0320 	and.w	r3, r3, #32
90010270:	2b00      	cmp	r3, #0
90010272:	d071      	beq.n	90010358 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
90010274:	4b14      	ldr	r3, [pc, #80]	; (900102c8 <tcp_process+0x590>)
90010276:	781b      	ldrb	r3, [r3, #0]
90010278:	f003 0310 	and.w	r3, r3, #16
9001027c:	2b00      	cmp	r3, #0
9001027e:	d060      	beq.n	90010342 <tcp_process+0x60a>
90010280:	687b      	ldr	r3, [r7, #4]
90010282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
90010284:	4b11      	ldr	r3, [pc, #68]	; (900102cc <tcp_process+0x594>)
90010286:	681b      	ldr	r3, [r3, #0]
90010288:	429a      	cmp	r2, r3
9001028a:	d15a      	bne.n	90010342 <tcp_process+0x60a>
            pcb->unsent == NULL) {
9001028c:	687b      	ldr	r3, [r7, #4]
9001028e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
90010290:	2b00      	cmp	r3, #0
90010292:	d156      	bne.n	90010342 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
90010294:	687b      	ldr	r3, [r7, #4]
90010296:	8b5b      	ldrh	r3, [r3, #26]
90010298:	f043 0302 	orr.w	r3, r3, #2
9001029c:	b29a      	uxth	r2, r3
9001029e:	687b      	ldr	r3, [r7, #4]
900102a0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
900102a2:	6878      	ldr	r0, [r7, #4]
900102a4:	f7fe fdbc 	bl	9000ee20 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
900102a8:	4b13      	ldr	r3, [pc, #76]	; (900102f8 <tcp_process+0x5c0>)
900102aa:	681b      	ldr	r3, [r3, #0]
900102ac:	687a      	ldr	r2, [r7, #4]
900102ae:	429a      	cmp	r2, r3
900102b0:	d105      	bne.n	900102be <tcp_process+0x586>
900102b2:	4b11      	ldr	r3, [pc, #68]	; (900102f8 <tcp_process+0x5c0>)
900102b4:	681b      	ldr	r3, [r3, #0]
900102b6:	68db      	ldr	r3, [r3, #12]
900102b8:	4a0f      	ldr	r2, [pc, #60]	; (900102f8 <tcp_process+0x5c0>)
900102ba:	6013      	str	r3, [r2, #0]
900102bc:	e02e      	b.n	9001031c <tcp_process+0x5e4>
900102be:	4b0e      	ldr	r3, [pc, #56]	; (900102f8 <tcp_process+0x5c0>)
900102c0:	681b      	ldr	r3, [r3, #0]
900102c2:	617b      	str	r3, [r7, #20]
900102c4:	e027      	b.n	90010316 <tcp_process+0x5de>
900102c6:	bf00      	nop
900102c8:	2000d60c 	.word	0x2000d60c
900102cc:	2000d604 	.word	0x2000d604
900102d0:	2000d60a 	.word	0x2000d60a
900102d4:	2000d600 	.word	0x2000d600
900102d8:	2000d5f0 	.word	0x2000d5f0
900102dc:	20007cc4 	.word	0x20007cc4
900102e0:	20007cc8 	.word	0x20007cc8
900102e4:	9001981c 	.word	0x9001981c
900102e8:	90019abc 	.word	0x90019abc
900102ec:	90019868 	.word	0x90019868
900102f0:	2000d608 	.word	0x2000d608
900102f4:	2000d60d 	.word	0x2000d60d
900102f8:	2000d5d4 	.word	0x2000d5d4
900102fc:	697b      	ldr	r3, [r7, #20]
900102fe:	68db      	ldr	r3, [r3, #12]
90010300:	687a      	ldr	r2, [r7, #4]
90010302:	429a      	cmp	r2, r3
90010304:	d104      	bne.n	90010310 <tcp_process+0x5d8>
90010306:	687b      	ldr	r3, [r7, #4]
90010308:	68da      	ldr	r2, [r3, #12]
9001030a:	697b      	ldr	r3, [r7, #20]
9001030c:	60da      	str	r2, [r3, #12]
9001030e:	e005      	b.n	9001031c <tcp_process+0x5e4>
90010310:	697b      	ldr	r3, [r7, #20]
90010312:	68db      	ldr	r3, [r3, #12]
90010314:	617b      	str	r3, [r7, #20]
90010316:	697b      	ldr	r3, [r7, #20]
90010318:	2b00      	cmp	r3, #0
9001031a:	d1ef      	bne.n	900102fc <tcp_process+0x5c4>
9001031c:	687b      	ldr	r3, [r7, #4]
9001031e:	2200      	movs	r2, #0
90010320:	60da      	str	r2, [r3, #12]
90010322:	4b77      	ldr	r3, [pc, #476]	; (90010500 <tcp_process+0x7c8>)
90010324:	2201      	movs	r2, #1
90010326:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
90010328:	687b      	ldr	r3, [r7, #4]
9001032a:	220a      	movs	r2, #10
9001032c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
9001032e:	4b75      	ldr	r3, [pc, #468]	; (90010504 <tcp_process+0x7cc>)
90010330:	681a      	ldr	r2, [r3, #0]
90010332:	687b      	ldr	r3, [r7, #4]
90010334:	60da      	str	r2, [r3, #12]
90010336:	4a73      	ldr	r2, [pc, #460]	; (90010504 <tcp_process+0x7cc>)
90010338:	687b      	ldr	r3, [r7, #4]
9001033a:	6013      	str	r3, [r2, #0]
9001033c:	f003 f952 	bl	900135e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
90010340:	e0d2      	b.n	900104e8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
90010342:	687b      	ldr	r3, [r7, #4]
90010344:	8b5b      	ldrh	r3, [r3, #26]
90010346:	f043 0302 	orr.w	r3, r3, #2
9001034a:	b29a      	uxth	r2, r3
9001034c:	687b      	ldr	r3, [r7, #4]
9001034e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
90010350:	687b      	ldr	r3, [r7, #4]
90010352:	2208      	movs	r2, #8
90010354:	751a      	strb	r2, [r3, #20]
      break;
90010356:	e0c7      	b.n	900104e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
90010358:	4b6b      	ldr	r3, [pc, #428]	; (90010508 <tcp_process+0x7d0>)
9001035a:	781b      	ldrb	r3, [r3, #0]
9001035c:	f003 0310 	and.w	r3, r3, #16
90010360:	2b00      	cmp	r3, #0
90010362:	f000 80c1 	beq.w	900104e8 <tcp_process+0x7b0>
90010366:	687b      	ldr	r3, [r7, #4]
90010368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9001036a:	4b68      	ldr	r3, [pc, #416]	; (9001050c <tcp_process+0x7d4>)
9001036c:	681b      	ldr	r3, [r3, #0]
9001036e:	429a      	cmp	r2, r3
90010370:	f040 80ba 	bne.w	900104e8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
90010374:	687b      	ldr	r3, [r7, #4]
90010376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
90010378:	2b00      	cmp	r3, #0
9001037a:	f040 80b5 	bne.w	900104e8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
9001037e:	687b      	ldr	r3, [r7, #4]
90010380:	2206      	movs	r2, #6
90010382:	751a      	strb	r2, [r3, #20]
      break;
90010384:	e0b0      	b.n	900104e8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
90010386:	6878      	ldr	r0, [r7, #4]
90010388:	f000 f9ca 	bl	90010720 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
9001038c:	4b60      	ldr	r3, [pc, #384]	; (90010510 <tcp_process+0x7d8>)
9001038e:	781b      	ldrb	r3, [r3, #0]
90010390:	f003 0320 	and.w	r3, r3, #32
90010394:	2b00      	cmp	r3, #0
90010396:	f000 80a9 	beq.w	900104ec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
9001039a:	687b      	ldr	r3, [r7, #4]
9001039c:	8b5b      	ldrh	r3, [r3, #26]
9001039e:	f043 0302 	orr.w	r3, r3, #2
900103a2:	b29a      	uxth	r2, r3
900103a4:	687b      	ldr	r3, [r7, #4]
900103a6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
900103a8:	6878      	ldr	r0, [r7, #4]
900103aa:	f7fe fd39 	bl	9000ee20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
900103ae:	4b59      	ldr	r3, [pc, #356]	; (90010514 <tcp_process+0x7dc>)
900103b0:	681b      	ldr	r3, [r3, #0]
900103b2:	687a      	ldr	r2, [r7, #4]
900103b4:	429a      	cmp	r2, r3
900103b6:	d105      	bne.n	900103c4 <tcp_process+0x68c>
900103b8:	4b56      	ldr	r3, [pc, #344]	; (90010514 <tcp_process+0x7dc>)
900103ba:	681b      	ldr	r3, [r3, #0]
900103bc:	68db      	ldr	r3, [r3, #12]
900103be:	4a55      	ldr	r2, [pc, #340]	; (90010514 <tcp_process+0x7dc>)
900103c0:	6013      	str	r3, [r2, #0]
900103c2:	e013      	b.n	900103ec <tcp_process+0x6b4>
900103c4:	4b53      	ldr	r3, [pc, #332]	; (90010514 <tcp_process+0x7dc>)
900103c6:	681b      	ldr	r3, [r3, #0]
900103c8:	613b      	str	r3, [r7, #16]
900103ca:	e00c      	b.n	900103e6 <tcp_process+0x6ae>
900103cc:	693b      	ldr	r3, [r7, #16]
900103ce:	68db      	ldr	r3, [r3, #12]
900103d0:	687a      	ldr	r2, [r7, #4]
900103d2:	429a      	cmp	r2, r3
900103d4:	d104      	bne.n	900103e0 <tcp_process+0x6a8>
900103d6:	687b      	ldr	r3, [r7, #4]
900103d8:	68da      	ldr	r2, [r3, #12]
900103da:	693b      	ldr	r3, [r7, #16]
900103dc:	60da      	str	r2, [r3, #12]
900103de:	e005      	b.n	900103ec <tcp_process+0x6b4>
900103e0:	693b      	ldr	r3, [r7, #16]
900103e2:	68db      	ldr	r3, [r3, #12]
900103e4:	613b      	str	r3, [r7, #16]
900103e6:	693b      	ldr	r3, [r7, #16]
900103e8:	2b00      	cmp	r3, #0
900103ea:	d1ef      	bne.n	900103cc <tcp_process+0x694>
900103ec:	687b      	ldr	r3, [r7, #4]
900103ee:	2200      	movs	r2, #0
900103f0:	60da      	str	r2, [r3, #12]
900103f2:	4b43      	ldr	r3, [pc, #268]	; (90010500 <tcp_process+0x7c8>)
900103f4:	2201      	movs	r2, #1
900103f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
900103f8:	687b      	ldr	r3, [r7, #4]
900103fa:	220a      	movs	r2, #10
900103fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
900103fe:	4b41      	ldr	r3, [pc, #260]	; (90010504 <tcp_process+0x7cc>)
90010400:	681a      	ldr	r2, [r3, #0]
90010402:	687b      	ldr	r3, [r7, #4]
90010404:	60da      	str	r2, [r3, #12]
90010406:	4a3f      	ldr	r2, [pc, #252]	; (90010504 <tcp_process+0x7cc>)
90010408:	687b      	ldr	r3, [r7, #4]
9001040a:	6013      	str	r3, [r2, #0]
9001040c:	f003 f8ea 	bl	900135e4 <tcp_timer_needed>
      }
      break;
90010410:	e06c      	b.n	900104ec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
90010412:	6878      	ldr	r0, [r7, #4]
90010414:	f000 f984 	bl	90010720 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
90010418:	4b3b      	ldr	r3, [pc, #236]	; (90010508 <tcp_process+0x7d0>)
9001041a:	781b      	ldrb	r3, [r3, #0]
9001041c:	f003 0310 	and.w	r3, r3, #16
90010420:	2b00      	cmp	r3, #0
90010422:	d065      	beq.n	900104f0 <tcp_process+0x7b8>
90010424:	687b      	ldr	r3, [r7, #4]
90010426:	6d1a      	ldr	r2, [r3, #80]	; 0x50
90010428:	4b38      	ldr	r3, [pc, #224]	; (9001050c <tcp_process+0x7d4>)
9001042a:	681b      	ldr	r3, [r3, #0]
9001042c:	429a      	cmp	r2, r3
9001042e:	d15f      	bne.n	900104f0 <tcp_process+0x7b8>
90010430:	687b      	ldr	r3, [r7, #4]
90010432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010434:	2b00      	cmp	r3, #0
90010436:	d15b      	bne.n	900104f0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
90010438:	6878      	ldr	r0, [r7, #4]
9001043a:	f7fe fcf1 	bl	9000ee20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
9001043e:	4b35      	ldr	r3, [pc, #212]	; (90010514 <tcp_process+0x7dc>)
90010440:	681b      	ldr	r3, [r3, #0]
90010442:	687a      	ldr	r2, [r7, #4]
90010444:	429a      	cmp	r2, r3
90010446:	d105      	bne.n	90010454 <tcp_process+0x71c>
90010448:	4b32      	ldr	r3, [pc, #200]	; (90010514 <tcp_process+0x7dc>)
9001044a:	681b      	ldr	r3, [r3, #0]
9001044c:	68db      	ldr	r3, [r3, #12]
9001044e:	4a31      	ldr	r2, [pc, #196]	; (90010514 <tcp_process+0x7dc>)
90010450:	6013      	str	r3, [r2, #0]
90010452:	e013      	b.n	9001047c <tcp_process+0x744>
90010454:	4b2f      	ldr	r3, [pc, #188]	; (90010514 <tcp_process+0x7dc>)
90010456:	681b      	ldr	r3, [r3, #0]
90010458:	60fb      	str	r3, [r7, #12]
9001045a:	e00c      	b.n	90010476 <tcp_process+0x73e>
9001045c:	68fb      	ldr	r3, [r7, #12]
9001045e:	68db      	ldr	r3, [r3, #12]
90010460:	687a      	ldr	r2, [r7, #4]
90010462:	429a      	cmp	r2, r3
90010464:	d104      	bne.n	90010470 <tcp_process+0x738>
90010466:	687b      	ldr	r3, [r7, #4]
90010468:	68da      	ldr	r2, [r3, #12]
9001046a:	68fb      	ldr	r3, [r7, #12]
9001046c:	60da      	str	r2, [r3, #12]
9001046e:	e005      	b.n	9001047c <tcp_process+0x744>
90010470:	68fb      	ldr	r3, [r7, #12]
90010472:	68db      	ldr	r3, [r3, #12]
90010474:	60fb      	str	r3, [r7, #12]
90010476:	68fb      	ldr	r3, [r7, #12]
90010478:	2b00      	cmp	r3, #0
9001047a:	d1ef      	bne.n	9001045c <tcp_process+0x724>
9001047c:	687b      	ldr	r3, [r7, #4]
9001047e:	2200      	movs	r2, #0
90010480:	60da      	str	r2, [r3, #12]
90010482:	4b1f      	ldr	r3, [pc, #124]	; (90010500 <tcp_process+0x7c8>)
90010484:	2201      	movs	r2, #1
90010486:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
90010488:	687b      	ldr	r3, [r7, #4]
9001048a:	220a      	movs	r2, #10
9001048c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
9001048e:	4b1d      	ldr	r3, [pc, #116]	; (90010504 <tcp_process+0x7cc>)
90010490:	681a      	ldr	r2, [r3, #0]
90010492:	687b      	ldr	r3, [r7, #4]
90010494:	60da      	str	r2, [r3, #12]
90010496:	4a1b      	ldr	r2, [pc, #108]	; (90010504 <tcp_process+0x7cc>)
90010498:	687b      	ldr	r3, [r7, #4]
9001049a:	6013      	str	r3, [r2, #0]
9001049c:	f003 f8a2 	bl	900135e4 <tcp_timer_needed>
      }
      break;
900104a0:	e026      	b.n	900104f0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
900104a2:	6878      	ldr	r0, [r7, #4]
900104a4:	f000 f93c 	bl	90010720 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
900104a8:	4b17      	ldr	r3, [pc, #92]	; (90010508 <tcp_process+0x7d0>)
900104aa:	781b      	ldrb	r3, [r3, #0]
900104ac:	f003 0310 	and.w	r3, r3, #16
900104b0:	2b00      	cmp	r3, #0
900104b2:	d01f      	beq.n	900104f4 <tcp_process+0x7bc>
900104b4:	687b      	ldr	r3, [r7, #4]
900104b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
900104b8:	4b14      	ldr	r3, [pc, #80]	; (9001050c <tcp_process+0x7d4>)
900104ba:	681b      	ldr	r3, [r3, #0]
900104bc:	429a      	cmp	r2, r3
900104be:	d119      	bne.n	900104f4 <tcp_process+0x7bc>
900104c0:	687b      	ldr	r3, [r7, #4]
900104c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900104c4:	2b00      	cmp	r3, #0
900104c6:	d115      	bne.n	900104f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
900104c8:	4b11      	ldr	r3, [pc, #68]	; (90010510 <tcp_process+0x7d8>)
900104ca:	781b      	ldrb	r3, [r3, #0]
900104cc:	f043 0310 	orr.w	r3, r3, #16
900104d0:	b2da      	uxtb	r2, r3
900104d2:	4b0f      	ldr	r3, [pc, #60]	; (90010510 <tcp_process+0x7d8>)
900104d4:	701a      	strb	r2, [r3, #0]
      }
      break;
900104d6:	e00d      	b.n	900104f4 <tcp_process+0x7bc>
    default:
      break;
900104d8:	bf00      	nop
900104da:	e00c      	b.n	900104f6 <tcp_process+0x7be>
      break;
900104dc:	bf00      	nop
900104de:	e00a      	b.n	900104f6 <tcp_process+0x7be>
      break;
900104e0:	bf00      	nop
900104e2:	e008      	b.n	900104f6 <tcp_process+0x7be>
      break;
900104e4:	bf00      	nop
900104e6:	e006      	b.n	900104f6 <tcp_process+0x7be>
      break;
900104e8:	bf00      	nop
900104ea:	e004      	b.n	900104f6 <tcp_process+0x7be>
      break;
900104ec:	bf00      	nop
900104ee:	e002      	b.n	900104f6 <tcp_process+0x7be>
      break;
900104f0:	bf00      	nop
900104f2:	e000      	b.n	900104f6 <tcp_process+0x7be>
      break;
900104f4:	bf00      	nop
  }
  return ERR_OK;
900104f6:	2300      	movs	r3, #0
}
900104f8:	4618      	mov	r0, r3
900104fa:	3724      	adds	r7, #36	; 0x24
900104fc:	46bd      	mov	sp, r7
900104fe:	bd90      	pop	{r4, r7, pc}
90010500:	2000d5dc 	.word	0x2000d5dc
90010504:	2000d5d8 	.word	0x2000d5d8
90010508:	2000d60c 	.word	0x2000d60c
9001050c:	2000d604 	.word	0x2000d604
90010510:	2000d60d 	.word	0x2000d60d
90010514:	2000d5d4 	.word	0x2000d5d4

90010518 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
90010518:	b590      	push	{r4, r7, lr}
9001051a:	b085      	sub	sp, #20
9001051c:	af00      	add	r7, sp, #0
9001051e:	6078      	str	r0, [r7, #4]
90010520:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
90010522:	687b      	ldr	r3, [r7, #4]
90010524:	2b00      	cmp	r3, #0
90010526:	d106      	bne.n	90010536 <tcp_oos_insert_segment+0x1e>
90010528:	4b3b      	ldr	r3, [pc, #236]	; (90010618 <tcp_oos_insert_segment+0x100>)
9001052a:	f240 421f 	movw	r2, #1055	; 0x41f
9001052e:	493b      	ldr	r1, [pc, #236]	; (9001061c <tcp_oos_insert_segment+0x104>)
90010530:	483b      	ldr	r0, [pc, #236]	; (90010620 <tcp_oos_insert_segment+0x108>)
90010532:	f006 fb85 	bl	90016c40 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
90010536:	687b      	ldr	r3, [r7, #4]
90010538:	68db      	ldr	r3, [r3, #12]
9001053a:	899b      	ldrh	r3, [r3, #12]
9001053c:	b29b      	uxth	r3, r3
9001053e:	4618      	mov	r0, r3
90010540:	f7fb f984 	bl	9000b84c <lwip_htons>
90010544:	4603      	mov	r3, r0
90010546:	b2db      	uxtb	r3, r3
90010548:	f003 0301 	and.w	r3, r3, #1
9001054c:	2b00      	cmp	r3, #0
9001054e:	d028      	beq.n	900105a2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
90010550:	6838      	ldr	r0, [r7, #0]
90010552:	f7fe f995 	bl	9000e880 <tcp_segs_free>
    next = NULL;
90010556:	2300      	movs	r3, #0
90010558:	603b      	str	r3, [r7, #0]
9001055a:	e056      	b.n	9001060a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
9001055c:	683b      	ldr	r3, [r7, #0]
9001055e:	68db      	ldr	r3, [r3, #12]
90010560:	899b      	ldrh	r3, [r3, #12]
90010562:	b29b      	uxth	r3, r3
90010564:	4618      	mov	r0, r3
90010566:	f7fb f971 	bl	9000b84c <lwip_htons>
9001056a:	4603      	mov	r3, r0
9001056c:	b2db      	uxtb	r3, r3
9001056e:	f003 0301 	and.w	r3, r3, #1
90010572:	2b00      	cmp	r3, #0
90010574:	d00d      	beq.n	90010592 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
90010576:	687b      	ldr	r3, [r7, #4]
90010578:	68db      	ldr	r3, [r3, #12]
9001057a:	899b      	ldrh	r3, [r3, #12]
9001057c:	b29c      	uxth	r4, r3
9001057e:	2001      	movs	r0, #1
90010580:	f7fb f964 	bl	9000b84c <lwip_htons>
90010584:	4603      	mov	r3, r0
90010586:	461a      	mov	r2, r3
90010588:	687b      	ldr	r3, [r7, #4]
9001058a:	68db      	ldr	r3, [r3, #12]
9001058c:	4322      	orrs	r2, r4
9001058e:	b292      	uxth	r2, r2
90010590:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
90010592:	683b      	ldr	r3, [r7, #0]
90010594:	60fb      	str	r3, [r7, #12]
      next = next->next;
90010596:	683b      	ldr	r3, [r7, #0]
90010598:	681b      	ldr	r3, [r3, #0]
9001059a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
9001059c:	68f8      	ldr	r0, [r7, #12]
9001059e:	f7fe f984 	bl	9000e8aa <tcp_seg_free>
    while (next &&
900105a2:	683b      	ldr	r3, [r7, #0]
900105a4:	2b00      	cmp	r3, #0
900105a6:	d00e      	beq.n	900105c6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
900105a8:	687b      	ldr	r3, [r7, #4]
900105aa:	891b      	ldrh	r3, [r3, #8]
900105ac:	461a      	mov	r2, r3
900105ae:	4b1d      	ldr	r3, [pc, #116]	; (90010624 <tcp_oos_insert_segment+0x10c>)
900105b0:	681b      	ldr	r3, [r3, #0]
900105b2:	441a      	add	r2, r3
900105b4:	683b      	ldr	r3, [r7, #0]
900105b6:	68db      	ldr	r3, [r3, #12]
900105b8:	685b      	ldr	r3, [r3, #4]
900105ba:	6839      	ldr	r1, [r7, #0]
900105bc:	8909      	ldrh	r1, [r1, #8]
900105be:	440b      	add	r3, r1
900105c0:	1ad3      	subs	r3, r2, r3
    while (next &&
900105c2:	2b00      	cmp	r3, #0
900105c4:	daca      	bge.n	9001055c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
900105c6:	683b      	ldr	r3, [r7, #0]
900105c8:	2b00      	cmp	r3, #0
900105ca:	d01e      	beq.n	9001060a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
900105cc:	687b      	ldr	r3, [r7, #4]
900105ce:	891b      	ldrh	r3, [r3, #8]
900105d0:	461a      	mov	r2, r3
900105d2:	4b14      	ldr	r3, [pc, #80]	; (90010624 <tcp_oos_insert_segment+0x10c>)
900105d4:	681b      	ldr	r3, [r3, #0]
900105d6:	441a      	add	r2, r3
900105d8:	683b      	ldr	r3, [r7, #0]
900105da:	68db      	ldr	r3, [r3, #12]
900105dc:	685b      	ldr	r3, [r3, #4]
900105de:	1ad3      	subs	r3, r2, r3
    if (next &&
900105e0:	2b00      	cmp	r3, #0
900105e2:	dd12      	ble.n	9001060a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
900105e4:	683b      	ldr	r3, [r7, #0]
900105e6:	68db      	ldr	r3, [r3, #12]
900105e8:	685b      	ldr	r3, [r3, #4]
900105ea:	b29a      	uxth	r2, r3
900105ec:	4b0d      	ldr	r3, [pc, #52]	; (90010624 <tcp_oos_insert_segment+0x10c>)
900105ee:	681b      	ldr	r3, [r3, #0]
900105f0:	b29b      	uxth	r3, r3
900105f2:	1ad3      	subs	r3, r2, r3
900105f4:	b29a      	uxth	r2, r3
900105f6:	687b      	ldr	r3, [r7, #4]
900105f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
900105fa:	687b      	ldr	r3, [r7, #4]
900105fc:	685a      	ldr	r2, [r3, #4]
900105fe:	687b      	ldr	r3, [r7, #4]
90010600:	891b      	ldrh	r3, [r3, #8]
90010602:	4619      	mov	r1, r3
90010604:	4610      	mov	r0, r2
90010606:	f7fc fb47 	bl	9000cc98 <pbuf_realloc>
    }
  }
  cseg->next = next;
9001060a:	687b      	ldr	r3, [r7, #4]
9001060c:	683a      	ldr	r2, [r7, #0]
9001060e:	601a      	str	r2, [r3, #0]
}
90010610:	bf00      	nop
90010612:	3714      	adds	r7, #20
90010614:	46bd      	mov	sp, r7
90010616:	bd90      	pop	{r4, r7, pc}
90010618:	9001981c 	.word	0x9001981c
9001061c:	90019adc 	.word	0x90019adc
90010620:	90019868 	.word	0x90019868
90010624:	2000d600 	.word	0x2000d600

90010628 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
90010628:	b5b0      	push	{r4, r5, r7, lr}
9001062a:	b086      	sub	sp, #24
9001062c:	af00      	add	r7, sp, #0
9001062e:	60f8      	str	r0, [r7, #12]
90010630:	60b9      	str	r1, [r7, #8]
90010632:	607a      	str	r2, [r7, #4]
90010634:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
90010636:	e03e      	b.n	900106b6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
90010638:	68bb      	ldr	r3, [r7, #8]
9001063a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
9001063c:	68bb      	ldr	r3, [r7, #8]
9001063e:	681b      	ldr	r3, [r3, #0]
90010640:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
90010642:	697b      	ldr	r3, [r7, #20]
90010644:	685b      	ldr	r3, [r3, #4]
90010646:	4618      	mov	r0, r3
90010648:	f7fc fd3a 	bl	9000d0c0 <pbuf_clen>
9001064c:	4603      	mov	r3, r0
9001064e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
90010650:	68fb      	ldr	r3, [r7, #12]
90010652:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90010656:	8a7a      	ldrh	r2, [r7, #18]
90010658:	429a      	cmp	r2, r3
9001065a:	d906      	bls.n	9001066a <tcp_free_acked_segments+0x42>
9001065c:	4b2a      	ldr	r3, [pc, #168]	; (90010708 <tcp_free_acked_segments+0xe0>)
9001065e:	f240 4257 	movw	r2, #1111	; 0x457
90010662:	492a      	ldr	r1, [pc, #168]	; (9001070c <tcp_free_acked_segments+0xe4>)
90010664:	482a      	ldr	r0, [pc, #168]	; (90010710 <tcp_free_acked_segments+0xe8>)
90010666:	f006 faeb 	bl	90016c40 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
9001066a:	68fb      	ldr	r3, [r7, #12]
9001066c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
90010670:	8a7b      	ldrh	r3, [r7, #18]
90010672:	1ad3      	subs	r3, r2, r3
90010674:	b29a      	uxth	r2, r3
90010676:	68fb      	ldr	r3, [r7, #12]
90010678:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
9001067c:	697b      	ldr	r3, [r7, #20]
9001067e:	891a      	ldrh	r2, [r3, #8]
90010680:	4b24      	ldr	r3, [pc, #144]	; (90010714 <tcp_free_acked_segments+0xec>)
90010682:	881b      	ldrh	r3, [r3, #0]
90010684:	4413      	add	r3, r2
90010686:	b29a      	uxth	r2, r3
90010688:	4b22      	ldr	r3, [pc, #136]	; (90010714 <tcp_free_acked_segments+0xec>)
9001068a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
9001068c:	6978      	ldr	r0, [r7, #20]
9001068e:	f7fe f90c 	bl	9000e8aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
90010692:	68fb      	ldr	r3, [r7, #12]
90010694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90010698:	2b00      	cmp	r3, #0
9001069a:	d00c      	beq.n	900106b6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
9001069c:	68bb      	ldr	r3, [r7, #8]
9001069e:	2b00      	cmp	r3, #0
900106a0:	d109      	bne.n	900106b6 <tcp_free_acked_segments+0x8e>
900106a2:	683b      	ldr	r3, [r7, #0]
900106a4:	2b00      	cmp	r3, #0
900106a6:	d106      	bne.n	900106b6 <tcp_free_acked_segments+0x8e>
900106a8:	4b17      	ldr	r3, [pc, #92]	; (90010708 <tcp_free_acked_segments+0xe0>)
900106aa:	f240 4261 	movw	r2, #1121	; 0x461
900106ae:	491a      	ldr	r1, [pc, #104]	; (90010718 <tcp_free_acked_segments+0xf0>)
900106b0:	4817      	ldr	r0, [pc, #92]	; (90010710 <tcp_free_acked_segments+0xe8>)
900106b2:	f006 fac5 	bl	90016c40 <iprintf>
  while (seg_list != NULL &&
900106b6:	68bb      	ldr	r3, [r7, #8]
900106b8:	2b00      	cmp	r3, #0
900106ba:	d020      	beq.n	900106fe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
900106bc:	68bb      	ldr	r3, [r7, #8]
900106be:	68db      	ldr	r3, [r3, #12]
900106c0:	685b      	ldr	r3, [r3, #4]
900106c2:	4618      	mov	r0, r3
900106c4:	f7fb f8d7 	bl	9000b876 <lwip_htonl>
900106c8:	4604      	mov	r4, r0
900106ca:	68bb      	ldr	r3, [r7, #8]
900106cc:	891b      	ldrh	r3, [r3, #8]
900106ce:	461d      	mov	r5, r3
900106d0:	68bb      	ldr	r3, [r7, #8]
900106d2:	68db      	ldr	r3, [r3, #12]
900106d4:	899b      	ldrh	r3, [r3, #12]
900106d6:	b29b      	uxth	r3, r3
900106d8:	4618      	mov	r0, r3
900106da:	f7fb f8b7 	bl	9000b84c <lwip_htons>
900106de:	4603      	mov	r3, r0
900106e0:	b2db      	uxtb	r3, r3
900106e2:	f003 0303 	and.w	r3, r3, #3
900106e6:	2b00      	cmp	r3, #0
900106e8:	d001      	beq.n	900106ee <tcp_free_acked_segments+0xc6>
900106ea:	2301      	movs	r3, #1
900106ec:	e000      	b.n	900106f0 <tcp_free_acked_segments+0xc8>
900106ee:	2300      	movs	r3, #0
900106f0:	442b      	add	r3, r5
900106f2:	18e2      	adds	r2, r4, r3
900106f4:	4b09      	ldr	r3, [pc, #36]	; (9001071c <tcp_free_acked_segments+0xf4>)
900106f6:	681b      	ldr	r3, [r3, #0]
900106f8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
900106fa:	2b00      	cmp	r3, #0
900106fc:	dd9c      	ble.n	90010638 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
900106fe:	68bb      	ldr	r3, [r7, #8]
}
90010700:	4618      	mov	r0, r3
90010702:	3718      	adds	r7, #24
90010704:	46bd      	mov	sp, r7
90010706:	bdb0      	pop	{r4, r5, r7, pc}
90010708:	9001981c 	.word	0x9001981c
9001070c:	90019b04 	.word	0x90019b04
90010710:	90019868 	.word	0x90019868
90010714:	2000d608 	.word	0x2000d608
90010718:	90019b2c 	.word	0x90019b2c
9001071c:	2000d604 	.word	0x2000d604

90010720 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
90010720:	b5b0      	push	{r4, r5, r7, lr}
90010722:	b094      	sub	sp, #80	; 0x50
90010724:	af00      	add	r7, sp, #0
90010726:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
90010728:	2300      	movs	r3, #0
9001072a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
9001072c:	687b      	ldr	r3, [r7, #4]
9001072e:	2b00      	cmp	r3, #0
90010730:	d106      	bne.n	90010740 <tcp_receive+0x20>
90010732:	4b91      	ldr	r3, [pc, #580]	; (90010978 <tcp_receive+0x258>)
90010734:	f240 427b 	movw	r2, #1147	; 0x47b
90010738:	4990      	ldr	r1, [pc, #576]	; (9001097c <tcp_receive+0x25c>)
9001073a:	4891      	ldr	r0, [pc, #580]	; (90010980 <tcp_receive+0x260>)
9001073c:	f006 fa80 	bl	90016c40 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
90010740:	687b      	ldr	r3, [r7, #4]
90010742:	7d1b      	ldrb	r3, [r3, #20]
90010744:	2b03      	cmp	r3, #3
90010746:	d806      	bhi.n	90010756 <tcp_receive+0x36>
90010748:	4b8b      	ldr	r3, [pc, #556]	; (90010978 <tcp_receive+0x258>)
9001074a:	f240 427c 	movw	r2, #1148	; 0x47c
9001074e:	498d      	ldr	r1, [pc, #564]	; (90010984 <tcp_receive+0x264>)
90010750:	488b      	ldr	r0, [pc, #556]	; (90010980 <tcp_receive+0x260>)
90010752:	f006 fa75 	bl	90016c40 <iprintf>

  if (flags & TCP_ACK) {
90010756:	4b8c      	ldr	r3, [pc, #560]	; (90010988 <tcp_receive+0x268>)
90010758:	781b      	ldrb	r3, [r3, #0]
9001075a:	f003 0310 	and.w	r3, r3, #16
9001075e:	2b00      	cmp	r3, #0
90010760:	f000 8264 	beq.w	90010c2c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
90010764:	687b      	ldr	r3, [r7, #4]
90010766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9001076a:	461a      	mov	r2, r3
9001076c:	687b      	ldr	r3, [r7, #4]
9001076e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90010770:	4413      	add	r3, r2
90010772:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
90010774:	687b      	ldr	r3, [r7, #4]
90010776:	6d5a      	ldr	r2, [r3, #84]	; 0x54
90010778:	4b84      	ldr	r3, [pc, #528]	; (9001098c <tcp_receive+0x26c>)
9001077a:	681b      	ldr	r3, [r3, #0]
9001077c:	1ad3      	subs	r3, r2, r3
9001077e:	2b00      	cmp	r3, #0
90010780:	db1b      	blt.n	900107ba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
90010782:	687b      	ldr	r3, [r7, #4]
90010784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
90010786:	4b81      	ldr	r3, [pc, #516]	; (9001098c <tcp_receive+0x26c>)
90010788:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
9001078a:	429a      	cmp	r2, r3
9001078c:	d106      	bne.n	9001079c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9001078e:	687b      	ldr	r3, [r7, #4]
90010790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
90010792:	4b7f      	ldr	r3, [pc, #508]	; (90010990 <tcp_receive+0x270>)
90010794:	681b      	ldr	r3, [r3, #0]
90010796:	1ad3      	subs	r3, r2, r3
90010798:	2b00      	cmp	r3, #0
9001079a:	db0e      	blt.n	900107ba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
9001079c:	687b      	ldr	r3, [r7, #4]
9001079e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
900107a0:	4b7b      	ldr	r3, [pc, #492]	; (90010990 <tcp_receive+0x270>)
900107a2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
900107a4:	429a      	cmp	r2, r3
900107a6:	d125      	bne.n	900107f4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
900107a8:	4b7a      	ldr	r3, [pc, #488]	; (90010994 <tcp_receive+0x274>)
900107aa:	681b      	ldr	r3, [r3, #0]
900107ac:	89db      	ldrh	r3, [r3, #14]
900107ae:	b29a      	uxth	r2, r3
900107b0:	687b      	ldr	r3, [r7, #4]
900107b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
900107b6:	429a      	cmp	r2, r3
900107b8:	d91c      	bls.n	900107f4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
900107ba:	4b76      	ldr	r3, [pc, #472]	; (90010994 <tcp_receive+0x274>)
900107bc:	681b      	ldr	r3, [r3, #0]
900107be:	89db      	ldrh	r3, [r3, #14]
900107c0:	b29a      	uxth	r2, r3
900107c2:	687b      	ldr	r3, [r7, #4]
900107c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
900107c8:	687b      	ldr	r3, [r7, #4]
900107ca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
900107ce:	687b      	ldr	r3, [r7, #4]
900107d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
900107d4:	429a      	cmp	r2, r3
900107d6:	d205      	bcs.n	900107e4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
900107d8:	687b      	ldr	r3, [r7, #4]
900107da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
900107de:	687b      	ldr	r3, [r7, #4]
900107e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
900107e4:	4b69      	ldr	r3, [pc, #420]	; (9001098c <tcp_receive+0x26c>)
900107e6:	681a      	ldr	r2, [r3, #0]
900107e8:	687b      	ldr	r3, [r7, #4]
900107ea:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
900107ec:	4b68      	ldr	r3, [pc, #416]	; (90010990 <tcp_receive+0x270>)
900107ee:	681a      	ldr	r2, [r3, #0]
900107f0:	687b      	ldr	r3, [r7, #4]
900107f2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
900107f4:	4b66      	ldr	r3, [pc, #408]	; (90010990 <tcp_receive+0x270>)
900107f6:	681a      	ldr	r2, [r3, #0]
900107f8:	687b      	ldr	r3, [r7, #4]
900107fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900107fc:	1ad3      	subs	r3, r2, r3
900107fe:	2b00      	cmp	r3, #0
90010800:	dc58      	bgt.n	900108b4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
90010802:	4b65      	ldr	r3, [pc, #404]	; (90010998 <tcp_receive+0x278>)
90010804:	881b      	ldrh	r3, [r3, #0]
90010806:	2b00      	cmp	r3, #0
90010808:	d14b      	bne.n	900108a2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
9001080a:	687b      	ldr	r3, [r7, #4]
9001080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9001080e:	687a      	ldr	r2, [r7, #4]
90010810:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
90010814:	4413      	add	r3, r2
90010816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90010818:	429a      	cmp	r2, r3
9001081a:	d142      	bne.n	900108a2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
9001081c:	687b      	ldr	r3, [r7, #4]
9001081e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
90010822:	2b00      	cmp	r3, #0
90010824:	db3d      	blt.n	900108a2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
90010826:	687b      	ldr	r3, [r7, #4]
90010828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9001082a:	4b59      	ldr	r3, [pc, #356]	; (90010990 <tcp_receive+0x270>)
9001082c:	681b      	ldr	r3, [r3, #0]
9001082e:	429a      	cmp	r2, r3
90010830:	d137      	bne.n	900108a2 <tcp_receive+0x182>
              found_dupack = 1;
90010832:	2301      	movs	r3, #1
90010834:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
90010836:	687b      	ldr	r3, [r7, #4]
90010838:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9001083c:	2bff      	cmp	r3, #255	; 0xff
9001083e:	d007      	beq.n	90010850 <tcp_receive+0x130>
                ++pcb->dupacks;
90010840:	687b      	ldr	r3, [r7, #4]
90010842:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
90010846:	3301      	adds	r3, #1
90010848:	b2da      	uxtb	r2, r3
9001084a:	687b      	ldr	r3, [r7, #4]
9001084c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
90010850:	687b      	ldr	r3, [r7, #4]
90010852:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
90010856:	2b03      	cmp	r3, #3
90010858:	d91b      	bls.n	90010892 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
9001085a:	687b      	ldr	r3, [r7, #4]
9001085c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
90010860:	687b      	ldr	r3, [r7, #4]
90010862:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90010864:	4413      	add	r3, r2
90010866:	b29a      	uxth	r2, r3
90010868:	687b      	ldr	r3, [r7, #4]
9001086a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9001086e:	429a      	cmp	r2, r3
90010870:	d30a      	bcc.n	90010888 <tcp_receive+0x168>
90010872:	687b      	ldr	r3, [r7, #4]
90010874:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
90010878:	687b      	ldr	r3, [r7, #4]
9001087a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9001087c:	4413      	add	r3, r2
9001087e:	b29a      	uxth	r2, r3
90010880:	687b      	ldr	r3, [r7, #4]
90010882:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
90010886:	e004      	b.n	90010892 <tcp_receive+0x172>
90010888:	687b      	ldr	r3, [r7, #4]
9001088a:	f64f 72ff 	movw	r2, #65535	; 0xffff
9001088e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
90010892:	687b      	ldr	r3, [r7, #4]
90010894:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
90010898:	2b02      	cmp	r3, #2
9001089a:	d902      	bls.n	900108a2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
9001089c:	6878      	ldr	r0, [r7, #4]
9001089e:	f002 fb43 	bl	90012f28 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
900108a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900108a4:	2b00      	cmp	r3, #0
900108a6:	f040 8161 	bne.w	90010b6c <tcp_receive+0x44c>
        pcb->dupacks = 0;
900108aa:	687b      	ldr	r3, [r7, #4]
900108ac:	2200      	movs	r2, #0
900108ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
900108b2:	e15b      	b.n	90010b6c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
900108b4:	4b36      	ldr	r3, [pc, #216]	; (90010990 <tcp_receive+0x270>)
900108b6:	681a      	ldr	r2, [r3, #0]
900108b8:	687b      	ldr	r3, [r7, #4]
900108ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900108bc:	1ad3      	subs	r3, r2, r3
900108be:	3b01      	subs	r3, #1
900108c0:	2b00      	cmp	r3, #0
900108c2:	f2c0 814e 	blt.w	90010b62 <tcp_receive+0x442>
900108c6:	4b32      	ldr	r3, [pc, #200]	; (90010990 <tcp_receive+0x270>)
900108c8:	681a      	ldr	r2, [r3, #0]
900108ca:	687b      	ldr	r3, [r7, #4]
900108cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900108ce:	1ad3      	subs	r3, r2, r3
900108d0:	2b00      	cmp	r3, #0
900108d2:	f300 8146 	bgt.w	90010b62 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
900108d6:	687b      	ldr	r3, [r7, #4]
900108d8:	8b5b      	ldrh	r3, [r3, #26]
900108da:	f003 0304 	and.w	r3, r3, #4
900108de:	2b00      	cmp	r3, #0
900108e0:	d010      	beq.n	90010904 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
900108e2:	687b      	ldr	r3, [r7, #4]
900108e4:	8b5b      	ldrh	r3, [r3, #26]
900108e6:	f023 0304 	bic.w	r3, r3, #4
900108ea:	b29a      	uxth	r2, r3
900108ec:	687b      	ldr	r3, [r7, #4]
900108ee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
900108f0:	687b      	ldr	r3, [r7, #4]
900108f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
900108f6:	687b      	ldr	r3, [r7, #4]
900108f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
900108fc:	687b      	ldr	r3, [r7, #4]
900108fe:	2200      	movs	r2, #0
90010900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
90010904:	687b      	ldr	r3, [r7, #4]
90010906:	2200      	movs	r2, #0
90010908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
9001090c:	687b      	ldr	r3, [r7, #4]
9001090e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
90010912:	10db      	asrs	r3, r3, #3
90010914:	b21b      	sxth	r3, r3
90010916:	b29a      	uxth	r2, r3
90010918:	687b      	ldr	r3, [r7, #4]
9001091a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9001091e:	b29b      	uxth	r3, r3
90010920:	4413      	add	r3, r2
90010922:	b29b      	uxth	r3, r3
90010924:	b21a      	sxth	r2, r3
90010926:	687b      	ldr	r3, [r7, #4]
90010928:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
9001092c:	4b18      	ldr	r3, [pc, #96]	; (90010990 <tcp_receive+0x270>)
9001092e:	681b      	ldr	r3, [r3, #0]
90010930:	b29a      	uxth	r2, r3
90010932:	687b      	ldr	r3, [r7, #4]
90010934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90010936:	b29b      	uxth	r3, r3
90010938:	1ad3      	subs	r3, r2, r3
9001093a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
9001093c:	687b      	ldr	r3, [r7, #4]
9001093e:	2200      	movs	r2, #0
90010940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
90010944:	4b12      	ldr	r3, [pc, #72]	; (90010990 <tcp_receive+0x270>)
90010946:	681a      	ldr	r2, [r3, #0]
90010948:	687b      	ldr	r3, [r7, #4]
9001094a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
9001094c:	687b      	ldr	r3, [r7, #4]
9001094e:	7d1b      	ldrb	r3, [r3, #20]
90010950:	2b03      	cmp	r3, #3
90010952:	f240 8097 	bls.w	90010a84 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
90010956:	687b      	ldr	r3, [r7, #4]
90010958:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9001095c:	687b      	ldr	r3, [r7, #4]
9001095e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
90010962:	429a      	cmp	r2, r3
90010964:	d245      	bcs.n	900109f2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
90010966:	687b      	ldr	r3, [r7, #4]
90010968:	8b5b      	ldrh	r3, [r3, #26]
9001096a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9001096e:	2b00      	cmp	r3, #0
90010970:	d014      	beq.n	9001099c <tcp_receive+0x27c>
90010972:	2301      	movs	r3, #1
90010974:	e013      	b.n	9001099e <tcp_receive+0x27e>
90010976:	bf00      	nop
90010978:	9001981c 	.word	0x9001981c
9001097c:	90019b4c 	.word	0x90019b4c
90010980:	90019868 	.word	0x90019868
90010984:	90019b68 	.word	0x90019b68
90010988:	2000d60c 	.word	0x2000d60c
9001098c:	2000d600 	.word	0x2000d600
90010990:	2000d604 	.word	0x2000d604
90010994:	2000d5f0 	.word	0x2000d5f0
90010998:	2000d60a 	.word	0x2000d60a
9001099c:	2302      	movs	r3, #2
9001099e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
900109a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
900109a6:	b29a      	uxth	r2, r3
900109a8:	687b      	ldr	r3, [r7, #4]
900109aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
900109ac:	fb12 f303 	smulbb	r3, r2, r3
900109b0:	b29b      	uxth	r3, r3
900109b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
900109b4:	4293      	cmp	r3, r2
900109b6:	bf28      	it	cs
900109b8:	4613      	movcs	r3, r2
900109ba:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
900109bc:	687b      	ldr	r3, [r7, #4]
900109be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
900109c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
900109c4:	4413      	add	r3, r2
900109c6:	b29a      	uxth	r2, r3
900109c8:	687b      	ldr	r3, [r7, #4]
900109ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
900109ce:	429a      	cmp	r2, r3
900109d0:	d309      	bcc.n	900109e6 <tcp_receive+0x2c6>
900109d2:	687b      	ldr	r3, [r7, #4]
900109d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
900109d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
900109da:	4413      	add	r3, r2
900109dc:	b29a      	uxth	r2, r3
900109de:	687b      	ldr	r3, [r7, #4]
900109e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
900109e4:	e04e      	b.n	90010a84 <tcp_receive+0x364>
900109e6:	687b      	ldr	r3, [r7, #4]
900109e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
900109ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
900109f0:	e048      	b.n	90010a84 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
900109f2:	687b      	ldr	r3, [r7, #4]
900109f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
900109f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
900109fa:	4413      	add	r3, r2
900109fc:	b29a      	uxth	r2, r3
900109fe:	687b      	ldr	r3, [r7, #4]
90010a00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
90010a04:	429a      	cmp	r2, r3
90010a06:	d309      	bcc.n	90010a1c <tcp_receive+0x2fc>
90010a08:	687b      	ldr	r3, [r7, #4]
90010a0a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
90010a0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
90010a10:	4413      	add	r3, r2
90010a12:	b29a      	uxth	r2, r3
90010a14:	687b      	ldr	r3, [r7, #4]
90010a16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
90010a1a:	e004      	b.n	90010a26 <tcp_receive+0x306>
90010a1c:	687b      	ldr	r3, [r7, #4]
90010a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
90010a22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
90010a26:	687b      	ldr	r3, [r7, #4]
90010a28:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
90010a2c:	687b      	ldr	r3, [r7, #4]
90010a2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
90010a32:	429a      	cmp	r2, r3
90010a34:	d326      	bcc.n	90010a84 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
90010a36:	687b      	ldr	r3, [r7, #4]
90010a38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
90010a3c:	687b      	ldr	r3, [r7, #4]
90010a3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
90010a42:	1ad3      	subs	r3, r2, r3
90010a44:	b29a      	uxth	r2, r3
90010a46:	687b      	ldr	r3, [r7, #4]
90010a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
90010a4c:	687b      	ldr	r3, [r7, #4]
90010a4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
90010a52:	687b      	ldr	r3, [r7, #4]
90010a54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90010a56:	4413      	add	r3, r2
90010a58:	b29a      	uxth	r2, r3
90010a5a:	687b      	ldr	r3, [r7, #4]
90010a5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
90010a60:	429a      	cmp	r2, r3
90010a62:	d30a      	bcc.n	90010a7a <tcp_receive+0x35a>
90010a64:	687b      	ldr	r3, [r7, #4]
90010a66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
90010a6a:	687b      	ldr	r3, [r7, #4]
90010a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90010a6e:	4413      	add	r3, r2
90010a70:	b29a      	uxth	r2, r3
90010a72:	687b      	ldr	r3, [r7, #4]
90010a74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
90010a78:	e004      	b.n	90010a84 <tcp_receive+0x364>
90010a7a:	687b      	ldr	r3, [r7, #4]
90010a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
90010a80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
90010a84:	687b      	ldr	r3, [r7, #4]
90010a86:	6f19      	ldr	r1, [r3, #112]	; 0x70
90010a88:	687b      	ldr	r3, [r7, #4]
90010a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010a8c:	4a98      	ldr	r2, [pc, #608]	; (90010cf0 <tcp_receive+0x5d0>)
90010a8e:	6878      	ldr	r0, [r7, #4]
90010a90:	f7ff fdca 	bl	90010628 <tcp_free_acked_segments>
90010a94:	4602      	mov	r2, r0
90010a96:	687b      	ldr	r3, [r7, #4]
90010a98:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
90010a9a:	687b      	ldr	r3, [r7, #4]
90010a9c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
90010a9e:	687b      	ldr	r3, [r7, #4]
90010aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90010aa2:	4a94      	ldr	r2, [pc, #592]	; (90010cf4 <tcp_receive+0x5d4>)
90010aa4:	6878      	ldr	r0, [r7, #4]
90010aa6:	f7ff fdbf 	bl	90010628 <tcp_free_acked_segments>
90010aaa:	4602      	mov	r2, r0
90010aac:	687b      	ldr	r3, [r7, #4]
90010aae:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
90010ab0:	687b      	ldr	r3, [r7, #4]
90010ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90010ab4:	2b00      	cmp	r3, #0
90010ab6:	d104      	bne.n	90010ac2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
90010ab8:	687b      	ldr	r3, [r7, #4]
90010aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
90010abe:	861a      	strh	r2, [r3, #48]	; 0x30
90010ac0:	e002      	b.n	90010ac8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
90010ac2:	687b      	ldr	r3, [r7, #4]
90010ac4:	2200      	movs	r2, #0
90010ac6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
90010ac8:	687b      	ldr	r3, [r7, #4]
90010aca:	2200      	movs	r2, #0
90010acc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
90010ace:	687b      	ldr	r3, [r7, #4]
90010ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010ad2:	2b00      	cmp	r3, #0
90010ad4:	d103      	bne.n	90010ade <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
90010ad6:	687b      	ldr	r3, [r7, #4]
90010ad8:	2200      	movs	r2, #0
90010ada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
90010ade:	687b      	ldr	r3, [r7, #4]
90010ae0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
90010ae4:	4b84      	ldr	r3, [pc, #528]	; (90010cf8 <tcp_receive+0x5d8>)
90010ae6:	881b      	ldrh	r3, [r3, #0]
90010ae8:	4413      	add	r3, r2
90010aea:	b29a      	uxth	r2, r3
90010aec:	687b      	ldr	r3, [r7, #4]
90010aee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
90010af2:	687b      	ldr	r3, [r7, #4]
90010af4:	8b5b      	ldrh	r3, [r3, #26]
90010af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90010afa:	2b00      	cmp	r3, #0
90010afc:	d035      	beq.n	90010b6a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
90010afe:	687b      	ldr	r3, [r7, #4]
90010b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90010b02:	2b00      	cmp	r3, #0
90010b04:	d118      	bne.n	90010b38 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
90010b06:	687b      	ldr	r3, [r7, #4]
90010b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010b0a:	2b00      	cmp	r3, #0
90010b0c:	d00c      	beq.n	90010b28 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
90010b0e:	687b      	ldr	r3, [r7, #4]
90010b10:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
90010b12:	687b      	ldr	r3, [r7, #4]
90010b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010b16:	68db      	ldr	r3, [r3, #12]
90010b18:	685b      	ldr	r3, [r3, #4]
90010b1a:	4618      	mov	r0, r3
90010b1c:	f7fa feab 	bl	9000b876 <lwip_htonl>
90010b20:	4603      	mov	r3, r0
90010b22:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
90010b24:	2b00      	cmp	r3, #0
90010b26:	dc20      	bgt.n	90010b6a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
90010b28:	687b      	ldr	r3, [r7, #4]
90010b2a:	8b5b      	ldrh	r3, [r3, #26]
90010b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
90010b30:	b29a      	uxth	r2, r3
90010b32:	687b      	ldr	r3, [r7, #4]
90010b34:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
90010b36:	e018      	b.n	90010b6a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
90010b38:	687b      	ldr	r3, [r7, #4]
90010b3a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
90010b3c:	687b      	ldr	r3, [r7, #4]
90010b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90010b40:	68db      	ldr	r3, [r3, #12]
90010b42:	685b      	ldr	r3, [r3, #4]
90010b44:	4618      	mov	r0, r3
90010b46:	f7fa fe96 	bl	9000b876 <lwip_htonl>
90010b4a:	4603      	mov	r3, r0
90010b4c:	1ae3      	subs	r3, r4, r3
90010b4e:	2b00      	cmp	r3, #0
90010b50:	dc0b      	bgt.n	90010b6a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
90010b52:	687b      	ldr	r3, [r7, #4]
90010b54:	8b5b      	ldrh	r3, [r3, #26]
90010b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
90010b5a:	b29a      	uxth	r2, r3
90010b5c:	687b      	ldr	r3, [r7, #4]
90010b5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
90010b60:	e003      	b.n	90010b6a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
90010b62:	6878      	ldr	r0, [r7, #4]
90010b64:	f002 fbce 	bl	90013304 <tcp_send_empty_ack>
90010b68:	e000      	b.n	90010b6c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
90010b6a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
90010b6c:	687b      	ldr	r3, [r7, #4]
90010b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90010b70:	2b00      	cmp	r3, #0
90010b72:	d05b      	beq.n	90010c2c <tcp_receive+0x50c>
90010b74:	687b      	ldr	r3, [r7, #4]
90010b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90010b78:	4b60      	ldr	r3, [pc, #384]	; (90010cfc <tcp_receive+0x5dc>)
90010b7a:	681b      	ldr	r3, [r3, #0]
90010b7c:	1ad3      	subs	r3, r2, r3
90010b7e:	2b00      	cmp	r3, #0
90010b80:	da54      	bge.n	90010c2c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
90010b82:	4b5f      	ldr	r3, [pc, #380]	; (90010d00 <tcp_receive+0x5e0>)
90010b84:	681b      	ldr	r3, [r3, #0]
90010b86:	b29a      	uxth	r2, r3
90010b88:	687b      	ldr	r3, [r7, #4]
90010b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90010b8c:	b29b      	uxth	r3, r3
90010b8e:	1ad3      	subs	r3, r2, r3
90010b90:	b29b      	uxth	r3, r3
90010b92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
90010b96:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
90010b9a:	687b      	ldr	r3, [r7, #4]
90010b9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
90010ba0:	10db      	asrs	r3, r3, #3
90010ba2:	b21b      	sxth	r3, r3
90010ba4:	b29b      	uxth	r3, r3
90010ba6:	1ad3      	subs	r3, r2, r3
90010ba8:	b29b      	uxth	r3, r3
90010baa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
90010bae:	687b      	ldr	r3, [r7, #4]
90010bb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
90010bb4:	b29a      	uxth	r2, r3
90010bb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
90010bba:	4413      	add	r3, r2
90010bbc:	b29b      	uxth	r3, r3
90010bbe:	b21a      	sxth	r2, r3
90010bc0:	687b      	ldr	r3, [r7, #4]
90010bc2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
90010bc4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
90010bc8:	2b00      	cmp	r3, #0
90010bca:	da05      	bge.n	90010bd8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
90010bcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
90010bd0:	425b      	negs	r3, r3
90010bd2:	b29b      	uxth	r3, r3
90010bd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
90010bd8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
90010bdc:	687b      	ldr	r3, [r7, #4]
90010bde:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
90010be2:	109b      	asrs	r3, r3, #2
90010be4:	b21b      	sxth	r3, r3
90010be6:	b29b      	uxth	r3, r3
90010be8:	1ad3      	subs	r3, r2, r3
90010bea:	b29b      	uxth	r3, r3
90010bec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
90010bf0:	687b      	ldr	r3, [r7, #4]
90010bf2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
90010bf6:	b29a      	uxth	r2, r3
90010bf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
90010bfc:	4413      	add	r3, r2
90010bfe:	b29b      	uxth	r3, r3
90010c00:	b21a      	sxth	r2, r3
90010c02:	687b      	ldr	r3, [r7, #4]
90010c04:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
90010c06:	687b      	ldr	r3, [r7, #4]
90010c08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
90010c0c:	10db      	asrs	r3, r3, #3
90010c0e:	b21b      	sxth	r3, r3
90010c10:	b29a      	uxth	r2, r3
90010c12:	687b      	ldr	r3, [r7, #4]
90010c14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
90010c18:	b29b      	uxth	r3, r3
90010c1a:	4413      	add	r3, r2
90010c1c:	b29b      	uxth	r3, r3
90010c1e:	b21a      	sxth	r2, r3
90010c20:	687b      	ldr	r3, [r7, #4]
90010c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
90010c26:	687b      	ldr	r3, [r7, #4]
90010c28:	2200      	movs	r2, #0
90010c2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
90010c2c:	4b35      	ldr	r3, [pc, #212]	; (90010d04 <tcp_receive+0x5e4>)
90010c2e:	881b      	ldrh	r3, [r3, #0]
90010c30:	2b00      	cmp	r3, #0
90010c32:	f000 84e2 	beq.w	900115fa <tcp_receive+0xeda>
90010c36:	687b      	ldr	r3, [r7, #4]
90010c38:	7d1b      	ldrb	r3, [r3, #20]
90010c3a:	2b06      	cmp	r3, #6
90010c3c:	f200 84dd 	bhi.w	900115fa <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
90010c40:	687b      	ldr	r3, [r7, #4]
90010c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90010c44:	4b30      	ldr	r3, [pc, #192]	; (90010d08 <tcp_receive+0x5e8>)
90010c46:	681b      	ldr	r3, [r3, #0]
90010c48:	1ad3      	subs	r3, r2, r3
90010c4a:	3b01      	subs	r3, #1
90010c4c:	2b00      	cmp	r3, #0
90010c4e:	f2c0 808f 	blt.w	90010d70 <tcp_receive+0x650>
90010c52:	687b      	ldr	r3, [r7, #4]
90010c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90010c56:	4b2b      	ldr	r3, [pc, #172]	; (90010d04 <tcp_receive+0x5e4>)
90010c58:	881b      	ldrh	r3, [r3, #0]
90010c5a:	4619      	mov	r1, r3
90010c5c:	4b2a      	ldr	r3, [pc, #168]	; (90010d08 <tcp_receive+0x5e8>)
90010c5e:	681b      	ldr	r3, [r3, #0]
90010c60:	440b      	add	r3, r1
90010c62:	1ad3      	subs	r3, r2, r3
90010c64:	3301      	adds	r3, #1
90010c66:	2b00      	cmp	r3, #0
90010c68:	f300 8082 	bgt.w	90010d70 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
90010c6c:	4b27      	ldr	r3, [pc, #156]	; (90010d0c <tcp_receive+0x5ec>)
90010c6e:	685b      	ldr	r3, [r3, #4]
90010c70:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
90010c72:	687b      	ldr	r3, [r7, #4]
90010c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90010c76:	4b24      	ldr	r3, [pc, #144]	; (90010d08 <tcp_receive+0x5e8>)
90010c78:	681b      	ldr	r3, [r3, #0]
90010c7a:	1ad3      	subs	r3, r2, r3
90010c7c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
90010c7e:	4b23      	ldr	r3, [pc, #140]	; (90010d0c <tcp_receive+0x5ec>)
90010c80:	685b      	ldr	r3, [r3, #4]
90010c82:	2b00      	cmp	r3, #0
90010c84:	d106      	bne.n	90010c94 <tcp_receive+0x574>
90010c86:	4b22      	ldr	r3, [pc, #136]	; (90010d10 <tcp_receive+0x5f0>)
90010c88:	f240 5294 	movw	r2, #1428	; 0x594
90010c8c:	4921      	ldr	r1, [pc, #132]	; (90010d14 <tcp_receive+0x5f4>)
90010c8e:	4822      	ldr	r0, [pc, #136]	; (90010d18 <tcp_receive+0x5f8>)
90010c90:	f005 ffd6 	bl	90016c40 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
90010c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010c96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90010c9a:	4293      	cmp	r3, r2
90010c9c:	d906      	bls.n	90010cac <tcp_receive+0x58c>
90010c9e:	4b1c      	ldr	r3, [pc, #112]	; (90010d10 <tcp_receive+0x5f0>)
90010ca0:	f240 5295 	movw	r2, #1429	; 0x595
90010ca4:	491d      	ldr	r1, [pc, #116]	; (90010d1c <tcp_receive+0x5fc>)
90010ca6:	481c      	ldr	r0, [pc, #112]	; (90010d18 <tcp_receive+0x5f8>)
90010ca8:	f005 ffca 	bl	90016c40 <iprintf>
      off = (u16_t)off32;
90010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010cae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
90010cb2:	4b16      	ldr	r3, [pc, #88]	; (90010d0c <tcp_receive+0x5ec>)
90010cb4:	685b      	ldr	r3, [r3, #4]
90010cb6:	891b      	ldrh	r3, [r3, #8]
90010cb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90010cbc:	429a      	cmp	r2, r3
90010cbe:	d906      	bls.n	90010cce <tcp_receive+0x5ae>
90010cc0:	4b13      	ldr	r3, [pc, #76]	; (90010d10 <tcp_receive+0x5f0>)
90010cc2:	f240 5297 	movw	r2, #1431	; 0x597
90010cc6:	4916      	ldr	r1, [pc, #88]	; (90010d20 <tcp_receive+0x600>)
90010cc8:	4813      	ldr	r0, [pc, #76]	; (90010d18 <tcp_receive+0x5f8>)
90010cca:	f005 ffb9 	bl	90016c40 <iprintf>
      inseg.len -= off;
90010cce:	4b0f      	ldr	r3, [pc, #60]	; (90010d0c <tcp_receive+0x5ec>)
90010cd0:	891a      	ldrh	r2, [r3, #8]
90010cd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90010cd6:	1ad3      	subs	r3, r2, r3
90010cd8:	b29a      	uxth	r2, r3
90010cda:	4b0c      	ldr	r3, [pc, #48]	; (90010d0c <tcp_receive+0x5ec>)
90010cdc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
90010cde:	4b0b      	ldr	r3, [pc, #44]	; (90010d0c <tcp_receive+0x5ec>)
90010ce0:	685b      	ldr	r3, [r3, #4]
90010ce2:	891a      	ldrh	r2, [r3, #8]
90010ce4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90010ce8:	1ad3      	subs	r3, r2, r3
90010cea:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
90010cec:	e02a      	b.n	90010d44 <tcp_receive+0x624>
90010cee:	bf00      	nop
90010cf0:	90019b84 	.word	0x90019b84
90010cf4:	90019b8c 	.word	0x90019b8c
90010cf8:	2000d608 	.word	0x2000d608
90010cfc:	2000d604 	.word	0x2000d604
90010d00:	2000d5c8 	.word	0x2000d5c8
90010d04:	2000d60a 	.word	0x2000d60a
90010d08:	2000d600 	.word	0x2000d600
90010d0c:	2000d5e0 	.word	0x2000d5e0
90010d10:	9001981c 	.word	0x9001981c
90010d14:	90019b94 	.word	0x90019b94
90010d18:	90019868 	.word	0x90019868
90010d1c:	90019ba4 	.word	0x90019ba4
90010d20:	90019bb4 	.word	0x90019bb4
        off -= p->len;
90010d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90010d26:	895b      	ldrh	r3, [r3, #10]
90010d28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90010d2c:	1ad3      	subs	r3, r2, r3
90010d2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
90010d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90010d34:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
90010d36:	811a      	strh	r2, [r3, #8]
        p->len = 0;
90010d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90010d3a:	2200      	movs	r2, #0
90010d3c:	815a      	strh	r2, [r3, #10]
        p = p->next;
90010d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90010d40:	681b      	ldr	r3, [r3, #0]
90010d42:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
90010d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90010d46:	895b      	ldrh	r3, [r3, #10]
90010d48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90010d4c:	429a      	cmp	r2, r3
90010d4e:	d8e9      	bhi.n	90010d24 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
90010d50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90010d54:	4619      	mov	r1, r3
90010d56:	6c78      	ldr	r0, [r7, #68]	; 0x44
90010d58:	f7fc f89e 	bl	9000ce98 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
90010d5c:	687b      	ldr	r3, [r7, #4]
90010d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010d60:	4a91      	ldr	r2, [pc, #580]	; (90010fa8 <tcp_receive+0x888>)
90010d62:	6013      	str	r3, [r2, #0]
90010d64:	4b91      	ldr	r3, [pc, #580]	; (90010fac <tcp_receive+0x88c>)
90010d66:	68db      	ldr	r3, [r3, #12]
90010d68:	4a8f      	ldr	r2, [pc, #572]	; (90010fa8 <tcp_receive+0x888>)
90010d6a:	6812      	ldr	r2, [r2, #0]
90010d6c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
90010d6e:	e00d      	b.n	90010d8c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
90010d70:	4b8d      	ldr	r3, [pc, #564]	; (90010fa8 <tcp_receive+0x888>)
90010d72:	681a      	ldr	r2, [r3, #0]
90010d74:	687b      	ldr	r3, [r7, #4]
90010d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010d78:	1ad3      	subs	r3, r2, r3
90010d7a:	2b00      	cmp	r3, #0
90010d7c:	da06      	bge.n	90010d8c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
90010d7e:	687b      	ldr	r3, [r7, #4]
90010d80:	8b5b      	ldrh	r3, [r3, #26]
90010d82:	f043 0302 	orr.w	r3, r3, #2
90010d86:	b29a      	uxth	r2, r3
90010d88:	687b      	ldr	r3, [r7, #4]
90010d8a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
90010d8c:	4b86      	ldr	r3, [pc, #536]	; (90010fa8 <tcp_receive+0x888>)
90010d8e:	681a      	ldr	r2, [r3, #0]
90010d90:	687b      	ldr	r3, [r7, #4]
90010d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010d94:	1ad3      	subs	r3, r2, r3
90010d96:	2b00      	cmp	r3, #0
90010d98:	f2c0 842a 	blt.w	900115f0 <tcp_receive+0xed0>
90010d9c:	4b82      	ldr	r3, [pc, #520]	; (90010fa8 <tcp_receive+0x888>)
90010d9e:	681a      	ldr	r2, [r3, #0]
90010da0:	687b      	ldr	r3, [r7, #4]
90010da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010da4:	6879      	ldr	r1, [r7, #4]
90010da6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
90010da8:	440b      	add	r3, r1
90010daa:	1ad3      	subs	r3, r2, r3
90010dac:	3301      	adds	r3, #1
90010dae:	2b00      	cmp	r3, #0
90010db0:	f300 841e 	bgt.w	900115f0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
90010db4:	687b      	ldr	r3, [r7, #4]
90010db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90010db8:	4b7b      	ldr	r3, [pc, #492]	; (90010fa8 <tcp_receive+0x888>)
90010dba:	681b      	ldr	r3, [r3, #0]
90010dbc:	429a      	cmp	r2, r3
90010dbe:	f040 829a 	bne.w	900112f6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
90010dc2:	4b7a      	ldr	r3, [pc, #488]	; (90010fac <tcp_receive+0x88c>)
90010dc4:	891c      	ldrh	r4, [r3, #8]
90010dc6:	4b79      	ldr	r3, [pc, #484]	; (90010fac <tcp_receive+0x88c>)
90010dc8:	68db      	ldr	r3, [r3, #12]
90010dca:	899b      	ldrh	r3, [r3, #12]
90010dcc:	b29b      	uxth	r3, r3
90010dce:	4618      	mov	r0, r3
90010dd0:	f7fa fd3c 	bl	9000b84c <lwip_htons>
90010dd4:	4603      	mov	r3, r0
90010dd6:	b2db      	uxtb	r3, r3
90010dd8:	f003 0303 	and.w	r3, r3, #3
90010ddc:	2b00      	cmp	r3, #0
90010dde:	d001      	beq.n	90010de4 <tcp_receive+0x6c4>
90010de0:	2301      	movs	r3, #1
90010de2:	e000      	b.n	90010de6 <tcp_receive+0x6c6>
90010de4:	2300      	movs	r3, #0
90010de6:	4423      	add	r3, r4
90010de8:	b29a      	uxth	r2, r3
90010dea:	4b71      	ldr	r3, [pc, #452]	; (90010fb0 <tcp_receive+0x890>)
90010dec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
90010dee:	687b      	ldr	r3, [r7, #4]
90010df0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
90010df2:	4b6f      	ldr	r3, [pc, #444]	; (90010fb0 <tcp_receive+0x890>)
90010df4:	881b      	ldrh	r3, [r3, #0]
90010df6:	429a      	cmp	r2, r3
90010df8:	d275      	bcs.n	90010ee6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
90010dfa:	4b6c      	ldr	r3, [pc, #432]	; (90010fac <tcp_receive+0x88c>)
90010dfc:	68db      	ldr	r3, [r3, #12]
90010dfe:	899b      	ldrh	r3, [r3, #12]
90010e00:	b29b      	uxth	r3, r3
90010e02:	4618      	mov	r0, r3
90010e04:	f7fa fd22 	bl	9000b84c <lwip_htons>
90010e08:	4603      	mov	r3, r0
90010e0a:	b2db      	uxtb	r3, r3
90010e0c:	f003 0301 	and.w	r3, r3, #1
90010e10:	2b00      	cmp	r3, #0
90010e12:	d01f      	beq.n	90010e54 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
90010e14:	4b65      	ldr	r3, [pc, #404]	; (90010fac <tcp_receive+0x88c>)
90010e16:	68db      	ldr	r3, [r3, #12]
90010e18:	899b      	ldrh	r3, [r3, #12]
90010e1a:	b29b      	uxth	r3, r3
90010e1c:	b21b      	sxth	r3, r3
90010e1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
90010e22:	b21c      	sxth	r4, r3
90010e24:	4b61      	ldr	r3, [pc, #388]	; (90010fac <tcp_receive+0x88c>)
90010e26:	68db      	ldr	r3, [r3, #12]
90010e28:	899b      	ldrh	r3, [r3, #12]
90010e2a:	b29b      	uxth	r3, r3
90010e2c:	4618      	mov	r0, r3
90010e2e:	f7fa fd0d 	bl	9000b84c <lwip_htons>
90010e32:	4603      	mov	r3, r0
90010e34:	b2db      	uxtb	r3, r3
90010e36:	b29b      	uxth	r3, r3
90010e38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
90010e3c:	b29b      	uxth	r3, r3
90010e3e:	4618      	mov	r0, r3
90010e40:	f7fa fd04 	bl	9000b84c <lwip_htons>
90010e44:	4603      	mov	r3, r0
90010e46:	b21b      	sxth	r3, r3
90010e48:	4323      	orrs	r3, r4
90010e4a:	b21a      	sxth	r2, r3
90010e4c:	4b57      	ldr	r3, [pc, #348]	; (90010fac <tcp_receive+0x88c>)
90010e4e:	68db      	ldr	r3, [r3, #12]
90010e50:	b292      	uxth	r2, r2
90010e52:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
90010e54:	687b      	ldr	r3, [r7, #4]
90010e56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
90010e58:	4b54      	ldr	r3, [pc, #336]	; (90010fac <tcp_receive+0x88c>)
90010e5a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
90010e5c:	4b53      	ldr	r3, [pc, #332]	; (90010fac <tcp_receive+0x88c>)
90010e5e:	68db      	ldr	r3, [r3, #12]
90010e60:	899b      	ldrh	r3, [r3, #12]
90010e62:	b29b      	uxth	r3, r3
90010e64:	4618      	mov	r0, r3
90010e66:	f7fa fcf1 	bl	9000b84c <lwip_htons>
90010e6a:	4603      	mov	r3, r0
90010e6c:	b2db      	uxtb	r3, r3
90010e6e:	f003 0302 	and.w	r3, r3, #2
90010e72:	2b00      	cmp	r3, #0
90010e74:	d005      	beq.n	90010e82 <tcp_receive+0x762>
            inseg.len -= 1;
90010e76:	4b4d      	ldr	r3, [pc, #308]	; (90010fac <tcp_receive+0x88c>)
90010e78:	891b      	ldrh	r3, [r3, #8]
90010e7a:	3b01      	subs	r3, #1
90010e7c:	b29a      	uxth	r2, r3
90010e7e:	4b4b      	ldr	r3, [pc, #300]	; (90010fac <tcp_receive+0x88c>)
90010e80:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
90010e82:	4b4a      	ldr	r3, [pc, #296]	; (90010fac <tcp_receive+0x88c>)
90010e84:	685b      	ldr	r3, [r3, #4]
90010e86:	4a49      	ldr	r2, [pc, #292]	; (90010fac <tcp_receive+0x88c>)
90010e88:	8912      	ldrh	r2, [r2, #8]
90010e8a:	4611      	mov	r1, r2
90010e8c:	4618      	mov	r0, r3
90010e8e:	f7fb ff03 	bl	9000cc98 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
90010e92:	4b46      	ldr	r3, [pc, #280]	; (90010fac <tcp_receive+0x88c>)
90010e94:	891c      	ldrh	r4, [r3, #8]
90010e96:	4b45      	ldr	r3, [pc, #276]	; (90010fac <tcp_receive+0x88c>)
90010e98:	68db      	ldr	r3, [r3, #12]
90010e9a:	899b      	ldrh	r3, [r3, #12]
90010e9c:	b29b      	uxth	r3, r3
90010e9e:	4618      	mov	r0, r3
90010ea0:	f7fa fcd4 	bl	9000b84c <lwip_htons>
90010ea4:	4603      	mov	r3, r0
90010ea6:	b2db      	uxtb	r3, r3
90010ea8:	f003 0303 	and.w	r3, r3, #3
90010eac:	2b00      	cmp	r3, #0
90010eae:	d001      	beq.n	90010eb4 <tcp_receive+0x794>
90010eb0:	2301      	movs	r3, #1
90010eb2:	e000      	b.n	90010eb6 <tcp_receive+0x796>
90010eb4:	2300      	movs	r3, #0
90010eb6:	4423      	add	r3, r4
90010eb8:	b29a      	uxth	r2, r3
90010eba:	4b3d      	ldr	r3, [pc, #244]	; (90010fb0 <tcp_receive+0x890>)
90010ebc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
90010ebe:	4b3c      	ldr	r3, [pc, #240]	; (90010fb0 <tcp_receive+0x890>)
90010ec0:	881b      	ldrh	r3, [r3, #0]
90010ec2:	461a      	mov	r2, r3
90010ec4:	4b38      	ldr	r3, [pc, #224]	; (90010fa8 <tcp_receive+0x888>)
90010ec6:	681b      	ldr	r3, [r3, #0]
90010ec8:	441a      	add	r2, r3
90010eca:	687b      	ldr	r3, [r7, #4]
90010ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010ece:	6879      	ldr	r1, [r7, #4]
90010ed0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
90010ed2:	440b      	add	r3, r1
90010ed4:	429a      	cmp	r2, r3
90010ed6:	d006      	beq.n	90010ee6 <tcp_receive+0x7c6>
90010ed8:	4b36      	ldr	r3, [pc, #216]	; (90010fb4 <tcp_receive+0x894>)
90010eda:	f240 52cb 	movw	r2, #1483	; 0x5cb
90010ede:	4936      	ldr	r1, [pc, #216]	; (90010fb8 <tcp_receive+0x898>)
90010ee0:	4836      	ldr	r0, [pc, #216]	; (90010fbc <tcp_receive+0x89c>)
90010ee2:	f005 fead 	bl	90016c40 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
90010ee6:	687b      	ldr	r3, [r7, #4]
90010ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90010eea:	2b00      	cmp	r3, #0
90010eec:	f000 80e7 	beq.w	900110be <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
90010ef0:	4b2e      	ldr	r3, [pc, #184]	; (90010fac <tcp_receive+0x88c>)
90010ef2:	68db      	ldr	r3, [r3, #12]
90010ef4:	899b      	ldrh	r3, [r3, #12]
90010ef6:	b29b      	uxth	r3, r3
90010ef8:	4618      	mov	r0, r3
90010efa:	f7fa fca7 	bl	9000b84c <lwip_htons>
90010efe:	4603      	mov	r3, r0
90010f00:	b2db      	uxtb	r3, r3
90010f02:	f003 0301 	and.w	r3, r3, #1
90010f06:	2b00      	cmp	r3, #0
90010f08:	d010      	beq.n	90010f2c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
90010f0a:	e00a      	b.n	90010f22 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
90010f0c:	687b      	ldr	r3, [r7, #4]
90010f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90010f10:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
90010f12:	687b      	ldr	r3, [r7, #4]
90010f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90010f16:	681a      	ldr	r2, [r3, #0]
90010f18:	687b      	ldr	r3, [r7, #4]
90010f1a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
90010f1c:	68f8      	ldr	r0, [r7, #12]
90010f1e:	f7fd fcc4 	bl	9000e8aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
90010f22:	687b      	ldr	r3, [r7, #4]
90010f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90010f26:	2b00      	cmp	r3, #0
90010f28:	d1f0      	bne.n	90010f0c <tcp_receive+0x7ec>
90010f2a:	e0c8      	b.n	900110be <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
90010f2c:	687b      	ldr	r3, [r7, #4]
90010f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90010f30:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
90010f32:	e052      	b.n	90010fda <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
90010f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90010f36:	68db      	ldr	r3, [r3, #12]
90010f38:	899b      	ldrh	r3, [r3, #12]
90010f3a:	b29b      	uxth	r3, r3
90010f3c:	4618      	mov	r0, r3
90010f3e:	f7fa fc85 	bl	9000b84c <lwip_htons>
90010f42:	4603      	mov	r3, r0
90010f44:	b2db      	uxtb	r3, r3
90010f46:	f003 0301 	and.w	r3, r3, #1
90010f4a:	2b00      	cmp	r3, #0
90010f4c:	d03d      	beq.n	90010fca <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
90010f4e:	4b17      	ldr	r3, [pc, #92]	; (90010fac <tcp_receive+0x88c>)
90010f50:	68db      	ldr	r3, [r3, #12]
90010f52:	899b      	ldrh	r3, [r3, #12]
90010f54:	b29b      	uxth	r3, r3
90010f56:	4618      	mov	r0, r3
90010f58:	f7fa fc78 	bl	9000b84c <lwip_htons>
90010f5c:	4603      	mov	r3, r0
90010f5e:	b2db      	uxtb	r3, r3
90010f60:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
90010f64:	2b00      	cmp	r3, #0
90010f66:	d130      	bne.n	90010fca <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
90010f68:	4b10      	ldr	r3, [pc, #64]	; (90010fac <tcp_receive+0x88c>)
90010f6a:	68db      	ldr	r3, [r3, #12]
90010f6c:	899b      	ldrh	r3, [r3, #12]
90010f6e:	b29c      	uxth	r4, r3
90010f70:	2001      	movs	r0, #1
90010f72:	f7fa fc6b 	bl	9000b84c <lwip_htons>
90010f76:	4603      	mov	r3, r0
90010f78:	461a      	mov	r2, r3
90010f7a:	4b0c      	ldr	r3, [pc, #48]	; (90010fac <tcp_receive+0x88c>)
90010f7c:	68db      	ldr	r3, [r3, #12]
90010f7e:	4322      	orrs	r2, r4
90010f80:	b292      	uxth	r2, r2
90010f82:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
90010f84:	4b09      	ldr	r3, [pc, #36]	; (90010fac <tcp_receive+0x88c>)
90010f86:	891c      	ldrh	r4, [r3, #8]
90010f88:	4b08      	ldr	r3, [pc, #32]	; (90010fac <tcp_receive+0x88c>)
90010f8a:	68db      	ldr	r3, [r3, #12]
90010f8c:	899b      	ldrh	r3, [r3, #12]
90010f8e:	b29b      	uxth	r3, r3
90010f90:	4618      	mov	r0, r3
90010f92:	f7fa fc5b 	bl	9000b84c <lwip_htons>
90010f96:	4603      	mov	r3, r0
90010f98:	b2db      	uxtb	r3, r3
90010f9a:	f003 0303 	and.w	r3, r3, #3
90010f9e:	2b00      	cmp	r3, #0
90010fa0:	d00e      	beq.n	90010fc0 <tcp_receive+0x8a0>
90010fa2:	2301      	movs	r3, #1
90010fa4:	e00d      	b.n	90010fc2 <tcp_receive+0x8a2>
90010fa6:	bf00      	nop
90010fa8:	2000d600 	.word	0x2000d600
90010fac:	2000d5e0 	.word	0x2000d5e0
90010fb0:	2000d60a 	.word	0x2000d60a
90010fb4:	9001981c 	.word	0x9001981c
90010fb8:	90019bc4 	.word	0x90019bc4
90010fbc:	90019868 	.word	0x90019868
90010fc0:	2300      	movs	r3, #0
90010fc2:	4423      	add	r3, r4
90010fc4:	b29a      	uxth	r2, r3
90010fc6:	4b98      	ldr	r3, [pc, #608]	; (90011228 <tcp_receive+0xb08>)
90010fc8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
90010fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90010fcc:	613b      	str	r3, [r7, #16]
              next = next->next;
90010fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90010fd0:	681b      	ldr	r3, [r3, #0]
90010fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
90010fd4:	6938      	ldr	r0, [r7, #16]
90010fd6:	f7fd fc68 	bl	9000e8aa <tcp_seg_free>
            while (next &&
90010fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90010fdc:	2b00      	cmp	r3, #0
90010fde:	d00e      	beq.n	90010ffe <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
90010fe0:	4b91      	ldr	r3, [pc, #580]	; (90011228 <tcp_receive+0xb08>)
90010fe2:	881b      	ldrh	r3, [r3, #0]
90010fe4:	461a      	mov	r2, r3
90010fe6:	4b91      	ldr	r3, [pc, #580]	; (9001122c <tcp_receive+0xb0c>)
90010fe8:	681b      	ldr	r3, [r3, #0]
90010fea:	441a      	add	r2, r3
90010fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90010fee:	68db      	ldr	r3, [r3, #12]
90010ff0:	685b      	ldr	r3, [r3, #4]
90010ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
90010ff4:	8909      	ldrh	r1, [r1, #8]
90010ff6:	440b      	add	r3, r1
90010ff8:	1ad3      	subs	r3, r2, r3
            while (next &&
90010ffa:	2b00      	cmp	r3, #0
90010ffc:	da9a      	bge.n	90010f34 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
90010ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90011000:	2b00      	cmp	r3, #0
90011002:	d059      	beq.n	900110b8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
90011004:	4b88      	ldr	r3, [pc, #544]	; (90011228 <tcp_receive+0xb08>)
90011006:	881b      	ldrh	r3, [r3, #0]
90011008:	461a      	mov	r2, r3
9001100a:	4b88      	ldr	r3, [pc, #544]	; (9001122c <tcp_receive+0xb0c>)
9001100c:	681b      	ldr	r3, [r3, #0]
9001100e:	441a      	add	r2, r3
90011010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90011012:	68db      	ldr	r3, [r3, #12]
90011014:	685b      	ldr	r3, [r3, #4]
90011016:	1ad3      	subs	r3, r2, r3
            if (next &&
90011018:	2b00      	cmp	r3, #0
9001101a:	dd4d      	ble.n	900110b8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
9001101c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9001101e:	68db      	ldr	r3, [r3, #12]
90011020:	685b      	ldr	r3, [r3, #4]
90011022:	b29a      	uxth	r2, r3
90011024:	4b81      	ldr	r3, [pc, #516]	; (9001122c <tcp_receive+0xb0c>)
90011026:	681b      	ldr	r3, [r3, #0]
90011028:	b29b      	uxth	r3, r3
9001102a:	1ad3      	subs	r3, r2, r3
9001102c:	b29a      	uxth	r2, r3
9001102e:	4b80      	ldr	r3, [pc, #512]	; (90011230 <tcp_receive+0xb10>)
90011030:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
90011032:	4b7f      	ldr	r3, [pc, #508]	; (90011230 <tcp_receive+0xb10>)
90011034:	68db      	ldr	r3, [r3, #12]
90011036:	899b      	ldrh	r3, [r3, #12]
90011038:	b29b      	uxth	r3, r3
9001103a:	4618      	mov	r0, r3
9001103c:	f7fa fc06 	bl	9000b84c <lwip_htons>
90011040:	4603      	mov	r3, r0
90011042:	b2db      	uxtb	r3, r3
90011044:	f003 0302 	and.w	r3, r3, #2
90011048:	2b00      	cmp	r3, #0
9001104a:	d005      	beq.n	90011058 <tcp_receive+0x938>
                inseg.len -= 1;
9001104c:	4b78      	ldr	r3, [pc, #480]	; (90011230 <tcp_receive+0xb10>)
9001104e:	891b      	ldrh	r3, [r3, #8]
90011050:	3b01      	subs	r3, #1
90011052:	b29a      	uxth	r2, r3
90011054:	4b76      	ldr	r3, [pc, #472]	; (90011230 <tcp_receive+0xb10>)
90011056:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
90011058:	4b75      	ldr	r3, [pc, #468]	; (90011230 <tcp_receive+0xb10>)
9001105a:	685b      	ldr	r3, [r3, #4]
9001105c:	4a74      	ldr	r2, [pc, #464]	; (90011230 <tcp_receive+0xb10>)
9001105e:	8912      	ldrh	r2, [r2, #8]
90011060:	4611      	mov	r1, r2
90011062:	4618      	mov	r0, r3
90011064:	f7fb fe18 	bl	9000cc98 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
90011068:	4b71      	ldr	r3, [pc, #452]	; (90011230 <tcp_receive+0xb10>)
9001106a:	891c      	ldrh	r4, [r3, #8]
9001106c:	4b70      	ldr	r3, [pc, #448]	; (90011230 <tcp_receive+0xb10>)
9001106e:	68db      	ldr	r3, [r3, #12]
90011070:	899b      	ldrh	r3, [r3, #12]
90011072:	b29b      	uxth	r3, r3
90011074:	4618      	mov	r0, r3
90011076:	f7fa fbe9 	bl	9000b84c <lwip_htons>
9001107a:	4603      	mov	r3, r0
9001107c:	b2db      	uxtb	r3, r3
9001107e:	f003 0303 	and.w	r3, r3, #3
90011082:	2b00      	cmp	r3, #0
90011084:	d001      	beq.n	9001108a <tcp_receive+0x96a>
90011086:	2301      	movs	r3, #1
90011088:	e000      	b.n	9001108c <tcp_receive+0x96c>
9001108a:	2300      	movs	r3, #0
9001108c:	4423      	add	r3, r4
9001108e:	b29a      	uxth	r2, r3
90011090:	4b65      	ldr	r3, [pc, #404]	; (90011228 <tcp_receive+0xb08>)
90011092:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
90011094:	4b64      	ldr	r3, [pc, #400]	; (90011228 <tcp_receive+0xb08>)
90011096:	881b      	ldrh	r3, [r3, #0]
90011098:	461a      	mov	r2, r3
9001109a:	4b64      	ldr	r3, [pc, #400]	; (9001122c <tcp_receive+0xb0c>)
9001109c:	681b      	ldr	r3, [r3, #0]
9001109e:	441a      	add	r2, r3
900110a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900110a2:	68db      	ldr	r3, [r3, #12]
900110a4:	685b      	ldr	r3, [r3, #4]
900110a6:	429a      	cmp	r2, r3
900110a8:	d006      	beq.n	900110b8 <tcp_receive+0x998>
900110aa:	4b62      	ldr	r3, [pc, #392]	; (90011234 <tcp_receive+0xb14>)
900110ac:	f240 52fc 	movw	r2, #1532	; 0x5fc
900110b0:	4961      	ldr	r1, [pc, #388]	; (90011238 <tcp_receive+0xb18>)
900110b2:	4862      	ldr	r0, [pc, #392]	; (9001123c <tcp_receive+0xb1c>)
900110b4:	f005 fdc4 	bl	90016c40 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
900110b8:	687b      	ldr	r3, [r7, #4]
900110ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
900110bc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
900110be:	4b5a      	ldr	r3, [pc, #360]	; (90011228 <tcp_receive+0xb08>)
900110c0:	881b      	ldrh	r3, [r3, #0]
900110c2:	461a      	mov	r2, r3
900110c4:	4b59      	ldr	r3, [pc, #356]	; (9001122c <tcp_receive+0xb0c>)
900110c6:	681b      	ldr	r3, [r3, #0]
900110c8:	441a      	add	r2, r3
900110ca:	687b      	ldr	r3, [r7, #4]
900110cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
900110ce:	687b      	ldr	r3, [r7, #4]
900110d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
900110d2:	4b55      	ldr	r3, [pc, #340]	; (90011228 <tcp_receive+0xb08>)
900110d4:	881b      	ldrh	r3, [r3, #0]
900110d6:	429a      	cmp	r2, r3
900110d8:	d206      	bcs.n	900110e8 <tcp_receive+0x9c8>
900110da:	4b56      	ldr	r3, [pc, #344]	; (90011234 <tcp_receive+0xb14>)
900110dc:	f240 6207 	movw	r2, #1543	; 0x607
900110e0:	4957      	ldr	r1, [pc, #348]	; (90011240 <tcp_receive+0xb20>)
900110e2:	4856      	ldr	r0, [pc, #344]	; (9001123c <tcp_receive+0xb1c>)
900110e4:	f005 fdac 	bl	90016c40 <iprintf>
        pcb->rcv_wnd -= tcplen;
900110e8:	687b      	ldr	r3, [r7, #4]
900110ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
900110ec:	4b4e      	ldr	r3, [pc, #312]	; (90011228 <tcp_receive+0xb08>)
900110ee:	881b      	ldrh	r3, [r3, #0]
900110f0:	1ad3      	subs	r3, r2, r3
900110f2:	b29a      	uxth	r2, r3
900110f4:	687b      	ldr	r3, [r7, #4]
900110f6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
900110f8:	6878      	ldr	r0, [r7, #4]
900110fa:	f7fc feb1 	bl	9000de60 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
900110fe:	4b4c      	ldr	r3, [pc, #304]	; (90011230 <tcp_receive+0xb10>)
90011100:	685b      	ldr	r3, [r3, #4]
90011102:	891b      	ldrh	r3, [r3, #8]
90011104:	2b00      	cmp	r3, #0
90011106:	d006      	beq.n	90011116 <tcp_receive+0x9f6>
          recv_data = inseg.p;
90011108:	4b49      	ldr	r3, [pc, #292]	; (90011230 <tcp_receive+0xb10>)
9001110a:	685b      	ldr	r3, [r3, #4]
9001110c:	4a4d      	ldr	r2, [pc, #308]	; (90011244 <tcp_receive+0xb24>)
9001110e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
90011110:	4b47      	ldr	r3, [pc, #284]	; (90011230 <tcp_receive+0xb10>)
90011112:	2200      	movs	r2, #0
90011114:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
90011116:	4b46      	ldr	r3, [pc, #280]	; (90011230 <tcp_receive+0xb10>)
90011118:	68db      	ldr	r3, [r3, #12]
9001111a:	899b      	ldrh	r3, [r3, #12]
9001111c:	b29b      	uxth	r3, r3
9001111e:	4618      	mov	r0, r3
90011120:	f7fa fb94 	bl	9000b84c <lwip_htons>
90011124:	4603      	mov	r3, r0
90011126:	b2db      	uxtb	r3, r3
90011128:	f003 0301 	and.w	r3, r3, #1
9001112c:	2b00      	cmp	r3, #0
9001112e:	f000 80b8 	beq.w	900112a2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
90011132:	4b45      	ldr	r3, [pc, #276]	; (90011248 <tcp_receive+0xb28>)
90011134:	781b      	ldrb	r3, [r3, #0]
90011136:	f043 0320 	orr.w	r3, r3, #32
9001113a:	b2da      	uxtb	r2, r3
9001113c:	4b42      	ldr	r3, [pc, #264]	; (90011248 <tcp_receive+0xb28>)
9001113e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
90011140:	e0af      	b.n	900112a2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
90011142:	687b      	ldr	r3, [r7, #4]
90011144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90011146:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
90011148:	687b      	ldr	r3, [r7, #4]
9001114a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9001114c:	68db      	ldr	r3, [r3, #12]
9001114e:	685b      	ldr	r3, [r3, #4]
90011150:	4a36      	ldr	r2, [pc, #216]	; (9001122c <tcp_receive+0xb0c>)
90011152:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
90011154:	68bb      	ldr	r3, [r7, #8]
90011156:	891b      	ldrh	r3, [r3, #8]
90011158:	461c      	mov	r4, r3
9001115a:	68bb      	ldr	r3, [r7, #8]
9001115c:	68db      	ldr	r3, [r3, #12]
9001115e:	899b      	ldrh	r3, [r3, #12]
90011160:	b29b      	uxth	r3, r3
90011162:	4618      	mov	r0, r3
90011164:	f7fa fb72 	bl	9000b84c <lwip_htons>
90011168:	4603      	mov	r3, r0
9001116a:	b2db      	uxtb	r3, r3
9001116c:	f003 0303 	and.w	r3, r3, #3
90011170:	2b00      	cmp	r3, #0
90011172:	d001      	beq.n	90011178 <tcp_receive+0xa58>
90011174:	2301      	movs	r3, #1
90011176:	e000      	b.n	9001117a <tcp_receive+0xa5a>
90011178:	2300      	movs	r3, #0
9001117a:	191a      	adds	r2, r3, r4
9001117c:	687b      	ldr	r3, [r7, #4]
9001117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90011180:	441a      	add	r2, r3
90011182:	687b      	ldr	r3, [r7, #4]
90011184:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
90011186:	687b      	ldr	r3, [r7, #4]
90011188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9001118a:	461c      	mov	r4, r3
9001118c:	68bb      	ldr	r3, [r7, #8]
9001118e:	891b      	ldrh	r3, [r3, #8]
90011190:	461d      	mov	r5, r3
90011192:	68bb      	ldr	r3, [r7, #8]
90011194:	68db      	ldr	r3, [r3, #12]
90011196:	899b      	ldrh	r3, [r3, #12]
90011198:	b29b      	uxth	r3, r3
9001119a:	4618      	mov	r0, r3
9001119c:	f7fa fb56 	bl	9000b84c <lwip_htons>
900111a0:	4603      	mov	r3, r0
900111a2:	b2db      	uxtb	r3, r3
900111a4:	f003 0303 	and.w	r3, r3, #3
900111a8:	2b00      	cmp	r3, #0
900111aa:	d001      	beq.n	900111b0 <tcp_receive+0xa90>
900111ac:	2301      	movs	r3, #1
900111ae:	e000      	b.n	900111b2 <tcp_receive+0xa92>
900111b0:	2300      	movs	r3, #0
900111b2:	442b      	add	r3, r5
900111b4:	429c      	cmp	r4, r3
900111b6:	d206      	bcs.n	900111c6 <tcp_receive+0xaa6>
900111b8:	4b1e      	ldr	r3, [pc, #120]	; (90011234 <tcp_receive+0xb14>)
900111ba:	f240 622b 	movw	r2, #1579	; 0x62b
900111be:	4923      	ldr	r1, [pc, #140]	; (9001124c <tcp_receive+0xb2c>)
900111c0:	481e      	ldr	r0, [pc, #120]	; (9001123c <tcp_receive+0xb1c>)
900111c2:	f005 fd3d 	bl	90016c40 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
900111c6:	68bb      	ldr	r3, [r7, #8]
900111c8:	891b      	ldrh	r3, [r3, #8]
900111ca:	461c      	mov	r4, r3
900111cc:	68bb      	ldr	r3, [r7, #8]
900111ce:	68db      	ldr	r3, [r3, #12]
900111d0:	899b      	ldrh	r3, [r3, #12]
900111d2:	b29b      	uxth	r3, r3
900111d4:	4618      	mov	r0, r3
900111d6:	f7fa fb39 	bl	9000b84c <lwip_htons>
900111da:	4603      	mov	r3, r0
900111dc:	b2db      	uxtb	r3, r3
900111de:	f003 0303 	and.w	r3, r3, #3
900111e2:	2b00      	cmp	r3, #0
900111e4:	d001      	beq.n	900111ea <tcp_receive+0xaca>
900111e6:	2301      	movs	r3, #1
900111e8:	e000      	b.n	900111ec <tcp_receive+0xacc>
900111ea:	2300      	movs	r3, #0
900111ec:	1919      	adds	r1, r3, r4
900111ee:	687b      	ldr	r3, [r7, #4]
900111f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
900111f2:	b28b      	uxth	r3, r1
900111f4:	1ad3      	subs	r3, r2, r3
900111f6:	b29a      	uxth	r2, r3
900111f8:	687b      	ldr	r3, [r7, #4]
900111fa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
900111fc:	6878      	ldr	r0, [r7, #4]
900111fe:	f7fc fe2f 	bl	9000de60 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
90011202:	68bb      	ldr	r3, [r7, #8]
90011204:	685b      	ldr	r3, [r3, #4]
90011206:	891b      	ldrh	r3, [r3, #8]
90011208:	2b00      	cmp	r3, #0
9001120a:	d028      	beq.n	9001125e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
9001120c:	4b0d      	ldr	r3, [pc, #52]	; (90011244 <tcp_receive+0xb24>)
9001120e:	681b      	ldr	r3, [r3, #0]
90011210:	2b00      	cmp	r3, #0
90011212:	d01d      	beq.n	90011250 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
90011214:	4b0b      	ldr	r3, [pc, #44]	; (90011244 <tcp_receive+0xb24>)
90011216:	681a      	ldr	r2, [r3, #0]
90011218:	68bb      	ldr	r3, [r7, #8]
9001121a:	685b      	ldr	r3, [r3, #4]
9001121c:	4619      	mov	r1, r3
9001121e:	4610      	mov	r0, r2
90011220:	f7fb ff8e 	bl	9000d140 <pbuf_cat>
90011224:	e018      	b.n	90011258 <tcp_receive+0xb38>
90011226:	bf00      	nop
90011228:	2000d60a 	.word	0x2000d60a
9001122c:	2000d600 	.word	0x2000d600
90011230:	2000d5e0 	.word	0x2000d5e0
90011234:	9001981c 	.word	0x9001981c
90011238:	90019bfc 	.word	0x90019bfc
9001123c:	90019868 	.word	0x90019868
90011240:	90019c38 	.word	0x90019c38
90011244:	2000d610 	.word	0x2000d610
90011248:	2000d60d 	.word	0x2000d60d
9001124c:	90019c58 	.word	0x90019c58
            } else {
              recv_data = cseg->p;
90011250:	68bb      	ldr	r3, [r7, #8]
90011252:	685b      	ldr	r3, [r3, #4]
90011254:	4a70      	ldr	r2, [pc, #448]	; (90011418 <tcp_receive+0xcf8>)
90011256:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
90011258:	68bb      	ldr	r3, [r7, #8]
9001125a:	2200      	movs	r2, #0
9001125c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
9001125e:	68bb      	ldr	r3, [r7, #8]
90011260:	68db      	ldr	r3, [r3, #12]
90011262:	899b      	ldrh	r3, [r3, #12]
90011264:	b29b      	uxth	r3, r3
90011266:	4618      	mov	r0, r3
90011268:	f7fa faf0 	bl	9000b84c <lwip_htons>
9001126c:	4603      	mov	r3, r0
9001126e:	b2db      	uxtb	r3, r3
90011270:	f003 0301 	and.w	r3, r3, #1
90011274:	2b00      	cmp	r3, #0
90011276:	d00d      	beq.n	90011294 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
90011278:	4b68      	ldr	r3, [pc, #416]	; (9001141c <tcp_receive+0xcfc>)
9001127a:	781b      	ldrb	r3, [r3, #0]
9001127c:	f043 0320 	orr.w	r3, r3, #32
90011280:	b2da      	uxtb	r2, r3
90011282:	4b66      	ldr	r3, [pc, #408]	; (9001141c <tcp_receive+0xcfc>)
90011284:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
90011286:	687b      	ldr	r3, [r7, #4]
90011288:	7d1b      	ldrb	r3, [r3, #20]
9001128a:	2b04      	cmp	r3, #4
9001128c:	d102      	bne.n	90011294 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
9001128e:	687b      	ldr	r3, [r7, #4]
90011290:	2207      	movs	r2, #7
90011292:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
90011294:	68bb      	ldr	r3, [r7, #8]
90011296:	681a      	ldr	r2, [r3, #0]
90011298:	687b      	ldr	r3, [r7, #4]
9001129a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
9001129c:	68b8      	ldr	r0, [r7, #8]
9001129e:	f7fd fb04 	bl	9000e8aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
900112a2:	687b      	ldr	r3, [r7, #4]
900112a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900112a6:	2b00      	cmp	r3, #0
900112a8:	d008      	beq.n	900112bc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
900112aa:	687b      	ldr	r3, [r7, #4]
900112ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900112ae:	68db      	ldr	r3, [r3, #12]
900112b0:	685a      	ldr	r2, [r3, #4]
900112b2:	687b      	ldr	r3, [r7, #4]
900112b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
900112b6:	429a      	cmp	r2, r3
900112b8:	f43f af43 	beq.w	90011142 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
900112bc:	687b      	ldr	r3, [r7, #4]
900112be:	8b5b      	ldrh	r3, [r3, #26]
900112c0:	f003 0301 	and.w	r3, r3, #1
900112c4:	2b00      	cmp	r3, #0
900112c6:	d00e      	beq.n	900112e6 <tcp_receive+0xbc6>
900112c8:	687b      	ldr	r3, [r7, #4]
900112ca:	8b5b      	ldrh	r3, [r3, #26]
900112cc:	f023 0301 	bic.w	r3, r3, #1
900112d0:	b29a      	uxth	r2, r3
900112d2:	687b      	ldr	r3, [r7, #4]
900112d4:	835a      	strh	r2, [r3, #26]
900112d6:	687b      	ldr	r3, [r7, #4]
900112d8:	8b5b      	ldrh	r3, [r3, #26]
900112da:	f043 0302 	orr.w	r3, r3, #2
900112de:	b29a      	uxth	r2, r3
900112e0:	687b      	ldr	r3, [r7, #4]
900112e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
900112e4:	e188      	b.n	900115f8 <tcp_receive+0xed8>
        tcp_ack(pcb);
900112e6:	687b      	ldr	r3, [r7, #4]
900112e8:	8b5b      	ldrh	r3, [r3, #26]
900112ea:	f043 0301 	orr.w	r3, r3, #1
900112ee:	b29a      	uxth	r2, r3
900112f0:	687b      	ldr	r3, [r7, #4]
900112f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
900112f4:	e180      	b.n	900115f8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
900112f6:	687b      	ldr	r3, [r7, #4]
900112f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900112fa:	2b00      	cmp	r3, #0
900112fc:	d106      	bne.n	9001130c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
900112fe:	4848      	ldr	r0, [pc, #288]	; (90011420 <tcp_receive+0xd00>)
90011300:	f7fd faec 	bl	9000e8dc <tcp_seg_copy>
90011304:	4602      	mov	r2, r0
90011306:	687b      	ldr	r3, [r7, #4]
90011308:	675a      	str	r2, [r3, #116]	; 0x74
9001130a:	e16d      	b.n	900115e8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
9001130c:	2300      	movs	r3, #0
9001130e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
90011310:	687b      	ldr	r3, [r7, #4]
90011312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90011314:	63bb      	str	r3, [r7, #56]	; 0x38
90011316:	e157      	b.n	900115c8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
90011318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001131a:	68db      	ldr	r3, [r3, #12]
9001131c:	685a      	ldr	r2, [r3, #4]
9001131e:	4b41      	ldr	r3, [pc, #260]	; (90011424 <tcp_receive+0xd04>)
90011320:	681b      	ldr	r3, [r3, #0]
90011322:	429a      	cmp	r2, r3
90011324:	d11d      	bne.n	90011362 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
90011326:	4b3e      	ldr	r3, [pc, #248]	; (90011420 <tcp_receive+0xd00>)
90011328:	891a      	ldrh	r2, [r3, #8]
9001132a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001132c:	891b      	ldrh	r3, [r3, #8]
9001132e:	429a      	cmp	r2, r3
90011330:	f240 814f 	bls.w	900115d2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
90011334:	483a      	ldr	r0, [pc, #232]	; (90011420 <tcp_receive+0xd00>)
90011336:	f7fd fad1 	bl	9000e8dc <tcp_seg_copy>
9001133a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
9001133c:	697b      	ldr	r3, [r7, #20]
9001133e:	2b00      	cmp	r3, #0
90011340:	f000 8149 	beq.w	900115d6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
90011344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90011346:	2b00      	cmp	r3, #0
90011348:	d003      	beq.n	90011352 <tcp_receive+0xc32>
                    prev->next = cseg;
9001134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9001134c:	697a      	ldr	r2, [r7, #20]
9001134e:	601a      	str	r2, [r3, #0]
90011350:	e002      	b.n	90011358 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
90011352:	687b      	ldr	r3, [r7, #4]
90011354:	697a      	ldr	r2, [r7, #20]
90011356:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
90011358:	6bb9      	ldr	r1, [r7, #56]	; 0x38
9001135a:	6978      	ldr	r0, [r7, #20]
9001135c:	f7ff f8dc 	bl	90010518 <tcp_oos_insert_segment>
                }
                break;
90011360:	e139      	b.n	900115d6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
90011362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90011364:	2b00      	cmp	r3, #0
90011366:	d117      	bne.n	90011398 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
90011368:	4b2e      	ldr	r3, [pc, #184]	; (90011424 <tcp_receive+0xd04>)
9001136a:	681a      	ldr	r2, [r3, #0]
9001136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001136e:	68db      	ldr	r3, [r3, #12]
90011370:	685b      	ldr	r3, [r3, #4]
90011372:	1ad3      	subs	r3, r2, r3
90011374:	2b00      	cmp	r3, #0
90011376:	da57      	bge.n	90011428 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
90011378:	4829      	ldr	r0, [pc, #164]	; (90011420 <tcp_receive+0xd00>)
9001137a:	f7fd faaf 	bl	9000e8dc <tcp_seg_copy>
9001137e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
90011380:	69bb      	ldr	r3, [r7, #24]
90011382:	2b00      	cmp	r3, #0
90011384:	f000 8129 	beq.w	900115da <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
90011388:	687b      	ldr	r3, [r7, #4]
9001138a:	69ba      	ldr	r2, [r7, #24]
9001138c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
9001138e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
90011390:	69b8      	ldr	r0, [r7, #24]
90011392:	f7ff f8c1 	bl	90010518 <tcp_oos_insert_segment>
                  }
                  break;
90011396:	e120      	b.n	900115da <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
90011398:	4b22      	ldr	r3, [pc, #136]	; (90011424 <tcp_receive+0xd04>)
9001139a:	681a      	ldr	r2, [r3, #0]
9001139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9001139e:	68db      	ldr	r3, [r3, #12]
900113a0:	685b      	ldr	r3, [r3, #4]
900113a2:	1ad3      	subs	r3, r2, r3
900113a4:	3b01      	subs	r3, #1
900113a6:	2b00      	cmp	r3, #0
900113a8:	db3e      	blt.n	90011428 <tcp_receive+0xd08>
900113aa:	4b1e      	ldr	r3, [pc, #120]	; (90011424 <tcp_receive+0xd04>)
900113ac:	681a      	ldr	r2, [r3, #0]
900113ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900113b0:	68db      	ldr	r3, [r3, #12]
900113b2:	685b      	ldr	r3, [r3, #4]
900113b4:	1ad3      	subs	r3, r2, r3
900113b6:	3301      	adds	r3, #1
900113b8:	2b00      	cmp	r3, #0
900113ba:	dc35      	bgt.n	90011428 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
900113bc:	4818      	ldr	r0, [pc, #96]	; (90011420 <tcp_receive+0xd00>)
900113be:	f7fd fa8d 	bl	9000e8dc <tcp_seg_copy>
900113c2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
900113c4:	69fb      	ldr	r3, [r7, #28]
900113c6:	2b00      	cmp	r3, #0
900113c8:	f000 8109 	beq.w	900115de <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
900113cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900113ce:	68db      	ldr	r3, [r3, #12]
900113d0:	685b      	ldr	r3, [r3, #4]
900113d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
900113d4:	8912      	ldrh	r2, [r2, #8]
900113d6:	441a      	add	r2, r3
900113d8:	4b12      	ldr	r3, [pc, #72]	; (90011424 <tcp_receive+0xd04>)
900113da:	681b      	ldr	r3, [r3, #0]
900113dc:	1ad3      	subs	r3, r2, r3
900113de:	2b00      	cmp	r3, #0
900113e0:	dd12      	ble.n	90011408 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
900113e2:	4b10      	ldr	r3, [pc, #64]	; (90011424 <tcp_receive+0xd04>)
900113e4:	681b      	ldr	r3, [r3, #0]
900113e6:	b29a      	uxth	r2, r3
900113e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900113ea:	68db      	ldr	r3, [r3, #12]
900113ec:	685b      	ldr	r3, [r3, #4]
900113ee:	b29b      	uxth	r3, r3
900113f0:	1ad3      	subs	r3, r2, r3
900113f2:	b29a      	uxth	r2, r3
900113f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900113f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
900113f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900113fa:	685a      	ldr	r2, [r3, #4]
900113fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900113fe:	891b      	ldrh	r3, [r3, #8]
90011400:	4619      	mov	r1, r3
90011402:	4610      	mov	r0, r2
90011404:	f7fb fc48 	bl	9000cc98 <pbuf_realloc>
                    }
                    prev->next = cseg;
90011408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9001140a:	69fa      	ldr	r2, [r7, #28]
9001140c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
9001140e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
90011410:	69f8      	ldr	r0, [r7, #28]
90011412:	f7ff f881 	bl	90010518 <tcp_oos_insert_segment>
                  }
                  break;
90011416:	e0e2      	b.n	900115de <tcp_receive+0xebe>
90011418:	2000d610 	.word	0x2000d610
9001141c:	2000d60d 	.word	0x2000d60d
90011420:	2000d5e0 	.word	0x2000d5e0
90011424:	2000d600 	.word	0x2000d600
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
90011428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001142a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
9001142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001142e:	681b      	ldr	r3, [r3, #0]
90011430:	2b00      	cmp	r3, #0
90011432:	f040 80c6 	bne.w	900115c2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
90011436:	4b80      	ldr	r3, [pc, #512]	; (90011638 <tcp_receive+0xf18>)
90011438:	681a      	ldr	r2, [r3, #0]
9001143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001143c:	68db      	ldr	r3, [r3, #12]
9001143e:	685b      	ldr	r3, [r3, #4]
90011440:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
90011442:	2b00      	cmp	r3, #0
90011444:	f340 80bd 	ble.w	900115c2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
90011448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001144a:	68db      	ldr	r3, [r3, #12]
9001144c:	899b      	ldrh	r3, [r3, #12]
9001144e:	b29b      	uxth	r3, r3
90011450:	4618      	mov	r0, r3
90011452:	f7fa f9fb 	bl	9000b84c <lwip_htons>
90011456:	4603      	mov	r3, r0
90011458:	b2db      	uxtb	r3, r3
9001145a:	f003 0301 	and.w	r3, r3, #1
9001145e:	2b00      	cmp	r3, #0
90011460:	f040 80bf 	bne.w	900115e2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
90011464:	4875      	ldr	r0, [pc, #468]	; (9001163c <tcp_receive+0xf1c>)
90011466:	f7fd fa39 	bl	9000e8dc <tcp_seg_copy>
9001146a:	4602      	mov	r2, r0
9001146c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001146e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
90011470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90011472:	681b      	ldr	r3, [r3, #0]
90011474:	2b00      	cmp	r3, #0
90011476:	f000 80b6 	beq.w	900115e6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
9001147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001147c:	68db      	ldr	r3, [r3, #12]
9001147e:	685b      	ldr	r3, [r3, #4]
90011480:	6bba      	ldr	r2, [r7, #56]	; 0x38
90011482:	8912      	ldrh	r2, [r2, #8]
90011484:	441a      	add	r2, r3
90011486:	4b6c      	ldr	r3, [pc, #432]	; (90011638 <tcp_receive+0xf18>)
90011488:	681b      	ldr	r3, [r3, #0]
9001148a:	1ad3      	subs	r3, r2, r3
9001148c:	2b00      	cmp	r3, #0
9001148e:	dd12      	ble.n	900114b6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
90011490:	4b69      	ldr	r3, [pc, #420]	; (90011638 <tcp_receive+0xf18>)
90011492:	681b      	ldr	r3, [r3, #0]
90011494:	b29a      	uxth	r2, r3
90011496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90011498:	68db      	ldr	r3, [r3, #12]
9001149a:	685b      	ldr	r3, [r3, #4]
9001149c:	b29b      	uxth	r3, r3
9001149e:	1ad3      	subs	r3, r2, r3
900114a0:	b29a      	uxth	r2, r3
900114a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900114a4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
900114a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900114a8:	685a      	ldr	r2, [r3, #4]
900114aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900114ac:	891b      	ldrh	r3, [r3, #8]
900114ae:	4619      	mov	r1, r3
900114b0:	4610      	mov	r0, r2
900114b2:	f7fb fbf1 	bl	9000cc98 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
900114b6:	4b62      	ldr	r3, [pc, #392]	; (90011640 <tcp_receive+0xf20>)
900114b8:	881b      	ldrh	r3, [r3, #0]
900114ba:	461a      	mov	r2, r3
900114bc:	4b5e      	ldr	r3, [pc, #376]	; (90011638 <tcp_receive+0xf18>)
900114be:	681b      	ldr	r3, [r3, #0]
900114c0:	441a      	add	r2, r3
900114c2:	687b      	ldr	r3, [r7, #4]
900114c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900114c6:	6879      	ldr	r1, [r7, #4]
900114c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
900114ca:	440b      	add	r3, r1
900114cc:	1ad3      	subs	r3, r2, r3
900114ce:	2b00      	cmp	r3, #0
900114d0:	f340 8089 	ble.w	900115e6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
900114d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900114d6:	681b      	ldr	r3, [r3, #0]
900114d8:	68db      	ldr	r3, [r3, #12]
900114da:	899b      	ldrh	r3, [r3, #12]
900114dc:	b29b      	uxth	r3, r3
900114de:	4618      	mov	r0, r3
900114e0:	f7fa f9b4 	bl	9000b84c <lwip_htons>
900114e4:	4603      	mov	r3, r0
900114e6:	b2db      	uxtb	r3, r3
900114e8:	f003 0301 	and.w	r3, r3, #1
900114ec:	2b00      	cmp	r3, #0
900114ee:	d022      	beq.n	90011536 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
900114f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900114f2:	681b      	ldr	r3, [r3, #0]
900114f4:	68db      	ldr	r3, [r3, #12]
900114f6:	899b      	ldrh	r3, [r3, #12]
900114f8:	b29b      	uxth	r3, r3
900114fa:	b21b      	sxth	r3, r3
900114fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
90011500:	b21c      	sxth	r4, r3
90011502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90011504:	681b      	ldr	r3, [r3, #0]
90011506:	68db      	ldr	r3, [r3, #12]
90011508:	899b      	ldrh	r3, [r3, #12]
9001150a:	b29b      	uxth	r3, r3
9001150c:	4618      	mov	r0, r3
9001150e:	f7fa f99d 	bl	9000b84c <lwip_htons>
90011512:	4603      	mov	r3, r0
90011514:	b2db      	uxtb	r3, r3
90011516:	b29b      	uxth	r3, r3
90011518:	f003 033e 	and.w	r3, r3, #62	; 0x3e
9001151c:	b29b      	uxth	r3, r3
9001151e:	4618      	mov	r0, r3
90011520:	f7fa f994 	bl	9000b84c <lwip_htons>
90011524:	4603      	mov	r3, r0
90011526:	b21b      	sxth	r3, r3
90011528:	4323      	orrs	r3, r4
9001152a:	b21a      	sxth	r2, r3
9001152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001152e:	681b      	ldr	r3, [r3, #0]
90011530:	68db      	ldr	r3, [r3, #12]
90011532:	b292      	uxth	r2, r2
90011534:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
90011536:	687b      	ldr	r3, [r7, #4]
90011538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001153a:	b29a      	uxth	r2, r3
9001153c:	687b      	ldr	r3, [r7, #4]
9001153e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90011540:	4413      	add	r3, r2
90011542:	b299      	uxth	r1, r3
90011544:	4b3c      	ldr	r3, [pc, #240]	; (90011638 <tcp_receive+0xf18>)
90011546:	681b      	ldr	r3, [r3, #0]
90011548:	b29a      	uxth	r2, r3
9001154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001154c:	681b      	ldr	r3, [r3, #0]
9001154e:	1a8a      	subs	r2, r1, r2
90011550:	b292      	uxth	r2, r2
90011552:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
90011554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90011556:	681b      	ldr	r3, [r3, #0]
90011558:	685a      	ldr	r2, [r3, #4]
9001155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001155c:	681b      	ldr	r3, [r3, #0]
9001155e:	891b      	ldrh	r3, [r3, #8]
90011560:	4619      	mov	r1, r3
90011562:	4610      	mov	r0, r2
90011564:	f7fb fb98 	bl	9000cc98 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
90011568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001156a:	681b      	ldr	r3, [r3, #0]
9001156c:	891c      	ldrh	r4, [r3, #8]
9001156e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90011570:	681b      	ldr	r3, [r3, #0]
90011572:	68db      	ldr	r3, [r3, #12]
90011574:	899b      	ldrh	r3, [r3, #12]
90011576:	b29b      	uxth	r3, r3
90011578:	4618      	mov	r0, r3
9001157a:	f7fa f967 	bl	9000b84c <lwip_htons>
9001157e:	4603      	mov	r3, r0
90011580:	b2db      	uxtb	r3, r3
90011582:	f003 0303 	and.w	r3, r3, #3
90011586:	2b00      	cmp	r3, #0
90011588:	d001      	beq.n	9001158e <tcp_receive+0xe6e>
9001158a:	2301      	movs	r3, #1
9001158c:	e000      	b.n	90011590 <tcp_receive+0xe70>
9001158e:	2300      	movs	r3, #0
90011590:	4423      	add	r3, r4
90011592:	b29a      	uxth	r2, r3
90011594:	4b2a      	ldr	r3, [pc, #168]	; (90011640 <tcp_receive+0xf20>)
90011596:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
90011598:	4b29      	ldr	r3, [pc, #164]	; (90011640 <tcp_receive+0xf20>)
9001159a:	881b      	ldrh	r3, [r3, #0]
9001159c:	461a      	mov	r2, r3
9001159e:	4b26      	ldr	r3, [pc, #152]	; (90011638 <tcp_receive+0xf18>)
900115a0:	681b      	ldr	r3, [r3, #0]
900115a2:	441a      	add	r2, r3
900115a4:	687b      	ldr	r3, [r7, #4]
900115a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900115a8:	6879      	ldr	r1, [r7, #4]
900115aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
900115ac:	440b      	add	r3, r1
900115ae:	429a      	cmp	r2, r3
900115b0:	d019      	beq.n	900115e6 <tcp_receive+0xec6>
900115b2:	4b24      	ldr	r3, [pc, #144]	; (90011644 <tcp_receive+0xf24>)
900115b4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
900115b8:	4923      	ldr	r1, [pc, #140]	; (90011648 <tcp_receive+0xf28>)
900115ba:	4824      	ldr	r0, [pc, #144]	; (9001164c <tcp_receive+0xf2c>)
900115bc:	f005 fb40 	bl	90016c40 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
900115c0:	e011      	b.n	900115e6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
900115c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900115c4:	681b      	ldr	r3, [r3, #0]
900115c6:	63bb      	str	r3, [r7, #56]	; 0x38
900115c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900115ca:	2b00      	cmp	r3, #0
900115cc:	f47f aea4 	bne.w	90011318 <tcp_receive+0xbf8>
900115d0:	e00a      	b.n	900115e8 <tcp_receive+0xec8>
                break;
900115d2:	bf00      	nop
900115d4:	e008      	b.n	900115e8 <tcp_receive+0xec8>
                break;
900115d6:	bf00      	nop
900115d8:	e006      	b.n	900115e8 <tcp_receive+0xec8>
                  break;
900115da:	bf00      	nop
900115dc:	e004      	b.n	900115e8 <tcp_receive+0xec8>
                  break;
900115de:	bf00      	nop
900115e0:	e002      	b.n	900115e8 <tcp_receive+0xec8>
                  break;
900115e2:	bf00      	nop
900115e4:	e000      	b.n	900115e8 <tcp_receive+0xec8>
                break;
900115e6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
900115e8:	6878      	ldr	r0, [r7, #4]
900115ea:	f001 fe8b 	bl	90013304 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
900115ee:	e003      	b.n	900115f8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
900115f0:	6878      	ldr	r0, [r7, #4]
900115f2:	f001 fe87 	bl	90013304 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
900115f6:	e01a      	b.n	9001162e <tcp_receive+0xf0e>
900115f8:	e019      	b.n	9001162e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
900115fa:	4b0f      	ldr	r3, [pc, #60]	; (90011638 <tcp_receive+0xf18>)
900115fc:	681a      	ldr	r2, [r3, #0]
900115fe:	687b      	ldr	r3, [r7, #4]
90011600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90011602:	1ad3      	subs	r3, r2, r3
90011604:	2b00      	cmp	r3, #0
90011606:	db0a      	blt.n	9001161e <tcp_receive+0xefe>
90011608:	4b0b      	ldr	r3, [pc, #44]	; (90011638 <tcp_receive+0xf18>)
9001160a:	681a      	ldr	r2, [r3, #0]
9001160c:	687b      	ldr	r3, [r7, #4]
9001160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90011610:	6879      	ldr	r1, [r7, #4]
90011612:	8d09      	ldrh	r1, [r1, #40]	; 0x28
90011614:	440b      	add	r3, r1
90011616:	1ad3      	subs	r3, r2, r3
90011618:	3301      	adds	r3, #1
9001161a:	2b00      	cmp	r3, #0
9001161c:	dd07      	ble.n	9001162e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
9001161e:	687b      	ldr	r3, [r7, #4]
90011620:	8b5b      	ldrh	r3, [r3, #26]
90011622:	f043 0302 	orr.w	r3, r3, #2
90011626:	b29a      	uxth	r2, r3
90011628:	687b      	ldr	r3, [r7, #4]
9001162a:	835a      	strh	r2, [r3, #26]
    }
  }
}
9001162c:	e7ff      	b.n	9001162e <tcp_receive+0xf0e>
9001162e:	bf00      	nop
90011630:	3750      	adds	r7, #80	; 0x50
90011632:	46bd      	mov	sp, r7
90011634:	bdb0      	pop	{r4, r5, r7, pc}
90011636:	bf00      	nop
90011638:	2000d600 	.word	0x2000d600
9001163c:	2000d5e0 	.word	0x2000d5e0
90011640:	2000d60a 	.word	0x2000d60a
90011644:	9001981c 	.word	0x9001981c
90011648:	90019bc4 	.word	0x90019bc4
9001164c:	90019868 	.word	0x90019868

90011650 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
90011650:	b480      	push	{r7}
90011652:	b083      	sub	sp, #12
90011654:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
90011656:	4b15      	ldr	r3, [pc, #84]	; (900116ac <tcp_get_next_optbyte+0x5c>)
90011658:	881b      	ldrh	r3, [r3, #0]
9001165a:	1c5a      	adds	r2, r3, #1
9001165c:	b291      	uxth	r1, r2
9001165e:	4a13      	ldr	r2, [pc, #76]	; (900116ac <tcp_get_next_optbyte+0x5c>)
90011660:	8011      	strh	r1, [r2, #0]
90011662:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
90011664:	4b12      	ldr	r3, [pc, #72]	; (900116b0 <tcp_get_next_optbyte+0x60>)
90011666:	681b      	ldr	r3, [r3, #0]
90011668:	2b00      	cmp	r3, #0
9001166a:	d004      	beq.n	90011676 <tcp_get_next_optbyte+0x26>
9001166c:	4b11      	ldr	r3, [pc, #68]	; (900116b4 <tcp_get_next_optbyte+0x64>)
9001166e:	881b      	ldrh	r3, [r3, #0]
90011670:	88fa      	ldrh	r2, [r7, #6]
90011672:	429a      	cmp	r2, r3
90011674:	d208      	bcs.n	90011688 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
90011676:	4b10      	ldr	r3, [pc, #64]	; (900116b8 <tcp_get_next_optbyte+0x68>)
90011678:	681b      	ldr	r3, [r3, #0]
9001167a:	3314      	adds	r3, #20
9001167c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
9001167e:	88fb      	ldrh	r3, [r7, #6]
90011680:	683a      	ldr	r2, [r7, #0]
90011682:	4413      	add	r3, r2
90011684:	781b      	ldrb	r3, [r3, #0]
90011686:	e00b      	b.n	900116a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
90011688:	88fb      	ldrh	r3, [r7, #6]
9001168a:	b2da      	uxtb	r2, r3
9001168c:	4b09      	ldr	r3, [pc, #36]	; (900116b4 <tcp_get_next_optbyte+0x64>)
9001168e:	881b      	ldrh	r3, [r3, #0]
90011690:	b2db      	uxtb	r3, r3
90011692:	1ad3      	subs	r3, r2, r3
90011694:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
90011696:	4b06      	ldr	r3, [pc, #24]	; (900116b0 <tcp_get_next_optbyte+0x60>)
90011698:	681a      	ldr	r2, [r3, #0]
9001169a:	797b      	ldrb	r3, [r7, #5]
9001169c:	4413      	add	r3, r2
9001169e:	781b      	ldrb	r3, [r3, #0]
  }
}
900116a0:	4618      	mov	r0, r3
900116a2:	370c      	adds	r7, #12
900116a4:	46bd      	mov	sp, r7
900116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900116aa:	4770      	bx	lr
900116ac:	2000d5fc 	.word	0x2000d5fc
900116b0:	2000d5f8 	.word	0x2000d5f8
900116b4:	2000d5f6 	.word	0x2000d5f6
900116b8:	2000d5f0 	.word	0x2000d5f0

900116bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
900116bc:	b580      	push	{r7, lr}
900116be:	b084      	sub	sp, #16
900116c0:	af00      	add	r7, sp, #0
900116c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
900116c4:	687b      	ldr	r3, [r7, #4]
900116c6:	2b00      	cmp	r3, #0
900116c8:	d106      	bne.n	900116d8 <tcp_parseopt+0x1c>
900116ca:	4b32      	ldr	r3, [pc, #200]	; (90011794 <tcp_parseopt+0xd8>)
900116cc:	f240 727d 	movw	r2, #1917	; 0x77d
900116d0:	4931      	ldr	r1, [pc, #196]	; (90011798 <tcp_parseopt+0xdc>)
900116d2:	4832      	ldr	r0, [pc, #200]	; (9001179c <tcp_parseopt+0xe0>)
900116d4:	f005 fab4 	bl	90016c40 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
900116d8:	4b31      	ldr	r3, [pc, #196]	; (900117a0 <tcp_parseopt+0xe4>)
900116da:	881b      	ldrh	r3, [r3, #0]
900116dc:	2b00      	cmp	r3, #0
900116de:	d055      	beq.n	9001178c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
900116e0:	4b30      	ldr	r3, [pc, #192]	; (900117a4 <tcp_parseopt+0xe8>)
900116e2:	2200      	movs	r2, #0
900116e4:	801a      	strh	r2, [r3, #0]
900116e6:	e045      	b.n	90011774 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
900116e8:	f7ff ffb2 	bl	90011650 <tcp_get_next_optbyte>
900116ec:	4603      	mov	r3, r0
900116ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
900116f0:	7bfb      	ldrb	r3, [r7, #15]
900116f2:	2b02      	cmp	r3, #2
900116f4:	d006      	beq.n	90011704 <tcp_parseopt+0x48>
900116f6:	2b02      	cmp	r3, #2
900116f8:	dc2b      	bgt.n	90011752 <tcp_parseopt+0x96>
900116fa:	2b00      	cmp	r3, #0
900116fc:	d041      	beq.n	90011782 <tcp_parseopt+0xc6>
900116fe:	2b01      	cmp	r3, #1
90011700:	d127      	bne.n	90011752 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
90011702:	e037      	b.n	90011774 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
90011704:	f7ff ffa4 	bl	90011650 <tcp_get_next_optbyte>
90011708:	4603      	mov	r3, r0
9001170a:	2b04      	cmp	r3, #4
9001170c:	d13b      	bne.n	90011786 <tcp_parseopt+0xca>
9001170e:	4b25      	ldr	r3, [pc, #148]	; (900117a4 <tcp_parseopt+0xe8>)
90011710:	881b      	ldrh	r3, [r3, #0]
90011712:	3301      	adds	r3, #1
90011714:	4a22      	ldr	r2, [pc, #136]	; (900117a0 <tcp_parseopt+0xe4>)
90011716:	8812      	ldrh	r2, [r2, #0]
90011718:	4293      	cmp	r3, r2
9001171a:	da34      	bge.n	90011786 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
9001171c:	f7ff ff98 	bl	90011650 <tcp_get_next_optbyte>
90011720:	4603      	mov	r3, r0
90011722:	b29b      	uxth	r3, r3
90011724:	021b      	lsls	r3, r3, #8
90011726:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
90011728:	f7ff ff92 	bl	90011650 <tcp_get_next_optbyte>
9001172c:	4603      	mov	r3, r0
9001172e:	b29a      	uxth	r2, r3
90011730:	89bb      	ldrh	r3, [r7, #12]
90011732:	4313      	orrs	r3, r2
90011734:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
90011736:	89bb      	ldrh	r3, [r7, #12]
90011738:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
9001173c:	d804      	bhi.n	90011748 <tcp_parseopt+0x8c>
9001173e:	89bb      	ldrh	r3, [r7, #12]
90011740:	2b00      	cmp	r3, #0
90011742:	d001      	beq.n	90011748 <tcp_parseopt+0x8c>
90011744:	89ba      	ldrh	r2, [r7, #12]
90011746:	e001      	b.n	9001174c <tcp_parseopt+0x90>
90011748:	f44f 7206 	mov.w	r2, #536	; 0x218
9001174c:	687b      	ldr	r3, [r7, #4]
9001174e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
90011750:	e010      	b.n	90011774 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
90011752:	f7ff ff7d 	bl	90011650 <tcp_get_next_optbyte>
90011756:	4603      	mov	r3, r0
90011758:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
9001175a:	7afb      	ldrb	r3, [r7, #11]
9001175c:	2b01      	cmp	r3, #1
9001175e:	d914      	bls.n	9001178a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
90011760:	7afb      	ldrb	r3, [r7, #11]
90011762:	b29a      	uxth	r2, r3
90011764:	4b0f      	ldr	r3, [pc, #60]	; (900117a4 <tcp_parseopt+0xe8>)
90011766:	881b      	ldrh	r3, [r3, #0]
90011768:	4413      	add	r3, r2
9001176a:	b29b      	uxth	r3, r3
9001176c:	3b02      	subs	r3, #2
9001176e:	b29a      	uxth	r2, r3
90011770:	4b0c      	ldr	r3, [pc, #48]	; (900117a4 <tcp_parseopt+0xe8>)
90011772:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
90011774:	4b0b      	ldr	r3, [pc, #44]	; (900117a4 <tcp_parseopt+0xe8>)
90011776:	881a      	ldrh	r2, [r3, #0]
90011778:	4b09      	ldr	r3, [pc, #36]	; (900117a0 <tcp_parseopt+0xe4>)
9001177a:	881b      	ldrh	r3, [r3, #0]
9001177c:	429a      	cmp	r2, r3
9001177e:	d3b3      	bcc.n	900116e8 <tcp_parseopt+0x2c>
90011780:	e004      	b.n	9001178c <tcp_parseopt+0xd0>
          return;
90011782:	bf00      	nop
90011784:	e002      	b.n	9001178c <tcp_parseopt+0xd0>
            return;
90011786:	bf00      	nop
90011788:	e000      	b.n	9001178c <tcp_parseopt+0xd0>
            return;
9001178a:	bf00      	nop
      }
    }
  }
}
9001178c:	3710      	adds	r7, #16
9001178e:	46bd      	mov	sp, r7
90011790:	bd80      	pop	{r7, pc}
90011792:	bf00      	nop
90011794:	9001981c 	.word	0x9001981c
90011798:	90019c80 	.word	0x90019c80
9001179c:	90019868 	.word	0x90019868
900117a0:	2000d5f4 	.word	0x2000d5f4
900117a4:	2000d5fc 	.word	0x2000d5fc

900117a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
900117a8:	b480      	push	{r7}
900117aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
900117ac:	4b05      	ldr	r3, [pc, #20]	; (900117c4 <tcp_trigger_input_pcb_close+0x1c>)
900117ae:	781b      	ldrb	r3, [r3, #0]
900117b0:	f043 0310 	orr.w	r3, r3, #16
900117b4:	b2da      	uxtb	r2, r3
900117b6:	4b03      	ldr	r3, [pc, #12]	; (900117c4 <tcp_trigger_input_pcb_close+0x1c>)
900117b8:	701a      	strb	r2, [r3, #0]
}
900117ba:	bf00      	nop
900117bc:	46bd      	mov	sp, r7
900117be:	f85d 7b04 	ldr.w	r7, [sp], #4
900117c2:	4770      	bx	lr
900117c4:	2000d60d 	.word	0x2000d60d

900117c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
900117c8:	b580      	push	{r7, lr}
900117ca:	b084      	sub	sp, #16
900117cc:	af00      	add	r7, sp, #0
900117ce:	60f8      	str	r0, [r7, #12]
900117d0:	60b9      	str	r1, [r7, #8]
900117d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
900117d4:	68fb      	ldr	r3, [r7, #12]
900117d6:	2b00      	cmp	r3, #0
900117d8:	d00a      	beq.n	900117f0 <tcp_route+0x28>
900117da:	68fb      	ldr	r3, [r7, #12]
900117dc:	7a1b      	ldrb	r3, [r3, #8]
900117de:	2b00      	cmp	r3, #0
900117e0:	d006      	beq.n	900117f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
900117e2:	68fb      	ldr	r3, [r7, #12]
900117e4:	7a1b      	ldrb	r3, [r3, #8]
900117e6:	4618      	mov	r0, r3
900117e8:	f7fb f84e 	bl	9000c888 <netif_get_by_index>
900117ec:	4603      	mov	r3, r0
900117ee:	e003      	b.n	900117f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
900117f0:	6878      	ldr	r0, [r7, #4]
900117f2:	f003 fc4b 	bl	9001508c <ip4_route>
900117f6:	4603      	mov	r3, r0
  }
}
900117f8:	4618      	mov	r0, r3
900117fa:	3710      	adds	r7, #16
900117fc:	46bd      	mov	sp, r7
900117fe:	bd80      	pop	{r7, pc}

90011800 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
90011800:	b590      	push	{r4, r7, lr}
90011802:	b087      	sub	sp, #28
90011804:	af00      	add	r7, sp, #0
90011806:	60f8      	str	r0, [r7, #12]
90011808:	60b9      	str	r1, [r7, #8]
9001180a:	603b      	str	r3, [r7, #0]
9001180c:	4613      	mov	r3, r2
9001180e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
90011810:	68fb      	ldr	r3, [r7, #12]
90011812:	2b00      	cmp	r3, #0
90011814:	d105      	bne.n	90011822 <tcp_create_segment+0x22>
90011816:	4b44      	ldr	r3, [pc, #272]	; (90011928 <tcp_create_segment+0x128>)
90011818:	22a3      	movs	r2, #163	; 0xa3
9001181a:	4944      	ldr	r1, [pc, #272]	; (9001192c <tcp_create_segment+0x12c>)
9001181c:	4844      	ldr	r0, [pc, #272]	; (90011930 <tcp_create_segment+0x130>)
9001181e:	f005 fa0f 	bl	90016c40 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
90011822:	68bb      	ldr	r3, [r7, #8]
90011824:	2b00      	cmp	r3, #0
90011826:	d105      	bne.n	90011834 <tcp_create_segment+0x34>
90011828:	4b3f      	ldr	r3, [pc, #252]	; (90011928 <tcp_create_segment+0x128>)
9001182a:	22a4      	movs	r2, #164	; 0xa4
9001182c:	4941      	ldr	r1, [pc, #260]	; (90011934 <tcp_create_segment+0x134>)
9001182e:	4840      	ldr	r0, [pc, #256]	; (90011930 <tcp_create_segment+0x130>)
90011830:	f005 fa06 	bl	90016c40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
90011834:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90011838:	009b      	lsls	r3, r3, #2
9001183a:	b2db      	uxtb	r3, r3
9001183c:	f003 0304 	and.w	r3, r3, #4
90011840:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
90011842:	2003      	movs	r0, #3
90011844:	f7fa fcb8 	bl	9000c1b8 <memp_malloc>
90011848:	6138      	str	r0, [r7, #16]
9001184a:	693b      	ldr	r3, [r7, #16]
9001184c:	2b00      	cmp	r3, #0
9001184e:	d104      	bne.n	9001185a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
90011850:	68b8      	ldr	r0, [r7, #8]
90011852:	f7fb fba7 	bl	9000cfa4 <pbuf_free>
    return NULL;
90011856:	2300      	movs	r3, #0
90011858:	e061      	b.n	9001191e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
9001185a:	693b      	ldr	r3, [r7, #16]
9001185c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
90011860:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
90011862:	693b      	ldr	r3, [r7, #16]
90011864:	2200      	movs	r2, #0
90011866:	601a      	str	r2, [r3, #0]
  seg->p = p;
90011868:	693b      	ldr	r3, [r7, #16]
9001186a:	68ba      	ldr	r2, [r7, #8]
9001186c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
9001186e:	68bb      	ldr	r3, [r7, #8]
90011870:	891a      	ldrh	r2, [r3, #8]
90011872:	7dfb      	ldrb	r3, [r7, #23]
90011874:	b29b      	uxth	r3, r3
90011876:	429a      	cmp	r2, r3
90011878:	d205      	bcs.n	90011886 <tcp_create_segment+0x86>
9001187a:	4b2b      	ldr	r3, [pc, #172]	; (90011928 <tcp_create_segment+0x128>)
9001187c:	22b0      	movs	r2, #176	; 0xb0
9001187e:	492e      	ldr	r1, [pc, #184]	; (90011938 <tcp_create_segment+0x138>)
90011880:	482b      	ldr	r0, [pc, #172]	; (90011930 <tcp_create_segment+0x130>)
90011882:	f005 f9dd 	bl	90016c40 <iprintf>
  seg->len = p->tot_len - optlen;
90011886:	68bb      	ldr	r3, [r7, #8]
90011888:	891a      	ldrh	r2, [r3, #8]
9001188a:	7dfb      	ldrb	r3, [r7, #23]
9001188c:	b29b      	uxth	r3, r3
9001188e:	1ad3      	subs	r3, r2, r3
90011890:	b29a      	uxth	r2, r3
90011892:	693b      	ldr	r3, [r7, #16]
90011894:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
90011896:	2114      	movs	r1, #20
90011898:	68b8      	ldr	r0, [r7, #8]
9001189a:	f7fb faed 	bl	9000ce78 <pbuf_add_header>
9001189e:	4603      	mov	r3, r0
900118a0:	2b00      	cmp	r3, #0
900118a2:	d004      	beq.n	900118ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
900118a4:	6938      	ldr	r0, [r7, #16]
900118a6:	f7fd f800 	bl	9000e8aa <tcp_seg_free>
    return NULL;
900118aa:	2300      	movs	r3, #0
900118ac:	e037      	b.n	9001191e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
900118ae:	693b      	ldr	r3, [r7, #16]
900118b0:	685b      	ldr	r3, [r3, #4]
900118b2:	685a      	ldr	r2, [r3, #4]
900118b4:	693b      	ldr	r3, [r7, #16]
900118b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
900118b8:	68fb      	ldr	r3, [r7, #12]
900118ba:	8ada      	ldrh	r2, [r3, #22]
900118bc:	693b      	ldr	r3, [r7, #16]
900118be:	68dc      	ldr	r4, [r3, #12]
900118c0:	4610      	mov	r0, r2
900118c2:	f7f9 ffc3 	bl	9000b84c <lwip_htons>
900118c6:	4603      	mov	r3, r0
900118c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
900118ca:	68fb      	ldr	r3, [r7, #12]
900118cc:	8b1a      	ldrh	r2, [r3, #24]
900118ce:	693b      	ldr	r3, [r7, #16]
900118d0:	68dc      	ldr	r4, [r3, #12]
900118d2:	4610      	mov	r0, r2
900118d4:	f7f9 ffba 	bl	9000b84c <lwip_htons>
900118d8:	4603      	mov	r3, r0
900118da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
900118dc:	693b      	ldr	r3, [r7, #16]
900118de:	68dc      	ldr	r4, [r3, #12]
900118e0:	6838      	ldr	r0, [r7, #0]
900118e2:	f7f9 ffc8 	bl	9000b876 <lwip_htonl>
900118e6:	4603      	mov	r3, r0
900118e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
900118ea:	7dfb      	ldrb	r3, [r7, #23]
900118ec:	089b      	lsrs	r3, r3, #2
900118ee:	b2db      	uxtb	r3, r3
900118f0:	b29b      	uxth	r3, r3
900118f2:	3305      	adds	r3, #5
900118f4:	b29b      	uxth	r3, r3
900118f6:	031b      	lsls	r3, r3, #12
900118f8:	b29a      	uxth	r2, r3
900118fa:	79fb      	ldrb	r3, [r7, #7]
900118fc:	b29b      	uxth	r3, r3
900118fe:	4313      	orrs	r3, r2
90011900:	b29a      	uxth	r2, r3
90011902:	693b      	ldr	r3, [r7, #16]
90011904:	68dc      	ldr	r4, [r3, #12]
90011906:	4610      	mov	r0, r2
90011908:	f7f9 ffa0 	bl	9000b84c <lwip_htons>
9001190c:	4603      	mov	r3, r0
9001190e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
90011910:	693b      	ldr	r3, [r7, #16]
90011912:	68db      	ldr	r3, [r3, #12]
90011914:	2200      	movs	r2, #0
90011916:	749a      	strb	r2, [r3, #18]
90011918:	2200      	movs	r2, #0
9001191a:	74da      	strb	r2, [r3, #19]
  return seg;
9001191c:	693b      	ldr	r3, [r7, #16]
}
9001191e:	4618      	mov	r0, r3
90011920:	371c      	adds	r7, #28
90011922:	46bd      	mov	sp, r7
90011924:	bd90      	pop	{r4, r7, pc}
90011926:	bf00      	nop
90011928:	90019c9c 	.word	0x90019c9c
9001192c:	90019cd0 	.word	0x90019cd0
90011930:	90019cf0 	.word	0x90019cf0
90011934:	90019d18 	.word	0x90019d18
90011938:	90019d3c 	.word	0x90019d3c

9001193c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
9001193c:	b580      	push	{r7, lr}
9001193e:	b086      	sub	sp, #24
90011940:	af00      	add	r7, sp, #0
90011942:	607b      	str	r3, [r7, #4]
90011944:	4603      	mov	r3, r0
90011946:	73fb      	strb	r3, [r7, #15]
90011948:	460b      	mov	r3, r1
9001194a:	81bb      	strh	r3, [r7, #12]
9001194c:	4613      	mov	r3, r2
9001194e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
90011950:	89bb      	ldrh	r3, [r7, #12]
90011952:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
90011954:	687b      	ldr	r3, [r7, #4]
90011956:	2b00      	cmp	r3, #0
90011958:	d105      	bne.n	90011966 <tcp_pbuf_prealloc+0x2a>
9001195a:	4b30      	ldr	r3, [pc, #192]	; (90011a1c <tcp_pbuf_prealloc+0xe0>)
9001195c:	22e8      	movs	r2, #232	; 0xe8
9001195e:	4930      	ldr	r1, [pc, #192]	; (90011a20 <tcp_pbuf_prealloc+0xe4>)
90011960:	4830      	ldr	r0, [pc, #192]	; (90011a24 <tcp_pbuf_prealloc+0xe8>)
90011962:	f005 f96d 	bl	90016c40 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
90011966:	6a3b      	ldr	r3, [r7, #32]
90011968:	2b00      	cmp	r3, #0
9001196a:	d105      	bne.n	90011978 <tcp_pbuf_prealloc+0x3c>
9001196c:	4b2b      	ldr	r3, [pc, #172]	; (90011a1c <tcp_pbuf_prealloc+0xe0>)
9001196e:	22e9      	movs	r2, #233	; 0xe9
90011970:	492d      	ldr	r1, [pc, #180]	; (90011a28 <tcp_pbuf_prealloc+0xec>)
90011972:	482c      	ldr	r0, [pc, #176]	; (90011a24 <tcp_pbuf_prealloc+0xe8>)
90011974:	f005 f964 	bl	90016c40 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
90011978:	89ba      	ldrh	r2, [r7, #12]
9001197a:	897b      	ldrh	r3, [r7, #10]
9001197c:	429a      	cmp	r2, r3
9001197e:	d221      	bcs.n	900119c4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
90011980:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
90011984:	f003 0302 	and.w	r3, r3, #2
90011988:	2b00      	cmp	r3, #0
9001198a:	d111      	bne.n	900119b0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
9001198c:	6a3b      	ldr	r3, [r7, #32]
9001198e:	8b5b      	ldrh	r3, [r3, #26]
90011990:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
90011994:	2b00      	cmp	r3, #0
90011996:	d115      	bne.n	900119c4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
90011998:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001199c:	2b00      	cmp	r3, #0
9001199e:	d007      	beq.n	900119b0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
900119a0:	6a3b      	ldr	r3, [r7, #32]
900119a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
900119a4:	2b00      	cmp	r3, #0
900119a6:	d103      	bne.n	900119b0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
900119a8:	6a3b      	ldr	r3, [r7, #32]
900119aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
900119ac:	2b00      	cmp	r3, #0
900119ae:	d009      	beq.n	900119c4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
900119b0:	89bb      	ldrh	r3, [r7, #12]
900119b2:	f203 231b 	addw	r3, r3, #539	; 0x21b
900119b6:	f023 0203 	bic.w	r2, r3, #3
900119ba:	897b      	ldrh	r3, [r7, #10]
900119bc:	4293      	cmp	r3, r2
900119be:	bf28      	it	cs
900119c0:	4613      	movcs	r3, r2
900119c2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
900119c4:	8af9      	ldrh	r1, [r7, #22]
900119c6:	7bfb      	ldrb	r3, [r7, #15]
900119c8:	f44f 7220 	mov.w	r2, #640	; 0x280
900119cc:	4618      	mov	r0, r3
900119ce:	f7fb f805 	bl	9000c9dc <pbuf_alloc>
900119d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
900119d4:	693b      	ldr	r3, [r7, #16]
900119d6:	2b00      	cmp	r3, #0
900119d8:	d101      	bne.n	900119de <tcp_pbuf_prealloc+0xa2>
    return NULL;
900119da:	2300      	movs	r3, #0
900119dc:	e019      	b.n	90011a12 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
900119de:	693b      	ldr	r3, [r7, #16]
900119e0:	681b      	ldr	r3, [r3, #0]
900119e2:	2b00      	cmp	r3, #0
900119e4:	d006      	beq.n	900119f4 <tcp_pbuf_prealloc+0xb8>
900119e6:	4b0d      	ldr	r3, [pc, #52]	; (90011a1c <tcp_pbuf_prealloc+0xe0>)
900119e8:	f240 120b 	movw	r2, #267	; 0x10b
900119ec:	490f      	ldr	r1, [pc, #60]	; (90011a2c <tcp_pbuf_prealloc+0xf0>)
900119ee:	480d      	ldr	r0, [pc, #52]	; (90011a24 <tcp_pbuf_prealloc+0xe8>)
900119f0:	f005 f926 	bl	90016c40 <iprintf>
  *oversize = p->len - length;
900119f4:	693b      	ldr	r3, [r7, #16]
900119f6:	895a      	ldrh	r2, [r3, #10]
900119f8:	89bb      	ldrh	r3, [r7, #12]
900119fa:	1ad3      	subs	r3, r2, r3
900119fc:	b29a      	uxth	r2, r3
900119fe:	687b      	ldr	r3, [r7, #4]
90011a00:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
90011a02:	693b      	ldr	r3, [r7, #16]
90011a04:	89ba      	ldrh	r2, [r7, #12]
90011a06:	811a      	strh	r2, [r3, #8]
90011a08:	693b      	ldr	r3, [r7, #16]
90011a0a:	891a      	ldrh	r2, [r3, #8]
90011a0c:	693b      	ldr	r3, [r7, #16]
90011a0e:	815a      	strh	r2, [r3, #10]
  return p;
90011a10:	693b      	ldr	r3, [r7, #16]
}
90011a12:	4618      	mov	r0, r3
90011a14:	3718      	adds	r7, #24
90011a16:	46bd      	mov	sp, r7
90011a18:	bd80      	pop	{r7, pc}
90011a1a:	bf00      	nop
90011a1c:	90019c9c 	.word	0x90019c9c
90011a20:	90019d54 	.word	0x90019d54
90011a24:	90019cf0 	.word	0x90019cf0
90011a28:	90019d78 	.word	0x90019d78
90011a2c:	90019d98 	.word	0x90019d98

90011a30 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
90011a30:	b580      	push	{r7, lr}
90011a32:	b082      	sub	sp, #8
90011a34:	af00      	add	r7, sp, #0
90011a36:	6078      	str	r0, [r7, #4]
90011a38:	460b      	mov	r3, r1
90011a3a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
90011a3c:	687b      	ldr	r3, [r7, #4]
90011a3e:	2b00      	cmp	r3, #0
90011a40:	d106      	bne.n	90011a50 <tcp_write_checks+0x20>
90011a42:	4b33      	ldr	r3, [pc, #204]	; (90011b10 <tcp_write_checks+0xe0>)
90011a44:	f240 1233 	movw	r2, #307	; 0x133
90011a48:	4932      	ldr	r1, [pc, #200]	; (90011b14 <tcp_write_checks+0xe4>)
90011a4a:	4833      	ldr	r0, [pc, #204]	; (90011b18 <tcp_write_checks+0xe8>)
90011a4c:	f005 f8f8 	bl	90016c40 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
90011a50:	687b      	ldr	r3, [r7, #4]
90011a52:	7d1b      	ldrb	r3, [r3, #20]
90011a54:	2b04      	cmp	r3, #4
90011a56:	d00e      	beq.n	90011a76 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
90011a58:	687b      	ldr	r3, [r7, #4]
90011a5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
90011a5c:	2b07      	cmp	r3, #7
90011a5e:	d00a      	beq.n	90011a76 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
90011a60:	687b      	ldr	r3, [r7, #4]
90011a62:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
90011a64:	2b02      	cmp	r3, #2
90011a66:	d006      	beq.n	90011a76 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
90011a68:	687b      	ldr	r3, [r7, #4]
90011a6a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
90011a6c:	2b03      	cmp	r3, #3
90011a6e:	d002      	beq.n	90011a76 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
90011a70:	f06f 030a 	mvn.w	r3, #10
90011a74:	e048      	b.n	90011b08 <tcp_write_checks+0xd8>
  } else if (len == 0) {
90011a76:	887b      	ldrh	r3, [r7, #2]
90011a78:	2b00      	cmp	r3, #0
90011a7a:	d101      	bne.n	90011a80 <tcp_write_checks+0x50>
    return ERR_OK;
90011a7c:	2300      	movs	r3, #0
90011a7e:	e043      	b.n	90011b08 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
90011a80:	687b      	ldr	r3, [r7, #4]
90011a82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90011a86:	887a      	ldrh	r2, [r7, #2]
90011a88:	429a      	cmp	r2, r3
90011a8a:	d909      	bls.n	90011aa0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
90011a8c:	687b      	ldr	r3, [r7, #4]
90011a8e:	8b5b      	ldrh	r3, [r3, #26]
90011a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90011a94:	b29a      	uxth	r2, r3
90011a96:	687b      	ldr	r3, [r7, #4]
90011a98:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
90011a9a:	f04f 33ff 	mov.w	r3, #4294967295
90011a9e:	e033      	b.n	90011b08 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
90011aa0:	687b      	ldr	r3, [r7, #4]
90011aa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90011aa6:	2b08      	cmp	r3, #8
90011aa8:	d909      	bls.n	90011abe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
90011aaa:	687b      	ldr	r3, [r7, #4]
90011aac:	8b5b      	ldrh	r3, [r3, #26]
90011aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90011ab2:	b29a      	uxth	r2, r3
90011ab4:	687b      	ldr	r3, [r7, #4]
90011ab6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
90011ab8:	f04f 33ff 	mov.w	r3, #4294967295
90011abc:	e024      	b.n	90011b08 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
90011abe:	687b      	ldr	r3, [r7, #4]
90011ac0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90011ac4:	2b00      	cmp	r3, #0
90011ac6:	d00f      	beq.n	90011ae8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
90011ac8:	687b      	ldr	r3, [r7, #4]
90011aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011acc:	2b00      	cmp	r3, #0
90011ace:	d11a      	bne.n	90011b06 <tcp_write_checks+0xd6>
90011ad0:	687b      	ldr	r3, [r7, #4]
90011ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011ad4:	2b00      	cmp	r3, #0
90011ad6:	d116      	bne.n	90011b06 <tcp_write_checks+0xd6>
90011ad8:	4b0d      	ldr	r3, [pc, #52]	; (90011b10 <tcp_write_checks+0xe0>)
90011ada:	f240 1255 	movw	r2, #341	; 0x155
90011ade:	490f      	ldr	r1, [pc, #60]	; (90011b1c <tcp_write_checks+0xec>)
90011ae0:	480d      	ldr	r0, [pc, #52]	; (90011b18 <tcp_write_checks+0xe8>)
90011ae2:	f005 f8ad 	bl	90016c40 <iprintf>
90011ae6:	e00e      	b.n	90011b06 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
90011ae8:	687b      	ldr	r3, [r7, #4]
90011aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011aec:	2b00      	cmp	r3, #0
90011aee:	d103      	bne.n	90011af8 <tcp_write_checks+0xc8>
90011af0:	687b      	ldr	r3, [r7, #4]
90011af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011af4:	2b00      	cmp	r3, #0
90011af6:	d006      	beq.n	90011b06 <tcp_write_checks+0xd6>
90011af8:	4b05      	ldr	r3, [pc, #20]	; (90011b10 <tcp_write_checks+0xe0>)
90011afa:	f44f 72ac 	mov.w	r2, #344	; 0x158
90011afe:	4908      	ldr	r1, [pc, #32]	; (90011b20 <tcp_write_checks+0xf0>)
90011b00:	4805      	ldr	r0, [pc, #20]	; (90011b18 <tcp_write_checks+0xe8>)
90011b02:	f005 f89d 	bl	90016c40 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
90011b06:	2300      	movs	r3, #0
}
90011b08:	4618      	mov	r0, r3
90011b0a:	3708      	adds	r7, #8
90011b0c:	46bd      	mov	sp, r7
90011b0e:	bd80      	pop	{r7, pc}
90011b10:	90019c9c 	.word	0x90019c9c
90011b14:	90019dac 	.word	0x90019dac
90011b18:	90019cf0 	.word	0x90019cf0
90011b1c:	90019dcc 	.word	0x90019dcc
90011b20:	90019e08 	.word	0x90019e08

90011b24 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
90011b24:	b590      	push	{r4, r7, lr}
90011b26:	b09b      	sub	sp, #108	; 0x6c
90011b28:	af04      	add	r7, sp, #16
90011b2a:	60f8      	str	r0, [r7, #12]
90011b2c:	60b9      	str	r1, [r7, #8]
90011b2e:	4611      	mov	r1, r2
90011b30:	461a      	mov	r2, r3
90011b32:	460b      	mov	r3, r1
90011b34:	80fb      	strh	r3, [r7, #6]
90011b36:	4613      	mov	r3, r2
90011b38:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
90011b3a:	2300      	movs	r3, #0
90011b3c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
90011b3e:	2300      	movs	r3, #0
90011b40:	653b      	str	r3, [r7, #80]	; 0x50
90011b42:	2300      	movs	r3, #0
90011b44:	64fb      	str	r3, [r7, #76]	; 0x4c
90011b46:	2300      	movs	r3, #0
90011b48:	64bb      	str	r3, [r7, #72]	; 0x48
90011b4a:	2300      	movs	r3, #0
90011b4c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
90011b4e:	2300      	movs	r3, #0
90011b50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
90011b54:	2300      	movs	r3, #0
90011b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
90011b5a:	2300      	movs	r3, #0
90011b5c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
90011b5e:	2300      	movs	r3, #0
90011b60:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
90011b62:	2300      	movs	r3, #0
90011b64:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
90011b66:	68fb      	ldr	r3, [r7, #12]
90011b68:	2b00      	cmp	r3, #0
90011b6a:	d109      	bne.n	90011b80 <tcp_write+0x5c>
90011b6c:	4ba4      	ldr	r3, [pc, #656]	; (90011e00 <tcp_write+0x2dc>)
90011b6e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
90011b72:	49a4      	ldr	r1, [pc, #656]	; (90011e04 <tcp_write+0x2e0>)
90011b74:	48a4      	ldr	r0, [pc, #656]	; (90011e08 <tcp_write+0x2e4>)
90011b76:	f005 f863 	bl	90016c40 <iprintf>
90011b7a:	f06f 030f 	mvn.w	r3, #15
90011b7e:	e32a      	b.n	900121d6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
90011b80:	68fb      	ldr	r3, [r7, #12]
90011b82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
90011b86:	085b      	lsrs	r3, r3, #1
90011b88:	b29a      	uxth	r2, r3
90011b8a:	68fb      	ldr	r3, [r7, #12]
90011b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90011b8e:	4293      	cmp	r3, r2
90011b90:	bf28      	it	cs
90011b92:	4613      	movcs	r3, r2
90011b94:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
90011b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90011b98:	2b00      	cmp	r3, #0
90011b9a:	d102      	bne.n	90011ba2 <tcp_write+0x7e>
90011b9c:	68fb      	ldr	r3, [r7, #12]
90011b9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90011ba0:	e000      	b.n	90011ba4 <tcp_write+0x80>
90011ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90011ba4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
90011ba6:	68bb      	ldr	r3, [r7, #8]
90011ba8:	2b00      	cmp	r3, #0
90011baa:	d109      	bne.n	90011bc0 <tcp_write+0x9c>
90011bac:	4b94      	ldr	r3, [pc, #592]	; (90011e00 <tcp_write+0x2dc>)
90011bae:	f240 12ad 	movw	r2, #429	; 0x1ad
90011bb2:	4996      	ldr	r1, [pc, #600]	; (90011e0c <tcp_write+0x2e8>)
90011bb4:	4894      	ldr	r0, [pc, #592]	; (90011e08 <tcp_write+0x2e4>)
90011bb6:	f005 f843 	bl	90016c40 <iprintf>
90011bba:	f06f 030f 	mvn.w	r3, #15
90011bbe:	e30a      	b.n	900121d6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
90011bc0:	88fb      	ldrh	r3, [r7, #6]
90011bc2:	4619      	mov	r1, r3
90011bc4:	68f8      	ldr	r0, [r7, #12]
90011bc6:	f7ff ff33 	bl	90011a30 <tcp_write_checks>
90011bca:	4603      	mov	r3, r0
90011bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
90011bd0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
90011bd4:	2b00      	cmp	r3, #0
90011bd6:	d002      	beq.n	90011bde <tcp_write+0xba>
    return err;
90011bd8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
90011bdc:	e2fb      	b.n	900121d6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
90011bde:	68fb      	ldr	r3, [r7, #12]
90011be0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90011be4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
90011be8:	2300      	movs	r3, #0
90011bea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
90011bee:	68fb      	ldr	r3, [r7, #12]
90011bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011bf2:	2b00      	cmp	r3, #0
90011bf4:	f000 80f6 	beq.w	90011de4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
90011bf8:	68fb      	ldr	r3, [r7, #12]
90011bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011bfc:	653b      	str	r3, [r7, #80]	; 0x50
90011bfe:	e002      	b.n	90011c06 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
90011c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011c02:	681b      	ldr	r3, [r3, #0]
90011c04:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
90011c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011c08:	681b      	ldr	r3, [r3, #0]
90011c0a:	2b00      	cmp	r3, #0
90011c0c:	d1f8      	bne.n	90011c00 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
90011c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011c10:	7a9b      	ldrb	r3, [r3, #10]
90011c12:	009b      	lsls	r3, r3, #2
90011c14:	b29b      	uxth	r3, r3
90011c16:	f003 0304 	and.w	r3, r3, #4
90011c1a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
90011c1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90011c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011c20:	891b      	ldrh	r3, [r3, #8]
90011c22:	4619      	mov	r1, r3
90011c24:	8c3b      	ldrh	r3, [r7, #32]
90011c26:	440b      	add	r3, r1
90011c28:	429a      	cmp	r2, r3
90011c2a:	da06      	bge.n	90011c3a <tcp_write+0x116>
90011c2c:	4b74      	ldr	r3, [pc, #464]	; (90011e00 <tcp_write+0x2dc>)
90011c2e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
90011c32:	4977      	ldr	r1, [pc, #476]	; (90011e10 <tcp_write+0x2ec>)
90011c34:	4874      	ldr	r0, [pc, #464]	; (90011e08 <tcp_write+0x2e4>)
90011c36:	f005 f803 	bl	90016c40 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
90011c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011c3c:	891a      	ldrh	r2, [r3, #8]
90011c3e:	8c3b      	ldrh	r3, [r7, #32]
90011c40:	4413      	add	r3, r2
90011c42:	b29b      	uxth	r3, r3
90011c44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90011c46:	1ad3      	subs	r3, r2, r3
90011c48:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
90011c4a:	68fb      	ldr	r3, [r7, #12]
90011c4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
90011c50:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
90011c52:	8a7b      	ldrh	r3, [r7, #18]
90011c54:	2b00      	cmp	r3, #0
90011c56:	d026      	beq.n	90011ca6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
90011c58:	8a7b      	ldrh	r3, [r7, #18]
90011c5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
90011c5c:	429a      	cmp	r2, r3
90011c5e:	d206      	bcs.n	90011c6e <tcp_write+0x14a>
90011c60:	4b67      	ldr	r3, [pc, #412]	; (90011e00 <tcp_write+0x2dc>)
90011c62:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
90011c66:	496b      	ldr	r1, [pc, #428]	; (90011e14 <tcp_write+0x2f0>)
90011c68:	4867      	ldr	r0, [pc, #412]	; (90011e08 <tcp_write+0x2e4>)
90011c6a:	f004 ffe9 	bl	90016c40 <iprintf>
      seg = last_unsent;
90011c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011c70:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
90011c72:	8a7b      	ldrh	r3, [r7, #18]
90011c74:	88fa      	ldrh	r2, [r7, #6]
90011c76:	4293      	cmp	r3, r2
90011c78:	bf28      	it	cs
90011c7a:	4613      	movcs	r3, r2
90011c7c:	b29b      	uxth	r3, r3
90011c7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
90011c80:	4293      	cmp	r3, r2
90011c82:	bf28      	it	cs
90011c84:	4613      	movcs	r3, r2
90011c86:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
90011c88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011c8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011c8e:	4413      	add	r3, r2
90011c90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
90011c94:	8a7a      	ldrh	r2, [r7, #18]
90011c96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011c98:	1ad3      	subs	r3, r2, r3
90011c9a:	b29b      	uxth	r3, r3
90011c9c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
90011c9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
90011ca0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011ca2:	1ad3      	subs	r3, r2, r3
90011ca4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
90011ca6:	8a7b      	ldrh	r3, [r7, #18]
90011ca8:	2b00      	cmp	r3, #0
90011caa:	d00b      	beq.n	90011cc4 <tcp_write+0x1a0>
90011cac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011cb0:	88fb      	ldrh	r3, [r7, #6]
90011cb2:	429a      	cmp	r2, r3
90011cb4:	d006      	beq.n	90011cc4 <tcp_write+0x1a0>
90011cb6:	4b52      	ldr	r3, [pc, #328]	; (90011e00 <tcp_write+0x2dc>)
90011cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
90011cbc:	4956      	ldr	r1, [pc, #344]	; (90011e18 <tcp_write+0x2f4>)
90011cbe:	4852      	ldr	r0, [pc, #328]	; (90011e08 <tcp_write+0x2e4>)
90011cc0:	f004 ffbe 	bl	90016c40 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
90011cc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011cc8:	88fb      	ldrh	r3, [r7, #6]
90011cca:	429a      	cmp	r2, r3
90011ccc:	f080 8167 	bcs.w	90011f9e <tcp_write+0x47a>
90011cd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
90011cd2:	2b00      	cmp	r3, #0
90011cd4:	f000 8163 	beq.w	90011f9e <tcp_write+0x47a>
90011cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011cda:	891b      	ldrh	r3, [r3, #8]
90011cdc:	2b00      	cmp	r3, #0
90011cde:	f000 815e 	beq.w	90011f9e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
90011ce2:	88fa      	ldrh	r2, [r7, #6]
90011ce4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011ce8:	1ad2      	subs	r2, r2, r3
90011cea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
90011cec:	4293      	cmp	r3, r2
90011cee:	bfa8      	it	ge
90011cf0:	4613      	movge	r3, r2
90011cf2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
90011cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011cf6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
90011cf8:	797b      	ldrb	r3, [r7, #5]
90011cfa:	f003 0301 	and.w	r3, r3, #1
90011cfe:	2b00      	cmp	r3, #0
90011d00:	d027      	beq.n	90011d52 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
90011d02:	f107 0012 	add.w	r0, r7, #18
90011d06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
90011d08:	8bf9      	ldrh	r1, [r7, #30]
90011d0a:	2301      	movs	r3, #1
90011d0c:	9302      	str	r3, [sp, #8]
90011d0e:	797b      	ldrb	r3, [r7, #5]
90011d10:	9301      	str	r3, [sp, #4]
90011d12:	68fb      	ldr	r3, [r7, #12]
90011d14:	9300      	str	r3, [sp, #0]
90011d16:	4603      	mov	r3, r0
90011d18:	2000      	movs	r0, #0
90011d1a:	f7ff fe0f 	bl	9001193c <tcp_pbuf_prealloc>
90011d1e:	6578      	str	r0, [r7, #84]	; 0x54
90011d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90011d22:	2b00      	cmp	r3, #0
90011d24:	f000 8225 	beq.w	90012172 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
90011d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90011d2a:	6858      	ldr	r0, [r3, #4]
90011d2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011d30:	68ba      	ldr	r2, [r7, #8]
90011d32:	4413      	add	r3, r2
90011d34:	8bfa      	ldrh	r2, [r7, #30]
90011d36:	4619      	mov	r1, r3
90011d38:	f004 fe8c 	bl	90016a54 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
90011d3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
90011d3e:	f7fb f9bf 	bl	9000d0c0 <pbuf_clen>
90011d42:	4603      	mov	r3, r0
90011d44:	461a      	mov	r2, r3
90011d46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
90011d4a:	4413      	add	r3, r2
90011d4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
90011d50:	e041      	b.n	90011dd6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
90011d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011d54:	685b      	ldr	r3, [r3, #4]
90011d56:	637b      	str	r3, [r7, #52]	; 0x34
90011d58:	e002      	b.n	90011d60 <tcp_write+0x23c>
90011d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90011d5c:	681b      	ldr	r3, [r3, #0]
90011d5e:	637b      	str	r3, [r7, #52]	; 0x34
90011d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90011d62:	681b      	ldr	r3, [r3, #0]
90011d64:	2b00      	cmp	r3, #0
90011d66:	d1f8      	bne.n	90011d5a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
90011d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90011d6a:	7b1b      	ldrb	r3, [r3, #12]
90011d6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
90011d70:	2b00      	cmp	r3, #0
90011d72:	d115      	bne.n	90011da0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
90011d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90011d76:	685b      	ldr	r3, [r3, #4]
90011d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90011d7a:	8952      	ldrh	r2, [r2, #10]
90011d7c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
90011d7e:	68ba      	ldr	r2, [r7, #8]
90011d80:	429a      	cmp	r2, r3
90011d82:	d10d      	bne.n	90011da0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
90011d84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011d88:	2b00      	cmp	r3, #0
90011d8a:	d006      	beq.n	90011d9a <tcp_write+0x276>
90011d8c:	4b1c      	ldr	r3, [pc, #112]	; (90011e00 <tcp_write+0x2dc>)
90011d8e:	f240 2231 	movw	r2, #561	; 0x231
90011d92:	4922      	ldr	r1, [pc, #136]	; (90011e1c <tcp_write+0x2f8>)
90011d94:	481c      	ldr	r0, [pc, #112]	; (90011e08 <tcp_write+0x2e4>)
90011d96:	f004 ff53 	bl	90016c40 <iprintf>
          extendlen = seglen;
90011d9a:	8bfb      	ldrh	r3, [r7, #30]
90011d9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
90011d9e:	e01a      	b.n	90011dd6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
90011da0:	8bfb      	ldrh	r3, [r7, #30]
90011da2:	2201      	movs	r2, #1
90011da4:	4619      	mov	r1, r3
90011da6:	2000      	movs	r0, #0
90011da8:	f7fa fe18 	bl	9000c9dc <pbuf_alloc>
90011dac:	6578      	str	r0, [r7, #84]	; 0x54
90011dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90011db0:	2b00      	cmp	r3, #0
90011db2:	f000 81e0 	beq.w	90012176 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
90011db6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011dba:	68ba      	ldr	r2, [r7, #8]
90011dbc:	441a      	add	r2, r3
90011dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90011dc0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
90011dc2:	6d78      	ldr	r0, [r7, #84]	; 0x54
90011dc4:	f7fb f97c 	bl	9000d0c0 <pbuf_clen>
90011dc8:	4603      	mov	r3, r0
90011dca:	461a      	mov	r2, r3
90011dcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
90011dd0:	4413      	add	r3, r2
90011dd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
90011dd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011dda:	8bfb      	ldrh	r3, [r7, #30]
90011ddc:	4413      	add	r3, r2
90011dde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
90011de2:	e0dc      	b.n	90011f9e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
90011de4:	68fb      	ldr	r3, [r7, #12]
90011de6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
90011dea:	2b00      	cmp	r3, #0
90011dec:	f000 80d7 	beq.w	90011f9e <tcp_write+0x47a>
90011df0:	4b03      	ldr	r3, [pc, #12]	; (90011e00 <tcp_write+0x2dc>)
90011df2:	f240 224a 	movw	r2, #586	; 0x24a
90011df6:	490a      	ldr	r1, [pc, #40]	; (90011e20 <tcp_write+0x2fc>)
90011df8:	4803      	ldr	r0, [pc, #12]	; (90011e08 <tcp_write+0x2e4>)
90011dfa:	f004 ff21 	bl	90016c40 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
90011dfe:	e0ce      	b.n	90011f9e <tcp_write+0x47a>
90011e00:	90019c9c 	.word	0x90019c9c
90011e04:	90019e3c 	.word	0x90019e3c
90011e08:	90019cf0 	.word	0x90019cf0
90011e0c:	90019e54 	.word	0x90019e54
90011e10:	90019e88 	.word	0x90019e88
90011e14:	90019ea0 	.word	0x90019ea0
90011e18:	90019ec0 	.word	0x90019ec0
90011e1c:	90019ee0 	.word	0x90019ee0
90011e20:	90019f0c 	.word	0x90019f0c
    struct pbuf *p;
    u16_t left = len - pos;
90011e24:	88fa      	ldrh	r2, [r7, #6]
90011e26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011e2a:	1ad3      	subs	r3, r2, r3
90011e2c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
90011e2e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
90011e32:	b29b      	uxth	r3, r3
90011e34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90011e36:	1ad3      	subs	r3, r2, r3
90011e38:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
90011e3a:	8b7a      	ldrh	r2, [r7, #26]
90011e3c:	8bbb      	ldrh	r3, [r7, #28]
90011e3e:	4293      	cmp	r3, r2
90011e40:	bf28      	it	cs
90011e42:	4613      	movcs	r3, r2
90011e44:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
90011e46:	797b      	ldrb	r3, [r7, #5]
90011e48:	f003 0301 	and.w	r3, r3, #1
90011e4c:	2b00      	cmp	r3, #0
90011e4e:	d036      	beq.n	90011ebe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
90011e50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
90011e54:	b29a      	uxth	r2, r3
90011e56:	8b3b      	ldrh	r3, [r7, #24]
90011e58:	4413      	add	r3, r2
90011e5a:	b299      	uxth	r1, r3
90011e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90011e5e:	2b00      	cmp	r3, #0
90011e60:	bf0c      	ite	eq
90011e62:	2301      	moveq	r3, #1
90011e64:	2300      	movne	r3, #0
90011e66:	b2db      	uxtb	r3, r3
90011e68:	f107 0012 	add.w	r0, r7, #18
90011e6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90011e6e:	9302      	str	r3, [sp, #8]
90011e70:	797b      	ldrb	r3, [r7, #5]
90011e72:	9301      	str	r3, [sp, #4]
90011e74:	68fb      	ldr	r3, [r7, #12]
90011e76:	9300      	str	r3, [sp, #0]
90011e78:	4603      	mov	r3, r0
90011e7a:	2036      	movs	r0, #54	; 0x36
90011e7c:	f7ff fd5e 	bl	9001193c <tcp_pbuf_prealloc>
90011e80:	6338      	str	r0, [r7, #48]	; 0x30
90011e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90011e84:	2b00      	cmp	r3, #0
90011e86:	f000 8178 	beq.w	9001217a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
90011e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90011e8c:	895b      	ldrh	r3, [r3, #10]
90011e8e:	8b3a      	ldrh	r2, [r7, #24]
90011e90:	429a      	cmp	r2, r3
90011e92:	d906      	bls.n	90011ea2 <tcp_write+0x37e>
90011e94:	4b8c      	ldr	r3, [pc, #560]	; (900120c8 <tcp_write+0x5a4>)
90011e96:	f240 2266 	movw	r2, #614	; 0x266
90011e9a:	498c      	ldr	r1, [pc, #560]	; (900120cc <tcp_write+0x5a8>)
90011e9c:	488c      	ldr	r0, [pc, #560]	; (900120d0 <tcp_write+0x5ac>)
90011e9e:	f004 fecf 	bl	90016c40 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
90011ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90011ea4:	685a      	ldr	r2, [r3, #4]
90011ea6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
90011eaa:	18d0      	adds	r0, r2, r3
90011eac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011eb0:	68ba      	ldr	r2, [r7, #8]
90011eb2:	4413      	add	r3, r2
90011eb4:	8b3a      	ldrh	r2, [r7, #24]
90011eb6:	4619      	mov	r1, r3
90011eb8:	f004 fdcc 	bl	90016a54 <memcpy>
90011ebc:	e02f      	b.n	90011f1e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
90011ebe:	8a7b      	ldrh	r3, [r7, #18]
90011ec0:	2b00      	cmp	r3, #0
90011ec2:	d006      	beq.n	90011ed2 <tcp_write+0x3ae>
90011ec4:	4b80      	ldr	r3, [pc, #512]	; (900120c8 <tcp_write+0x5a4>)
90011ec6:	f240 2271 	movw	r2, #625	; 0x271
90011eca:	4982      	ldr	r1, [pc, #520]	; (900120d4 <tcp_write+0x5b0>)
90011ecc:	4880      	ldr	r0, [pc, #512]	; (900120d0 <tcp_write+0x5ac>)
90011ece:	f004 feb7 	bl	90016c40 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
90011ed2:	8b3b      	ldrh	r3, [r7, #24]
90011ed4:	2201      	movs	r2, #1
90011ed6:	4619      	mov	r1, r3
90011ed8:	2036      	movs	r0, #54	; 0x36
90011eda:	f7fa fd7f 	bl	9000c9dc <pbuf_alloc>
90011ede:	6178      	str	r0, [r7, #20]
90011ee0:	697b      	ldr	r3, [r7, #20]
90011ee2:	2b00      	cmp	r3, #0
90011ee4:	f000 814b 	beq.w	9001217e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
90011ee8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011eec:	68ba      	ldr	r2, [r7, #8]
90011eee:	441a      	add	r2, r3
90011ef0:	697b      	ldr	r3, [r7, #20]
90011ef2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
90011ef4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
90011ef8:	b29b      	uxth	r3, r3
90011efa:	f44f 7220 	mov.w	r2, #640	; 0x280
90011efe:	4619      	mov	r1, r3
90011f00:	2036      	movs	r0, #54	; 0x36
90011f02:	f7fa fd6b 	bl	9000c9dc <pbuf_alloc>
90011f06:	6338      	str	r0, [r7, #48]	; 0x30
90011f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90011f0a:	2b00      	cmp	r3, #0
90011f0c:	d103      	bne.n	90011f16 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
90011f0e:	6978      	ldr	r0, [r7, #20]
90011f10:	f7fb f848 	bl	9000cfa4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
90011f14:	e136      	b.n	90012184 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
90011f16:	6979      	ldr	r1, [r7, #20]
90011f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
90011f1a:	f7fb f911 	bl	9000d140 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
90011f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
90011f20:	f7fb f8ce 	bl	9000d0c0 <pbuf_clen>
90011f24:	4603      	mov	r3, r0
90011f26:	461a      	mov	r2, r3
90011f28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
90011f2c:	4413      	add	r3, r2
90011f2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
90011f32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
90011f36:	2b09      	cmp	r3, #9
90011f38:	d903      	bls.n	90011f42 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
90011f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
90011f3c:	f7fb f832 	bl	9000cfa4 <pbuf_free>
      goto memerr;
90011f40:	e120      	b.n	90012184 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
90011f42:	68fb      	ldr	r3, [r7, #12]
90011f44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
90011f46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011f4a:	441a      	add	r2, r3
90011f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90011f50:	9300      	str	r3, [sp, #0]
90011f52:	4613      	mov	r3, r2
90011f54:	2200      	movs	r2, #0
90011f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
90011f58:	68f8      	ldr	r0, [r7, #12]
90011f5a:	f7ff fc51 	bl	90011800 <tcp_create_segment>
90011f5e:	64f8      	str	r0, [r7, #76]	; 0x4c
90011f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90011f62:	2b00      	cmp	r3, #0
90011f64:	f000 810d 	beq.w	90012182 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
90011f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90011f6a:	2b00      	cmp	r3, #0
90011f6c:	d102      	bne.n	90011f74 <tcp_write+0x450>
      queue = seg;
90011f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90011f70:	647b      	str	r3, [r7, #68]	; 0x44
90011f72:	e00c      	b.n	90011f8e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
90011f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90011f76:	2b00      	cmp	r3, #0
90011f78:	d106      	bne.n	90011f88 <tcp_write+0x464>
90011f7a:	4b53      	ldr	r3, [pc, #332]	; (900120c8 <tcp_write+0x5a4>)
90011f7c:	f240 22ab 	movw	r2, #683	; 0x2ab
90011f80:	4955      	ldr	r1, [pc, #340]	; (900120d8 <tcp_write+0x5b4>)
90011f82:	4853      	ldr	r0, [pc, #332]	; (900120d0 <tcp_write+0x5ac>)
90011f84:	f004 fe5c 	bl	90016c40 <iprintf>
      prev_seg->next = seg;
90011f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90011f8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
90011f8c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
90011f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90011f90:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
90011f92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011f96:	8b3b      	ldrh	r3, [r7, #24]
90011f98:	4413      	add	r3, r2
90011f9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
90011f9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011fa2:	88fb      	ldrh	r3, [r7, #6]
90011fa4:	429a      	cmp	r2, r3
90011fa6:	f4ff af3d 	bcc.w	90011e24 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
90011faa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011fac:	2b00      	cmp	r3, #0
90011fae:	d02c      	beq.n	9001200a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
90011fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011fb2:	685b      	ldr	r3, [r3, #4]
90011fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
90011fb6:	e01e      	b.n	90011ff6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
90011fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011fba:	891a      	ldrh	r2, [r3, #8]
90011fbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011fbe:	4413      	add	r3, r2
90011fc0:	b29a      	uxth	r2, r3
90011fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011fc4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
90011fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011fc8:	681b      	ldr	r3, [r3, #0]
90011fca:	2b00      	cmp	r3, #0
90011fcc:	d110      	bne.n	90011ff0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
90011fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011fd0:	685b      	ldr	r3, [r3, #4]
90011fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90011fd4:	8952      	ldrh	r2, [r2, #10]
90011fd6:	4413      	add	r3, r2
90011fd8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
90011fda:	68b9      	ldr	r1, [r7, #8]
90011fdc:	4618      	mov	r0, r3
90011fde:	f004 fd39 	bl	90016a54 <memcpy>
        p->len += oversize_used;
90011fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011fe4:	895a      	ldrh	r2, [r3, #10]
90011fe6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011fe8:	4413      	add	r3, r2
90011fea:	b29a      	uxth	r2, r3
90011fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011fee:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
90011ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011ff2:	681b      	ldr	r3, [r3, #0]
90011ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
90011ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011ff8:	2b00      	cmp	r3, #0
90011ffa:	d1dd      	bne.n	90011fb8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
90011ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011ffe:	891a      	ldrh	r2, [r3, #8]
90012000:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90012002:	4413      	add	r3, r2
90012004:	b29a      	uxth	r2, r3
90012006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90012008:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
9001200a:	8a7a      	ldrh	r2, [r7, #18]
9001200c:	68fb      	ldr	r3, [r7, #12]
9001200e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
90012012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90012014:	2b00      	cmp	r3, #0
90012016:	d018      	beq.n	9001204a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
90012018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9001201a:	2b00      	cmp	r3, #0
9001201c:	d106      	bne.n	9001202c <tcp_write+0x508>
9001201e:	4b2a      	ldr	r3, [pc, #168]	; (900120c8 <tcp_write+0x5a4>)
90012020:	f44f 7238 	mov.w	r2, #736	; 0x2e0
90012024:	492d      	ldr	r1, [pc, #180]	; (900120dc <tcp_write+0x5b8>)
90012026:	482a      	ldr	r0, [pc, #168]	; (900120d0 <tcp_write+0x5ac>)
90012028:	f004 fe0a 	bl	90016c40 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
9001202c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9001202e:	685b      	ldr	r3, [r3, #4]
90012030:	6d79      	ldr	r1, [r7, #84]	; 0x54
90012032:	4618      	mov	r0, r3
90012034:	f7fb f884 	bl	9000d140 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
90012038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9001203a:	891a      	ldrh	r2, [r3, #8]
9001203c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9001203e:	891b      	ldrh	r3, [r3, #8]
90012040:	4413      	add	r3, r2
90012042:	b29a      	uxth	r2, r3
90012044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90012046:	811a      	strh	r2, [r3, #8]
90012048:	e037      	b.n	900120ba <tcp_write+0x596>
  } else if (extendlen > 0) {
9001204a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9001204c:	2b00      	cmp	r3, #0
9001204e:	d034      	beq.n	900120ba <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
90012050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90012052:	2b00      	cmp	r3, #0
90012054:	d003      	beq.n	9001205e <tcp_write+0x53a>
90012056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90012058:	685b      	ldr	r3, [r3, #4]
9001205a:	2b00      	cmp	r3, #0
9001205c:	d106      	bne.n	9001206c <tcp_write+0x548>
9001205e:	4b1a      	ldr	r3, [pc, #104]	; (900120c8 <tcp_write+0x5a4>)
90012060:	f240 22e6 	movw	r2, #742	; 0x2e6
90012064:	491e      	ldr	r1, [pc, #120]	; (900120e0 <tcp_write+0x5bc>)
90012066:	481a      	ldr	r0, [pc, #104]	; (900120d0 <tcp_write+0x5ac>)
90012068:	f004 fdea 	bl	90016c40 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
9001206c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9001206e:	685b      	ldr	r3, [r3, #4]
90012070:	62bb      	str	r3, [r7, #40]	; 0x28
90012072:	e009      	b.n	90012088 <tcp_write+0x564>
      p->tot_len += extendlen;
90012074:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012076:	891a      	ldrh	r2, [r3, #8]
90012078:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9001207a:	4413      	add	r3, r2
9001207c:	b29a      	uxth	r2, r3
9001207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012080:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
90012082:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012084:	681b      	ldr	r3, [r3, #0]
90012086:	62bb      	str	r3, [r7, #40]	; 0x28
90012088:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001208a:	681b      	ldr	r3, [r3, #0]
9001208c:	2b00      	cmp	r3, #0
9001208e:	d1f1      	bne.n	90012074 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
90012090:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012092:	891a      	ldrh	r2, [r3, #8]
90012094:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90012096:	4413      	add	r3, r2
90012098:	b29a      	uxth	r2, r3
9001209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001209c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
9001209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
900120a0:	895a      	ldrh	r2, [r3, #10]
900120a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
900120a4:	4413      	add	r3, r2
900120a6:	b29a      	uxth	r2, r3
900120a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900120aa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
900120ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900120ae:	891a      	ldrh	r2, [r3, #8]
900120b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
900120b2:	4413      	add	r3, r2
900120b4:	b29a      	uxth	r2, r3
900120b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900120b8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
900120ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900120bc:	2b00      	cmp	r3, #0
900120be:	d111      	bne.n	900120e4 <tcp_write+0x5c0>
    pcb->unsent = queue;
900120c0:	68fb      	ldr	r3, [r7, #12]
900120c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
900120c4:	66da      	str	r2, [r3, #108]	; 0x6c
900120c6:	e010      	b.n	900120ea <tcp_write+0x5c6>
900120c8:	90019c9c 	.word	0x90019c9c
900120cc:	90019f3c 	.word	0x90019f3c
900120d0:	90019cf0 	.word	0x90019cf0
900120d4:	90019f7c 	.word	0x90019f7c
900120d8:	90019f8c 	.word	0x90019f8c
900120dc:	90019fa0 	.word	0x90019fa0
900120e0:	90019fd8 	.word	0x90019fd8
  } else {
    last_unsent->next = queue;
900120e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900120e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
900120e8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
900120ea:	68fb      	ldr	r3, [r7, #12]
900120ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
900120ee:	88fb      	ldrh	r3, [r7, #6]
900120f0:	441a      	add	r2, r3
900120f2:	68fb      	ldr	r3, [r7, #12]
900120f4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
900120f6:	68fb      	ldr	r3, [r7, #12]
900120f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
900120fc:	88fb      	ldrh	r3, [r7, #6]
900120fe:	1ad3      	subs	r3, r2, r3
90012100:	b29a      	uxth	r2, r3
90012102:	68fb      	ldr	r3, [r7, #12]
90012104:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
90012108:	68fb      	ldr	r3, [r7, #12]
9001210a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
9001210e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
90012112:	68fb      	ldr	r3, [r7, #12]
90012114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90012118:	2b00      	cmp	r3, #0
9001211a:	d00e      	beq.n	9001213a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
9001211c:	68fb      	ldr	r3, [r7, #12]
9001211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012120:	2b00      	cmp	r3, #0
90012122:	d10a      	bne.n	9001213a <tcp_write+0x616>
90012124:	68fb      	ldr	r3, [r7, #12]
90012126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90012128:	2b00      	cmp	r3, #0
9001212a:	d106      	bne.n	9001213a <tcp_write+0x616>
9001212c:	4b2c      	ldr	r3, [pc, #176]	; (900121e0 <tcp_write+0x6bc>)
9001212e:	f240 3212 	movw	r2, #786	; 0x312
90012132:	492c      	ldr	r1, [pc, #176]	; (900121e4 <tcp_write+0x6c0>)
90012134:	482c      	ldr	r0, [pc, #176]	; (900121e8 <tcp_write+0x6c4>)
90012136:	f004 fd83 	bl	90016c40 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
9001213a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9001213c:	2b00      	cmp	r3, #0
9001213e:	d016      	beq.n	9001216e <tcp_write+0x64a>
90012140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90012142:	68db      	ldr	r3, [r3, #12]
90012144:	2b00      	cmp	r3, #0
90012146:	d012      	beq.n	9001216e <tcp_write+0x64a>
90012148:	797b      	ldrb	r3, [r7, #5]
9001214a:	f003 0302 	and.w	r3, r3, #2
9001214e:	2b00      	cmp	r3, #0
90012150:	d10d      	bne.n	9001216e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
90012152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90012154:	68db      	ldr	r3, [r3, #12]
90012156:	899b      	ldrh	r3, [r3, #12]
90012158:	b29c      	uxth	r4, r3
9001215a:	2008      	movs	r0, #8
9001215c:	f7f9 fb76 	bl	9000b84c <lwip_htons>
90012160:	4603      	mov	r3, r0
90012162:	461a      	mov	r2, r3
90012164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90012166:	68db      	ldr	r3, [r3, #12]
90012168:	4322      	orrs	r2, r4
9001216a:	b292      	uxth	r2, r2
9001216c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
9001216e:	2300      	movs	r3, #0
90012170:	e031      	b.n	900121d6 <tcp_write+0x6b2>
          goto memerr;
90012172:	bf00      	nop
90012174:	e006      	b.n	90012184 <tcp_write+0x660>
            goto memerr;
90012176:	bf00      	nop
90012178:	e004      	b.n	90012184 <tcp_write+0x660>
        goto memerr;
9001217a:	bf00      	nop
9001217c:	e002      	b.n	90012184 <tcp_write+0x660>
        goto memerr;
9001217e:	bf00      	nop
90012180:	e000      	b.n	90012184 <tcp_write+0x660>
      goto memerr;
90012182:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
90012184:	68fb      	ldr	r3, [r7, #12]
90012186:	8b5b      	ldrh	r3, [r3, #26]
90012188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9001218c:	b29a      	uxth	r2, r3
9001218e:	68fb      	ldr	r3, [r7, #12]
90012190:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
90012192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90012194:	2b00      	cmp	r3, #0
90012196:	d002      	beq.n	9001219e <tcp_write+0x67a>
    pbuf_free(concat_p);
90012198:	6d78      	ldr	r0, [r7, #84]	; 0x54
9001219a:	f7fa ff03 	bl	9000cfa4 <pbuf_free>
  }
  if (queue != NULL) {
9001219e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900121a0:	2b00      	cmp	r3, #0
900121a2:	d002      	beq.n	900121aa <tcp_write+0x686>
    tcp_segs_free(queue);
900121a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
900121a6:	f7fc fb6b 	bl	9000e880 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
900121aa:	68fb      	ldr	r3, [r7, #12]
900121ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
900121b0:	2b00      	cmp	r3, #0
900121b2:	d00e      	beq.n	900121d2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
900121b4:	68fb      	ldr	r3, [r7, #12]
900121b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900121b8:	2b00      	cmp	r3, #0
900121ba:	d10a      	bne.n	900121d2 <tcp_write+0x6ae>
900121bc:	68fb      	ldr	r3, [r7, #12]
900121be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900121c0:	2b00      	cmp	r3, #0
900121c2:	d106      	bne.n	900121d2 <tcp_write+0x6ae>
900121c4:	4b06      	ldr	r3, [pc, #24]	; (900121e0 <tcp_write+0x6bc>)
900121c6:	f240 3227 	movw	r2, #807	; 0x327
900121ca:	4906      	ldr	r1, [pc, #24]	; (900121e4 <tcp_write+0x6c0>)
900121cc:	4806      	ldr	r0, [pc, #24]	; (900121e8 <tcp_write+0x6c4>)
900121ce:	f004 fd37 	bl	90016c40 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
900121d2:	f04f 33ff 	mov.w	r3, #4294967295
}
900121d6:	4618      	mov	r0, r3
900121d8:	375c      	adds	r7, #92	; 0x5c
900121da:	46bd      	mov	sp, r7
900121dc:	bd90      	pop	{r4, r7, pc}
900121de:	bf00      	nop
900121e0:	90019c9c 	.word	0x90019c9c
900121e4:	9001a010 	.word	0x9001a010
900121e8:	90019cf0 	.word	0x90019cf0

900121ec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
900121ec:	b590      	push	{r4, r7, lr}
900121ee:	b08b      	sub	sp, #44	; 0x2c
900121f0:	af02      	add	r7, sp, #8
900121f2:	6078      	str	r0, [r7, #4]
900121f4:	460b      	mov	r3, r1
900121f6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
900121f8:	2300      	movs	r3, #0
900121fa:	61fb      	str	r3, [r7, #28]
900121fc:	2300      	movs	r3, #0
900121fe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
90012200:	2300      	movs	r3, #0
90012202:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
90012204:	687b      	ldr	r3, [r7, #4]
90012206:	2b00      	cmp	r3, #0
90012208:	d106      	bne.n	90012218 <tcp_split_unsent_seg+0x2c>
9001220a:	4b95      	ldr	r3, [pc, #596]	; (90012460 <tcp_split_unsent_seg+0x274>)
9001220c:	f240 324b 	movw	r2, #843	; 0x34b
90012210:	4994      	ldr	r1, [pc, #592]	; (90012464 <tcp_split_unsent_seg+0x278>)
90012212:	4895      	ldr	r0, [pc, #596]	; (90012468 <tcp_split_unsent_seg+0x27c>)
90012214:	f004 fd14 	bl	90016c40 <iprintf>

  useg = pcb->unsent;
90012218:	687b      	ldr	r3, [r7, #4]
9001221a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9001221c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
9001221e:	697b      	ldr	r3, [r7, #20]
90012220:	2b00      	cmp	r3, #0
90012222:	d102      	bne.n	9001222a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
90012224:	f04f 33ff 	mov.w	r3, #4294967295
90012228:	e116      	b.n	90012458 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
9001222a:	887b      	ldrh	r3, [r7, #2]
9001222c:	2b00      	cmp	r3, #0
9001222e:	d109      	bne.n	90012244 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
90012230:	4b8b      	ldr	r3, [pc, #556]	; (90012460 <tcp_split_unsent_seg+0x274>)
90012232:	f240 3253 	movw	r2, #851	; 0x353
90012236:	498d      	ldr	r1, [pc, #564]	; (9001246c <tcp_split_unsent_seg+0x280>)
90012238:	488b      	ldr	r0, [pc, #556]	; (90012468 <tcp_split_unsent_seg+0x27c>)
9001223a:	f004 fd01 	bl	90016c40 <iprintf>
    return ERR_VAL;
9001223e:	f06f 0305 	mvn.w	r3, #5
90012242:	e109      	b.n	90012458 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
90012244:	697b      	ldr	r3, [r7, #20]
90012246:	891b      	ldrh	r3, [r3, #8]
90012248:	887a      	ldrh	r2, [r7, #2]
9001224a:	429a      	cmp	r2, r3
9001224c:	d301      	bcc.n	90012252 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
9001224e:	2300      	movs	r3, #0
90012250:	e102      	b.n	90012458 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
90012252:	687b      	ldr	r3, [r7, #4]
90012254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90012256:	887a      	ldrh	r2, [r7, #2]
90012258:	429a      	cmp	r2, r3
9001225a:	d906      	bls.n	9001226a <tcp_split_unsent_seg+0x7e>
9001225c:	4b80      	ldr	r3, [pc, #512]	; (90012460 <tcp_split_unsent_seg+0x274>)
9001225e:	f240 325b 	movw	r2, #859	; 0x35b
90012262:	4983      	ldr	r1, [pc, #524]	; (90012470 <tcp_split_unsent_seg+0x284>)
90012264:	4880      	ldr	r0, [pc, #512]	; (90012468 <tcp_split_unsent_seg+0x27c>)
90012266:	f004 fceb 	bl	90016c40 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
9001226a:	697b      	ldr	r3, [r7, #20]
9001226c:	891b      	ldrh	r3, [r3, #8]
9001226e:	2b00      	cmp	r3, #0
90012270:	d106      	bne.n	90012280 <tcp_split_unsent_seg+0x94>
90012272:	4b7b      	ldr	r3, [pc, #492]	; (90012460 <tcp_split_unsent_seg+0x274>)
90012274:	f44f 7257 	mov.w	r2, #860	; 0x35c
90012278:	497e      	ldr	r1, [pc, #504]	; (90012474 <tcp_split_unsent_seg+0x288>)
9001227a:	487b      	ldr	r0, [pc, #492]	; (90012468 <tcp_split_unsent_seg+0x27c>)
9001227c:	f004 fce0 	bl	90016c40 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
90012280:	697b      	ldr	r3, [r7, #20]
90012282:	7a9b      	ldrb	r3, [r3, #10]
90012284:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
90012286:	7bfb      	ldrb	r3, [r7, #15]
90012288:	009b      	lsls	r3, r3, #2
9001228a:	b2db      	uxtb	r3, r3
9001228c:	f003 0304 	and.w	r3, r3, #4
90012290:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
90012292:	697b      	ldr	r3, [r7, #20]
90012294:	891a      	ldrh	r2, [r3, #8]
90012296:	887b      	ldrh	r3, [r7, #2]
90012298:	1ad3      	subs	r3, r2, r3
9001229a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
9001229c:	7bbb      	ldrb	r3, [r7, #14]
9001229e:	b29a      	uxth	r2, r3
900122a0:	89bb      	ldrh	r3, [r7, #12]
900122a2:	4413      	add	r3, r2
900122a4:	b29b      	uxth	r3, r3
900122a6:	f44f 7220 	mov.w	r2, #640	; 0x280
900122aa:	4619      	mov	r1, r3
900122ac:	2036      	movs	r0, #54	; 0x36
900122ae:	f7fa fb95 	bl	9000c9dc <pbuf_alloc>
900122b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
900122b4:	693b      	ldr	r3, [r7, #16]
900122b6:	2b00      	cmp	r3, #0
900122b8:	f000 80b7 	beq.w	9001242a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
900122bc:	697b      	ldr	r3, [r7, #20]
900122be:	685b      	ldr	r3, [r3, #4]
900122c0:	891a      	ldrh	r2, [r3, #8]
900122c2:	697b      	ldr	r3, [r7, #20]
900122c4:	891b      	ldrh	r3, [r3, #8]
900122c6:	1ad3      	subs	r3, r2, r3
900122c8:	b29a      	uxth	r2, r3
900122ca:	887b      	ldrh	r3, [r7, #2]
900122cc:	4413      	add	r3, r2
900122ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
900122d0:	697b      	ldr	r3, [r7, #20]
900122d2:	6858      	ldr	r0, [r3, #4]
900122d4:	693b      	ldr	r3, [r7, #16]
900122d6:	685a      	ldr	r2, [r3, #4]
900122d8:	7bbb      	ldrb	r3, [r7, #14]
900122da:	18d1      	adds	r1, r2, r3
900122dc:	897b      	ldrh	r3, [r7, #10]
900122de:	89ba      	ldrh	r2, [r7, #12]
900122e0:	f7fb f856 	bl	9000d390 <pbuf_copy_partial>
900122e4:	4603      	mov	r3, r0
900122e6:	461a      	mov	r2, r3
900122e8:	89bb      	ldrh	r3, [r7, #12]
900122ea:	4293      	cmp	r3, r2
900122ec:	f040 809f 	bne.w	9001242e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
900122f0:	697b      	ldr	r3, [r7, #20]
900122f2:	68db      	ldr	r3, [r3, #12]
900122f4:	899b      	ldrh	r3, [r3, #12]
900122f6:	b29b      	uxth	r3, r3
900122f8:	4618      	mov	r0, r3
900122fa:	f7f9 faa7 	bl	9000b84c <lwip_htons>
900122fe:	4603      	mov	r3, r0
90012300:	b2db      	uxtb	r3, r3
90012302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90012306:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
90012308:	2300      	movs	r3, #0
9001230a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
9001230c:	7efb      	ldrb	r3, [r7, #27]
9001230e:	f003 0308 	and.w	r3, r3, #8
90012312:	2b00      	cmp	r3, #0
90012314:	d007      	beq.n	90012326 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
90012316:	7efb      	ldrb	r3, [r7, #27]
90012318:	f023 0308 	bic.w	r3, r3, #8
9001231c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
9001231e:	7ebb      	ldrb	r3, [r7, #26]
90012320:	f043 0308 	orr.w	r3, r3, #8
90012324:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
90012326:	7efb      	ldrb	r3, [r7, #27]
90012328:	f003 0301 	and.w	r3, r3, #1
9001232c:	2b00      	cmp	r3, #0
9001232e:	d007      	beq.n	90012340 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
90012330:	7efb      	ldrb	r3, [r7, #27]
90012332:	f023 0301 	bic.w	r3, r3, #1
90012336:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
90012338:	7ebb      	ldrb	r3, [r7, #26]
9001233a:	f043 0301 	orr.w	r3, r3, #1
9001233e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
90012340:	697b      	ldr	r3, [r7, #20]
90012342:	68db      	ldr	r3, [r3, #12]
90012344:	685b      	ldr	r3, [r3, #4]
90012346:	4618      	mov	r0, r3
90012348:	f7f9 fa95 	bl	9000b876 <lwip_htonl>
9001234c:	4602      	mov	r2, r0
9001234e:	887b      	ldrh	r3, [r7, #2]
90012350:	18d1      	adds	r1, r2, r3
90012352:	7eba      	ldrb	r2, [r7, #26]
90012354:	7bfb      	ldrb	r3, [r7, #15]
90012356:	9300      	str	r3, [sp, #0]
90012358:	460b      	mov	r3, r1
9001235a:	6939      	ldr	r1, [r7, #16]
9001235c:	6878      	ldr	r0, [r7, #4]
9001235e:	f7ff fa4f 	bl	90011800 <tcp_create_segment>
90012362:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
90012364:	69fb      	ldr	r3, [r7, #28]
90012366:	2b00      	cmp	r3, #0
90012368:	d063      	beq.n	90012432 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
9001236a:	697b      	ldr	r3, [r7, #20]
9001236c:	685b      	ldr	r3, [r3, #4]
9001236e:	4618      	mov	r0, r3
90012370:	f7fa fea6 	bl	9000d0c0 <pbuf_clen>
90012374:	4603      	mov	r3, r0
90012376:	461a      	mov	r2, r3
90012378:	687b      	ldr	r3, [r7, #4]
9001237a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9001237e:	1a9b      	subs	r3, r3, r2
90012380:	b29a      	uxth	r2, r3
90012382:	687b      	ldr	r3, [r7, #4]
90012384:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
90012388:	697b      	ldr	r3, [r7, #20]
9001238a:	6858      	ldr	r0, [r3, #4]
9001238c:	697b      	ldr	r3, [r7, #20]
9001238e:	685b      	ldr	r3, [r3, #4]
90012390:	891a      	ldrh	r2, [r3, #8]
90012392:	89bb      	ldrh	r3, [r7, #12]
90012394:	1ad3      	subs	r3, r2, r3
90012396:	b29b      	uxth	r3, r3
90012398:	4619      	mov	r1, r3
9001239a:	f7fa fc7d 	bl	9000cc98 <pbuf_realloc>
  useg->len -= remainder;
9001239e:	697b      	ldr	r3, [r7, #20]
900123a0:	891a      	ldrh	r2, [r3, #8]
900123a2:	89bb      	ldrh	r3, [r7, #12]
900123a4:	1ad3      	subs	r3, r2, r3
900123a6:	b29a      	uxth	r2, r3
900123a8:	697b      	ldr	r3, [r7, #20]
900123aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
900123ac:	697b      	ldr	r3, [r7, #20]
900123ae:	68db      	ldr	r3, [r3, #12]
900123b0:	899b      	ldrh	r3, [r3, #12]
900123b2:	b29c      	uxth	r4, r3
900123b4:	7efb      	ldrb	r3, [r7, #27]
900123b6:	b29b      	uxth	r3, r3
900123b8:	4618      	mov	r0, r3
900123ba:	f7f9 fa47 	bl	9000b84c <lwip_htons>
900123be:	4603      	mov	r3, r0
900123c0:	461a      	mov	r2, r3
900123c2:	697b      	ldr	r3, [r7, #20]
900123c4:	68db      	ldr	r3, [r3, #12]
900123c6:	4322      	orrs	r2, r4
900123c8:	b292      	uxth	r2, r2
900123ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
900123cc:	697b      	ldr	r3, [r7, #20]
900123ce:	685b      	ldr	r3, [r3, #4]
900123d0:	4618      	mov	r0, r3
900123d2:	f7fa fe75 	bl	9000d0c0 <pbuf_clen>
900123d6:	4603      	mov	r3, r0
900123d8:	461a      	mov	r2, r3
900123da:	687b      	ldr	r3, [r7, #4]
900123dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
900123e0:	4413      	add	r3, r2
900123e2:	b29a      	uxth	r2, r3
900123e4:	687b      	ldr	r3, [r7, #4]
900123e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
900123ea:	69fb      	ldr	r3, [r7, #28]
900123ec:	685b      	ldr	r3, [r3, #4]
900123ee:	4618      	mov	r0, r3
900123f0:	f7fa fe66 	bl	9000d0c0 <pbuf_clen>
900123f4:	4603      	mov	r3, r0
900123f6:	461a      	mov	r2, r3
900123f8:	687b      	ldr	r3, [r7, #4]
900123fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
900123fe:	4413      	add	r3, r2
90012400:	b29a      	uxth	r2, r3
90012402:	687b      	ldr	r3, [r7, #4]
90012404:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
90012408:	697b      	ldr	r3, [r7, #20]
9001240a:	681a      	ldr	r2, [r3, #0]
9001240c:	69fb      	ldr	r3, [r7, #28]
9001240e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
90012410:	697b      	ldr	r3, [r7, #20]
90012412:	69fa      	ldr	r2, [r7, #28]
90012414:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
90012416:	69fb      	ldr	r3, [r7, #28]
90012418:	681b      	ldr	r3, [r3, #0]
9001241a:	2b00      	cmp	r3, #0
9001241c:	d103      	bne.n	90012426 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
9001241e:	687b      	ldr	r3, [r7, #4]
90012420:	2200      	movs	r2, #0
90012422:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
90012426:	2300      	movs	r3, #0
90012428:	e016      	b.n	90012458 <tcp_split_unsent_seg+0x26c>
    goto memerr;
9001242a:	bf00      	nop
9001242c:	e002      	b.n	90012434 <tcp_split_unsent_seg+0x248>
    goto memerr;
9001242e:	bf00      	nop
90012430:	e000      	b.n	90012434 <tcp_split_unsent_seg+0x248>
    goto memerr;
90012432:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
90012434:	69fb      	ldr	r3, [r7, #28]
90012436:	2b00      	cmp	r3, #0
90012438:	d006      	beq.n	90012448 <tcp_split_unsent_seg+0x25c>
9001243a:	4b09      	ldr	r3, [pc, #36]	; (90012460 <tcp_split_unsent_seg+0x274>)
9001243c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
90012440:	490d      	ldr	r1, [pc, #52]	; (90012478 <tcp_split_unsent_seg+0x28c>)
90012442:	4809      	ldr	r0, [pc, #36]	; (90012468 <tcp_split_unsent_seg+0x27c>)
90012444:	f004 fbfc 	bl	90016c40 <iprintf>
  if (p != NULL) {
90012448:	693b      	ldr	r3, [r7, #16]
9001244a:	2b00      	cmp	r3, #0
9001244c:	d002      	beq.n	90012454 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
9001244e:	6938      	ldr	r0, [r7, #16]
90012450:	f7fa fda8 	bl	9000cfa4 <pbuf_free>
  }

  return ERR_MEM;
90012454:	f04f 33ff 	mov.w	r3, #4294967295
}
90012458:	4618      	mov	r0, r3
9001245a:	3724      	adds	r7, #36	; 0x24
9001245c:	46bd      	mov	sp, r7
9001245e:	bd90      	pop	{r4, r7, pc}
90012460:	90019c9c 	.word	0x90019c9c
90012464:	9001a030 	.word	0x9001a030
90012468:	90019cf0 	.word	0x90019cf0
9001246c:	9001a054 	.word	0x9001a054
90012470:	9001a078 	.word	0x9001a078
90012474:	9001a088 	.word	0x9001a088
90012478:	9001a098 	.word	0x9001a098

9001247c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
9001247c:	b590      	push	{r4, r7, lr}
9001247e:	b085      	sub	sp, #20
90012480:	af00      	add	r7, sp, #0
90012482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
90012484:	687b      	ldr	r3, [r7, #4]
90012486:	2b00      	cmp	r3, #0
90012488:	d106      	bne.n	90012498 <tcp_send_fin+0x1c>
9001248a:	4b21      	ldr	r3, [pc, #132]	; (90012510 <tcp_send_fin+0x94>)
9001248c:	f240 32eb 	movw	r2, #1003	; 0x3eb
90012490:	4920      	ldr	r1, [pc, #128]	; (90012514 <tcp_send_fin+0x98>)
90012492:	4821      	ldr	r0, [pc, #132]	; (90012518 <tcp_send_fin+0x9c>)
90012494:	f004 fbd4 	bl	90016c40 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
90012498:	687b      	ldr	r3, [r7, #4]
9001249a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9001249c:	2b00      	cmp	r3, #0
9001249e:	d02e      	beq.n	900124fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
900124a0:	687b      	ldr	r3, [r7, #4]
900124a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900124a4:	60fb      	str	r3, [r7, #12]
900124a6:	e002      	b.n	900124ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
900124a8:	68fb      	ldr	r3, [r7, #12]
900124aa:	681b      	ldr	r3, [r3, #0]
900124ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
900124ae:	68fb      	ldr	r3, [r7, #12]
900124b0:	681b      	ldr	r3, [r3, #0]
900124b2:	2b00      	cmp	r3, #0
900124b4:	d1f8      	bne.n	900124a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
900124b6:	68fb      	ldr	r3, [r7, #12]
900124b8:	68db      	ldr	r3, [r3, #12]
900124ba:	899b      	ldrh	r3, [r3, #12]
900124bc:	b29b      	uxth	r3, r3
900124be:	4618      	mov	r0, r3
900124c0:	f7f9 f9c4 	bl	9000b84c <lwip_htons>
900124c4:	4603      	mov	r3, r0
900124c6:	b2db      	uxtb	r3, r3
900124c8:	f003 0307 	and.w	r3, r3, #7
900124cc:	2b00      	cmp	r3, #0
900124ce:	d116      	bne.n	900124fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
900124d0:	68fb      	ldr	r3, [r7, #12]
900124d2:	68db      	ldr	r3, [r3, #12]
900124d4:	899b      	ldrh	r3, [r3, #12]
900124d6:	b29c      	uxth	r4, r3
900124d8:	2001      	movs	r0, #1
900124da:	f7f9 f9b7 	bl	9000b84c <lwip_htons>
900124de:	4603      	mov	r3, r0
900124e0:	461a      	mov	r2, r3
900124e2:	68fb      	ldr	r3, [r7, #12]
900124e4:	68db      	ldr	r3, [r3, #12]
900124e6:	4322      	orrs	r2, r4
900124e8:	b292      	uxth	r2, r2
900124ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
900124ec:	687b      	ldr	r3, [r7, #4]
900124ee:	8b5b      	ldrh	r3, [r3, #26]
900124f0:	f043 0320 	orr.w	r3, r3, #32
900124f4:	b29a      	uxth	r2, r3
900124f6:	687b      	ldr	r3, [r7, #4]
900124f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
900124fa:	2300      	movs	r3, #0
900124fc:	e004      	b.n	90012508 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
900124fe:	2101      	movs	r1, #1
90012500:	6878      	ldr	r0, [r7, #4]
90012502:	f000 f80b 	bl	9001251c <tcp_enqueue_flags>
90012506:	4603      	mov	r3, r0
}
90012508:	4618      	mov	r0, r3
9001250a:	3714      	adds	r7, #20
9001250c:	46bd      	mov	sp, r7
9001250e:	bd90      	pop	{r4, r7, pc}
90012510:	90019c9c 	.word	0x90019c9c
90012514:	9001a0a4 	.word	0x9001a0a4
90012518:	90019cf0 	.word	0x90019cf0

9001251c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
9001251c:	b580      	push	{r7, lr}
9001251e:	b08a      	sub	sp, #40	; 0x28
90012520:	af02      	add	r7, sp, #8
90012522:	6078      	str	r0, [r7, #4]
90012524:	460b      	mov	r3, r1
90012526:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
90012528:	2300      	movs	r3, #0
9001252a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
9001252c:	2300      	movs	r3, #0
9001252e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
90012530:	78fb      	ldrb	r3, [r7, #3]
90012532:	f003 0303 	and.w	r3, r3, #3
90012536:	2b00      	cmp	r3, #0
90012538:	d106      	bne.n	90012548 <tcp_enqueue_flags+0x2c>
9001253a:	4b67      	ldr	r3, [pc, #412]	; (900126d8 <tcp_enqueue_flags+0x1bc>)
9001253c:	f240 4211 	movw	r2, #1041	; 0x411
90012540:	4966      	ldr	r1, [pc, #408]	; (900126dc <tcp_enqueue_flags+0x1c0>)
90012542:	4867      	ldr	r0, [pc, #412]	; (900126e0 <tcp_enqueue_flags+0x1c4>)
90012544:	f004 fb7c 	bl	90016c40 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
90012548:	687b      	ldr	r3, [r7, #4]
9001254a:	2b00      	cmp	r3, #0
9001254c:	d106      	bne.n	9001255c <tcp_enqueue_flags+0x40>
9001254e:	4b62      	ldr	r3, [pc, #392]	; (900126d8 <tcp_enqueue_flags+0x1bc>)
90012550:	f240 4213 	movw	r2, #1043	; 0x413
90012554:	4963      	ldr	r1, [pc, #396]	; (900126e4 <tcp_enqueue_flags+0x1c8>)
90012556:	4862      	ldr	r0, [pc, #392]	; (900126e0 <tcp_enqueue_flags+0x1c4>)
90012558:	f004 fb72 	bl	90016c40 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
9001255c:	78fb      	ldrb	r3, [r7, #3]
9001255e:	f003 0302 	and.w	r3, r3, #2
90012562:	2b00      	cmp	r3, #0
90012564:	d001      	beq.n	9001256a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
90012566:	2301      	movs	r3, #1
90012568:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
9001256a:	7ffb      	ldrb	r3, [r7, #31]
9001256c:	009b      	lsls	r3, r3, #2
9001256e:	b2db      	uxtb	r3, r3
90012570:	f003 0304 	and.w	r3, r3, #4
90012574:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
90012576:	7dfb      	ldrb	r3, [r7, #23]
90012578:	b29b      	uxth	r3, r3
9001257a:	f44f 7220 	mov.w	r2, #640	; 0x280
9001257e:	4619      	mov	r1, r3
90012580:	2036      	movs	r0, #54	; 0x36
90012582:	f7fa fa2b 	bl	9000c9dc <pbuf_alloc>
90012586:	6138      	str	r0, [r7, #16]
90012588:	693b      	ldr	r3, [r7, #16]
9001258a:	2b00      	cmp	r3, #0
9001258c:	d109      	bne.n	900125a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
9001258e:	687b      	ldr	r3, [r7, #4]
90012590:	8b5b      	ldrh	r3, [r3, #26]
90012592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90012596:	b29a      	uxth	r2, r3
90012598:	687b      	ldr	r3, [r7, #4]
9001259a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
9001259c:	f04f 33ff 	mov.w	r3, #4294967295
900125a0:	e095      	b.n	900126ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
900125a2:	693b      	ldr	r3, [r7, #16]
900125a4:	895a      	ldrh	r2, [r3, #10]
900125a6:	7dfb      	ldrb	r3, [r7, #23]
900125a8:	b29b      	uxth	r3, r3
900125aa:	429a      	cmp	r2, r3
900125ac:	d206      	bcs.n	900125bc <tcp_enqueue_flags+0xa0>
900125ae:	4b4a      	ldr	r3, [pc, #296]	; (900126d8 <tcp_enqueue_flags+0x1bc>)
900125b0:	f240 4239 	movw	r2, #1081	; 0x439
900125b4:	494c      	ldr	r1, [pc, #304]	; (900126e8 <tcp_enqueue_flags+0x1cc>)
900125b6:	484a      	ldr	r0, [pc, #296]	; (900126e0 <tcp_enqueue_flags+0x1c4>)
900125b8:	f004 fb42 	bl	90016c40 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
900125bc:	687b      	ldr	r3, [r7, #4]
900125be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
900125c0:	78fa      	ldrb	r2, [r7, #3]
900125c2:	7ffb      	ldrb	r3, [r7, #31]
900125c4:	9300      	str	r3, [sp, #0]
900125c6:	460b      	mov	r3, r1
900125c8:	6939      	ldr	r1, [r7, #16]
900125ca:	6878      	ldr	r0, [r7, #4]
900125cc:	f7ff f918 	bl	90011800 <tcp_create_segment>
900125d0:	60f8      	str	r0, [r7, #12]
900125d2:	68fb      	ldr	r3, [r7, #12]
900125d4:	2b00      	cmp	r3, #0
900125d6:	d109      	bne.n	900125ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
900125d8:	687b      	ldr	r3, [r7, #4]
900125da:	8b5b      	ldrh	r3, [r3, #26]
900125dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900125e0:	b29a      	uxth	r2, r3
900125e2:	687b      	ldr	r3, [r7, #4]
900125e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
900125e6:	f04f 33ff 	mov.w	r3, #4294967295
900125ea:	e070      	b.n	900126ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
900125ec:	68fb      	ldr	r3, [r7, #12]
900125ee:	68db      	ldr	r3, [r3, #12]
900125f0:	f003 0303 	and.w	r3, r3, #3
900125f4:	2b00      	cmp	r3, #0
900125f6:	d006      	beq.n	90012606 <tcp_enqueue_flags+0xea>
900125f8:	4b37      	ldr	r3, [pc, #220]	; (900126d8 <tcp_enqueue_flags+0x1bc>)
900125fa:	f240 4242 	movw	r2, #1090	; 0x442
900125fe:	493b      	ldr	r1, [pc, #236]	; (900126ec <tcp_enqueue_flags+0x1d0>)
90012600:	4837      	ldr	r0, [pc, #220]	; (900126e0 <tcp_enqueue_flags+0x1c4>)
90012602:	f004 fb1d 	bl	90016c40 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
90012606:	68fb      	ldr	r3, [r7, #12]
90012608:	891b      	ldrh	r3, [r3, #8]
9001260a:	2b00      	cmp	r3, #0
9001260c:	d006      	beq.n	9001261c <tcp_enqueue_flags+0x100>
9001260e:	4b32      	ldr	r3, [pc, #200]	; (900126d8 <tcp_enqueue_flags+0x1bc>)
90012610:	f240 4243 	movw	r2, #1091	; 0x443
90012614:	4936      	ldr	r1, [pc, #216]	; (900126f0 <tcp_enqueue_flags+0x1d4>)
90012616:	4832      	ldr	r0, [pc, #200]	; (900126e0 <tcp_enqueue_flags+0x1c4>)
90012618:	f004 fb12 	bl	90016c40 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
9001261c:	687b      	ldr	r3, [r7, #4]
9001261e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90012620:	2b00      	cmp	r3, #0
90012622:	d103      	bne.n	9001262c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
90012624:	687b      	ldr	r3, [r7, #4]
90012626:	68fa      	ldr	r2, [r7, #12]
90012628:	66da      	str	r2, [r3, #108]	; 0x6c
9001262a:	e00d      	b.n	90012648 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
9001262c:	687b      	ldr	r3, [r7, #4]
9001262e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90012630:	61bb      	str	r3, [r7, #24]
90012632:	e002      	b.n	9001263a <tcp_enqueue_flags+0x11e>
90012634:	69bb      	ldr	r3, [r7, #24]
90012636:	681b      	ldr	r3, [r3, #0]
90012638:	61bb      	str	r3, [r7, #24]
9001263a:	69bb      	ldr	r3, [r7, #24]
9001263c:	681b      	ldr	r3, [r3, #0]
9001263e:	2b00      	cmp	r3, #0
90012640:	d1f8      	bne.n	90012634 <tcp_enqueue_flags+0x118>
    useg->next = seg;
90012642:	69bb      	ldr	r3, [r7, #24]
90012644:	68fa      	ldr	r2, [r7, #12]
90012646:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
90012648:	687b      	ldr	r3, [r7, #4]
9001264a:	2200      	movs	r2, #0
9001264c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
90012650:	78fb      	ldrb	r3, [r7, #3]
90012652:	f003 0302 	and.w	r3, r3, #2
90012656:	2b00      	cmp	r3, #0
90012658:	d104      	bne.n	90012664 <tcp_enqueue_flags+0x148>
9001265a:	78fb      	ldrb	r3, [r7, #3]
9001265c:	f003 0301 	and.w	r3, r3, #1
90012660:	2b00      	cmp	r3, #0
90012662:	d004      	beq.n	9001266e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
90012664:	687b      	ldr	r3, [r7, #4]
90012666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90012668:	1c5a      	adds	r2, r3, #1
9001266a:	687b      	ldr	r3, [r7, #4]
9001266c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
9001266e:	78fb      	ldrb	r3, [r7, #3]
90012670:	f003 0301 	and.w	r3, r3, #1
90012674:	2b00      	cmp	r3, #0
90012676:	d006      	beq.n	90012686 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
90012678:	687b      	ldr	r3, [r7, #4]
9001267a:	8b5b      	ldrh	r3, [r3, #26]
9001267c:	f043 0320 	orr.w	r3, r3, #32
90012680:	b29a      	uxth	r2, r3
90012682:	687b      	ldr	r3, [r7, #4]
90012684:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
90012686:	68fb      	ldr	r3, [r7, #12]
90012688:	685b      	ldr	r3, [r3, #4]
9001268a:	4618      	mov	r0, r3
9001268c:	f7fa fd18 	bl	9000d0c0 <pbuf_clen>
90012690:	4603      	mov	r3, r0
90012692:	461a      	mov	r2, r3
90012694:	687b      	ldr	r3, [r7, #4]
90012696:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9001269a:	4413      	add	r3, r2
9001269c:	b29a      	uxth	r2, r3
9001269e:	687b      	ldr	r3, [r7, #4]
900126a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
900126a4:	687b      	ldr	r3, [r7, #4]
900126a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
900126aa:	2b00      	cmp	r3, #0
900126ac:	d00e      	beq.n	900126cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
900126ae:	687b      	ldr	r3, [r7, #4]
900126b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900126b2:	2b00      	cmp	r3, #0
900126b4:	d10a      	bne.n	900126cc <tcp_enqueue_flags+0x1b0>
900126b6:	687b      	ldr	r3, [r7, #4]
900126b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900126ba:	2b00      	cmp	r3, #0
900126bc:	d106      	bne.n	900126cc <tcp_enqueue_flags+0x1b0>
900126be:	4b06      	ldr	r3, [pc, #24]	; (900126d8 <tcp_enqueue_flags+0x1bc>)
900126c0:	f240 4265 	movw	r2, #1125	; 0x465
900126c4:	490b      	ldr	r1, [pc, #44]	; (900126f4 <tcp_enqueue_flags+0x1d8>)
900126c6:	4806      	ldr	r0, [pc, #24]	; (900126e0 <tcp_enqueue_flags+0x1c4>)
900126c8:	f004 faba 	bl	90016c40 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
900126cc:	2300      	movs	r3, #0
}
900126ce:	4618      	mov	r0, r3
900126d0:	3720      	adds	r7, #32
900126d2:	46bd      	mov	sp, r7
900126d4:	bd80      	pop	{r7, pc}
900126d6:	bf00      	nop
900126d8:	90019c9c 	.word	0x90019c9c
900126dc:	9001a0c0 	.word	0x9001a0c0
900126e0:	90019cf0 	.word	0x90019cf0
900126e4:	9001a118 	.word	0x9001a118
900126e8:	9001a138 	.word	0x9001a138
900126ec:	9001a174 	.word	0x9001a174
900126f0:	9001a18c 	.word	0x9001a18c
900126f4:	9001a1b8 	.word	0x9001a1b8

900126f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
900126f8:	b5b0      	push	{r4, r5, r7, lr}
900126fa:	b08a      	sub	sp, #40	; 0x28
900126fc:	af00      	add	r7, sp, #0
900126fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
90012700:	687b      	ldr	r3, [r7, #4]
90012702:	2b00      	cmp	r3, #0
90012704:	d106      	bne.n	90012714 <tcp_output+0x1c>
90012706:	4b8a      	ldr	r3, [pc, #552]	; (90012930 <tcp_output+0x238>)
90012708:	f240 42e1 	movw	r2, #1249	; 0x4e1
9001270c:	4989      	ldr	r1, [pc, #548]	; (90012934 <tcp_output+0x23c>)
9001270e:	488a      	ldr	r0, [pc, #552]	; (90012938 <tcp_output+0x240>)
90012710:	f004 fa96 	bl	90016c40 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
90012714:	687b      	ldr	r3, [r7, #4]
90012716:	7d1b      	ldrb	r3, [r3, #20]
90012718:	2b01      	cmp	r3, #1
9001271a:	d106      	bne.n	9001272a <tcp_output+0x32>
9001271c:	4b84      	ldr	r3, [pc, #528]	; (90012930 <tcp_output+0x238>)
9001271e:	f240 42e3 	movw	r2, #1251	; 0x4e3
90012722:	4986      	ldr	r1, [pc, #536]	; (9001293c <tcp_output+0x244>)
90012724:	4884      	ldr	r0, [pc, #528]	; (90012938 <tcp_output+0x240>)
90012726:	f004 fa8b 	bl	90016c40 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
9001272a:	4b85      	ldr	r3, [pc, #532]	; (90012940 <tcp_output+0x248>)
9001272c:	681b      	ldr	r3, [r3, #0]
9001272e:	687a      	ldr	r2, [r7, #4]
90012730:	429a      	cmp	r2, r3
90012732:	d101      	bne.n	90012738 <tcp_output+0x40>
    return ERR_OK;
90012734:	2300      	movs	r3, #0
90012736:	e1ce      	b.n	90012ad6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
90012738:	687b      	ldr	r3, [r7, #4]
9001273a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9001273e:	687b      	ldr	r3, [r7, #4]
90012740:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
90012744:	4293      	cmp	r3, r2
90012746:	bf28      	it	cs
90012748:	4613      	movcs	r3, r2
9001274a:	b29b      	uxth	r3, r3
9001274c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
9001274e:	687b      	ldr	r3, [r7, #4]
90012750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90012752:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
90012754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012756:	2b00      	cmp	r3, #0
90012758:	d10b      	bne.n	90012772 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
9001275a:	687b      	ldr	r3, [r7, #4]
9001275c:	8b5b      	ldrh	r3, [r3, #26]
9001275e:	f003 0302 	and.w	r3, r3, #2
90012762:	2b00      	cmp	r3, #0
90012764:	f000 81aa 	beq.w	90012abc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
90012768:	6878      	ldr	r0, [r7, #4]
9001276a:	f000 fdcb 	bl	90013304 <tcp_send_empty_ack>
9001276e:	4603      	mov	r3, r0
90012770:	e1b1      	b.n	90012ad6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
90012772:	6879      	ldr	r1, [r7, #4]
90012774:	687b      	ldr	r3, [r7, #4]
90012776:	3304      	adds	r3, #4
90012778:	461a      	mov	r2, r3
9001277a:	6878      	ldr	r0, [r7, #4]
9001277c:	f7ff f824 	bl	900117c8 <tcp_route>
90012780:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
90012782:	697b      	ldr	r3, [r7, #20]
90012784:	2b00      	cmp	r3, #0
90012786:	d102      	bne.n	9001278e <tcp_output+0x96>
    return ERR_RTE;
90012788:	f06f 0303 	mvn.w	r3, #3
9001278c:	e1a3      	b.n	90012ad6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
9001278e:	687b      	ldr	r3, [r7, #4]
90012790:	2b00      	cmp	r3, #0
90012792:	d003      	beq.n	9001279c <tcp_output+0xa4>
90012794:	687b      	ldr	r3, [r7, #4]
90012796:	681b      	ldr	r3, [r3, #0]
90012798:	2b00      	cmp	r3, #0
9001279a:	d111      	bne.n	900127c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
9001279c:	697b      	ldr	r3, [r7, #20]
9001279e:	2b00      	cmp	r3, #0
900127a0:	d002      	beq.n	900127a8 <tcp_output+0xb0>
900127a2:	697b      	ldr	r3, [r7, #20]
900127a4:	3304      	adds	r3, #4
900127a6:	e000      	b.n	900127aa <tcp_output+0xb2>
900127a8:	2300      	movs	r3, #0
900127aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
900127ac:	693b      	ldr	r3, [r7, #16]
900127ae:	2b00      	cmp	r3, #0
900127b0:	d102      	bne.n	900127b8 <tcp_output+0xc0>
      return ERR_RTE;
900127b2:	f06f 0303 	mvn.w	r3, #3
900127b6:	e18e      	b.n	90012ad6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
900127b8:	693b      	ldr	r3, [r7, #16]
900127ba:	681a      	ldr	r2, [r3, #0]
900127bc:	687b      	ldr	r3, [r7, #4]
900127be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
900127c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900127c2:	68db      	ldr	r3, [r3, #12]
900127c4:	685b      	ldr	r3, [r3, #4]
900127c6:	4618      	mov	r0, r3
900127c8:	f7f9 f855 	bl	9000b876 <lwip_htonl>
900127cc:	4602      	mov	r2, r0
900127ce:	687b      	ldr	r3, [r7, #4]
900127d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900127d2:	1ad3      	subs	r3, r2, r3
900127d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900127d6:	8912      	ldrh	r2, [r2, #8]
900127d8:	4413      	add	r3, r2
900127da:	69ba      	ldr	r2, [r7, #24]
900127dc:	429a      	cmp	r2, r3
900127de:	d227      	bcs.n	90012830 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
900127e0:	687b      	ldr	r3, [r7, #4]
900127e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
900127e6:	461a      	mov	r2, r3
900127e8:	69bb      	ldr	r3, [r7, #24]
900127ea:	4293      	cmp	r3, r2
900127ec:	d114      	bne.n	90012818 <tcp_output+0x120>
900127ee:	687b      	ldr	r3, [r7, #4]
900127f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900127f2:	2b00      	cmp	r3, #0
900127f4:	d110      	bne.n	90012818 <tcp_output+0x120>
900127f6:	687b      	ldr	r3, [r7, #4]
900127f8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
900127fc:	2b00      	cmp	r3, #0
900127fe:	d10b      	bne.n	90012818 <tcp_output+0x120>
      pcb->persist_cnt = 0;
90012800:	687b      	ldr	r3, [r7, #4]
90012802:	2200      	movs	r2, #0
90012804:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
90012808:	687b      	ldr	r3, [r7, #4]
9001280a:	2201      	movs	r2, #1
9001280c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
90012810:	687b      	ldr	r3, [r7, #4]
90012812:	2200      	movs	r2, #0
90012814:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
90012818:	687b      	ldr	r3, [r7, #4]
9001281a:	8b5b      	ldrh	r3, [r3, #26]
9001281c:	f003 0302 	and.w	r3, r3, #2
90012820:	2b00      	cmp	r3, #0
90012822:	f000 814d 	beq.w	90012ac0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
90012826:	6878      	ldr	r0, [r7, #4]
90012828:	f000 fd6c 	bl	90013304 <tcp_send_empty_ack>
9001282c:	4603      	mov	r3, r0
9001282e:	e152      	b.n	90012ad6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
90012830:	687b      	ldr	r3, [r7, #4]
90012832:	2200      	movs	r2, #0
90012834:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
90012838:	687b      	ldr	r3, [r7, #4]
9001283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9001283c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
9001283e:	6a3b      	ldr	r3, [r7, #32]
90012840:	2b00      	cmp	r3, #0
90012842:	f000 811c 	beq.w	90012a7e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
90012846:	e002      	b.n	9001284e <tcp_output+0x156>
90012848:	6a3b      	ldr	r3, [r7, #32]
9001284a:	681b      	ldr	r3, [r3, #0]
9001284c:	623b      	str	r3, [r7, #32]
9001284e:	6a3b      	ldr	r3, [r7, #32]
90012850:	681b      	ldr	r3, [r3, #0]
90012852:	2b00      	cmp	r3, #0
90012854:	d1f8      	bne.n	90012848 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
90012856:	e112      	b.n	90012a7e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
90012858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001285a:	68db      	ldr	r3, [r3, #12]
9001285c:	899b      	ldrh	r3, [r3, #12]
9001285e:	b29b      	uxth	r3, r3
90012860:	4618      	mov	r0, r3
90012862:	f7f8 fff3 	bl	9000b84c <lwip_htons>
90012866:	4603      	mov	r3, r0
90012868:	b2db      	uxtb	r3, r3
9001286a:	f003 0304 	and.w	r3, r3, #4
9001286e:	2b00      	cmp	r3, #0
90012870:	d006      	beq.n	90012880 <tcp_output+0x188>
90012872:	4b2f      	ldr	r3, [pc, #188]	; (90012930 <tcp_output+0x238>)
90012874:	f240 5236 	movw	r2, #1334	; 0x536
90012878:	4932      	ldr	r1, [pc, #200]	; (90012944 <tcp_output+0x24c>)
9001287a:	482f      	ldr	r0, [pc, #188]	; (90012938 <tcp_output+0x240>)
9001287c:	f004 f9e0 	bl	90016c40 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
90012880:	687b      	ldr	r3, [r7, #4]
90012882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012884:	2b00      	cmp	r3, #0
90012886:	d01f      	beq.n	900128c8 <tcp_output+0x1d0>
90012888:	687b      	ldr	r3, [r7, #4]
9001288a:	8b5b      	ldrh	r3, [r3, #26]
9001288c:	f003 0344 	and.w	r3, r3, #68	; 0x44
90012890:	2b00      	cmp	r3, #0
90012892:	d119      	bne.n	900128c8 <tcp_output+0x1d0>
90012894:	687b      	ldr	r3, [r7, #4]
90012896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90012898:	2b00      	cmp	r3, #0
9001289a:	d00b      	beq.n	900128b4 <tcp_output+0x1bc>
9001289c:	687b      	ldr	r3, [r7, #4]
9001289e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900128a0:	681b      	ldr	r3, [r3, #0]
900128a2:	2b00      	cmp	r3, #0
900128a4:	d110      	bne.n	900128c8 <tcp_output+0x1d0>
900128a6:	687b      	ldr	r3, [r7, #4]
900128a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900128aa:	891a      	ldrh	r2, [r3, #8]
900128ac:	687b      	ldr	r3, [r7, #4]
900128ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
900128b0:	429a      	cmp	r2, r3
900128b2:	d209      	bcs.n	900128c8 <tcp_output+0x1d0>
900128b4:	687b      	ldr	r3, [r7, #4]
900128b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
900128ba:	2b00      	cmp	r3, #0
900128bc:	d004      	beq.n	900128c8 <tcp_output+0x1d0>
900128be:	687b      	ldr	r3, [r7, #4]
900128c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
900128c4:	2b08      	cmp	r3, #8
900128c6:	d901      	bls.n	900128cc <tcp_output+0x1d4>
900128c8:	2301      	movs	r3, #1
900128ca:	e000      	b.n	900128ce <tcp_output+0x1d6>
900128cc:	2300      	movs	r3, #0
900128ce:	2b00      	cmp	r3, #0
900128d0:	d106      	bne.n	900128e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
900128d2:	687b      	ldr	r3, [r7, #4]
900128d4:	8b5b      	ldrh	r3, [r3, #26]
900128d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
900128da:	2b00      	cmp	r3, #0
900128dc:	f000 80e4 	beq.w	90012aa8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
900128e0:	687b      	ldr	r3, [r7, #4]
900128e2:	7d1b      	ldrb	r3, [r3, #20]
900128e4:	2b02      	cmp	r3, #2
900128e6:	d00d      	beq.n	90012904 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
900128e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900128ea:	68db      	ldr	r3, [r3, #12]
900128ec:	899b      	ldrh	r3, [r3, #12]
900128ee:	b29c      	uxth	r4, r3
900128f0:	2010      	movs	r0, #16
900128f2:	f7f8 ffab 	bl	9000b84c <lwip_htons>
900128f6:	4603      	mov	r3, r0
900128f8:	461a      	mov	r2, r3
900128fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900128fc:	68db      	ldr	r3, [r3, #12]
900128fe:	4322      	orrs	r2, r4
90012900:	b292      	uxth	r2, r2
90012902:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
90012904:	697a      	ldr	r2, [r7, #20]
90012906:	6879      	ldr	r1, [r7, #4]
90012908:	6a78      	ldr	r0, [r7, #36]	; 0x24
9001290a:	f000 f909 	bl	90012b20 <tcp_output_segment>
9001290e:	4603      	mov	r3, r0
90012910:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
90012912:	f997 300f 	ldrsb.w	r3, [r7, #15]
90012916:	2b00      	cmp	r3, #0
90012918:	d016      	beq.n	90012948 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
9001291a:	687b      	ldr	r3, [r7, #4]
9001291c:	8b5b      	ldrh	r3, [r3, #26]
9001291e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90012922:	b29a      	uxth	r2, r3
90012924:	687b      	ldr	r3, [r7, #4]
90012926:	835a      	strh	r2, [r3, #26]
      return err;
90012928:	f997 300f 	ldrsb.w	r3, [r7, #15]
9001292c:	e0d3      	b.n	90012ad6 <tcp_output+0x3de>
9001292e:	bf00      	nop
90012930:	90019c9c 	.word	0x90019c9c
90012934:	9001a1e0 	.word	0x9001a1e0
90012938:	90019cf0 	.word	0x90019cf0
9001293c:	9001a1f8 	.word	0x9001a1f8
90012940:	2000d614 	.word	0x2000d614
90012944:	9001a220 	.word	0x9001a220
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
90012948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001294a:	681a      	ldr	r2, [r3, #0]
9001294c:	687b      	ldr	r3, [r7, #4]
9001294e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
90012950:	687b      	ldr	r3, [r7, #4]
90012952:	7d1b      	ldrb	r3, [r3, #20]
90012954:	2b02      	cmp	r3, #2
90012956:	d006      	beq.n	90012966 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90012958:	687b      	ldr	r3, [r7, #4]
9001295a:	8b5b      	ldrh	r3, [r3, #26]
9001295c:	f023 0303 	bic.w	r3, r3, #3
90012960:	b29a      	uxth	r2, r3
90012962:	687b      	ldr	r3, [r7, #4]
90012964:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
90012966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012968:	68db      	ldr	r3, [r3, #12]
9001296a:	685b      	ldr	r3, [r3, #4]
9001296c:	4618      	mov	r0, r3
9001296e:	f7f8 ff82 	bl	9000b876 <lwip_htonl>
90012972:	4604      	mov	r4, r0
90012974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012976:	891b      	ldrh	r3, [r3, #8]
90012978:	461d      	mov	r5, r3
9001297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001297c:	68db      	ldr	r3, [r3, #12]
9001297e:	899b      	ldrh	r3, [r3, #12]
90012980:	b29b      	uxth	r3, r3
90012982:	4618      	mov	r0, r3
90012984:	f7f8 ff62 	bl	9000b84c <lwip_htons>
90012988:	4603      	mov	r3, r0
9001298a:	b2db      	uxtb	r3, r3
9001298c:	f003 0303 	and.w	r3, r3, #3
90012990:	2b00      	cmp	r3, #0
90012992:	d001      	beq.n	90012998 <tcp_output+0x2a0>
90012994:	2301      	movs	r3, #1
90012996:	e000      	b.n	9001299a <tcp_output+0x2a2>
90012998:	2300      	movs	r3, #0
9001299a:	442b      	add	r3, r5
9001299c:	4423      	add	r3, r4
9001299e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
900129a0:	687b      	ldr	r3, [r7, #4]
900129a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
900129a4:	68bb      	ldr	r3, [r7, #8]
900129a6:	1ad3      	subs	r3, r2, r3
900129a8:	2b00      	cmp	r3, #0
900129aa:	da02      	bge.n	900129b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
900129ac:	687b      	ldr	r3, [r7, #4]
900129ae:	68ba      	ldr	r2, [r7, #8]
900129b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
900129b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900129b4:	891b      	ldrh	r3, [r3, #8]
900129b6:	461c      	mov	r4, r3
900129b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900129ba:	68db      	ldr	r3, [r3, #12]
900129bc:	899b      	ldrh	r3, [r3, #12]
900129be:	b29b      	uxth	r3, r3
900129c0:	4618      	mov	r0, r3
900129c2:	f7f8 ff43 	bl	9000b84c <lwip_htons>
900129c6:	4603      	mov	r3, r0
900129c8:	b2db      	uxtb	r3, r3
900129ca:	f003 0303 	and.w	r3, r3, #3
900129ce:	2b00      	cmp	r3, #0
900129d0:	d001      	beq.n	900129d6 <tcp_output+0x2de>
900129d2:	2301      	movs	r3, #1
900129d4:	e000      	b.n	900129d8 <tcp_output+0x2e0>
900129d6:	2300      	movs	r3, #0
900129d8:	4423      	add	r3, r4
900129da:	2b00      	cmp	r3, #0
900129dc:	d049      	beq.n	90012a72 <tcp_output+0x37a>
      seg->next = NULL;
900129de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900129e0:	2200      	movs	r2, #0
900129e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
900129e4:	687b      	ldr	r3, [r7, #4]
900129e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900129e8:	2b00      	cmp	r3, #0
900129ea:	d105      	bne.n	900129f8 <tcp_output+0x300>
        pcb->unacked = seg;
900129ec:	687b      	ldr	r3, [r7, #4]
900129ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900129f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
900129f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900129f4:	623b      	str	r3, [r7, #32]
900129f6:	e03f      	b.n	90012a78 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
900129f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900129fa:	68db      	ldr	r3, [r3, #12]
900129fc:	685b      	ldr	r3, [r3, #4]
900129fe:	4618      	mov	r0, r3
90012a00:	f7f8 ff39 	bl	9000b876 <lwip_htonl>
90012a04:	4604      	mov	r4, r0
90012a06:	6a3b      	ldr	r3, [r7, #32]
90012a08:	68db      	ldr	r3, [r3, #12]
90012a0a:	685b      	ldr	r3, [r3, #4]
90012a0c:	4618      	mov	r0, r3
90012a0e:	f7f8 ff32 	bl	9000b876 <lwip_htonl>
90012a12:	4603      	mov	r3, r0
90012a14:	1ae3      	subs	r3, r4, r3
90012a16:	2b00      	cmp	r3, #0
90012a18:	da24      	bge.n	90012a64 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
90012a1a:	687b      	ldr	r3, [r7, #4]
90012a1c:	3370      	adds	r3, #112	; 0x70
90012a1e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
90012a20:	e002      	b.n	90012a28 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
90012a22:	69fb      	ldr	r3, [r7, #28]
90012a24:	681b      	ldr	r3, [r3, #0]
90012a26:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
90012a28:	69fb      	ldr	r3, [r7, #28]
90012a2a:	681b      	ldr	r3, [r3, #0]
90012a2c:	2b00      	cmp	r3, #0
90012a2e:	d011      	beq.n	90012a54 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
90012a30:	69fb      	ldr	r3, [r7, #28]
90012a32:	681b      	ldr	r3, [r3, #0]
90012a34:	68db      	ldr	r3, [r3, #12]
90012a36:	685b      	ldr	r3, [r3, #4]
90012a38:	4618      	mov	r0, r3
90012a3a:	f7f8 ff1c 	bl	9000b876 <lwip_htonl>
90012a3e:	4604      	mov	r4, r0
90012a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012a42:	68db      	ldr	r3, [r3, #12]
90012a44:	685b      	ldr	r3, [r3, #4]
90012a46:	4618      	mov	r0, r3
90012a48:	f7f8 ff15 	bl	9000b876 <lwip_htonl>
90012a4c:	4603      	mov	r3, r0
90012a4e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
90012a50:	2b00      	cmp	r3, #0
90012a52:	dbe6      	blt.n	90012a22 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
90012a54:	69fb      	ldr	r3, [r7, #28]
90012a56:	681a      	ldr	r2, [r3, #0]
90012a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012a5a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
90012a5c:	69fb      	ldr	r3, [r7, #28]
90012a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90012a60:	601a      	str	r2, [r3, #0]
90012a62:	e009      	b.n	90012a78 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
90012a64:	6a3b      	ldr	r3, [r7, #32]
90012a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90012a68:	601a      	str	r2, [r3, #0]
          useg = useg->next;
90012a6a:	6a3b      	ldr	r3, [r7, #32]
90012a6c:	681b      	ldr	r3, [r3, #0]
90012a6e:	623b      	str	r3, [r7, #32]
90012a70:	e002      	b.n	90012a78 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
90012a72:	6a78      	ldr	r0, [r7, #36]	; 0x24
90012a74:	f7fb ff19 	bl	9000e8aa <tcp_seg_free>
    }
    seg = pcb->unsent;
90012a78:	687b      	ldr	r3, [r7, #4]
90012a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90012a7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
90012a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012a80:	2b00      	cmp	r3, #0
90012a82:	d012      	beq.n	90012aaa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
90012a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012a86:	68db      	ldr	r3, [r3, #12]
90012a88:	685b      	ldr	r3, [r3, #4]
90012a8a:	4618      	mov	r0, r3
90012a8c:	f7f8 fef3 	bl	9000b876 <lwip_htonl>
90012a90:	4602      	mov	r2, r0
90012a92:	687b      	ldr	r3, [r7, #4]
90012a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90012a96:	1ad3      	subs	r3, r2, r3
90012a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90012a9a:	8912      	ldrh	r2, [r2, #8]
90012a9c:	4413      	add	r3, r2
  while (seg != NULL &&
90012a9e:	69ba      	ldr	r2, [r7, #24]
90012aa0:	429a      	cmp	r2, r3
90012aa2:	f4bf aed9 	bcs.w	90012858 <tcp_output+0x160>
90012aa6:	e000      	b.n	90012aaa <tcp_output+0x3b2>
      break;
90012aa8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
90012aaa:	687b      	ldr	r3, [r7, #4]
90012aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90012aae:	2b00      	cmp	r3, #0
90012ab0:	d108      	bne.n	90012ac4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
90012ab2:	687b      	ldr	r3, [r7, #4]
90012ab4:	2200      	movs	r2, #0
90012ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
90012aba:	e004      	b.n	90012ac6 <tcp_output+0x3ce>
    goto output_done;
90012abc:	bf00      	nop
90012abe:	e002      	b.n	90012ac6 <tcp_output+0x3ce>
    goto output_done;
90012ac0:	bf00      	nop
90012ac2:	e000      	b.n	90012ac6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
90012ac4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
90012ac6:	687b      	ldr	r3, [r7, #4]
90012ac8:	8b5b      	ldrh	r3, [r3, #26]
90012aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90012ace:	b29a      	uxth	r2, r3
90012ad0:	687b      	ldr	r3, [r7, #4]
90012ad2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
90012ad4:	2300      	movs	r3, #0
}
90012ad6:	4618      	mov	r0, r3
90012ad8:	3728      	adds	r7, #40	; 0x28
90012ada:	46bd      	mov	sp, r7
90012adc:	bdb0      	pop	{r4, r5, r7, pc}
90012ade:	bf00      	nop

90012ae0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
90012ae0:	b580      	push	{r7, lr}
90012ae2:	b082      	sub	sp, #8
90012ae4:	af00      	add	r7, sp, #0
90012ae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
90012ae8:	687b      	ldr	r3, [r7, #4]
90012aea:	2b00      	cmp	r3, #0
90012aec:	d106      	bne.n	90012afc <tcp_output_segment_busy+0x1c>
90012aee:	4b09      	ldr	r3, [pc, #36]	; (90012b14 <tcp_output_segment_busy+0x34>)
90012af0:	f240 529a 	movw	r2, #1434	; 0x59a
90012af4:	4908      	ldr	r1, [pc, #32]	; (90012b18 <tcp_output_segment_busy+0x38>)
90012af6:	4809      	ldr	r0, [pc, #36]	; (90012b1c <tcp_output_segment_busy+0x3c>)
90012af8:	f004 f8a2 	bl	90016c40 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
90012afc:	687b      	ldr	r3, [r7, #4]
90012afe:	685b      	ldr	r3, [r3, #4]
90012b00:	7b9b      	ldrb	r3, [r3, #14]
90012b02:	2b01      	cmp	r3, #1
90012b04:	d001      	beq.n	90012b0a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
90012b06:	2301      	movs	r3, #1
90012b08:	e000      	b.n	90012b0c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
90012b0a:	2300      	movs	r3, #0
}
90012b0c:	4618      	mov	r0, r3
90012b0e:	3708      	adds	r7, #8
90012b10:	46bd      	mov	sp, r7
90012b12:	bd80      	pop	{r7, pc}
90012b14:	90019c9c 	.word	0x90019c9c
90012b18:	9001a238 	.word	0x9001a238
90012b1c:	90019cf0 	.word	0x90019cf0

90012b20 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
90012b20:	b5b0      	push	{r4, r5, r7, lr}
90012b22:	b08c      	sub	sp, #48	; 0x30
90012b24:	af04      	add	r7, sp, #16
90012b26:	60f8      	str	r0, [r7, #12]
90012b28:	60b9      	str	r1, [r7, #8]
90012b2a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
90012b2c:	68fb      	ldr	r3, [r7, #12]
90012b2e:	2b00      	cmp	r3, #0
90012b30:	d106      	bne.n	90012b40 <tcp_output_segment+0x20>
90012b32:	4b63      	ldr	r3, [pc, #396]	; (90012cc0 <tcp_output_segment+0x1a0>)
90012b34:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
90012b38:	4962      	ldr	r1, [pc, #392]	; (90012cc4 <tcp_output_segment+0x1a4>)
90012b3a:	4863      	ldr	r0, [pc, #396]	; (90012cc8 <tcp_output_segment+0x1a8>)
90012b3c:	f004 f880 	bl	90016c40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
90012b40:	68bb      	ldr	r3, [r7, #8]
90012b42:	2b00      	cmp	r3, #0
90012b44:	d106      	bne.n	90012b54 <tcp_output_segment+0x34>
90012b46:	4b5e      	ldr	r3, [pc, #376]	; (90012cc0 <tcp_output_segment+0x1a0>)
90012b48:	f240 52b9 	movw	r2, #1465	; 0x5b9
90012b4c:	495f      	ldr	r1, [pc, #380]	; (90012ccc <tcp_output_segment+0x1ac>)
90012b4e:	485e      	ldr	r0, [pc, #376]	; (90012cc8 <tcp_output_segment+0x1a8>)
90012b50:	f004 f876 	bl	90016c40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
90012b54:	687b      	ldr	r3, [r7, #4]
90012b56:	2b00      	cmp	r3, #0
90012b58:	d106      	bne.n	90012b68 <tcp_output_segment+0x48>
90012b5a:	4b59      	ldr	r3, [pc, #356]	; (90012cc0 <tcp_output_segment+0x1a0>)
90012b5c:	f240 52ba 	movw	r2, #1466	; 0x5ba
90012b60:	495b      	ldr	r1, [pc, #364]	; (90012cd0 <tcp_output_segment+0x1b0>)
90012b62:	4859      	ldr	r0, [pc, #356]	; (90012cc8 <tcp_output_segment+0x1a8>)
90012b64:	f004 f86c 	bl	90016c40 <iprintf>

  if (tcp_output_segment_busy(seg)) {
90012b68:	68f8      	ldr	r0, [r7, #12]
90012b6a:	f7ff ffb9 	bl	90012ae0 <tcp_output_segment_busy>
90012b6e:	4603      	mov	r3, r0
90012b70:	2b00      	cmp	r3, #0
90012b72:	d001      	beq.n	90012b78 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
90012b74:	2300      	movs	r3, #0
90012b76:	e09f      	b.n	90012cb8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
90012b78:	68bb      	ldr	r3, [r7, #8]
90012b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90012b7c:	68fb      	ldr	r3, [r7, #12]
90012b7e:	68dc      	ldr	r4, [r3, #12]
90012b80:	4610      	mov	r0, r2
90012b82:	f7f8 fe78 	bl	9000b876 <lwip_htonl>
90012b86:	4603      	mov	r3, r0
90012b88:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
90012b8a:	68bb      	ldr	r3, [r7, #8]
90012b8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
90012b8e:	68fb      	ldr	r3, [r7, #12]
90012b90:	68dc      	ldr	r4, [r3, #12]
90012b92:	4610      	mov	r0, r2
90012b94:	f7f8 fe5a 	bl	9000b84c <lwip_htons>
90012b98:	4603      	mov	r3, r0
90012b9a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
90012b9c:	68bb      	ldr	r3, [r7, #8]
90012b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012ba0:	68ba      	ldr	r2, [r7, #8]
90012ba2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
90012ba4:	441a      	add	r2, r3
90012ba6:	68bb      	ldr	r3, [r7, #8]
90012ba8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
90012baa:	68fb      	ldr	r3, [r7, #12]
90012bac:	68db      	ldr	r3, [r3, #12]
90012bae:	3314      	adds	r3, #20
90012bb0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
90012bb2:	68fb      	ldr	r3, [r7, #12]
90012bb4:	7a9b      	ldrb	r3, [r3, #10]
90012bb6:	f003 0301 	and.w	r3, r3, #1
90012bba:	2b00      	cmp	r3, #0
90012bbc:	d015      	beq.n	90012bea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
90012bbe:	68bb      	ldr	r3, [r7, #8]
90012bc0:	3304      	adds	r3, #4
90012bc2:	461a      	mov	r2, r3
90012bc4:	6879      	ldr	r1, [r7, #4]
90012bc6:	f44f 7006 	mov.w	r0, #536	; 0x218
90012bca:	f7fc fa33 	bl	9000f034 <tcp_eff_send_mss_netif>
90012bce:	4603      	mov	r3, r0
90012bd0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
90012bd2:	8b7b      	ldrh	r3, [r7, #26]
90012bd4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
90012bd8:	4618      	mov	r0, r3
90012bda:	f7f8 fe4c 	bl	9000b876 <lwip_htonl>
90012bde:	4602      	mov	r2, r0
90012be0:	69fb      	ldr	r3, [r7, #28]
90012be2:	601a      	str	r2, [r3, #0]
    opts += 1;
90012be4:	69fb      	ldr	r3, [r7, #28]
90012be6:	3304      	adds	r3, #4
90012be8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
90012bea:	68bb      	ldr	r3, [r7, #8]
90012bec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
90012bf0:	2b00      	cmp	r3, #0
90012bf2:	da02      	bge.n	90012bfa <tcp_output_segment+0xda>
    pcb->rtime = 0;
90012bf4:	68bb      	ldr	r3, [r7, #8]
90012bf6:	2200      	movs	r2, #0
90012bf8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
90012bfa:	68bb      	ldr	r3, [r7, #8]
90012bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90012bfe:	2b00      	cmp	r3, #0
90012c00:	d10c      	bne.n	90012c1c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
90012c02:	4b34      	ldr	r3, [pc, #208]	; (90012cd4 <tcp_output_segment+0x1b4>)
90012c04:	681a      	ldr	r2, [r3, #0]
90012c06:	68bb      	ldr	r3, [r7, #8]
90012c08:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
90012c0a:	68fb      	ldr	r3, [r7, #12]
90012c0c:	68db      	ldr	r3, [r3, #12]
90012c0e:	685b      	ldr	r3, [r3, #4]
90012c10:	4618      	mov	r0, r3
90012c12:	f7f8 fe30 	bl	9000b876 <lwip_htonl>
90012c16:	4602      	mov	r2, r0
90012c18:	68bb      	ldr	r3, [r7, #8]
90012c1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
90012c1c:	68fb      	ldr	r3, [r7, #12]
90012c1e:	68da      	ldr	r2, [r3, #12]
90012c20:	68fb      	ldr	r3, [r7, #12]
90012c22:	685b      	ldr	r3, [r3, #4]
90012c24:	685b      	ldr	r3, [r3, #4]
90012c26:	1ad3      	subs	r3, r2, r3
90012c28:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
90012c2a:	68fb      	ldr	r3, [r7, #12]
90012c2c:	685b      	ldr	r3, [r3, #4]
90012c2e:	8959      	ldrh	r1, [r3, #10]
90012c30:	68fb      	ldr	r3, [r7, #12]
90012c32:	685b      	ldr	r3, [r3, #4]
90012c34:	8b3a      	ldrh	r2, [r7, #24]
90012c36:	1a8a      	subs	r2, r1, r2
90012c38:	b292      	uxth	r2, r2
90012c3a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
90012c3c:	68fb      	ldr	r3, [r7, #12]
90012c3e:	685b      	ldr	r3, [r3, #4]
90012c40:	8919      	ldrh	r1, [r3, #8]
90012c42:	68fb      	ldr	r3, [r7, #12]
90012c44:	685b      	ldr	r3, [r3, #4]
90012c46:	8b3a      	ldrh	r2, [r7, #24]
90012c48:	1a8a      	subs	r2, r1, r2
90012c4a:	b292      	uxth	r2, r2
90012c4c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
90012c4e:	68fb      	ldr	r3, [r7, #12]
90012c50:	685b      	ldr	r3, [r3, #4]
90012c52:	68fa      	ldr	r2, [r7, #12]
90012c54:	68d2      	ldr	r2, [r2, #12]
90012c56:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
90012c58:	68fb      	ldr	r3, [r7, #12]
90012c5a:	68db      	ldr	r3, [r3, #12]
90012c5c:	2200      	movs	r2, #0
90012c5e:	741a      	strb	r2, [r3, #16]
90012c60:	2200      	movs	r2, #0
90012c62:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
90012c64:	68fb      	ldr	r3, [r7, #12]
90012c66:	68db      	ldr	r3, [r3, #12]
90012c68:	f103 0214 	add.w	r2, r3, #20
90012c6c:	68fb      	ldr	r3, [r7, #12]
90012c6e:	7a9b      	ldrb	r3, [r3, #10]
90012c70:	009b      	lsls	r3, r3, #2
90012c72:	f003 0304 	and.w	r3, r3, #4
90012c76:	4413      	add	r3, r2
90012c78:	69fa      	ldr	r2, [r7, #28]
90012c7a:	429a      	cmp	r2, r3
90012c7c:	d006      	beq.n	90012c8c <tcp_output_segment+0x16c>
90012c7e:	4b10      	ldr	r3, [pc, #64]	; (90012cc0 <tcp_output_segment+0x1a0>)
90012c80:	f240 621c 	movw	r2, #1564	; 0x61c
90012c84:	4914      	ldr	r1, [pc, #80]	; (90012cd8 <tcp_output_segment+0x1b8>)
90012c86:	4810      	ldr	r0, [pc, #64]	; (90012cc8 <tcp_output_segment+0x1a8>)
90012c88:	f003 ffda 	bl	90016c40 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
90012c8c:	68fb      	ldr	r3, [r7, #12]
90012c8e:	6858      	ldr	r0, [r3, #4]
90012c90:	68b9      	ldr	r1, [r7, #8]
90012c92:	68bb      	ldr	r3, [r7, #8]
90012c94:	1d1c      	adds	r4, r3, #4
90012c96:	68bb      	ldr	r3, [r7, #8]
90012c98:	7add      	ldrb	r5, [r3, #11]
90012c9a:	68bb      	ldr	r3, [r7, #8]
90012c9c:	7a9b      	ldrb	r3, [r3, #10]
90012c9e:	687a      	ldr	r2, [r7, #4]
90012ca0:	9202      	str	r2, [sp, #8]
90012ca2:	2206      	movs	r2, #6
90012ca4:	9201      	str	r2, [sp, #4]
90012ca6:	9300      	str	r3, [sp, #0]
90012ca8:	462b      	mov	r3, r5
90012caa:	4622      	mov	r2, r4
90012cac:	f002 fbac 	bl	90015408 <ip4_output_if>
90012cb0:	4603      	mov	r3, r0
90012cb2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
90012cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
90012cb8:	4618      	mov	r0, r3
90012cba:	3720      	adds	r7, #32
90012cbc:	46bd      	mov	sp, r7
90012cbe:	bdb0      	pop	{r4, r5, r7, pc}
90012cc0:	90019c9c 	.word	0x90019c9c
90012cc4:	9001a260 	.word	0x9001a260
90012cc8:	90019cf0 	.word	0x90019cf0
90012ccc:	9001a280 	.word	0x9001a280
90012cd0:	9001a2a0 	.word	0x9001a2a0
90012cd4:	2000d5c8 	.word	0x2000d5c8
90012cd8:	9001a2c4 	.word	0x9001a2c4

90012cdc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
90012cdc:	b5b0      	push	{r4, r5, r7, lr}
90012cde:	b084      	sub	sp, #16
90012ce0:	af00      	add	r7, sp, #0
90012ce2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
90012ce4:	687b      	ldr	r3, [r7, #4]
90012ce6:	2b00      	cmp	r3, #0
90012ce8:	d106      	bne.n	90012cf8 <tcp_rexmit_rto_prepare+0x1c>
90012cea:	4b31      	ldr	r3, [pc, #196]	; (90012db0 <tcp_rexmit_rto_prepare+0xd4>)
90012cec:	f240 6263 	movw	r2, #1635	; 0x663
90012cf0:	4930      	ldr	r1, [pc, #192]	; (90012db4 <tcp_rexmit_rto_prepare+0xd8>)
90012cf2:	4831      	ldr	r0, [pc, #196]	; (90012db8 <tcp_rexmit_rto_prepare+0xdc>)
90012cf4:	f003 ffa4 	bl	90016c40 <iprintf>

  if (pcb->unacked == NULL) {
90012cf8:	687b      	ldr	r3, [r7, #4]
90012cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012cfc:	2b00      	cmp	r3, #0
90012cfe:	d102      	bne.n	90012d06 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
90012d00:	f06f 0305 	mvn.w	r3, #5
90012d04:	e050      	b.n	90012da8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
90012d06:	687b      	ldr	r3, [r7, #4]
90012d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012d0a:	60fb      	str	r3, [r7, #12]
90012d0c:	e00b      	b.n	90012d26 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
90012d0e:	68f8      	ldr	r0, [r7, #12]
90012d10:	f7ff fee6 	bl	90012ae0 <tcp_output_segment_busy>
90012d14:	4603      	mov	r3, r0
90012d16:	2b00      	cmp	r3, #0
90012d18:	d002      	beq.n	90012d20 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
90012d1a:	f06f 0305 	mvn.w	r3, #5
90012d1e:	e043      	b.n	90012da8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
90012d20:	68fb      	ldr	r3, [r7, #12]
90012d22:	681b      	ldr	r3, [r3, #0]
90012d24:	60fb      	str	r3, [r7, #12]
90012d26:	68fb      	ldr	r3, [r7, #12]
90012d28:	681b      	ldr	r3, [r3, #0]
90012d2a:	2b00      	cmp	r3, #0
90012d2c:	d1ef      	bne.n	90012d0e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
90012d2e:	68f8      	ldr	r0, [r7, #12]
90012d30:	f7ff fed6 	bl	90012ae0 <tcp_output_segment_busy>
90012d34:	4603      	mov	r3, r0
90012d36:	2b00      	cmp	r3, #0
90012d38:	d002      	beq.n	90012d40 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
90012d3a:	f06f 0305 	mvn.w	r3, #5
90012d3e:	e033      	b.n	90012da8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
90012d40:	687b      	ldr	r3, [r7, #4]
90012d42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
90012d44:	68fb      	ldr	r3, [r7, #12]
90012d46:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
90012d48:	687b      	ldr	r3, [r7, #4]
90012d4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90012d4c:	687b      	ldr	r3, [r7, #4]
90012d4e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
90012d50:	687b      	ldr	r3, [r7, #4]
90012d52:	2200      	movs	r2, #0
90012d54:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
90012d56:	687b      	ldr	r3, [r7, #4]
90012d58:	8b5b      	ldrh	r3, [r3, #26]
90012d5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
90012d5e:	b29a      	uxth	r2, r3
90012d60:	687b      	ldr	r3, [r7, #4]
90012d62:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
90012d64:	68fb      	ldr	r3, [r7, #12]
90012d66:	68db      	ldr	r3, [r3, #12]
90012d68:	685b      	ldr	r3, [r3, #4]
90012d6a:	4618      	mov	r0, r3
90012d6c:	f7f8 fd83 	bl	9000b876 <lwip_htonl>
90012d70:	4604      	mov	r4, r0
90012d72:	68fb      	ldr	r3, [r7, #12]
90012d74:	891b      	ldrh	r3, [r3, #8]
90012d76:	461d      	mov	r5, r3
90012d78:	68fb      	ldr	r3, [r7, #12]
90012d7a:	68db      	ldr	r3, [r3, #12]
90012d7c:	899b      	ldrh	r3, [r3, #12]
90012d7e:	b29b      	uxth	r3, r3
90012d80:	4618      	mov	r0, r3
90012d82:	f7f8 fd63 	bl	9000b84c <lwip_htons>
90012d86:	4603      	mov	r3, r0
90012d88:	b2db      	uxtb	r3, r3
90012d8a:	f003 0303 	and.w	r3, r3, #3
90012d8e:	2b00      	cmp	r3, #0
90012d90:	d001      	beq.n	90012d96 <tcp_rexmit_rto_prepare+0xba>
90012d92:	2301      	movs	r3, #1
90012d94:	e000      	b.n	90012d98 <tcp_rexmit_rto_prepare+0xbc>
90012d96:	2300      	movs	r3, #0
90012d98:	442b      	add	r3, r5
90012d9a:	18e2      	adds	r2, r4, r3
90012d9c:	687b      	ldr	r3, [r7, #4]
90012d9e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
90012da0:	687b      	ldr	r3, [r7, #4]
90012da2:	2200      	movs	r2, #0
90012da4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
90012da6:	2300      	movs	r3, #0
}
90012da8:	4618      	mov	r0, r3
90012daa:	3710      	adds	r7, #16
90012dac:	46bd      	mov	sp, r7
90012dae:	bdb0      	pop	{r4, r5, r7, pc}
90012db0:	90019c9c 	.word	0x90019c9c
90012db4:	9001a2d8 	.word	0x9001a2d8
90012db8:	90019cf0 	.word	0x90019cf0

90012dbc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
90012dbc:	b580      	push	{r7, lr}
90012dbe:	b082      	sub	sp, #8
90012dc0:	af00      	add	r7, sp, #0
90012dc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
90012dc4:	687b      	ldr	r3, [r7, #4]
90012dc6:	2b00      	cmp	r3, #0
90012dc8:	d106      	bne.n	90012dd8 <tcp_rexmit_rto_commit+0x1c>
90012dca:	4b0d      	ldr	r3, [pc, #52]	; (90012e00 <tcp_rexmit_rto_commit+0x44>)
90012dcc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
90012dd0:	490c      	ldr	r1, [pc, #48]	; (90012e04 <tcp_rexmit_rto_commit+0x48>)
90012dd2:	480d      	ldr	r0, [pc, #52]	; (90012e08 <tcp_rexmit_rto_commit+0x4c>)
90012dd4:	f003 ff34 	bl	90016c40 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
90012dd8:	687b      	ldr	r3, [r7, #4]
90012dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
90012dde:	2bff      	cmp	r3, #255	; 0xff
90012de0:	d007      	beq.n	90012df2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
90012de2:	687b      	ldr	r3, [r7, #4]
90012de4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
90012de8:	3301      	adds	r3, #1
90012dea:	b2da      	uxtb	r2, r3
90012dec:	687b      	ldr	r3, [r7, #4]
90012dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
90012df2:	6878      	ldr	r0, [r7, #4]
90012df4:	f7ff fc80 	bl	900126f8 <tcp_output>
}
90012df8:	bf00      	nop
90012dfa:	3708      	adds	r7, #8
90012dfc:	46bd      	mov	sp, r7
90012dfe:	bd80      	pop	{r7, pc}
90012e00:	90019c9c 	.word	0x90019c9c
90012e04:	9001a2fc 	.word	0x9001a2fc
90012e08:	90019cf0 	.word	0x90019cf0

90012e0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
90012e0c:	b580      	push	{r7, lr}
90012e0e:	b082      	sub	sp, #8
90012e10:	af00      	add	r7, sp, #0
90012e12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
90012e14:	687b      	ldr	r3, [r7, #4]
90012e16:	2b00      	cmp	r3, #0
90012e18:	d106      	bne.n	90012e28 <tcp_rexmit_rto+0x1c>
90012e1a:	4b0a      	ldr	r3, [pc, #40]	; (90012e44 <tcp_rexmit_rto+0x38>)
90012e1c:	f240 62ad 	movw	r2, #1709	; 0x6ad
90012e20:	4909      	ldr	r1, [pc, #36]	; (90012e48 <tcp_rexmit_rto+0x3c>)
90012e22:	480a      	ldr	r0, [pc, #40]	; (90012e4c <tcp_rexmit_rto+0x40>)
90012e24:	f003 ff0c 	bl	90016c40 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
90012e28:	6878      	ldr	r0, [r7, #4]
90012e2a:	f7ff ff57 	bl	90012cdc <tcp_rexmit_rto_prepare>
90012e2e:	4603      	mov	r3, r0
90012e30:	2b00      	cmp	r3, #0
90012e32:	d102      	bne.n	90012e3a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
90012e34:	6878      	ldr	r0, [r7, #4]
90012e36:	f7ff ffc1 	bl	90012dbc <tcp_rexmit_rto_commit>
  }
}
90012e3a:	bf00      	nop
90012e3c:	3708      	adds	r7, #8
90012e3e:	46bd      	mov	sp, r7
90012e40:	bd80      	pop	{r7, pc}
90012e42:	bf00      	nop
90012e44:	90019c9c 	.word	0x90019c9c
90012e48:	9001a320 	.word	0x9001a320
90012e4c:	90019cf0 	.word	0x90019cf0

90012e50 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
90012e50:	b590      	push	{r4, r7, lr}
90012e52:	b085      	sub	sp, #20
90012e54:	af00      	add	r7, sp, #0
90012e56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
90012e58:	687b      	ldr	r3, [r7, #4]
90012e5a:	2b00      	cmp	r3, #0
90012e5c:	d106      	bne.n	90012e6c <tcp_rexmit+0x1c>
90012e5e:	4b2f      	ldr	r3, [pc, #188]	; (90012f1c <tcp_rexmit+0xcc>)
90012e60:	f240 62c1 	movw	r2, #1729	; 0x6c1
90012e64:	492e      	ldr	r1, [pc, #184]	; (90012f20 <tcp_rexmit+0xd0>)
90012e66:	482f      	ldr	r0, [pc, #188]	; (90012f24 <tcp_rexmit+0xd4>)
90012e68:	f003 feea 	bl	90016c40 <iprintf>

  if (pcb->unacked == NULL) {
90012e6c:	687b      	ldr	r3, [r7, #4]
90012e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012e70:	2b00      	cmp	r3, #0
90012e72:	d102      	bne.n	90012e7a <tcp_rexmit+0x2a>
    return ERR_VAL;
90012e74:	f06f 0305 	mvn.w	r3, #5
90012e78:	e04c      	b.n	90012f14 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
90012e7a:	687b      	ldr	r3, [r7, #4]
90012e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012e7e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
90012e80:	68b8      	ldr	r0, [r7, #8]
90012e82:	f7ff fe2d 	bl	90012ae0 <tcp_output_segment_busy>
90012e86:	4603      	mov	r3, r0
90012e88:	2b00      	cmp	r3, #0
90012e8a:	d002      	beq.n	90012e92 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
90012e8c:	f06f 0305 	mvn.w	r3, #5
90012e90:	e040      	b.n	90012f14 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
90012e92:	68bb      	ldr	r3, [r7, #8]
90012e94:	681a      	ldr	r2, [r3, #0]
90012e96:	687b      	ldr	r3, [r7, #4]
90012e98:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
90012e9a:	687b      	ldr	r3, [r7, #4]
90012e9c:	336c      	adds	r3, #108	; 0x6c
90012e9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
90012ea0:	e002      	b.n	90012ea8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
90012ea2:	68fb      	ldr	r3, [r7, #12]
90012ea4:	681b      	ldr	r3, [r3, #0]
90012ea6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
90012ea8:	68fb      	ldr	r3, [r7, #12]
90012eaa:	681b      	ldr	r3, [r3, #0]
90012eac:	2b00      	cmp	r3, #0
90012eae:	d011      	beq.n	90012ed4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
90012eb0:	68fb      	ldr	r3, [r7, #12]
90012eb2:	681b      	ldr	r3, [r3, #0]
90012eb4:	68db      	ldr	r3, [r3, #12]
90012eb6:	685b      	ldr	r3, [r3, #4]
90012eb8:	4618      	mov	r0, r3
90012eba:	f7f8 fcdc 	bl	9000b876 <lwip_htonl>
90012ebe:	4604      	mov	r4, r0
90012ec0:	68bb      	ldr	r3, [r7, #8]
90012ec2:	68db      	ldr	r3, [r3, #12]
90012ec4:	685b      	ldr	r3, [r3, #4]
90012ec6:	4618      	mov	r0, r3
90012ec8:	f7f8 fcd5 	bl	9000b876 <lwip_htonl>
90012ecc:	4603      	mov	r3, r0
90012ece:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
90012ed0:	2b00      	cmp	r3, #0
90012ed2:	dbe6      	blt.n	90012ea2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
90012ed4:	68fb      	ldr	r3, [r7, #12]
90012ed6:	681a      	ldr	r2, [r3, #0]
90012ed8:	68bb      	ldr	r3, [r7, #8]
90012eda:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
90012edc:	68fb      	ldr	r3, [r7, #12]
90012ede:	68ba      	ldr	r2, [r7, #8]
90012ee0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
90012ee2:	68bb      	ldr	r3, [r7, #8]
90012ee4:	681b      	ldr	r3, [r3, #0]
90012ee6:	2b00      	cmp	r3, #0
90012ee8:	d103      	bne.n	90012ef2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
90012eea:	687b      	ldr	r3, [r7, #4]
90012eec:	2200      	movs	r2, #0
90012eee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
90012ef2:	687b      	ldr	r3, [r7, #4]
90012ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
90012ef8:	2bff      	cmp	r3, #255	; 0xff
90012efa:	d007      	beq.n	90012f0c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
90012efc:	687b      	ldr	r3, [r7, #4]
90012efe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
90012f02:	3301      	adds	r3, #1
90012f04:	b2da      	uxtb	r2, r3
90012f06:	687b      	ldr	r3, [r7, #4]
90012f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
90012f0c:	687b      	ldr	r3, [r7, #4]
90012f0e:	2200      	movs	r2, #0
90012f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
90012f12:	2300      	movs	r3, #0
}
90012f14:	4618      	mov	r0, r3
90012f16:	3714      	adds	r7, #20
90012f18:	46bd      	mov	sp, r7
90012f1a:	bd90      	pop	{r4, r7, pc}
90012f1c:	90019c9c 	.word	0x90019c9c
90012f20:	9001a33c 	.word	0x9001a33c
90012f24:	90019cf0 	.word	0x90019cf0

90012f28 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
90012f28:	b580      	push	{r7, lr}
90012f2a:	b082      	sub	sp, #8
90012f2c:	af00      	add	r7, sp, #0
90012f2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
90012f30:	687b      	ldr	r3, [r7, #4]
90012f32:	2b00      	cmp	r3, #0
90012f34:	d106      	bne.n	90012f44 <tcp_rexmit_fast+0x1c>
90012f36:	4b2a      	ldr	r3, [pc, #168]	; (90012fe0 <tcp_rexmit_fast+0xb8>)
90012f38:	f240 62f9 	movw	r2, #1785	; 0x6f9
90012f3c:	4929      	ldr	r1, [pc, #164]	; (90012fe4 <tcp_rexmit_fast+0xbc>)
90012f3e:	482a      	ldr	r0, [pc, #168]	; (90012fe8 <tcp_rexmit_fast+0xc0>)
90012f40:	f003 fe7e 	bl	90016c40 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
90012f44:	687b      	ldr	r3, [r7, #4]
90012f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012f48:	2b00      	cmp	r3, #0
90012f4a:	d045      	beq.n	90012fd8 <tcp_rexmit_fast+0xb0>
90012f4c:	687b      	ldr	r3, [r7, #4]
90012f4e:	8b5b      	ldrh	r3, [r3, #26]
90012f50:	f003 0304 	and.w	r3, r3, #4
90012f54:	2b00      	cmp	r3, #0
90012f56:	d13f      	bne.n	90012fd8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
90012f58:	6878      	ldr	r0, [r7, #4]
90012f5a:	f7ff ff79 	bl	90012e50 <tcp_rexmit>
90012f5e:	4603      	mov	r3, r0
90012f60:	2b00      	cmp	r3, #0
90012f62:	d139      	bne.n	90012fd8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
90012f64:	687b      	ldr	r3, [r7, #4]
90012f66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
90012f6a:	687b      	ldr	r3, [r7, #4]
90012f6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
90012f70:	4293      	cmp	r3, r2
90012f72:	bf28      	it	cs
90012f74:	4613      	movcs	r3, r2
90012f76:	b29b      	uxth	r3, r3
90012f78:	2b00      	cmp	r3, #0
90012f7a:	da00      	bge.n	90012f7e <tcp_rexmit_fast+0x56>
90012f7c:	3301      	adds	r3, #1
90012f7e:	105b      	asrs	r3, r3, #1
90012f80:	b29a      	uxth	r2, r3
90012f82:	687b      	ldr	r3, [r7, #4]
90012f84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
90012f88:	687b      	ldr	r3, [r7, #4]
90012f8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
90012f8e:	461a      	mov	r2, r3
90012f90:	687b      	ldr	r3, [r7, #4]
90012f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90012f94:	005b      	lsls	r3, r3, #1
90012f96:	429a      	cmp	r2, r3
90012f98:	d206      	bcs.n	90012fa8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
90012f9a:	687b      	ldr	r3, [r7, #4]
90012f9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90012f9e:	005b      	lsls	r3, r3, #1
90012fa0:	b29a      	uxth	r2, r3
90012fa2:	687b      	ldr	r3, [r7, #4]
90012fa4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
90012fa8:	687b      	ldr	r3, [r7, #4]
90012faa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
90012fae:	687b      	ldr	r3, [r7, #4]
90012fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90012fb2:	4619      	mov	r1, r3
90012fb4:	0049      	lsls	r1, r1, #1
90012fb6:	440b      	add	r3, r1
90012fb8:	b29b      	uxth	r3, r3
90012fba:	4413      	add	r3, r2
90012fbc:	b29a      	uxth	r2, r3
90012fbe:	687b      	ldr	r3, [r7, #4]
90012fc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
90012fc4:	687b      	ldr	r3, [r7, #4]
90012fc6:	8b5b      	ldrh	r3, [r3, #26]
90012fc8:	f043 0304 	orr.w	r3, r3, #4
90012fcc:	b29a      	uxth	r2, r3
90012fce:	687b      	ldr	r3, [r7, #4]
90012fd0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
90012fd2:	687b      	ldr	r3, [r7, #4]
90012fd4:	2200      	movs	r2, #0
90012fd6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
90012fd8:	bf00      	nop
90012fda:	3708      	adds	r7, #8
90012fdc:	46bd      	mov	sp, r7
90012fde:	bd80      	pop	{r7, pc}
90012fe0:	90019c9c 	.word	0x90019c9c
90012fe4:	9001a354 	.word	0x9001a354
90012fe8:	90019cf0 	.word	0x90019cf0

90012fec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
90012fec:	b580      	push	{r7, lr}
90012fee:	b086      	sub	sp, #24
90012ff0:	af00      	add	r7, sp, #0
90012ff2:	60f8      	str	r0, [r7, #12]
90012ff4:	607b      	str	r3, [r7, #4]
90012ff6:	460b      	mov	r3, r1
90012ff8:	817b      	strh	r3, [r7, #10]
90012ffa:	4613      	mov	r3, r2
90012ffc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
90012ffe:	897a      	ldrh	r2, [r7, #10]
90013000:	893b      	ldrh	r3, [r7, #8]
90013002:	4413      	add	r3, r2
90013004:	b29b      	uxth	r3, r3
90013006:	3314      	adds	r3, #20
90013008:	b29b      	uxth	r3, r3
9001300a:	f44f 7220 	mov.w	r2, #640	; 0x280
9001300e:	4619      	mov	r1, r3
90013010:	2022      	movs	r0, #34	; 0x22
90013012:	f7f9 fce3 	bl	9000c9dc <pbuf_alloc>
90013016:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
90013018:	697b      	ldr	r3, [r7, #20]
9001301a:	2b00      	cmp	r3, #0
9001301c:	d04d      	beq.n	900130ba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
9001301e:	897b      	ldrh	r3, [r7, #10]
90013020:	3313      	adds	r3, #19
90013022:	697a      	ldr	r2, [r7, #20]
90013024:	8952      	ldrh	r2, [r2, #10]
90013026:	4293      	cmp	r3, r2
90013028:	db06      	blt.n	90013038 <tcp_output_alloc_header_common+0x4c>
9001302a:	4b26      	ldr	r3, [pc, #152]	; (900130c4 <tcp_output_alloc_header_common+0xd8>)
9001302c:	f240 7223 	movw	r2, #1827	; 0x723
90013030:	4925      	ldr	r1, [pc, #148]	; (900130c8 <tcp_output_alloc_header_common+0xdc>)
90013032:	4826      	ldr	r0, [pc, #152]	; (900130cc <tcp_output_alloc_header_common+0xe0>)
90013034:	f003 fe04 	bl	90016c40 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
90013038:	697b      	ldr	r3, [r7, #20]
9001303a:	685b      	ldr	r3, [r3, #4]
9001303c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
9001303e:	8c3b      	ldrh	r3, [r7, #32]
90013040:	4618      	mov	r0, r3
90013042:	f7f8 fc03 	bl	9000b84c <lwip_htons>
90013046:	4603      	mov	r3, r0
90013048:	461a      	mov	r2, r3
9001304a:	693b      	ldr	r3, [r7, #16]
9001304c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
9001304e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90013050:	4618      	mov	r0, r3
90013052:	f7f8 fbfb 	bl	9000b84c <lwip_htons>
90013056:	4603      	mov	r3, r0
90013058:	461a      	mov	r2, r3
9001305a:	693b      	ldr	r3, [r7, #16]
9001305c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
9001305e:	693b      	ldr	r3, [r7, #16]
90013060:	687a      	ldr	r2, [r7, #4]
90013062:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
90013064:	68f8      	ldr	r0, [r7, #12]
90013066:	f7f8 fc06 	bl	9000b876 <lwip_htonl>
9001306a:	4602      	mov	r2, r0
9001306c:	693b      	ldr	r3, [r7, #16]
9001306e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
90013070:	897b      	ldrh	r3, [r7, #10]
90013072:	089b      	lsrs	r3, r3, #2
90013074:	b29b      	uxth	r3, r3
90013076:	3305      	adds	r3, #5
90013078:	b29b      	uxth	r3, r3
9001307a:	031b      	lsls	r3, r3, #12
9001307c:	b29a      	uxth	r2, r3
9001307e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90013082:	b29b      	uxth	r3, r3
90013084:	4313      	orrs	r3, r2
90013086:	b29b      	uxth	r3, r3
90013088:	4618      	mov	r0, r3
9001308a:	f7f8 fbdf 	bl	9000b84c <lwip_htons>
9001308e:	4603      	mov	r3, r0
90013090:	461a      	mov	r2, r3
90013092:	693b      	ldr	r3, [r7, #16]
90013094:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
90013096:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
90013098:	4618      	mov	r0, r3
9001309a:	f7f8 fbd7 	bl	9000b84c <lwip_htons>
9001309e:	4603      	mov	r3, r0
900130a0:	461a      	mov	r2, r3
900130a2:	693b      	ldr	r3, [r7, #16]
900130a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
900130a6:	693b      	ldr	r3, [r7, #16]
900130a8:	2200      	movs	r2, #0
900130aa:	741a      	strb	r2, [r3, #16]
900130ac:	2200      	movs	r2, #0
900130ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
900130b0:	693b      	ldr	r3, [r7, #16]
900130b2:	2200      	movs	r2, #0
900130b4:	749a      	strb	r2, [r3, #18]
900130b6:	2200      	movs	r2, #0
900130b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
900130ba:	697b      	ldr	r3, [r7, #20]
}
900130bc:	4618      	mov	r0, r3
900130be:	3718      	adds	r7, #24
900130c0:	46bd      	mov	sp, r7
900130c2:	bd80      	pop	{r7, pc}
900130c4:	90019c9c 	.word	0x90019c9c
900130c8:	9001a374 	.word	0x9001a374
900130cc:	90019cf0 	.word	0x90019cf0

900130d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
900130d0:	b5b0      	push	{r4, r5, r7, lr}
900130d2:	b08a      	sub	sp, #40	; 0x28
900130d4:	af04      	add	r7, sp, #16
900130d6:	60f8      	str	r0, [r7, #12]
900130d8:	607b      	str	r3, [r7, #4]
900130da:	460b      	mov	r3, r1
900130dc:	817b      	strh	r3, [r7, #10]
900130de:	4613      	mov	r3, r2
900130e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
900130e2:	68fb      	ldr	r3, [r7, #12]
900130e4:	2b00      	cmp	r3, #0
900130e6:	d106      	bne.n	900130f6 <tcp_output_alloc_header+0x26>
900130e8:	4b15      	ldr	r3, [pc, #84]	; (90013140 <tcp_output_alloc_header+0x70>)
900130ea:	f240 7242 	movw	r2, #1858	; 0x742
900130ee:	4915      	ldr	r1, [pc, #84]	; (90013144 <tcp_output_alloc_header+0x74>)
900130f0:	4815      	ldr	r0, [pc, #84]	; (90013148 <tcp_output_alloc_header+0x78>)
900130f2:	f003 fda5 	bl	90016c40 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
900130f6:	68fb      	ldr	r3, [r7, #12]
900130f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
900130fa:	68fb      	ldr	r3, [r7, #12]
900130fc:	8adb      	ldrh	r3, [r3, #22]
900130fe:	68fa      	ldr	r2, [r7, #12]
90013100:	8b12      	ldrh	r2, [r2, #24]
90013102:	68f9      	ldr	r1, [r7, #12]
90013104:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
90013106:	893d      	ldrh	r5, [r7, #8]
90013108:	897c      	ldrh	r4, [r7, #10]
9001310a:	9103      	str	r1, [sp, #12]
9001310c:	2110      	movs	r1, #16
9001310e:	9102      	str	r1, [sp, #8]
90013110:	9201      	str	r2, [sp, #4]
90013112:	9300      	str	r3, [sp, #0]
90013114:	687b      	ldr	r3, [r7, #4]
90013116:	462a      	mov	r2, r5
90013118:	4621      	mov	r1, r4
9001311a:	f7ff ff67 	bl	90012fec <tcp_output_alloc_header_common>
9001311e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
90013120:	697b      	ldr	r3, [r7, #20]
90013122:	2b00      	cmp	r3, #0
90013124:	d006      	beq.n	90013134 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
90013126:	68fb      	ldr	r3, [r7, #12]
90013128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001312a:	68fa      	ldr	r2, [r7, #12]
9001312c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
9001312e:	441a      	add	r2, r3
90013130:	68fb      	ldr	r3, [r7, #12]
90013132:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
90013134:	697b      	ldr	r3, [r7, #20]
}
90013136:	4618      	mov	r0, r3
90013138:	3718      	adds	r7, #24
9001313a:	46bd      	mov	sp, r7
9001313c:	bdb0      	pop	{r4, r5, r7, pc}
9001313e:	bf00      	nop
90013140:	90019c9c 	.word	0x90019c9c
90013144:	9001a3a4 	.word	0x9001a3a4
90013148:	90019cf0 	.word	0x90019cf0

9001314c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
9001314c:	b580      	push	{r7, lr}
9001314e:	b088      	sub	sp, #32
90013150:	af00      	add	r7, sp, #0
90013152:	60f8      	str	r0, [r7, #12]
90013154:	60b9      	str	r1, [r7, #8]
90013156:	4611      	mov	r1, r2
90013158:	461a      	mov	r2, r3
9001315a:	460b      	mov	r3, r1
9001315c:	71fb      	strb	r3, [r7, #7]
9001315e:	4613      	mov	r3, r2
90013160:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
90013162:	2300      	movs	r3, #0
90013164:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
90013166:	68bb      	ldr	r3, [r7, #8]
90013168:	2b00      	cmp	r3, #0
9001316a:	d106      	bne.n	9001317a <tcp_output_fill_options+0x2e>
9001316c:	4b13      	ldr	r3, [pc, #76]	; (900131bc <tcp_output_fill_options+0x70>)
9001316e:	f240 7256 	movw	r2, #1878	; 0x756
90013172:	4913      	ldr	r1, [pc, #76]	; (900131c0 <tcp_output_fill_options+0x74>)
90013174:	4813      	ldr	r0, [pc, #76]	; (900131c4 <tcp_output_fill_options+0x78>)
90013176:	f003 fd63 	bl	90016c40 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
9001317a:	68bb      	ldr	r3, [r7, #8]
9001317c:	685b      	ldr	r3, [r3, #4]
9001317e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
90013180:	69bb      	ldr	r3, [r7, #24]
90013182:	3314      	adds	r3, #20
90013184:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
90013186:	69bb      	ldr	r3, [r7, #24]
90013188:	f103 0214 	add.w	r2, r3, #20
9001318c:	8bfb      	ldrh	r3, [r7, #30]
9001318e:	009b      	lsls	r3, r3, #2
90013190:	4619      	mov	r1, r3
90013192:	79fb      	ldrb	r3, [r7, #7]
90013194:	009b      	lsls	r3, r3, #2
90013196:	f003 0304 	and.w	r3, r3, #4
9001319a:	440b      	add	r3, r1
9001319c:	4413      	add	r3, r2
9001319e:	697a      	ldr	r2, [r7, #20]
900131a0:	429a      	cmp	r2, r3
900131a2:	d006      	beq.n	900131b2 <tcp_output_fill_options+0x66>
900131a4:	4b05      	ldr	r3, [pc, #20]	; (900131bc <tcp_output_fill_options+0x70>)
900131a6:	f240 7275 	movw	r2, #1909	; 0x775
900131aa:	4907      	ldr	r1, [pc, #28]	; (900131c8 <tcp_output_fill_options+0x7c>)
900131ac:	4805      	ldr	r0, [pc, #20]	; (900131c4 <tcp_output_fill_options+0x78>)
900131ae:	f003 fd47 	bl	90016c40 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
900131b2:	bf00      	nop
900131b4:	3720      	adds	r7, #32
900131b6:	46bd      	mov	sp, r7
900131b8:	bd80      	pop	{r7, pc}
900131ba:	bf00      	nop
900131bc:	90019c9c 	.word	0x90019c9c
900131c0:	9001a3cc 	.word	0x9001a3cc
900131c4:	90019cf0 	.word	0x90019cf0
900131c8:	9001a2c4 	.word	0x9001a2c4

900131cc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
900131cc:	b580      	push	{r7, lr}
900131ce:	b08a      	sub	sp, #40	; 0x28
900131d0:	af04      	add	r7, sp, #16
900131d2:	60f8      	str	r0, [r7, #12]
900131d4:	60b9      	str	r1, [r7, #8]
900131d6:	607a      	str	r2, [r7, #4]
900131d8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
900131da:	68bb      	ldr	r3, [r7, #8]
900131dc:	2b00      	cmp	r3, #0
900131de:	d106      	bne.n	900131ee <tcp_output_control_segment+0x22>
900131e0:	4b1c      	ldr	r3, [pc, #112]	; (90013254 <tcp_output_control_segment+0x88>)
900131e2:	f240 7287 	movw	r2, #1927	; 0x787
900131e6:	491c      	ldr	r1, [pc, #112]	; (90013258 <tcp_output_control_segment+0x8c>)
900131e8:	481c      	ldr	r0, [pc, #112]	; (9001325c <tcp_output_control_segment+0x90>)
900131ea:	f003 fd29 	bl	90016c40 <iprintf>

  netif = tcp_route(pcb, src, dst);
900131ee:	683a      	ldr	r2, [r7, #0]
900131f0:	6879      	ldr	r1, [r7, #4]
900131f2:	68f8      	ldr	r0, [r7, #12]
900131f4:	f7fe fae8 	bl	900117c8 <tcp_route>
900131f8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
900131fa:	693b      	ldr	r3, [r7, #16]
900131fc:	2b00      	cmp	r3, #0
900131fe:	d102      	bne.n	90013206 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
90013200:	23fc      	movs	r3, #252	; 0xfc
90013202:	75fb      	strb	r3, [r7, #23]
90013204:	e01c      	b.n	90013240 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
90013206:	68fb      	ldr	r3, [r7, #12]
90013208:	2b00      	cmp	r3, #0
9001320a:	d006      	beq.n	9001321a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
9001320c:	68fb      	ldr	r3, [r7, #12]
9001320e:	7adb      	ldrb	r3, [r3, #11]
90013210:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
90013212:	68fb      	ldr	r3, [r7, #12]
90013214:	7a9b      	ldrb	r3, [r3, #10]
90013216:	757b      	strb	r3, [r7, #21]
90013218:	e003      	b.n	90013222 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
9001321a:	23ff      	movs	r3, #255	; 0xff
9001321c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
9001321e:	2300      	movs	r3, #0
90013220:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
90013222:	7dba      	ldrb	r2, [r7, #22]
90013224:	693b      	ldr	r3, [r7, #16]
90013226:	9302      	str	r3, [sp, #8]
90013228:	2306      	movs	r3, #6
9001322a:	9301      	str	r3, [sp, #4]
9001322c:	7d7b      	ldrb	r3, [r7, #21]
9001322e:	9300      	str	r3, [sp, #0]
90013230:	4613      	mov	r3, r2
90013232:	683a      	ldr	r2, [r7, #0]
90013234:	6879      	ldr	r1, [r7, #4]
90013236:	68b8      	ldr	r0, [r7, #8]
90013238:	f002 f8e6 	bl	90015408 <ip4_output_if>
9001323c:	4603      	mov	r3, r0
9001323e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
90013240:	68b8      	ldr	r0, [r7, #8]
90013242:	f7f9 feaf 	bl	9000cfa4 <pbuf_free>
  return err;
90013246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
9001324a:	4618      	mov	r0, r3
9001324c:	3718      	adds	r7, #24
9001324e:	46bd      	mov	sp, r7
90013250:	bd80      	pop	{r7, pc}
90013252:	bf00      	nop
90013254:	90019c9c 	.word	0x90019c9c
90013258:	9001a3f4 	.word	0x9001a3f4
9001325c:	90019cf0 	.word	0x90019cf0

90013260 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
90013260:	b590      	push	{r4, r7, lr}
90013262:	b08b      	sub	sp, #44	; 0x2c
90013264:	af04      	add	r7, sp, #16
90013266:	60f8      	str	r0, [r7, #12]
90013268:	60b9      	str	r1, [r7, #8]
9001326a:	607a      	str	r2, [r7, #4]
9001326c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
9001326e:	683b      	ldr	r3, [r7, #0]
90013270:	2b00      	cmp	r3, #0
90013272:	d106      	bne.n	90013282 <tcp_rst+0x22>
90013274:	4b1f      	ldr	r3, [pc, #124]	; (900132f4 <tcp_rst+0x94>)
90013276:	f240 72c4 	movw	r2, #1988	; 0x7c4
9001327a:	491f      	ldr	r1, [pc, #124]	; (900132f8 <tcp_rst+0x98>)
9001327c:	481f      	ldr	r0, [pc, #124]	; (900132fc <tcp_rst+0x9c>)
9001327e:	f003 fcdf 	bl	90016c40 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
90013282:	6abb      	ldr	r3, [r7, #40]	; 0x28
90013284:	2b00      	cmp	r3, #0
90013286:	d106      	bne.n	90013296 <tcp_rst+0x36>
90013288:	4b1a      	ldr	r3, [pc, #104]	; (900132f4 <tcp_rst+0x94>)
9001328a:	f240 72c5 	movw	r2, #1989	; 0x7c5
9001328e:	491c      	ldr	r1, [pc, #112]	; (90013300 <tcp_rst+0xa0>)
90013290:	481a      	ldr	r0, [pc, #104]	; (900132fc <tcp_rst+0x9c>)
90013292:	f003 fcd5 	bl	90016c40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
90013296:	2300      	movs	r3, #0
90013298:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
9001329a:	f246 0308 	movw	r3, #24584	; 0x6008
9001329e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
900132a0:	7dfb      	ldrb	r3, [r7, #23]
900132a2:	b29c      	uxth	r4, r3
900132a4:	68b8      	ldr	r0, [r7, #8]
900132a6:	f7f8 fae6 	bl	9000b876 <lwip_htonl>
900132aa:	4602      	mov	r2, r0
900132ac:	8abb      	ldrh	r3, [r7, #20]
900132ae:	9303      	str	r3, [sp, #12]
900132b0:	2314      	movs	r3, #20
900132b2:	9302      	str	r3, [sp, #8]
900132b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
900132b6:	9301      	str	r3, [sp, #4]
900132b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
900132ba:	9300      	str	r3, [sp, #0]
900132bc:	4613      	mov	r3, r2
900132be:	2200      	movs	r2, #0
900132c0:	4621      	mov	r1, r4
900132c2:	6878      	ldr	r0, [r7, #4]
900132c4:	f7ff fe92 	bl	90012fec <tcp_output_alloc_header_common>
900132c8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
900132ca:	693b      	ldr	r3, [r7, #16]
900132cc:	2b00      	cmp	r3, #0
900132ce:	d00c      	beq.n	900132ea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
900132d0:	7dfb      	ldrb	r3, [r7, #23]
900132d2:	2200      	movs	r2, #0
900132d4:	6939      	ldr	r1, [r7, #16]
900132d6:	68f8      	ldr	r0, [r7, #12]
900132d8:	f7ff ff38 	bl	9001314c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
900132dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
900132de:	683a      	ldr	r2, [r7, #0]
900132e0:	6939      	ldr	r1, [r7, #16]
900132e2:	68f8      	ldr	r0, [r7, #12]
900132e4:	f7ff ff72 	bl	900131cc <tcp_output_control_segment>
900132e8:	e000      	b.n	900132ec <tcp_rst+0x8c>
    return;
900132ea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
900132ec:	371c      	adds	r7, #28
900132ee:	46bd      	mov	sp, r7
900132f0:	bd90      	pop	{r4, r7, pc}
900132f2:	bf00      	nop
900132f4:	90019c9c 	.word	0x90019c9c
900132f8:	9001a420 	.word	0x9001a420
900132fc:	90019cf0 	.word	0x90019cf0
90013300:	9001a43c 	.word	0x9001a43c

90013304 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
90013304:	b590      	push	{r4, r7, lr}
90013306:	b087      	sub	sp, #28
90013308:	af00      	add	r7, sp, #0
9001330a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
9001330c:	2300      	movs	r3, #0
9001330e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
90013310:	2300      	movs	r3, #0
90013312:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
90013314:	687b      	ldr	r3, [r7, #4]
90013316:	2b00      	cmp	r3, #0
90013318:	d106      	bne.n	90013328 <tcp_send_empty_ack+0x24>
9001331a:	4b28      	ldr	r3, [pc, #160]	; (900133bc <tcp_send_empty_ack+0xb8>)
9001331c:	f240 72ea 	movw	r2, #2026	; 0x7ea
90013320:	4927      	ldr	r1, [pc, #156]	; (900133c0 <tcp_send_empty_ack+0xbc>)
90013322:	4828      	ldr	r0, [pc, #160]	; (900133c4 <tcp_send_empty_ack+0xc0>)
90013324:	f003 fc8c 	bl	90016c40 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
90013328:	7dfb      	ldrb	r3, [r7, #23]
9001332a:	009b      	lsls	r3, r3, #2
9001332c:	b2db      	uxtb	r3, r3
9001332e:	f003 0304 	and.w	r3, r3, #4
90013332:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
90013334:	7d7b      	ldrb	r3, [r7, #21]
90013336:	b29c      	uxth	r4, r3
90013338:	687b      	ldr	r3, [r7, #4]
9001333a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001333c:	4618      	mov	r0, r3
9001333e:	f7f8 fa9a 	bl	9000b876 <lwip_htonl>
90013342:	4603      	mov	r3, r0
90013344:	2200      	movs	r2, #0
90013346:	4621      	mov	r1, r4
90013348:	6878      	ldr	r0, [r7, #4]
9001334a:	f7ff fec1 	bl	900130d0 <tcp_output_alloc_header>
9001334e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
90013350:	693b      	ldr	r3, [r7, #16]
90013352:	2b00      	cmp	r3, #0
90013354:	d109      	bne.n	9001336a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90013356:	687b      	ldr	r3, [r7, #4]
90013358:	8b5b      	ldrh	r3, [r3, #26]
9001335a:	f043 0303 	orr.w	r3, r3, #3
9001335e:	b29a      	uxth	r2, r3
90013360:	687b      	ldr	r3, [r7, #4]
90013362:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
90013364:	f06f 0301 	mvn.w	r3, #1
90013368:	e023      	b.n	900133b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
9001336a:	7dbb      	ldrb	r3, [r7, #22]
9001336c:	7dfa      	ldrb	r2, [r7, #23]
9001336e:	6939      	ldr	r1, [r7, #16]
90013370:	6878      	ldr	r0, [r7, #4]
90013372:	f7ff feeb 	bl	9001314c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
90013376:	687a      	ldr	r2, [r7, #4]
90013378:	687b      	ldr	r3, [r7, #4]
9001337a:	3304      	adds	r3, #4
9001337c:	6939      	ldr	r1, [r7, #16]
9001337e:	6878      	ldr	r0, [r7, #4]
90013380:	f7ff ff24 	bl	900131cc <tcp_output_control_segment>
90013384:	4603      	mov	r3, r0
90013386:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
90013388:	f997 300f 	ldrsb.w	r3, [r7, #15]
9001338c:	2b00      	cmp	r3, #0
9001338e:	d007      	beq.n	900133a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90013390:	687b      	ldr	r3, [r7, #4]
90013392:	8b5b      	ldrh	r3, [r3, #26]
90013394:	f043 0303 	orr.w	r3, r3, #3
90013398:	b29a      	uxth	r2, r3
9001339a:	687b      	ldr	r3, [r7, #4]
9001339c:	835a      	strh	r2, [r3, #26]
9001339e:	e006      	b.n	900133ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
900133a0:	687b      	ldr	r3, [r7, #4]
900133a2:	8b5b      	ldrh	r3, [r3, #26]
900133a4:	f023 0303 	bic.w	r3, r3, #3
900133a8:	b29a      	uxth	r2, r3
900133aa:	687b      	ldr	r3, [r7, #4]
900133ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
900133ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
900133b2:	4618      	mov	r0, r3
900133b4:	371c      	adds	r7, #28
900133b6:	46bd      	mov	sp, r7
900133b8:	bd90      	pop	{r4, r7, pc}
900133ba:	bf00      	nop
900133bc:	90019c9c 	.word	0x90019c9c
900133c0:	9001a458 	.word	0x9001a458
900133c4:	90019cf0 	.word	0x90019cf0

900133c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
900133c8:	b590      	push	{r4, r7, lr}
900133ca:	b087      	sub	sp, #28
900133cc:	af00      	add	r7, sp, #0
900133ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
900133d0:	2300      	movs	r3, #0
900133d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
900133d4:	687b      	ldr	r3, [r7, #4]
900133d6:	2b00      	cmp	r3, #0
900133d8:	d106      	bne.n	900133e8 <tcp_keepalive+0x20>
900133da:	4b18      	ldr	r3, [pc, #96]	; (9001343c <tcp_keepalive+0x74>)
900133dc:	f640 0224 	movw	r2, #2084	; 0x824
900133e0:	4917      	ldr	r1, [pc, #92]	; (90013440 <tcp_keepalive+0x78>)
900133e2:	4818      	ldr	r0, [pc, #96]	; (90013444 <tcp_keepalive+0x7c>)
900133e4:	f003 fc2c 	bl	90016c40 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
900133e8:	7dfb      	ldrb	r3, [r7, #23]
900133ea:	b29c      	uxth	r4, r3
900133ec:	687b      	ldr	r3, [r7, #4]
900133ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900133f0:	3b01      	subs	r3, #1
900133f2:	4618      	mov	r0, r3
900133f4:	f7f8 fa3f 	bl	9000b876 <lwip_htonl>
900133f8:	4603      	mov	r3, r0
900133fa:	2200      	movs	r2, #0
900133fc:	4621      	mov	r1, r4
900133fe:	6878      	ldr	r0, [r7, #4]
90013400:	f7ff fe66 	bl	900130d0 <tcp_output_alloc_header>
90013404:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
90013406:	693b      	ldr	r3, [r7, #16]
90013408:	2b00      	cmp	r3, #0
9001340a:	d102      	bne.n	90013412 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
9001340c:	f04f 33ff 	mov.w	r3, #4294967295
90013410:	e010      	b.n	90013434 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
90013412:	7dfb      	ldrb	r3, [r7, #23]
90013414:	2200      	movs	r2, #0
90013416:	6939      	ldr	r1, [r7, #16]
90013418:	6878      	ldr	r0, [r7, #4]
9001341a:	f7ff fe97 	bl	9001314c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
9001341e:	687a      	ldr	r2, [r7, #4]
90013420:	687b      	ldr	r3, [r7, #4]
90013422:	3304      	adds	r3, #4
90013424:	6939      	ldr	r1, [r7, #16]
90013426:	6878      	ldr	r0, [r7, #4]
90013428:	f7ff fed0 	bl	900131cc <tcp_output_control_segment>
9001342c:	4603      	mov	r3, r0
9001342e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
90013430:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
90013434:	4618      	mov	r0, r3
90013436:	371c      	adds	r7, #28
90013438:	46bd      	mov	sp, r7
9001343a:	bd90      	pop	{r4, r7, pc}
9001343c:	90019c9c 	.word	0x90019c9c
90013440:	9001a478 	.word	0x9001a478
90013444:	90019cf0 	.word	0x90019cf0

90013448 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
90013448:	b590      	push	{r4, r7, lr}
9001344a:	b08b      	sub	sp, #44	; 0x2c
9001344c:	af00      	add	r7, sp, #0
9001344e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
90013450:	2300      	movs	r3, #0
90013452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
90013456:	687b      	ldr	r3, [r7, #4]
90013458:	2b00      	cmp	r3, #0
9001345a:	d106      	bne.n	9001346a <tcp_zero_window_probe+0x22>
9001345c:	4b4c      	ldr	r3, [pc, #304]	; (90013590 <tcp_zero_window_probe+0x148>)
9001345e:	f640 024f 	movw	r2, #2127	; 0x84f
90013462:	494c      	ldr	r1, [pc, #304]	; (90013594 <tcp_zero_window_probe+0x14c>)
90013464:	484c      	ldr	r0, [pc, #304]	; (90013598 <tcp_zero_window_probe+0x150>)
90013466:	f003 fbeb 	bl	90016c40 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
9001346a:	687b      	ldr	r3, [r7, #4]
9001346c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9001346e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
90013470:	6a3b      	ldr	r3, [r7, #32]
90013472:	2b00      	cmp	r3, #0
90013474:	d101      	bne.n	9001347a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
90013476:	2300      	movs	r3, #0
90013478:	e086      	b.n	90013588 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
9001347a:	687b      	ldr	r3, [r7, #4]
9001347c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
90013480:	2bff      	cmp	r3, #255	; 0xff
90013482:	d007      	beq.n	90013494 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
90013484:	687b      	ldr	r3, [r7, #4]
90013486:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
9001348a:	3301      	adds	r3, #1
9001348c:	b2da      	uxtb	r2, r3
9001348e:	687b      	ldr	r3, [r7, #4]
90013490:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
90013494:	6a3b      	ldr	r3, [r7, #32]
90013496:	68db      	ldr	r3, [r3, #12]
90013498:	899b      	ldrh	r3, [r3, #12]
9001349a:	b29b      	uxth	r3, r3
9001349c:	4618      	mov	r0, r3
9001349e:	f7f8 f9d5 	bl	9000b84c <lwip_htons>
900134a2:	4603      	mov	r3, r0
900134a4:	b2db      	uxtb	r3, r3
900134a6:	f003 0301 	and.w	r3, r3, #1
900134aa:	2b00      	cmp	r3, #0
900134ac:	d005      	beq.n	900134ba <tcp_zero_window_probe+0x72>
900134ae:	6a3b      	ldr	r3, [r7, #32]
900134b0:	891b      	ldrh	r3, [r3, #8]
900134b2:	2b00      	cmp	r3, #0
900134b4:	d101      	bne.n	900134ba <tcp_zero_window_probe+0x72>
900134b6:	2301      	movs	r3, #1
900134b8:	e000      	b.n	900134bc <tcp_zero_window_probe+0x74>
900134ba:	2300      	movs	r3, #0
900134bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
900134be:	7ffb      	ldrb	r3, [r7, #31]
900134c0:	2b00      	cmp	r3, #0
900134c2:	bf0c      	ite	eq
900134c4:	2301      	moveq	r3, #1
900134c6:	2300      	movne	r3, #0
900134c8:	b2db      	uxtb	r3, r3
900134ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
900134cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900134d0:	b299      	uxth	r1, r3
900134d2:	6a3b      	ldr	r3, [r7, #32]
900134d4:	68db      	ldr	r3, [r3, #12]
900134d6:	685b      	ldr	r3, [r3, #4]
900134d8:	8bba      	ldrh	r2, [r7, #28]
900134da:	6878      	ldr	r0, [r7, #4]
900134dc:	f7ff fdf8 	bl	900130d0 <tcp_output_alloc_header>
900134e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
900134e2:	69bb      	ldr	r3, [r7, #24]
900134e4:	2b00      	cmp	r3, #0
900134e6:	d102      	bne.n	900134ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
900134e8:	f04f 33ff 	mov.w	r3, #4294967295
900134ec:	e04c      	b.n	90013588 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
900134ee:	69bb      	ldr	r3, [r7, #24]
900134f0:	685b      	ldr	r3, [r3, #4]
900134f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
900134f4:	7ffb      	ldrb	r3, [r7, #31]
900134f6:	2b00      	cmp	r3, #0
900134f8:	d011      	beq.n	9001351e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
900134fa:	697b      	ldr	r3, [r7, #20]
900134fc:	899b      	ldrh	r3, [r3, #12]
900134fe:	b29b      	uxth	r3, r3
90013500:	b21b      	sxth	r3, r3
90013502:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
90013506:	b21c      	sxth	r4, r3
90013508:	2011      	movs	r0, #17
9001350a:	f7f8 f99f 	bl	9000b84c <lwip_htons>
9001350e:	4603      	mov	r3, r0
90013510:	b21b      	sxth	r3, r3
90013512:	4323      	orrs	r3, r4
90013514:	b21b      	sxth	r3, r3
90013516:	b29a      	uxth	r2, r3
90013518:	697b      	ldr	r3, [r7, #20]
9001351a:	819a      	strh	r2, [r3, #12]
9001351c:	e010      	b.n	90013540 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
9001351e:	69bb      	ldr	r3, [r7, #24]
90013520:	685b      	ldr	r3, [r3, #4]
90013522:	3314      	adds	r3, #20
90013524:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
90013526:	6a3b      	ldr	r3, [r7, #32]
90013528:	6858      	ldr	r0, [r3, #4]
9001352a:	6a3b      	ldr	r3, [r7, #32]
9001352c:	685b      	ldr	r3, [r3, #4]
9001352e:	891a      	ldrh	r2, [r3, #8]
90013530:	6a3b      	ldr	r3, [r7, #32]
90013532:	891b      	ldrh	r3, [r3, #8]
90013534:	1ad3      	subs	r3, r2, r3
90013536:	b29b      	uxth	r3, r3
90013538:	2201      	movs	r2, #1
9001353a:	6939      	ldr	r1, [r7, #16]
9001353c:	f7f9 ff28 	bl	9000d390 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
90013540:	6a3b      	ldr	r3, [r7, #32]
90013542:	68db      	ldr	r3, [r3, #12]
90013544:	685b      	ldr	r3, [r3, #4]
90013546:	4618      	mov	r0, r3
90013548:	f7f8 f995 	bl	9000b876 <lwip_htonl>
9001354c:	4603      	mov	r3, r0
9001354e:	3301      	adds	r3, #1
90013550:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
90013552:	687b      	ldr	r3, [r7, #4]
90013554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
90013556:	68fb      	ldr	r3, [r7, #12]
90013558:	1ad3      	subs	r3, r2, r3
9001355a:	2b00      	cmp	r3, #0
9001355c:	da02      	bge.n	90013564 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
9001355e:	687b      	ldr	r3, [r7, #4]
90013560:	68fa      	ldr	r2, [r7, #12]
90013562:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
90013564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90013568:	2200      	movs	r2, #0
9001356a:	69b9      	ldr	r1, [r7, #24]
9001356c:	6878      	ldr	r0, [r7, #4]
9001356e:	f7ff fded 	bl	9001314c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
90013572:	687a      	ldr	r2, [r7, #4]
90013574:	687b      	ldr	r3, [r7, #4]
90013576:	3304      	adds	r3, #4
90013578:	69b9      	ldr	r1, [r7, #24]
9001357a:	6878      	ldr	r0, [r7, #4]
9001357c:	f7ff fe26 	bl	900131cc <tcp_output_control_segment>
90013580:	4603      	mov	r3, r0
90013582:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
90013584:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
90013588:	4618      	mov	r0, r3
9001358a:	372c      	adds	r7, #44	; 0x2c
9001358c:	46bd      	mov	sp, r7
9001358e:	bd90      	pop	{r4, r7, pc}
90013590:	90019c9c 	.word	0x90019c9c
90013594:	9001a494 	.word	0x9001a494
90013598:	90019cf0 	.word	0x90019cf0

9001359c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
9001359c:	b580      	push	{r7, lr}
9001359e:	b082      	sub	sp, #8
900135a0:	af00      	add	r7, sp, #0
900135a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
900135a4:	f7f9 ffe2 	bl	9000d56c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
900135a8:	4b0a      	ldr	r3, [pc, #40]	; (900135d4 <tcpip_tcp_timer+0x38>)
900135aa:	681b      	ldr	r3, [r3, #0]
900135ac:	2b00      	cmp	r3, #0
900135ae:	d103      	bne.n	900135b8 <tcpip_tcp_timer+0x1c>
900135b0:	4b09      	ldr	r3, [pc, #36]	; (900135d8 <tcpip_tcp_timer+0x3c>)
900135b2:	681b      	ldr	r3, [r3, #0]
900135b4:	2b00      	cmp	r3, #0
900135b6:	d005      	beq.n	900135c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
900135b8:	2200      	movs	r2, #0
900135ba:	4908      	ldr	r1, [pc, #32]	; (900135dc <tcpip_tcp_timer+0x40>)
900135bc:	20fa      	movs	r0, #250	; 0xfa
900135be:	f000 f8f3 	bl	900137a8 <sys_timeout>
900135c2:	e003      	b.n	900135cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
900135c4:	4b06      	ldr	r3, [pc, #24]	; (900135e0 <tcpip_tcp_timer+0x44>)
900135c6:	2200      	movs	r2, #0
900135c8:	601a      	str	r2, [r3, #0]
  }
}
900135ca:	bf00      	nop
900135cc:	bf00      	nop
900135ce:	3708      	adds	r7, #8
900135d0:	46bd      	mov	sp, r7
900135d2:	bd80      	pop	{r7, pc}
900135d4:	2000d5d4 	.word	0x2000d5d4
900135d8:	2000d5d8 	.word	0x2000d5d8
900135dc:	9001359d 	.word	0x9001359d
900135e0:	2000d620 	.word	0x2000d620

900135e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
900135e4:	b580      	push	{r7, lr}
900135e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
900135e8:	4b0a      	ldr	r3, [pc, #40]	; (90013614 <tcp_timer_needed+0x30>)
900135ea:	681b      	ldr	r3, [r3, #0]
900135ec:	2b00      	cmp	r3, #0
900135ee:	d10f      	bne.n	90013610 <tcp_timer_needed+0x2c>
900135f0:	4b09      	ldr	r3, [pc, #36]	; (90013618 <tcp_timer_needed+0x34>)
900135f2:	681b      	ldr	r3, [r3, #0]
900135f4:	2b00      	cmp	r3, #0
900135f6:	d103      	bne.n	90013600 <tcp_timer_needed+0x1c>
900135f8:	4b08      	ldr	r3, [pc, #32]	; (9001361c <tcp_timer_needed+0x38>)
900135fa:	681b      	ldr	r3, [r3, #0]
900135fc:	2b00      	cmp	r3, #0
900135fe:	d007      	beq.n	90013610 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
90013600:	4b04      	ldr	r3, [pc, #16]	; (90013614 <tcp_timer_needed+0x30>)
90013602:	2201      	movs	r2, #1
90013604:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
90013606:	2200      	movs	r2, #0
90013608:	4905      	ldr	r1, [pc, #20]	; (90013620 <tcp_timer_needed+0x3c>)
9001360a:	20fa      	movs	r0, #250	; 0xfa
9001360c:	f000 f8cc 	bl	900137a8 <sys_timeout>
  }
}
90013610:	bf00      	nop
90013612:	bd80      	pop	{r7, pc}
90013614:	2000d620 	.word	0x2000d620
90013618:	2000d5d4 	.word	0x2000d5d4
9001361c:	2000d5d8 	.word	0x2000d5d8
90013620:	9001359d 	.word	0x9001359d

90013624 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
90013624:	b580      	push	{r7, lr}
90013626:	b086      	sub	sp, #24
90013628:	af00      	add	r7, sp, #0
9001362a:	60f8      	str	r0, [r7, #12]
9001362c:	60b9      	str	r1, [r7, #8]
9001362e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
90013630:	200a      	movs	r0, #10
90013632:	f7f8 fdc1 	bl	9000c1b8 <memp_malloc>
90013636:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
90013638:	693b      	ldr	r3, [r7, #16]
9001363a:	2b00      	cmp	r3, #0
9001363c:	d109      	bne.n	90013652 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
9001363e:	693b      	ldr	r3, [r7, #16]
90013640:	2b00      	cmp	r3, #0
90013642:	d151      	bne.n	900136e8 <sys_timeout_abs+0xc4>
90013644:	4b2a      	ldr	r3, [pc, #168]	; (900136f0 <sys_timeout_abs+0xcc>)
90013646:	22be      	movs	r2, #190	; 0xbe
90013648:	492a      	ldr	r1, [pc, #168]	; (900136f4 <sys_timeout_abs+0xd0>)
9001364a:	482b      	ldr	r0, [pc, #172]	; (900136f8 <sys_timeout_abs+0xd4>)
9001364c:	f003 faf8 	bl	90016c40 <iprintf>
    return;
90013650:	e04a      	b.n	900136e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
90013652:	693b      	ldr	r3, [r7, #16]
90013654:	2200      	movs	r2, #0
90013656:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
90013658:	693b      	ldr	r3, [r7, #16]
9001365a:	68ba      	ldr	r2, [r7, #8]
9001365c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
9001365e:	693b      	ldr	r3, [r7, #16]
90013660:	687a      	ldr	r2, [r7, #4]
90013662:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
90013664:	693b      	ldr	r3, [r7, #16]
90013666:	68fa      	ldr	r2, [r7, #12]
90013668:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
9001366a:	4b24      	ldr	r3, [pc, #144]	; (900136fc <sys_timeout_abs+0xd8>)
9001366c:	681b      	ldr	r3, [r3, #0]
9001366e:	2b00      	cmp	r3, #0
90013670:	d103      	bne.n	9001367a <sys_timeout_abs+0x56>
    next_timeout = timeout;
90013672:	4a22      	ldr	r2, [pc, #136]	; (900136fc <sys_timeout_abs+0xd8>)
90013674:	693b      	ldr	r3, [r7, #16]
90013676:	6013      	str	r3, [r2, #0]
    return;
90013678:	e037      	b.n	900136ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
9001367a:	693b      	ldr	r3, [r7, #16]
9001367c:	685a      	ldr	r2, [r3, #4]
9001367e:	4b1f      	ldr	r3, [pc, #124]	; (900136fc <sys_timeout_abs+0xd8>)
90013680:	681b      	ldr	r3, [r3, #0]
90013682:	685b      	ldr	r3, [r3, #4]
90013684:	1ad3      	subs	r3, r2, r3
90013686:	0fdb      	lsrs	r3, r3, #31
90013688:	f003 0301 	and.w	r3, r3, #1
9001368c:	b2db      	uxtb	r3, r3
9001368e:	2b00      	cmp	r3, #0
90013690:	d007      	beq.n	900136a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
90013692:	4b1a      	ldr	r3, [pc, #104]	; (900136fc <sys_timeout_abs+0xd8>)
90013694:	681a      	ldr	r2, [r3, #0]
90013696:	693b      	ldr	r3, [r7, #16]
90013698:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
9001369a:	4a18      	ldr	r2, [pc, #96]	; (900136fc <sys_timeout_abs+0xd8>)
9001369c:	693b      	ldr	r3, [r7, #16]
9001369e:	6013      	str	r3, [r2, #0]
900136a0:	e023      	b.n	900136ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
900136a2:	4b16      	ldr	r3, [pc, #88]	; (900136fc <sys_timeout_abs+0xd8>)
900136a4:	681b      	ldr	r3, [r3, #0]
900136a6:	617b      	str	r3, [r7, #20]
900136a8:	e01a      	b.n	900136e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
900136aa:	697b      	ldr	r3, [r7, #20]
900136ac:	681b      	ldr	r3, [r3, #0]
900136ae:	2b00      	cmp	r3, #0
900136b0:	d00b      	beq.n	900136ca <sys_timeout_abs+0xa6>
900136b2:	693b      	ldr	r3, [r7, #16]
900136b4:	685a      	ldr	r2, [r3, #4]
900136b6:	697b      	ldr	r3, [r7, #20]
900136b8:	681b      	ldr	r3, [r3, #0]
900136ba:	685b      	ldr	r3, [r3, #4]
900136bc:	1ad3      	subs	r3, r2, r3
900136be:	0fdb      	lsrs	r3, r3, #31
900136c0:	f003 0301 	and.w	r3, r3, #1
900136c4:	b2db      	uxtb	r3, r3
900136c6:	2b00      	cmp	r3, #0
900136c8:	d007      	beq.n	900136da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
900136ca:	697b      	ldr	r3, [r7, #20]
900136cc:	681a      	ldr	r2, [r3, #0]
900136ce:	693b      	ldr	r3, [r7, #16]
900136d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
900136d2:	697b      	ldr	r3, [r7, #20]
900136d4:	693a      	ldr	r2, [r7, #16]
900136d6:	601a      	str	r2, [r3, #0]
        break;
900136d8:	e007      	b.n	900136ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
900136da:	697b      	ldr	r3, [r7, #20]
900136dc:	681b      	ldr	r3, [r3, #0]
900136de:	617b      	str	r3, [r7, #20]
900136e0:	697b      	ldr	r3, [r7, #20]
900136e2:	2b00      	cmp	r3, #0
900136e4:	d1e1      	bne.n	900136aa <sys_timeout_abs+0x86>
900136e6:	e000      	b.n	900136ea <sys_timeout_abs+0xc6>
    return;
900136e8:	bf00      	nop
      }
    }
  }
}
900136ea:	3718      	adds	r7, #24
900136ec:	46bd      	mov	sp, r7
900136ee:	bd80      	pop	{r7, pc}
900136f0:	9001a4b8 	.word	0x9001a4b8
900136f4:	9001a4ec 	.word	0x9001a4ec
900136f8:	9001a52c 	.word	0x9001a52c
900136fc:	2000d618 	.word	0x2000d618

90013700 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
90013700:	b580      	push	{r7, lr}
90013702:	b086      	sub	sp, #24
90013704:	af00      	add	r7, sp, #0
90013706:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
90013708:	687b      	ldr	r3, [r7, #4]
9001370a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
9001370c:	697b      	ldr	r3, [r7, #20]
9001370e:	685b      	ldr	r3, [r3, #4]
90013710:	4798      	blx	r3

  now = sys_now();
90013712:	f7f1 fc71 	bl	90004ff8 <sys_now>
90013716:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
90013718:	697b      	ldr	r3, [r7, #20]
9001371a:	681a      	ldr	r2, [r3, #0]
9001371c:	4b0f      	ldr	r3, [pc, #60]	; (9001375c <lwip_cyclic_timer+0x5c>)
9001371e:	681b      	ldr	r3, [r3, #0]
90013720:	4413      	add	r3, r2
90013722:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
90013724:	68fa      	ldr	r2, [r7, #12]
90013726:	693b      	ldr	r3, [r7, #16]
90013728:	1ad3      	subs	r3, r2, r3
9001372a:	0fdb      	lsrs	r3, r3, #31
9001372c:	f003 0301 	and.w	r3, r3, #1
90013730:	b2db      	uxtb	r3, r3
90013732:	2b00      	cmp	r3, #0
90013734:	d009      	beq.n	9001374a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
90013736:	697b      	ldr	r3, [r7, #20]
90013738:	681a      	ldr	r2, [r3, #0]
9001373a:	693b      	ldr	r3, [r7, #16]
9001373c:	4413      	add	r3, r2
9001373e:	687a      	ldr	r2, [r7, #4]
90013740:	4907      	ldr	r1, [pc, #28]	; (90013760 <lwip_cyclic_timer+0x60>)
90013742:	4618      	mov	r0, r3
90013744:	f7ff ff6e 	bl	90013624 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
90013748:	e004      	b.n	90013754 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
9001374a:	687a      	ldr	r2, [r7, #4]
9001374c:	4904      	ldr	r1, [pc, #16]	; (90013760 <lwip_cyclic_timer+0x60>)
9001374e:	68f8      	ldr	r0, [r7, #12]
90013750:	f7ff ff68 	bl	90013624 <sys_timeout_abs>
}
90013754:	bf00      	nop
90013756:	3718      	adds	r7, #24
90013758:	46bd      	mov	sp, r7
9001375a:	bd80      	pop	{r7, pc}
9001375c:	2000d61c 	.word	0x2000d61c
90013760:	90013701 	.word	0x90013701

90013764 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
90013764:	b580      	push	{r7, lr}
90013766:	b082      	sub	sp, #8
90013768:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
9001376a:	2301      	movs	r3, #1
9001376c:	607b      	str	r3, [r7, #4]
9001376e:	e00e      	b.n	9001378e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
90013770:	4a0b      	ldr	r2, [pc, #44]	; (900137a0 <sys_timeouts_init+0x3c>)
90013772:	687b      	ldr	r3, [r7, #4]
90013774:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
90013778:	687b      	ldr	r3, [r7, #4]
9001377a:	00db      	lsls	r3, r3, #3
9001377c:	4a08      	ldr	r2, [pc, #32]	; (900137a0 <sys_timeouts_init+0x3c>)
9001377e:	4413      	add	r3, r2
90013780:	461a      	mov	r2, r3
90013782:	4908      	ldr	r1, [pc, #32]	; (900137a4 <sys_timeouts_init+0x40>)
90013784:	f000 f810 	bl	900137a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
90013788:	687b      	ldr	r3, [r7, #4]
9001378a:	3301      	adds	r3, #1
9001378c:	607b      	str	r3, [r7, #4]
9001378e:	687b      	ldr	r3, [r7, #4]
90013790:	2b02      	cmp	r3, #2
90013792:	d9ed      	bls.n	90013770 <sys_timeouts_init+0xc>
  }
}
90013794:	bf00      	nop
90013796:	bf00      	nop
90013798:	3708      	adds	r7, #8
9001379a:	46bd      	mov	sp, r7
9001379c:	bd80      	pop	{r7, pc}
9001379e:	bf00      	nop
900137a0:	9001bdbc 	.word	0x9001bdbc
900137a4:	90013701 	.word	0x90013701

900137a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
900137a8:	b580      	push	{r7, lr}
900137aa:	b086      	sub	sp, #24
900137ac:	af00      	add	r7, sp, #0
900137ae:	60f8      	str	r0, [r7, #12]
900137b0:	60b9      	str	r1, [r7, #8]
900137b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
900137b4:	68fb      	ldr	r3, [r7, #12]
900137b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900137ba:	d306      	bcc.n	900137ca <sys_timeout+0x22>
900137bc:	4b0a      	ldr	r3, [pc, #40]	; (900137e8 <sys_timeout+0x40>)
900137be:	f240 1229 	movw	r2, #297	; 0x129
900137c2:	490a      	ldr	r1, [pc, #40]	; (900137ec <sys_timeout+0x44>)
900137c4:	480a      	ldr	r0, [pc, #40]	; (900137f0 <sys_timeout+0x48>)
900137c6:	f003 fa3b 	bl	90016c40 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
900137ca:	f7f1 fc15 	bl	90004ff8 <sys_now>
900137ce:	4602      	mov	r2, r0
900137d0:	68fb      	ldr	r3, [r7, #12]
900137d2:	4413      	add	r3, r2
900137d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
900137d6:	687a      	ldr	r2, [r7, #4]
900137d8:	68b9      	ldr	r1, [r7, #8]
900137da:	6978      	ldr	r0, [r7, #20]
900137dc:	f7ff ff22 	bl	90013624 <sys_timeout_abs>
#endif
}
900137e0:	bf00      	nop
900137e2:	3718      	adds	r7, #24
900137e4:	46bd      	mov	sp, r7
900137e6:	bd80      	pop	{r7, pc}
900137e8:	9001a4b8 	.word	0x9001a4b8
900137ec:	9001a554 	.word	0x9001a554
900137f0:	9001a52c 	.word	0x9001a52c

900137f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
900137f4:	b580      	push	{r7, lr}
900137f6:	b084      	sub	sp, #16
900137f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
900137fa:	f7f1 fbfd 	bl	90004ff8 <sys_now>
900137fe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
90013800:	4b17      	ldr	r3, [pc, #92]	; (90013860 <sys_check_timeouts+0x6c>)
90013802:	681b      	ldr	r3, [r3, #0]
90013804:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
90013806:	68bb      	ldr	r3, [r7, #8]
90013808:	2b00      	cmp	r3, #0
9001380a:	d022      	beq.n	90013852 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
9001380c:	68bb      	ldr	r3, [r7, #8]
9001380e:	685b      	ldr	r3, [r3, #4]
90013810:	68fa      	ldr	r2, [r7, #12]
90013812:	1ad3      	subs	r3, r2, r3
90013814:	0fdb      	lsrs	r3, r3, #31
90013816:	f003 0301 	and.w	r3, r3, #1
9001381a:	b2db      	uxtb	r3, r3
9001381c:	2b00      	cmp	r3, #0
9001381e:	d11a      	bne.n	90013856 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
90013820:	68bb      	ldr	r3, [r7, #8]
90013822:	681b      	ldr	r3, [r3, #0]
90013824:	4a0e      	ldr	r2, [pc, #56]	; (90013860 <sys_check_timeouts+0x6c>)
90013826:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
90013828:	68bb      	ldr	r3, [r7, #8]
9001382a:	689b      	ldr	r3, [r3, #8]
9001382c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
9001382e:	68bb      	ldr	r3, [r7, #8]
90013830:	68db      	ldr	r3, [r3, #12]
90013832:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
90013834:	68bb      	ldr	r3, [r7, #8]
90013836:	685b      	ldr	r3, [r3, #4]
90013838:	4a0a      	ldr	r2, [pc, #40]	; (90013864 <sys_check_timeouts+0x70>)
9001383a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
9001383c:	68b9      	ldr	r1, [r7, #8]
9001383e:	200a      	movs	r0, #10
90013840:	f7f8 fd0c 	bl	9000c25c <memp_free>
    if (handler != NULL) {
90013844:	687b      	ldr	r3, [r7, #4]
90013846:	2b00      	cmp	r3, #0
90013848:	d0da      	beq.n	90013800 <sys_check_timeouts+0xc>
      handler(arg);
9001384a:	687b      	ldr	r3, [r7, #4]
9001384c:	6838      	ldr	r0, [r7, #0]
9001384e:	4798      	blx	r3
  do {
90013850:	e7d6      	b.n	90013800 <sys_check_timeouts+0xc>
      return;
90013852:	bf00      	nop
90013854:	e000      	b.n	90013858 <sys_check_timeouts+0x64>
      return;
90013856:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
90013858:	3710      	adds	r7, #16
9001385a:	46bd      	mov	sp, r7
9001385c:	bd80      	pop	{r7, pc}
9001385e:	bf00      	nop
90013860:	2000d618 	.word	0x2000d618
90013864:	2000d61c 	.word	0x2000d61c

90013868 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
90013868:	b580      	push	{r7, lr}
9001386a:	b082      	sub	sp, #8
9001386c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
9001386e:	4b16      	ldr	r3, [pc, #88]	; (900138c8 <sys_timeouts_sleeptime+0x60>)
90013870:	681b      	ldr	r3, [r3, #0]
90013872:	2b00      	cmp	r3, #0
90013874:	d102      	bne.n	9001387c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
90013876:	f04f 33ff 	mov.w	r3, #4294967295
9001387a:	e020      	b.n	900138be <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
9001387c:	f7f1 fbbc 	bl	90004ff8 <sys_now>
90013880:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
90013882:	4b11      	ldr	r3, [pc, #68]	; (900138c8 <sys_timeouts_sleeptime+0x60>)
90013884:	681b      	ldr	r3, [r3, #0]
90013886:	685a      	ldr	r2, [r3, #4]
90013888:	687b      	ldr	r3, [r7, #4]
9001388a:	1ad3      	subs	r3, r2, r3
9001388c:	0fdb      	lsrs	r3, r3, #31
9001388e:	f003 0301 	and.w	r3, r3, #1
90013892:	b2db      	uxtb	r3, r3
90013894:	2b00      	cmp	r3, #0
90013896:	d001      	beq.n	9001389c <sys_timeouts_sleeptime+0x34>
    return 0;
90013898:	2300      	movs	r3, #0
9001389a:	e010      	b.n	900138be <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
9001389c:	4b0a      	ldr	r3, [pc, #40]	; (900138c8 <sys_timeouts_sleeptime+0x60>)
9001389e:	681b      	ldr	r3, [r3, #0]
900138a0:	685a      	ldr	r2, [r3, #4]
900138a2:	687b      	ldr	r3, [r7, #4]
900138a4:	1ad3      	subs	r3, r2, r3
900138a6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
900138a8:	683b      	ldr	r3, [r7, #0]
900138aa:	2b00      	cmp	r3, #0
900138ac:	da06      	bge.n	900138bc <sys_timeouts_sleeptime+0x54>
900138ae:	4b07      	ldr	r3, [pc, #28]	; (900138cc <sys_timeouts_sleeptime+0x64>)
900138b0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
900138b4:	4906      	ldr	r1, [pc, #24]	; (900138d0 <sys_timeouts_sleeptime+0x68>)
900138b6:	4807      	ldr	r0, [pc, #28]	; (900138d4 <sys_timeouts_sleeptime+0x6c>)
900138b8:	f003 f9c2 	bl	90016c40 <iprintf>
    return ret;
900138bc:	683b      	ldr	r3, [r7, #0]
  }
}
900138be:	4618      	mov	r0, r3
900138c0:	3708      	adds	r7, #8
900138c2:	46bd      	mov	sp, r7
900138c4:	bd80      	pop	{r7, pc}
900138c6:	bf00      	nop
900138c8:	2000d618 	.word	0x2000d618
900138cc:	9001a4b8 	.word	0x9001a4b8
900138d0:	9001a58c 	.word	0x9001a58c
900138d4:	9001a52c 	.word	0x9001a52c

900138d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
900138d8:	b580      	push	{r7, lr}
900138da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
900138dc:	f003 f9c8 	bl	90016c70 <rand>
900138e0:	4603      	mov	r3, r0
900138e2:	b29b      	uxth	r3, r3
900138e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
900138e8:	b29b      	uxth	r3, r3
900138ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
900138ee:	b29a      	uxth	r2, r3
900138f0:	4b01      	ldr	r3, [pc, #4]	; (900138f8 <udp_init+0x20>)
900138f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
900138f4:	bf00      	nop
900138f6:	bd80      	pop	{r7, pc}
900138f8:	20000018 	.word	0x20000018

900138fc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
900138fc:	b480      	push	{r7}
900138fe:	b083      	sub	sp, #12
90013900:	af00      	add	r7, sp, #0
  u16_t n = 0;
90013902:	2300      	movs	r3, #0
90013904:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
90013906:	4b17      	ldr	r3, [pc, #92]	; (90013964 <udp_new_port+0x68>)
90013908:	881b      	ldrh	r3, [r3, #0]
9001390a:	1c5a      	adds	r2, r3, #1
9001390c:	b291      	uxth	r1, r2
9001390e:	4a15      	ldr	r2, [pc, #84]	; (90013964 <udp_new_port+0x68>)
90013910:	8011      	strh	r1, [r2, #0]
90013912:	f64f 72ff 	movw	r2, #65535	; 0xffff
90013916:	4293      	cmp	r3, r2
90013918:	d103      	bne.n	90013922 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
9001391a:	4b12      	ldr	r3, [pc, #72]	; (90013964 <udp_new_port+0x68>)
9001391c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
90013920:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90013922:	4b11      	ldr	r3, [pc, #68]	; (90013968 <udp_new_port+0x6c>)
90013924:	681b      	ldr	r3, [r3, #0]
90013926:	603b      	str	r3, [r7, #0]
90013928:	e011      	b.n	9001394e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
9001392a:	683b      	ldr	r3, [r7, #0]
9001392c:	8a5a      	ldrh	r2, [r3, #18]
9001392e:	4b0d      	ldr	r3, [pc, #52]	; (90013964 <udp_new_port+0x68>)
90013930:	881b      	ldrh	r3, [r3, #0]
90013932:	429a      	cmp	r2, r3
90013934:	d108      	bne.n	90013948 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
90013936:	88fb      	ldrh	r3, [r7, #6]
90013938:	3301      	adds	r3, #1
9001393a:	80fb      	strh	r3, [r7, #6]
9001393c:	88fb      	ldrh	r3, [r7, #6]
9001393e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90013942:	d3e0      	bcc.n	90013906 <udp_new_port+0xa>
        return 0;
90013944:	2300      	movs	r3, #0
90013946:	e007      	b.n	90013958 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90013948:	683b      	ldr	r3, [r7, #0]
9001394a:	68db      	ldr	r3, [r3, #12]
9001394c:	603b      	str	r3, [r7, #0]
9001394e:	683b      	ldr	r3, [r7, #0]
90013950:	2b00      	cmp	r3, #0
90013952:	d1ea      	bne.n	9001392a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
90013954:	4b03      	ldr	r3, [pc, #12]	; (90013964 <udp_new_port+0x68>)
90013956:	881b      	ldrh	r3, [r3, #0]
}
90013958:	4618      	mov	r0, r3
9001395a:	370c      	adds	r7, #12
9001395c:	46bd      	mov	sp, r7
9001395e:	f85d 7b04 	ldr.w	r7, [sp], #4
90013962:	4770      	bx	lr
90013964:	20000018 	.word	0x20000018
90013968:	2000d624 	.word	0x2000d624

9001396c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
9001396c:	b580      	push	{r7, lr}
9001396e:	b084      	sub	sp, #16
90013970:	af00      	add	r7, sp, #0
90013972:	60f8      	str	r0, [r7, #12]
90013974:	60b9      	str	r1, [r7, #8]
90013976:	4613      	mov	r3, r2
90013978:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
9001397a:	68fb      	ldr	r3, [r7, #12]
9001397c:	2b00      	cmp	r3, #0
9001397e:	d105      	bne.n	9001398c <udp_input_local_match+0x20>
90013980:	4b27      	ldr	r3, [pc, #156]	; (90013a20 <udp_input_local_match+0xb4>)
90013982:	2287      	movs	r2, #135	; 0x87
90013984:	4927      	ldr	r1, [pc, #156]	; (90013a24 <udp_input_local_match+0xb8>)
90013986:	4828      	ldr	r0, [pc, #160]	; (90013a28 <udp_input_local_match+0xbc>)
90013988:	f003 f95a 	bl	90016c40 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
9001398c:	68bb      	ldr	r3, [r7, #8]
9001398e:	2b00      	cmp	r3, #0
90013990:	d105      	bne.n	9001399e <udp_input_local_match+0x32>
90013992:	4b23      	ldr	r3, [pc, #140]	; (90013a20 <udp_input_local_match+0xb4>)
90013994:	2288      	movs	r2, #136	; 0x88
90013996:	4925      	ldr	r1, [pc, #148]	; (90013a2c <udp_input_local_match+0xc0>)
90013998:	4823      	ldr	r0, [pc, #140]	; (90013a28 <udp_input_local_match+0xbc>)
9001399a:	f003 f951 	bl	90016c40 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9001399e:	68fb      	ldr	r3, [r7, #12]
900139a0:	7a1b      	ldrb	r3, [r3, #8]
900139a2:	2b00      	cmp	r3, #0
900139a4:	d00b      	beq.n	900139be <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
900139a6:	68fb      	ldr	r3, [r7, #12]
900139a8:	7a1a      	ldrb	r2, [r3, #8]
900139aa:	4b21      	ldr	r3, [pc, #132]	; (90013a30 <udp_input_local_match+0xc4>)
900139ac:	685b      	ldr	r3, [r3, #4]
900139ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
900139b2:	3301      	adds	r3, #1
900139b4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
900139b6:	429a      	cmp	r2, r3
900139b8:	d001      	beq.n	900139be <udp_input_local_match+0x52>
    return 0;
900139ba:	2300      	movs	r3, #0
900139bc:	e02b      	b.n	90013a16 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
900139be:	79fb      	ldrb	r3, [r7, #7]
900139c0:	2b00      	cmp	r3, #0
900139c2:	d018      	beq.n	900139f6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
900139c4:	68fb      	ldr	r3, [r7, #12]
900139c6:	2b00      	cmp	r3, #0
900139c8:	d013      	beq.n	900139f2 <udp_input_local_match+0x86>
900139ca:	68fb      	ldr	r3, [r7, #12]
900139cc:	681b      	ldr	r3, [r3, #0]
900139ce:	2b00      	cmp	r3, #0
900139d0:	d00f      	beq.n	900139f2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
900139d2:	4b17      	ldr	r3, [pc, #92]	; (90013a30 <udp_input_local_match+0xc4>)
900139d4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
900139d6:	f1b3 3fff 	cmp.w	r3, #4294967295
900139da:	d00a      	beq.n	900139f2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
900139dc:	68fb      	ldr	r3, [r7, #12]
900139de:	681a      	ldr	r2, [r3, #0]
900139e0:	4b13      	ldr	r3, [pc, #76]	; (90013a30 <udp_input_local_match+0xc4>)
900139e2:	695b      	ldr	r3, [r3, #20]
900139e4:	405a      	eors	r2, r3
900139e6:	68bb      	ldr	r3, [r7, #8]
900139e8:	3308      	adds	r3, #8
900139ea:	681b      	ldr	r3, [r3, #0]
900139ec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
900139ee:	2b00      	cmp	r3, #0
900139f0:	d110      	bne.n	90013a14 <udp_input_local_match+0xa8>
          return 1;
900139f2:	2301      	movs	r3, #1
900139f4:	e00f      	b.n	90013a16 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
900139f6:	68fb      	ldr	r3, [r7, #12]
900139f8:	2b00      	cmp	r3, #0
900139fa:	d009      	beq.n	90013a10 <udp_input_local_match+0xa4>
900139fc:	68fb      	ldr	r3, [r7, #12]
900139fe:	681b      	ldr	r3, [r3, #0]
90013a00:	2b00      	cmp	r3, #0
90013a02:	d005      	beq.n	90013a10 <udp_input_local_match+0xa4>
90013a04:	68fb      	ldr	r3, [r7, #12]
90013a06:	681a      	ldr	r2, [r3, #0]
90013a08:	4b09      	ldr	r3, [pc, #36]	; (90013a30 <udp_input_local_match+0xc4>)
90013a0a:	695b      	ldr	r3, [r3, #20]
90013a0c:	429a      	cmp	r2, r3
90013a0e:	d101      	bne.n	90013a14 <udp_input_local_match+0xa8>
        return 1;
90013a10:	2301      	movs	r3, #1
90013a12:	e000      	b.n	90013a16 <udp_input_local_match+0xaa>
      }
  }

  return 0;
90013a14:	2300      	movs	r3, #0
}
90013a16:	4618      	mov	r0, r3
90013a18:	3710      	adds	r7, #16
90013a1a:	46bd      	mov	sp, r7
90013a1c:	bd80      	pop	{r7, pc}
90013a1e:	bf00      	nop
90013a20:	9001a5a0 	.word	0x9001a5a0
90013a24:	9001a5d0 	.word	0x9001a5d0
90013a28:	9001a5f4 	.word	0x9001a5f4
90013a2c:	9001a61c 	.word	0x9001a61c
90013a30:	20007cb4 	.word	0x20007cb4

90013a34 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
90013a34:	b590      	push	{r4, r7, lr}
90013a36:	b08d      	sub	sp, #52	; 0x34
90013a38:	af02      	add	r7, sp, #8
90013a3a:	6078      	str	r0, [r7, #4]
90013a3c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
90013a3e:	2300      	movs	r3, #0
90013a40:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
90013a42:	687b      	ldr	r3, [r7, #4]
90013a44:	2b00      	cmp	r3, #0
90013a46:	d105      	bne.n	90013a54 <udp_input+0x20>
90013a48:	4b7c      	ldr	r3, [pc, #496]	; (90013c3c <udp_input+0x208>)
90013a4a:	22cf      	movs	r2, #207	; 0xcf
90013a4c:	497c      	ldr	r1, [pc, #496]	; (90013c40 <udp_input+0x20c>)
90013a4e:	487d      	ldr	r0, [pc, #500]	; (90013c44 <udp_input+0x210>)
90013a50:	f003 f8f6 	bl	90016c40 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
90013a54:	683b      	ldr	r3, [r7, #0]
90013a56:	2b00      	cmp	r3, #0
90013a58:	d105      	bne.n	90013a66 <udp_input+0x32>
90013a5a:	4b78      	ldr	r3, [pc, #480]	; (90013c3c <udp_input+0x208>)
90013a5c:	22d0      	movs	r2, #208	; 0xd0
90013a5e:	497a      	ldr	r1, [pc, #488]	; (90013c48 <udp_input+0x214>)
90013a60:	4878      	ldr	r0, [pc, #480]	; (90013c44 <udp_input+0x210>)
90013a62:	f003 f8ed 	bl	90016c40 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
90013a66:	687b      	ldr	r3, [r7, #4]
90013a68:	895b      	ldrh	r3, [r3, #10]
90013a6a:	2b07      	cmp	r3, #7
90013a6c:	d803      	bhi.n	90013a76 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
90013a6e:	6878      	ldr	r0, [r7, #4]
90013a70:	f7f9 fa98 	bl	9000cfa4 <pbuf_free>
    goto end;
90013a74:	e0de      	b.n	90013c34 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
90013a76:	687b      	ldr	r3, [r7, #4]
90013a78:	685b      	ldr	r3, [r3, #4]
90013a7a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
90013a7c:	4b73      	ldr	r3, [pc, #460]	; (90013c4c <udp_input+0x218>)
90013a7e:	695b      	ldr	r3, [r3, #20]
90013a80:	4a72      	ldr	r2, [pc, #456]	; (90013c4c <udp_input+0x218>)
90013a82:	6812      	ldr	r2, [r2, #0]
90013a84:	4611      	mov	r1, r2
90013a86:	4618      	mov	r0, r3
90013a88:	f001 fd96 	bl	900155b8 <ip4_addr_isbroadcast_u32>
90013a8c:	4603      	mov	r3, r0
90013a8e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
90013a90:	697b      	ldr	r3, [r7, #20]
90013a92:	881b      	ldrh	r3, [r3, #0]
90013a94:	b29b      	uxth	r3, r3
90013a96:	4618      	mov	r0, r3
90013a98:	f7f7 fed8 	bl	9000b84c <lwip_htons>
90013a9c:	4603      	mov	r3, r0
90013a9e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
90013aa0:	697b      	ldr	r3, [r7, #20]
90013aa2:	885b      	ldrh	r3, [r3, #2]
90013aa4:	b29b      	uxth	r3, r3
90013aa6:	4618      	mov	r0, r3
90013aa8:	f7f7 fed0 	bl	9000b84c <lwip_htons>
90013aac:	4603      	mov	r3, r0
90013aae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
90013ab0:	2300      	movs	r3, #0
90013ab2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
90013ab4:	2300      	movs	r3, #0
90013ab6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
90013ab8:	2300      	movs	r3, #0
90013aba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90013abc:	4b64      	ldr	r3, [pc, #400]	; (90013c50 <udp_input+0x21c>)
90013abe:	681b      	ldr	r3, [r3, #0]
90013ac0:	627b      	str	r3, [r7, #36]	; 0x24
90013ac2:	e054      	b.n	90013b6e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
90013ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013ac6:	8a5b      	ldrh	r3, [r3, #18]
90013ac8:	89fa      	ldrh	r2, [r7, #14]
90013aca:	429a      	cmp	r2, r3
90013acc:	d14a      	bne.n	90013b64 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
90013ace:	7cfb      	ldrb	r3, [r7, #19]
90013ad0:	461a      	mov	r2, r3
90013ad2:	6839      	ldr	r1, [r7, #0]
90013ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
90013ad6:	f7ff ff49 	bl	9001396c <udp_input_local_match>
90013ada:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
90013adc:	2b00      	cmp	r3, #0
90013ade:	d041      	beq.n	90013b64 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
90013ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013ae2:	7c1b      	ldrb	r3, [r3, #16]
90013ae4:	f003 0304 	and.w	r3, r3, #4
90013ae8:	2b00      	cmp	r3, #0
90013aea:	d11d      	bne.n	90013b28 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
90013aec:	69fb      	ldr	r3, [r7, #28]
90013aee:	2b00      	cmp	r3, #0
90013af0:	d102      	bne.n	90013af8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
90013af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013af4:	61fb      	str	r3, [r7, #28]
90013af6:	e017      	b.n	90013b28 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
90013af8:	7cfb      	ldrb	r3, [r7, #19]
90013afa:	2b00      	cmp	r3, #0
90013afc:	d014      	beq.n	90013b28 <udp_input+0xf4>
90013afe:	4b53      	ldr	r3, [pc, #332]	; (90013c4c <udp_input+0x218>)
90013b00:	695b      	ldr	r3, [r3, #20]
90013b02:	f1b3 3fff 	cmp.w	r3, #4294967295
90013b06:	d10f      	bne.n	90013b28 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
90013b08:	69fb      	ldr	r3, [r7, #28]
90013b0a:	681a      	ldr	r2, [r3, #0]
90013b0c:	683b      	ldr	r3, [r7, #0]
90013b0e:	3304      	adds	r3, #4
90013b10:	681b      	ldr	r3, [r3, #0]
90013b12:	429a      	cmp	r2, r3
90013b14:	d008      	beq.n	90013b28 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
90013b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b18:	681a      	ldr	r2, [r3, #0]
90013b1a:	683b      	ldr	r3, [r7, #0]
90013b1c:	3304      	adds	r3, #4
90013b1e:	681b      	ldr	r3, [r3, #0]
90013b20:	429a      	cmp	r2, r3
90013b22:	d101      	bne.n	90013b28 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
90013b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b26:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
90013b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b2a:	8a9b      	ldrh	r3, [r3, #20]
90013b2c:	8a3a      	ldrh	r2, [r7, #16]
90013b2e:	429a      	cmp	r2, r3
90013b30:	d118      	bne.n	90013b64 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
90013b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b34:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
90013b36:	2b00      	cmp	r3, #0
90013b38:	d005      	beq.n	90013b46 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
90013b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b3c:	685a      	ldr	r2, [r3, #4]
90013b3e:	4b43      	ldr	r3, [pc, #268]	; (90013c4c <udp_input+0x218>)
90013b40:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
90013b42:	429a      	cmp	r2, r3
90013b44:	d10e      	bne.n	90013b64 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
90013b46:	6a3b      	ldr	r3, [r7, #32]
90013b48:	2b00      	cmp	r3, #0
90013b4a:	d014      	beq.n	90013b76 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
90013b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b4e:	68da      	ldr	r2, [r3, #12]
90013b50:	6a3b      	ldr	r3, [r7, #32]
90013b52:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
90013b54:	4b3e      	ldr	r3, [pc, #248]	; (90013c50 <udp_input+0x21c>)
90013b56:	681a      	ldr	r2, [r3, #0]
90013b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b5a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
90013b5c:	4a3c      	ldr	r2, [pc, #240]	; (90013c50 <udp_input+0x21c>)
90013b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b60:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
90013b62:	e008      	b.n	90013b76 <udp_input+0x142>
      }
    }

    prev = pcb;
90013b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b66:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90013b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b6a:	68db      	ldr	r3, [r3, #12]
90013b6c:	627b      	str	r3, [r7, #36]	; 0x24
90013b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b70:	2b00      	cmp	r3, #0
90013b72:	d1a7      	bne.n	90013ac4 <udp_input+0x90>
90013b74:	e000      	b.n	90013b78 <udp_input+0x144>
        break;
90013b76:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
90013b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b7a:	2b00      	cmp	r3, #0
90013b7c:	d101      	bne.n	90013b82 <udp_input+0x14e>
    pcb = uncon_pcb;
90013b7e:	69fb      	ldr	r3, [r7, #28]
90013b80:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
90013b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013b84:	2b00      	cmp	r3, #0
90013b86:	d002      	beq.n	90013b8e <udp_input+0x15a>
    for_us = 1;
90013b88:	2301      	movs	r3, #1
90013b8a:	76fb      	strb	r3, [r7, #27]
90013b8c:	e00a      	b.n	90013ba4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
90013b8e:	683b      	ldr	r3, [r7, #0]
90013b90:	3304      	adds	r3, #4
90013b92:	681a      	ldr	r2, [r3, #0]
90013b94:	4b2d      	ldr	r3, [pc, #180]	; (90013c4c <udp_input+0x218>)
90013b96:	695b      	ldr	r3, [r3, #20]
90013b98:	429a      	cmp	r2, r3
90013b9a:	bf0c      	ite	eq
90013b9c:	2301      	moveq	r3, #1
90013b9e:	2300      	movne	r3, #0
90013ba0:	b2db      	uxtb	r3, r3
90013ba2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
90013ba4:	7efb      	ldrb	r3, [r7, #27]
90013ba6:	2b00      	cmp	r3, #0
90013ba8:	d041      	beq.n	90013c2e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
90013baa:	2108      	movs	r1, #8
90013bac:	6878      	ldr	r0, [r7, #4]
90013bae:	f7f9 f973 	bl	9000ce98 <pbuf_remove_header>
90013bb2:	4603      	mov	r3, r0
90013bb4:	2b00      	cmp	r3, #0
90013bb6:	d00a      	beq.n	90013bce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
90013bb8:	4b20      	ldr	r3, [pc, #128]	; (90013c3c <udp_input+0x208>)
90013bba:	f44f 72b8 	mov.w	r2, #368	; 0x170
90013bbe:	4925      	ldr	r1, [pc, #148]	; (90013c54 <udp_input+0x220>)
90013bc0:	4820      	ldr	r0, [pc, #128]	; (90013c44 <udp_input+0x210>)
90013bc2:	f003 f83d 	bl	90016c40 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
90013bc6:	6878      	ldr	r0, [r7, #4]
90013bc8:	f7f9 f9ec 	bl	9000cfa4 <pbuf_free>
      goto end;
90013bcc:	e032      	b.n	90013c34 <udp_input+0x200>
    }

    if (pcb != NULL) {
90013bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013bd0:	2b00      	cmp	r3, #0
90013bd2:	d012      	beq.n	90013bfa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
90013bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013bd6:	699b      	ldr	r3, [r3, #24]
90013bd8:	2b00      	cmp	r3, #0
90013bda:	d00a      	beq.n	90013bf2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
90013bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013bde:	699c      	ldr	r4, [r3, #24]
90013be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013be2:	69d8      	ldr	r0, [r3, #28]
90013be4:	8a3b      	ldrh	r3, [r7, #16]
90013be6:	9300      	str	r3, [sp, #0]
90013be8:	4b1b      	ldr	r3, [pc, #108]	; (90013c58 <udp_input+0x224>)
90013bea:	687a      	ldr	r2, [r7, #4]
90013bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
90013bee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
90013bf0:	e021      	b.n	90013c36 <udp_input+0x202>
        pbuf_free(p);
90013bf2:	6878      	ldr	r0, [r7, #4]
90013bf4:	f7f9 f9d6 	bl	9000cfa4 <pbuf_free>
        goto end;
90013bf8:	e01c      	b.n	90013c34 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
90013bfa:	7cfb      	ldrb	r3, [r7, #19]
90013bfc:	2b00      	cmp	r3, #0
90013bfe:	d112      	bne.n	90013c26 <udp_input+0x1f2>
90013c00:	4b12      	ldr	r3, [pc, #72]	; (90013c4c <udp_input+0x218>)
90013c02:	695b      	ldr	r3, [r3, #20]
90013c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90013c08:	2be0      	cmp	r3, #224	; 0xe0
90013c0a:	d00c      	beq.n	90013c26 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
90013c0c:	4b0f      	ldr	r3, [pc, #60]	; (90013c4c <udp_input+0x218>)
90013c0e:	899b      	ldrh	r3, [r3, #12]
90013c10:	3308      	adds	r3, #8
90013c12:	b29b      	uxth	r3, r3
90013c14:	b21b      	sxth	r3, r3
90013c16:	4619      	mov	r1, r3
90013c18:	6878      	ldr	r0, [r7, #4]
90013c1a:	f7f9 f9b0 	bl	9000cf7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
90013c1e:	2103      	movs	r1, #3
90013c20:	6878      	ldr	r0, [r7, #4]
90013c22:	f001 f9a9 	bl	90014f78 <icmp_dest_unreach>
      pbuf_free(p);
90013c26:	6878      	ldr	r0, [r7, #4]
90013c28:	f7f9 f9bc 	bl	9000cfa4 <pbuf_free>
  return;
90013c2c:	e003      	b.n	90013c36 <udp_input+0x202>
    pbuf_free(p);
90013c2e:	6878      	ldr	r0, [r7, #4]
90013c30:	f7f9 f9b8 	bl	9000cfa4 <pbuf_free>
  return;
90013c34:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
90013c36:	372c      	adds	r7, #44	; 0x2c
90013c38:	46bd      	mov	sp, r7
90013c3a:	bd90      	pop	{r4, r7, pc}
90013c3c:	9001a5a0 	.word	0x9001a5a0
90013c40:	9001a644 	.word	0x9001a644
90013c44:	9001a5f4 	.word	0x9001a5f4
90013c48:	9001a65c 	.word	0x9001a65c
90013c4c:	20007cb4 	.word	0x20007cb4
90013c50:	2000d624 	.word	0x2000d624
90013c54:	9001a678 	.word	0x9001a678
90013c58:	20007cc4 	.word	0x20007cc4

90013c5c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
90013c5c:	b580      	push	{r7, lr}
90013c5e:	b086      	sub	sp, #24
90013c60:	af00      	add	r7, sp, #0
90013c62:	60f8      	str	r0, [r7, #12]
90013c64:	60b9      	str	r1, [r7, #8]
90013c66:	4613      	mov	r3, r2
90013c68:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
90013c6a:	68bb      	ldr	r3, [r7, #8]
90013c6c:	2b00      	cmp	r3, #0
90013c6e:	d101      	bne.n	90013c74 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
90013c70:	4b39      	ldr	r3, [pc, #228]	; (90013d58 <udp_bind+0xfc>)
90013c72:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
90013c74:	68fb      	ldr	r3, [r7, #12]
90013c76:	2b00      	cmp	r3, #0
90013c78:	d109      	bne.n	90013c8e <udp_bind+0x32>
90013c7a:	4b38      	ldr	r3, [pc, #224]	; (90013d5c <udp_bind+0x100>)
90013c7c:	f240 32b7 	movw	r2, #951	; 0x3b7
90013c80:	4937      	ldr	r1, [pc, #220]	; (90013d60 <udp_bind+0x104>)
90013c82:	4838      	ldr	r0, [pc, #224]	; (90013d64 <udp_bind+0x108>)
90013c84:	f002 ffdc 	bl	90016c40 <iprintf>
90013c88:	f06f 030f 	mvn.w	r3, #15
90013c8c:	e060      	b.n	90013d50 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
90013c8e:	2300      	movs	r3, #0
90013c90:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
90013c92:	4b35      	ldr	r3, [pc, #212]	; (90013d68 <udp_bind+0x10c>)
90013c94:	681b      	ldr	r3, [r3, #0]
90013c96:	617b      	str	r3, [r7, #20]
90013c98:	e009      	b.n	90013cae <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
90013c9a:	68fa      	ldr	r2, [r7, #12]
90013c9c:	697b      	ldr	r3, [r7, #20]
90013c9e:	429a      	cmp	r2, r3
90013ca0:	d102      	bne.n	90013ca8 <udp_bind+0x4c>
      rebind = 1;
90013ca2:	2301      	movs	r3, #1
90013ca4:	74fb      	strb	r3, [r7, #19]
      break;
90013ca6:	e005      	b.n	90013cb4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
90013ca8:	697b      	ldr	r3, [r7, #20]
90013caa:	68db      	ldr	r3, [r3, #12]
90013cac:	617b      	str	r3, [r7, #20]
90013cae:	697b      	ldr	r3, [r7, #20]
90013cb0:	2b00      	cmp	r3, #0
90013cb2:	d1f2      	bne.n	90013c9a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
90013cb4:	88fb      	ldrh	r3, [r7, #6]
90013cb6:	2b00      	cmp	r3, #0
90013cb8:	d109      	bne.n	90013cce <udp_bind+0x72>
    port = udp_new_port();
90013cba:	f7ff fe1f 	bl	900138fc <udp_new_port>
90013cbe:	4603      	mov	r3, r0
90013cc0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
90013cc2:	88fb      	ldrh	r3, [r7, #6]
90013cc4:	2b00      	cmp	r3, #0
90013cc6:	d12c      	bne.n	90013d22 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
90013cc8:	f06f 0307 	mvn.w	r3, #7
90013ccc:	e040      	b.n	90013d50 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
90013cce:	4b26      	ldr	r3, [pc, #152]	; (90013d68 <udp_bind+0x10c>)
90013cd0:	681b      	ldr	r3, [r3, #0]
90013cd2:	617b      	str	r3, [r7, #20]
90013cd4:	e022      	b.n	90013d1c <udp_bind+0xc0>
      if (pcb != ipcb) {
90013cd6:	68fa      	ldr	r2, [r7, #12]
90013cd8:	697b      	ldr	r3, [r7, #20]
90013cda:	429a      	cmp	r2, r3
90013cdc:	d01b      	beq.n	90013d16 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
90013cde:	697b      	ldr	r3, [r7, #20]
90013ce0:	8a5b      	ldrh	r3, [r3, #18]
90013ce2:	88fa      	ldrh	r2, [r7, #6]
90013ce4:	429a      	cmp	r2, r3
90013ce6:	d116      	bne.n	90013d16 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
90013ce8:	697b      	ldr	r3, [r7, #20]
90013cea:	681a      	ldr	r2, [r3, #0]
90013cec:	68bb      	ldr	r3, [r7, #8]
90013cee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
90013cf0:	429a      	cmp	r2, r3
90013cf2:	d00d      	beq.n	90013d10 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
90013cf4:	68bb      	ldr	r3, [r7, #8]
90013cf6:	2b00      	cmp	r3, #0
90013cf8:	d00a      	beq.n	90013d10 <udp_bind+0xb4>
90013cfa:	68bb      	ldr	r3, [r7, #8]
90013cfc:	681b      	ldr	r3, [r3, #0]
90013cfe:	2b00      	cmp	r3, #0
90013d00:	d006      	beq.n	90013d10 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
90013d02:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
90013d04:	2b00      	cmp	r3, #0
90013d06:	d003      	beq.n	90013d10 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
90013d08:	697b      	ldr	r3, [r7, #20]
90013d0a:	681b      	ldr	r3, [r3, #0]
90013d0c:	2b00      	cmp	r3, #0
90013d0e:	d102      	bne.n	90013d16 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
90013d10:	f06f 0307 	mvn.w	r3, #7
90013d14:	e01c      	b.n	90013d50 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
90013d16:	697b      	ldr	r3, [r7, #20]
90013d18:	68db      	ldr	r3, [r3, #12]
90013d1a:	617b      	str	r3, [r7, #20]
90013d1c:	697b      	ldr	r3, [r7, #20]
90013d1e:	2b00      	cmp	r3, #0
90013d20:	d1d9      	bne.n	90013cd6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
90013d22:	68bb      	ldr	r3, [r7, #8]
90013d24:	2b00      	cmp	r3, #0
90013d26:	d002      	beq.n	90013d2e <udp_bind+0xd2>
90013d28:	68bb      	ldr	r3, [r7, #8]
90013d2a:	681b      	ldr	r3, [r3, #0]
90013d2c:	e000      	b.n	90013d30 <udp_bind+0xd4>
90013d2e:	2300      	movs	r3, #0
90013d30:	68fa      	ldr	r2, [r7, #12]
90013d32:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
90013d34:	68fb      	ldr	r3, [r7, #12]
90013d36:	88fa      	ldrh	r2, [r7, #6]
90013d38:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
90013d3a:	7cfb      	ldrb	r3, [r7, #19]
90013d3c:	2b00      	cmp	r3, #0
90013d3e:	d106      	bne.n	90013d4e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
90013d40:	4b09      	ldr	r3, [pc, #36]	; (90013d68 <udp_bind+0x10c>)
90013d42:	681a      	ldr	r2, [r3, #0]
90013d44:	68fb      	ldr	r3, [r7, #12]
90013d46:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
90013d48:	4a07      	ldr	r2, [pc, #28]	; (90013d68 <udp_bind+0x10c>)
90013d4a:	68fb      	ldr	r3, [r7, #12]
90013d4c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
90013d4e:	2300      	movs	r3, #0
}
90013d50:	4618      	mov	r0, r3
90013d52:	3718      	adds	r7, #24
90013d54:	46bd      	mov	sp, r7
90013d56:	bd80      	pop	{r7, pc}
90013d58:	9001bdd4 	.word	0x9001bdd4
90013d5c:	9001a5a0 	.word	0x9001a5a0
90013d60:	9001a868 	.word	0x9001a868
90013d64:	9001a5f4 	.word	0x9001a5f4
90013d68:	2000d624 	.word	0x2000d624

90013d6c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
90013d6c:	b580      	push	{r7, lr}
90013d6e:	b084      	sub	sp, #16
90013d70:	af00      	add	r7, sp, #0
90013d72:	60f8      	str	r0, [r7, #12]
90013d74:	60b9      	str	r1, [r7, #8]
90013d76:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
90013d78:	68fb      	ldr	r3, [r7, #12]
90013d7a:	2b00      	cmp	r3, #0
90013d7c:	d107      	bne.n	90013d8e <udp_recv+0x22>
90013d7e:	4b08      	ldr	r3, [pc, #32]	; (90013da0 <udp_recv+0x34>)
90013d80:	f240 428a 	movw	r2, #1162	; 0x48a
90013d84:	4907      	ldr	r1, [pc, #28]	; (90013da4 <udp_recv+0x38>)
90013d86:	4808      	ldr	r0, [pc, #32]	; (90013da8 <udp_recv+0x3c>)
90013d88:	f002 ff5a 	bl	90016c40 <iprintf>
90013d8c:	e005      	b.n	90013d9a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
90013d8e:	68fb      	ldr	r3, [r7, #12]
90013d90:	68ba      	ldr	r2, [r7, #8]
90013d92:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
90013d94:	68fb      	ldr	r3, [r7, #12]
90013d96:	687a      	ldr	r2, [r7, #4]
90013d98:	61da      	str	r2, [r3, #28]
}
90013d9a:	3710      	adds	r7, #16
90013d9c:	46bd      	mov	sp, r7
90013d9e:	bd80      	pop	{r7, pc}
90013da0:	9001a5a0 	.word	0x9001a5a0
90013da4:	9001a8d4 	.word	0x9001a8d4
90013da8:	9001a5f4 	.word	0x9001a5f4

90013dac <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
90013dac:	b580      	push	{r7, lr}
90013dae:	b084      	sub	sp, #16
90013db0:	af00      	add	r7, sp, #0
90013db2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
90013db4:	687b      	ldr	r3, [r7, #4]
90013db6:	2b00      	cmp	r3, #0
90013db8:	d107      	bne.n	90013dca <udp_remove+0x1e>
90013dba:	4b19      	ldr	r3, [pc, #100]	; (90013e20 <udp_remove+0x74>)
90013dbc:	f240 42a1 	movw	r2, #1185	; 0x4a1
90013dc0:	4918      	ldr	r1, [pc, #96]	; (90013e24 <udp_remove+0x78>)
90013dc2:	4819      	ldr	r0, [pc, #100]	; (90013e28 <udp_remove+0x7c>)
90013dc4:	f002 ff3c 	bl	90016c40 <iprintf>
90013dc8:	e026      	b.n	90013e18 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
90013dca:	4b18      	ldr	r3, [pc, #96]	; (90013e2c <udp_remove+0x80>)
90013dcc:	681b      	ldr	r3, [r3, #0]
90013dce:	687a      	ldr	r2, [r7, #4]
90013dd0:	429a      	cmp	r2, r3
90013dd2:	d105      	bne.n	90013de0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
90013dd4:	4b15      	ldr	r3, [pc, #84]	; (90013e2c <udp_remove+0x80>)
90013dd6:	681b      	ldr	r3, [r3, #0]
90013dd8:	68db      	ldr	r3, [r3, #12]
90013dda:	4a14      	ldr	r2, [pc, #80]	; (90013e2c <udp_remove+0x80>)
90013ddc:	6013      	str	r3, [r2, #0]
90013dde:	e017      	b.n	90013e10 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
90013de0:	4b12      	ldr	r3, [pc, #72]	; (90013e2c <udp_remove+0x80>)
90013de2:	681b      	ldr	r3, [r3, #0]
90013de4:	60fb      	str	r3, [r7, #12]
90013de6:	e010      	b.n	90013e0a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
90013de8:	68fb      	ldr	r3, [r7, #12]
90013dea:	68db      	ldr	r3, [r3, #12]
90013dec:	2b00      	cmp	r3, #0
90013dee:	d009      	beq.n	90013e04 <udp_remove+0x58>
90013df0:	68fb      	ldr	r3, [r7, #12]
90013df2:	68db      	ldr	r3, [r3, #12]
90013df4:	687a      	ldr	r2, [r7, #4]
90013df6:	429a      	cmp	r2, r3
90013df8:	d104      	bne.n	90013e04 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
90013dfa:	687b      	ldr	r3, [r7, #4]
90013dfc:	68da      	ldr	r2, [r3, #12]
90013dfe:	68fb      	ldr	r3, [r7, #12]
90013e00:	60da      	str	r2, [r3, #12]
        break;
90013e02:	e005      	b.n	90013e10 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
90013e04:	68fb      	ldr	r3, [r7, #12]
90013e06:	68db      	ldr	r3, [r3, #12]
90013e08:	60fb      	str	r3, [r7, #12]
90013e0a:	68fb      	ldr	r3, [r7, #12]
90013e0c:	2b00      	cmp	r3, #0
90013e0e:	d1eb      	bne.n	90013de8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
90013e10:	6879      	ldr	r1, [r7, #4]
90013e12:	2000      	movs	r0, #0
90013e14:	f7f8 fa22 	bl	9000c25c <memp_free>
}
90013e18:	3710      	adds	r7, #16
90013e1a:	46bd      	mov	sp, r7
90013e1c:	bd80      	pop	{r7, pc}
90013e1e:	bf00      	nop
90013e20:	9001a5a0 	.word	0x9001a5a0
90013e24:	9001a8ec 	.word	0x9001a8ec
90013e28:	9001a5f4 	.word	0x9001a5f4
90013e2c:	2000d624 	.word	0x2000d624

90013e30 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
90013e30:	b580      	push	{r7, lr}
90013e32:	b082      	sub	sp, #8
90013e34:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
90013e36:	2000      	movs	r0, #0
90013e38:	f7f8 f9be 	bl	9000c1b8 <memp_malloc>
90013e3c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
90013e3e:	687b      	ldr	r3, [r7, #4]
90013e40:	2b00      	cmp	r3, #0
90013e42:	d007      	beq.n	90013e54 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
90013e44:	2220      	movs	r2, #32
90013e46:	2100      	movs	r1, #0
90013e48:	6878      	ldr	r0, [r7, #4]
90013e4a:	f002 fe11 	bl	90016a70 <memset>
    pcb->ttl = UDP_TTL;
90013e4e:	687b      	ldr	r3, [r7, #4]
90013e50:	22ff      	movs	r2, #255	; 0xff
90013e52:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
90013e54:	687b      	ldr	r3, [r7, #4]
}
90013e56:	4618      	mov	r0, r3
90013e58:	3708      	adds	r7, #8
90013e5a:	46bd      	mov	sp, r7
90013e5c:	bd80      	pop	{r7, pc}

90013e5e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
90013e5e:	b580      	push	{r7, lr}
90013e60:	b084      	sub	sp, #16
90013e62:	af00      	add	r7, sp, #0
90013e64:	4603      	mov	r3, r0
90013e66:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
90013e68:	f7ff ffe2 	bl	90013e30 <udp_new>
90013e6c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
90013e6e:	68fb      	ldr	r3, [r7, #12]
}
90013e70:	4618      	mov	r0, r3
90013e72:	3710      	adds	r7, #16
90013e74:	46bd      	mov	sp, r7
90013e76:	bd80      	pop	{r7, pc}

90013e78 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
90013e78:	b480      	push	{r7}
90013e7a:	b085      	sub	sp, #20
90013e7c:	af00      	add	r7, sp, #0
90013e7e:	6078      	str	r0, [r7, #4]
90013e80:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
90013e82:	687b      	ldr	r3, [r7, #4]
90013e84:	2b00      	cmp	r3, #0
90013e86:	d01e      	beq.n	90013ec6 <udp_netif_ip_addr_changed+0x4e>
90013e88:	687b      	ldr	r3, [r7, #4]
90013e8a:	681b      	ldr	r3, [r3, #0]
90013e8c:	2b00      	cmp	r3, #0
90013e8e:	d01a      	beq.n	90013ec6 <udp_netif_ip_addr_changed+0x4e>
90013e90:	683b      	ldr	r3, [r7, #0]
90013e92:	2b00      	cmp	r3, #0
90013e94:	d017      	beq.n	90013ec6 <udp_netif_ip_addr_changed+0x4e>
90013e96:	683b      	ldr	r3, [r7, #0]
90013e98:	681b      	ldr	r3, [r3, #0]
90013e9a:	2b00      	cmp	r3, #0
90013e9c:	d013      	beq.n	90013ec6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
90013e9e:	4b0d      	ldr	r3, [pc, #52]	; (90013ed4 <udp_netif_ip_addr_changed+0x5c>)
90013ea0:	681b      	ldr	r3, [r3, #0]
90013ea2:	60fb      	str	r3, [r7, #12]
90013ea4:	e00c      	b.n	90013ec0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
90013ea6:	68fb      	ldr	r3, [r7, #12]
90013ea8:	681a      	ldr	r2, [r3, #0]
90013eaa:	687b      	ldr	r3, [r7, #4]
90013eac:	681b      	ldr	r3, [r3, #0]
90013eae:	429a      	cmp	r2, r3
90013eb0:	d103      	bne.n	90013eba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
90013eb2:	683b      	ldr	r3, [r7, #0]
90013eb4:	681a      	ldr	r2, [r3, #0]
90013eb6:	68fb      	ldr	r3, [r7, #12]
90013eb8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
90013eba:	68fb      	ldr	r3, [r7, #12]
90013ebc:	68db      	ldr	r3, [r3, #12]
90013ebe:	60fb      	str	r3, [r7, #12]
90013ec0:	68fb      	ldr	r3, [r7, #12]
90013ec2:	2b00      	cmp	r3, #0
90013ec4:	d1ef      	bne.n	90013ea6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
90013ec6:	bf00      	nop
90013ec8:	3714      	adds	r7, #20
90013eca:	46bd      	mov	sp, r7
90013ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
90013ed0:	4770      	bx	lr
90013ed2:	bf00      	nop
90013ed4:	2000d624 	.word	0x2000d624

90013ed8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
90013ed8:	b580      	push	{r7, lr}
90013eda:	b082      	sub	sp, #8
90013edc:	af00      	add	r7, sp, #0
90013ede:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
90013ee0:	4915      	ldr	r1, [pc, #84]	; (90013f38 <etharp_free_entry+0x60>)
90013ee2:	687a      	ldr	r2, [r7, #4]
90013ee4:	4613      	mov	r3, r2
90013ee6:	005b      	lsls	r3, r3, #1
90013ee8:	4413      	add	r3, r2
90013eea:	00db      	lsls	r3, r3, #3
90013eec:	440b      	add	r3, r1
90013eee:	681b      	ldr	r3, [r3, #0]
90013ef0:	2b00      	cmp	r3, #0
90013ef2:	d013      	beq.n	90013f1c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
90013ef4:	4910      	ldr	r1, [pc, #64]	; (90013f38 <etharp_free_entry+0x60>)
90013ef6:	687a      	ldr	r2, [r7, #4]
90013ef8:	4613      	mov	r3, r2
90013efa:	005b      	lsls	r3, r3, #1
90013efc:	4413      	add	r3, r2
90013efe:	00db      	lsls	r3, r3, #3
90013f00:	440b      	add	r3, r1
90013f02:	681b      	ldr	r3, [r3, #0]
90013f04:	4618      	mov	r0, r3
90013f06:	f7f9 f84d 	bl	9000cfa4 <pbuf_free>
    arp_table[i].q = NULL;
90013f0a:	490b      	ldr	r1, [pc, #44]	; (90013f38 <etharp_free_entry+0x60>)
90013f0c:	687a      	ldr	r2, [r7, #4]
90013f0e:	4613      	mov	r3, r2
90013f10:	005b      	lsls	r3, r3, #1
90013f12:	4413      	add	r3, r2
90013f14:	00db      	lsls	r3, r3, #3
90013f16:	440b      	add	r3, r1
90013f18:	2200      	movs	r2, #0
90013f1a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
90013f1c:	4906      	ldr	r1, [pc, #24]	; (90013f38 <etharp_free_entry+0x60>)
90013f1e:	687a      	ldr	r2, [r7, #4]
90013f20:	4613      	mov	r3, r2
90013f22:	005b      	lsls	r3, r3, #1
90013f24:	4413      	add	r3, r2
90013f26:	00db      	lsls	r3, r3, #3
90013f28:	440b      	add	r3, r1
90013f2a:	3314      	adds	r3, #20
90013f2c:	2200      	movs	r2, #0
90013f2e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
90013f30:	bf00      	nop
90013f32:	3708      	adds	r7, #8
90013f34:	46bd      	mov	sp, r7
90013f36:	bd80      	pop	{r7, pc}
90013f38:	2000d628 	.word	0x2000d628

90013f3c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
90013f3c:	b580      	push	{r7, lr}
90013f3e:	b082      	sub	sp, #8
90013f40:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
90013f42:	2300      	movs	r3, #0
90013f44:	607b      	str	r3, [r7, #4]
90013f46:	e096      	b.n	90014076 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
90013f48:	494f      	ldr	r1, [pc, #316]	; (90014088 <etharp_tmr+0x14c>)
90013f4a:	687a      	ldr	r2, [r7, #4]
90013f4c:	4613      	mov	r3, r2
90013f4e:	005b      	lsls	r3, r3, #1
90013f50:	4413      	add	r3, r2
90013f52:	00db      	lsls	r3, r3, #3
90013f54:	440b      	add	r3, r1
90013f56:	3314      	adds	r3, #20
90013f58:	781b      	ldrb	r3, [r3, #0]
90013f5a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
90013f5c:	78fb      	ldrb	r3, [r7, #3]
90013f5e:	2b00      	cmp	r3, #0
90013f60:	f000 8086 	beq.w	90014070 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
90013f64:	4948      	ldr	r1, [pc, #288]	; (90014088 <etharp_tmr+0x14c>)
90013f66:	687a      	ldr	r2, [r7, #4]
90013f68:	4613      	mov	r3, r2
90013f6a:	005b      	lsls	r3, r3, #1
90013f6c:	4413      	add	r3, r2
90013f6e:	00db      	lsls	r3, r3, #3
90013f70:	440b      	add	r3, r1
90013f72:	3312      	adds	r3, #18
90013f74:	881b      	ldrh	r3, [r3, #0]
90013f76:	3301      	adds	r3, #1
90013f78:	b298      	uxth	r0, r3
90013f7a:	4943      	ldr	r1, [pc, #268]	; (90014088 <etharp_tmr+0x14c>)
90013f7c:	687a      	ldr	r2, [r7, #4]
90013f7e:	4613      	mov	r3, r2
90013f80:	005b      	lsls	r3, r3, #1
90013f82:	4413      	add	r3, r2
90013f84:	00db      	lsls	r3, r3, #3
90013f86:	440b      	add	r3, r1
90013f88:	3312      	adds	r3, #18
90013f8a:	4602      	mov	r2, r0
90013f8c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
90013f8e:	493e      	ldr	r1, [pc, #248]	; (90014088 <etharp_tmr+0x14c>)
90013f90:	687a      	ldr	r2, [r7, #4]
90013f92:	4613      	mov	r3, r2
90013f94:	005b      	lsls	r3, r3, #1
90013f96:	4413      	add	r3, r2
90013f98:	00db      	lsls	r3, r3, #3
90013f9a:	440b      	add	r3, r1
90013f9c:	3312      	adds	r3, #18
90013f9e:	881b      	ldrh	r3, [r3, #0]
90013fa0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
90013fa4:	d215      	bcs.n	90013fd2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
90013fa6:	4938      	ldr	r1, [pc, #224]	; (90014088 <etharp_tmr+0x14c>)
90013fa8:	687a      	ldr	r2, [r7, #4]
90013faa:	4613      	mov	r3, r2
90013fac:	005b      	lsls	r3, r3, #1
90013fae:	4413      	add	r3, r2
90013fb0:	00db      	lsls	r3, r3, #3
90013fb2:	440b      	add	r3, r1
90013fb4:	3314      	adds	r3, #20
90013fb6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
90013fb8:	2b01      	cmp	r3, #1
90013fba:	d10e      	bne.n	90013fda <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
90013fbc:	4932      	ldr	r1, [pc, #200]	; (90014088 <etharp_tmr+0x14c>)
90013fbe:	687a      	ldr	r2, [r7, #4]
90013fc0:	4613      	mov	r3, r2
90013fc2:	005b      	lsls	r3, r3, #1
90013fc4:	4413      	add	r3, r2
90013fc6:	00db      	lsls	r3, r3, #3
90013fc8:	440b      	add	r3, r1
90013fca:	3312      	adds	r3, #18
90013fcc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
90013fce:	2b04      	cmp	r3, #4
90013fd0:	d903      	bls.n	90013fda <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
90013fd2:	6878      	ldr	r0, [r7, #4]
90013fd4:	f7ff ff80 	bl	90013ed8 <etharp_free_entry>
90013fd8:	e04a      	b.n	90014070 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
90013fda:	492b      	ldr	r1, [pc, #172]	; (90014088 <etharp_tmr+0x14c>)
90013fdc:	687a      	ldr	r2, [r7, #4]
90013fde:	4613      	mov	r3, r2
90013fe0:	005b      	lsls	r3, r3, #1
90013fe2:	4413      	add	r3, r2
90013fe4:	00db      	lsls	r3, r3, #3
90013fe6:	440b      	add	r3, r1
90013fe8:	3314      	adds	r3, #20
90013fea:	781b      	ldrb	r3, [r3, #0]
90013fec:	2b03      	cmp	r3, #3
90013fee:	d10a      	bne.n	90014006 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
90013ff0:	4925      	ldr	r1, [pc, #148]	; (90014088 <etharp_tmr+0x14c>)
90013ff2:	687a      	ldr	r2, [r7, #4]
90013ff4:	4613      	mov	r3, r2
90013ff6:	005b      	lsls	r3, r3, #1
90013ff8:	4413      	add	r3, r2
90013ffa:	00db      	lsls	r3, r3, #3
90013ffc:	440b      	add	r3, r1
90013ffe:	3314      	adds	r3, #20
90014000:	2204      	movs	r2, #4
90014002:	701a      	strb	r2, [r3, #0]
90014004:	e034      	b.n	90014070 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
90014006:	4920      	ldr	r1, [pc, #128]	; (90014088 <etharp_tmr+0x14c>)
90014008:	687a      	ldr	r2, [r7, #4]
9001400a:	4613      	mov	r3, r2
9001400c:	005b      	lsls	r3, r3, #1
9001400e:	4413      	add	r3, r2
90014010:	00db      	lsls	r3, r3, #3
90014012:	440b      	add	r3, r1
90014014:	3314      	adds	r3, #20
90014016:	781b      	ldrb	r3, [r3, #0]
90014018:	2b04      	cmp	r3, #4
9001401a:	d10a      	bne.n	90014032 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
9001401c:	491a      	ldr	r1, [pc, #104]	; (90014088 <etharp_tmr+0x14c>)
9001401e:	687a      	ldr	r2, [r7, #4]
90014020:	4613      	mov	r3, r2
90014022:	005b      	lsls	r3, r3, #1
90014024:	4413      	add	r3, r2
90014026:	00db      	lsls	r3, r3, #3
90014028:	440b      	add	r3, r1
9001402a:	3314      	adds	r3, #20
9001402c:	2202      	movs	r2, #2
9001402e:	701a      	strb	r2, [r3, #0]
90014030:	e01e      	b.n	90014070 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
90014032:	4915      	ldr	r1, [pc, #84]	; (90014088 <etharp_tmr+0x14c>)
90014034:	687a      	ldr	r2, [r7, #4]
90014036:	4613      	mov	r3, r2
90014038:	005b      	lsls	r3, r3, #1
9001403a:	4413      	add	r3, r2
9001403c:	00db      	lsls	r3, r3, #3
9001403e:	440b      	add	r3, r1
90014040:	3314      	adds	r3, #20
90014042:	781b      	ldrb	r3, [r3, #0]
90014044:	2b01      	cmp	r3, #1
90014046:	d113      	bne.n	90014070 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
90014048:	490f      	ldr	r1, [pc, #60]	; (90014088 <etharp_tmr+0x14c>)
9001404a:	687a      	ldr	r2, [r7, #4]
9001404c:	4613      	mov	r3, r2
9001404e:	005b      	lsls	r3, r3, #1
90014050:	4413      	add	r3, r2
90014052:	00db      	lsls	r3, r3, #3
90014054:	440b      	add	r3, r1
90014056:	3308      	adds	r3, #8
90014058:	6818      	ldr	r0, [r3, #0]
9001405a:	687a      	ldr	r2, [r7, #4]
9001405c:	4613      	mov	r3, r2
9001405e:	005b      	lsls	r3, r3, #1
90014060:	4413      	add	r3, r2
90014062:	00db      	lsls	r3, r3, #3
90014064:	4a08      	ldr	r2, [pc, #32]	; (90014088 <etharp_tmr+0x14c>)
90014066:	4413      	add	r3, r2
90014068:	3304      	adds	r3, #4
9001406a:	4619      	mov	r1, r3
9001406c:	f000 fe6e 	bl	90014d4c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
90014070:	687b      	ldr	r3, [r7, #4]
90014072:	3301      	adds	r3, #1
90014074:	607b      	str	r3, [r7, #4]
90014076:	687b      	ldr	r3, [r7, #4]
90014078:	2b09      	cmp	r3, #9
9001407a:	f77f af65 	ble.w	90013f48 <etharp_tmr+0xc>
      }
    }
  }
}
9001407e:	bf00      	nop
90014080:	bf00      	nop
90014082:	3708      	adds	r7, #8
90014084:	46bd      	mov	sp, r7
90014086:	bd80      	pop	{r7, pc}
90014088:	2000d628 	.word	0x2000d628

9001408c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
9001408c:	b580      	push	{r7, lr}
9001408e:	b08a      	sub	sp, #40	; 0x28
90014090:	af00      	add	r7, sp, #0
90014092:	60f8      	str	r0, [r7, #12]
90014094:	460b      	mov	r3, r1
90014096:	607a      	str	r2, [r7, #4]
90014098:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
9001409a:	230a      	movs	r3, #10
9001409c:	84fb      	strh	r3, [r7, #38]	; 0x26
9001409e:	230a      	movs	r3, #10
900140a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
900140a2:	230a      	movs	r3, #10
900140a4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
900140a6:	2300      	movs	r3, #0
900140a8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
900140aa:	230a      	movs	r3, #10
900140ac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
900140ae:	2300      	movs	r3, #0
900140b0:	83bb      	strh	r3, [r7, #28]
900140b2:	2300      	movs	r3, #0
900140b4:	837b      	strh	r3, [r7, #26]
900140b6:	2300      	movs	r3, #0
900140b8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
900140ba:	2300      	movs	r3, #0
900140bc:	843b      	strh	r3, [r7, #32]
900140be:	e0ae      	b.n	9001421e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
900140c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900140c4:	49a6      	ldr	r1, [pc, #664]	; (90014360 <etharp_find_entry+0x2d4>)
900140c6:	4613      	mov	r3, r2
900140c8:	005b      	lsls	r3, r3, #1
900140ca:	4413      	add	r3, r2
900140cc:	00db      	lsls	r3, r3, #3
900140ce:	440b      	add	r3, r1
900140d0:	3314      	adds	r3, #20
900140d2:	781b      	ldrb	r3, [r3, #0]
900140d4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
900140d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
900140da:	2b0a      	cmp	r3, #10
900140dc:	d105      	bne.n	900140ea <etharp_find_entry+0x5e>
900140de:	7dfb      	ldrb	r3, [r7, #23]
900140e0:	2b00      	cmp	r3, #0
900140e2:	d102      	bne.n	900140ea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
900140e4:	8c3b      	ldrh	r3, [r7, #32]
900140e6:	847b      	strh	r3, [r7, #34]	; 0x22
900140e8:	e095      	b.n	90014216 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
900140ea:	7dfb      	ldrb	r3, [r7, #23]
900140ec:	2b00      	cmp	r3, #0
900140ee:	f000 8092 	beq.w	90014216 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
900140f2:	7dfb      	ldrb	r3, [r7, #23]
900140f4:	2b01      	cmp	r3, #1
900140f6:	d009      	beq.n	9001410c <etharp_find_entry+0x80>
900140f8:	7dfb      	ldrb	r3, [r7, #23]
900140fa:	2b01      	cmp	r3, #1
900140fc:	d806      	bhi.n	9001410c <etharp_find_entry+0x80>
900140fe:	4b99      	ldr	r3, [pc, #612]	; (90014364 <etharp_find_entry+0x2d8>)
90014100:	f240 1223 	movw	r2, #291	; 0x123
90014104:	4998      	ldr	r1, [pc, #608]	; (90014368 <etharp_find_entry+0x2dc>)
90014106:	4899      	ldr	r0, [pc, #612]	; (9001436c <etharp_find_entry+0x2e0>)
90014108:	f002 fd9a 	bl	90016c40 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
9001410c:	68fb      	ldr	r3, [r7, #12]
9001410e:	2b00      	cmp	r3, #0
90014110:	d020      	beq.n	90014154 <etharp_find_entry+0xc8>
90014112:	68fb      	ldr	r3, [r7, #12]
90014114:	6819      	ldr	r1, [r3, #0]
90014116:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9001411a:	4891      	ldr	r0, [pc, #580]	; (90014360 <etharp_find_entry+0x2d4>)
9001411c:	4613      	mov	r3, r2
9001411e:	005b      	lsls	r3, r3, #1
90014120:	4413      	add	r3, r2
90014122:	00db      	lsls	r3, r3, #3
90014124:	4403      	add	r3, r0
90014126:	3304      	adds	r3, #4
90014128:	681b      	ldr	r3, [r3, #0]
9001412a:	4299      	cmp	r1, r3
9001412c:	d112      	bne.n	90014154 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
9001412e:	687b      	ldr	r3, [r7, #4]
90014130:	2b00      	cmp	r3, #0
90014132:	d00c      	beq.n	9001414e <etharp_find_entry+0xc2>
90014134:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90014138:	4989      	ldr	r1, [pc, #548]	; (90014360 <etharp_find_entry+0x2d4>)
9001413a:	4613      	mov	r3, r2
9001413c:	005b      	lsls	r3, r3, #1
9001413e:	4413      	add	r3, r2
90014140:	00db      	lsls	r3, r3, #3
90014142:	440b      	add	r3, r1
90014144:	3308      	adds	r3, #8
90014146:	681b      	ldr	r3, [r3, #0]
90014148:	687a      	ldr	r2, [r7, #4]
9001414a:	429a      	cmp	r2, r3
9001414c:	d102      	bne.n	90014154 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
9001414e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
90014152:	e100      	b.n	90014356 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
90014154:	7dfb      	ldrb	r3, [r7, #23]
90014156:	2b01      	cmp	r3, #1
90014158:	d140      	bne.n	900141dc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
9001415a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9001415e:	4980      	ldr	r1, [pc, #512]	; (90014360 <etharp_find_entry+0x2d4>)
90014160:	4613      	mov	r3, r2
90014162:	005b      	lsls	r3, r3, #1
90014164:	4413      	add	r3, r2
90014166:	00db      	lsls	r3, r3, #3
90014168:	440b      	add	r3, r1
9001416a:	681b      	ldr	r3, [r3, #0]
9001416c:	2b00      	cmp	r3, #0
9001416e:	d01a      	beq.n	900141a6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
90014170:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90014174:	497a      	ldr	r1, [pc, #488]	; (90014360 <etharp_find_entry+0x2d4>)
90014176:	4613      	mov	r3, r2
90014178:	005b      	lsls	r3, r3, #1
9001417a:	4413      	add	r3, r2
9001417c:	00db      	lsls	r3, r3, #3
9001417e:	440b      	add	r3, r1
90014180:	3312      	adds	r3, #18
90014182:	881b      	ldrh	r3, [r3, #0]
90014184:	8bba      	ldrh	r2, [r7, #28]
90014186:	429a      	cmp	r2, r3
90014188:	d845      	bhi.n	90014216 <etharp_find_entry+0x18a>
            old_queue = i;
9001418a:	8c3b      	ldrh	r3, [r7, #32]
9001418c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
9001418e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90014192:	4973      	ldr	r1, [pc, #460]	; (90014360 <etharp_find_entry+0x2d4>)
90014194:	4613      	mov	r3, r2
90014196:	005b      	lsls	r3, r3, #1
90014198:	4413      	add	r3, r2
9001419a:	00db      	lsls	r3, r3, #3
9001419c:	440b      	add	r3, r1
9001419e:	3312      	adds	r3, #18
900141a0:	881b      	ldrh	r3, [r3, #0]
900141a2:	83bb      	strh	r3, [r7, #28]
900141a4:	e037      	b.n	90014216 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
900141a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900141aa:	496d      	ldr	r1, [pc, #436]	; (90014360 <etharp_find_entry+0x2d4>)
900141ac:	4613      	mov	r3, r2
900141ae:	005b      	lsls	r3, r3, #1
900141b0:	4413      	add	r3, r2
900141b2:	00db      	lsls	r3, r3, #3
900141b4:	440b      	add	r3, r1
900141b6:	3312      	adds	r3, #18
900141b8:	881b      	ldrh	r3, [r3, #0]
900141ba:	8b7a      	ldrh	r2, [r7, #26]
900141bc:	429a      	cmp	r2, r3
900141be:	d82a      	bhi.n	90014216 <etharp_find_entry+0x18a>
            old_pending = i;
900141c0:	8c3b      	ldrh	r3, [r7, #32]
900141c2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
900141c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900141c8:	4965      	ldr	r1, [pc, #404]	; (90014360 <etharp_find_entry+0x2d4>)
900141ca:	4613      	mov	r3, r2
900141cc:	005b      	lsls	r3, r3, #1
900141ce:	4413      	add	r3, r2
900141d0:	00db      	lsls	r3, r3, #3
900141d2:	440b      	add	r3, r1
900141d4:	3312      	adds	r3, #18
900141d6:	881b      	ldrh	r3, [r3, #0]
900141d8:	837b      	strh	r3, [r7, #26]
900141da:	e01c      	b.n	90014216 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
900141dc:	7dfb      	ldrb	r3, [r7, #23]
900141de:	2b01      	cmp	r3, #1
900141e0:	d919      	bls.n	90014216 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
900141e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900141e6:	495e      	ldr	r1, [pc, #376]	; (90014360 <etharp_find_entry+0x2d4>)
900141e8:	4613      	mov	r3, r2
900141ea:	005b      	lsls	r3, r3, #1
900141ec:	4413      	add	r3, r2
900141ee:	00db      	lsls	r3, r3, #3
900141f0:	440b      	add	r3, r1
900141f2:	3312      	adds	r3, #18
900141f4:	881b      	ldrh	r3, [r3, #0]
900141f6:	8b3a      	ldrh	r2, [r7, #24]
900141f8:	429a      	cmp	r2, r3
900141fa:	d80c      	bhi.n	90014216 <etharp_find_entry+0x18a>
            old_stable = i;
900141fc:	8c3b      	ldrh	r3, [r7, #32]
900141fe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
90014200:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90014204:	4956      	ldr	r1, [pc, #344]	; (90014360 <etharp_find_entry+0x2d4>)
90014206:	4613      	mov	r3, r2
90014208:	005b      	lsls	r3, r3, #1
9001420a:	4413      	add	r3, r2
9001420c:	00db      	lsls	r3, r3, #3
9001420e:	440b      	add	r3, r1
90014210:	3312      	adds	r3, #18
90014212:	881b      	ldrh	r3, [r3, #0]
90014214:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
90014216:	8c3b      	ldrh	r3, [r7, #32]
90014218:	3301      	adds	r3, #1
9001421a:	b29b      	uxth	r3, r3
9001421c:	843b      	strh	r3, [r7, #32]
9001421e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
90014222:	2b09      	cmp	r3, #9
90014224:	f77f af4c 	ble.w	900140c0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
90014228:	7afb      	ldrb	r3, [r7, #11]
9001422a:	f003 0302 	and.w	r3, r3, #2
9001422e:	2b00      	cmp	r3, #0
90014230:	d108      	bne.n	90014244 <etharp_find_entry+0x1b8>
90014232:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
90014236:	2b0a      	cmp	r3, #10
90014238:	d107      	bne.n	9001424a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
9001423a:	7afb      	ldrb	r3, [r7, #11]
9001423c:	f003 0301 	and.w	r3, r3, #1
90014240:	2b00      	cmp	r3, #0
90014242:	d102      	bne.n	9001424a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
90014244:	f04f 33ff 	mov.w	r3, #4294967295
90014248:	e085      	b.n	90014356 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
9001424a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
9001424e:	2b09      	cmp	r3, #9
90014250:	dc02      	bgt.n	90014258 <etharp_find_entry+0x1cc>
    i = empty;
90014252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90014254:	843b      	strh	r3, [r7, #32]
90014256:	e039      	b.n	900142cc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
90014258:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
9001425c:	2b09      	cmp	r3, #9
9001425e:	dc14      	bgt.n	9001428a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
90014260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90014262:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
90014264:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90014268:	493d      	ldr	r1, [pc, #244]	; (90014360 <etharp_find_entry+0x2d4>)
9001426a:	4613      	mov	r3, r2
9001426c:	005b      	lsls	r3, r3, #1
9001426e:	4413      	add	r3, r2
90014270:	00db      	lsls	r3, r3, #3
90014272:	440b      	add	r3, r1
90014274:	681b      	ldr	r3, [r3, #0]
90014276:	2b00      	cmp	r3, #0
90014278:	d018      	beq.n	900142ac <etharp_find_entry+0x220>
9001427a:	4b3a      	ldr	r3, [pc, #232]	; (90014364 <etharp_find_entry+0x2d8>)
9001427c:	f240 126d 	movw	r2, #365	; 0x16d
90014280:	493b      	ldr	r1, [pc, #236]	; (90014370 <etharp_find_entry+0x2e4>)
90014282:	483a      	ldr	r0, [pc, #232]	; (9001436c <etharp_find_entry+0x2e0>)
90014284:	f002 fcdc 	bl	90016c40 <iprintf>
90014288:	e010      	b.n	900142ac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
9001428a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
9001428e:	2b09      	cmp	r3, #9
90014290:	dc02      	bgt.n	90014298 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
90014292:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
90014294:	843b      	strh	r3, [r7, #32]
90014296:	e009      	b.n	900142ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
90014298:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
9001429c:	2b09      	cmp	r3, #9
9001429e:	dc02      	bgt.n	900142a6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
900142a0:	8bfb      	ldrh	r3, [r7, #30]
900142a2:	843b      	strh	r3, [r7, #32]
900142a4:	e002      	b.n	900142ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
900142a6:	f04f 33ff 	mov.w	r3, #4294967295
900142aa:	e054      	b.n	90014356 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
900142ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
900142b0:	2b09      	cmp	r3, #9
900142b2:	dd06      	ble.n	900142c2 <etharp_find_entry+0x236>
900142b4:	4b2b      	ldr	r3, [pc, #172]	; (90014364 <etharp_find_entry+0x2d8>)
900142b6:	f240 127f 	movw	r2, #383	; 0x17f
900142ba:	492e      	ldr	r1, [pc, #184]	; (90014374 <etharp_find_entry+0x2e8>)
900142bc:	482b      	ldr	r0, [pc, #172]	; (9001436c <etharp_find_entry+0x2e0>)
900142be:	f002 fcbf 	bl	90016c40 <iprintf>
    etharp_free_entry(i);
900142c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
900142c6:	4618      	mov	r0, r3
900142c8:	f7ff fe06 	bl	90013ed8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
900142cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
900142d0:	2b09      	cmp	r3, #9
900142d2:	dd06      	ble.n	900142e2 <etharp_find_entry+0x256>
900142d4:	4b23      	ldr	r3, [pc, #140]	; (90014364 <etharp_find_entry+0x2d8>)
900142d6:	f240 1283 	movw	r2, #387	; 0x183
900142da:	4926      	ldr	r1, [pc, #152]	; (90014374 <etharp_find_entry+0x2e8>)
900142dc:	4823      	ldr	r0, [pc, #140]	; (9001436c <etharp_find_entry+0x2e0>)
900142de:	f002 fcaf 	bl	90016c40 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
900142e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900142e6:	491e      	ldr	r1, [pc, #120]	; (90014360 <etharp_find_entry+0x2d4>)
900142e8:	4613      	mov	r3, r2
900142ea:	005b      	lsls	r3, r3, #1
900142ec:	4413      	add	r3, r2
900142ee:	00db      	lsls	r3, r3, #3
900142f0:	440b      	add	r3, r1
900142f2:	3314      	adds	r3, #20
900142f4:	781b      	ldrb	r3, [r3, #0]
900142f6:	2b00      	cmp	r3, #0
900142f8:	d006      	beq.n	90014308 <etharp_find_entry+0x27c>
900142fa:	4b1a      	ldr	r3, [pc, #104]	; (90014364 <etharp_find_entry+0x2d8>)
900142fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
90014300:	491d      	ldr	r1, [pc, #116]	; (90014378 <etharp_find_entry+0x2ec>)
90014302:	481a      	ldr	r0, [pc, #104]	; (9001436c <etharp_find_entry+0x2e0>)
90014304:	f002 fc9c 	bl	90016c40 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
90014308:	68fb      	ldr	r3, [r7, #12]
9001430a:	2b00      	cmp	r3, #0
9001430c:	d00b      	beq.n	90014326 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
9001430e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90014312:	68fb      	ldr	r3, [r7, #12]
90014314:	6819      	ldr	r1, [r3, #0]
90014316:	4812      	ldr	r0, [pc, #72]	; (90014360 <etharp_find_entry+0x2d4>)
90014318:	4613      	mov	r3, r2
9001431a:	005b      	lsls	r3, r3, #1
9001431c:	4413      	add	r3, r2
9001431e:	00db      	lsls	r3, r3, #3
90014320:	4403      	add	r3, r0
90014322:	3304      	adds	r3, #4
90014324:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
90014326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9001432a:	490d      	ldr	r1, [pc, #52]	; (90014360 <etharp_find_entry+0x2d4>)
9001432c:	4613      	mov	r3, r2
9001432e:	005b      	lsls	r3, r3, #1
90014330:	4413      	add	r3, r2
90014332:	00db      	lsls	r3, r3, #3
90014334:	440b      	add	r3, r1
90014336:	3312      	adds	r3, #18
90014338:	2200      	movs	r2, #0
9001433a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
9001433c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90014340:	4907      	ldr	r1, [pc, #28]	; (90014360 <etharp_find_entry+0x2d4>)
90014342:	4613      	mov	r3, r2
90014344:	005b      	lsls	r3, r3, #1
90014346:	4413      	add	r3, r2
90014348:	00db      	lsls	r3, r3, #3
9001434a:	440b      	add	r3, r1
9001434c:	3308      	adds	r3, #8
9001434e:	687a      	ldr	r2, [r7, #4]
90014350:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
90014352:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
90014356:	4618      	mov	r0, r3
90014358:	3728      	adds	r7, #40	; 0x28
9001435a:	46bd      	mov	sp, r7
9001435c:	bd80      	pop	{r7, pc}
9001435e:	bf00      	nop
90014360:	2000d628 	.word	0x2000d628
90014364:	9001a904 	.word	0x9001a904
90014368:	9001a93c 	.word	0x9001a93c
9001436c:	9001a97c 	.word	0x9001a97c
90014370:	9001a9a4 	.word	0x9001a9a4
90014374:	9001a9bc 	.word	0x9001a9bc
90014378:	9001a9d0 	.word	0x9001a9d0

9001437c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
9001437c:	b580      	push	{r7, lr}
9001437e:	b088      	sub	sp, #32
90014380:	af02      	add	r7, sp, #8
90014382:	60f8      	str	r0, [r7, #12]
90014384:	60b9      	str	r1, [r7, #8]
90014386:	607a      	str	r2, [r7, #4]
90014388:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
9001438a:	68fb      	ldr	r3, [r7, #12]
9001438c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90014390:	2b06      	cmp	r3, #6
90014392:	d006      	beq.n	900143a2 <etharp_update_arp_entry+0x26>
90014394:	4b48      	ldr	r3, [pc, #288]	; (900144b8 <etharp_update_arp_entry+0x13c>)
90014396:	f240 12a9 	movw	r2, #425	; 0x1a9
9001439a:	4948      	ldr	r1, [pc, #288]	; (900144bc <etharp_update_arp_entry+0x140>)
9001439c:	4848      	ldr	r0, [pc, #288]	; (900144c0 <etharp_update_arp_entry+0x144>)
9001439e:	f002 fc4f 	bl	90016c40 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
900143a2:	68bb      	ldr	r3, [r7, #8]
900143a4:	2b00      	cmp	r3, #0
900143a6:	d012      	beq.n	900143ce <etharp_update_arp_entry+0x52>
900143a8:	68bb      	ldr	r3, [r7, #8]
900143aa:	681b      	ldr	r3, [r3, #0]
900143ac:	2b00      	cmp	r3, #0
900143ae:	d00e      	beq.n	900143ce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
900143b0:	68bb      	ldr	r3, [r7, #8]
900143b2:	681b      	ldr	r3, [r3, #0]
900143b4:	68f9      	ldr	r1, [r7, #12]
900143b6:	4618      	mov	r0, r3
900143b8:	f001 f8fe 	bl	900155b8 <ip4_addr_isbroadcast_u32>
900143bc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
900143be:	2b00      	cmp	r3, #0
900143c0:	d105      	bne.n	900143ce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
900143c2:	68bb      	ldr	r3, [r7, #8]
900143c4:	681b      	ldr	r3, [r3, #0]
900143c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
900143ca:	2be0      	cmp	r3, #224	; 0xe0
900143cc:	d102      	bne.n	900143d4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
900143ce:	f06f 030f 	mvn.w	r3, #15
900143d2:	e06c      	b.n	900144ae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
900143d4:	78fb      	ldrb	r3, [r7, #3]
900143d6:	68fa      	ldr	r2, [r7, #12]
900143d8:	4619      	mov	r1, r3
900143da:	68b8      	ldr	r0, [r7, #8]
900143dc:	f7ff fe56 	bl	9001408c <etharp_find_entry>
900143e0:	4603      	mov	r3, r0
900143e2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
900143e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
900143e8:	2b00      	cmp	r3, #0
900143ea:	da02      	bge.n	900143f2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
900143ec:	8afb      	ldrh	r3, [r7, #22]
900143ee:	b25b      	sxtb	r3, r3
900143f0:	e05d      	b.n	900144ae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
900143f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
900143f6:	4933      	ldr	r1, [pc, #204]	; (900144c4 <etharp_update_arp_entry+0x148>)
900143f8:	4613      	mov	r3, r2
900143fa:	005b      	lsls	r3, r3, #1
900143fc:	4413      	add	r3, r2
900143fe:	00db      	lsls	r3, r3, #3
90014400:	440b      	add	r3, r1
90014402:	3314      	adds	r3, #20
90014404:	2202      	movs	r2, #2
90014406:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
90014408:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9001440c:	492d      	ldr	r1, [pc, #180]	; (900144c4 <etharp_update_arp_entry+0x148>)
9001440e:	4613      	mov	r3, r2
90014410:	005b      	lsls	r3, r3, #1
90014412:	4413      	add	r3, r2
90014414:	00db      	lsls	r3, r3, #3
90014416:	440b      	add	r3, r1
90014418:	3308      	adds	r3, #8
9001441a:	68fa      	ldr	r2, [r7, #12]
9001441c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
9001441e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90014422:	4613      	mov	r3, r2
90014424:	005b      	lsls	r3, r3, #1
90014426:	4413      	add	r3, r2
90014428:	00db      	lsls	r3, r3, #3
9001442a:	3308      	adds	r3, #8
9001442c:	4a25      	ldr	r2, [pc, #148]	; (900144c4 <etharp_update_arp_entry+0x148>)
9001442e:	4413      	add	r3, r2
90014430:	3304      	adds	r3, #4
90014432:	2206      	movs	r2, #6
90014434:	6879      	ldr	r1, [r7, #4]
90014436:	4618      	mov	r0, r3
90014438:	f002 fb0c 	bl	90016a54 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
9001443c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90014440:	4920      	ldr	r1, [pc, #128]	; (900144c4 <etharp_update_arp_entry+0x148>)
90014442:	4613      	mov	r3, r2
90014444:	005b      	lsls	r3, r3, #1
90014446:	4413      	add	r3, r2
90014448:	00db      	lsls	r3, r3, #3
9001444a:	440b      	add	r3, r1
9001444c:	3312      	adds	r3, #18
9001444e:	2200      	movs	r2, #0
90014450:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
90014452:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90014456:	491b      	ldr	r1, [pc, #108]	; (900144c4 <etharp_update_arp_entry+0x148>)
90014458:	4613      	mov	r3, r2
9001445a:	005b      	lsls	r3, r3, #1
9001445c:	4413      	add	r3, r2
9001445e:	00db      	lsls	r3, r3, #3
90014460:	440b      	add	r3, r1
90014462:	681b      	ldr	r3, [r3, #0]
90014464:	2b00      	cmp	r3, #0
90014466:	d021      	beq.n	900144ac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
90014468:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9001446c:	4915      	ldr	r1, [pc, #84]	; (900144c4 <etharp_update_arp_entry+0x148>)
9001446e:	4613      	mov	r3, r2
90014470:	005b      	lsls	r3, r3, #1
90014472:	4413      	add	r3, r2
90014474:	00db      	lsls	r3, r3, #3
90014476:	440b      	add	r3, r1
90014478:	681b      	ldr	r3, [r3, #0]
9001447a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
9001447c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90014480:	4910      	ldr	r1, [pc, #64]	; (900144c4 <etharp_update_arp_entry+0x148>)
90014482:	4613      	mov	r3, r2
90014484:	005b      	lsls	r3, r3, #1
90014486:	4413      	add	r3, r2
90014488:	00db      	lsls	r3, r3, #3
9001448a:	440b      	add	r3, r1
9001448c:	2200      	movs	r2, #0
9001448e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
90014490:	68fb      	ldr	r3, [r7, #12]
90014492:	f103 0226 	add.w	r2, r3, #38	; 0x26
90014496:	f44f 6300 	mov.w	r3, #2048	; 0x800
9001449a:	9300      	str	r3, [sp, #0]
9001449c:	687b      	ldr	r3, [r7, #4]
9001449e:	6939      	ldr	r1, [r7, #16]
900144a0:	68f8      	ldr	r0, [r7, #12]
900144a2:	f001 ff97 	bl	900163d4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
900144a6:	6938      	ldr	r0, [r7, #16]
900144a8:	f7f8 fd7c 	bl	9000cfa4 <pbuf_free>
  }
  return ERR_OK;
900144ac:	2300      	movs	r3, #0
}
900144ae:	4618      	mov	r0, r3
900144b0:	3718      	adds	r7, #24
900144b2:	46bd      	mov	sp, r7
900144b4:	bd80      	pop	{r7, pc}
900144b6:	bf00      	nop
900144b8:	9001a904 	.word	0x9001a904
900144bc:	9001a9fc 	.word	0x9001a9fc
900144c0:	9001a97c 	.word	0x9001a97c
900144c4:	2000d628 	.word	0x2000d628

900144c8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
900144c8:	b580      	push	{r7, lr}
900144ca:	b084      	sub	sp, #16
900144cc:	af00      	add	r7, sp, #0
900144ce:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
900144d0:	2300      	movs	r3, #0
900144d2:	60fb      	str	r3, [r7, #12]
900144d4:	e01e      	b.n	90014514 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
900144d6:	4913      	ldr	r1, [pc, #76]	; (90014524 <etharp_cleanup_netif+0x5c>)
900144d8:	68fa      	ldr	r2, [r7, #12]
900144da:	4613      	mov	r3, r2
900144dc:	005b      	lsls	r3, r3, #1
900144de:	4413      	add	r3, r2
900144e0:	00db      	lsls	r3, r3, #3
900144e2:	440b      	add	r3, r1
900144e4:	3314      	adds	r3, #20
900144e6:	781b      	ldrb	r3, [r3, #0]
900144e8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
900144ea:	7afb      	ldrb	r3, [r7, #11]
900144ec:	2b00      	cmp	r3, #0
900144ee:	d00e      	beq.n	9001450e <etharp_cleanup_netif+0x46>
900144f0:	490c      	ldr	r1, [pc, #48]	; (90014524 <etharp_cleanup_netif+0x5c>)
900144f2:	68fa      	ldr	r2, [r7, #12]
900144f4:	4613      	mov	r3, r2
900144f6:	005b      	lsls	r3, r3, #1
900144f8:	4413      	add	r3, r2
900144fa:	00db      	lsls	r3, r3, #3
900144fc:	440b      	add	r3, r1
900144fe:	3308      	adds	r3, #8
90014500:	681b      	ldr	r3, [r3, #0]
90014502:	687a      	ldr	r2, [r7, #4]
90014504:	429a      	cmp	r2, r3
90014506:	d102      	bne.n	9001450e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
90014508:	68f8      	ldr	r0, [r7, #12]
9001450a:	f7ff fce5 	bl	90013ed8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9001450e:	68fb      	ldr	r3, [r7, #12]
90014510:	3301      	adds	r3, #1
90014512:	60fb      	str	r3, [r7, #12]
90014514:	68fb      	ldr	r3, [r7, #12]
90014516:	2b09      	cmp	r3, #9
90014518:	dddd      	ble.n	900144d6 <etharp_cleanup_netif+0xe>
    }
  }
}
9001451a:	bf00      	nop
9001451c:	bf00      	nop
9001451e:	3710      	adds	r7, #16
90014520:	46bd      	mov	sp, r7
90014522:	bd80      	pop	{r7, pc}
90014524:	2000d628 	.word	0x2000d628

90014528 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
90014528:	b5b0      	push	{r4, r5, r7, lr}
9001452a:	b08a      	sub	sp, #40	; 0x28
9001452c:	af04      	add	r7, sp, #16
9001452e:	6078      	str	r0, [r7, #4]
90014530:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
90014532:	683b      	ldr	r3, [r7, #0]
90014534:	2b00      	cmp	r3, #0
90014536:	d107      	bne.n	90014548 <etharp_input+0x20>
90014538:	4b3d      	ldr	r3, [pc, #244]	; (90014630 <etharp_input+0x108>)
9001453a:	f240 228a 	movw	r2, #650	; 0x28a
9001453e:	493d      	ldr	r1, [pc, #244]	; (90014634 <etharp_input+0x10c>)
90014540:	483d      	ldr	r0, [pc, #244]	; (90014638 <etharp_input+0x110>)
90014542:	f002 fb7d 	bl	90016c40 <iprintf>
90014546:	e06f      	b.n	90014628 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
90014548:	687b      	ldr	r3, [r7, #4]
9001454a:	685b      	ldr	r3, [r3, #4]
9001454c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
9001454e:	693b      	ldr	r3, [r7, #16]
90014550:	881b      	ldrh	r3, [r3, #0]
90014552:	b29b      	uxth	r3, r3
90014554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90014558:	d10c      	bne.n	90014574 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
9001455a:	693b      	ldr	r3, [r7, #16]
9001455c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
9001455e:	2b06      	cmp	r3, #6
90014560:	d108      	bne.n	90014574 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
90014562:	693b      	ldr	r3, [r7, #16]
90014564:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
90014566:	2b04      	cmp	r3, #4
90014568:	d104      	bne.n	90014574 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
9001456a:	693b      	ldr	r3, [r7, #16]
9001456c:	885b      	ldrh	r3, [r3, #2]
9001456e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
90014570:	2b08      	cmp	r3, #8
90014572:	d003      	beq.n	9001457c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
90014574:	6878      	ldr	r0, [r7, #4]
90014576:	f7f8 fd15 	bl	9000cfa4 <pbuf_free>
    return;
9001457a:	e055      	b.n	90014628 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
9001457c:	693b      	ldr	r3, [r7, #16]
9001457e:	330e      	adds	r3, #14
90014580:	681b      	ldr	r3, [r3, #0]
90014582:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
90014584:	693b      	ldr	r3, [r7, #16]
90014586:	3318      	adds	r3, #24
90014588:	681b      	ldr	r3, [r3, #0]
9001458a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
9001458c:	683b      	ldr	r3, [r7, #0]
9001458e:	3304      	adds	r3, #4
90014590:	681b      	ldr	r3, [r3, #0]
90014592:	2b00      	cmp	r3, #0
90014594:	d102      	bne.n	9001459c <etharp_input+0x74>
    for_us = 0;
90014596:	2300      	movs	r3, #0
90014598:	75fb      	strb	r3, [r7, #23]
9001459a:	e009      	b.n	900145b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
9001459c:	68ba      	ldr	r2, [r7, #8]
9001459e:	683b      	ldr	r3, [r7, #0]
900145a0:	3304      	adds	r3, #4
900145a2:	681b      	ldr	r3, [r3, #0]
900145a4:	429a      	cmp	r2, r3
900145a6:	bf0c      	ite	eq
900145a8:	2301      	moveq	r3, #1
900145aa:	2300      	movne	r3, #0
900145ac:	b2db      	uxtb	r3, r3
900145ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
900145b0:	693b      	ldr	r3, [r7, #16]
900145b2:	f103 0208 	add.w	r2, r3, #8
900145b6:	7dfb      	ldrb	r3, [r7, #23]
900145b8:	2b00      	cmp	r3, #0
900145ba:	d001      	beq.n	900145c0 <etharp_input+0x98>
900145bc:	2301      	movs	r3, #1
900145be:	e000      	b.n	900145c2 <etharp_input+0x9a>
900145c0:	2302      	movs	r3, #2
900145c2:	f107 010c 	add.w	r1, r7, #12
900145c6:	6838      	ldr	r0, [r7, #0]
900145c8:	f7ff fed8 	bl	9001437c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
900145cc:	693b      	ldr	r3, [r7, #16]
900145ce:	88db      	ldrh	r3, [r3, #6]
900145d0:	b29b      	uxth	r3, r3
900145d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900145d6:	d003      	beq.n	900145e0 <etharp_input+0xb8>
900145d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900145dc:	d01e      	beq.n	9001461c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
900145de:	e020      	b.n	90014622 <etharp_input+0xfa>
      if (for_us) {
900145e0:	7dfb      	ldrb	r3, [r7, #23]
900145e2:	2b00      	cmp	r3, #0
900145e4:	d01c      	beq.n	90014620 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
900145e6:	683b      	ldr	r3, [r7, #0]
900145e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
900145ec:	693b      	ldr	r3, [r7, #16]
900145ee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
900145f2:	683b      	ldr	r3, [r7, #0]
900145f4:	f103 0526 	add.w	r5, r3, #38	; 0x26
900145f8:	683b      	ldr	r3, [r7, #0]
900145fa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
900145fc:	693a      	ldr	r2, [r7, #16]
900145fe:	3208      	adds	r2, #8
        etharp_raw(netif,
90014600:	2102      	movs	r1, #2
90014602:	9103      	str	r1, [sp, #12]
90014604:	f107 010c 	add.w	r1, r7, #12
90014608:	9102      	str	r1, [sp, #8]
9001460a:	9201      	str	r2, [sp, #4]
9001460c:	9300      	str	r3, [sp, #0]
9001460e:	462b      	mov	r3, r5
90014610:	4622      	mov	r2, r4
90014612:	4601      	mov	r1, r0
90014614:	6838      	ldr	r0, [r7, #0]
90014616:	f000 faeb 	bl	90014bf0 <etharp_raw>
      break;
9001461a:	e001      	b.n	90014620 <etharp_input+0xf8>
      break;
9001461c:	bf00      	nop
9001461e:	e000      	b.n	90014622 <etharp_input+0xfa>
      break;
90014620:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
90014622:	6878      	ldr	r0, [r7, #4]
90014624:	f7f8 fcbe 	bl	9000cfa4 <pbuf_free>
}
90014628:	3718      	adds	r7, #24
9001462a:	46bd      	mov	sp, r7
9001462c:	bdb0      	pop	{r4, r5, r7, pc}
9001462e:	bf00      	nop
90014630:	9001a904 	.word	0x9001a904
90014634:	9001aa54 	.word	0x9001aa54
90014638:	9001a97c 	.word	0x9001a97c

9001463c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
9001463c:	b580      	push	{r7, lr}
9001463e:	b086      	sub	sp, #24
90014640:	af02      	add	r7, sp, #8
90014642:	60f8      	str	r0, [r7, #12]
90014644:	60b9      	str	r1, [r7, #8]
90014646:	4613      	mov	r3, r2
90014648:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
9001464a:	79fa      	ldrb	r2, [r7, #7]
9001464c:	4944      	ldr	r1, [pc, #272]	; (90014760 <etharp_output_to_arp_index+0x124>)
9001464e:	4613      	mov	r3, r2
90014650:	005b      	lsls	r3, r3, #1
90014652:	4413      	add	r3, r2
90014654:	00db      	lsls	r3, r3, #3
90014656:	440b      	add	r3, r1
90014658:	3314      	adds	r3, #20
9001465a:	781b      	ldrb	r3, [r3, #0]
9001465c:	2b01      	cmp	r3, #1
9001465e:	d806      	bhi.n	9001466e <etharp_output_to_arp_index+0x32>
90014660:	4b40      	ldr	r3, [pc, #256]	; (90014764 <etharp_output_to_arp_index+0x128>)
90014662:	f240 22ee 	movw	r2, #750	; 0x2ee
90014666:	4940      	ldr	r1, [pc, #256]	; (90014768 <etharp_output_to_arp_index+0x12c>)
90014668:	4840      	ldr	r0, [pc, #256]	; (9001476c <etharp_output_to_arp_index+0x130>)
9001466a:	f002 fae9 	bl	90016c40 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
9001466e:	79fa      	ldrb	r2, [r7, #7]
90014670:	493b      	ldr	r1, [pc, #236]	; (90014760 <etharp_output_to_arp_index+0x124>)
90014672:	4613      	mov	r3, r2
90014674:	005b      	lsls	r3, r3, #1
90014676:	4413      	add	r3, r2
90014678:	00db      	lsls	r3, r3, #3
9001467a:	440b      	add	r3, r1
9001467c:	3314      	adds	r3, #20
9001467e:	781b      	ldrb	r3, [r3, #0]
90014680:	2b02      	cmp	r3, #2
90014682:	d153      	bne.n	9001472c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
90014684:	79fa      	ldrb	r2, [r7, #7]
90014686:	4936      	ldr	r1, [pc, #216]	; (90014760 <etharp_output_to_arp_index+0x124>)
90014688:	4613      	mov	r3, r2
9001468a:	005b      	lsls	r3, r3, #1
9001468c:	4413      	add	r3, r2
9001468e:	00db      	lsls	r3, r3, #3
90014690:	440b      	add	r3, r1
90014692:	3312      	adds	r3, #18
90014694:	881b      	ldrh	r3, [r3, #0]
90014696:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
9001469a:	d919      	bls.n	900146d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
9001469c:	79fa      	ldrb	r2, [r7, #7]
9001469e:	4613      	mov	r3, r2
900146a0:	005b      	lsls	r3, r3, #1
900146a2:	4413      	add	r3, r2
900146a4:	00db      	lsls	r3, r3, #3
900146a6:	4a2e      	ldr	r2, [pc, #184]	; (90014760 <etharp_output_to_arp_index+0x124>)
900146a8:	4413      	add	r3, r2
900146aa:	3304      	adds	r3, #4
900146ac:	4619      	mov	r1, r3
900146ae:	68f8      	ldr	r0, [r7, #12]
900146b0:	f000 fb4c 	bl	90014d4c <etharp_request>
900146b4:	4603      	mov	r3, r0
900146b6:	2b00      	cmp	r3, #0
900146b8:	d138      	bne.n	9001472c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
900146ba:	79fa      	ldrb	r2, [r7, #7]
900146bc:	4928      	ldr	r1, [pc, #160]	; (90014760 <etharp_output_to_arp_index+0x124>)
900146be:	4613      	mov	r3, r2
900146c0:	005b      	lsls	r3, r3, #1
900146c2:	4413      	add	r3, r2
900146c4:	00db      	lsls	r3, r3, #3
900146c6:	440b      	add	r3, r1
900146c8:	3314      	adds	r3, #20
900146ca:	2203      	movs	r2, #3
900146cc:	701a      	strb	r2, [r3, #0]
900146ce:	e02d      	b.n	9001472c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
900146d0:	79fa      	ldrb	r2, [r7, #7]
900146d2:	4923      	ldr	r1, [pc, #140]	; (90014760 <etharp_output_to_arp_index+0x124>)
900146d4:	4613      	mov	r3, r2
900146d6:	005b      	lsls	r3, r3, #1
900146d8:	4413      	add	r3, r2
900146da:	00db      	lsls	r3, r3, #3
900146dc:	440b      	add	r3, r1
900146de:	3312      	adds	r3, #18
900146e0:	881b      	ldrh	r3, [r3, #0]
900146e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
900146e6:	d321      	bcc.n	9001472c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
900146e8:	79fa      	ldrb	r2, [r7, #7]
900146ea:	4613      	mov	r3, r2
900146ec:	005b      	lsls	r3, r3, #1
900146ee:	4413      	add	r3, r2
900146f0:	00db      	lsls	r3, r3, #3
900146f2:	4a1b      	ldr	r2, [pc, #108]	; (90014760 <etharp_output_to_arp_index+0x124>)
900146f4:	4413      	add	r3, r2
900146f6:	1d19      	adds	r1, r3, #4
900146f8:	79fa      	ldrb	r2, [r7, #7]
900146fa:	4613      	mov	r3, r2
900146fc:	005b      	lsls	r3, r3, #1
900146fe:	4413      	add	r3, r2
90014700:	00db      	lsls	r3, r3, #3
90014702:	3308      	adds	r3, #8
90014704:	4a16      	ldr	r2, [pc, #88]	; (90014760 <etharp_output_to_arp_index+0x124>)
90014706:	4413      	add	r3, r2
90014708:	3304      	adds	r3, #4
9001470a:	461a      	mov	r2, r3
9001470c:	68f8      	ldr	r0, [r7, #12]
9001470e:	f000 fafb 	bl	90014d08 <etharp_request_dst>
90014712:	4603      	mov	r3, r0
90014714:	2b00      	cmp	r3, #0
90014716:	d109      	bne.n	9001472c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
90014718:	79fa      	ldrb	r2, [r7, #7]
9001471a:	4911      	ldr	r1, [pc, #68]	; (90014760 <etharp_output_to_arp_index+0x124>)
9001471c:	4613      	mov	r3, r2
9001471e:	005b      	lsls	r3, r3, #1
90014720:	4413      	add	r3, r2
90014722:	00db      	lsls	r3, r3, #3
90014724:	440b      	add	r3, r1
90014726:	3314      	adds	r3, #20
90014728:	2203      	movs	r2, #3
9001472a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
9001472c:	68fb      	ldr	r3, [r7, #12]
9001472e:	f103 0126 	add.w	r1, r3, #38	; 0x26
90014732:	79fa      	ldrb	r2, [r7, #7]
90014734:	4613      	mov	r3, r2
90014736:	005b      	lsls	r3, r3, #1
90014738:	4413      	add	r3, r2
9001473a:	00db      	lsls	r3, r3, #3
9001473c:	3308      	adds	r3, #8
9001473e:	4a08      	ldr	r2, [pc, #32]	; (90014760 <etharp_output_to_arp_index+0x124>)
90014740:	4413      	add	r3, r2
90014742:	3304      	adds	r3, #4
90014744:	f44f 6200 	mov.w	r2, #2048	; 0x800
90014748:	9200      	str	r2, [sp, #0]
9001474a:	460a      	mov	r2, r1
9001474c:	68b9      	ldr	r1, [r7, #8]
9001474e:	68f8      	ldr	r0, [r7, #12]
90014750:	f001 fe40 	bl	900163d4 <ethernet_output>
90014754:	4603      	mov	r3, r0
}
90014756:	4618      	mov	r0, r3
90014758:	3710      	adds	r7, #16
9001475a:	46bd      	mov	sp, r7
9001475c:	bd80      	pop	{r7, pc}
9001475e:	bf00      	nop
90014760:	2000d628 	.word	0x2000d628
90014764:	9001a904 	.word	0x9001a904
90014768:	9001aa74 	.word	0x9001aa74
9001476c:	9001a97c 	.word	0x9001a97c

90014770 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
90014770:	b580      	push	{r7, lr}
90014772:	b08a      	sub	sp, #40	; 0x28
90014774:	af02      	add	r7, sp, #8
90014776:	60f8      	str	r0, [r7, #12]
90014778:	60b9      	str	r1, [r7, #8]
9001477a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
9001477c:	687b      	ldr	r3, [r7, #4]
9001477e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
90014780:	68fb      	ldr	r3, [r7, #12]
90014782:	2b00      	cmp	r3, #0
90014784:	d106      	bne.n	90014794 <etharp_output+0x24>
90014786:	4b73      	ldr	r3, [pc, #460]	; (90014954 <etharp_output+0x1e4>)
90014788:	f240 321e 	movw	r2, #798	; 0x31e
9001478c:	4972      	ldr	r1, [pc, #456]	; (90014958 <etharp_output+0x1e8>)
9001478e:	4873      	ldr	r0, [pc, #460]	; (9001495c <etharp_output+0x1ec>)
90014790:	f002 fa56 	bl	90016c40 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
90014794:	68bb      	ldr	r3, [r7, #8]
90014796:	2b00      	cmp	r3, #0
90014798:	d106      	bne.n	900147a8 <etharp_output+0x38>
9001479a:	4b6e      	ldr	r3, [pc, #440]	; (90014954 <etharp_output+0x1e4>)
9001479c:	f240 321f 	movw	r2, #799	; 0x31f
900147a0:	496f      	ldr	r1, [pc, #444]	; (90014960 <etharp_output+0x1f0>)
900147a2:	486e      	ldr	r0, [pc, #440]	; (9001495c <etharp_output+0x1ec>)
900147a4:	f002 fa4c 	bl	90016c40 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
900147a8:	687b      	ldr	r3, [r7, #4]
900147aa:	2b00      	cmp	r3, #0
900147ac:	d106      	bne.n	900147bc <etharp_output+0x4c>
900147ae:	4b69      	ldr	r3, [pc, #420]	; (90014954 <etharp_output+0x1e4>)
900147b0:	f44f 7248 	mov.w	r2, #800	; 0x320
900147b4:	496b      	ldr	r1, [pc, #428]	; (90014964 <etharp_output+0x1f4>)
900147b6:	4869      	ldr	r0, [pc, #420]	; (9001495c <etharp_output+0x1ec>)
900147b8:	f002 fa42 	bl	90016c40 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
900147bc:	687b      	ldr	r3, [r7, #4]
900147be:	681b      	ldr	r3, [r3, #0]
900147c0:	68f9      	ldr	r1, [r7, #12]
900147c2:	4618      	mov	r0, r3
900147c4:	f000 fef8 	bl	900155b8 <ip4_addr_isbroadcast_u32>
900147c8:	4603      	mov	r3, r0
900147ca:	2b00      	cmp	r3, #0
900147cc:	d002      	beq.n	900147d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
900147ce:	4b66      	ldr	r3, [pc, #408]	; (90014968 <etharp_output+0x1f8>)
900147d0:	61fb      	str	r3, [r7, #28]
900147d2:	e0af      	b.n	90014934 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
900147d4:	687b      	ldr	r3, [r7, #4]
900147d6:	681b      	ldr	r3, [r3, #0]
900147d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
900147dc:	2be0      	cmp	r3, #224	; 0xe0
900147de:	d118      	bne.n	90014812 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
900147e0:	2301      	movs	r3, #1
900147e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
900147e4:	2300      	movs	r3, #0
900147e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
900147e8:	235e      	movs	r3, #94	; 0x5e
900147ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
900147ec:	687b      	ldr	r3, [r7, #4]
900147ee:	3301      	adds	r3, #1
900147f0:	781b      	ldrb	r3, [r3, #0]
900147f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900147f6:	b2db      	uxtb	r3, r3
900147f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
900147fa:	687b      	ldr	r3, [r7, #4]
900147fc:	3302      	adds	r3, #2
900147fe:	781b      	ldrb	r3, [r3, #0]
90014800:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
90014802:	687b      	ldr	r3, [r7, #4]
90014804:	3303      	adds	r3, #3
90014806:	781b      	ldrb	r3, [r3, #0]
90014808:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
9001480a:	f107 0310 	add.w	r3, r7, #16
9001480e:	61fb      	str	r3, [r7, #28]
90014810:	e090      	b.n	90014934 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
90014812:	687b      	ldr	r3, [r7, #4]
90014814:	681a      	ldr	r2, [r3, #0]
90014816:	68fb      	ldr	r3, [r7, #12]
90014818:	3304      	adds	r3, #4
9001481a:	681b      	ldr	r3, [r3, #0]
9001481c:	405a      	eors	r2, r3
9001481e:	68fb      	ldr	r3, [r7, #12]
90014820:	3308      	adds	r3, #8
90014822:	681b      	ldr	r3, [r3, #0]
90014824:	4013      	ands	r3, r2
90014826:	2b00      	cmp	r3, #0
90014828:	d012      	beq.n	90014850 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
9001482a:	687b      	ldr	r3, [r7, #4]
9001482c:	681b      	ldr	r3, [r3, #0]
9001482e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
90014830:	f64f 62a9 	movw	r2, #65193	; 0xfea9
90014834:	4293      	cmp	r3, r2
90014836:	d00b      	beq.n	90014850 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
90014838:	68fb      	ldr	r3, [r7, #12]
9001483a:	330c      	adds	r3, #12
9001483c:	681b      	ldr	r3, [r3, #0]
9001483e:	2b00      	cmp	r3, #0
90014840:	d003      	beq.n	9001484a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
90014842:	68fb      	ldr	r3, [r7, #12]
90014844:	330c      	adds	r3, #12
90014846:	61bb      	str	r3, [r7, #24]
90014848:	e002      	b.n	90014850 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
9001484a:	f06f 0303 	mvn.w	r3, #3
9001484e:	e07d      	b.n	9001494c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
90014850:	4b46      	ldr	r3, [pc, #280]	; (9001496c <etharp_output+0x1fc>)
90014852:	781b      	ldrb	r3, [r3, #0]
90014854:	4619      	mov	r1, r3
90014856:	4a46      	ldr	r2, [pc, #280]	; (90014970 <etharp_output+0x200>)
90014858:	460b      	mov	r3, r1
9001485a:	005b      	lsls	r3, r3, #1
9001485c:	440b      	add	r3, r1
9001485e:	00db      	lsls	r3, r3, #3
90014860:	4413      	add	r3, r2
90014862:	3314      	adds	r3, #20
90014864:	781b      	ldrb	r3, [r3, #0]
90014866:	2b01      	cmp	r3, #1
90014868:	d925      	bls.n	900148b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
9001486a:	4b40      	ldr	r3, [pc, #256]	; (9001496c <etharp_output+0x1fc>)
9001486c:	781b      	ldrb	r3, [r3, #0]
9001486e:	4619      	mov	r1, r3
90014870:	4a3f      	ldr	r2, [pc, #252]	; (90014970 <etharp_output+0x200>)
90014872:	460b      	mov	r3, r1
90014874:	005b      	lsls	r3, r3, #1
90014876:	440b      	add	r3, r1
90014878:	00db      	lsls	r3, r3, #3
9001487a:	4413      	add	r3, r2
9001487c:	3308      	adds	r3, #8
9001487e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
90014880:	68fa      	ldr	r2, [r7, #12]
90014882:	429a      	cmp	r2, r3
90014884:	d117      	bne.n	900148b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
90014886:	69bb      	ldr	r3, [r7, #24]
90014888:	681a      	ldr	r2, [r3, #0]
9001488a:	4b38      	ldr	r3, [pc, #224]	; (9001496c <etharp_output+0x1fc>)
9001488c:	781b      	ldrb	r3, [r3, #0]
9001488e:	4618      	mov	r0, r3
90014890:	4937      	ldr	r1, [pc, #220]	; (90014970 <etharp_output+0x200>)
90014892:	4603      	mov	r3, r0
90014894:	005b      	lsls	r3, r3, #1
90014896:	4403      	add	r3, r0
90014898:	00db      	lsls	r3, r3, #3
9001489a:	440b      	add	r3, r1
9001489c:	3304      	adds	r3, #4
9001489e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
900148a0:	429a      	cmp	r2, r3
900148a2:	d108      	bne.n	900148b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
900148a4:	4b31      	ldr	r3, [pc, #196]	; (9001496c <etharp_output+0x1fc>)
900148a6:	781b      	ldrb	r3, [r3, #0]
900148a8:	461a      	mov	r2, r3
900148aa:	68b9      	ldr	r1, [r7, #8]
900148ac:	68f8      	ldr	r0, [r7, #12]
900148ae:	f7ff fec5 	bl	9001463c <etharp_output_to_arp_index>
900148b2:	4603      	mov	r3, r0
900148b4:	e04a      	b.n	9001494c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
900148b6:	2300      	movs	r3, #0
900148b8:	75fb      	strb	r3, [r7, #23]
900148ba:	e031      	b.n	90014920 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
900148bc:	7dfa      	ldrb	r2, [r7, #23]
900148be:	492c      	ldr	r1, [pc, #176]	; (90014970 <etharp_output+0x200>)
900148c0:	4613      	mov	r3, r2
900148c2:	005b      	lsls	r3, r3, #1
900148c4:	4413      	add	r3, r2
900148c6:	00db      	lsls	r3, r3, #3
900148c8:	440b      	add	r3, r1
900148ca:	3314      	adds	r3, #20
900148cc:	781b      	ldrb	r3, [r3, #0]
900148ce:	2b01      	cmp	r3, #1
900148d0:	d923      	bls.n	9001491a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
900148d2:	7dfa      	ldrb	r2, [r7, #23]
900148d4:	4926      	ldr	r1, [pc, #152]	; (90014970 <etharp_output+0x200>)
900148d6:	4613      	mov	r3, r2
900148d8:	005b      	lsls	r3, r3, #1
900148da:	4413      	add	r3, r2
900148dc:	00db      	lsls	r3, r3, #3
900148de:	440b      	add	r3, r1
900148e0:	3308      	adds	r3, #8
900148e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
900148e4:	68fa      	ldr	r2, [r7, #12]
900148e6:	429a      	cmp	r2, r3
900148e8:	d117      	bne.n	9001491a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
900148ea:	69bb      	ldr	r3, [r7, #24]
900148ec:	6819      	ldr	r1, [r3, #0]
900148ee:	7dfa      	ldrb	r2, [r7, #23]
900148f0:	481f      	ldr	r0, [pc, #124]	; (90014970 <etharp_output+0x200>)
900148f2:	4613      	mov	r3, r2
900148f4:	005b      	lsls	r3, r3, #1
900148f6:	4413      	add	r3, r2
900148f8:	00db      	lsls	r3, r3, #3
900148fa:	4403      	add	r3, r0
900148fc:	3304      	adds	r3, #4
900148fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
90014900:	4299      	cmp	r1, r3
90014902:	d10a      	bne.n	9001491a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
90014904:	4a19      	ldr	r2, [pc, #100]	; (9001496c <etharp_output+0x1fc>)
90014906:	7dfb      	ldrb	r3, [r7, #23]
90014908:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
9001490a:	7dfb      	ldrb	r3, [r7, #23]
9001490c:	461a      	mov	r2, r3
9001490e:	68b9      	ldr	r1, [r7, #8]
90014910:	68f8      	ldr	r0, [r7, #12]
90014912:	f7ff fe93 	bl	9001463c <etharp_output_to_arp_index>
90014916:	4603      	mov	r3, r0
90014918:	e018      	b.n	9001494c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
9001491a:	7dfb      	ldrb	r3, [r7, #23]
9001491c:	3301      	adds	r3, #1
9001491e:	75fb      	strb	r3, [r7, #23]
90014920:	7dfb      	ldrb	r3, [r7, #23]
90014922:	2b09      	cmp	r3, #9
90014924:	d9ca      	bls.n	900148bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
90014926:	68ba      	ldr	r2, [r7, #8]
90014928:	69b9      	ldr	r1, [r7, #24]
9001492a:	68f8      	ldr	r0, [r7, #12]
9001492c:	f000 f822 	bl	90014974 <etharp_query>
90014930:	4603      	mov	r3, r0
90014932:	e00b      	b.n	9001494c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
90014934:	68fb      	ldr	r3, [r7, #12]
90014936:	f103 0226 	add.w	r2, r3, #38	; 0x26
9001493a:	f44f 6300 	mov.w	r3, #2048	; 0x800
9001493e:	9300      	str	r3, [sp, #0]
90014940:	69fb      	ldr	r3, [r7, #28]
90014942:	68b9      	ldr	r1, [r7, #8]
90014944:	68f8      	ldr	r0, [r7, #12]
90014946:	f001 fd45 	bl	900163d4 <ethernet_output>
9001494a:	4603      	mov	r3, r0
}
9001494c:	4618      	mov	r0, r3
9001494e:	3720      	adds	r7, #32
90014950:	46bd      	mov	sp, r7
90014952:	bd80      	pop	{r7, pc}
90014954:	9001a904 	.word	0x9001a904
90014958:	9001aa54 	.word	0x9001aa54
9001495c:	9001a97c 	.word	0x9001a97c
90014960:	9001aaa4 	.word	0x9001aaa4
90014964:	9001aa44 	.word	0x9001aa44
90014968:	9001bdd8 	.word	0x9001bdd8
9001496c:	2000d718 	.word	0x2000d718
90014970:	2000d628 	.word	0x2000d628

90014974 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
90014974:	b580      	push	{r7, lr}
90014976:	b08c      	sub	sp, #48	; 0x30
90014978:	af02      	add	r7, sp, #8
9001497a:	60f8      	str	r0, [r7, #12]
9001497c:	60b9      	str	r1, [r7, #8]
9001497e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
90014980:	68fb      	ldr	r3, [r7, #12]
90014982:	3326      	adds	r3, #38	; 0x26
90014984:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
90014986:	23ff      	movs	r3, #255	; 0xff
90014988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
9001498c:	2300      	movs	r3, #0
9001498e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
90014990:	68bb      	ldr	r3, [r7, #8]
90014992:	681b      	ldr	r3, [r3, #0]
90014994:	68f9      	ldr	r1, [r7, #12]
90014996:	4618      	mov	r0, r3
90014998:	f000 fe0e 	bl	900155b8 <ip4_addr_isbroadcast_u32>
9001499c:	4603      	mov	r3, r0
9001499e:	2b00      	cmp	r3, #0
900149a0:	d10c      	bne.n	900149bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
900149a2:	68bb      	ldr	r3, [r7, #8]
900149a4:	681b      	ldr	r3, [r3, #0]
900149a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
900149aa:	2be0      	cmp	r3, #224	; 0xe0
900149ac:	d006      	beq.n	900149bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
900149ae:	68bb      	ldr	r3, [r7, #8]
900149b0:	2b00      	cmp	r3, #0
900149b2:	d003      	beq.n	900149bc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
900149b4:	68bb      	ldr	r3, [r7, #8]
900149b6:	681b      	ldr	r3, [r3, #0]
900149b8:	2b00      	cmp	r3, #0
900149ba:	d102      	bne.n	900149c2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
900149bc:	f06f 030f 	mvn.w	r3, #15
900149c0:	e101      	b.n	90014bc6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
900149c2:	68fa      	ldr	r2, [r7, #12]
900149c4:	2101      	movs	r1, #1
900149c6:	68b8      	ldr	r0, [r7, #8]
900149c8:	f7ff fb60 	bl	9001408c <etharp_find_entry>
900149cc:	4603      	mov	r3, r0
900149ce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
900149d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
900149d4:	2b00      	cmp	r3, #0
900149d6:	da02      	bge.n	900149de <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
900149d8:	8a7b      	ldrh	r3, [r7, #18]
900149da:	b25b      	sxtb	r3, r3
900149dc:	e0f3      	b.n	90014bc6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
900149de:	8a7b      	ldrh	r3, [r7, #18]
900149e0:	2b7e      	cmp	r3, #126	; 0x7e
900149e2:	d906      	bls.n	900149f2 <etharp_query+0x7e>
900149e4:	4b7a      	ldr	r3, [pc, #488]	; (90014bd0 <etharp_query+0x25c>)
900149e6:	f240 32c1 	movw	r2, #961	; 0x3c1
900149ea:	497a      	ldr	r1, [pc, #488]	; (90014bd4 <etharp_query+0x260>)
900149ec:	487a      	ldr	r0, [pc, #488]	; (90014bd8 <etharp_query+0x264>)
900149ee:	f002 f927 	bl	90016c40 <iprintf>
  i = (netif_addr_idx_t)i_err;
900149f2:	8a7b      	ldrh	r3, [r7, #18]
900149f4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
900149f6:	7c7a      	ldrb	r2, [r7, #17]
900149f8:	4978      	ldr	r1, [pc, #480]	; (90014bdc <etharp_query+0x268>)
900149fa:	4613      	mov	r3, r2
900149fc:	005b      	lsls	r3, r3, #1
900149fe:	4413      	add	r3, r2
90014a00:	00db      	lsls	r3, r3, #3
90014a02:	440b      	add	r3, r1
90014a04:	3314      	adds	r3, #20
90014a06:	781b      	ldrb	r3, [r3, #0]
90014a08:	2b00      	cmp	r3, #0
90014a0a:	d115      	bne.n	90014a38 <etharp_query+0xc4>
    is_new_entry = 1;
90014a0c:	2301      	movs	r3, #1
90014a0e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
90014a10:	7c7a      	ldrb	r2, [r7, #17]
90014a12:	4972      	ldr	r1, [pc, #456]	; (90014bdc <etharp_query+0x268>)
90014a14:	4613      	mov	r3, r2
90014a16:	005b      	lsls	r3, r3, #1
90014a18:	4413      	add	r3, r2
90014a1a:	00db      	lsls	r3, r3, #3
90014a1c:	440b      	add	r3, r1
90014a1e:	3314      	adds	r3, #20
90014a20:	2201      	movs	r2, #1
90014a22:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
90014a24:	7c7a      	ldrb	r2, [r7, #17]
90014a26:	496d      	ldr	r1, [pc, #436]	; (90014bdc <etharp_query+0x268>)
90014a28:	4613      	mov	r3, r2
90014a2a:	005b      	lsls	r3, r3, #1
90014a2c:	4413      	add	r3, r2
90014a2e:	00db      	lsls	r3, r3, #3
90014a30:	440b      	add	r3, r1
90014a32:	3308      	adds	r3, #8
90014a34:	68fa      	ldr	r2, [r7, #12]
90014a36:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
90014a38:	7c7a      	ldrb	r2, [r7, #17]
90014a3a:	4968      	ldr	r1, [pc, #416]	; (90014bdc <etharp_query+0x268>)
90014a3c:	4613      	mov	r3, r2
90014a3e:	005b      	lsls	r3, r3, #1
90014a40:	4413      	add	r3, r2
90014a42:	00db      	lsls	r3, r3, #3
90014a44:	440b      	add	r3, r1
90014a46:	3314      	adds	r3, #20
90014a48:	781b      	ldrb	r3, [r3, #0]
90014a4a:	2b01      	cmp	r3, #1
90014a4c:	d011      	beq.n	90014a72 <etharp_query+0xfe>
90014a4e:	7c7a      	ldrb	r2, [r7, #17]
90014a50:	4962      	ldr	r1, [pc, #392]	; (90014bdc <etharp_query+0x268>)
90014a52:	4613      	mov	r3, r2
90014a54:	005b      	lsls	r3, r3, #1
90014a56:	4413      	add	r3, r2
90014a58:	00db      	lsls	r3, r3, #3
90014a5a:	440b      	add	r3, r1
90014a5c:	3314      	adds	r3, #20
90014a5e:	781b      	ldrb	r3, [r3, #0]
90014a60:	2b01      	cmp	r3, #1
90014a62:	d806      	bhi.n	90014a72 <etharp_query+0xfe>
90014a64:	4b5a      	ldr	r3, [pc, #360]	; (90014bd0 <etharp_query+0x25c>)
90014a66:	f240 32cd 	movw	r2, #973	; 0x3cd
90014a6a:	495d      	ldr	r1, [pc, #372]	; (90014be0 <etharp_query+0x26c>)
90014a6c:	485a      	ldr	r0, [pc, #360]	; (90014bd8 <etharp_query+0x264>)
90014a6e:	f002 f8e7 	bl	90016c40 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
90014a72:	6a3b      	ldr	r3, [r7, #32]
90014a74:	2b00      	cmp	r3, #0
90014a76:	d102      	bne.n	90014a7e <etharp_query+0x10a>
90014a78:	687b      	ldr	r3, [r7, #4]
90014a7a:	2b00      	cmp	r3, #0
90014a7c:	d10c      	bne.n	90014a98 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
90014a7e:	68b9      	ldr	r1, [r7, #8]
90014a80:	68f8      	ldr	r0, [r7, #12]
90014a82:	f000 f963 	bl	90014d4c <etharp_request>
90014a86:	4603      	mov	r3, r0
90014a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
90014a8c:	687b      	ldr	r3, [r7, #4]
90014a8e:	2b00      	cmp	r3, #0
90014a90:	d102      	bne.n	90014a98 <etharp_query+0x124>
      return result;
90014a92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
90014a96:	e096      	b.n	90014bc6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
90014a98:	687b      	ldr	r3, [r7, #4]
90014a9a:	2b00      	cmp	r3, #0
90014a9c:	d106      	bne.n	90014aac <etharp_query+0x138>
90014a9e:	4b4c      	ldr	r3, [pc, #304]	; (90014bd0 <etharp_query+0x25c>)
90014aa0:	f240 32e1 	movw	r2, #993	; 0x3e1
90014aa4:	494f      	ldr	r1, [pc, #316]	; (90014be4 <etharp_query+0x270>)
90014aa6:	484c      	ldr	r0, [pc, #304]	; (90014bd8 <etharp_query+0x264>)
90014aa8:	f002 f8ca 	bl	90016c40 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
90014aac:	7c7a      	ldrb	r2, [r7, #17]
90014aae:	494b      	ldr	r1, [pc, #300]	; (90014bdc <etharp_query+0x268>)
90014ab0:	4613      	mov	r3, r2
90014ab2:	005b      	lsls	r3, r3, #1
90014ab4:	4413      	add	r3, r2
90014ab6:	00db      	lsls	r3, r3, #3
90014ab8:	440b      	add	r3, r1
90014aba:	3314      	adds	r3, #20
90014abc:	781b      	ldrb	r3, [r3, #0]
90014abe:	2b01      	cmp	r3, #1
90014ac0:	d917      	bls.n	90014af2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
90014ac2:	4a49      	ldr	r2, [pc, #292]	; (90014be8 <etharp_query+0x274>)
90014ac4:	7c7b      	ldrb	r3, [r7, #17]
90014ac6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
90014ac8:	7c7a      	ldrb	r2, [r7, #17]
90014aca:	4613      	mov	r3, r2
90014acc:	005b      	lsls	r3, r3, #1
90014ace:	4413      	add	r3, r2
90014ad0:	00db      	lsls	r3, r3, #3
90014ad2:	3308      	adds	r3, #8
90014ad4:	4a41      	ldr	r2, [pc, #260]	; (90014bdc <etharp_query+0x268>)
90014ad6:	4413      	add	r3, r2
90014ad8:	3304      	adds	r3, #4
90014ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
90014ade:	9200      	str	r2, [sp, #0]
90014ae0:	697a      	ldr	r2, [r7, #20]
90014ae2:	6879      	ldr	r1, [r7, #4]
90014ae4:	68f8      	ldr	r0, [r7, #12]
90014ae6:	f001 fc75 	bl	900163d4 <ethernet_output>
90014aea:	4603      	mov	r3, r0
90014aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
90014af0:	e067      	b.n	90014bc2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
90014af2:	7c7a      	ldrb	r2, [r7, #17]
90014af4:	4939      	ldr	r1, [pc, #228]	; (90014bdc <etharp_query+0x268>)
90014af6:	4613      	mov	r3, r2
90014af8:	005b      	lsls	r3, r3, #1
90014afa:	4413      	add	r3, r2
90014afc:	00db      	lsls	r3, r3, #3
90014afe:	440b      	add	r3, r1
90014b00:	3314      	adds	r3, #20
90014b02:	781b      	ldrb	r3, [r3, #0]
90014b04:	2b01      	cmp	r3, #1
90014b06:	d15c      	bne.n	90014bc2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
90014b08:	2300      	movs	r3, #0
90014b0a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
90014b0c:	687b      	ldr	r3, [r7, #4]
90014b0e:	61fb      	str	r3, [r7, #28]
    while (p) {
90014b10:	e01c      	b.n	90014b4c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
90014b12:	69fb      	ldr	r3, [r7, #28]
90014b14:	895a      	ldrh	r2, [r3, #10]
90014b16:	69fb      	ldr	r3, [r7, #28]
90014b18:	891b      	ldrh	r3, [r3, #8]
90014b1a:	429a      	cmp	r2, r3
90014b1c:	d10a      	bne.n	90014b34 <etharp_query+0x1c0>
90014b1e:	69fb      	ldr	r3, [r7, #28]
90014b20:	681b      	ldr	r3, [r3, #0]
90014b22:	2b00      	cmp	r3, #0
90014b24:	d006      	beq.n	90014b34 <etharp_query+0x1c0>
90014b26:	4b2a      	ldr	r3, [pc, #168]	; (90014bd0 <etharp_query+0x25c>)
90014b28:	f240 32f1 	movw	r2, #1009	; 0x3f1
90014b2c:	492f      	ldr	r1, [pc, #188]	; (90014bec <etharp_query+0x278>)
90014b2e:	482a      	ldr	r0, [pc, #168]	; (90014bd8 <etharp_query+0x264>)
90014b30:	f002 f886 	bl	90016c40 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
90014b34:	69fb      	ldr	r3, [r7, #28]
90014b36:	7b1b      	ldrb	r3, [r3, #12]
90014b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
90014b3c:	2b00      	cmp	r3, #0
90014b3e:	d002      	beq.n	90014b46 <etharp_query+0x1d2>
        copy_needed = 1;
90014b40:	2301      	movs	r3, #1
90014b42:	61bb      	str	r3, [r7, #24]
        break;
90014b44:	e005      	b.n	90014b52 <etharp_query+0x1de>
      }
      p = p->next;
90014b46:	69fb      	ldr	r3, [r7, #28]
90014b48:	681b      	ldr	r3, [r3, #0]
90014b4a:	61fb      	str	r3, [r7, #28]
    while (p) {
90014b4c:	69fb      	ldr	r3, [r7, #28]
90014b4e:	2b00      	cmp	r3, #0
90014b50:	d1df      	bne.n	90014b12 <etharp_query+0x19e>
    }
    if (copy_needed) {
90014b52:	69bb      	ldr	r3, [r7, #24]
90014b54:	2b00      	cmp	r3, #0
90014b56:	d007      	beq.n	90014b68 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
90014b58:	687a      	ldr	r2, [r7, #4]
90014b5a:	f44f 7120 	mov.w	r1, #640	; 0x280
90014b5e:	200e      	movs	r0, #14
90014b60:	f7f8 fc88 	bl	9000d474 <pbuf_clone>
90014b64:	61f8      	str	r0, [r7, #28]
90014b66:	e004      	b.n	90014b72 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
90014b68:	687b      	ldr	r3, [r7, #4]
90014b6a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
90014b6c:	69f8      	ldr	r0, [r7, #28]
90014b6e:	f7f8 fabf 	bl	9000d0f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
90014b72:	69fb      	ldr	r3, [r7, #28]
90014b74:	2b00      	cmp	r3, #0
90014b76:	d021      	beq.n	90014bbc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
90014b78:	7c7a      	ldrb	r2, [r7, #17]
90014b7a:	4918      	ldr	r1, [pc, #96]	; (90014bdc <etharp_query+0x268>)
90014b7c:	4613      	mov	r3, r2
90014b7e:	005b      	lsls	r3, r3, #1
90014b80:	4413      	add	r3, r2
90014b82:	00db      	lsls	r3, r3, #3
90014b84:	440b      	add	r3, r1
90014b86:	681b      	ldr	r3, [r3, #0]
90014b88:	2b00      	cmp	r3, #0
90014b8a:	d00a      	beq.n	90014ba2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
90014b8c:	7c7a      	ldrb	r2, [r7, #17]
90014b8e:	4913      	ldr	r1, [pc, #76]	; (90014bdc <etharp_query+0x268>)
90014b90:	4613      	mov	r3, r2
90014b92:	005b      	lsls	r3, r3, #1
90014b94:	4413      	add	r3, r2
90014b96:	00db      	lsls	r3, r3, #3
90014b98:	440b      	add	r3, r1
90014b9a:	681b      	ldr	r3, [r3, #0]
90014b9c:	4618      	mov	r0, r3
90014b9e:	f7f8 fa01 	bl	9000cfa4 <pbuf_free>
      }
      arp_table[i].q = p;
90014ba2:	7c7a      	ldrb	r2, [r7, #17]
90014ba4:	490d      	ldr	r1, [pc, #52]	; (90014bdc <etharp_query+0x268>)
90014ba6:	4613      	mov	r3, r2
90014ba8:	005b      	lsls	r3, r3, #1
90014baa:	4413      	add	r3, r2
90014bac:	00db      	lsls	r3, r3, #3
90014bae:	440b      	add	r3, r1
90014bb0:	69fa      	ldr	r2, [r7, #28]
90014bb2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
90014bb4:	2300      	movs	r3, #0
90014bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
90014bba:	e002      	b.n	90014bc2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
90014bbc:	23ff      	movs	r3, #255	; 0xff
90014bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
90014bc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
90014bc6:	4618      	mov	r0, r3
90014bc8:	3728      	adds	r7, #40	; 0x28
90014bca:	46bd      	mov	sp, r7
90014bcc:	bd80      	pop	{r7, pc}
90014bce:	bf00      	nop
90014bd0:	9001a904 	.word	0x9001a904
90014bd4:	9001aab0 	.word	0x9001aab0
90014bd8:	9001a97c 	.word	0x9001a97c
90014bdc:	2000d628 	.word	0x2000d628
90014be0:	9001aac0 	.word	0x9001aac0
90014be4:	9001aaa4 	.word	0x9001aaa4
90014be8:	2000d718 	.word	0x2000d718
90014bec:	9001aae8 	.word	0x9001aae8

90014bf0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
90014bf0:	b580      	push	{r7, lr}
90014bf2:	b08a      	sub	sp, #40	; 0x28
90014bf4:	af02      	add	r7, sp, #8
90014bf6:	60f8      	str	r0, [r7, #12]
90014bf8:	60b9      	str	r1, [r7, #8]
90014bfa:	607a      	str	r2, [r7, #4]
90014bfc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
90014bfe:	2300      	movs	r3, #0
90014c00:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
90014c02:	68fb      	ldr	r3, [r7, #12]
90014c04:	2b00      	cmp	r3, #0
90014c06:	d106      	bne.n	90014c16 <etharp_raw+0x26>
90014c08:	4b3a      	ldr	r3, [pc, #232]	; (90014cf4 <etharp_raw+0x104>)
90014c0a:	f240 4257 	movw	r2, #1111	; 0x457
90014c0e:	493a      	ldr	r1, [pc, #232]	; (90014cf8 <etharp_raw+0x108>)
90014c10:	483a      	ldr	r0, [pc, #232]	; (90014cfc <etharp_raw+0x10c>)
90014c12:	f002 f815 	bl	90016c40 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
90014c16:	f44f 7220 	mov.w	r2, #640	; 0x280
90014c1a:	211c      	movs	r1, #28
90014c1c:	200e      	movs	r0, #14
90014c1e:	f7f7 fedd 	bl	9000c9dc <pbuf_alloc>
90014c22:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
90014c24:	69bb      	ldr	r3, [r7, #24]
90014c26:	2b00      	cmp	r3, #0
90014c28:	d102      	bne.n	90014c30 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
90014c2a:	f04f 33ff 	mov.w	r3, #4294967295
90014c2e:	e05d      	b.n	90014cec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
90014c30:	69bb      	ldr	r3, [r7, #24]
90014c32:	895b      	ldrh	r3, [r3, #10]
90014c34:	2b1b      	cmp	r3, #27
90014c36:	d806      	bhi.n	90014c46 <etharp_raw+0x56>
90014c38:	4b2e      	ldr	r3, [pc, #184]	; (90014cf4 <etharp_raw+0x104>)
90014c3a:	f240 4262 	movw	r2, #1122	; 0x462
90014c3e:	4930      	ldr	r1, [pc, #192]	; (90014d00 <etharp_raw+0x110>)
90014c40:	482e      	ldr	r0, [pc, #184]	; (90014cfc <etharp_raw+0x10c>)
90014c42:	f001 fffd 	bl	90016c40 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
90014c46:	69bb      	ldr	r3, [r7, #24]
90014c48:	685b      	ldr	r3, [r3, #4]
90014c4a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
90014c4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
90014c4e:	4618      	mov	r0, r3
90014c50:	f7f6 fdfc 	bl	9000b84c <lwip_htons>
90014c54:	4603      	mov	r3, r0
90014c56:	461a      	mov	r2, r3
90014c58:	697b      	ldr	r3, [r7, #20]
90014c5a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
90014c5c:	68fb      	ldr	r3, [r7, #12]
90014c5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90014c62:	2b06      	cmp	r3, #6
90014c64:	d006      	beq.n	90014c74 <etharp_raw+0x84>
90014c66:	4b23      	ldr	r3, [pc, #140]	; (90014cf4 <etharp_raw+0x104>)
90014c68:	f240 4269 	movw	r2, #1129	; 0x469
90014c6c:	4925      	ldr	r1, [pc, #148]	; (90014d04 <etharp_raw+0x114>)
90014c6e:	4823      	ldr	r0, [pc, #140]	; (90014cfc <etharp_raw+0x10c>)
90014c70:	f001 ffe6 	bl	90016c40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
90014c74:	697b      	ldr	r3, [r7, #20]
90014c76:	3308      	adds	r3, #8
90014c78:	2206      	movs	r2, #6
90014c7a:	6839      	ldr	r1, [r7, #0]
90014c7c:	4618      	mov	r0, r3
90014c7e:	f001 fee9 	bl	90016a54 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
90014c82:	697b      	ldr	r3, [r7, #20]
90014c84:	3312      	adds	r3, #18
90014c86:	2206      	movs	r2, #6
90014c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
90014c8a:	4618      	mov	r0, r3
90014c8c:	f001 fee2 	bl	90016a54 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
90014c90:	697b      	ldr	r3, [r7, #20]
90014c92:	330e      	adds	r3, #14
90014c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
90014c96:	6812      	ldr	r2, [r2, #0]
90014c98:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
90014c9a:	697b      	ldr	r3, [r7, #20]
90014c9c:	3318      	adds	r3, #24
90014c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90014ca0:	6812      	ldr	r2, [r2, #0]
90014ca2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
90014ca4:	697b      	ldr	r3, [r7, #20]
90014ca6:	2200      	movs	r2, #0
90014ca8:	701a      	strb	r2, [r3, #0]
90014caa:	2200      	movs	r2, #0
90014cac:	f042 0201 	orr.w	r2, r2, #1
90014cb0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
90014cb2:	697b      	ldr	r3, [r7, #20]
90014cb4:	2200      	movs	r2, #0
90014cb6:	f042 0208 	orr.w	r2, r2, #8
90014cba:	709a      	strb	r2, [r3, #2]
90014cbc:	2200      	movs	r2, #0
90014cbe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
90014cc0:	697b      	ldr	r3, [r7, #20]
90014cc2:	2206      	movs	r2, #6
90014cc4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
90014cc6:	697b      	ldr	r3, [r7, #20]
90014cc8:	2204      	movs	r2, #4
90014cca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
90014ccc:	f640 0306 	movw	r3, #2054	; 0x806
90014cd0:	9300      	str	r3, [sp, #0]
90014cd2:	687b      	ldr	r3, [r7, #4]
90014cd4:	68ba      	ldr	r2, [r7, #8]
90014cd6:	69b9      	ldr	r1, [r7, #24]
90014cd8:	68f8      	ldr	r0, [r7, #12]
90014cda:	f001 fb7b 	bl	900163d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
90014cde:	69b8      	ldr	r0, [r7, #24]
90014ce0:	f7f8 f960 	bl	9000cfa4 <pbuf_free>
  p = NULL;
90014ce4:	2300      	movs	r3, #0
90014ce6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
90014ce8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
90014cec:	4618      	mov	r0, r3
90014cee:	3720      	adds	r7, #32
90014cf0:	46bd      	mov	sp, r7
90014cf2:	bd80      	pop	{r7, pc}
90014cf4:	9001a904 	.word	0x9001a904
90014cf8:	9001aa54 	.word	0x9001aa54
90014cfc:	9001a97c 	.word	0x9001a97c
90014d00:	9001ab04 	.word	0x9001ab04
90014d04:	9001ab38 	.word	0x9001ab38

90014d08 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
90014d08:	b580      	push	{r7, lr}
90014d0a:	b088      	sub	sp, #32
90014d0c:	af04      	add	r7, sp, #16
90014d0e:	60f8      	str	r0, [r7, #12]
90014d10:	60b9      	str	r1, [r7, #8]
90014d12:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
90014d14:	68fb      	ldr	r3, [r7, #12]
90014d16:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
90014d1a:	68fb      	ldr	r3, [r7, #12]
90014d1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
90014d20:	68fb      	ldr	r3, [r7, #12]
90014d22:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
90014d24:	2201      	movs	r2, #1
90014d26:	9203      	str	r2, [sp, #12]
90014d28:	68ba      	ldr	r2, [r7, #8]
90014d2a:	9202      	str	r2, [sp, #8]
90014d2c:	4a06      	ldr	r2, [pc, #24]	; (90014d48 <etharp_request_dst+0x40>)
90014d2e:	9201      	str	r2, [sp, #4]
90014d30:	9300      	str	r3, [sp, #0]
90014d32:	4603      	mov	r3, r0
90014d34:	687a      	ldr	r2, [r7, #4]
90014d36:	68f8      	ldr	r0, [r7, #12]
90014d38:	f7ff ff5a 	bl	90014bf0 <etharp_raw>
90014d3c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
90014d3e:	4618      	mov	r0, r3
90014d40:	3710      	adds	r7, #16
90014d42:	46bd      	mov	sp, r7
90014d44:	bd80      	pop	{r7, pc}
90014d46:	bf00      	nop
90014d48:	9001bde0 	.word	0x9001bde0

90014d4c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
90014d4c:	b580      	push	{r7, lr}
90014d4e:	b082      	sub	sp, #8
90014d50:	af00      	add	r7, sp, #0
90014d52:	6078      	str	r0, [r7, #4]
90014d54:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
90014d56:	4a05      	ldr	r2, [pc, #20]	; (90014d6c <etharp_request+0x20>)
90014d58:	6839      	ldr	r1, [r7, #0]
90014d5a:	6878      	ldr	r0, [r7, #4]
90014d5c:	f7ff ffd4 	bl	90014d08 <etharp_request_dst>
90014d60:	4603      	mov	r3, r0
}
90014d62:	4618      	mov	r0, r3
90014d64:	3708      	adds	r7, #8
90014d66:	46bd      	mov	sp, r7
90014d68:	bd80      	pop	{r7, pc}
90014d6a:	bf00      	nop
90014d6c:	9001bdd8 	.word	0x9001bdd8

90014d70 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
90014d70:	b580      	push	{r7, lr}
90014d72:	b08e      	sub	sp, #56	; 0x38
90014d74:	af04      	add	r7, sp, #16
90014d76:	6078      	str	r0, [r7, #4]
90014d78:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
90014d7a:	4b79      	ldr	r3, [pc, #484]	; (90014f60 <icmp_input+0x1f0>)
90014d7c:	689b      	ldr	r3, [r3, #8]
90014d7e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
90014d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90014d82:	781b      	ldrb	r3, [r3, #0]
90014d84:	f003 030f 	and.w	r3, r3, #15
90014d88:	b2db      	uxtb	r3, r3
90014d8a:	009b      	lsls	r3, r3, #2
90014d8c:	b2db      	uxtb	r3, r3
90014d8e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
90014d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90014d92:	2b13      	cmp	r3, #19
90014d94:	f240 80cd 	bls.w	90014f32 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
90014d98:	687b      	ldr	r3, [r7, #4]
90014d9a:	895b      	ldrh	r3, [r3, #10]
90014d9c:	2b03      	cmp	r3, #3
90014d9e:	f240 80ca 	bls.w	90014f36 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
90014da2:	687b      	ldr	r3, [r7, #4]
90014da4:	685b      	ldr	r3, [r3, #4]
90014da6:	781b      	ldrb	r3, [r3, #0]
90014da8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
90014dac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
90014db0:	2b00      	cmp	r3, #0
90014db2:	f000 80b7 	beq.w	90014f24 <icmp_input+0x1b4>
90014db6:	2b08      	cmp	r3, #8
90014db8:	f040 80b7 	bne.w	90014f2a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
90014dbc:	4b69      	ldr	r3, [pc, #420]	; (90014f64 <icmp_input+0x1f4>)
90014dbe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
90014dc0:	4b67      	ldr	r3, [pc, #412]	; (90014f60 <icmp_input+0x1f0>)
90014dc2:	695b      	ldr	r3, [r3, #20]
90014dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90014dc8:	2be0      	cmp	r3, #224	; 0xe0
90014dca:	f000 80bb 	beq.w	90014f44 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
90014dce:	4b64      	ldr	r3, [pc, #400]	; (90014f60 <icmp_input+0x1f0>)
90014dd0:	695b      	ldr	r3, [r3, #20]
90014dd2:	4a63      	ldr	r2, [pc, #396]	; (90014f60 <icmp_input+0x1f0>)
90014dd4:	6812      	ldr	r2, [r2, #0]
90014dd6:	4611      	mov	r1, r2
90014dd8:	4618      	mov	r0, r3
90014dda:	f000 fbed 	bl	900155b8 <ip4_addr_isbroadcast_u32>
90014dde:	4603      	mov	r3, r0
90014de0:	2b00      	cmp	r3, #0
90014de2:	f040 80b1 	bne.w	90014f48 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
90014de6:	687b      	ldr	r3, [r7, #4]
90014de8:	891b      	ldrh	r3, [r3, #8]
90014dea:	2b07      	cmp	r3, #7
90014dec:	f240 80a5 	bls.w	90014f3a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
90014df0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90014df2:	330e      	adds	r3, #14
90014df4:	4619      	mov	r1, r3
90014df6:	6878      	ldr	r0, [r7, #4]
90014df8:	f7f8 f83e 	bl	9000ce78 <pbuf_add_header>
90014dfc:	4603      	mov	r3, r0
90014dfe:	2b00      	cmp	r3, #0
90014e00:	d04b      	beq.n	90014e9a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
90014e02:	687b      	ldr	r3, [r7, #4]
90014e04:	891a      	ldrh	r2, [r3, #8]
90014e06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90014e08:	4413      	add	r3, r2
90014e0a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
90014e0c:	687b      	ldr	r3, [r7, #4]
90014e0e:	891b      	ldrh	r3, [r3, #8]
90014e10:	8b7a      	ldrh	r2, [r7, #26]
90014e12:	429a      	cmp	r2, r3
90014e14:	f0c0 809a 	bcc.w	90014f4c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
90014e18:	8b7b      	ldrh	r3, [r7, #26]
90014e1a:	f44f 7220 	mov.w	r2, #640	; 0x280
90014e1e:	4619      	mov	r1, r3
90014e20:	200e      	movs	r0, #14
90014e22:	f7f7 fddb 	bl	9000c9dc <pbuf_alloc>
90014e26:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
90014e28:	697b      	ldr	r3, [r7, #20]
90014e2a:	2b00      	cmp	r3, #0
90014e2c:	f000 8090 	beq.w	90014f50 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
90014e30:	697b      	ldr	r3, [r7, #20]
90014e32:	895b      	ldrh	r3, [r3, #10]
90014e34:	461a      	mov	r2, r3
90014e36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90014e38:	3308      	adds	r3, #8
90014e3a:	429a      	cmp	r2, r3
90014e3c:	d203      	bcs.n	90014e46 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
90014e3e:	6978      	ldr	r0, [r7, #20]
90014e40:	f7f8 f8b0 	bl	9000cfa4 <pbuf_free>
          goto icmperr;
90014e44:	e085      	b.n	90014f52 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
90014e46:	697b      	ldr	r3, [r7, #20]
90014e48:	685b      	ldr	r3, [r3, #4]
90014e4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
90014e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
90014e4e:	4618      	mov	r0, r3
90014e50:	f001 fe00 	bl	90016a54 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
90014e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90014e56:	4619      	mov	r1, r3
90014e58:	6978      	ldr	r0, [r7, #20]
90014e5a:	f7f8 f81d 	bl	9000ce98 <pbuf_remove_header>
90014e5e:	4603      	mov	r3, r0
90014e60:	2b00      	cmp	r3, #0
90014e62:	d009      	beq.n	90014e78 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
90014e64:	4b40      	ldr	r3, [pc, #256]	; (90014f68 <icmp_input+0x1f8>)
90014e66:	22b6      	movs	r2, #182	; 0xb6
90014e68:	4940      	ldr	r1, [pc, #256]	; (90014f6c <icmp_input+0x1fc>)
90014e6a:	4841      	ldr	r0, [pc, #260]	; (90014f70 <icmp_input+0x200>)
90014e6c:	f001 fee8 	bl	90016c40 <iprintf>
          pbuf_free(r);
90014e70:	6978      	ldr	r0, [r7, #20]
90014e72:	f7f8 f897 	bl	9000cfa4 <pbuf_free>
          goto icmperr;
90014e76:	e06c      	b.n	90014f52 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
90014e78:	6879      	ldr	r1, [r7, #4]
90014e7a:	6978      	ldr	r0, [r7, #20]
90014e7c:	f7f8 f9b6 	bl	9000d1ec <pbuf_copy>
90014e80:	4603      	mov	r3, r0
90014e82:	2b00      	cmp	r3, #0
90014e84:	d003      	beq.n	90014e8e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
90014e86:	6978      	ldr	r0, [r7, #20]
90014e88:	f7f8 f88c 	bl	9000cfa4 <pbuf_free>
          goto icmperr;
90014e8c:	e061      	b.n	90014f52 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
90014e8e:	6878      	ldr	r0, [r7, #4]
90014e90:	f7f8 f888 	bl	9000cfa4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
90014e94:	697b      	ldr	r3, [r7, #20]
90014e96:	607b      	str	r3, [r7, #4]
90014e98:	e00f      	b.n	90014eba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
90014e9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90014e9c:	330e      	adds	r3, #14
90014e9e:	4619      	mov	r1, r3
90014ea0:	6878      	ldr	r0, [r7, #4]
90014ea2:	f7f7 fff9 	bl	9000ce98 <pbuf_remove_header>
90014ea6:	4603      	mov	r3, r0
90014ea8:	2b00      	cmp	r3, #0
90014eaa:	d006      	beq.n	90014eba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
90014eac:	4b2e      	ldr	r3, [pc, #184]	; (90014f68 <icmp_input+0x1f8>)
90014eae:	22c7      	movs	r2, #199	; 0xc7
90014eb0:	4930      	ldr	r1, [pc, #192]	; (90014f74 <icmp_input+0x204>)
90014eb2:	482f      	ldr	r0, [pc, #188]	; (90014f70 <icmp_input+0x200>)
90014eb4:	f001 fec4 	bl	90016c40 <iprintf>
          goto icmperr;
90014eb8:	e04b      	b.n	90014f52 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
90014eba:	687b      	ldr	r3, [r7, #4]
90014ebc:	685b      	ldr	r3, [r3, #4]
90014ebe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
90014ec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90014ec2:	4619      	mov	r1, r3
90014ec4:	6878      	ldr	r0, [r7, #4]
90014ec6:	f7f7 ffd7 	bl	9000ce78 <pbuf_add_header>
90014eca:	4603      	mov	r3, r0
90014ecc:	2b00      	cmp	r3, #0
90014ece:	d12b      	bne.n	90014f28 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
90014ed0:	687b      	ldr	r3, [r7, #4]
90014ed2:	685b      	ldr	r3, [r3, #4]
90014ed4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
90014ed6:	69fb      	ldr	r3, [r7, #28]
90014ed8:	681a      	ldr	r2, [r3, #0]
90014eda:	68fb      	ldr	r3, [r7, #12]
90014edc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
90014ede:	4b20      	ldr	r3, [pc, #128]	; (90014f60 <icmp_input+0x1f0>)
90014ee0:	691a      	ldr	r2, [r3, #16]
90014ee2:	68fb      	ldr	r3, [r7, #12]
90014ee4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
90014ee6:	693b      	ldr	r3, [r7, #16]
90014ee8:	2200      	movs	r2, #0
90014eea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
90014eec:	693b      	ldr	r3, [r7, #16]
90014eee:	2200      	movs	r2, #0
90014ef0:	709a      	strb	r2, [r3, #2]
90014ef2:	2200      	movs	r2, #0
90014ef4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
90014ef6:	68fb      	ldr	r3, [r7, #12]
90014ef8:	22ff      	movs	r2, #255	; 0xff
90014efa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
90014efc:	68fb      	ldr	r3, [r7, #12]
90014efe:	2200      	movs	r2, #0
90014f00:	729a      	strb	r2, [r3, #10]
90014f02:	2200      	movs	r2, #0
90014f04:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
90014f06:	683b      	ldr	r3, [r7, #0]
90014f08:	9302      	str	r3, [sp, #8]
90014f0a:	2301      	movs	r3, #1
90014f0c:	9301      	str	r3, [sp, #4]
90014f0e:	2300      	movs	r3, #0
90014f10:	9300      	str	r3, [sp, #0]
90014f12:	23ff      	movs	r3, #255	; 0xff
90014f14:	2200      	movs	r2, #0
90014f16:	69f9      	ldr	r1, [r7, #28]
90014f18:	6878      	ldr	r0, [r7, #4]
90014f1a:	f000 fa75 	bl	90015408 <ip4_output_if>
90014f1e:	4603      	mov	r3, r0
90014f20:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
90014f22:	e001      	b.n	90014f28 <icmp_input+0x1b8>
      break;
90014f24:	bf00      	nop
90014f26:	e000      	b.n	90014f2a <icmp_input+0x1ba>
      break;
90014f28:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
90014f2a:	6878      	ldr	r0, [r7, #4]
90014f2c:	f7f8 f83a 	bl	9000cfa4 <pbuf_free>
  return;
90014f30:	e013      	b.n	90014f5a <icmp_input+0x1ea>
    goto lenerr;
90014f32:	bf00      	nop
90014f34:	e002      	b.n	90014f3c <icmp_input+0x1cc>
    goto lenerr;
90014f36:	bf00      	nop
90014f38:	e000      	b.n	90014f3c <icmp_input+0x1cc>
        goto lenerr;
90014f3a:	bf00      	nop
lenerr:
  pbuf_free(p);
90014f3c:	6878      	ldr	r0, [r7, #4]
90014f3e:	f7f8 f831 	bl	9000cfa4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
90014f42:	e00a      	b.n	90014f5a <icmp_input+0x1ea>
        goto icmperr;
90014f44:	bf00      	nop
90014f46:	e004      	b.n	90014f52 <icmp_input+0x1e2>
        goto icmperr;
90014f48:	bf00      	nop
90014f4a:	e002      	b.n	90014f52 <icmp_input+0x1e2>
          goto icmperr;
90014f4c:	bf00      	nop
90014f4e:	e000      	b.n	90014f52 <icmp_input+0x1e2>
          goto icmperr;
90014f50:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
90014f52:	6878      	ldr	r0, [r7, #4]
90014f54:	f7f8 f826 	bl	9000cfa4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
90014f58:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
90014f5a:	3728      	adds	r7, #40	; 0x28
90014f5c:	46bd      	mov	sp, r7
90014f5e:	bd80      	pop	{r7, pc}
90014f60:	20007cb4 	.word	0x20007cb4
90014f64:	20007cc8 	.word	0x20007cc8
90014f68:	9001ab7c 	.word	0x9001ab7c
90014f6c:	9001abb4 	.word	0x9001abb4
90014f70:	9001abec 	.word	0x9001abec
90014f74:	9001ac14 	.word	0x9001ac14

90014f78 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
90014f78:	b580      	push	{r7, lr}
90014f7a:	b082      	sub	sp, #8
90014f7c:	af00      	add	r7, sp, #0
90014f7e:	6078      	str	r0, [r7, #4]
90014f80:	460b      	mov	r3, r1
90014f82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
90014f84:	78fb      	ldrb	r3, [r7, #3]
90014f86:	461a      	mov	r2, r3
90014f88:	2103      	movs	r1, #3
90014f8a:	6878      	ldr	r0, [r7, #4]
90014f8c:	f000 f814 	bl	90014fb8 <icmp_send_response>
}
90014f90:	bf00      	nop
90014f92:	3708      	adds	r7, #8
90014f94:	46bd      	mov	sp, r7
90014f96:	bd80      	pop	{r7, pc}

90014f98 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
90014f98:	b580      	push	{r7, lr}
90014f9a:	b082      	sub	sp, #8
90014f9c:	af00      	add	r7, sp, #0
90014f9e:	6078      	str	r0, [r7, #4]
90014fa0:	460b      	mov	r3, r1
90014fa2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
90014fa4:	78fb      	ldrb	r3, [r7, #3]
90014fa6:	461a      	mov	r2, r3
90014fa8:	210b      	movs	r1, #11
90014faa:	6878      	ldr	r0, [r7, #4]
90014fac:	f000 f804 	bl	90014fb8 <icmp_send_response>
}
90014fb0:	bf00      	nop
90014fb2:	3708      	adds	r7, #8
90014fb4:	46bd      	mov	sp, r7
90014fb6:	bd80      	pop	{r7, pc}

90014fb8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
90014fb8:	b580      	push	{r7, lr}
90014fba:	b08c      	sub	sp, #48	; 0x30
90014fbc:	af04      	add	r7, sp, #16
90014fbe:	6078      	str	r0, [r7, #4]
90014fc0:	460b      	mov	r3, r1
90014fc2:	70fb      	strb	r3, [r7, #3]
90014fc4:	4613      	mov	r3, r2
90014fc6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
90014fc8:	f44f 7220 	mov.w	r2, #640	; 0x280
90014fcc:	2124      	movs	r1, #36	; 0x24
90014fce:	2022      	movs	r0, #34	; 0x22
90014fd0:	f7f7 fd04 	bl	9000c9dc <pbuf_alloc>
90014fd4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
90014fd6:	69fb      	ldr	r3, [r7, #28]
90014fd8:	2b00      	cmp	r3, #0
90014fda:	d04c      	beq.n	90015076 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
90014fdc:	69fb      	ldr	r3, [r7, #28]
90014fde:	895b      	ldrh	r3, [r3, #10]
90014fe0:	2b23      	cmp	r3, #35	; 0x23
90014fe2:	d806      	bhi.n	90014ff2 <icmp_send_response+0x3a>
90014fe4:	4b26      	ldr	r3, [pc, #152]	; (90015080 <icmp_send_response+0xc8>)
90014fe6:	f44f 72b4 	mov.w	r2, #360	; 0x168
90014fea:	4926      	ldr	r1, [pc, #152]	; (90015084 <icmp_send_response+0xcc>)
90014fec:	4826      	ldr	r0, [pc, #152]	; (90015088 <icmp_send_response+0xd0>)
90014fee:	f001 fe27 	bl	90016c40 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
90014ff2:	687b      	ldr	r3, [r7, #4]
90014ff4:	685b      	ldr	r3, [r3, #4]
90014ff6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
90014ff8:	69fb      	ldr	r3, [r7, #28]
90014ffa:	685b      	ldr	r3, [r3, #4]
90014ffc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
90014ffe:	697b      	ldr	r3, [r7, #20]
90015000:	78fa      	ldrb	r2, [r7, #3]
90015002:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
90015004:	697b      	ldr	r3, [r7, #20]
90015006:	78ba      	ldrb	r2, [r7, #2]
90015008:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
9001500a:	697b      	ldr	r3, [r7, #20]
9001500c:	2200      	movs	r2, #0
9001500e:	711a      	strb	r2, [r3, #4]
90015010:	2200      	movs	r2, #0
90015012:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
90015014:	697b      	ldr	r3, [r7, #20]
90015016:	2200      	movs	r2, #0
90015018:	719a      	strb	r2, [r3, #6]
9001501a:	2200      	movs	r2, #0
9001501c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
9001501e:	69fb      	ldr	r3, [r7, #28]
90015020:	685b      	ldr	r3, [r3, #4]
90015022:	f103 0008 	add.w	r0, r3, #8
90015026:	687b      	ldr	r3, [r7, #4]
90015028:	685b      	ldr	r3, [r3, #4]
9001502a:	221c      	movs	r2, #28
9001502c:	4619      	mov	r1, r3
9001502e:	f001 fd11 	bl	90016a54 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
90015032:	69bb      	ldr	r3, [r7, #24]
90015034:	68db      	ldr	r3, [r3, #12]
90015036:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
90015038:	f107 030c 	add.w	r3, r7, #12
9001503c:	4618      	mov	r0, r3
9001503e:	f000 f825 	bl	9001508c <ip4_route>
90015042:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
90015044:	693b      	ldr	r3, [r7, #16]
90015046:	2b00      	cmp	r3, #0
90015048:	d011      	beq.n	9001506e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
9001504a:	697b      	ldr	r3, [r7, #20]
9001504c:	2200      	movs	r2, #0
9001504e:	709a      	strb	r2, [r3, #2]
90015050:	2200      	movs	r2, #0
90015052:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
90015054:	f107 020c 	add.w	r2, r7, #12
90015058:	693b      	ldr	r3, [r7, #16]
9001505a:	9302      	str	r3, [sp, #8]
9001505c:	2301      	movs	r3, #1
9001505e:	9301      	str	r3, [sp, #4]
90015060:	2300      	movs	r3, #0
90015062:	9300      	str	r3, [sp, #0]
90015064:	23ff      	movs	r3, #255	; 0xff
90015066:	2100      	movs	r1, #0
90015068:	69f8      	ldr	r0, [r7, #28]
9001506a:	f000 f9cd 	bl	90015408 <ip4_output_if>
  }
  pbuf_free(q);
9001506e:	69f8      	ldr	r0, [r7, #28]
90015070:	f7f7 ff98 	bl	9000cfa4 <pbuf_free>
90015074:	e000      	b.n	90015078 <icmp_send_response+0xc0>
    return;
90015076:	bf00      	nop
}
90015078:	3720      	adds	r7, #32
9001507a:	46bd      	mov	sp, r7
9001507c:	bd80      	pop	{r7, pc}
9001507e:	bf00      	nop
90015080:	9001ab7c 	.word	0x9001ab7c
90015084:	9001ac48 	.word	0x9001ac48
90015088:	9001abec 	.word	0x9001abec

9001508c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
9001508c:	b480      	push	{r7}
9001508e:	b085      	sub	sp, #20
90015090:	af00      	add	r7, sp, #0
90015092:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
90015094:	4b33      	ldr	r3, [pc, #204]	; (90015164 <ip4_route+0xd8>)
90015096:	681b      	ldr	r3, [r3, #0]
90015098:	60fb      	str	r3, [r7, #12]
9001509a:	e036      	b.n	9001510a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
9001509c:	68fb      	ldr	r3, [r7, #12]
9001509e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900150a2:	f003 0301 	and.w	r3, r3, #1
900150a6:	b2db      	uxtb	r3, r3
900150a8:	2b00      	cmp	r3, #0
900150aa:	d02b      	beq.n	90015104 <ip4_route+0x78>
900150ac:	68fb      	ldr	r3, [r7, #12]
900150ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900150b2:	089b      	lsrs	r3, r3, #2
900150b4:	f003 0301 	and.w	r3, r3, #1
900150b8:	b2db      	uxtb	r3, r3
900150ba:	2b00      	cmp	r3, #0
900150bc:	d022      	beq.n	90015104 <ip4_route+0x78>
900150be:	68fb      	ldr	r3, [r7, #12]
900150c0:	3304      	adds	r3, #4
900150c2:	681b      	ldr	r3, [r3, #0]
900150c4:	2b00      	cmp	r3, #0
900150c6:	d01d      	beq.n	90015104 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
900150c8:	687b      	ldr	r3, [r7, #4]
900150ca:	681a      	ldr	r2, [r3, #0]
900150cc:	68fb      	ldr	r3, [r7, #12]
900150ce:	3304      	adds	r3, #4
900150d0:	681b      	ldr	r3, [r3, #0]
900150d2:	405a      	eors	r2, r3
900150d4:	68fb      	ldr	r3, [r7, #12]
900150d6:	3308      	adds	r3, #8
900150d8:	681b      	ldr	r3, [r3, #0]
900150da:	4013      	ands	r3, r2
900150dc:	2b00      	cmp	r3, #0
900150de:	d101      	bne.n	900150e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
900150e0:	68fb      	ldr	r3, [r7, #12]
900150e2:	e038      	b.n	90015156 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
900150e4:	68fb      	ldr	r3, [r7, #12]
900150e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900150ea:	f003 0302 	and.w	r3, r3, #2
900150ee:	2b00      	cmp	r3, #0
900150f0:	d108      	bne.n	90015104 <ip4_route+0x78>
900150f2:	687b      	ldr	r3, [r7, #4]
900150f4:	681a      	ldr	r2, [r3, #0]
900150f6:	68fb      	ldr	r3, [r7, #12]
900150f8:	330c      	adds	r3, #12
900150fa:	681b      	ldr	r3, [r3, #0]
900150fc:	429a      	cmp	r2, r3
900150fe:	d101      	bne.n	90015104 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
90015100:	68fb      	ldr	r3, [r7, #12]
90015102:	e028      	b.n	90015156 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
90015104:	68fb      	ldr	r3, [r7, #12]
90015106:	681b      	ldr	r3, [r3, #0]
90015108:	60fb      	str	r3, [r7, #12]
9001510a:	68fb      	ldr	r3, [r7, #12]
9001510c:	2b00      	cmp	r3, #0
9001510e:	d1c5      	bne.n	9001509c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
90015110:	4b15      	ldr	r3, [pc, #84]	; (90015168 <ip4_route+0xdc>)
90015112:	681b      	ldr	r3, [r3, #0]
90015114:	2b00      	cmp	r3, #0
90015116:	d01a      	beq.n	9001514e <ip4_route+0xc2>
90015118:	4b13      	ldr	r3, [pc, #76]	; (90015168 <ip4_route+0xdc>)
9001511a:	681b      	ldr	r3, [r3, #0]
9001511c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90015120:	f003 0301 	and.w	r3, r3, #1
90015124:	2b00      	cmp	r3, #0
90015126:	d012      	beq.n	9001514e <ip4_route+0xc2>
90015128:	4b0f      	ldr	r3, [pc, #60]	; (90015168 <ip4_route+0xdc>)
9001512a:	681b      	ldr	r3, [r3, #0]
9001512c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90015130:	f003 0304 	and.w	r3, r3, #4
90015134:	2b00      	cmp	r3, #0
90015136:	d00a      	beq.n	9001514e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
90015138:	4b0b      	ldr	r3, [pc, #44]	; (90015168 <ip4_route+0xdc>)
9001513a:	681b      	ldr	r3, [r3, #0]
9001513c:	3304      	adds	r3, #4
9001513e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
90015140:	2b00      	cmp	r3, #0
90015142:	d004      	beq.n	9001514e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
90015144:	687b      	ldr	r3, [r7, #4]
90015146:	681b      	ldr	r3, [r3, #0]
90015148:	b2db      	uxtb	r3, r3
9001514a:	2b7f      	cmp	r3, #127	; 0x7f
9001514c:	d101      	bne.n	90015152 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
9001514e:	2300      	movs	r3, #0
90015150:	e001      	b.n	90015156 <ip4_route+0xca>
  }

  return netif_default;
90015152:	4b05      	ldr	r3, [pc, #20]	; (90015168 <ip4_route+0xdc>)
90015154:	681b      	ldr	r3, [r3, #0]
}
90015156:	4618      	mov	r0, r3
90015158:	3714      	adds	r7, #20
9001515a:	46bd      	mov	sp, r7
9001515c:	f85d 7b04 	ldr.w	r7, [sp], #4
90015160:	4770      	bx	lr
90015162:	bf00      	nop
90015164:	2000d5bc 	.word	0x2000d5bc
90015168:	2000d5c0 	.word	0x2000d5c0

9001516c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
9001516c:	b580      	push	{r7, lr}
9001516e:	b082      	sub	sp, #8
90015170:	af00      	add	r7, sp, #0
90015172:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
90015174:	687b      	ldr	r3, [r7, #4]
90015176:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9001517a:	f003 0301 	and.w	r3, r3, #1
9001517e:	b2db      	uxtb	r3, r3
90015180:	2b00      	cmp	r3, #0
90015182:	d016      	beq.n	900151b2 <ip4_input_accept+0x46>
90015184:	687b      	ldr	r3, [r7, #4]
90015186:	3304      	adds	r3, #4
90015188:	681b      	ldr	r3, [r3, #0]
9001518a:	2b00      	cmp	r3, #0
9001518c:	d011      	beq.n	900151b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
9001518e:	4b0b      	ldr	r3, [pc, #44]	; (900151bc <ip4_input_accept+0x50>)
90015190:	695a      	ldr	r2, [r3, #20]
90015192:	687b      	ldr	r3, [r7, #4]
90015194:	3304      	adds	r3, #4
90015196:	681b      	ldr	r3, [r3, #0]
90015198:	429a      	cmp	r2, r3
9001519a:	d008      	beq.n	900151ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
9001519c:	4b07      	ldr	r3, [pc, #28]	; (900151bc <ip4_input_accept+0x50>)
9001519e:	695b      	ldr	r3, [r3, #20]
900151a0:	6879      	ldr	r1, [r7, #4]
900151a2:	4618      	mov	r0, r3
900151a4:	f000 fa08 	bl	900155b8 <ip4_addr_isbroadcast_u32>
900151a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
900151aa:	2b00      	cmp	r3, #0
900151ac:	d001      	beq.n	900151b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
900151ae:	2301      	movs	r3, #1
900151b0:	e000      	b.n	900151b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
900151b2:	2300      	movs	r3, #0
}
900151b4:	4618      	mov	r0, r3
900151b6:	3708      	adds	r7, #8
900151b8:	46bd      	mov	sp, r7
900151ba:	bd80      	pop	{r7, pc}
900151bc:	20007cb4 	.word	0x20007cb4

900151c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
900151c0:	b580      	push	{r7, lr}
900151c2:	b086      	sub	sp, #24
900151c4:	af00      	add	r7, sp, #0
900151c6:	6078      	str	r0, [r7, #4]
900151c8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
900151ca:	687b      	ldr	r3, [r7, #4]
900151cc:	685b      	ldr	r3, [r3, #4]
900151ce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
900151d0:	697b      	ldr	r3, [r7, #20]
900151d2:	781b      	ldrb	r3, [r3, #0]
900151d4:	091b      	lsrs	r3, r3, #4
900151d6:	b2db      	uxtb	r3, r3
900151d8:	2b04      	cmp	r3, #4
900151da:	d004      	beq.n	900151e6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
900151dc:	6878      	ldr	r0, [r7, #4]
900151de:	f7f7 fee1 	bl	9000cfa4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
900151e2:	2300      	movs	r3, #0
900151e4:	e107      	b.n	900153f6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
900151e6:	697b      	ldr	r3, [r7, #20]
900151e8:	781b      	ldrb	r3, [r3, #0]
900151ea:	f003 030f 	and.w	r3, r3, #15
900151ee:	b2db      	uxtb	r3, r3
900151f0:	009b      	lsls	r3, r3, #2
900151f2:	b2db      	uxtb	r3, r3
900151f4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
900151f6:	697b      	ldr	r3, [r7, #20]
900151f8:	885b      	ldrh	r3, [r3, #2]
900151fa:	b29b      	uxth	r3, r3
900151fc:	4618      	mov	r0, r3
900151fe:	f7f6 fb25 	bl	9000b84c <lwip_htons>
90015202:	4603      	mov	r3, r0
90015204:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
90015206:	687b      	ldr	r3, [r7, #4]
90015208:	891b      	ldrh	r3, [r3, #8]
9001520a:	89ba      	ldrh	r2, [r7, #12]
9001520c:	429a      	cmp	r2, r3
9001520e:	d204      	bcs.n	9001521a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
90015210:	89bb      	ldrh	r3, [r7, #12]
90015212:	4619      	mov	r1, r3
90015214:	6878      	ldr	r0, [r7, #4]
90015216:	f7f7 fd3f 	bl	9000cc98 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
9001521a:	687b      	ldr	r3, [r7, #4]
9001521c:	895b      	ldrh	r3, [r3, #10]
9001521e:	89fa      	ldrh	r2, [r7, #14]
90015220:	429a      	cmp	r2, r3
90015222:	d807      	bhi.n	90015234 <ip4_input+0x74>
90015224:	687b      	ldr	r3, [r7, #4]
90015226:	891b      	ldrh	r3, [r3, #8]
90015228:	89ba      	ldrh	r2, [r7, #12]
9001522a:	429a      	cmp	r2, r3
9001522c:	d802      	bhi.n	90015234 <ip4_input+0x74>
9001522e:	89fb      	ldrh	r3, [r7, #14]
90015230:	2b13      	cmp	r3, #19
90015232:	d804      	bhi.n	9001523e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
90015234:	6878      	ldr	r0, [r7, #4]
90015236:	f7f7 feb5 	bl	9000cfa4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
9001523a:	2300      	movs	r3, #0
9001523c:	e0db      	b.n	900153f6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
9001523e:	697b      	ldr	r3, [r7, #20]
90015240:	691b      	ldr	r3, [r3, #16]
90015242:	4a6f      	ldr	r2, [pc, #444]	; (90015400 <ip4_input+0x240>)
90015244:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
90015246:	697b      	ldr	r3, [r7, #20]
90015248:	68db      	ldr	r3, [r3, #12]
9001524a:	4a6d      	ldr	r2, [pc, #436]	; (90015400 <ip4_input+0x240>)
9001524c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
9001524e:	4b6c      	ldr	r3, [pc, #432]	; (90015400 <ip4_input+0x240>)
90015250:	695b      	ldr	r3, [r3, #20]
90015252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90015256:	2be0      	cmp	r3, #224	; 0xe0
90015258:	d112      	bne.n	90015280 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
9001525a:	683b      	ldr	r3, [r7, #0]
9001525c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90015260:	f003 0301 	and.w	r3, r3, #1
90015264:	b2db      	uxtb	r3, r3
90015266:	2b00      	cmp	r3, #0
90015268:	d007      	beq.n	9001527a <ip4_input+0xba>
9001526a:	683b      	ldr	r3, [r7, #0]
9001526c:	3304      	adds	r3, #4
9001526e:	681b      	ldr	r3, [r3, #0]
90015270:	2b00      	cmp	r3, #0
90015272:	d002      	beq.n	9001527a <ip4_input+0xba>
      netif = inp;
90015274:	683b      	ldr	r3, [r7, #0]
90015276:	613b      	str	r3, [r7, #16]
90015278:	e02a      	b.n	900152d0 <ip4_input+0x110>
    } else {
      netif = NULL;
9001527a:	2300      	movs	r3, #0
9001527c:	613b      	str	r3, [r7, #16]
9001527e:	e027      	b.n	900152d0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
90015280:	6838      	ldr	r0, [r7, #0]
90015282:	f7ff ff73 	bl	9001516c <ip4_input_accept>
90015286:	4603      	mov	r3, r0
90015288:	2b00      	cmp	r3, #0
9001528a:	d002      	beq.n	90015292 <ip4_input+0xd2>
      netif = inp;
9001528c:	683b      	ldr	r3, [r7, #0]
9001528e:	613b      	str	r3, [r7, #16]
90015290:	e01e      	b.n	900152d0 <ip4_input+0x110>
    } else {
      netif = NULL;
90015292:	2300      	movs	r3, #0
90015294:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
90015296:	4b5a      	ldr	r3, [pc, #360]	; (90015400 <ip4_input+0x240>)
90015298:	695b      	ldr	r3, [r3, #20]
9001529a:	b2db      	uxtb	r3, r3
9001529c:	2b7f      	cmp	r3, #127	; 0x7f
9001529e:	d017      	beq.n	900152d0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
900152a0:	4b58      	ldr	r3, [pc, #352]	; (90015404 <ip4_input+0x244>)
900152a2:	681b      	ldr	r3, [r3, #0]
900152a4:	613b      	str	r3, [r7, #16]
900152a6:	e00e      	b.n	900152c6 <ip4_input+0x106>
          if (netif == inp) {
900152a8:	693a      	ldr	r2, [r7, #16]
900152aa:	683b      	ldr	r3, [r7, #0]
900152ac:	429a      	cmp	r2, r3
900152ae:	d006      	beq.n	900152be <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
900152b0:	6938      	ldr	r0, [r7, #16]
900152b2:	f7ff ff5b 	bl	9001516c <ip4_input_accept>
900152b6:	4603      	mov	r3, r0
900152b8:	2b00      	cmp	r3, #0
900152ba:	d108      	bne.n	900152ce <ip4_input+0x10e>
900152bc:	e000      	b.n	900152c0 <ip4_input+0x100>
            continue;
900152be:	bf00      	nop
        NETIF_FOREACH(netif) {
900152c0:	693b      	ldr	r3, [r7, #16]
900152c2:	681b      	ldr	r3, [r3, #0]
900152c4:	613b      	str	r3, [r7, #16]
900152c6:	693b      	ldr	r3, [r7, #16]
900152c8:	2b00      	cmp	r3, #0
900152ca:	d1ed      	bne.n	900152a8 <ip4_input+0xe8>
900152cc:	e000      	b.n	900152d0 <ip4_input+0x110>
            break;
900152ce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
900152d0:	4b4b      	ldr	r3, [pc, #300]	; (90015400 <ip4_input+0x240>)
900152d2:	691b      	ldr	r3, [r3, #16]
900152d4:	6839      	ldr	r1, [r7, #0]
900152d6:	4618      	mov	r0, r3
900152d8:	f000 f96e 	bl	900155b8 <ip4_addr_isbroadcast_u32>
900152dc:	4603      	mov	r3, r0
900152de:	2b00      	cmp	r3, #0
900152e0:	d105      	bne.n	900152ee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
900152e2:	4b47      	ldr	r3, [pc, #284]	; (90015400 <ip4_input+0x240>)
900152e4:	691b      	ldr	r3, [r3, #16]
900152e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
900152ea:	2be0      	cmp	r3, #224	; 0xe0
900152ec:	d104      	bne.n	900152f8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
900152ee:	6878      	ldr	r0, [r7, #4]
900152f0:	f7f7 fe58 	bl	9000cfa4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
900152f4:	2300      	movs	r3, #0
900152f6:	e07e      	b.n	900153f6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
900152f8:	693b      	ldr	r3, [r7, #16]
900152fa:	2b00      	cmp	r3, #0
900152fc:	d104      	bne.n	90015308 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
900152fe:	6878      	ldr	r0, [r7, #4]
90015300:	f7f7 fe50 	bl	9000cfa4 <pbuf_free>
    return ERR_OK;
90015304:	2300      	movs	r3, #0
90015306:	e076      	b.n	900153f6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
90015308:	697b      	ldr	r3, [r7, #20]
9001530a:	88db      	ldrh	r3, [r3, #6]
9001530c:	b29b      	uxth	r3, r3
9001530e:	461a      	mov	r2, r3
90015310:	f64f 733f 	movw	r3, #65343	; 0xff3f
90015314:	4013      	ands	r3, r2
90015316:	2b00      	cmp	r3, #0
90015318:	d00b      	beq.n	90015332 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
9001531a:	6878      	ldr	r0, [r7, #4]
9001531c:	f000 fc92 	bl	90015c44 <ip4_reass>
90015320:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
90015322:	687b      	ldr	r3, [r7, #4]
90015324:	2b00      	cmp	r3, #0
90015326:	d101      	bne.n	9001532c <ip4_input+0x16c>
      return ERR_OK;
90015328:	2300      	movs	r3, #0
9001532a:	e064      	b.n	900153f6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
9001532c:	687b      	ldr	r3, [r7, #4]
9001532e:	685b      	ldr	r3, [r3, #4]
90015330:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
90015332:	4a33      	ldr	r2, [pc, #204]	; (90015400 <ip4_input+0x240>)
90015334:	693b      	ldr	r3, [r7, #16]
90015336:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
90015338:	4a31      	ldr	r2, [pc, #196]	; (90015400 <ip4_input+0x240>)
9001533a:	683b      	ldr	r3, [r7, #0]
9001533c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
9001533e:	4a30      	ldr	r2, [pc, #192]	; (90015400 <ip4_input+0x240>)
90015340:	697b      	ldr	r3, [r7, #20]
90015342:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
90015344:	697b      	ldr	r3, [r7, #20]
90015346:	781b      	ldrb	r3, [r3, #0]
90015348:	f003 030f 	and.w	r3, r3, #15
9001534c:	b2db      	uxtb	r3, r3
9001534e:	009b      	lsls	r3, r3, #2
90015350:	b2db      	uxtb	r3, r3
90015352:	b29a      	uxth	r2, r3
90015354:	4b2a      	ldr	r3, [pc, #168]	; (90015400 <ip4_input+0x240>)
90015356:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
90015358:	89fb      	ldrh	r3, [r7, #14]
9001535a:	4619      	mov	r1, r3
9001535c:	6878      	ldr	r0, [r7, #4]
9001535e:	f7f7 fd9b 	bl	9000ce98 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
90015362:	697b      	ldr	r3, [r7, #20]
90015364:	7a5b      	ldrb	r3, [r3, #9]
90015366:	2b11      	cmp	r3, #17
90015368:	d006      	beq.n	90015378 <ip4_input+0x1b8>
9001536a:	2b11      	cmp	r3, #17
9001536c:	dc13      	bgt.n	90015396 <ip4_input+0x1d6>
9001536e:	2b01      	cmp	r3, #1
90015370:	d00c      	beq.n	9001538c <ip4_input+0x1cc>
90015372:	2b06      	cmp	r3, #6
90015374:	d005      	beq.n	90015382 <ip4_input+0x1c2>
90015376:	e00e      	b.n	90015396 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
90015378:	6839      	ldr	r1, [r7, #0]
9001537a:	6878      	ldr	r0, [r7, #4]
9001537c:	f7fe fb5a 	bl	90013a34 <udp_input>
        break;
90015380:	e026      	b.n	900153d0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
90015382:	6839      	ldr	r1, [r7, #0]
90015384:	6878      	ldr	r0, [r7, #4]
90015386:	f7f9 ff13 	bl	9000f1b0 <tcp_input>
        break;
9001538a:	e021      	b.n	900153d0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
9001538c:	6839      	ldr	r1, [r7, #0]
9001538e:	6878      	ldr	r0, [r7, #4]
90015390:	f7ff fcee 	bl	90014d70 <icmp_input>
        break;
90015394:	e01c      	b.n	900153d0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
90015396:	4b1a      	ldr	r3, [pc, #104]	; (90015400 <ip4_input+0x240>)
90015398:	695b      	ldr	r3, [r3, #20]
9001539a:	6939      	ldr	r1, [r7, #16]
9001539c:	4618      	mov	r0, r3
9001539e:	f000 f90b 	bl	900155b8 <ip4_addr_isbroadcast_u32>
900153a2:	4603      	mov	r3, r0
900153a4:	2b00      	cmp	r3, #0
900153a6:	d10f      	bne.n	900153c8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
900153a8:	4b15      	ldr	r3, [pc, #84]	; (90015400 <ip4_input+0x240>)
900153aa:	695b      	ldr	r3, [r3, #20]
900153ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
900153b0:	2be0      	cmp	r3, #224	; 0xe0
900153b2:	d009      	beq.n	900153c8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
900153b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
900153b8:	4619      	mov	r1, r3
900153ba:	6878      	ldr	r0, [r7, #4]
900153bc:	f7f7 fddf 	bl	9000cf7e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
900153c0:	2102      	movs	r1, #2
900153c2:	6878      	ldr	r0, [r7, #4]
900153c4:	f7ff fdd8 	bl	90014f78 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
900153c8:	6878      	ldr	r0, [r7, #4]
900153ca:	f7f7 fdeb 	bl	9000cfa4 <pbuf_free>
        break;
900153ce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
900153d0:	4b0b      	ldr	r3, [pc, #44]	; (90015400 <ip4_input+0x240>)
900153d2:	2200      	movs	r2, #0
900153d4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
900153d6:	4b0a      	ldr	r3, [pc, #40]	; (90015400 <ip4_input+0x240>)
900153d8:	2200      	movs	r2, #0
900153da:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
900153dc:	4b08      	ldr	r3, [pc, #32]	; (90015400 <ip4_input+0x240>)
900153de:	2200      	movs	r2, #0
900153e0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
900153e2:	4b07      	ldr	r3, [pc, #28]	; (90015400 <ip4_input+0x240>)
900153e4:	2200      	movs	r2, #0
900153e6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
900153e8:	4b05      	ldr	r3, [pc, #20]	; (90015400 <ip4_input+0x240>)
900153ea:	2200      	movs	r2, #0
900153ec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
900153ee:	4b04      	ldr	r3, [pc, #16]	; (90015400 <ip4_input+0x240>)
900153f0:	2200      	movs	r2, #0
900153f2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
900153f4:	2300      	movs	r3, #0
}
900153f6:	4618      	mov	r0, r3
900153f8:	3718      	adds	r7, #24
900153fa:	46bd      	mov	sp, r7
900153fc:	bd80      	pop	{r7, pc}
900153fe:	bf00      	nop
90015400:	20007cb4 	.word	0x20007cb4
90015404:	2000d5bc 	.word	0x2000d5bc

90015408 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
90015408:	b580      	push	{r7, lr}
9001540a:	b08a      	sub	sp, #40	; 0x28
9001540c:	af04      	add	r7, sp, #16
9001540e:	60f8      	str	r0, [r7, #12]
90015410:	60b9      	str	r1, [r7, #8]
90015412:	607a      	str	r2, [r7, #4]
90015414:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
90015416:	68bb      	ldr	r3, [r7, #8]
90015418:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
9001541a:	687b      	ldr	r3, [r7, #4]
9001541c:	2b00      	cmp	r3, #0
9001541e:	d009      	beq.n	90015434 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
90015420:	68bb      	ldr	r3, [r7, #8]
90015422:	2b00      	cmp	r3, #0
90015424:	d003      	beq.n	9001542e <ip4_output_if+0x26>
90015426:	68bb      	ldr	r3, [r7, #8]
90015428:	681b      	ldr	r3, [r3, #0]
9001542a:	2b00      	cmp	r3, #0
9001542c:	d102      	bne.n	90015434 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
9001542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015430:	3304      	adds	r3, #4
90015432:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
90015434:	78fa      	ldrb	r2, [r7, #3]
90015436:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015438:	9302      	str	r3, [sp, #8]
9001543a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
9001543e:	9301      	str	r3, [sp, #4]
90015440:	f897 3020 	ldrb.w	r3, [r7, #32]
90015444:	9300      	str	r3, [sp, #0]
90015446:	4613      	mov	r3, r2
90015448:	687a      	ldr	r2, [r7, #4]
9001544a:	6979      	ldr	r1, [r7, #20]
9001544c:	68f8      	ldr	r0, [r7, #12]
9001544e:	f000 f805 	bl	9001545c <ip4_output_if_src>
90015452:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
90015454:	4618      	mov	r0, r3
90015456:	3718      	adds	r7, #24
90015458:	46bd      	mov	sp, r7
9001545a:	bd80      	pop	{r7, pc}

9001545c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
9001545c:	b580      	push	{r7, lr}
9001545e:	b088      	sub	sp, #32
90015460:	af00      	add	r7, sp, #0
90015462:	60f8      	str	r0, [r7, #12]
90015464:	60b9      	str	r1, [r7, #8]
90015466:	607a      	str	r2, [r7, #4]
90015468:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
9001546a:	68fb      	ldr	r3, [r7, #12]
9001546c:	7b9b      	ldrb	r3, [r3, #14]
9001546e:	2b01      	cmp	r3, #1
90015470:	d006      	beq.n	90015480 <ip4_output_if_src+0x24>
90015472:	4b4b      	ldr	r3, [pc, #300]	; (900155a0 <ip4_output_if_src+0x144>)
90015474:	f44f 7255 	mov.w	r2, #852	; 0x354
90015478:	494a      	ldr	r1, [pc, #296]	; (900155a4 <ip4_output_if_src+0x148>)
9001547a:	484b      	ldr	r0, [pc, #300]	; (900155a8 <ip4_output_if_src+0x14c>)
9001547c:	f001 fbe0 	bl	90016c40 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
90015480:	687b      	ldr	r3, [r7, #4]
90015482:	2b00      	cmp	r3, #0
90015484:	d060      	beq.n	90015548 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
90015486:	2314      	movs	r3, #20
90015488:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
9001548a:	2114      	movs	r1, #20
9001548c:	68f8      	ldr	r0, [r7, #12]
9001548e:	f7f7 fcf3 	bl	9000ce78 <pbuf_add_header>
90015492:	4603      	mov	r3, r0
90015494:	2b00      	cmp	r3, #0
90015496:	d002      	beq.n	9001549e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
90015498:	f06f 0301 	mvn.w	r3, #1
9001549c:	e07c      	b.n	90015598 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
9001549e:	68fb      	ldr	r3, [r7, #12]
900154a0:	685b      	ldr	r3, [r3, #4]
900154a2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
900154a4:	68fb      	ldr	r3, [r7, #12]
900154a6:	895b      	ldrh	r3, [r3, #10]
900154a8:	2b13      	cmp	r3, #19
900154aa:	d806      	bhi.n	900154ba <ip4_output_if_src+0x5e>
900154ac:	4b3c      	ldr	r3, [pc, #240]	; (900155a0 <ip4_output_if_src+0x144>)
900154ae:	f44f 7262 	mov.w	r2, #904	; 0x388
900154b2:	493e      	ldr	r1, [pc, #248]	; (900155ac <ip4_output_if_src+0x150>)
900154b4:	483c      	ldr	r0, [pc, #240]	; (900155a8 <ip4_output_if_src+0x14c>)
900154b6:	f001 fbc3 	bl	90016c40 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
900154ba:	69fb      	ldr	r3, [r7, #28]
900154bc:	78fa      	ldrb	r2, [r7, #3]
900154be:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
900154c0:	69fb      	ldr	r3, [r7, #28]
900154c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
900154c6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
900154c8:	687b      	ldr	r3, [r7, #4]
900154ca:	681a      	ldr	r2, [r3, #0]
900154cc:	69fb      	ldr	r3, [r7, #28]
900154ce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
900154d0:	8b7b      	ldrh	r3, [r7, #26]
900154d2:	089b      	lsrs	r3, r3, #2
900154d4:	b29b      	uxth	r3, r3
900154d6:	b2db      	uxtb	r3, r3
900154d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900154dc:	b2da      	uxtb	r2, r3
900154de:	69fb      	ldr	r3, [r7, #28]
900154e0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
900154e2:	69fb      	ldr	r3, [r7, #28]
900154e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
900154e8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
900154ea:	68fb      	ldr	r3, [r7, #12]
900154ec:	891b      	ldrh	r3, [r3, #8]
900154ee:	4618      	mov	r0, r3
900154f0:	f7f6 f9ac 	bl	9000b84c <lwip_htons>
900154f4:	4603      	mov	r3, r0
900154f6:	461a      	mov	r2, r3
900154f8:	69fb      	ldr	r3, [r7, #28]
900154fa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
900154fc:	69fb      	ldr	r3, [r7, #28]
900154fe:	2200      	movs	r2, #0
90015500:	719a      	strb	r2, [r3, #6]
90015502:	2200      	movs	r2, #0
90015504:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
90015506:	4b2a      	ldr	r3, [pc, #168]	; (900155b0 <ip4_output_if_src+0x154>)
90015508:	881b      	ldrh	r3, [r3, #0]
9001550a:	4618      	mov	r0, r3
9001550c:	f7f6 f99e 	bl	9000b84c <lwip_htons>
90015510:	4603      	mov	r3, r0
90015512:	461a      	mov	r2, r3
90015514:	69fb      	ldr	r3, [r7, #28]
90015516:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
90015518:	4b25      	ldr	r3, [pc, #148]	; (900155b0 <ip4_output_if_src+0x154>)
9001551a:	881b      	ldrh	r3, [r3, #0]
9001551c:	3301      	adds	r3, #1
9001551e:	b29a      	uxth	r2, r3
90015520:	4b23      	ldr	r3, [pc, #140]	; (900155b0 <ip4_output_if_src+0x154>)
90015522:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
90015524:	68bb      	ldr	r3, [r7, #8]
90015526:	2b00      	cmp	r3, #0
90015528:	d104      	bne.n	90015534 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
9001552a:	4b22      	ldr	r3, [pc, #136]	; (900155b4 <ip4_output_if_src+0x158>)
9001552c:	681a      	ldr	r2, [r3, #0]
9001552e:	69fb      	ldr	r3, [r7, #28]
90015530:	60da      	str	r2, [r3, #12]
90015532:	e003      	b.n	9001553c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
90015534:	68bb      	ldr	r3, [r7, #8]
90015536:	681a      	ldr	r2, [r3, #0]
90015538:	69fb      	ldr	r3, [r7, #28]
9001553a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
9001553c:	69fb      	ldr	r3, [r7, #28]
9001553e:	2200      	movs	r2, #0
90015540:	729a      	strb	r2, [r3, #10]
90015542:	2200      	movs	r2, #0
90015544:	72da      	strb	r2, [r3, #11]
90015546:	e00f      	b.n	90015568 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
90015548:	68fb      	ldr	r3, [r7, #12]
9001554a:	895b      	ldrh	r3, [r3, #10]
9001554c:	2b13      	cmp	r3, #19
9001554e:	d802      	bhi.n	90015556 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
90015550:	f06f 0301 	mvn.w	r3, #1
90015554:	e020      	b.n	90015598 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
90015556:	68fb      	ldr	r3, [r7, #12]
90015558:	685b      	ldr	r3, [r3, #4]
9001555a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
9001555c:	69fb      	ldr	r3, [r7, #28]
9001555e:	691b      	ldr	r3, [r3, #16]
90015560:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
90015562:	f107 0314 	add.w	r3, r7, #20
90015566:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
90015568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001556a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
9001556c:	2b00      	cmp	r3, #0
9001556e:	d00c      	beq.n	9001558a <ip4_output_if_src+0x12e>
90015570:	68fb      	ldr	r3, [r7, #12]
90015572:	891a      	ldrh	r2, [r3, #8]
90015574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015576:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
90015578:	429a      	cmp	r2, r3
9001557a:	d906      	bls.n	9001558a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
9001557c:	687a      	ldr	r2, [r7, #4]
9001557e:	6b39      	ldr	r1, [r7, #48]	; 0x30
90015580:	68f8      	ldr	r0, [r7, #12]
90015582:	f000 fd53 	bl	9001602c <ip4_frag>
90015586:	4603      	mov	r3, r0
90015588:	e006      	b.n	90015598 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
9001558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001558c:	695b      	ldr	r3, [r3, #20]
9001558e:	687a      	ldr	r2, [r7, #4]
90015590:	68f9      	ldr	r1, [r7, #12]
90015592:	6b38      	ldr	r0, [r7, #48]	; 0x30
90015594:	4798      	blx	r3
90015596:	4603      	mov	r3, r0
}
90015598:	4618      	mov	r0, r3
9001559a:	3720      	adds	r7, #32
9001559c:	46bd      	mov	sp, r7
9001559e:	bd80      	pop	{r7, pc}
900155a0:	9001ac74 	.word	0x9001ac74
900155a4:	9001aca8 	.word	0x9001aca8
900155a8:	9001acb4 	.word	0x9001acb4
900155ac:	9001acdc 	.word	0x9001acdc
900155b0:	2000d71a 	.word	0x2000d71a
900155b4:	9001bdd4 	.word	0x9001bdd4

900155b8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
900155b8:	b480      	push	{r7}
900155ba:	b085      	sub	sp, #20
900155bc:	af00      	add	r7, sp, #0
900155be:	6078      	str	r0, [r7, #4]
900155c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
900155c2:	687b      	ldr	r3, [r7, #4]
900155c4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
900155c6:	687b      	ldr	r3, [r7, #4]
900155c8:	f1b3 3fff 	cmp.w	r3, #4294967295
900155cc:	d002      	beq.n	900155d4 <ip4_addr_isbroadcast_u32+0x1c>
900155ce:	687b      	ldr	r3, [r7, #4]
900155d0:	2b00      	cmp	r3, #0
900155d2:	d101      	bne.n	900155d8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
900155d4:	2301      	movs	r3, #1
900155d6:	e02a      	b.n	9001562e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
900155d8:	683b      	ldr	r3, [r7, #0]
900155da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900155de:	f003 0302 	and.w	r3, r3, #2
900155e2:	2b00      	cmp	r3, #0
900155e4:	d101      	bne.n	900155ea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
900155e6:	2300      	movs	r3, #0
900155e8:	e021      	b.n	9001562e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
900155ea:	683b      	ldr	r3, [r7, #0]
900155ec:	3304      	adds	r3, #4
900155ee:	681b      	ldr	r3, [r3, #0]
900155f0:	687a      	ldr	r2, [r7, #4]
900155f2:	429a      	cmp	r2, r3
900155f4:	d101      	bne.n	900155fa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
900155f6:	2300      	movs	r3, #0
900155f8:	e019      	b.n	9001562e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
900155fa:	68fa      	ldr	r2, [r7, #12]
900155fc:	683b      	ldr	r3, [r7, #0]
900155fe:	3304      	adds	r3, #4
90015600:	681b      	ldr	r3, [r3, #0]
90015602:	405a      	eors	r2, r3
90015604:	683b      	ldr	r3, [r7, #0]
90015606:	3308      	adds	r3, #8
90015608:	681b      	ldr	r3, [r3, #0]
9001560a:	4013      	ands	r3, r2
9001560c:	2b00      	cmp	r3, #0
9001560e:	d10d      	bne.n	9001562c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
90015610:	683b      	ldr	r3, [r7, #0]
90015612:	3308      	adds	r3, #8
90015614:	681b      	ldr	r3, [r3, #0]
90015616:	43da      	mvns	r2, r3
90015618:	687b      	ldr	r3, [r7, #4]
9001561a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
9001561c:	683b      	ldr	r3, [r7, #0]
9001561e:	3308      	adds	r3, #8
90015620:	681b      	ldr	r3, [r3, #0]
90015622:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
90015624:	429a      	cmp	r2, r3
90015626:	d101      	bne.n	9001562c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
90015628:	2301      	movs	r3, #1
9001562a:	e000      	b.n	9001562e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
9001562c:	2300      	movs	r3, #0
  }
}
9001562e:	4618      	mov	r0, r3
90015630:	3714      	adds	r7, #20
90015632:	46bd      	mov	sp, r7
90015634:	f85d 7b04 	ldr.w	r7, [sp], #4
90015638:	4770      	bx	lr
	...

9001563c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
9001563c:	b580      	push	{r7, lr}
9001563e:	b084      	sub	sp, #16
90015640:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
90015642:	2300      	movs	r3, #0
90015644:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
90015646:	4b12      	ldr	r3, [pc, #72]	; (90015690 <ip_reass_tmr+0x54>)
90015648:	681b      	ldr	r3, [r3, #0]
9001564a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
9001564c:	e018      	b.n	90015680 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
9001564e:	68fb      	ldr	r3, [r7, #12]
90015650:	7fdb      	ldrb	r3, [r3, #31]
90015652:	2b00      	cmp	r3, #0
90015654:	d00b      	beq.n	9001566e <ip_reass_tmr+0x32>
      r->timer--;
90015656:	68fb      	ldr	r3, [r7, #12]
90015658:	7fdb      	ldrb	r3, [r3, #31]
9001565a:	3b01      	subs	r3, #1
9001565c:	b2da      	uxtb	r2, r3
9001565e:	68fb      	ldr	r3, [r7, #12]
90015660:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
90015662:	68fb      	ldr	r3, [r7, #12]
90015664:	60bb      	str	r3, [r7, #8]
      r = r->next;
90015666:	68fb      	ldr	r3, [r7, #12]
90015668:	681b      	ldr	r3, [r3, #0]
9001566a:	60fb      	str	r3, [r7, #12]
9001566c:	e008      	b.n	90015680 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
9001566e:	68fb      	ldr	r3, [r7, #12]
90015670:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
90015672:	68fb      	ldr	r3, [r7, #12]
90015674:	681b      	ldr	r3, [r3, #0]
90015676:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
90015678:	68b9      	ldr	r1, [r7, #8]
9001567a:	6878      	ldr	r0, [r7, #4]
9001567c:	f000 f80a 	bl	90015694 <ip_reass_free_complete_datagram>
  while (r != NULL) {
90015680:	68fb      	ldr	r3, [r7, #12]
90015682:	2b00      	cmp	r3, #0
90015684:	d1e3      	bne.n	9001564e <ip_reass_tmr+0x12>
    }
  }
}
90015686:	bf00      	nop
90015688:	bf00      	nop
9001568a:	3710      	adds	r7, #16
9001568c:	46bd      	mov	sp, r7
9001568e:	bd80      	pop	{r7, pc}
90015690:	2000d71c 	.word	0x2000d71c

90015694 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
90015694:	b580      	push	{r7, lr}
90015696:	b088      	sub	sp, #32
90015698:	af00      	add	r7, sp, #0
9001569a:	6078      	str	r0, [r7, #4]
9001569c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
9001569e:	2300      	movs	r3, #0
900156a0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
900156a2:	683a      	ldr	r2, [r7, #0]
900156a4:	687b      	ldr	r3, [r7, #4]
900156a6:	429a      	cmp	r2, r3
900156a8:	d105      	bne.n	900156b6 <ip_reass_free_complete_datagram+0x22>
900156aa:	4b45      	ldr	r3, [pc, #276]	; (900157c0 <ip_reass_free_complete_datagram+0x12c>)
900156ac:	22ab      	movs	r2, #171	; 0xab
900156ae:	4945      	ldr	r1, [pc, #276]	; (900157c4 <ip_reass_free_complete_datagram+0x130>)
900156b0:	4845      	ldr	r0, [pc, #276]	; (900157c8 <ip_reass_free_complete_datagram+0x134>)
900156b2:	f001 fac5 	bl	90016c40 <iprintf>
  if (prev != NULL) {
900156b6:	683b      	ldr	r3, [r7, #0]
900156b8:	2b00      	cmp	r3, #0
900156ba:	d00a      	beq.n	900156d2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
900156bc:	683b      	ldr	r3, [r7, #0]
900156be:	681b      	ldr	r3, [r3, #0]
900156c0:	687a      	ldr	r2, [r7, #4]
900156c2:	429a      	cmp	r2, r3
900156c4:	d005      	beq.n	900156d2 <ip_reass_free_complete_datagram+0x3e>
900156c6:	4b3e      	ldr	r3, [pc, #248]	; (900157c0 <ip_reass_free_complete_datagram+0x12c>)
900156c8:	22ad      	movs	r2, #173	; 0xad
900156ca:	4940      	ldr	r1, [pc, #256]	; (900157cc <ip_reass_free_complete_datagram+0x138>)
900156cc:	483e      	ldr	r0, [pc, #248]	; (900157c8 <ip_reass_free_complete_datagram+0x134>)
900156ce:	f001 fab7 	bl	90016c40 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
900156d2:	687b      	ldr	r3, [r7, #4]
900156d4:	685b      	ldr	r3, [r3, #4]
900156d6:	685b      	ldr	r3, [r3, #4]
900156d8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
900156da:	697b      	ldr	r3, [r7, #20]
900156dc:	889b      	ldrh	r3, [r3, #4]
900156de:	b29b      	uxth	r3, r3
900156e0:	2b00      	cmp	r3, #0
900156e2:	d12a      	bne.n	9001573a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
900156e4:	687b      	ldr	r3, [r7, #4]
900156e6:	685b      	ldr	r3, [r3, #4]
900156e8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
900156ea:	697b      	ldr	r3, [r7, #20]
900156ec:	681a      	ldr	r2, [r3, #0]
900156ee:	687b      	ldr	r3, [r7, #4]
900156f0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
900156f2:	69bb      	ldr	r3, [r7, #24]
900156f4:	6858      	ldr	r0, [r3, #4]
900156f6:	687b      	ldr	r3, [r7, #4]
900156f8:	3308      	adds	r3, #8
900156fa:	2214      	movs	r2, #20
900156fc:	4619      	mov	r1, r3
900156fe:	f001 f9a9 	bl	90016a54 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
90015702:	2101      	movs	r1, #1
90015704:	69b8      	ldr	r0, [r7, #24]
90015706:	f7ff fc47 	bl	90014f98 <icmp_time_exceeded>
    clen = pbuf_clen(p);
9001570a:	69b8      	ldr	r0, [r7, #24]
9001570c:	f7f7 fcd8 	bl	9000d0c0 <pbuf_clen>
90015710:	4603      	mov	r3, r0
90015712:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
90015714:	8bfa      	ldrh	r2, [r7, #30]
90015716:	8a7b      	ldrh	r3, [r7, #18]
90015718:	4413      	add	r3, r2
9001571a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9001571e:	db05      	blt.n	9001572c <ip_reass_free_complete_datagram+0x98>
90015720:	4b27      	ldr	r3, [pc, #156]	; (900157c0 <ip_reass_free_complete_datagram+0x12c>)
90015722:	22bc      	movs	r2, #188	; 0xbc
90015724:	492a      	ldr	r1, [pc, #168]	; (900157d0 <ip_reass_free_complete_datagram+0x13c>)
90015726:	4828      	ldr	r0, [pc, #160]	; (900157c8 <ip_reass_free_complete_datagram+0x134>)
90015728:	f001 fa8a 	bl	90016c40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
9001572c:	8bfa      	ldrh	r2, [r7, #30]
9001572e:	8a7b      	ldrh	r3, [r7, #18]
90015730:	4413      	add	r3, r2
90015732:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
90015734:	69b8      	ldr	r0, [r7, #24]
90015736:	f7f7 fc35 	bl	9000cfa4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
9001573a:	687b      	ldr	r3, [r7, #4]
9001573c:	685b      	ldr	r3, [r3, #4]
9001573e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
90015740:	e01f      	b.n	90015782 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
90015742:	69bb      	ldr	r3, [r7, #24]
90015744:	685b      	ldr	r3, [r3, #4]
90015746:	617b      	str	r3, [r7, #20]
    pcur = p;
90015748:	69bb      	ldr	r3, [r7, #24]
9001574a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
9001574c:	697b      	ldr	r3, [r7, #20]
9001574e:	681b      	ldr	r3, [r3, #0]
90015750:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
90015752:	68f8      	ldr	r0, [r7, #12]
90015754:	f7f7 fcb4 	bl	9000d0c0 <pbuf_clen>
90015758:	4603      	mov	r3, r0
9001575a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
9001575c:	8bfa      	ldrh	r2, [r7, #30]
9001575e:	8a7b      	ldrh	r3, [r7, #18]
90015760:	4413      	add	r3, r2
90015762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90015766:	db05      	blt.n	90015774 <ip_reass_free_complete_datagram+0xe0>
90015768:	4b15      	ldr	r3, [pc, #84]	; (900157c0 <ip_reass_free_complete_datagram+0x12c>)
9001576a:	22cc      	movs	r2, #204	; 0xcc
9001576c:	4918      	ldr	r1, [pc, #96]	; (900157d0 <ip_reass_free_complete_datagram+0x13c>)
9001576e:	4816      	ldr	r0, [pc, #88]	; (900157c8 <ip_reass_free_complete_datagram+0x134>)
90015770:	f001 fa66 	bl	90016c40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
90015774:	8bfa      	ldrh	r2, [r7, #30]
90015776:	8a7b      	ldrh	r3, [r7, #18]
90015778:	4413      	add	r3, r2
9001577a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
9001577c:	68f8      	ldr	r0, [r7, #12]
9001577e:	f7f7 fc11 	bl	9000cfa4 <pbuf_free>
  while (p != NULL) {
90015782:	69bb      	ldr	r3, [r7, #24]
90015784:	2b00      	cmp	r3, #0
90015786:	d1dc      	bne.n	90015742 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
90015788:	6839      	ldr	r1, [r7, #0]
9001578a:	6878      	ldr	r0, [r7, #4]
9001578c:	f000 f8c2 	bl	90015914 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
90015790:	4b10      	ldr	r3, [pc, #64]	; (900157d4 <ip_reass_free_complete_datagram+0x140>)
90015792:	881b      	ldrh	r3, [r3, #0]
90015794:	8bfa      	ldrh	r2, [r7, #30]
90015796:	429a      	cmp	r2, r3
90015798:	d905      	bls.n	900157a6 <ip_reass_free_complete_datagram+0x112>
9001579a:	4b09      	ldr	r3, [pc, #36]	; (900157c0 <ip_reass_free_complete_datagram+0x12c>)
9001579c:	22d2      	movs	r2, #210	; 0xd2
9001579e:	490e      	ldr	r1, [pc, #56]	; (900157d8 <ip_reass_free_complete_datagram+0x144>)
900157a0:	4809      	ldr	r0, [pc, #36]	; (900157c8 <ip_reass_free_complete_datagram+0x134>)
900157a2:	f001 fa4d 	bl	90016c40 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
900157a6:	4b0b      	ldr	r3, [pc, #44]	; (900157d4 <ip_reass_free_complete_datagram+0x140>)
900157a8:	881a      	ldrh	r2, [r3, #0]
900157aa:	8bfb      	ldrh	r3, [r7, #30]
900157ac:	1ad3      	subs	r3, r2, r3
900157ae:	b29a      	uxth	r2, r3
900157b0:	4b08      	ldr	r3, [pc, #32]	; (900157d4 <ip_reass_free_complete_datagram+0x140>)
900157b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
900157b4:	8bfb      	ldrh	r3, [r7, #30]
}
900157b6:	4618      	mov	r0, r3
900157b8:	3720      	adds	r7, #32
900157ba:	46bd      	mov	sp, r7
900157bc:	bd80      	pop	{r7, pc}
900157be:	bf00      	nop
900157c0:	9001ad0c 	.word	0x9001ad0c
900157c4:	9001ad48 	.word	0x9001ad48
900157c8:	9001ad54 	.word	0x9001ad54
900157cc:	9001ad7c 	.word	0x9001ad7c
900157d0:	9001ad90 	.word	0x9001ad90
900157d4:	2000d720 	.word	0x2000d720
900157d8:	9001adb0 	.word	0x9001adb0

900157dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
900157dc:	b580      	push	{r7, lr}
900157de:	b08a      	sub	sp, #40	; 0x28
900157e0:	af00      	add	r7, sp, #0
900157e2:	6078      	str	r0, [r7, #4]
900157e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
900157e6:	2300      	movs	r3, #0
900157e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
900157ea:	2300      	movs	r3, #0
900157ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
900157ee:	2300      	movs	r3, #0
900157f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
900157f2:	2300      	movs	r3, #0
900157f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
900157f6:	2300      	movs	r3, #0
900157f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
900157fa:	4b28      	ldr	r3, [pc, #160]	; (9001589c <ip_reass_remove_oldest_datagram+0xc0>)
900157fc:	681b      	ldr	r3, [r3, #0]
900157fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
90015800:	e030      	b.n	90015864 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
90015802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015804:	695a      	ldr	r2, [r3, #20]
90015806:	687b      	ldr	r3, [r7, #4]
90015808:	68db      	ldr	r3, [r3, #12]
9001580a:	429a      	cmp	r2, r3
9001580c:	d10c      	bne.n	90015828 <ip_reass_remove_oldest_datagram+0x4c>
9001580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015810:	699a      	ldr	r2, [r3, #24]
90015812:	687b      	ldr	r3, [r7, #4]
90015814:	691b      	ldr	r3, [r3, #16]
90015816:	429a      	cmp	r2, r3
90015818:	d106      	bne.n	90015828 <ip_reass_remove_oldest_datagram+0x4c>
9001581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001581c:	899a      	ldrh	r2, [r3, #12]
9001581e:	687b      	ldr	r3, [r7, #4]
90015820:	889b      	ldrh	r3, [r3, #4]
90015822:	b29b      	uxth	r3, r3
90015824:	429a      	cmp	r2, r3
90015826:	d014      	beq.n	90015852 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
90015828:	693b      	ldr	r3, [r7, #16]
9001582a:	3301      	adds	r3, #1
9001582c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
9001582e:	6a3b      	ldr	r3, [r7, #32]
90015830:	2b00      	cmp	r3, #0
90015832:	d104      	bne.n	9001583e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
90015834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015836:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
90015838:	69fb      	ldr	r3, [r7, #28]
9001583a:	61bb      	str	r3, [r7, #24]
9001583c:	e009      	b.n	90015852 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
9001583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015840:	7fda      	ldrb	r2, [r3, #31]
90015842:	6a3b      	ldr	r3, [r7, #32]
90015844:	7fdb      	ldrb	r3, [r3, #31]
90015846:	429a      	cmp	r2, r3
90015848:	d803      	bhi.n	90015852 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
9001584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001584c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
9001584e:	69fb      	ldr	r3, [r7, #28]
90015850:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
90015852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015854:	681b      	ldr	r3, [r3, #0]
90015856:	2b00      	cmp	r3, #0
90015858:	d001      	beq.n	9001585e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
9001585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001585c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
9001585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015860:	681b      	ldr	r3, [r3, #0]
90015862:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
90015864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015866:	2b00      	cmp	r3, #0
90015868:	d1cb      	bne.n	90015802 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
9001586a:	6a3b      	ldr	r3, [r7, #32]
9001586c:	2b00      	cmp	r3, #0
9001586e:	d008      	beq.n	90015882 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
90015870:	69b9      	ldr	r1, [r7, #24]
90015872:	6a38      	ldr	r0, [r7, #32]
90015874:	f7ff ff0e 	bl	90015694 <ip_reass_free_complete_datagram>
90015878:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
9001587a:	697a      	ldr	r2, [r7, #20]
9001587c:	68fb      	ldr	r3, [r7, #12]
9001587e:	4413      	add	r3, r2
90015880:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
90015882:	697a      	ldr	r2, [r7, #20]
90015884:	683b      	ldr	r3, [r7, #0]
90015886:	429a      	cmp	r2, r3
90015888:	da02      	bge.n	90015890 <ip_reass_remove_oldest_datagram+0xb4>
9001588a:	693b      	ldr	r3, [r7, #16]
9001588c:	2b01      	cmp	r3, #1
9001588e:	dcac      	bgt.n	900157ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
90015890:	697b      	ldr	r3, [r7, #20]
}
90015892:	4618      	mov	r0, r3
90015894:	3728      	adds	r7, #40	; 0x28
90015896:	46bd      	mov	sp, r7
90015898:	bd80      	pop	{r7, pc}
9001589a:	bf00      	nop
9001589c:	2000d71c 	.word	0x2000d71c

900158a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
900158a0:	b580      	push	{r7, lr}
900158a2:	b084      	sub	sp, #16
900158a4:	af00      	add	r7, sp, #0
900158a6:	6078      	str	r0, [r7, #4]
900158a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
900158aa:	2004      	movs	r0, #4
900158ac:	f7f6 fc84 	bl	9000c1b8 <memp_malloc>
900158b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
900158b2:	68fb      	ldr	r3, [r7, #12]
900158b4:	2b00      	cmp	r3, #0
900158b6:	d110      	bne.n	900158da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
900158b8:	6839      	ldr	r1, [r7, #0]
900158ba:	6878      	ldr	r0, [r7, #4]
900158bc:	f7ff ff8e 	bl	900157dc <ip_reass_remove_oldest_datagram>
900158c0:	4602      	mov	r2, r0
900158c2:	683b      	ldr	r3, [r7, #0]
900158c4:	4293      	cmp	r3, r2
900158c6:	dc03      	bgt.n	900158d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
900158c8:	2004      	movs	r0, #4
900158ca:	f7f6 fc75 	bl	9000c1b8 <memp_malloc>
900158ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
900158d0:	68fb      	ldr	r3, [r7, #12]
900158d2:	2b00      	cmp	r3, #0
900158d4:	d101      	bne.n	900158da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
900158d6:	2300      	movs	r3, #0
900158d8:	e016      	b.n	90015908 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
900158da:	2220      	movs	r2, #32
900158dc:	2100      	movs	r1, #0
900158de:	68f8      	ldr	r0, [r7, #12]
900158e0:	f001 f8c6 	bl	90016a70 <memset>
  ipr->timer = IP_REASS_MAXAGE;
900158e4:	68fb      	ldr	r3, [r7, #12]
900158e6:	220f      	movs	r2, #15
900158e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
900158ea:	4b09      	ldr	r3, [pc, #36]	; (90015910 <ip_reass_enqueue_new_datagram+0x70>)
900158ec:	681a      	ldr	r2, [r3, #0]
900158ee:	68fb      	ldr	r3, [r7, #12]
900158f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
900158f2:	4a07      	ldr	r2, [pc, #28]	; (90015910 <ip_reass_enqueue_new_datagram+0x70>)
900158f4:	68fb      	ldr	r3, [r7, #12]
900158f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
900158f8:	68fb      	ldr	r3, [r7, #12]
900158fa:	3308      	adds	r3, #8
900158fc:	2214      	movs	r2, #20
900158fe:	6879      	ldr	r1, [r7, #4]
90015900:	4618      	mov	r0, r3
90015902:	f001 f8a7 	bl	90016a54 <memcpy>
  return ipr;
90015906:	68fb      	ldr	r3, [r7, #12]
}
90015908:	4618      	mov	r0, r3
9001590a:	3710      	adds	r7, #16
9001590c:	46bd      	mov	sp, r7
9001590e:	bd80      	pop	{r7, pc}
90015910:	2000d71c 	.word	0x2000d71c

90015914 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
90015914:	b580      	push	{r7, lr}
90015916:	b082      	sub	sp, #8
90015918:	af00      	add	r7, sp, #0
9001591a:	6078      	str	r0, [r7, #4]
9001591c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
9001591e:	4b10      	ldr	r3, [pc, #64]	; (90015960 <ip_reass_dequeue_datagram+0x4c>)
90015920:	681b      	ldr	r3, [r3, #0]
90015922:	687a      	ldr	r2, [r7, #4]
90015924:	429a      	cmp	r2, r3
90015926:	d104      	bne.n	90015932 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
90015928:	687b      	ldr	r3, [r7, #4]
9001592a:	681b      	ldr	r3, [r3, #0]
9001592c:	4a0c      	ldr	r2, [pc, #48]	; (90015960 <ip_reass_dequeue_datagram+0x4c>)
9001592e:	6013      	str	r3, [r2, #0]
90015930:	e00d      	b.n	9001594e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
90015932:	683b      	ldr	r3, [r7, #0]
90015934:	2b00      	cmp	r3, #0
90015936:	d106      	bne.n	90015946 <ip_reass_dequeue_datagram+0x32>
90015938:	4b0a      	ldr	r3, [pc, #40]	; (90015964 <ip_reass_dequeue_datagram+0x50>)
9001593a:	f240 1245 	movw	r2, #325	; 0x145
9001593e:	490a      	ldr	r1, [pc, #40]	; (90015968 <ip_reass_dequeue_datagram+0x54>)
90015940:	480a      	ldr	r0, [pc, #40]	; (9001596c <ip_reass_dequeue_datagram+0x58>)
90015942:	f001 f97d 	bl	90016c40 <iprintf>
    prev->next = ipr->next;
90015946:	687b      	ldr	r3, [r7, #4]
90015948:	681a      	ldr	r2, [r3, #0]
9001594a:	683b      	ldr	r3, [r7, #0]
9001594c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
9001594e:	6879      	ldr	r1, [r7, #4]
90015950:	2004      	movs	r0, #4
90015952:	f7f6 fc83 	bl	9000c25c <memp_free>
}
90015956:	bf00      	nop
90015958:	3708      	adds	r7, #8
9001595a:	46bd      	mov	sp, r7
9001595c:	bd80      	pop	{r7, pc}
9001595e:	bf00      	nop
90015960:	2000d71c 	.word	0x2000d71c
90015964:	9001ad0c 	.word	0x9001ad0c
90015968:	9001add4 	.word	0x9001add4
9001596c:	9001ad54 	.word	0x9001ad54

90015970 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
90015970:	b580      	push	{r7, lr}
90015972:	b08c      	sub	sp, #48	; 0x30
90015974:	af00      	add	r7, sp, #0
90015976:	60f8      	str	r0, [r7, #12]
90015978:	60b9      	str	r1, [r7, #8]
9001597a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
9001597c:	2300      	movs	r3, #0
9001597e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
90015980:	2301      	movs	r3, #1
90015982:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
90015984:	68bb      	ldr	r3, [r7, #8]
90015986:	685b      	ldr	r3, [r3, #4]
90015988:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
9001598a:	69fb      	ldr	r3, [r7, #28]
9001598c:	885b      	ldrh	r3, [r3, #2]
9001598e:	b29b      	uxth	r3, r3
90015990:	4618      	mov	r0, r3
90015992:	f7f5 ff5b 	bl	9000b84c <lwip_htons>
90015996:	4603      	mov	r3, r0
90015998:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
9001599a:	69fb      	ldr	r3, [r7, #28]
9001599c:	781b      	ldrb	r3, [r3, #0]
9001599e:	f003 030f 	and.w	r3, r3, #15
900159a2:	b2db      	uxtb	r3, r3
900159a4:	009b      	lsls	r3, r3, #2
900159a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
900159a8:	7e7b      	ldrb	r3, [r7, #25]
900159aa:	b29b      	uxth	r3, r3
900159ac:	8b7a      	ldrh	r2, [r7, #26]
900159ae:	429a      	cmp	r2, r3
900159b0:	d202      	bcs.n	900159b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
900159b2:	f04f 33ff 	mov.w	r3, #4294967295
900159b6:	e135      	b.n	90015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
900159b8:	7e7b      	ldrb	r3, [r7, #25]
900159ba:	b29b      	uxth	r3, r3
900159bc:	8b7a      	ldrh	r2, [r7, #26]
900159be:	1ad3      	subs	r3, r2, r3
900159c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
900159c2:	69fb      	ldr	r3, [r7, #28]
900159c4:	88db      	ldrh	r3, [r3, #6]
900159c6:	b29b      	uxth	r3, r3
900159c8:	4618      	mov	r0, r3
900159ca:	f7f5 ff3f 	bl	9000b84c <lwip_htons>
900159ce:	4603      	mov	r3, r0
900159d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
900159d4:	b29b      	uxth	r3, r3
900159d6:	00db      	lsls	r3, r3, #3
900159d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
900159da:	68bb      	ldr	r3, [r7, #8]
900159dc:	685b      	ldr	r3, [r3, #4]
900159de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
900159e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900159e2:	2200      	movs	r2, #0
900159e4:	701a      	strb	r2, [r3, #0]
900159e6:	2200      	movs	r2, #0
900159e8:	705a      	strb	r2, [r3, #1]
900159ea:	2200      	movs	r2, #0
900159ec:	709a      	strb	r2, [r3, #2]
900159ee:	2200      	movs	r2, #0
900159f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
900159f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900159f4:	8afa      	ldrh	r2, [r7, #22]
900159f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
900159f8:	8afa      	ldrh	r2, [r7, #22]
900159fa:	8b7b      	ldrh	r3, [r7, #26]
900159fc:	4413      	add	r3, r2
900159fe:	b29a      	uxth	r2, r3
90015a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015a02:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
90015a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015a06:	88db      	ldrh	r3, [r3, #6]
90015a08:	b29b      	uxth	r3, r3
90015a0a:	8afa      	ldrh	r2, [r7, #22]
90015a0c:	429a      	cmp	r2, r3
90015a0e:	d902      	bls.n	90015a16 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
90015a10:	f04f 33ff 	mov.w	r3, #4294967295
90015a14:	e106      	b.n	90015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
90015a16:	68fb      	ldr	r3, [r7, #12]
90015a18:	685b      	ldr	r3, [r3, #4]
90015a1a:	627b      	str	r3, [r7, #36]	; 0x24
90015a1c:	e068      	b.n	90015af0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
90015a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015a20:	685b      	ldr	r3, [r3, #4]
90015a22:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
90015a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015a26:	889b      	ldrh	r3, [r3, #4]
90015a28:	b29a      	uxth	r2, r3
90015a2a:	693b      	ldr	r3, [r7, #16]
90015a2c:	889b      	ldrh	r3, [r3, #4]
90015a2e:	b29b      	uxth	r3, r3
90015a30:	429a      	cmp	r2, r3
90015a32:	d235      	bcs.n	90015aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
90015a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90015a38:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
90015a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015a3c:	2b00      	cmp	r3, #0
90015a3e:	d020      	beq.n	90015a82 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
90015a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015a42:	889b      	ldrh	r3, [r3, #4]
90015a44:	b29a      	uxth	r2, r3
90015a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015a48:	88db      	ldrh	r3, [r3, #6]
90015a4a:	b29b      	uxth	r3, r3
90015a4c:	429a      	cmp	r2, r3
90015a4e:	d307      	bcc.n	90015a60 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
90015a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015a52:	88db      	ldrh	r3, [r3, #6]
90015a54:	b29a      	uxth	r2, r3
90015a56:	693b      	ldr	r3, [r7, #16]
90015a58:	889b      	ldrh	r3, [r3, #4]
90015a5a:	b29b      	uxth	r3, r3
90015a5c:	429a      	cmp	r2, r3
90015a5e:	d902      	bls.n	90015a66 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
90015a60:	f04f 33ff 	mov.w	r3, #4294967295
90015a64:	e0de      	b.n	90015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
90015a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015a68:	68ba      	ldr	r2, [r7, #8]
90015a6a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
90015a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015a6e:	88db      	ldrh	r3, [r3, #6]
90015a70:	b29a      	uxth	r2, r3
90015a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015a74:	889b      	ldrh	r3, [r3, #4]
90015a76:	b29b      	uxth	r3, r3
90015a78:	429a      	cmp	r2, r3
90015a7a:	d03d      	beq.n	90015af8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
90015a7c:	2300      	movs	r3, #0
90015a7e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
90015a80:	e03a      	b.n	90015af8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
90015a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015a84:	88db      	ldrh	r3, [r3, #6]
90015a86:	b29a      	uxth	r2, r3
90015a88:	693b      	ldr	r3, [r7, #16]
90015a8a:	889b      	ldrh	r3, [r3, #4]
90015a8c:	b29b      	uxth	r3, r3
90015a8e:	429a      	cmp	r2, r3
90015a90:	d902      	bls.n	90015a98 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
90015a92:	f04f 33ff 	mov.w	r3, #4294967295
90015a96:	e0c5      	b.n	90015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
90015a98:	68fb      	ldr	r3, [r7, #12]
90015a9a:	68ba      	ldr	r2, [r7, #8]
90015a9c:	605a      	str	r2, [r3, #4]
      break;
90015a9e:	e02b      	b.n	90015af8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
90015aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015aa2:	889b      	ldrh	r3, [r3, #4]
90015aa4:	b29a      	uxth	r2, r3
90015aa6:	693b      	ldr	r3, [r7, #16]
90015aa8:	889b      	ldrh	r3, [r3, #4]
90015aaa:	b29b      	uxth	r3, r3
90015aac:	429a      	cmp	r2, r3
90015aae:	d102      	bne.n	90015ab6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
90015ab0:	f04f 33ff 	mov.w	r3, #4294967295
90015ab4:	e0b6      	b.n	90015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
90015ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015ab8:	889b      	ldrh	r3, [r3, #4]
90015aba:	b29a      	uxth	r2, r3
90015abc:	693b      	ldr	r3, [r7, #16]
90015abe:	88db      	ldrh	r3, [r3, #6]
90015ac0:	b29b      	uxth	r3, r3
90015ac2:	429a      	cmp	r2, r3
90015ac4:	d202      	bcs.n	90015acc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
90015ac6:	f04f 33ff 	mov.w	r3, #4294967295
90015aca:	e0ab      	b.n	90015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
90015acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015ace:	2b00      	cmp	r3, #0
90015ad0:	d009      	beq.n	90015ae6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
90015ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015ad4:	88db      	ldrh	r3, [r3, #6]
90015ad6:	b29a      	uxth	r2, r3
90015ad8:	693b      	ldr	r3, [r7, #16]
90015ada:	889b      	ldrh	r3, [r3, #4]
90015adc:	b29b      	uxth	r3, r3
90015ade:	429a      	cmp	r2, r3
90015ae0:	d001      	beq.n	90015ae6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
90015ae2:	2300      	movs	r3, #0
90015ae4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
90015ae6:	693b      	ldr	r3, [r7, #16]
90015ae8:	681b      	ldr	r3, [r3, #0]
90015aea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
90015aec:	693b      	ldr	r3, [r7, #16]
90015aee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
90015af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015af2:	2b00      	cmp	r3, #0
90015af4:	d193      	bne.n	90015a1e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
90015af6:	e000      	b.n	90015afa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
90015af8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
90015afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015afc:	2b00      	cmp	r3, #0
90015afe:	d12d      	bne.n	90015b5c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
90015b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015b02:	2b00      	cmp	r3, #0
90015b04:	d01c      	beq.n	90015b40 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
90015b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015b08:	88db      	ldrh	r3, [r3, #6]
90015b0a:	b29a      	uxth	r2, r3
90015b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015b0e:	889b      	ldrh	r3, [r3, #4]
90015b10:	b29b      	uxth	r3, r3
90015b12:	429a      	cmp	r2, r3
90015b14:	d906      	bls.n	90015b24 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
90015b16:	4b45      	ldr	r3, [pc, #276]	; (90015c2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90015b18:	f44f 72db 	mov.w	r2, #438	; 0x1b6
90015b1c:	4944      	ldr	r1, [pc, #272]	; (90015c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
90015b1e:	4845      	ldr	r0, [pc, #276]	; (90015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90015b20:	f001 f88e 	bl	90016c40 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
90015b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015b26:	68ba      	ldr	r2, [r7, #8]
90015b28:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
90015b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015b2c:	88db      	ldrh	r3, [r3, #6]
90015b2e:	b29a      	uxth	r2, r3
90015b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015b32:	889b      	ldrh	r3, [r3, #4]
90015b34:	b29b      	uxth	r3, r3
90015b36:	429a      	cmp	r2, r3
90015b38:	d010      	beq.n	90015b5c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
90015b3a:	2300      	movs	r3, #0
90015b3c:	623b      	str	r3, [r7, #32]
90015b3e:	e00d      	b.n	90015b5c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
90015b40:	68fb      	ldr	r3, [r7, #12]
90015b42:	685b      	ldr	r3, [r3, #4]
90015b44:	2b00      	cmp	r3, #0
90015b46:	d006      	beq.n	90015b56 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
90015b48:	4b38      	ldr	r3, [pc, #224]	; (90015c2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90015b4a:	f44f 72df 	mov.w	r2, #446	; 0x1be
90015b4e:	493a      	ldr	r1, [pc, #232]	; (90015c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
90015b50:	4838      	ldr	r0, [pc, #224]	; (90015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90015b52:	f001 f875 	bl	90016c40 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
90015b56:	68fb      	ldr	r3, [r7, #12]
90015b58:	68ba      	ldr	r2, [r7, #8]
90015b5a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
90015b5c:	687b      	ldr	r3, [r7, #4]
90015b5e:	2b00      	cmp	r3, #0
90015b60:	d105      	bne.n	90015b6e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
90015b62:	68fb      	ldr	r3, [r7, #12]
90015b64:	7f9b      	ldrb	r3, [r3, #30]
90015b66:	f003 0301 	and.w	r3, r3, #1
90015b6a:	2b00      	cmp	r3, #0
90015b6c:	d059      	beq.n	90015c22 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
90015b6e:	6a3b      	ldr	r3, [r7, #32]
90015b70:	2b00      	cmp	r3, #0
90015b72:	d04f      	beq.n	90015c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
90015b74:	68fb      	ldr	r3, [r7, #12]
90015b76:	685b      	ldr	r3, [r3, #4]
90015b78:	2b00      	cmp	r3, #0
90015b7a:	d006      	beq.n	90015b8a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
90015b7c:	68fb      	ldr	r3, [r7, #12]
90015b7e:	685b      	ldr	r3, [r3, #4]
90015b80:	685b      	ldr	r3, [r3, #4]
90015b82:	889b      	ldrh	r3, [r3, #4]
90015b84:	b29b      	uxth	r3, r3
90015b86:	2b00      	cmp	r3, #0
90015b88:	d002      	beq.n	90015b90 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
90015b8a:	2300      	movs	r3, #0
90015b8c:	623b      	str	r3, [r7, #32]
90015b8e:	e041      	b.n	90015c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
90015b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015b92:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
90015b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015b96:	681b      	ldr	r3, [r3, #0]
90015b98:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
90015b9a:	e012      	b.n	90015bc2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
90015b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015b9e:	685b      	ldr	r3, [r3, #4]
90015ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
90015ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015ba4:	88db      	ldrh	r3, [r3, #6]
90015ba6:	b29a      	uxth	r2, r3
90015ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015baa:	889b      	ldrh	r3, [r3, #4]
90015bac:	b29b      	uxth	r3, r3
90015bae:	429a      	cmp	r2, r3
90015bb0:	d002      	beq.n	90015bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
90015bb2:	2300      	movs	r3, #0
90015bb4:	623b      	str	r3, [r7, #32]
            break;
90015bb6:	e007      	b.n	90015bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
90015bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015bba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
90015bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015bbe:	681b      	ldr	r3, [r3, #0]
90015bc0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
90015bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015bc4:	2b00      	cmp	r3, #0
90015bc6:	d1e9      	bne.n	90015b9c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
90015bc8:	6a3b      	ldr	r3, [r7, #32]
90015bca:	2b00      	cmp	r3, #0
90015bcc:	d022      	beq.n	90015c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
90015bce:	68fb      	ldr	r3, [r7, #12]
90015bd0:	685b      	ldr	r3, [r3, #4]
90015bd2:	2b00      	cmp	r3, #0
90015bd4:	d106      	bne.n	90015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
90015bd6:	4b15      	ldr	r3, [pc, #84]	; (90015c2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90015bd8:	f240 12df 	movw	r2, #479	; 0x1df
90015bdc:	4917      	ldr	r1, [pc, #92]	; (90015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
90015bde:	4815      	ldr	r0, [pc, #84]	; (90015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90015be0:	f001 f82e 	bl	90016c40 <iprintf>
          LWIP_ASSERT("sanity check",
90015be4:	68fb      	ldr	r3, [r7, #12]
90015be6:	685b      	ldr	r3, [r3, #4]
90015be8:	685b      	ldr	r3, [r3, #4]
90015bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90015bec:	429a      	cmp	r2, r3
90015bee:	d106      	bne.n	90015bfe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
90015bf0:	4b0e      	ldr	r3, [pc, #56]	; (90015c2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90015bf2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90015bf6:	4911      	ldr	r1, [pc, #68]	; (90015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
90015bf8:	480e      	ldr	r0, [pc, #56]	; (90015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90015bfa:	f001 f821 	bl	90016c40 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
90015bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015c00:	681b      	ldr	r3, [r3, #0]
90015c02:	2b00      	cmp	r3, #0
90015c04:	d006      	beq.n	90015c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
90015c06:	4b09      	ldr	r3, [pc, #36]	; (90015c2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90015c08:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
90015c0c:	490c      	ldr	r1, [pc, #48]	; (90015c40 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
90015c0e:	4809      	ldr	r0, [pc, #36]	; (90015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90015c10:	f001 f816 	bl	90016c40 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
90015c14:	6a3b      	ldr	r3, [r7, #32]
90015c16:	2b00      	cmp	r3, #0
90015c18:	bf14      	ite	ne
90015c1a:	2301      	movne	r3, #1
90015c1c:	2300      	moveq	r3, #0
90015c1e:	b2db      	uxtb	r3, r3
90015c20:	e000      	b.n	90015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
90015c22:	2300      	movs	r3, #0
}
90015c24:	4618      	mov	r0, r3
90015c26:	3730      	adds	r7, #48	; 0x30
90015c28:	46bd      	mov	sp, r7
90015c2a:	bd80      	pop	{r7, pc}
90015c2c:	9001ad0c 	.word	0x9001ad0c
90015c30:	9001adf0 	.word	0x9001adf0
90015c34:	9001ad54 	.word	0x9001ad54
90015c38:	9001ae10 	.word	0x9001ae10
90015c3c:	9001ae48 	.word	0x9001ae48
90015c40:	9001ae58 	.word	0x9001ae58

90015c44 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
90015c44:	b580      	push	{r7, lr}
90015c46:	b08e      	sub	sp, #56	; 0x38
90015c48:	af00      	add	r7, sp, #0
90015c4a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
90015c4c:	687b      	ldr	r3, [r7, #4]
90015c4e:	685b      	ldr	r3, [r3, #4]
90015c50:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
90015c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015c54:	781b      	ldrb	r3, [r3, #0]
90015c56:	f003 030f 	and.w	r3, r3, #15
90015c5a:	b2db      	uxtb	r3, r3
90015c5c:	009b      	lsls	r3, r3, #2
90015c5e:	b2db      	uxtb	r3, r3
90015c60:	2b14      	cmp	r3, #20
90015c62:	f040 8171 	bne.w	90015f48 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
90015c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015c68:	88db      	ldrh	r3, [r3, #6]
90015c6a:	b29b      	uxth	r3, r3
90015c6c:	4618      	mov	r0, r3
90015c6e:	f7f5 fded 	bl	9000b84c <lwip_htons>
90015c72:	4603      	mov	r3, r0
90015c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
90015c78:	b29b      	uxth	r3, r3
90015c7a:	00db      	lsls	r3, r3, #3
90015c7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
90015c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015c80:	885b      	ldrh	r3, [r3, #2]
90015c82:	b29b      	uxth	r3, r3
90015c84:	4618      	mov	r0, r3
90015c86:	f7f5 fde1 	bl	9000b84c <lwip_htons>
90015c8a:	4603      	mov	r3, r0
90015c8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
90015c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015c90:	781b      	ldrb	r3, [r3, #0]
90015c92:	f003 030f 	and.w	r3, r3, #15
90015c96:	b2db      	uxtb	r3, r3
90015c98:	009b      	lsls	r3, r3, #2
90015c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
90015c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
90015ca2:	b29b      	uxth	r3, r3
90015ca4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90015ca6:	429a      	cmp	r2, r3
90015ca8:	f0c0 8150 	bcc.w	90015f4c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
90015cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
90015cb0:	b29b      	uxth	r3, r3
90015cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90015cb4:	1ad3      	subs	r3, r2, r3
90015cb6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
90015cb8:	6878      	ldr	r0, [r7, #4]
90015cba:	f7f7 fa01 	bl	9000d0c0 <pbuf_clen>
90015cbe:	4603      	mov	r3, r0
90015cc0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
90015cc2:	4b8c      	ldr	r3, [pc, #560]	; (90015ef4 <ip4_reass+0x2b0>)
90015cc4:	881b      	ldrh	r3, [r3, #0]
90015cc6:	461a      	mov	r2, r3
90015cc8:	8c3b      	ldrh	r3, [r7, #32]
90015cca:	4413      	add	r3, r2
90015ccc:	2b0a      	cmp	r3, #10
90015cce:	dd10      	ble.n	90015cf2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
90015cd0:	8c3b      	ldrh	r3, [r7, #32]
90015cd2:	4619      	mov	r1, r3
90015cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90015cd6:	f7ff fd81 	bl	900157dc <ip_reass_remove_oldest_datagram>
90015cda:	4603      	mov	r3, r0
90015cdc:	2b00      	cmp	r3, #0
90015cde:	f000 8137 	beq.w	90015f50 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
90015ce2:	4b84      	ldr	r3, [pc, #528]	; (90015ef4 <ip4_reass+0x2b0>)
90015ce4:	881b      	ldrh	r3, [r3, #0]
90015ce6:	461a      	mov	r2, r3
90015ce8:	8c3b      	ldrh	r3, [r7, #32]
90015cea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
90015cec:	2b0a      	cmp	r3, #10
90015cee:	f300 812f 	bgt.w	90015f50 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
90015cf2:	4b81      	ldr	r3, [pc, #516]	; (90015ef8 <ip4_reass+0x2b4>)
90015cf4:	681b      	ldr	r3, [r3, #0]
90015cf6:	633b      	str	r3, [r7, #48]	; 0x30
90015cf8:	e015      	b.n	90015d26 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
90015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015cfc:	695a      	ldr	r2, [r3, #20]
90015cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015d00:	68db      	ldr	r3, [r3, #12]
90015d02:	429a      	cmp	r2, r3
90015d04:	d10c      	bne.n	90015d20 <ip4_reass+0xdc>
90015d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015d08:	699a      	ldr	r2, [r3, #24]
90015d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015d0c:	691b      	ldr	r3, [r3, #16]
90015d0e:	429a      	cmp	r2, r3
90015d10:	d106      	bne.n	90015d20 <ip4_reass+0xdc>
90015d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015d14:	899a      	ldrh	r2, [r3, #12]
90015d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015d18:	889b      	ldrh	r3, [r3, #4]
90015d1a:	b29b      	uxth	r3, r3
90015d1c:	429a      	cmp	r2, r3
90015d1e:	d006      	beq.n	90015d2e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
90015d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015d22:	681b      	ldr	r3, [r3, #0]
90015d24:	633b      	str	r3, [r7, #48]	; 0x30
90015d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015d28:	2b00      	cmp	r3, #0
90015d2a:	d1e6      	bne.n	90015cfa <ip4_reass+0xb6>
90015d2c:	e000      	b.n	90015d30 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
90015d2e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
90015d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015d32:	2b00      	cmp	r3, #0
90015d34:	d109      	bne.n	90015d4a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
90015d36:	8c3b      	ldrh	r3, [r7, #32]
90015d38:	4619      	mov	r1, r3
90015d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90015d3c:	f7ff fdb0 	bl	900158a0 <ip_reass_enqueue_new_datagram>
90015d40:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
90015d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015d44:	2b00      	cmp	r3, #0
90015d46:	d11c      	bne.n	90015d82 <ip4_reass+0x13e>
      goto nullreturn;
90015d48:	e105      	b.n	90015f56 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
90015d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015d4c:	88db      	ldrh	r3, [r3, #6]
90015d4e:	b29b      	uxth	r3, r3
90015d50:	4618      	mov	r0, r3
90015d52:	f7f5 fd7b 	bl	9000b84c <lwip_htons>
90015d56:	4603      	mov	r3, r0
90015d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
90015d5c:	2b00      	cmp	r3, #0
90015d5e:	d110      	bne.n	90015d82 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
90015d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015d62:	89db      	ldrh	r3, [r3, #14]
90015d64:	4618      	mov	r0, r3
90015d66:	f7f5 fd71 	bl	9000b84c <lwip_htons>
90015d6a:	4603      	mov	r3, r0
90015d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
90015d70:	2b00      	cmp	r3, #0
90015d72:	d006      	beq.n	90015d82 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
90015d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015d76:	3308      	adds	r3, #8
90015d78:	2214      	movs	r2, #20
90015d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90015d7c:	4618      	mov	r0, r3
90015d7e:	f000 fe69 	bl	90016a54 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
90015d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015d84:	88db      	ldrh	r3, [r3, #6]
90015d86:	b29b      	uxth	r3, r3
90015d88:	f003 0320 	and.w	r3, r3, #32
90015d8c:	2b00      	cmp	r3, #0
90015d8e:	bf0c      	ite	eq
90015d90:	2301      	moveq	r3, #1
90015d92:	2300      	movne	r3, #0
90015d94:	b2db      	uxtb	r3, r3
90015d96:	61fb      	str	r3, [r7, #28]
  if (is_last) {
90015d98:	69fb      	ldr	r3, [r7, #28]
90015d9a:	2b00      	cmp	r3, #0
90015d9c:	d00e      	beq.n	90015dbc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
90015d9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
90015da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90015da2:	4413      	add	r3, r2
90015da4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
90015da6:	8b7a      	ldrh	r2, [r7, #26]
90015da8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
90015daa:	429a      	cmp	r2, r3
90015dac:	f0c0 80a0 	bcc.w	90015ef0 <ip4_reass+0x2ac>
90015db0:	8b7b      	ldrh	r3, [r7, #26]
90015db2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
90015db6:	4293      	cmp	r3, r2
90015db8:	f200 809a 	bhi.w	90015ef0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
90015dbc:	69fa      	ldr	r2, [r7, #28]
90015dbe:	6879      	ldr	r1, [r7, #4]
90015dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
90015dc2:	f7ff fdd5 	bl	90015970 <ip_reass_chain_frag_into_datagram_and_validate>
90015dc6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
90015dc8:	697b      	ldr	r3, [r7, #20]
90015dca:	f1b3 3fff 	cmp.w	r3, #4294967295
90015dce:	f000 809b 	beq.w	90015f08 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
90015dd2:	4b48      	ldr	r3, [pc, #288]	; (90015ef4 <ip4_reass+0x2b0>)
90015dd4:	881a      	ldrh	r2, [r3, #0]
90015dd6:	8c3b      	ldrh	r3, [r7, #32]
90015dd8:	4413      	add	r3, r2
90015dda:	b29a      	uxth	r2, r3
90015ddc:	4b45      	ldr	r3, [pc, #276]	; (90015ef4 <ip4_reass+0x2b0>)
90015dde:	801a      	strh	r2, [r3, #0]
  if (is_last) {
90015de0:	69fb      	ldr	r3, [r7, #28]
90015de2:	2b00      	cmp	r3, #0
90015de4:	d00d      	beq.n	90015e02 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
90015de6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
90015de8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90015dea:	4413      	add	r3, r2
90015dec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
90015dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015df0:	8a7a      	ldrh	r2, [r7, #18]
90015df2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
90015df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015df6:	7f9b      	ldrb	r3, [r3, #30]
90015df8:	f043 0301 	orr.w	r3, r3, #1
90015dfc:	b2da      	uxtb	r2, r3
90015dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015e00:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
90015e02:	697b      	ldr	r3, [r7, #20]
90015e04:	2b01      	cmp	r3, #1
90015e06:	d171      	bne.n	90015eec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
90015e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015e0a:	8b9b      	ldrh	r3, [r3, #28]
90015e0c:	3314      	adds	r3, #20
90015e0e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
90015e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015e12:	685b      	ldr	r3, [r3, #4]
90015e14:	685b      	ldr	r3, [r3, #4]
90015e16:	681b      	ldr	r3, [r3, #0]
90015e18:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
90015e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015e1c:	685b      	ldr	r3, [r3, #4]
90015e1e:	685b      	ldr	r3, [r3, #4]
90015e20:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
90015e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015e24:	3308      	adds	r3, #8
90015e26:	2214      	movs	r2, #20
90015e28:	4619      	mov	r1, r3
90015e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90015e2c:	f000 fe12 	bl	90016a54 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
90015e30:	8a3b      	ldrh	r3, [r7, #16]
90015e32:	4618      	mov	r0, r3
90015e34:	f7f5 fd0a 	bl	9000b84c <lwip_htons>
90015e38:	4603      	mov	r3, r0
90015e3a:	461a      	mov	r2, r3
90015e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015e3e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
90015e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015e42:	2200      	movs	r2, #0
90015e44:	719a      	strb	r2, [r3, #6]
90015e46:	2200      	movs	r2, #0
90015e48:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
90015e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90015e4c:	2200      	movs	r2, #0
90015e4e:	729a      	strb	r2, [r3, #10]
90015e50:	2200      	movs	r2, #0
90015e52:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
90015e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015e56:	685b      	ldr	r3, [r3, #4]
90015e58:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
90015e5a:	e00d      	b.n	90015e78 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
90015e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90015e5e:	685b      	ldr	r3, [r3, #4]
90015e60:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
90015e62:	2114      	movs	r1, #20
90015e64:	6b78      	ldr	r0, [r7, #52]	; 0x34
90015e66:	f7f7 f817 	bl	9000ce98 <pbuf_remove_header>
      pbuf_cat(p, r);
90015e6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
90015e6c:	6878      	ldr	r0, [r7, #4]
90015e6e:	f7f7 f967 	bl	9000d140 <pbuf_cat>
      r = iprh->next_pbuf;
90015e72:	68fb      	ldr	r3, [r7, #12]
90015e74:	681b      	ldr	r3, [r3, #0]
90015e76:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
90015e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90015e7a:	2b00      	cmp	r3, #0
90015e7c:	d1ee      	bne.n	90015e5c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
90015e7e:	4b1e      	ldr	r3, [pc, #120]	; (90015ef8 <ip4_reass+0x2b4>)
90015e80:	681b      	ldr	r3, [r3, #0]
90015e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90015e84:	429a      	cmp	r2, r3
90015e86:	d102      	bne.n	90015e8e <ip4_reass+0x24a>
      ipr_prev = NULL;
90015e88:	2300      	movs	r3, #0
90015e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
90015e8c:	e010      	b.n	90015eb0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
90015e8e:	4b1a      	ldr	r3, [pc, #104]	; (90015ef8 <ip4_reass+0x2b4>)
90015e90:	681b      	ldr	r3, [r3, #0]
90015e92:	62fb      	str	r3, [r7, #44]	; 0x2c
90015e94:	e007      	b.n	90015ea6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
90015e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015e98:	681b      	ldr	r3, [r3, #0]
90015e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90015e9c:	429a      	cmp	r2, r3
90015e9e:	d006      	beq.n	90015eae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
90015ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015ea2:	681b      	ldr	r3, [r3, #0]
90015ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
90015ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015ea8:	2b00      	cmp	r3, #0
90015eaa:	d1f4      	bne.n	90015e96 <ip4_reass+0x252>
90015eac:	e000      	b.n	90015eb0 <ip4_reass+0x26c>
          break;
90015eae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
90015eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
90015eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
90015eb4:	f7ff fd2e 	bl	90015914 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
90015eb8:	6878      	ldr	r0, [r7, #4]
90015eba:	f7f7 f901 	bl	9000d0c0 <pbuf_clen>
90015ebe:	4603      	mov	r3, r0
90015ec0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
90015ec2:	4b0c      	ldr	r3, [pc, #48]	; (90015ef4 <ip4_reass+0x2b0>)
90015ec4:	881b      	ldrh	r3, [r3, #0]
90015ec6:	8c3a      	ldrh	r2, [r7, #32]
90015ec8:	429a      	cmp	r2, r3
90015eca:	d906      	bls.n	90015eda <ip4_reass+0x296>
90015ecc:	4b0b      	ldr	r3, [pc, #44]	; (90015efc <ip4_reass+0x2b8>)
90015ece:	f240 229b 	movw	r2, #667	; 0x29b
90015ed2:	490b      	ldr	r1, [pc, #44]	; (90015f00 <ip4_reass+0x2bc>)
90015ed4:	480b      	ldr	r0, [pc, #44]	; (90015f04 <ip4_reass+0x2c0>)
90015ed6:	f000 feb3 	bl	90016c40 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
90015eda:	4b06      	ldr	r3, [pc, #24]	; (90015ef4 <ip4_reass+0x2b0>)
90015edc:	881a      	ldrh	r2, [r3, #0]
90015ede:	8c3b      	ldrh	r3, [r7, #32]
90015ee0:	1ad3      	subs	r3, r2, r3
90015ee2:	b29a      	uxth	r2, r3
90015ee4:	4b03      	ldr	r3, [pc, #12]	; (90015ef4 <ip4_reass+0x2b0>)
90015ee6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
90015ee8:	687b      	ldr	r3, [r7, #4]
90015eea:	e038      	b.n	90015f5e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
90015eec:	2300      	movs	r3, #0
90015eee:	e036      	b.n	90015f5e <ip4_reass+0x31a>
      goto nullreturn_ipr;
90015ef0:	bf00      	nop
90015ef2:	e00a      	b.n	90015f0a <ip4_reass+0x2c6>
90015ef4:	2000d720 	.word	0x2000d720
90015ef8:	2000d71c 	.word	0x2000d71c
90015efc:	9001ad0c 	.word	0x9001ad0c
90015f00:	9001ae7c 	.word	0x9001ae7c
90015f04:	9001ad54 	.word	0x9001ad54
    goto nullreturn_ipr;
90015f08:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
90015f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015f0c:	2b00      	cmp	r3, #0
90015f0e:	d106      	bne.n	90015f1e <ip4_reass+0x2da>
90015f10:	4b15      	ldr	r3, [pc, #84]	; (90015f68 <ip4_reass+0x324>)
90015f12:	f44f 722a 	mov.w	r2, #680	; 0x2a8
90015f16:	4915      	ldr	r1, [pc, #84]	; (90015f6c <ip4_reass+0x328>)
90015f18:	4815      	ldr	r0, [pc, #84]	; (90015f70 <ip4_reass+0x32c>)
90015f1a:	f000 fe91 	bl	90016c40 <iprintf>
  if (ipr->p == NULL) {
90015f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015f20:	685b      	ldr	r3, [r3, #4]
90015f22:	2b00      	cmp	r3, #0
90015f24:	d116      	bne.n	90015f54 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
90015f26:	4b13      	ldr	r3, [pc, #76]	; (90015f74 <ip4_reass+0x330>)
90015f28:	681b      	ldr	r3, [r3, #0]
90015f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90015f2c:	429a      	cmp	r2, r3
90015f2e:	d006      	beq.n	90015f3e <ip4_reass+0x2fa>
90015f30:	4b0d      	ldr	r3, [pc, #52]	; (90015f68 <ip4_reass+0x324>)
90015f32:	f240 22ab 	movw	r2, #683	; 0x2ab
90015f36:	4910      	ldr	r1, [pc, #64]	; (90015f78 <ip4_reass+0x334>)
90015f38:	480d      	ldr	r0, [pc, #52]	; (90015f70 <ip4_reass+0x32c>)
90015f3a:	f000 fe81 	bl	90016c40 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
90015f3e:	2100      	movs	r1, #0
90015f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
90015f42:	f7ff fce7 	bl	90015914 <ip_reass_dequeue_datagram>
90015f46:	e006      	b.n	90015f56 <ip4_reass+0x312>
    goto nullreturn;
90015f48:	bf00      	nop
90015f4a:	e004      	b.n	90015f56 <ip4_reass+0x312>
    goto nullreturn;
90015f4c:	bf00      	nop
90015f4e:	e002      	b.n	90015f56 <ip4_reass+0x312>
      goto nullreturn;
90015f50:	bf00      	nop
90015f52:	e000      	b.n	90015f56 <ip4_reass+0x312>
  }

nullreturn:
90015f54:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
90015f56:	6878      	ldr	r0, [r7, #4]
90015f58:	f7f7 f824 	bl	9000cfa4 <pbuf_free>
  return NULL;
90015f5c:	2300      	movs	r3, #0
}
90015f5e:	4618      	mov	r0, r3
90015f60:	3738      	adds	r7, #56	; 0x38
90015f62:	46bd      	mov	sp, r7
90015f64:	bd80      	pop	{r7, pc}
90015f66:	bf00      	nop
90015f68:	9001ad0c 	.word	0x9001ad0c
90015f6c:	9001ae98 	.word	0x9001ae98
90015f70:	9001ad54 	.word	0x9001ad54
90015f74:	2000d71c 	.word	0x2000d71c
90015f78:	9001aea4 	.word	0x9001aea4

90015f7c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
90015f7c:	b580      	push	{r7, lr}
90015f7e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
90015f80:	2005      	movs	r0, #5
90015f82:	f7f6 f919 	bl	9000c1b8 <memp_malloc>
90015f86:	4603      	mov	r3, r0
}
90015f88:	4618      	mov	r0, r3
90015f8a:	bd80      	pop	{r7, pc}

90015f8c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
90015f8c:	b580      	push	{r7, lr}
90015f8e:	b082      	sub	sp, #8
90015f90:	af00      	add	r7, sp, #0
90015f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
90015f94:	687b      	ldr	r3, [r7, #4]
90015f96:	2b00      	cmp	r3, #0
90015f98:	d106      	bne.n	90015fa8 <ip_frag_free_pbuf_custom_ref+0x1c>
90015f9a:	4b07      	ldr	r3, [pc, #28]	; (90015fb8 <ip_frag_free_pbuf_custom_ref+0x2c>)
90015f9c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
90015fa0:	4906      	ldr	r1, [pc, #24]	; (90015fbc <ip_frag_free_pbuf_custom_ref+0x30>)
90015fa2:	4807      	ldr	r0, [pc, #28]	; (90015fc0 <ip_frag_free_pbuf_custom_ref+0x34>)
90015fa4:	f000 fe4c 	bl	90016c40 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
90015fa8:	6879      	ldr	r1, [r7, #4]
90015faa:	2005      	movs	r0, #5
90015fac:	f7f6 f956 	bl	9000c25c <memp_free>
}
90015fb0:	bf00      	nop
90015fb2:	3708      	adds	r7, #8
90015fb4:	46bd      	mov	sp, r7
90015fb6:	bd80      	pop	{r7, pc}
90015fb8:	9001ad0c 	.word	0x9001ad0c
90015fbc:	9001aec4 	.word	0x9001aec4
90015fc0:	9001ad54 	.word	0x9001ad54

90015fc4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
90015fc4:	b580      	push	{r7, lr}
90015fc6:	b084      	sub	sp, #16
90015fc8:	af00      	add	r7, sp, #0
90015fca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
90015fcc:	687b      	ldr	r3, [r7, #4]
90015fce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
90015fd0:	68fb      	ldr	r3, [r7, #12]
90015fd2:	2b00      	cmp	r3, #0
90015fd4:	d106      	bne.n	90015fe4 <ipfrag_free_pbuf_custom+0x20>
90015fd6:	4b11      	ldr	r3, [pc, #68]	; (9001601c <ipfrag_free_pbuf_custom+0x58>)
90015fd8:	f240 22ce 	movw	r2, #718	; 0x2ce
90015fdc:	4910      	ldr	r1, [pc, #64]	; (90016020 <ipfrag_free_pbuf_custom+0x5c>)
90015fde:	4811      	ldr	r0, [pc, #68]	; (90016024 <ipfrag_free_pbuf_custom+0x60>)
90015fe0:	f000 fe2e 	bl	90016c40 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
90015fe4:	68fa      	ldr	r2, [r7, #12]
90015fe6:	687b      	ldr	r3, [r7, #4]
90015fe8:	429a      	cmp	r2, r3
90015fea:	d006      	beq.n	90015ffa <ipfrag_free_pbuf_custom+0x36>
90015fec:	4b0b      	ldr	r3, [pc, #44]	; (9001601c <ipfrag_free_pbuf_custom+0x58>)
90015fee:	f240 22cf 	movw	r2, #719	; 0x2cf
90015ff2:	490d      	ldr	r1, [pc, #52]	; (90016028 <ipfrag_free_pbuf_custom+0x64>)
90015ff4:	480b      	ldr	r0, [pc, #44]	; (90016024 <ipfrag_free_pbuf_custom+0x60>)
90015ff6:	f000 fe23 	bl	90016c40 <iprintf>
  if (pcr->original != NULL) {
90015ffa:	68fb      	ldr	r3, [r7, #12]
90015ffc:	695b      	ldr	r3, [r3, #20]
90015ffe:	2b00      	cmp	r3, #0
90016000:	d004      	beq.n	9001600c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
90016002:	68fb      	ldr	r3, [r7, #12]
90016004:	695b      	ldr	r3, [r3, #20]
90016006:	4618      	mov	r0, r3
90016008:	f7f6 ffcc 	bl	9000cfa4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
9001600c:	68f8      	ldr	r0, [r7, #12]
9001600e:	f7ff ffbd 	bl	90015f8c <ip_frag_free_pbuf_custom_ref>
}
90016012:	bf00      	nop
90016014:	3710      	adds	r7, #16
90016016:	46bd      	mov	sp, r7
90016018:	bd80      	pop	{r7, pc}
9001601a:	bf00      	nop
9001601c:	9001ad0c 	.word	0x9001ad0c
90016020:	9001aed0 	.word	0x9001aed0
90016024:	9001ad54 	.word	0x9001ad54
90016028:	9001aedc 	.word	0x9001aedc

9001602c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
9001602c:	b580      	push	{r7, lr}
9001602e:	b094      	sub	sp, #80	; 0x50
90016030:	af02      	add	r7, sp, #8
90016032:	60f8      	str	r0, [r7, #12]
90016034:	60b9      	str	r1, [r7, #8]
90016036:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
90016038:	2300      	movs	r3, #0
9001603a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
9001603e:	68bb      	ldr	r3, [r7, #8]
90016040:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
90016042:	3b14      	subs	r3, #20
90016044:	2b00      	cmp	r3, #0
90016046:	da00      	bge.n	9001604a <ip4_frag+0x1e>
90016048:	3307      	adds	r3, #7
9001604a:	10db      	asrs	r3, r3, #3
9001604c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
9001604e:	2314      	movs	r3, #20
90016050:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
90016052:	68fb      	ldr	r3, [r7, #12]
90016054:	685b      	ldr	r3, [r3, #4]
90016056:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
90016058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9001605a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
9001605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001605e:	781b      	ldrb	r3, [r3, #0]
90016060:	f003 030f 	and.w	r3, r3, #15
90016064:	b2db      	uxtb	r3, r3
90016066:	009b      	lsls	r3, r3, #2
90016068:	b2db      	uxtb	r3, r3
9001606a:	2b14      	cmp	r3, #20
9001606c:	d002      	beq.n	90016074 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
9001606e:	f06f 0305 	mvn.w	r3, #5
90016072:	e110      	b.n	90016296 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
90016074:	68fb      	ldr	r3, [r7, #12]
90016076:	895b      	ldrh	r3, [r3, #10]
90016078:	2b13      	cmp	r3, #19
9001607a:	d809      	bhi.n	90016090 <ip4_frag+0x64>
9001607c:	4b88      	ldr	r3, [pc, #544]	; (900162a0 <ip4_frag+0x274>)
9001607e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
90016082:	4988      	ldr	r1, [pc, #544]	; (900162a4 <ip4_frag+0x278>)
90016084:	4888      	ldr	r0, [pc, #544]	; (900162a8 <ip4_frag+0x27c>)
90016086:	f000 fddb 	bl	90016c40 <iprintf>
9001608a:	f06f 0305 	mvn.w	r3, #5
9001608e:	e102      	b.n	90016296 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
90016090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90016092:	88db      	ldrh	r3, [r3, #6]
90016094:	b29b      	uxth	r3, r3
90016096:	4618      	mov	r0, r3
90016098:	f7f5 fbd8 	bl	9000b84c <lwip_htons>
9001609c:	4603      	mov	r3, r0
9001609e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
900160a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
900160a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
900160a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
900160aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
900160ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900160b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
900160b2:	68fb      	ldr	r3, [r7, #12]
900160b4:	891b      	ldrh	r3, [r3, #8]
900160b6:	3b14      	subs	r3, #20
900160b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
900160bc:	e0e1      	b.n	90016282 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
900160be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
900160c0:	00db      	lsls	r3, r3, #3
900160c2:	b29b      	uxth	r3, r3
900160c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
900160c8:	4293      	cmp	r3, r2
900160ca:	bf28      	it	cs
900160cc:	4613      	movcs	r3, r2
900160ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
900160d0:	f44f 7220 	mov.w	r2, #640	; 0x280
900160d4:	2114      	movs	r1, #20
900160d6:	200e      	movs	r0, #14
900160d8:	f7f6 fc80 	bl	9000c9dc <pbuf_alloc>
900160dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
900160de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900160e0:	2b00      	cmp	r3, #0
900160e2:	f000 80d5 	beq.w	90016290 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
900160e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900160e8:	895b      	ldrh	r3, [r3, #10]
900160ea:	2b13      	cmp	r3, #19
900160ec:	d806      	bhi.n	900160fc <ip4_frag+0xd0>
900160ee:	4b6c      	ldr	r3, [pc, #432]	; (900162a0 <ip4_frag+0x274>)
900160f0:	f44f 7249 	mov.w	r2, #804	; 0x324
900160f4:	496d      	ldr	r1, [pc, #436]	; (900162ac <ip4_frag+0x280>)
900160f6:	486c      	ldr	r0, [pc, #432]	; (900162a8 <ip4_frag+0x27c>)
900160f8:	f000 fda2 	bl	90016c40 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
900160fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900160fe:	685b      	ldr	r3, [r3, #4]
90016100:	2214      	movs	r2, #20
90016102:	6b79      	ldr	r1, [r7, #52]	; 0x34
90016104:	4618      	mov	r0, r3
90016106:	f000 fca5 	bl	90016a54 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
9001610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001610c:	685b      	ldr	r3, [r3, #4]
9001610e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
90016110:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
90016112:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
90016116:	e064      	b.n	900161e2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
90016118:	68fb      	ldr	r3, [r7, #12]
9001611a:	895a      	ldrh	r2, [r3, #10]
9001611c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9001611e:	1ad3      	subs	r3, r2, r3
90016120:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
90016122:	68fb      	ldr	r3, [r7, #12]
90016124:	895b      	ldrh	r3, [r3, #10]
90016126:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
90016128:	429a      	cmp	r2, r3
9001612a:	d906      	bls.n	9001613a <ip4_frag+0x10e>
9001612c:	4b5c      	ldr	r3, [pc, #368]	; (900162a0 <ip4_frag+0x274>)
9001612e:	f240 322d 	movw	r2, #813	; 0x32d
90016132:	495f      	ldr	r1, [pc, #380]	; (900162b0 <ip4_frag+0x284>)
90016134:	485c      	ldr	r0, [pc, #368]	; (900162a8 <ip4_frag+0x27c>)
90016136:	f000 fd83 	bl	90016c40 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
9001613a:	8bfa      	ldrh	r2, [r7, #30]
9001613c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
90016140:	4293      	cmp	r3, r2
90016142:	bf28      	it	cs
90016144:	4613      	movcs	r3, r2
90016146:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
9001614a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
9001614e:	2b00      	cmp	r3, #0
90016150:	d105      	bne.n	9001615e <ip4_frag+0x132>
        poff = 0;
90016152:	2300      	movs	r3, #0
90016154:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
90016156:	68fb      	ldr	r3, [r7, #12]
90016158:	681b      	ldr	r3, [r3, #0]
9001615a:	60fb      	str	r3, [r7, #12]
        continue;
9001615c:	e041      	b.n	900161e2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
9001615e:	f7ff ff0d 	bl	90015f7c <ip_frag_alloc_pbuf_custom_ref>
90016162:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
90016164:	69bb      	ldr	r3, [r7, #24]
90016166:	2b00      	cmp	r3, #0
90016168:	d103      	bne.n	90016172 <ip4_frag+0x146>
        pbuf_free(rambuf);
9001616a:	6a78      	ldr	r0, [r7, #36]	; 0x24
9001616c:	f7f6 ff1a 	bl	9000cfa4 <pbuf_free>
        goto memerr;
90016170:	e08f      	b.n	90016292 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
90016172:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
90016174:	68fb      	ldr	r3, [r7, #12]
90016176:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
90016178:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9001617a:	4413      	add	r3, r2
9001617c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
90016180:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
90016184:	9201      	str	r2, [sp, #4]
90016186:	9300      	str	r3, [sp, #0]
90016188:	4603      	mov	r3, r0
9001618a:	2241      	movs	r2, #65	; 0x41
9001618c:	2000      	movs	r0, #0
9001618e:	f7f6 fd4f 	bl	9000cc30 <pbuf_alloced_custom>
90016192:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
90016194:	697b      	ldr	r3, [r7, #20]
90016196:	2b00      	cmp	r3, #0
90016198:	d106      	bne.n	900161a8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
9001619a:	69b8      	ldr	r0, [r7, #24]
9001619c:	f7ff fef6 	bl	90015f8c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
900161a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
900161a2:	f7f6 feff 	bl	9000cfa4 <pbuf_free>
        goto memerr;
900161a6:	e074      	b.n	90016292 <ip4_frag+0x266>
      }
      pbuf_ref(p);
900161a8:	68f8      	ldr	r0, [r7, #12]
900161aa:	f7f6 ffa1 	bl	9000d0f0 <pbuf_ref>
      pcr->original = p;
900161ae:	69bb      	ldr	r3, [r7, #24]
900161b0:	68fa      	ldr	r2, [r7, #12]
900161b2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
900161b4:	69bb      	ldr	r3, [r7, #24]
900161b6:	4a3f      	ldr	r2, [pc, #252]	; (900162b4 <ip4_frag+0x288>)
900161b8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
900161ba:	6979      	ldr	r1, [r7, #20]
900161bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
900161be:	f7f6 ffbf 	bl	9000d140 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
900161c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
900161c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
900161ca:	1ad3      	subs	r3, r2, r3
900161cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
900161d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
900161d4:	2b00      	cmp	r3, #0
900161d6:	d004      	beq.n	900161e2 <ip4_frag+0x1b6>
        poff = 0;
900161d8:	2300      	movs	r3, #0
900161da:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
900161dc:	68fb      	ldr	r3, [r7, #12]
900161de:	681b      	ldr	r3, [r3, #0]
900161e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
900161e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
900161e6:	2b00      	cmp	r3, #0
900161e8:	d196      	bne.n	90016118 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
900161ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
900161ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
900161f0:	4413      	add	r3, r2
900161f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
900161f4:	68bb      	ldr	r3, [r7, #8]
900161f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
900161f8:	f1a3 0213 	sub.w	r2, r3, #19
900161fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90016200:	429a      	cmp	r2, r3
90016202:	bfcc      	ite	gt
90016204:	2301      	movgt	r3, #1
90016206:	2300      	movle	r3, #0
90016208:	b2db      	uxtb	r3, r3
9001620a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
9001620c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
90016210:	f3c3 030c 	ubfx	r3, r3, #0, #13
90016214:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
90016216:	6a3b      	ldr	r3, [r7, #32]
90016218:	2b00      	cmp	r3, #0
9001621a:	d002      	beq.n	90016222 <ip4_frag+0x1f6>
9001621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001621e:	2b00      	cmp	r3, #0
90016220:	d003      	beq.n	9001622a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
90016222:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90016224:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
90016228:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
9001622a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9001622c:	4618      	mov	r0, r3
9001622e:	f7f5 fb0d 	bl	9000b84c <lwip_htons>
90016232:	4603      	mov	r3, r0
90016234:	461a      	mov	r2, r3
90016236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90016238:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
9001623a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
9001623c:	3314      	adds	r3, #20
9001623e:	b29b      	uxth	r3, r3
90016240:	4618      	mov	r0, r3
90016242:	f7f5 fb03 	bl	9000b84c <lwip_htons>
90016246:	4603      	mov	r3, r0
90016248:	461a      	mov	r2, r3
9001624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001624c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
9001624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90016250:	2200      	movs	r2, #0
90016252:	729a      	strb	r2, [r3, #10]
90016254:	2200      	movs	r2, #0
90016256:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
90016258:	68bb      	ldr	r3, [r7, #8]
9001625a:	695b      	ldr	r3, [r3, #20]
9001625c:	687a      	ldr	r2, [r7, #4]
9001625e:	6a79      	ldr	r1, [r7, #36]	; 0x24
90016260:	68b8      	ldr	r0, [r7, #8]
90016262:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
90016264:	6a78      	ldr	r0, [r7, #36]	; 0x24
90016266:	f7f6 fe9d 	bl	9000cfa4 <pbuf_free>
    left = (u16_t)(left - fragsize);
9001626a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9001626e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
90016270:	1ad3      	subs	r3, r2, r3
90016272:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
90016276:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
9001627a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
9001627c:	4413      	add	r3, r2
9001627e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
90016282:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90016286:	2b00      	cmp	r3, #0
90016288:	f47f af19 	bne.w	900160be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
9001628c:	2300      	movs	r3, #0
9001628e:	e002      	b.n	90016296 <ip4_frag+0x26a>
      goto memerr;
90016290:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
90016292:	f04f 33ff 	mov.w	r3, #4294967295
}
90016296:	4618      	mov	r0, r3
90016298:	3748      	adds	r7, #72	; 0x48
9001629a:	46bd      	mov	sp, r7
9001629c:	bd80      	pop	{r7, pc}
9001629e:	bf00      	nop
900162a0:	9001ad0c 	.word	0x9001ad0c
900162a4:	9001aee8 	.word	0x9001aee8
900162a8:	9001ad54 	.word	0x9001ad54
900162ac:	9001af04 	.word	0x9001af04
900162b0:	9001af24 	.word	0x9001af24
900162b4:	90015fc5 	.word	0x90015fc5

900162b8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
900162b8:	b580      	push	{r7, lr}
900162ba:	b086      	sub	sp, #24
900162bc:	af00      	add	r7, sp, #0
900162be:	6078      	str	r0, [r7, #4]
900162c0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
900162c2:	230e      	movs	r3, #14
900162c4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
900162c6:	687b      	ldr	r3, [r7, #4]
900162c8:	895b      	ldrh	r3, [r3, #10]
900162ca:	2b0e      	cmp	r3, #14
900162cc:	d96e      	bls.n	900163ac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
900162ce:	687b      	ldr	r3, [r7, #4]
900162d0:	7bdb      	ldrb	r3, [r3, #15]
900162d2:	2b00      	cmp	r3, #0
900162d4:	d106      	bne.n	900162e4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
900162d6:	683b      	ldr	r3, [r7, #0]
900162d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
900162dc:	3301      	adds	r3, #1
900162de:	b2da      	uxtb	r2, r3
900162e0:	687b      	ldr	r3, [r7, #4]
900162e2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
900162e4:	687b      	ldr	r3, [r7, #4]
900162e6:	685b      	ldr	r3, [r3, #4]
900162e8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
900162ea:	693b      	ldr	r3, [r7, #16]
900162ec:	7b1a      	ldrb	r2, [r3, #12]
900162ee:	7b5b      	ldrb	r3, [r3, #13]
900162f0:	021b      	lsls	r3, r3, #8
900162f2:	4313      	orrs	r3, r2
900162f4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
900162f6:	693b      	ldr	r3, [r7, #16]
900162f8:	781b      	ldrb	r3, [r3, #0]
900162fa:	f003 0301 	and.w	r3, r3, #1
900162fe:	2b00      	cmp	r3, #0
90016300:	d023      	beq.n	9001634a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
90016302:	693b      	ldr	r3, [r7, #16]
90016304:	781b      	ldrb	r3, [r3, #0]
90016306:	2b01      	cmp	r3, #1
90016308:	d10f      	bne.n	9001632a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
9001630a:	693b      	ldr	r3, [r7, #16]
9001630c:	785b      	ldrb	r3, [r3, #1]
9001630e:	2b00      	cmp	r3, #0
90016310:	d11b      	bne.n	9001634a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
90016312:	693b      	ldr	r3, [r7, #16]
90016314:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
90016316:	2b5e      	cmp	r3, #94	; 0x5e
90016318:	d117      	bne.n	9001634a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
9001631a:	687b      	ldr	r3, [r7, #4]
9001631c:	7b5b      	ldrb	r3, [r3, #13]
9001631e:	f043 0310 	orr.w	r3, r3, #16
90016322:	b2da      	uxtb	r2, r3
90016324:	687b      	ldr	r3, [r7, #4]
90016326:	735a      	strb	r2, [r3, #13]
90016328:	e00f      	b.n	9001634a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
9001632a:	693b      	ldr	r3, [r7, #16]
9001632c:	2206      	movs	r2, #6
9001632e:	4928      	ldr	r1, [pc, #160]	; (900163d0 <ethernet_input+0x118>)
90016330:	4618      	mov	r0, r3
90016332:	f000 fb7f 	bl	90016a34 <memcmp>
90016336:	4603      	mov	r3, r0
90016338:	2b00      	cmp	r3, #0
9001633a:	d106      	bne.n	9001634a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
9001633c:	687b      	ldr	r3, [r7, #4]
9001633e:	7b5b      	ldrb	r3, [r3, #13]
90016340:	f043 0308 	orr.w	r3, r3, #8
90016344:	b2da      	uxtb	r2, r3
90016346:	687b      	ldr	r3, [r7, #4]
90016348:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
9001634a:	89fb      	ldrh	r3, [r7, #14]
9001634c:	2b08      	cmp	r3, #8
9001634e:	d003      	beq.n	90016358 <ethernet_input+0xa0>
90016350:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
90016354:	d014      	beq.n	90016380 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
90016356:	e032      	b.n	900163be <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
90016358:	683b      	ldr	r3, [r7, #0]
9001635a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9001635e:	f003 0308 	and.w	r3, r3, #8
90016362:	2b00      	cmp	r3, #0
90016364:	d024      	beq.n	900163b0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
90016366:	8afb      	ldrh	r3, [r7, #22]
90016368:	4619      	mov	r1, r3
9001636a:	6878      	ldr	r0, [r7, #4]
9001636c:	f7f6 fd94 	bl	9000ce98 <pbuf_remove_header>
90016370:	4603      	mov	r3, r0
90016372:	2b00      	cmp	r3, #0
90016374:	d11e      	bne.n	900163b4 <ethernet_input+0xfc>
        ip4_input(p, netif);
90016376:	6839      	ldr	r1, [r7, #0]
90016378:	6878      	ldr	r0, [r7, #4]
9001637a:	f7fe ff21 	bl	900151c0 <ip4_input>
      break;
9001637e:	e013      	b.n	900163a8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
90016380:	683b      	ldr	r3, [r7, #0]
90016382:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90016386:	f003 0308 	and.w	r3, r3, #8
9001638a:	2b00      	cmp	r3, #0
9001638c:	d014      	beq.n	900163b8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
9001638e:	8afb      	ldrh	r3, [r7, #22]
90016390:	4619      	mov	r1, r3
90016392:	6878      	ldr	r0, [r7, #4]
90016394:	f7f6 fd80 	bl	9000ce98 <pbuf_remove_header>
90016398:	4603      	mov	r3, r0
9001639a:	2b00      	cmp	r3, #0
9001639c:	d10e      	bne.n	900163bc <ethernet_input+0x104>
        etharp_input(p, netif);
9001639e:	6839      	ldr	r1, [r7, #0]
900163a0:	6878      	ldr	r0, [r7, #4]
900163a2:	f7fe f8c1 	bl	90014528 <etharp_input>
      break;
900163a6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
900163a8:	2300      	movs	r3, #0
900163aa:	e00c      	b.n	900163c6 <ethernet_input+0x10e>
    goto free_and_return;
900163ac:	bf00      	nop
900163ae:	e006      	b.n	900163be <ethernet_input+0x106>
        goto free_and_return;
900163b0:	bf00      	nop
900163b2:	e004      	b.n	900163be <ethernet_input+0x106>
        goto free_and_return;
900163b4:	bf00      	nop
900163b6:	e002      	b.n	900163be <ethernet_input+0x106>
        goto free_and_return;
900163b8:	bf00      	nop
900163ba:	e000      	b.n	900163be <ethernet_input+0x106>
        goto free_and_return;
900163bc:	bf00      	nop

free_and_return:
  pbuf_free(p);
900163be:	6878      	ldr	r0, [r7, #4]
900163c0:	f7f6 fdf0 	bl	9000cfa4 <pbuf_free>
  return ERR_OK;
900163c4:	2300      	movs	r3, #0
}
900163c6:	4618      	mov	r0, r3
900163c8:	3718      	adds	r7, #24
900163ca:	46bd      	mov	sp, r7
900163cc:	bd80      	pop	{r7, pc}
900163ce:	bf00      	nop
900163d0:	9001bdd8 	.word	0x9001bdd8

900163d4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
900163d4:	b580      	push	{r7, lr}
900163d6:	b086      	sub	sp, #24
900163d8:	af00      	add	r7, sp, #0
900163da:	60f8      	str	r0, [r7, #12]
900163dc:	60b9      	str	r1, [r7, #8]
900163de:	607a      	str	r2, [r7, #4]
900163e0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
900163e2:	8c3b      	ldrh	r3, [r7, #32]
900163e4:	4618      	mov	r0, r3
900163e6:	f7f5 fa31 	bl	9000b84c <lwip_htons>
900163ea:	4603      	mov	r3, r0
900163ec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
900163ee:	210e      	movs	r1, #14
900163f0:	68b8      	ldr	r0, [r7, #8]
900163f2:	f7f6 fd41 	bl	9000ce78 <pbuf_add_header>
900163f6:	4603      	mov	r3, r0
900163f8:	2b00      	cmp	r3, #0
900163fa:	d125      	bne.n	90016448 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
900163fc:	68bb      	ldr	r3, [r7, #8]
900163fe:	685b      	ldr	r3, [r3, #4]
90016400:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
90016402:	693b      	ldr	r3, [r7, #16]
90016404:	8afa      	ldrh	r2, [r7, #22]
90016406:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
90016408:	693b      	ldr	r3, [r7, #16]
9001640a:	2206      	movs	r2, #6
9001640c:	6839      	ldr	r1, [r7, #0]
9001640e:	4618      	mov	r0, r3
90016410:	f000 fb20 	bl	90016a54 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
90016414:	693b      	ldr	r3, [r7, #16]
90016416:	3306      	adds	r3, #6
90016418:	2206      	movs	r2, #6
9001641a:	6879      	ldr	r1, [r7, #4]
9001641c:	4618      	mov	r0, r3
9001641e:	f000 fb19 	bl	90016a54 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
90016422:	68fb      	ldr	r3, [r7, #12]
90016424:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90016428:	2b06      	cmp	r3, #6
9001642a:	d006      	beq.n	9001643a <ethernet_output+0x66>
9001642c:	4b0a      	ldr	r3, [pc, #40]	; (90016458 <ethernet_output+0x84>)
9001642e:	f44f 7299 	mov.w	r2, #306	; 0x132
90016432:	490a      	ldr	r1, [pc, #40]	; (9001645c <ethernet_output+0x88>)
90016434:	480a      	ldr	r0, [pc, #40]	; (90016460 <ethernet_output+0x8c>)
90016436:	f000 fc03 	bl	90016c40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
9001643a:	68fb      	ldr	r3, [r7, #12]
9001643c:	699b      	ldr	r3, [r3, #24]
9001643e:	68b9      	ldr	r1, [r7, #8]
90016440:	68f8      	ldr	r0, [r7, #12]
90016442:	4798      	blx	r3
90016444:	4603      	mov	r3, r0
90016446:	e002      	b.n	9001644e <ethernet_output+0x7a>
      goto pbuf_header_failed;
90016448:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
9001644a:	f06f 0301 	mvn.w	r3, #1
}
9001644e:	4618      	mov	r0, r3
90016450:	3718      	adds	r7, #24
90016452:	46bd      	mov	sp, r7
90016454:	bd80      	pop	{r7, pc}
90016456:	bf00      	nop
90016458:	9001af34 	.word	0x9001af34
9001645c:	9001af6c 	.word	0x9001af6c
90016460:	9001afa0 	.word	0x9001afa0

90016464 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
90016464:	b580      	push	{r7, lr}
90016466:	b082      	sub	sp, #8
90016468:	af00      	add	r7, sp, #0
9001646a:	6078      	str	r0, [r7, #4]
9001646c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
9001646e:	683b      	ldr	r3, [r7, #0]
90016470:	2200      	movs	r2, #0
90016472:	2104      	movs	r1, #4
90016474:	4618      	mov	r0, r3
90016476:	f7ef facf 	bl	90005a18 <osMessageQueueNew>
9001647a:	4602      	mov	r2, r0
9001647c:	687b      	ldr	r3, [r7, #4]
9001647e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
90016480:	687b      	ldr	r3, [r7, #4]
90016482:	681b      	ldr	r3, [r3, #0]
90016484:	2b00      	cmp	r3, #0
90016486:	d102      	bne.n	9001648e <sys_mbox_new+0x2a>
    return ERR_MEM;
90016488:	f04f 33ff 	mov.w	r3, #4294967295
9001648c:	e000      	b.n	90016490 <sys_mbox_new+0x2c>

  return ERR_OK;
9001648e:	2300      	movs	r3, #0
}
90016490:	4618      	mov	r0, r3
90016492:	3708      	adds	r7, #8
90016494:	46bd      	mov	sp, r7
90016496:	bd80      	pop	{r7, pc}

90016498 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
90016498:	b580      	push	{r7, lr}
9001649a:	b082      	sub	sp, #8
9001649c:	af00      	add	r7, sp, #0
9001649e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
900164a0:	687b      	ldr	r3, [r7, #4]
900164a2:	681b      	ldr	r3, [r3, #0]
900164a4:	4618      	mov	r0, r3
900164a6:	f7ef fc23 	bl	90005cf0 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
900164aa:	687b      	ldr	r3, [r7, #4]
900164ac:	681b      	ldr	r3, [r3, #0]
900164ae:	4618      	mov	r0, r3
900164b0:	f7ef fc50 	bl	90005d54 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
900164b4:	bf00      	nop
900164b6:	3708      	adds	r7, #8
900164b8:	46bd      	mov	sp, r7
900164ba:	bd80      	pop	{r7, pc}

900164bc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
900164bc:	b580      	push	{r7, lr}
900164be:	b084      	sub	sp, #16
900164c0:	af00      	add	r7, sp, #0
900164c2:	6078      	str	r0, [r7, #4]
900164c4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
900164c6:	687b      	ldr	r3, [r7, #4]
900164c8:	6818      	ldr	r0, [r3, #0]
900164ca:	4639      	mov	r1, r7
900164cc:	2300      	movs	r3, #0
900164ce:	2200      	movs	r2, #0
900164d0:	f7ef fb28 	bl	90005b24 <osMessageQueuePut>
900164d4:	4603      	mov	r3, r0
900164d6:	2b00      	cmp	r3, #0
900164d8:	d102      	bne.n	900164e0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
900164da:	2300      	movs	r3, #0
900164dc:	73fb      	strb	r3, [r7, #15]
900164de:	e001      	b.n	900164e4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
900164e0:	23ff      	movs	r3, #255	; 0xff
900164e2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
900164e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
900164e8:	4618      	mov	r0, r3
900164ea:	3710      	adds	r7, #16
900164ec:	46bd      	mov	sp, r7
900164ee:	bd80      	pop	{r7, pc}

900164f0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
900164f0:	b580      	push	{r7, lr}
900164f2:	b086      	sub	sp, #24
900164f4:	af00      	add	r7, sp, #0
900164f6:	60f8      	str	r0, [r7, #12]
900164f8:	60b9      	str	r1, [r7, #8]
900164fa:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
900164fc:	f7ee feb8 	bl	90005270 <osKernelGetTickCount>
90016500:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
90016502:	687b      	ldr	r3, [r7, #4]
90016504:	2b00      	cmp	r3, #0
90016506:	d013      	beq.n	90016530 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
90016508:	68fb      	ldr	r3, [r7, #12]
9001650a:	6818      	ldr	r0, [r3, #0]
9001650c:	687b      	ldr	r3, [r7, #4]
9001650e:	2200      	movs	r2, #0
90016510:	68b9      	ldr	r1, [r7, #8]
90016512:	f7ef fb7b 	bl	90005c0c <osMessageQueueGet>
90016516:	6138      	str	r0, [r7, #16]
    if (status == osOK)
90016518:	693b      	ldr	r3, [r7, #16]
9001651a:	2b00      	cmp	r3, #0
9001651c:	d105      	bne.n	9001652a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
9001651e:	f7ee fea7 	bl	90005270 <osKernelGetTickCount>
90016522:	4602      	mov	r2, r0
90016524:	697b      	ldr	r3, [r7, #20]
90016526:	1ad3      	subs	r3, r2, r3
90016528:	e00f      	b.n	9001654a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
9001652a:	f04f 33ff 	mov.w	r3, #4294967295
9001652e:	e00c      	b.n	9001654a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
90016530:	68fb      	ldr	r3, [r7, #12]
90016532:	6818      	ldr	r0, [r3, #0]
90016534:	f04f 33ff 	mov.w	r3, #4294967295
90016538:	2200      	movs	r2, #0
9001653a:	68b9      	ldr	r1, [r7, #8]
9001653c:	f7ef fb66 	bl	90005c0c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
90016540:	f7ee fe96 	bl	90005270 <osKernelGetTickCount>
90016544:	4602      	mov	r2, r0
90016546:	697b      	ldr	r3, [r7, #20]
90016548:	1ad3      	subs	r3, r2, r3
#endif
  }
}
9001654a:	4618      	mov	r0, r3
9001654c:	3718      	adds	r7, #24
9001654e:	46bd      	mov	sp, r7
90016550:	bd80      	pop	{r7, pc}

90016552 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
90016552:	b580      	push	{r7, lr}
90016554:	b082      	sub	sp, #8
90016556:	af00      	add	r7, sp, #0
90016558:	6078      	str	r0, [r7, #4]
9001655a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
9001655c:	687b      	ldr	r3, [r7, #4]
9001655e:	6818      	ldr	r0, [r3, #0]
90016560:	2300      	movs	r3, #0
90016562:	2200      	movs	r2, #0
90016564:	6839      	ldr	r1, [r7, #0]
90016566:	f7ef fb51 	bl	90005c0c <osMessageQueueGet>
9001656a:	4603      	mov	r3, r0
9001656c:	2b00      	cmp	r3, #0
9001656e:	d101      	bne.n	90016574 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
90016570:	2300      	movs	r3, #0
90016572:	e001      	b.n	90016578 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
90016574:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
90016578:	4618      	mov	r0, r3
9001657a:	3708      	adds	r7, #8
9001657c:	46bd      	mov	sp, r7
9001657e:	bd80      	pop	{r7, pc}

90016580 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
90016580:	b480      	push	{r7}
90016582:	b083      	sub	sp, #12
90016584:	af00      	add	r7, sp, #0
90016586:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
90016588:	687b      	ldr	r3, [r7, #4]
9001658a:	681b      	ldr	r3, [r3, #0]
9001658c:	2b00      	cmp	r3, #0
9001658e:	d101      	bne.n	90016594 <sys_mbox_valid+0x14>
    return 0;
90016590:	2300      	movs	r3, #0
90016592:	e000      	b.n	90016596 <sys_mbox_valid+0x16>
  else
    return 1;
90016594:	2301      	movs	r3, #1
}
90016596:	4618      	mov	r0, r3
90016598:	370c      	adds	r7, #12
9001659a:	46bd      	mov	sp, r7
9001659c:	f85d 7b04 	ldr.w	r7, [sp], #4
900165a0:	4770      	bx	lr

900165a2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
900165a2:	b480      	push	{r7}
900165a4:	b083      	sub	sp, #12
900165a6:	af00      	add	r7, sp, #0
900165a8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
900165aa:	687b      	ldr	r3, [r7, #4]
900165ac:	2200      	movs	r2, #0
900165ae:	601a      	str	r2, [r3, #0]
}
900165b0:	bf00      	nop
900165b2:	370c      	adds	r7, #12
900165b4:	46bd      	mov	sp, r7
900165b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900165ba:	4770      	bx	lr

900165bc <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
900165bc:	b580      	push	{r7, lr}
900165be:	b082      	sub	sp, #8
900165c0:	af00      	add	r7, sp, #0
900165c2:	6078      	str	r0, [r7, #4]
900165c4:	460b      	mov	r3, r1
900165c6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
900165c8:	78fb      	ldrb	r3, [r7, #3]
900165ca:	2200      	movs	r2, #0
900165cc:	4619      	mov	r1, r3
900165ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
900165d2:	f7ef f891 	bl	900056f8 <osSemaphoreNew>
900165d6:	4602      	mov	r2, r0
900165d8:	687b      	ldr	r3, [r7, #4]
900165da:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
900165dc:	687b      	ldr	r3, [r7, #4]
900165de:	681b      	ldr	r3, [r3, #0]
900165e0:	2b00      	cmp	r3, #0
900165e2:	d102      	bne.n	900165ea <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
900165e4:	f04f 33ff 	mov.w	r3, #4294967295
900165e8:	e009      	b.n	900165fe <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
900165ea:	78fb      	ldrb	r3, [r7, #3]
900165ec:	2b00      	cmp	r3, #0
900165ee:	d105      	bne.n	900165fc <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
900165f0:	687b      	ldr	r3, [r7, #4]
900165f2:	681b      	ldr	r3, [r3, #0]
900165f4:	2100      	movs	r1, #0
900165f6:	4618      	mov	r0, r3
900165f8:	f7ef f91a 	bl	90005830 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
900165fc:	2300      	movs	r3, #0
}
900165fe:	4618      	mov	r0, r3
90016600:	3708      	adds	r7, #8
90016602:	46bd      	mov	sp, r7
90016604:	bd80      	pop	{r7, pc}

90016606 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
90016606:	b580      	push	{r7, lr}
90016608:	b084      	sub	sp, #16
9001660a:	af00      	add	r7, sp, #0
9001660c:	6078      	str	r0, [r7, #4]
9001660e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
90016610:	f7ee fe2e 	bl	90005270 <osKernelGetTickCount>
90016614:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
90016616:	683b      	ldr	r3, [r7, #0]
90016618:	2b00      	cmp	r3, #0
9001661a:	d011      	beq.n	90016640 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
9001661c:	687b      	ldr	r3, [r7, #4]
9001661e:	681b      	ldr	r3, [r3, #0]
90016620:	6839      	ldr	r1, [r7, #0]
90016622:	4618      	mov	r0, r3
90016624:	f7ef f904 	bl	90005830 <osSemaphoreAcquire>
90016628:	4603      	mov	r3, r0
9001662a:	2b00      	cmp	r3, #0
9001662c:	d105      	bne.n	9001663a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
9001662e:	f7ee fe1f 	bl	90005270 <osKernelGetTickCount>
90016632:	4602      	mov	r2, r0
90016634:	68fb      	ldr	r3, [r7, #12]
90016636:	1ad3      	subs	r3, r2, r3
90016638:	e012      	b.n	90016660 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
9001663a:	f04f 33ff 	mov.w	r3, #4294967295
9001663e:	e00f      	b.n	90016660 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
90016640:	bf00      	nop
90016642:	687b      	ldr	r3, [r7, #4]
90016644:	681b      	ldr	r3, [r3, #0]
90016646:	f04f 31ff 	mov.w	r1, #4294967295
9001664a:	4618      	mov	r0, r3
9001664c:	f7ef f8f0 	bl	90005830 <osSemaphoreAcquire>
90016650:	4603      	mov	r3, r0
90016652:	2b00      	cmp	r3, #0
90016654:	d1f5      	bne.n	90016642 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
90016656:	f7ee fe0b 	bl	90005270 <osKernelGetTickCount>
9001665a:	4602      	mov	r2, r0
9001665c:	68fb      	ldr	r3, [r7, #12]
9001665e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
90016660:	4618      	mov	r0, r3
90016662:	3710      	adds	r7, #16
90016664:	46bd      	mov	sp, r7
90016666:	bd80      	pop	{r7, pc}

90016668 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
90016668:	b580      	push	{r7, lr}
9001666a:	b082      	sub	sp, #8
9001666c:	af00      	add	r7, sp, #0
9001666e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
90016670:	687b      	ldr	r3, [r7, #4]
90016672:	681b      	ldr	r3, [r3, #0]
90016674:	4618      	mov	r0, r3
90016676:	f7ef f941 	bl	900058fc <osSemaphoreRelease>
}
9001667a:	bf00      	nop
9001667c:	3708      	adds	r7, #8
9001667e:	46bd      	mov	sp, r7
90016680:	bd80      	pop	{r7, pc}

90016682 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
90016682:	b580      	push	{r7, lr}
90016684:	b082      	sub	sp, #8
90016686:	af00      	add	r7, sp, #0
90016688:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
9001668a:	687b      	ldr	r3, [r7, #4]
9001668c:	681b      	ldr	r3, [r3, #0]
9001668e:	4618      	mov	r0, r3
90016690:	f7ef f98c 	bl	900059ac <osSemaphoreDelete>
}
90016694:	bf00      	nop
90016696:	3708      	adds	r7, #8
90016698:	46bd      	mov	sp, r7
9001669a:	bd80      	pop	{r7, pc}

9001669c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
9001669c:	b480      	push	{r7}
9001669e:	b083      	sub	sp, #12
900166a0:	af00      	add	r7, sp, #0
900166a2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
900166a4:	687b      	ldr	r3, [r7, #4]
900166a6:	681b      	ldr	r3, [r3, #0]
900166a8:	2b00      	cmp	r3, #0
900166aa:	d101      	bne.n	900166b0 <sys_sem_valid+0x14>
    return 0;
900166ac:	2300      	movs	r3, #0
900166ae:	e000      	b.n	900166b2 <sys_sem_valid+0x16>
  else
    return 1;
900166b0:	2301      	movs	r3, #1
}
900166b2:	4618      	mov	r0, r3
900166b4:	370c      	adds	r7, #12
900166b6:	46bd      	mov	sp, r7
900166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900166bc:	4770      	bx	lr

900166be <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
900166be:	b480      	push	{r7}
900166c0:	b083      	sub	sp, #12
900166c2:	af00      	add	r7, sp, #0
900166c4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
900166c6:	687b      	ldr	r3, [r7, #4]
900166c8:	2200      	movs	r2, #0
900166ca:	601a      	str	r2, [r3, #0]
}
900166cc:	bf00      	nop
900166ce:	370c      	adds	r7, #12
900166d0:	46bd      	mov	sp, r7
900166d2:	f85d 7b04 	ldr.w	r7, [sp], #4
900166d6:	4770      	bx	lr

900166d8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
900166d8:	b580      	push	{r7, lr}
900166da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
900166dc:	2000      	movs	r0, #0
900166de:	f7ee fec3 	bl	90005468 <osMutexNew>
900166e2:	4603      	mov	r3, r0
900166e4:	4a01      	ldr	r2, [pc, #4]	; (900166ec <sys_init+0x14>)
900166e6:	6013      	str	r3, [r2, #0]
#endif
}
900166e8:	bf00      	nop
900166ea:	bd80      	pop	{r7, pc}
900166ec:	2000d724 	.word	0x2000d724

900166f0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
900166f0:	b580      	push	{r7, lr}
900166f2:	b082      	sub	sp, #8
900166f4:	af00      	add	r7, sp, #0
900166f6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
900166f8:	2000      	movs	r0, #0
900166fa:	f7ee feb5 	bl	90005468 <osMutexNew>
900166fe:	4602      	mov	r2, r0
90016700:	687b      	ldr	r3, [r7, #4]
90016702:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
90016704:	687b      	ldr	r3, [r7, #4]
90016706:	681b      	ldr	r3, [r3, #0]
90016708:	2b00      	cmp	r3, #0
9001670a:	d102      	bne.n	90016712 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
9001670c:	f04f 33ff 	mov.w	r3, #4294967295
90016710:	e000      	b.n	90016714 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
90016712:	2300      	movs	r3, #0
}
90016714:	4618      	mov	r0, r3
90016716:	3708      	adds	r7, #8
90016718:	46bd      	mov	sp, r7
9001671a:	bd80      	pop	{r7, pc}

9001671c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
9001671c:	b580      	push	{r7, lr}
9001671e:	b082      	sub	sp, #8
90016720:	af00      	add	r7, sp, #0
90016722:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
90016724:	687b      	ldr	r3, [r7, #4]
90016726:	681b      	ldr	r3, [r3, #0]
90016728:	f04f 31ff 	mov.w	r1, #4294967295
9001672c:	4618      	mov	r0, r3
9001672e:	f7ee ff35 	bl	9000559c <osMutexAcquire>
#endif
}
90016732:	bf00      	nop
90016734:	3708      	adds	r7, #8
90016736:	46bd      	mov	sp, r7
90016738:	bd80      	pop	{r7, pc}

9001673a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
9001673a:	b580      	push	{r7, lr}
9001673c:	b082      	sub	sp, #8
9001673e:	af00      	add	r7, sp, #0
90016740:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
90016742:	687b      	ldr	r3, [r7, #4]
90016744:	681b      	ldr	r3, [r3, #0]
90016746:	4618      	mov	r0, r3
90016748:	f7ee ff86 	bl	90005658 <osMutexRelease>
}
9001674c:	bf00      	nop
9001674e:	3708      	adds	r7, #8
90016750:	46bd      	mov	sp, r7
90016752:	bd80      	pop	{r7, pc}

90016754 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
90016754:	b580      	push	{r7, lr}
90016756:	b08e      	sub	sp, #56	; 0x38
90016758:	af00      	add	r7, sp, #0
9001675a:	60f8      	str	r0, [r7, #12]
9001675c:	60b9      	str	r1, [r7, #8]
9001675e:	607a      	str	r2, [r7, #4]
90016760:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
90016762:	f107 0314 	add.w	r3, r7, #20
90016766:	2224      	movs	r2, #36	; 0x24
90016768:	2100      	movs	r1, #0
9001676a:	4618      	mov	r0, r3
9001676c:	f000 f980 	bl	90016a70 <memset>
90016770:	68fb      	ldr	r3, [r7, #12]
90016772:	617b      	str	r3, [r7, #20]
90016774:	683b      	ldr	r3, [r7, #0]
90016776:	62bb      	str	r3, [r7, #40]	; 0x28
90016778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9001677a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
9001677c:	f107 0314 	add.w	r3, r7, #20
90016780:	461a      	mov	r2, r3
90016782:	6879      	ldr	r1, [r7, #4]
90016784:	68b8      	ldr	r0, [r7, #8]
90016786:	f7ee fd9b 	bl	900052c0 <osThreadNew>
9001678a:	4603      	mov	r3, r0
#endif
}
9001678c:	4618      	mov	r0, r3
9001678e:	3738      	adds	r7, #56	; 0x38
90016790:	46bd      	mov	sp, r7
90016792:	bd80      	pop	{r7, pc}

90016794 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
90016794:	b580      	push	{r7, lr}
90016796:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
90016798:	4b04      	ldr	r3, [pc, #16]	; (900167ac <sys_arch_protect+0x18>)
9001679a:	681b      	ldr	r3, [r3, #0]
9001679c:	f04f 31ff 	mov.w	r1, #4294967295
900167a0:	4618      	mov	r0, r3
900167a2:	f7ee fefb 	bl	9000559c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
900167a6:	2301      	movs	r3, #1
}
900167a8:	4618      	mov	r0, r3
900167aa:	bd80      	pop	{r7, pc}
900167ac:	2000d724 	.word	0x2000d724

900167b0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
900167b0:	b580      	push	{r7, lr}
900167b2:	b082      	sub	sp, #8
900167b4:	af00      	add	r7, sp, #0
900167b6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
900167b8:	4b04      	ldr	r3, [pc, #16]	; (900167cc <sys_arch_unprotect+0x1c>)
900167ba:	681b      	ldr	r3, [r3, #0]
900167bc:	4618      	mov	r0, r3
900167be:	f7ee ff4b 	bl	90005658 <osMutexRelease>
}
900167c2:	bf00      	nop
900167c4:	3708      	adds	r7, #8
900167c6:	46bd      	mov	sp, r7
900167c8:	bd80      	pop	{r7, pc}
900167ca:	bf00      	nop
900167cc:	2000d724 	.word	0x2000d724

900167d0 <_ZdaPv>:
900167d0:	f000 b800 	b.w	900167d4 <_ZdlPv>

900167d4 <_ZdlPv>:
900167d4:	f000 b926 	b.w	90016a24 <free>

900167d8 <std>:
900167d8:	2300      	movs	r3, #0
900167da:	b510      	push	{r4, lr}
900167dc:	4604      	mov	r4, r0
900167de:	e9c0 3300 	strd	r3, r3, [r0]
900167e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
900167e6:	6083      	str	r3, [r0, #8]
900167e8:	8181      	strh	r1, [r0, #12]
900167ea:	6643      	str	r3, [r0, #100]	; 0x64
900167ec:	81c2      	strh	r2, [r0, #14]
900167ee:	6183      	str	r3, [r0, #24]
900167f0:	4619      	mov	r1, r3
900167f2:	2208      	movs	r2, #8
900167f4:	305c      	adds	r0, #92	; 0x5c
900167f6:	f000 f93b 	bl	90016a70 <memset>
900167fa:	4b05      	ldr	r3, [pc, #20]	; (90016810 <std+0x38>)
900167fc:	6263      	str	r3, [r4, #36]	; 0x24
900167fe:	4b05      	ldr	r3, [pc, #20]	; (90016814 <std+0x3c>)
90016800:	62a3      	str	r3, [r4, #40]	; 0x28
90016802:	4b05      	ldr	r3, [pc, #20]	; (90016818 <std+0x40>)
90016804:	62e3      	str	r3, [r4, #44]	; 0x2c
90016806:	4b05      	ldr	r3, [pc, #20]	; (9001681c <std+0x44>)
90016808:	6224      	str	r4, [r4, #32]
9001680a:	6323      	str	r3, [r4, #48]	; 0x30
9001680c:	bd10      	pop	{r4, pc}
9001680e:	bf00      	nop
90016810:	90016de1 	.word	0x90016de1
90016814:	90016e03 	.word	0x90016e03
90016818:	90016e3b 	.word	0x90016e3b
9001681c:	90016e5f 	.word	0x90016e5f

90016820 <_cleanup_r>:
90016820:	4901      	ldr	r1, [pc, #4]	; (90016828 <_cleanup_r+0x8>)
90016822:	f000 b8af 	b.w	90016984 <_fwalk_reent>
90016826:	bf00      	nop
90016828:	9001701d 	.word	0x9001701d

9001682c <__sfmoreglue>:
9001682c:	b570      	push	{r4, r5, r6, lr}
9001682e:	2268      	movs	r2, #104	; 0x68
90016830:	1e4d      	subs	r5, r1, #1
90016832:	4355      	muls	r5, r2
90016834:	460e      	mov	r6, r1
90016836:	f105 0174 	add.w	r1, r5, #116	; 0x74
9001683a:	f000 f98d 	bl	90016b58 <_malloc_r>
9001683e:	4604      	mov	r4, r0
90016840:	b140      	cbz	r0, 90016854 <__sfmoreglue+0x28>
90016842:	2100      	movs	r1, #0
90016844:	e9c0 1600 	strd	r1, r6, [r0]
90016848:	300c      	adds	r0, #12
9001684a:	60a0      	str	r0, [r4, #8]
9001684c:	f105 0268 	add.w	r2, r5, #104	; 0x68
90016850:	f000 f90e 	bl	90016a70 <memset>
90016854:	4620      	mov	r0, r4
90016856:	bd70      	pop	{r4, r5, r6, pc}

90016858 <__sfp_lock_acquire>:
90016858:	4801      	ldr	r0, [pc, #4]	; (90016860 <__sfp_lock_acquire+0x8>)
9001685a:	f000 b8d8 	b.w	90016a0e <__retarget_lock_acquire_recursive>
9001685e:	bf00      	nop
90016860:	2000d729 	.word	0x2000d729

90016864 <__sfp_lock_release>:
90016864:	4801      	ldr	r0, [pc, #4]	; (9001686c <__sfp_lock_release+0x8>)
90016866:	f000 b8d3 	b.w	90016a10 <__retarget_lock_release_recursive>
9001686a:	bf00      	nop
9001686c:	2000d729 	.word	0x2000d729

90016870 <__sinit_lock_acquire>:
90016870:	4801      	ldr	r0, [pc, #4]	; (90016878 <__sinit_lock_acquire+0x8>)
90016872:	f000 b8cc 	b.w	90016a0e <__retarget_lock_acquire_recursive>
90016876:	bf00      	nop
90016878:	2000d72a 	.word	0x2000d72a

9001687c <__sinit_lock_release>:
9001687c:	4801      	ldr	r0, [pc, #4]	; (90016884 <__sinit_lock_release+0x8>)
9001687e:	f000 b8c7 	b.w	90016a10 <__retarget_lock_release_recursive>
90016882:	bf00      	nop
90016884:	2000d72a 	.word	0x2000d72a

90016888 <__sinit>:
90016888:	b510      	push	{r4, lr}
9001688a:	4604      	mov	r4, r0
9001688c:	f7ff fff0 	bl	90016870 <__sinit_lock_acquire>
90016890:	69a3      	ldr	r3, [r4, #24]
90016892:	b11b      	cbz	r3, 9001689c <__sinit+0x14>
90016894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90016898:	f7ff bff0 	b.w	9001687c <__sinit_lock_release>
9001689c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
900168a0:	6523      	str	r3, [r4, #80]	; 0x50
900168a2:	4b13      	ldr	r3, [pc, #76]	; (900168f0 <__sinit+0x68>)
900168a4:	4a13      	ldr	r2, [pc, #76]	; (900168f4 <__sinit+0x6c>)
900168a6:	681b      	ldr	r3, [r3, #0]
900168a8:	62a2      	str	r2, [r4, #40]	; 0x28
900168aa:	42a3      	cmp	r3, r4
900168ac:	bf04      	itt	eq
900168ae:	2301      	moveq	r3, #1
900168b0:	61a3      	streq	r3, [r4, #24]
900168b2:	4620      	mov	r0, r4
900168b4:	f000 f820 	bl	900168f8 <__sfp>
900168b8:	6060      	str	r0, [r4, #4]
900168ba:	4620      	mov	r0, r4
900168bc:	f000 f81c 	bl	900168f8 <__sfp>
900168c0:	60a0      	str	r0, [r4, #8]
900168c2:	4620      	mov	r0, r4
900168c4:	f000 f818 	bl	900168f8 <__sfp>
900168c8:	2200      	movs	r2, #0
900168ca:	60e0      	str	r0, [r4, #12]
900168cc:	2104      	movs	r1, #4
900168ce:	6860      	ldr	r0, [r4, #4]
900168d0:	f7ff ff82 	bl	900167d8 <std>
900168d4:	68a0      	ldr	r0, [r4, #8]
900168d6:	2201      	movs	r2, #1
900168d8:	2109      	movs	r1, #9
900168da:	f7ff ff7d 	bl	900167d8 <std>
900168de:	68e0      	ldr	r0, [r4, #12]
900168e0:	2202      	movs	r2, #2
900168e2:	2112      	movs	r1, #18
900168e4:	f7ff ff78 	bl	900167d8 <std>
900168e8:	2301      	movs	r3, #1
900168ea:	61a3      	str	r3, [r4, #24]
900168ec:	e7d2      	b.n	90016894 <__sinit+0xc>
900168ee:	bf00      	nop
900168f0:	9001be48 	.word	0x9001be48
900168f4:	90016821 	.word	0x90016821

900168f8 <__sfp>:
900168f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900168fa:	4607      	mov	r7, r0
900168fc:	f7ff ffac 	bl	90016858 <__sfp_lock_acquire>
90016900:	4b1e      	ldr	r3, [pc, #120]	; (9001697c <__sfp+0x84>)
90016902:	681e      	ldr	r6, [r3, #0]
90016904:	69b3      	ldr	r3, [r6, #24]
90016906:	b913      	cbnz	r3, 9001690e <__sfp+0x16>
90016908:	4630      	mov	r0, r6
9001690a:	f7ff ffbd 	bl	90016888 <__sinit>
9001690e:	3648      	adds	r6, #72	; 0x48
90016910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
90016914:	3b01      	subs	r3, #1
90016916:	d503      	bpl.n	90016920 <__sfp+0x28>
90016918:	6833      	ldr	r3, [r6, #0]
9001691a:	b30b      	cbz	r3, 90016960 <__sfp+0x68>
9001691c:	6836      	ldr	r6, [r6, #0]
9001691e:	e7f7      	b.n	90016910 <__sfp+0x18>
90016920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
90016924:	b9d5      	cbnz	r5, 9001695c <__sfp+0x64>
90016926:	4b16      	ldr	r3, [pc, #88]	; (90016980 <__sfp+0x88>)
90016928:	60e3      	str	r3, [r4, #12]
9001692a:	f104 0058 	add.w	r0, r4, #88	; 0x58
9001692e:	6665      	str	r5, [r4, #100]	; 0x64
90016930:	f000 f86c 	bl	90016a0c <__retarget_lock_init_recursive>
90016934:	f7ff ff96 	bl	90016864 <__sfp_lock_release>
90016938:	e9c4 5501 	strd	r5, r5, [r4, #4]
9001693c:	e9c4 5504 	strd	r5, r5, [r4, #16]
90016940:	6025      	str	r5, [r4, #0]
90016942:	61a5      	str	r5, [r4, #24]
90016944:	2208      	movs	r2, #8
90016946:	4629      	mov	r1, r5
90016948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
9001694c:	f000 f890 	bl	90016a70 <memset>
90016950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90016954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90016958:	4620      	mov	r0, r4
9001695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001695c:	3468      	adds	r4, #104	; 0x68
9001695e:	e7d9      	b.n	90016914 <__sfp+0x1c>
90016960:	2104      	movs	r1, #4
90016962:	4638      	mov	r0, r7
90016964:	f7ff ff62 	bl	9001682c <__sfmoreglue>
90016968:	4604      	mov	r4, r0
9001696a:	6030      	str	r0, [r6, #0]
9001696c:	2800      	cmp	r0, #0
9001696e:	d1d5      	bne.n	9001691c <__sfp+0x24>
90016970:	f7ff ff78 	bl	90016864 <__sfp_lock_release>
90016974:	230c      	movs	r3, #12
90016976:	603b      	str	r3, [r7, #0]
90016978:	e7ee      	b.n	90016958 <__sfp+0x60>
9001697a:	bf00      	nop
9001697c:	9001be48 	.word	0x9001be48
90016980:	ffff0001 	.word	0xffff0001

90016984 <_fwalk_reent>:
90016984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90016988:	4606      	mov	r6, r0
9001698a:	4688      	mov	r8, r1
9001698c:	f100 0448 	add.w	r4, r0, #72	; 0x48
90016990:	2700      	movs	r7, #0
90016992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90016996:	f1b9 0901 	subs.w	r9, r9, #1
9001699a:	d505      	bpl.n	900169a8 <_fwalk_reent+0x24>
9001699c:	6824      	ldr	r4, [r4, #0]
9001699e:	2c00      	cmp	r4, #0
900169a0:	d1f7      	bne.n	90016992 <_fwalk_reent+0xe>
900169a2:	4638      	mov	r0, r7
900169a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900169a8:	89ab      	ldrh	r3, [r5, #12]
900169aa:	2b01      	cmp	r3, #1
900169ac:	d907      	bls.n	900169be <_fwalk_reent+0x3a>
900169ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
900169b2:	3301      	adds	r3, #1
900169b4:	d003      	beq.n	900169be <_fwalk_reent+0x3a>
900169b6:	4629      	mov	r1, r5
900169b8:	4630      	mov	r0, r6
900169ba:	47c0      	blx	r8
900169bc:	4307      	orrs	r7, r0
900169be:	3568      	adds	r5, #104	; 0x68
900169c0:	e7e9      	b.n	90016996 <_fwalk_reent+0x12>
	...

900169c4 <__libc_init_array>:
900169c4:	b570      	push	{r4, r5, r6, lr}
900169c6:	4d0d      	ldr	r5, [pc, #52]	; (900169fc <__libc_init_array+0x38>)
900169c8:	4c0d      	ldr	r4, [pc, #52]	; (90016a00 <__libc_init_array+0x3c>)
900169ca:	1b64      	subs	r4, r4, r5
900169cc:	10a4      	asrs	r4, r4, #2
900169ce:	2600      	movs	r6, #0
900169d0:	42a6      	cmp	r6, r4
900169d2:	d109      	bne.n	900169e8 <__libc_init_array+0x24>
900169d4:	4d0b      	ldr	r5, [pc, #44]	; (90016a04 <__libc_init_array+0x40>)
900169d6:	4c0c      	ldr	r4, [pc, #48]	; (90016a08 <__libc_init_array+0x44>)
900169d8:	f001 f81e 	bl	90017a18 <_init>
900169dc:	1b64      	subs	r4, r4, r5
900169de:	10a4      	asrs	r4, r4, #2
900169e0:	2600      	movs	r6, #0
900169e2:	42a6      	cmp	r6, r4
900169e4:	d105      	bne.n	900169f2 <__libc_init_array+0x2e>
900169e6:	bd70      	pop	{r4, r5, r6, pc}
900169e8:	f855 3b04 	ldr.w	r3, [r5], #4
900169ec:	4798      	blx	r3
900169ee:	3601      	adds	r6, #1
900169f0:	e7ee      	b.n	900169d0 <__libc_init_array+0xc>
900169f2:	f855 3b04 	ldr.w	r3, [r5], #4
900169f6:	4798      	blx	r3
900169f8:	3601      	adds	r6, #1
900169fa:	e7f2      	b.n	900169e2 <__libc_init_array+0x1e>
900169fc:	9001bf38 	.word	0x9001bf38
90016a00:	9001bf38 	.word	0x9001bf38
90016a04:	9001bf38 	.word	0x9001bf38
90016a08:	9001bf3c 	.word	0x9001bf3c

90016a0c <__retarget_lock_init_recursive>:
90016a0c:	4770      	bx	lr

90016a0e <__retarget_lock_acquire_recursive>:
90016a0e:	4770      	bx	lr

90016a10 <__retarget_lock_release_recursive>:
90016a10:	4770      	bx	lr
	...

90016a14 <malloc>:
90016a14:	4b02      	ldr	r3, [pc, #8]	; (90016a20 <malloc+0xc>)
90016a16:	4601      	mov	r1, r0
90016a18:	6818      	ldr	r0, [r3, #0]
90016a1a:	f000 b89d 	b.w	90016b58 <_malloc_r>
90016a1e:	bf00      	nop
90016a20:	2000001c 	.word	0x2000001c

90016a24 <free>:
90016a24:	4b02      	ldr	r3, [pc, #8]	; (90016a30 <free+0xc>)
90016a26:	4601      	mov	r1, r0
90016a28:	6818      	ldr	r0, [r3, #0]
90016a2a:	f000 b829 	b.w	90016a80 <_free_r>
90016a2e:	bf00      	nop
90016a30:	2000001c 	.word	0x2000001c

90016a34 <memcmp>:
90016a34:	b510      	push	{r4, lr}
90016a36:	3901      	subs	r1, #1
90016a38:	4402      	add	r2, r0
90016a3a:	4290      	cmp	r0, r2
90016a3c:	d101      	bne.n	90016a42 <memcmp+0xe>
90016a3e:	2000      	movs	r0, #0
90016a40:	e005      	b.n	90016a4e <memcmp+0x1a>
90016a42:	7803      	ldrb	r3, [r0, #0]
90016a44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
90016a48:	42a3      	cmp	r3, r4
90016a4a:	d001      	beq.n	90016a50 <memcmp+0x1c>
90016a4c:	1b18      	subs	r0, r3, r4
90016a4e:	bd10      	pop	{r4, pc}
90016a50:	3001      	adds	r0, #1
90016a52:	e7f2      	b.n	90016a3a <memcmp+0x6>

90016a54 <memcpy>:
90016a54:	440a      	add	r2, r1
90016a56:	4291      	cmp	r1, r2
90016a58:	f100 33ff 	add.w	r3, r0, #4294967295
90016a5c:	d100      	bne.n	90016a60 <memcpy+0xc>
90016a5e:	4770      	bx	lr
90016a60:	b510      	push	{r4, lr}
90016a62:	f811 4b01 	ldrb.w	r4, [r1], #1
90016a66:	f803 4f01 	strb.w	r4, [r3, #1]!
90016a6a:	4291      	cmp	r1, r2
90016a6c:	d1f9      	bne.n	90016a62 <memcpy+0xe>
90016a6e:	bd10      	pop	{r4, pc}

90016a70 <memset>:
90016a70:	4402      	add	r2, r0
90016a72:	4603      	mov	r3, r0
90016a74:	4293      	cmp	r3, r2
90016a76:	d100      	bne.n	90016a7a <memset+0xa>
90016a78:	4770      	bx	lr
90016a7a:	f803 1b01 	strb.w	r1, [r3], #1
90016a7e:	e7f9      	b.n	90016a74 <memset+0x4>

90016a80 <_free_r>:
90016a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
90016a82:	2900      	cmp	r1, #0
90016a84:	d044      	beq.n	90016b10 <_free_r+0x90>
90016a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
90016a8a:	9001      	str	r0, [sp, #4]
90016a8c:	2b00      	cmp	r3, #0
90016a8e:	f1a1 0404 	sub.w	r4, r1, #4
90016a92:	bfb8      	it	lt
90016a94:	18e4      	addlt	r4, r4, r3
90016a96:	f000 fb21 	bl	900170dc <__malloc_lock>
90016a9a:	4a1e      	ldr	r2, [pc, #120]	; (90016b14 <_free_r+0x94>)
90016a9c:	9801      	ldr	r0, [sp, #4]
90016a9e:	6813      	ldr	r3, [r2, #0]
90016aa0:	b933      	cbnz	r3, 90016ab0 <_free_r+0x30>
90016aa2:	6063      	str	r3, [r4, #4]
90016aa4:	6014      	str	r4, [r2, #0]
90016aa6:	b003      	add	sp, #12
90016aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90016aac:	f000 bb1c 	b.w	900170e8 <__malloc_unlock>
90016ab0:	42a3      	cmp	r3, r4
90016ab2:	d908      	bls.n	90016ac6 <_free_r+0x46>
90016ab4:	6825      	ldr	r5, [r4, #0]
90016ab6:	1961      	adds	r1, r4, r5
90016ab8:	428b      	cmp	r3, r1
90016aba:	bf01      	itttt	eq
90016abc:	6819      	ldreq	r1, [r3, #0]
90016abe:	685b      	ldreq	r3, [r3, #4]
90016ac0:	1949      	addeq	r1, r1, r5
90016ac2:	6021      	streq	r1, [r4, #0]
90016ac4:	e7ed      	b.n	90016aa2 <_free_r+0x22>
90016ac6:	461a      	mov	r2, r3
90016ac8:	685b      	ldr	r3, [r3, #4]
90016aca:	b10b      	cbz	r3, 90016ad0 <_free_r+0x50>
90016acc:	42a3      	cmp	r3, r4
90016ace:	d9fa      	bls.n	90016ac6 <_free_r+0x46>
90016ad0:	6811      	ldr	r1, [r2, #0]
90016ad2:	1855      	adds	r5, r2, r1
90016ad4:	42a5      	cmp	r5, r4
90016ad6:	d10b      	bne.n	90016af0 <_free_r+0x70>
90016ad8:	6824      	ldr	r4, [r4, #0]
90016ada:	4421      	add	r1, r4
90016adc:	1854      	adds	r4, r2, r1
90016ade:	42a3      	cmp	r3, r4
90016ae0:	6011      	str	r1, [r2, #0]
90016ae2:	d1e0      	bne.n	90016aa6 <_free_r+0x26>
90016ae4:	681c      	ldr	r4, [r3, #0]
90016ae6:	685b      	ldr	r3, [r3, #4]
90016ae8:	6053      	str	r3, [r2, #4]
90016aea:	4421      	add	r1, r4
90016aec:	6011      	str	r1, [r2, #0]
90016aee:	e7da      	b.n	90016aa6 <_free_r+0x26>
90016af0:	d902      	bls.n	90016af8 <_free_r+0x78>
90016af2:	230c      	movs	r3, #12
90016af4:	6003      	str	r3, [r0, #0]
90016af6:	e7d6      	b.n	90016aa6 <_free_r+0x26>
90016af8:	6825      	ldr	r5, [r4, #0]
90016afa:	1961      	adds	r1, r4, r5
90016afc:	428b      	cmp	r3, r1
90016afe:	bf04      	itt	eq
90016b00:	6819      	ldreq	r1, [r3, #0]
90016b02:	685b      	ldreq	r3, [r3, #4]
90016b04:	6063      	str	r3, [r4, #4]
90016b06:	bf04      	itt	eq
90016b08:	1949      	addeq	r1, r1, r5
90016b0a:	6021      	streq	r1, [r4, #0]
90016b0c:	6054      	str	r4, [r2, #4]
90016b0e:	e7ca      	b.n	90016aa6 <_free_r+0x26>
90016b10:	b003      	add	sp, #12
90016b12:	bd30      	pop	{r4, r5, pc}
90016b14:	2000d72c 	.word	0x2000d72c

90016b18 <sbrk_aligned>:
90016b18:	b570      	push	{r4, r5, r6, lr}
90016b1a:	4e0e      	ldr	r6, [pc, #56]	; (90016b54 <sbrk_aligned+0x3c>)
90016b1c:	460c      	mov	r4, r1
90016b1e:	6831      	ldr	r1, [r6, #0]
90016b20:	4605      	mov	r5, r0
90016b22:	b911      	cbnz	r1, 90016b2a <sbrk_aligned+0x12>
90016b24:	f000 f94c 	bl	90016dc0 <_sbrk_r>
90016b28:	6030      	str	r0, [r6, #0]
90016b2a:	4621      	mov	r1, r4
90016b2c:	4628      	mov	r0, r5
90016b2e:	f000 f947 	bl	90016dc0 <_sbrk_r>
90016b32:	1c43      	adds	r3, r0, #1
90016b34:	d00a      	beq.n	90016b4c <sbrk_aligned+0x34>
90016b36:	1cc4      	adds	r4, r0, #3
90016b38:	f024 0403 	bic.w	r4, r4, #3
90016b3c:	42a0      	cmp	r0, r4
90016b3e:	d007      	beq.n	90016b50 <sbrk_aligned+0x38>
90016b40:	1a21      	subs	r1, r4, r0
90016b42:	4628      	mov	r0, r5
90016b44:	f000 f93c 	bl	90016dc0 <_sbrk_r>
90016b48:	3001      	adds	r0, #1
90016b4a:	d101      	bne.n	90016b50 <sbrk_aligned+0x38>
90016b4c:	f04f 34ff 	mov.w	r4, #4294967295
90016b50:	4620      	mov	r0, r4
90016b52:	bd70      	pop	{r4, r5, r6, pc}
90016b54:	2000d730 	.word	0x2000d730

90016b58 <_malloc_r>:
90016b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90016b5c:	1ccd      	adds	r5, r1, #3
90016b5e:	f025 0503 	bic.w	r5, r5, #3
90016b62:	3508      	adds	r5, #8
90016b64:	2d0c      	cmp	r5, #12
90016b66:	bf38      	it	cc
90016b68:	250c      	movcc	r5, #12
90016b6a:	2d00      	cmp	r5, #0
90016b6c:	4607      	mov	r7, r0
90016b6e:	db01      	blt.n	90016b74 <_malloc_r+0x1c>
90016b70:	42a9      	cmp	r1, r5
90016b72:	d905      	bls.n	90016b80 <_malloc_r+0x28>
90016b74:	230c      	movs	r3, #12
90016b76:	603b      	str	r3, [r7, #0]
90016b78:	2600      	movs	r6, #0
90016b7a:	4630      	mov	r0, r6
90016b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90016b80:	4e2e      	ldr	r6, [pc, #184]	; (90016c3c <_malloc_r+0xe4>)
90016b82:	f000 faab 	bl	900170dc <__malloc_lock>
90016b86:	6833      	ldr	r3, [r6, #0]
90016b88:	461c      	mov	r4, r3
90016b8a:	bb34      	cbnz	r4, 90016bda <_malloc_r+0x82>
90016b8c:	4629      	mov	r1, r5
90016b8e:	4638      	mov	r0, r7
90016b90:	f7ff ffc2 	bl	90016b18 <sbrk_aligned>
90016b94:	1c43      	adds	r3, r0, #1
90016b96:	4604      	mov	r4, r0
90016b98:	d14d      	bne.n	90016c36 <_malloc_r+0xde>
90016b9a:	6834      	ldr	r4, [r6, #0]
90016b9c:	4626      	mov	r6, r4
90016b9e:	2e00      	cmp	r6, #0
90016ba0:	d140      	bne.n	90016c24 <_malloc_r+0xcc>
90016ba2:	6823      	ldr	r3, [r4, #0]
90016ba4:	4631      	mov	r1, r6
90016ba6:	4638      	mov	r0, r7
90016ba8:	eb04 0803 	add.w	r8, r4, r3
90016bac:	f000 f908 	bl	90016dc0 <_sbrk_r>
90016bb0:	4580      	cmp	r8, r0
90016bb2:	d13a      	bne.n	90016c2a <_malloc_r+0xd2>
90016bb4:	6821      	ldr	r1, [r4, #0]
90016bb6:	3503      	adds	r5, #3
90016bb8:	1a6d      	subs	r5, r5, r1
90016bba:	f025 0503 	bic.w	r5, r5, #3
90016bbe:	3508      	adds	r5, #8
90016bc0:	2d0c      	cmp	r5, #12
90016bc2:	bf38      	it	cc
90016bc4:	250c      	movcc	r5, #12
90016bc6:	4629      	mov	r1, r5
90016bc8:	4638      	mov	r0, r7
90016bca:	f7ff ffa5 	bl	90016b18 <sbrk_aligned>
90016bce:	3001      	adds	r0, #1
90016bd0:	d02b      	beq.n	90016c2a <_malloc_r+0xd2>
90016bd2:	6823      	ldr	r3, [r4, #0]
90016bd4:	442b      	add	r3, r5
90016bd6:	6023      	str	r3, [r4, #0]
90016bd8:	e00e      	b.n	90016bf8 <_malloc_r+0xa0>
90016bda:	6822      	ldr	r2, [r4, #0]
90016bdc:	1b52      	subs	r2, r2, r5
90016bde:	d41e      	bmi.n	90016c1e <_malloc_r+0xc6>
90016be0:	2a0b      	cmp	r2, #11
90016be2:	d916      	bls.n	90016c12 <_malloc_r+0xba>
90016be4:	1961      	adds	r1, r4, r5
90016be6:	42a3      	cmp	r3, r4
90016be8:	6025      	str	r5, [r4, #0]
90016bea:	bf18      	it	ne
90016bec:	6059      	strne	r1, [r3, #4]
90016bee:	6863      	ldr	r3, [r4, #4]
90016bf0:	bf08      	it	eq
90016bf2:	6031      	streq	r1, [r6, #0]
90016bf4:	5162      	str	r2, [r4, r5]
90016bf6:	604b      	str	r3, [r1, #4]
90016bf8:	4638      	mov	r0, r7
90016bfa:	f104 060b 	add.w	r6, r4, #11
90016bfe:	f000 fa73 	bl	900170e8 <__malloc_unlock>
90016c02:	f026 0607 	bic.w	r6, r6, #7
90016c06:	1d23      	adds	r3, r4, #4
90016c08:	1af2      	subs	r2, r6, r3
90016c0a:	d0b6      	beq.n	90016b7a <_malloc_r+0x22>
90016c0c:	1b9b      	subs	r3, r3, r6
90016c0e:	50a3      	str	r3, [r4, r2]
90016c10:	e7b3      	b.n	90016b7a <_malloc_r+0x22>
90016c12:	6862      	ldr	r2, [r4, #4]
90016c14:	42a3      	cmp	r3, r4
90016c16:	bf0c      	ite	eq
90016c18:	6032      	streq	r2, [r6, #0]
90016c1a:	605a      	strne	r2, [r3, #4]
90016c1c:	e7ec      	b.n	90016bf8 <_malloc_r+0xa0>
90016c1e:	4623      	mov	r3, r4
90016c20:	6864      	ldr	r4, [r4, #4]
90016c22:	e7b2      	b.n	90016b8a <_malloc_r+0x32>
90016c24:	4634      	mov	r4, r6
90016c26:	6876      	ldr	r6, [r6, #4]
90016c28:	e7b9      	b.n	90016b9e <_malloc_r+0x46>
90016c2a:	230c      	movs	r3, #12
90016c2c:	603b      	str	r3, [r7, #0]
90016c2e:	4638      	mov	r0, r7
90016c30:	f000 fa5a 	bl	900170e8 <__malloc_unlock>
90016c34:	e7a1      	b.n	90016b7a <_malloc_r+0x22>
90016c36:	6025      	str	r5, [r4, #0]
90016c38:	e7de      	b.n	90016bf8 <_malloc_r+0xa0>
90016c3a:	bf00      	nop
90016c3c:	2000d72c 	.word	0x2000d72c

90016c40 <iprintf>:
90016c40:	b40f      	push	{r0, r1, r2, r3}
90016c42:	4b0a      	ldr	r3, [pc, #40]	; (90016c6c <iprintf+0x2c>)
90016c44:	b513      	push	{r0, r1, r4, lr}
90016c46:	681c      	ldr	r4, [r3, #0]
90016c48:	b124      	cbz	r4, 90016c54 <iprintf+0x14>
90016c4a:	69a3      	ldr	r3, [r4, #24]
90016c4c:	b913      	cbnz	r3, 90016c54 <iprintf+0x14>
90016c4e:	4620      	mov	r0, r4
90016c50:	f7ff fe1a 	bl	90016888 <__sinit>
90016c54:	ab05      	add	r3, sp, #20
90016c56:	9a04      	ldr	r2, [sp, #16]
90016c58:	68a1      	ldr	r1, [r4, #8]
90016c5a:	9301      	str	r3, [sp, #4]
90016c5c:	4620      	mov	r0, r4
90016c5e:	f000 fa73 	bl	90017148 <_vfiprintf_r>
90016c62:	b002      	add	sp, #8
90016c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90016c68:	b004      	add	sp, #16
90016c6a:	4770      	bx	lr
90016c6c:	2000001c 	.word	0x2000001c

90016c70 <rand>:
90016c70:	4b16      	ldr	r3, [pc, #88]	; (90016ccc <rand+0x5c>)
90016c72:	b510      	push	{r4, lr}
90016c74:	681c      	ldr	r4, [r3, #0]
90016c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90016c78:	b9b3      	cbnz	r3, 90016ca8 <rand+0x38>
90016c7a:	2018      	movs	r0, #24
90016c7c:	f7ff feca 	bl	90016a14 <malloc>
90016c80:	63a0      	str	r0, [r4, #56]	; 0x38
90016c82:	b928      	cbnz	r0, 90016c90 <rand+0x20>
90016c84:	4602      	mov	r2, r0
90016c86:	4b12      	ldr	r3, [pc, #72]	; (90016cd0 <rand+0x60>)
90016c88:	4812      	ldr	r0, [pc, #72]	; (90016cd4 <rand+0x64>)
90016c8a:	214e      	movs	r1, #78	; 0x4e
90016c8c:	f000 f912 	bl	90016eb4 <__assert_func>
90016c90:	4a11      	ldr	r2, [pc, #68]	; (90016cd8 <rand+0x68>)
90016c92:	4b12      	ldr	r3, [pc, #72]	; (90016cdc <rand+0x6c>)
90016c94:	e9c0 2300 	strd	r2, r3, [r0]
90016c98:	4b11      	ldr	r3, [pc, #68]	; (90016ce0 <rand+0x70>)
90016c9a:	6083      	str	r3, [r0, #8]
90016c9c:	230b      	movs	r3, #11
90016c9e:	8183      	strh	r3, [r0, #12]
90016ca0:	2201      	movs	r2, #1
90016ca2:	2300      	movs	r3, #0
90016ca4:	e9c0 2304 	strd	r2, r3, [r0, #16]
90016ca8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
90016caa:	4a0e      	ldr	r2, [pc, #56]	; (90016ce4 <rand+0x74>)
90016cac:	6920      	ldr	r0, [r4, #16]
90016cae:	6963      	ldr	r3, [r4, #20]
90016cb0:	490d      	ldr	r1, [pc, #52]	; (90016ce8 <rand+0x78>)
90016cb2:	4342      	muls	r2, r0
90016cb4:	fb01 2203 	mla	r2, r1, r3, r2
90016cb8:	fba0 0101 	umull	r0, r1, r0, r1
90016cbc:	1c43      	adds	r3, r0, #1
90016cbe:	eb42 0001 	adc.w	r0, r2, r1
90016cc2:	e9c4 3004 	strd	r3, r0, [r4, #16]
90016cc6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90016cca:	bd10      	pop	{r4, pc}
90016ccc:	2000001c 	.word	0x2000001c
90016cd0:	9001be4c 	.word	0x9001be4c
90016cd4:	9001be63 	.word	0x9001be63
90016cd8:	abcd330e 	.word	0xabcd330e
90016cdc:	e66d1234 	.word	0xe66d1234
90016ce0:	0005deec 	.word	0x0005deec
90016ce4:	5851f42d 	.word	0x5851f42d
90016ce8:	4c957f2d 	.word	0x4c957f2d

90016cec <cleanup_glue>:
90016cec:	b538      	push	{r3, r4, r5, lr}
90016cee:	460c      	mov	r4, r1
90016cf0:	6809      	ldr	r1, [r1, #0]
90016cf2:	4605      	mov	r5, r0
90016cf4:	b109      	cbz	r1, 90016cfa <cleanup_glue+0xe>
90016cf6:	f7ff fff9 	bl	90016cec <cleanup_glue>
90016cfa:	4621      	mov	r1, r4
90016cfc:	4628      	mov	r0, r5
90016cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90016d02:	f7ff bebd 	b.w	90016a80 <_free_r>
	...

90016d08 <_reclaim_reent>:
90016d08:	4b2c      	ldr	r3, [pc, #176]	; (90016dbc <_reclaim_reent+0xb4>)
90016d0a:	681b      	ldr	r3, [r3, #0]
90016d0c:	4283      	cmp	r3, r0
90016d0e:	b570      	push	{r4, r5, r6, lr}
90016d10:	4604      	mov	r4, r0
90016d12:	d051      	beq.n	90016db8 <_reclaim_reent+0xb0>
90016d14:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016d16:	b143      	cbz	r3, 90016d2a <_reclaim_reent+0x22>
90016d18:	68db      	ldr	r3, [r3, #12]
90016d1a:	2b00      	cmp	r3, #0
90016d1c:	d14a      	bne.n	90016db4 <_reclaim_reent+0xac>
90016d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90016d20:	6819      	ldr	r1, [r3, #0]
90016d22:	b111      	cbz	r1, 90016d2a <_reclaim_reent+0x22>
90016d24:	4620      	mov	r0, r4
90016d26:	f7ff feab 	bl	90016a80 <_free_r>
90016d2a:	6961      	ldr	r1, [r4, #20]
90016d2c:	b111      	cbz	r1, 90016d34 <_reclaim_reent+0x2c>
90016d2e:	4620      	mov	r0, r4
90016d30:	f7ff fea6 	bl	90016a80 <_free_r>
90016d34:	6a61      	ldr	r1, [r4, #36]	; 0x24
90016d36:	b111      	cbz	r1, 90016d3e <_reclaim_reent+0x36>
90016d38:	4620      	mov	r0, r4
90016d3a:	f7ff fea1 	bl	90016a80 <_free_r>
90016d3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
90016d40:	b111      	cbz	r1, 90016d48 <_reclaim_reent+0x40>
90016d42:	4620      	mov	r0, r4
90016d44:	f7ff fe9c 	bl	90016a80 <_free_r>
90016d48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
90016d4a:	b111      	cbz	r1, 90016d52 <_reclaim_reent+0x4a>
90016d4c:	4620      	mov	r0, r4
90016d4e:	f7ff fe97 	bl	90016a80 <_free_r>
90016d52:	6c21      	ldr	r1, [r4, #64]	; 0x40
90016d54:	b111      	cbz	r1, 90016d5c <_reclaim_reent+0x54>
90016d56:	4620      	mov	r0, r4
90016d58:	f7ff fe92 	bl	90016a80 <_free_r>
90016d5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90016d5e:	b111      	cbz	r1, 90016d66 <_reclaim_reent+0x5e>
90016d60:	4620      	mov	r0, r4
90016d62:	f7ff fe8d 	bl	90016a80 <_free_r>
90016d66:	6da1      	ldr	r1, [r4, #88]	; 0x58
90016d68:	b111      	cbz	r1, 90016d70 <_reclaim_reent+0x68>
90016d6a:	4620      	mov	r0, r4
90016d6c:	f7ff fe88 	bl	90016a80 <_free_r>
90016d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
90016d72:	b111      	cbz	r1, 90016d7a <_reclaim_reent+0x72>
90016d74:	4620      	mov	r0, r4
90016d76:	f7ff fe83 	bl	90016a80 <_free_r>
90016d7a:	69a3      	ldr	r3, [r4, #24]
90016d7c:	b1e3      	cbz	r3, 90016db8 <_reclaim_reent+0xb0>
90016d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90016d80:	4620      	mov	r0, r4
90016d82:	4798      	blx	r3
90016d84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
90016d86:	b1b9      	cbz	r1, 90016db8 <_reclaim_reent+0xb0>
90016d88:	4620      	mov	r0, r4
90016d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90016d8e:	f7ff bfad 	b.w	90016cec <cleanup_glue>
90016d92:	5949      	ldr	r1, [r1, r5]
90016d94:	b941      	cbnz	r1, 90016da8 <_reclaim_reent+0xa0>
90016d96:	3504      	adds	r5, #4
90016d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
90016d9a:	2d80      	cmp	r5, #128	; 0x80
90016d9c:	68d9      	ldr	r1, [r3, #12]
90016d9e:	d1f8      	bne.n	90016d92 <_reclaim_reent+0x8a>
90016da0:	4620      	mov	r0, r4
90016da2:	f7ff fe6d 	bl	90016a80 <_free_r>
90016da6:	e7ba      	b.n	90016d1e <_reclaim_reent+0x16>
90016da8:	680e      	ldr	r6, [r1, #0]
90016daa:	4620      	mov	r0, r4
90016dac:	f7ff fe68 	bl	90016a80 <_free_r>
90016db0:	4631      	mov	r1, r6
90016db2:	e7ef      	b.n	90016d94 <_reclaim_reent+0x8c>
90016db4:	2500      	movs	r5, #0
90016db6:	e7ef      	b.n	90016d98 <_reclaim_reent+0x90>
90016db8:	bd70      	pop	{r4, r5, r6, pc}
90016dba:	bf00      	nop
90016dbc:	2000001c 	.word	0x2000001c

90016dc0 <_sbrk_r>:
90016dc0:	b538      	push	{r3, r4, r5, lr}
90016dc2:	4d06      	ldr	r5, [pc, #24]	; (90016ddc <_sbrk_r+0x1c>)
90016dc4:	2300      	movs	r3, #0
90016dc6:	4604      	mov	r4, r0
90016dc8:	4608      	mov	r0, r1
90016dca:	602b      	str	r3, [r5, #0]
90016dcc:	f7ea f898 	bl	90000f00 <_sbrk>
90016dd0:	1c43      	adds	r3, r0, #1
90016dd2:	d102      	bne.n	90016dda <_sbrk_r+0x1a>
90016dd4:	682b      	ldr	r3, [r5, #0]
90016dd6:	b103      	cbz	r3, 90016dda <_sbrk_r+0x1a>
90016dd8:	6023      	str	r3, [r4, #0]
90016dda:	bd38      	pop	{r3, r4, r5, pc}
90016ddc:	2000d734 	.word	0x2000d734

90016de0 <__sread>:
90016de0:	b510      	push	{r4, lr}
90016de2:	460c      	mov	r4, r1
90016de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90016de8:	f000 fc72 	bl	900176d0 <_read_r>
90016dec:	2800      	cmp	r0, #0
90016dee:	bfab      	itete	ge
90016df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90016df2:	89a3      	ldrhlt	r3, [r4, #12]
90016df4:	181b      	addge	r3, r3, r0
90016df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90016dfa:	bfac      	ite	ge
90016dfc:	6563      	strge	r3, [r4, #84]	; 0x54
90016dfe:	81a3      	strhlt	r3, [r4, #12]
90016e00:	bd10      	pop	{r4, pc}

90016e02 <__swrite>:
90016e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90016e06:	461f      	mov	r7, r3
90016e08:	898b      	ldrh	r3, [r1, #12]
90016e0a:	05db      	lsls	r3, r3, #23
90016e0c:	4605      	mov	r5, r0
90016e0e:	460c      	mov	r4, r1
90016e10:	4616      	mov	r6, r2
90016e12:	d505      	bpl.n	90016e20 <__swrite+0x1e>
90016e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90016e18:	2302      	movs	r3, #2
90016e1a:	2200      	movs	r2, #0
90016e1c:	f000 f94c 	bl	900170b8 <_lseek_r>
90016e20:	89a3      	ldrh	r3, [r4, #12]
90016e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90016e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90016e2a:	81a3      	strh	r3, [r4, #12]
90016e2c:	4632      	mov	r2, r6
90016e2e:	463b      	mov	r3, r7
90016e30:	4628      	mov	r0, r5
90016e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90016e36:	f000 b82b 	b.w	90016e90 <_write_r>

90016e3a <__sseek>:
90016e3a:	b510      	push	{r4, lr}
90016e3c:	460c      	mov	r4, r1
90016e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90016e42:	f000 f939 	bl	900170b8 <_lseek_r>
90016e46:	1c43      	adds	r3, r0, #1
90016e48:	89a3      	ldrh	r3, [r4, #12]
90016e4a:	bf15      	itete	ne
90016e4c:	6560      	strne	r0, [r4, #84]	; 0x54
90016e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90016e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90016e56:	81a3      	strheq	r3, [r4, #12]
90016e58:	bf18      	it	ne
90016e5a:	81a3      	strhne	r3, [r4, #12]
90016e5c:	bd10      	pop	{r4, pc}

90016e5e <__sclose>:
90016e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90016e62:	f000 b845 	b.w	90016ef0 <_close_r>

90016e66 <strncmp>:
90016e66:	b510      	push	{r4, lr}
90016e68:	b17a      	cbz	r2, 90016e8a <strncmp+0x24>
90016e6a:	4603      	mov	r3, r0
90016e6c:	3901      	subs	r1, #1
90016e6e:	1884      	adds	r4, r0, r2
90016e70:	f813 0b01 	ldrb.w	r0, [r3], #1
90016e74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
90016e78:	4290      	cmp	r0, r2
90016e7a:	d101      	bne.n	90016e80 <strncmp+0x1a>
90016e7c:	42a3      	cmp	r3, r4
90016e7e:	d101      	bne.n	90016e84 <strncmp+0x1e>
90016e80:	1a80      	subs	r0, r0, r2
90016e82:	bd10      	pop	{r4, pc}
90016e84:	2800      	cmp	r0, #0
90016e86:	d1f3      	bne.n	90016e70 <strncmp+0xa>
90016e88:	e7fa      	b.n	90016e80 <strncmp+0x1a>
90016e8a:	4610      	mov	r0, r2
90016e8c:	e7f9      	b.n	90016e82 <strncmp+0x1c>
	...

90016e90 <_write_r>:
90016e90:	b538      	push	{r3, r4, r5, lr}
90016e92:	4d07      	ldr	r5, [pc, #28]	; (90016eb0 <_write_r+0x20>)
90016e94:	4604      	mov	r4, r0
90016e96:	4608      	mov	r0, r1
90016e98:	4611      	mov	r1, r2
90016e9a:	2200      	movs	r2, #0
90016e9c:	602a      	str	r2, [r5, #0]
90016e9e:	461a      	mov	r2, r3
90016ea0:	f7e9 ffdd 	bl	90000e5e <_write>
90016ea4:	1c43      	adds	r3, r0, #1
90016ea6:	d102      	bne.n	90016eae <_write_r+0x1e>
90016ea8:	682b      	ldr	r3, [r5, #0]
90016eaa:	b103      	cbz	r3, 90016eae <_write_r+0x1e>
90016eac:	6023      	str	r3, [r4, #0]
90016eae:	bd38      	pop	{r3, r4, r5, pc}
90016eb0:	2000d734 	.word	0x2000d734

90016eb4 <__assert_func>:
90016eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90016eb6:	4614      	mov	r4, r2
90016eb8:	461a      	mov	r2, r3
90016eba:	4b09      	ldr	r3, [pc, #36]	; (90016ee0 <__assert_func+0x2c>)
90016ebc:	681b      	ldr	r3, [r3, #0]
90016ebe:	4605      	mov	r5, r0
90016ec0:	68d8      	ldr	r0, [r3, #12]
90016ec2:	b14c      	cbz	r4, 90016ed8 <__assert_func+0x24>
90016ec4:	4b07      	ldr	r3, [pc, #28]	; (90016ee4 <__assert_func+0x30>)
90016ec6:	9100      	str	r1, [sp, #0]
90016ec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
90016ecc:	4906      	ldr	r1, [pc, #24]	; (90016ee8 <__assert_func+0x34>)
90016ece:	462b      	mov	r3, r5
90016ed0:	f000 f8e0 	bl	90017094 <fiprintf>
90016ed4:	f000 fcce 	bl	90017874 <abort>
90016ed8:	4b04      	ldr	r3, [pc, #16]	; (90016eec <__assert_func+0x38>)
90016eda:	461c      	mov	r4, r3
90016edc:	e7f3      	b.n	90016ec6 <__assert_func+0x12>
90016ede:	bf00      	nop
90016ee0:	2000001c 	.word	0x2000001c
90016ee4:	9001bebe 	.word	0x9001bebe
90016ee8:	9001becb 	.word	0x9001becb
90016eec:	9001bef9 	.word	0x9001bef9

90016ef0 <_close_r>:
90016ef0:	b538      	push	{r3, r4, r5, lr}
90016ef2:	4d06      	ldr	r5, [pc, #24]	; (90016f0c <_close_r+0x1c>)
90016ef4:	2300      	movs	r3, #0
90016ef6:	4604      	mov	r4, r0
90016ef8:	4608      	mov	r0, r1
90016efa:	602b      	str	r3, [r5, #0]
90016efc:	f7e9 ffcb 	bl	90000e96 <_close>
90016f00:	1c43      	adds	r3, r0, #1
90016f02:	d102      	bne.n	90016f0a <_close_r+0x1a>
90016f04:	682b      	ldr	r3, [r5, #0]
90016f06:	b103      	cbz	r3, 90016f0a <_close_r+0x1a>
90016f08:	6023      	str	r3, [r4, #0]
90016f0a:	bd38      	pop	{r3, r4, r5, pc}
90016f0c:	2000d734 	.word	0x2000d734

90016f10 <__sflush_r>:
90016f10:	898a      	ldrh	r2, [r1, #12]
90016f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90016f16:	4605      	mov	r5, r0
90016f18:	0710      	lsls	r0, r2, #28
90016f1a:	460c      	mov	r4, r1
90016f1c:	d458      	bmi.n	90016fd0 <__sflush_r+0xc0>
90016f1e:	684b      	ldr	r3, [r1, #4]
90016f20:	2b00      	cmp	r3, #0
90016f22:	dc05      	bgt.n	90016f30 <__sflush_r+0x20>
90016f24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90016f26:	2b00      	cmp	r3, #0
90016f28:	dc02      	bgt.n	90016f30 <__sflush_r+0x20>
90016f2a:	2000      	movs	r0, #0
90016f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90016f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90016f32:	2e00      	cmp	r6, #0
90016f34:	d0f9      	beq.n	90016f2a <__sflush_r+0x1a>
90016f36:	2300      	movs	r3, #0
90016f38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90016f3c:	682f      	ldr	r7, [r5, #0]
90016f3e:	602b      	str	r3, [r5, #0]
90016f40:	d032      	beq.n	90016fa8 <__sflush_r+0x98>
90016f42:	6d60      	ldr	r0, [r4, #84]	; 0x54
90016f44:	89a3      	ldrh	r3, [r4, #12]
90016f46:	075a      	lsls	r2, r3, #29
90016f48:	d505      	bpl.n	90016f56 <__sflush_r+0x46>
90016f4a:	6863      	ldr	r3, [r4, #4]
90016f4c:	1ac0      	subs	r0, r0, r3
90016f4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
90016f50:	b10b      	cbz	r3, 90016f56 <__sflush_r+0x46>
90016f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
90016f54:	1ac0      	subs	r0, r0, r3
90016f56:	2300      	movs	r3, #0
90016f58:	4602      	mov	r2, r0
90016f5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90016f5c:	6a21      	ldr	r1, [r4, #32]
90016f5e:	4628      	mov	r0, r5
90016f60:	47b0      	blx	r6
90016f62:	1c43      	adds	r3, r0, #1
90016f64:	89a3      	ldrh	r3, [r4, #12]
90016f66:	d106      	bne.n	90016f76 <__sflush_r+0x66>
90016f68:	6829      	ldr	r1, [r5, #0]
90016f6a:	291d      	cmp	r1, #29
90016f6c:	d82c      	bhi.n	90016fc8 <__sflush_r+0xb8>
90016f6e:	4a2a      	ldr	r2, [pc, #168]	; (90017018 <__sflush_r+0x108>)
90016f70:	40ca      	lsrs	r2, r1
90016f72:	07d6      	lsls	r6, r2, #31
90016f74:	d528      	bpl.n	90016fc8 <__sflush_r+0xb8>
90016f76:	2200      	movs	r2, #0
90016f78:	6062      	str	r2, [r4, #4]
90016f7a:	04d9      	lsls	r1, r3, #19
90016f7c:	6922      	ldr	r2, [r4, #16]
90016f7e:	6022      	str	r2, [r4, #0]
90016f80:	d504      	bpl.n	90016f8c <__sflush_r+0x7c>
90016f82:	1c42      	adds	r2, r0, #1
90016f84:	d101      	bne.n	90016f8a <__sflush_r+0x7a>
90016f86:	682b      	ldr	r3, [r5, #0]
90016f88:	b903      	cbnz	r3, 90016f8c <__sflush_r+0x7c>
90016f8a:	6560      	str	r0, [r4, #84]	; 0x54
90016f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
90016f8e:	602f      	str	r7, [r5, #0]
90016f90:	2900      	cmp	r1, #0
90016f92:	d0ca      	beq.n	90016f2a <__sflush_r+0x1a>
90016f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
90016f98:	4299      	cmp	r1, r3
90016f9a:	d002      	beq.n	90016fa2 <__sflush_r+0x92>
90016f9c:	4628      	mov	r0, r5
90016f9e:	f7ff fd6f 	bl	90016a80 <_free_r>
90016fa2:	2000      	movs	r0, #0
90016fa4:	6360      	str	r0, [r4, #52]	; 0x34
90016fa6:	e7c1      	b.n	90016f2c <__sflush_r+0x1c>
90016fa8:	6a21      	ldr	r1, [r4, #32]
90016faa:	2301      	movs	r3, #1
90016fac:	4628      	mov	r0, r5
90016fae:	47b0      	blx	r6
90016fb0:	1c41      	adds	r1, r0, #1
90016fb2:	d1c7      	bne.n	90016f44 <__sflush_r+0x34>
90016fb4:	682b      	ldr	r3, [r5, #0]
90016fb6:	2b00      	cmp	r3, #0
90016fb8:	d0c4      	beq.n	90016f44 <__sflush_r+0x34>
90016fba:	2b1d      	cmp	r3, #29
90016fbc:	d001      	beq.n	90016fc2 <__sflush_r+0xb2>
90016fbe:	2b16      	cmp	r3, #22
90016fc0:	d101      	bne.n	90016fc6 <__sflush_r+0xb6>
90016fc2:	602f      	str	r7, [r5, #0]
90016fc4:	e7b1      	b.n	90016f2a <__sflush_r+0x1a>
90016fc6:	89a3      	ldrh	r3, [r4, #12]
90016fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90016fcc:	81a3      	strh	r3, [r4, #12]
90016fce:	e7ad      	b.n	90016f2c <__sflush_r+0x1c>
90016fd0:	690f      	ldr	r7, [r1, #16]
90016fd2:	2f00      	cmp	r7, #0
90016fd4:	d0a9      	beq.n	90016f2a <__sflush_r+0x1a>
90016fd6:	0793      	lsls	r3, r2, #30
90016fd8:	680e      	ldr	r6, [r1, #0]
90016fda:	bf08      	it	eq
90016fdc:	694b      	ldreq	r3, [r1, #20]
90016fde:	600f      	str	r7, [r1, #0]
90016fe0:	bf18      	it	ne
90016fe2:	2300      	movne	r3, #0
90016fe4:	eba6 0807 	sub.w	r8, r6, r7
90016fe8:	608b      	str	r3, [r1, #8]
90016fea:	f1b8 0f00 	cmp.w	r8, #0
90016fee:	dd9c      	ble.n	90016f2a <__sflush_r+0x1a>
90016ff0:	6a21      	ldr	r1, [r4, #32]
90016ff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90016ff4:	4643      	mov	r3, r8
90016ff6:	463a      	mov	r2, r7
90016ff8:	4628      	mov	r0, r5
90016ffa:	47b0      	blx	r6
90016ffc:	2800      	cmp	r0, #0
90016ffe:	dc06      	bgt.n	9001700e <__sflush_r+0xfe>
90017000:	89a3      	ldrh	r3, [r4, #12]
90017002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90017006:	81a3      	strh	r3, [r4, #12]
90017008:	f04f 30ff 	mov.w	r0, #4294967295
9001700c:	e78e      	b.n	90016f2c <__sflush_r+0x1c>
9001700e:	4407      	add	r7, r0
90017010:	eba8 0800 	sub.w	r8, r8, r0
90017014:	e7e9      	b.n	90016fea <__sflush_r+0xda>
90017016:	bf00      	nop
90017018:	20400001 	.word	0x20400001

9001701c <_fflush_r>:
9001701c:	b538      	push	{r3, r4, r5, lr}
9001701e:	690b      	ldr	r3, [r1, #16]
90017020:	4605      	mov	r5, r0
90017022:	460c      	mov	r4, r1
90017024:	b913      	cbnz	r3, 9001702c <_fflush_r+0x10>
90017026:	2500      	movs	r5, #0
90017028:	4628      	mov	r0, r5
9001702a:	bd38      	pop	{r3, r4, r5, pc}
9001702c:	b118      	cbz	r0, 90017036 <_fflush_r+0x1a>
9001702e:	6983      	ldr	r3, [r0, #24]
90017030:	b90b      	cbnz	r3, 90017036 <_fflush_r+0x1a>
90017032:	f7ff fc29 	bl	90016888 <__sinit>
90017036:	4b14      	ldr	r3, [pc, #80]	; (90017088 <_fflush_r+0x6c>)
90017038:	429c      	cmp	r4, r3
9001703a:	d11b      	bne.n	90017074 <_fflush_r+0x58>
9001703c:	686c      	ldr	r4, [r5, #4]
9001703e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90017042:	2b00      	cmp	r3, #0
90017044:	d0ef      	beq.n	90017026 <_fflush_r+0xa>
90017046:	6e62      	ldr	r2, [r4, #100]	; 0x64
90017048:	07d0      	lsls	r0, r2, #31
9001704a:	d404      	bmi.n	90017056 <_fflush_r+0x3a>
9001704c:	0599      	lsls	r1, r3, #22
9001704e:	d402      	bmi.n	90017056 <_fflush_r+0x3a>
90017050:	6da0      	ldr	r0, [r4, #88]	; 0x58
90017052:	f7ff fcdc 	bl	90016a0e <__retarget_lock_acquire_recursive>
90017056:	4628      	mov	r0, r5
90017058:	4621      	mov	r1, r4
9001705a:	f7ff ff59 	bl	90016f10 <__sflush_r>
9001705e:	6e63      	ldr	r3, [r4, #100]	; 0x64
90017060:	07da      	lsls	r2, r3, #31
90017062:	4605      	mov	r5, r0
90017064:	d4e0      	bmi.n	90017028 <_fflush_r+0xc>
90017066:	89a3      	ldrh	r3, [r4, #12]
90017068:	059b      	lsls	r3, r3, #22
9001706a:	d4dd      	bmi.n	90017028 <_fflush_r+0xc>
9001706c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9001706e:	f7ff fccf 	bl	90016a10 <__retarget_lock_release_recursive>
90017072:	e7d9      	b.n	90017028 <_fflush_r+0xc>
90017074:	4b05      	ldr	r3, [pc, #20]	; (9001708c <_fflush_r+0x70>)
90017076:	429c      	cmp	r4, r3
90017078:	d101      	bne.n	9001707e <_fflush_r+0x62>
9001707a:	68ac      	ldr	r4, [r5, #8]
9001707c:	e7df      	b.n	9001703e <_fflush_r+0x22>
9001707e:	4b04      	ldr	r3, [pc, #16]	; (90017090 <_fflush_r+0x74>)
90017080:	429c      	cmp	r4, r3
90017082:	bf08      	it	eq
90017084:	68ec      	ldreq	r4, [r5, #12]
90017086:	e7da      	b.n	9001703e <_fflush_r+0x22>
90017088:	9001be08 	.word	0x9001be08
9001708c:	9001be28 	.word	0x9001be28
90017090:	9001bde8 	.word	0x9001bde8

90017094 <fiprintf>:
90017094:	b40e      	push	{r1, r2, r3}
90017096:	b503      	push	{r0, r1, lr}
90017098:	4601      	mov	r1, r0
9001709a:	ab03      	add	r3, sp, #12
9001709c:	4805      	ldr	r0, [pc, #20]	; (900170b4 <fiprintf+0x20>)
9001709e:	f853 2b04 	ldr.w	r2, [r3], #4
900170a2:	6800      	ldr	r0, [r0, #0]
900170a4:	9301      	str	r3, [sp, #4]
900170a6:	f000 f84f 	bl	90017148 <_vfiprintf_r>
900170aa:	b002      	add	sp, #8
900170ac:	f85d eb04 	ldr.w	lr, [sp], #4
900170b0:	b003      	add	sp, #12
900170b2:	4770      	bx	lr
900170b4:	2000001c 	.word	0x2000001c

900170b8 <_lseek_r>:
900170b8:	b538      	push	{r3, r4, r5, lr}
900170ba:	4d07      	ldr	r5, [pc, #28]	; (900170d8 <_lseek_r+0x20>)
900170bc:	4604      	mov	r4, r0
900170be:	4608      	mov	r0, r1
900170c0:	4611      	mov	r1, r2
900170c2:	2200      	movs	r2, #0
900170c4:	602a      	str	r2, [r5, #0]
900170c6:	461a      	mov	r2, r3
900170c8:	f7e9 ff0c 	bl	90000ee4 <_lseek>
900170cc:	1c43      	adds	r3, r0, #1
900170ce:	d102      	bne.n	900170d6 <_lseek_r+0x1e>
900170d0:	682b      	ldr	r3, [r5, #0]
900170d2:	b103      	cbz	r3, 900170d6 <_lseek_r+0x1e>
900170d4:	6023      	str	r3, [r4, #0]
900170d6:	bd38      	pop	{r3, r4, r5, pc}
900170d8:	2000d734 	.word	0x2000d734

900170dc <__malloc_lock>:
900170dc:	4801      	ldr	r0, [pc, #4]	; (900170e4 <__malloc_lock+0x8>)
900170de:	f7ff bc96 	b.w	90016a0e <__retarget_lock_acquire_recursive>
900170e2:	bf00      	nop
900170e4:	2000d728 	.word	0x2000d728

900170e8 <__malloc_unlock>:
900170e8:	4801      	ldr	r0, [pc, #4]	; (900170f0 <__malloc_unlock+0x8>)
900170ea:	f7ff bc91 	b.w	90016a10 <__retarget_lock_release_recursive>
900170ee:	bf00      	nop
900170f0:	2000d728 	.word	0x2000d728

900170f4 <__sfputc_r>:
900170f4:	6893      	ldr	r3, [r2, #8]
900170f6:	3b01      	subs	r3, #1
900170f8:	2b00      	cmp	r3, #0
900170fa:	b410      	push	{r4}
900170fc:	6093      	str	r3, [r2, #8]
900170fe:	da08      	bge.n	90017112 <__sfputc_r+0x1e>
90017100:	6994      	ldr	r4, [r2, #24]
90017102:	42a3      	cmp	r3, r4
90017104:	db01      	blt.n	9001710a <__sfputc_r+0x16>
90017106:	290a      	cmp	r1, #10
90017108:	d103      	bne.n	90017112 <__sfputc_r+0x1e>
9001710a:	f85d 4b04 	ldr.w	r4, [sp], #4
9001710e:	f000 baf1 	b.w	900176f4 <__swbuf_r>
90017112:	6813      	ldr	r3, [r2, #0]
90017114:	1c58      	adds	r0, r3, #1
90017116:	6010      	str	r0, [r2, #0]
90017118:	7019      	strb	r1, [r3, #0]
9001711a:	4608      	mov	r0, r1
9001711c:	f85d 4b04 	ldr.w	r4, [sp], #4
90017120:	4770      	bx	lr

90017122 <__sfputs_r>:
90017122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90017124:	4606      	mov	r6, r0
90017126:	460f      	mov	r7, r1
90017128:	4614      	mov	r4, r2
9001712a:	18d5      	adds	r5, r2, r3
9001712c:	42ac      	cmp	r4, r5
9001712e:	d101      	bne.n	90017134 <__sfputs_r+0x12>
90017130:	2000      	movs	r0, #0
90017132:	e007      	b.n	90017144 <__sfputs_r+0x22>
90017134:	f814 1b01 	ldrb.w	r1, [r4], #1
90017138:	463a      	mov	r2, r7
9001713a:	4630      	mov	r0, r6
9001713c:	f7ff ffda 	bl	900170f4 <__sfputc_r>
90017140:	1c43      	adds	r3, r0, #1
90017142:	d1f3      	bne.n	9001712c <__sfputs_r+0xa>
90017144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90017148 <_vfiprintf_r>:
90017148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001714c:	460d      	mov	r5, r1
9001714e:	b09d      	sub	sp, #116	; 0x74
90017150:	4614      	mov	r4, r2
90017152:	4698      	mov	r8, r3
90017154:	4606      	mov	r6, r0
90017156:	b118      	cbz	r0, 90017160 <_vfiprintf_r+0x18>
90017158:	6983      	ldr	r3, [r0, #24]
9001715a:	b90b      	cbnz	r3, 90017160 <_vfiprintf_r+0x18>
9001715c:	f7ff fb94 	bl	90016888 <__sinit>
90017160:	4b89      	ldr	r3, [pc, #548]	; (90017388 <_vfiprintf_r+0x240>)
90017162:	429d      	cmp	r5, r3
90017164:	d11b      	bne.n	9001719e <_vfiprintf_r+0x56>
90017166:	6875      	ldr	r5, [r6, #4]
90017168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9001716a:	07d9      	lsls	r1, r3, #31
9001716c:	d405      	bmi.n	9001717a <_vfiprintf_r+0x32>
9001716e:	89ab      	ldrh	r3, [r5, #12]
90017170:	059a      	lsls	r2, r3, #22
90017172:	d402      	bmi.n	9001717a <_vfiprintf_r+0x32>
90017174:	6da8      	ldr	r0, [r5, #88]	; 0x58
90017176:	f7ff fc4a 	bl	90016a0e <__retarget_lock_acquire_recursive>
9001717a:	89ab      	ldrh	r3, [r5, #12]
9001717c:	071b      	lsls	r3, r3, #28
9001717e:	d501      	bpl.n	90017184 <_vfiprintf_r+0x3c>
90017180:	692b      	ldr	r3, [r5, #16]
90017182:	b9eb      	cbnz	r3, 900171c0 <_vfiprintf_r+0x78>
90017184:	4629      	mov	r1, r5
90017186:	4630      	mov	r0, r6
90017188:	f000 fb06 	bl	90017798 <__swsetup_r>
9001718c:	b1c0      	cbz	r0, 900171c0 <_vfiprintf_r+0x78>
9001718e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90017190:	07dc      	lsls	r4, r3, #31
90017192:	d50e      	bpl.n	900171b2 <_vfiprintf_r+0x6a>
90017194:	f04f 30ff 	mov.w	r0, #4294967295
90017198:	b01d      	add	sp, #116	; 0x74
9001719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001719e:	4b7b      	ldr	r3, [pc, #492]	; (9001738c <_vfiprintf_r+0x244>)
900171a0:	429d      	cmp	r5, r3
900171a2:	d101      	bne.n	900171a8 <_vfiprintf_r+0x60>
900171a4:	68b5      	ldr	r5, [r6, #8]
900171a6:	e7df      	b.n	90017168 <_vfiprintf_r+0x20>
900171a8:	4b79      	ldr	r3, [pc, #484]	; (90017390 <_vfiprintf_r+0x248>)
900171aa:	429d      	cmp	r5, r3
900171ac:	bf08      	it	eq
900171ae:	68f5      	ldreq	r5, [r6, #12]
900171b0:	e7da      	b.n	90017168 <_vfiprintf_r+0x20>
900171b2:	89ab      	ldrh	r3, [r5, #12]
900171b4:	0598      	lsls	r0, r3, #22
900171b6:	d4ed      	bmi.n	90017194 <_vfiprintf_r+0x4c>
900171b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
900171ba:	f7ff fc29 	bl	90016a10 <__retarget_lock_release_recursive>
900171be:	e7e9      	b.n	90017194 <_vfiprintf_r+0x4c>
900171c0:	2300      	movs	r3, #0
900171c2:	9309      	str	r3, [sp, #36]	; 0x24
900171c4:	2320      	movs	r3, #32
900171c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
900171ca:	f8cd 800c 	str.w	r8, [sp, #12]
900171ce:	2330      	movs	r3, #48	; 0x30
900171d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 90017394 <_vfiprintf_r+0x24c>
900171d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
900171d8:	f04f 0901 	mov.w	r9, #1
900171dc:	4623      	mov	r3, r4
900171de:	469a      	mov	sl, r3
900171e0:	f813 2b01 	ldrb.w	r2, [r3], #1
900171e4:	b10a      	cbz	r2, 900171ea <_vfiprintf_r+0xa2>
900171e6:	2a25      	cmp	r2, #37	; 0x25
900171e8:	d1f9      	bne.n	900171de <_vfiprintf_r+0x96>
900171ea:	ebba 0b04 	subs.w	fp, sl, r4
900171ee:	d00b      	beq.n	90017208 <_vfiprintf_r+0xc0>
900171f0:	465b      	mov	r3, fp
900171f2:	4622      	mov	r2, r4
900171f4:	4629      	mov	r1, r5
900171f6:	4630      	mov	r0, r6
900171f8:	f7ff ff93 	bl	90017122 <__sfputs_r>
900171fc:	3001      	adds	r0, #1
900171fe:	f000 80aa 	beq.w	90017356 <_vfiprintf_r+0x20e>
90017202:	9a09      	ldr	r2, [sp, #36]	; 0x24
90017204:	445a      	add	r2, fp
90017206:	9209      	str	r2, [sp, #36]	; 0x24
90017208:	f89a 3000 	ldrb.w	r3, [sl]
9001720c:	2b00      	cmp	r3, #0
9001720e:	f000 80a2 	beq.w	90017356 <_vfiprintf_r+0x20e>
90017212:	2300      	movs	r3, #0
90017214:	f04f 32ff 	mov.w	r2, #4294967295
90017218:	e9cd 2305 	strd	r2, r3, [sp, #20]
9001721c:	f10a 0a01 	add.w	sl, sl, #1
90017220:	9304      	str	r3, [sp, #16]
90017222:	9307      	str	r3, [sp, #28]
90017224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90017228:	931a      	str	r3, [sp, #104]	; 0x68
9001722a:	4654      	mov	r4, sl
9001722c:	2205      	movs	r2, #5
9001722e:	f814 1b01 	ldrb.w	r1, [r4], #1
90017232:	4858      	ldr	r0, [pc, #352]	; (90017394 <_vfiprintf_r+0x24c>)
90017234:	f7e9 f81c 	bl	90000270 <memchr>
90017238:	9a04      	ldr	r2, [sp, #16]
9001723a:	b9d8      	cbnz	r0, 90017274 <_vfiprintf_r+0x12c>
9001723c:	06d1      	lsls	r1, r2, #27
9001723e:	bf44      	itt	mi
90017240:	2320      	movmi	r3, #32
90017242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90017246:	0713      	lsls	r3, r2, #28
90017248:	bf44      	itt	mi
9001724a:	232b      	movmi	r3, #43	; 0x2b
9001724c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90017250:	f89a 3000 	ldrb.w	r3, [sl]
90017254:	2b2a      	cmp	r3, #42	; 0x2a
90017256:	d015      	beq.n	90017284 <_vfiprintf_r+0x13c>
90017258:	9a07      	ldr	r2, [sp, #28]
9001725a:	4654      	mov	r4, sl
9001725c:	2000      	movs	r0, #0
9001725e:	f04f 0c0a 	mov.w	ip, #10
90017262:	4621      	mov	r1, r4
90017264:	f811 3b01 	ldrb.w	r3, [r1], #1
90017268:	3b30      	subs	r3, #48	; 0x30
9001726a:	2b09      	cmp	r3, #9
9001726c:	d94e      	bls.n	9001730c <_vfiprintf_r+0x1c4>
9001726e:	b1b0      	cbz	r0, 9001729e <_vfiprintf_r+0x156>
90017270:	9207      	str	r2, [sp, #28]
90017272:	e014      	b.n	9001729e <_vfiprintf_r+0x156>
90017274:	eba0 0308 	sub.w	r3, r0, r8
90017278:	fa09 f303 	lsl.w	r3, r9, r3
9001727c:	4313      	orrs	r3, r2
9001727e:	9304      	str	r3, [sp, #16]
90017280:	46a2      	mov	sl, r4
90017282:	e7d2      	b.n	9001722a <_vfiprintf_r+0xe2>
90017284:	9b03      	ldr	r3, [sp, #12]
90017286:	1d19      	adds	r1, r3, #4
90017288:	681b      	ldr	r3, [r3, #0]
9001728a:	9103      	str	r1, [sp, #12]
9001728c:	2b00      	cmp	r3, #0
9001728e:	bfbb      	ittet	lt
90017290:	425b      	neglt	r3, r3
90017292:	f042 0202 	orrlt.w	r2, r2, #2
90017296:	9307      	strge	r3, [sp, #28]
90017298:	9307      	strlt	r3, [sp, #28]
9001729a:	bfb8      	it	lt
9001729c:	9204      	strlt	r2, [sp, #16]
9001729e:	7823      	ldrb	r3, [r4, #0]
900172a0:	2b2e      	cmp	r3, #46	; 0x2e
900172a2:	d10c      	bne.n	900172be <_vfiprintf_r+0x176>
900172a4:	7863      	ldrb	r3, [r4, #1]
900172a6:	2b2a      	cmp	r3, #42	; 0x2a
900172a8:	d135      	bne.n	90017316 <_vfiprintf_r+0x1ce>
900172aa:	9b03      	ldr	r3, [sp, #12]
900172ac:	1d1a      	adds	r2, r3, #4
900172ae:	681b      	ldr	r3, [r3, #0]
900172b0:	9203      	str	r2, [sp, #12]
900172b2:	2b00      	cmp	r3, #0
900172b4:	bfb8      	it	lt
900172b6:	f04f 33ff 	movlt.w	r3, #4294967295
900172ba:	3402      	adds	r4, #2
900172bc:	9305      	str	r3, [sp, #20]
900172be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 900173a4 <_vfiprintf_r+0x25c>
900172c2:	7821      	ldrb	r1, [r4, #0]
900172c4:	2203      	movs	r2, #3
900172c6:	4650      	mov	r0, sl
900172c8:	f7e8 ffd2 	bl	90000270 <memchr>
900172cc:	b140      	cbz	r0, 900172e0 <_vfiprintf_r+0x198>
900172ce:	2340      	movs	r3, #64	; 0x40
900172d0:	eba0 000a 	sub.w	r0, r0, sl
900172d4:	fa03 f000 	lsl.w	r0, r3, r0
900172d8:	9b04      	ldr	r3, [sp, #16]
900172da:	4303      	orrs	r3, r0
900172dc:	3401      	adds	r4, #1
900172de:	9304      	str	r3, [sp, #16]
900172e0:	f814 1b01 	ldrb.w	r1, [r4], #1
900172e4:	482c      	ldr	r0, [pc, #176]	; (90017398 <_vfiprintf_r+0x250>)
900172e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
900172ea:	2206      	movs	r2, #6
900172ec:	f7e8 ffc0 	bl	90000270 <memchr>
900172f0:	2800      	cmp	r0, #0
900172f2:	d03f      	beq.n	90017374 <_vfiprintf_r+0x22c>
900172f4:	4b29      	ldr	r3, [pc, #164]	; (9001739c <_vfiprintf_r+0x254>)
900172f6:	bb1b      	cbnz	r3, 90017340 <_vfiprintf_r+0x1f8>
900172f8:	9b03      	ldr	r3, [sp, #12]
900172fa:	3307      	adds	r3, #7
900172fc:	f023 0307 	bic.w	r3, r3, #7
90017300:	3308      	adds	r3, #8
90017302:	9303      	str	r3, [sp, #12]
90017304:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017306:	443b      	add	r3, r7
90017308:	9309      	str	r3, [sp, #36]	; 0x24
9001730a:	e767      	b.n	900171dc <_vfiprintf_r+0x94>
9001730c:	fb0c 3202 	mla	r2, ip, r2, r3
90017310:	460c      	mov	r4, r1
90017312:	2001      	movs	r0, #1
90017314:	e7a5      	b.n	90017262 <_vfiprintf_r+0x11a>
90017316:	2300      	movs	r3, #0
90017318:	3401      	adds	r4, #1
9001731a:	9305      	str	r3, [sp, #20]
9001731c:	4619      	mov	r1, r3
9001731e:	f04f 0c0a 	mov.w	ip, #10
90017322:	4620      	mov	r0, r4
90017324:	f810 2b01 	ldrb.w	r2, [r0], #1
90017328:	3a30      	subs	r2, #48	; 0x30
9001732a:	2a09      	cmp	r2, #9
9001732c:	d903      	bls.n	90017336 <_vfiprintf_r+0x1ee>
9001732e:	2b00      	cmp	r3, #0
90017330:	d0c5      	beq.n	900172be <_vfiprintf_r+0x176>
90017332:	9105      	str	r1, [sp, #20]
90017334:	e7c3      	b.n	900172be <_vfiprintf_r+0x176>
90017336:	fb0c 2101 	mla	r1, ip, r1, r2
9001733a:	4604      	mov	r4, r0
9001733c:	2301      	movs	r3, #1
9001733e:	e7f0      	b.n	90017322 <_vfiprintf_r+0x1da>
90017340:	ab03      	add	r3, sp, #12
90017342:	9300      	str	r3, [sp, #0]
90017344:	462a      	mov	r2, r5
90017346:	4b16      	ldr	r3, [pc, #88]	; (900173a0 <_vfiprintf_r+0x258>)
90017348:	a904      	add	r1, sp, #16
9001734a:	4630      	mov	r0, r6
9001734c:	f3af 8000 	nop.w
90017350:	4607      	mov	r7, r0
90017352:	1c78      	adds	r0, r7, #1
90017354:	d1d6      	bne.n	90017304 <_vfiprintf_r+0x1bc>
90017356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90017358:	07d9      	lsls	r1, r3, #31
9001735a:	d405      	bmi.n	90017368 <_vfiprintf_r+0x220>
9001735c:	89ab      	ldrh	r3, [r5, #12]
9001735e:	059a      	lsls	r2, r3, #22
90017360:	d402      	bmi.n	90017368 <_vfiprintf_r+0x220>
90017362:	6da8      	ldr	r0, [r5, #88]	; 0x58
90017364:	f7ff fb54 	bl	90016a10 <__retarget_lock_release_recursive>
90017368:	89ab      	ldrh	r3, [r5, #12]
9001736a:	065b      	lsls	r3, r3, #25
9001736c:	f53f af12 	bmi.w	90017194 <_vfiprintf_r+0x4c>
90017370:	9809      	ldr	r0, [sp, #36]	; 0x24
90017372:	e711      	b.n	90017198 <_vfiprintf_r+0x50>
90017374:	ab03      	add	r3, sp, #12
90017376:	9300      	str	r3, [sp, #0]
90017378:	462a      	mov	r2, r5
9001737a:	4b09      	ldr	r3, [pc, #36]	; (900173a0 <_vfiprintf_r+0x258>)
9001737c:	a904      	add	r1, sp, #16
9001737e:	4630      	mov	r0, r6
90017380:	f000 f880 	bl	90017484 <_printf_i>
90017384:	e7e4      	b.n	90017350 <_vfiprintf_r+0x208>
90017386:	bf00      	nop
90017388:	9001be08 	.word	0x9001be08
9001738c:	9001be28 	.word	0x9001be28
90017390:	9001bde8 	.word	0x9001bde8
90017394:	9001befa 	.word	0x9001befa
90017398:	9001bf04 	.word	0x9001bf04
9001739c:	00000000 	.word	0x00000000
900173a0:	90017123 	.word	0x90017123
900173a4:	9001bf00 	.word	0x9001bf00

900173a8 <_printf_common>:
900173a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900173ac:	4616      	mov	r6, r2
900173ae:	4699      	mov	r9, r3
900173b0:	688a      	ldr	r2, [r1, #8]
900173b2:	690b      	ldr	r3, [r1, #16]
900173b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
900173b8:	4293      	cmp	r3, r2
900173ba:	bfb8      	it	lt
900173bc:	4613      	movlt	r3, r2
900173be:	6033      	str	r3, [r6, #0]
900173c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
900173c4:	4607      	mov	r7, r0
900173c6:	460c      	mov	r4, r1
900173c8:	b10a      	cbz	r2, 900173ce <_printf_common+0x26>
900173ca:	3301      	adds	r3, #1
900173cc:	6033      	str	r3, [r6, #0]
900173ce:	6823      	ldr	r3, [r4, #0]
900173d0:	0699      	lsls	r1, r3, #26
900173d2:	bf42      	ittt	mi
900173d4:	6833      	ldrmi	r3, [r6, #0]
900173d6:	3302      	addmi	r3, #2
900173d8:	6033      	strmi	r3, [r6, #0]
900173da:	6825      	ldr	r5, [r4, #0]
900173dc:	f015 0506 	ands.w	r5, r5, #6
900173e0:	d106      	bne.n	900173f0 <_printf_common+0x48>
900173e2:	f104 0a19 	add.w	sl, r4, #25
900173e6:	68e3      	ldr	r3, [r4, #12]
900173e8:	6832      	ldr	r2, [r6, #0]
900173ea:	1a9b      	subs	r3, r3, r2
900173ec:	42ab      	cmp	r3, r5
900173ee:	dc26      	bgt.n	9001743e <_printf_common+0x96>
900173f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
900173f4:	1e13      	subs	r3, r2, #0
900173f6:	6822      	ldr	r2, [r4, #0]
900173f8:	bf18      	it	ne
900173fa:	2301      	movne	r3, #1
900173fc:	0692      	lsls	r2, r2, #26
900173fe:	d42b      	bmi.n	90017458 <_printf_common+0xb0>
90017400:	f104 0243 	add.w	r2, r4, #67	; 0x43
90017404:	4649      	mov	r1, r9
90017406:	4638      	mov	r0, r7
90017408:	47c0      	blx	r8
9001740a:	3001      	adds	r0, #1
9001740c:	d01e      	beq.n	9001744c <_printf_common+0xa4>
9001740e:	6823      	ldr	r3, [r4, #0]
90017410:	68e5      	ldr	r5, [r4, #12]
90017412:	6832      	ldr	r2, [r6, #0]
90017414:	f003 0306 	and.w	r3, r3, #6
90017418:	2b04      	cmp	r3, #4
9001741a:	bf08      	it	eq
9001741c:	1aad      	subeq	r5, r5, r2
9001741e:	68a3      	ldr	r3, [r4, #8]
90017420:	6922      	ldr	r2, [r4, #16]
90017422:	bf0c      	ite	eq
90017424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90017428:	2500      	movne	r5, #0
9001742a:	4293      	cmp	r3, r2
9001742c:	bfc4      	itt	gt
9001742e:	1a9b      	subgt	r3, r3, r2
90017430:	18ed      	addgt	r5, r5, r3
90017432:	2600      	movs	r6, #0
90017434:	341a      	adds	r4, #26
90017436:	42b5      	cmp	r5, r6
90017438:	d11a      	bne.n	90017470 <_printf_common+0xc8>
9001743a:	2000      	movs	r0, #0
9001743c:	e008      	b.n	90017450 <_printf_common+0xa8>
9001743e:	2301      	movs	r3, #1
90017440:	4652      	mov	r2, sl
90017442:	4649      	mov	r1, r9
90017444:	4638      	mov	r0, r7
90017446:	47c0      	blx	r8
90017448:	3001      	adds	r0, #1
9001744a:	d103      	bne.n	90017454 <_printf_common+0xac>
9001744c:	f04f 30ff 	mov.w	r0, #4294967295
90017450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90017454:	3501      	adds	r5, #1
90017456:	e7c6      	b.n	900173e6 <_printf_common+0x3e>
90017458:	18e1      	adds	r1, r4, r3
9001745a:	1c5a      	adds	r2, r3, #1
9001745c:	2030      	movs	r0, #48	; 0x30
9001745e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90017462:	4422      	add	r2, r4
90017464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90017468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9001746c:	3302      	adds	r3, #2
9001746e:	e7c7      	b.n	90017400 <_printf_common+0x58>
90017470:	2301      	movs	r3, #1
90017472:	4622      	mov	r2, r4
90017474:	4649      	mov	r1, r9
90017476:	4638      	mov	r0, r7
90017478:	47c0      	blx	r8
9001747a:	3001      	adds	r0, #1
9001747c:	d0e6      	beq.n	9001744c <_printf_common+0xa4>
9001747e:	3601      	adds	r6, #1
90017480:	e7d9      	b.n	90017436 <_printf_common+0x8e>
	...

90017484 <_printf_i>:
90017484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90017488:	7e0f      	ldrb	r7, [r1, #24]
9001748a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001748c:	2f78      	cmp	r7, #120	; 0x78
9001748e:	4691      	mov	r9, r2
90017490:	4680      	mov	r8, r0
90017492:	460c      	mov	r4, r1
90017494:	469a      	mov	sl, r3
90017496:	f101 0243 	add.w	r2, r1, #67	; 0x43
9001749a:	d807      	bhi.n	900174ac <_printf_i+0x28>
9001749c:	2f62      	cmp	r7, #98	; 0x62
9001749e:	d80a      	bhi.n	900174b6 <_printf_i+0x32>
900174a0:	2f00      	cmp	r7, #0
900174a2:	f000 80d8 	beq.w	90017656 <_printf_i+0x1d2>
900174a6:	2f58      	cmp	r7, #88	; 0x58
900174a8:	f000 80a3 	beq.w	900175f2 <_printf_i+0x16e>
900174ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
900174b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900174b4:	e03a      	b.n	9001752c <_printf_i+0xa8>
900174b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900174ba:	2b15      	cmp	r3, #21
900174bc:	d8f6      	bhi.n	900174ac <_printf_i+0x28>
900174be:	a101      	add	r1, pc, #4	; (adr r1, 900174c4 <_printf_i+0x40>)
900174c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
900174c4:	9001751d 	.word	0x9001751d
900174c8:	90017531 	.word	0x90017531
900174cc:	900174ad 	.word	0x900174ad
900174d0:	900174ad 	.word	0x900174ad
900174d4:	900174ad 	.word	0x900174ad
900174d8:	900174ad 	.word	0x900174ad
900174dc:	90017531 	.word	0x90017531
900174e0:	900174ad 	.word	0x900174ad
900174e4:	900174ad 	.word	0x900174ad
900174e8:	900174ad 	.word	0x900174ad
900174ec:	900174ad 	.word	0x900174ad
900174f0:	9001763d 	.word	0x9001763d
900174f4:	90017561 	.word	0x90017561
900174f8:	9001761f 	.word	0x9001761f
900174fc:	900174ad 	.word	0x900174ad
90017500:	900174ad 	.word	0x900174ad
90017504:	9001765f 	.word	0x9001765f
90017508:	900174ad 	.word	0x900174ad
9001750c:	90017561 	.word	0x90017561
90017510:	900174ad 	.word	0x900174ad
90017514:	900174ad 	.word	0x900174ad
90017518:	90017627 	.word	0x90017627
9001751c:	682b      	ldr	r3, [r5, #0]
9001751e:	1d1a      	adds	r2, r3, #4
90017520:	681b      	ldr	r3, [r3, #0]
90017522:	602a      	str	r2, [r5, #0]
90017524:	f104 0542 	add.w	r5, r4, #66	; 0x42
90017528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9001752c:	2301      	movs	r3, #1
9001752e:	e0a3      	b.n	90017678 <_printf_i+0x1f4>
90017530:	6820      	ldr	r0, [r4, #0]
90017532:	6829      	ldr	r1, [r5, #0]
90017534:	0606      	lsls	r6, r0, #24
90017536:	f101 0304 	add.w	r3, r1, #4
9001753a:	d50a      	bpl.n	90017552 <_printf_i+0xce>
9001753c:	680e      	ldr	r6, [r1, #0]
9001753e:	602b      	str	r3, [r5, #0]
90017540:	2e00      	cmp	r6, #0
90017542:	da03      	bge.n	9001754c <_printf_i+0xc8>
90017544:	232d      	movs	r3, #45	; 0x2d
90017546:	4276      	negs	r6, r6
90017548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9001754c:	485e      	ldr	r0, [pc, #376]	; (900176c8 <_printf_i+0x244>)
9001754e:	230a      	movs	r3, #10
90017550:	e019      	b.n	90017586 <_printf_i+0x102>
90017552:	680e      	ldr	r6, [r1, #0]
90017554:	602b      	str	r3, [r5, #0]
90017556:	f010 0f40 	tst.w	r0, #64	; 0x40
9001755a:	bf18      	it	ne
9001755c:	b236      	sxthne	r6, r6
9001755e:	e7ef      	b.n	90017540 <_printf_i+0xbc>
90017560:	682b      	ldr	r3, [r5, #0]
90017562:	6820      	ldr	r0, [r4, #0]
90017564:	1d19      	adds	r1, r3, #4
90017566:	6029      	str	r1, [r5, #0]
90017568:	0601      	lsls	r1, r0, #24
9001756a:	d501      	bpl.n	90017570 <_printf_i+0xec>
9001756c:	681e      	ldr	r6, [r3, #0]
9001756e:	e002      	b.n	90017576 <_printf_i+0xf2>
90017570:	0646      	lsls	r6, r0, #25
90017572:	d5fb      	bpl.n	9001756c <_printf_i+0xe8>
90017574:	881e      	ldrh	r6, [r3, #0]
90017576:	4854      	ldr	r0, [pc, #336]	; (900176c8 <_printf_i+0x244>)
90017578:	2f6f      	cmp	r7, #111	; 0x6f
9001757a:	bf0c      	ite	eq
9001757c:	2308      	moveq	r3, #8
9001757e:	230a      	movne	r3, #10
90017580:	2100      	movs	r1, #0
90017582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90017586:	6865      	ldr	r5, [r4, #4]
90017588:	60a5      	str	r5, [r4, #8]
9001758a:	2d00      	cmp	r5, #0
9001758c:	bfa2      	ittt	ge
9001758e:	6821      	ldrge	r1, [r4, #0]
90017590:	f021 0104 	bicge.w	r1, r1, #4
90017594:	6021      	strge	r1, [r4, #0]
90017596:	b90e      	cbnz	r6, 9001759c <_printf_i+0x118>
90017598:	2d00      	cmp	r5, #0
9001759a:	d04d      	beq.n	90017638 <_printf_i+0x1b4>
9001759c:	4615      	mov	r5, r2
9001759e:	fbb6 f1f3 	udiv	r1, r6, r3
900175a2:	fb03 6711 	mls	r7, r3, r1, r6
900175a6:	5dc7      	ldrb	r7, [r0, r7]
900175a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
900175ac:	4637      	mov	r7, r6
900175ae:	42bb      	cmp	r3, r7
900175b0:	460e      	mov	r6, r1
900175b2:	d9f4      	bls.n	9001759e <_printf_i+0x11a>
900175b4:	2b08      	cmp	r3, #8
900175b6:	d10b      	bne.n	900175d0 <_printf_i+0x14c>
900175b8:	6823      	ldr	r3, [r4, #0]
900175ba:	07de      	lsls	r6, r3, #31
900175bc:	d508      	bpl.n	900175d0 <_printf_i+0x14c>
900175be:	6923      	ldr	r3, [r4, #16]
900175c0:	6861      	ldr	r1, [r4, #4]
900175c2:	4299      	cmp	r1, r3
900175c4:	bfde      	ittt	le
900175c6:	2330      	movle	r3, #48	; 0x30
900175c8:	f805 3c01 	strble.w	r3, [r5, #-1]
900175cc:	f105 35ff 	addle.w	r5, r5, #4294967295
900175d0:	1b52      	subs	r2, r2, r5
900175d2:	6122      	str	r2, [r4, #16]
900175d4:	f8cd a000 	str.w	sl, [sp]
900175d8:	464b      	mov	r3, r9
900175da:	aa03      	add	r2, sp, #12
900175dc:	4621      	mov	r1, r4
900175de:	4640      	mov	r0, r8
900175e0:	f7ff fee2 	bl	900173a8 <_printf_common>
900175e4:	3001      	adds	r0, #1
900175e6:	d14c      	bne.n	90017682 <_printf_i+0x1fe>
900175e8:	f04f 30ff 	mov.w	r0, #4294967295
900175ec:	b004      	add	sp, #16
900175ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900175f2:	4835      	ldr	r0, [pc, #212]	; (900176c8 <_printf_i+0x244>)
900175f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
900175f8:	6829      	ldr	r1, [r5, #0]
900175fa:	6823      	ldr	r3, [r4, #0]
900175fc:	f851 6b04 	ldr.w	r6, [r1], #4
90017600:	6029      	str	r1, [r5, #0]
90017602:	061d      	lsls	r5, r3, #24
90017604:	d514      	bpl.n	90017630 <_printf_i+0x1ac>
90017606:	07df      	lsls	r7, r3, #31
90017608:	bf44      	itt	mi
9001760a:	f043 0320 	orrmi.w	r3, r3, #32
9001760e:	6023      	strmi	r3, [r4, #0]
90017610:	b91e      	cbnz	r6, 9001761a <_printf_i+0x196>
90017612:	6823      	ldr	r3, [r4, #0]
90017614:	f023 0320 	bic.w	r3, r3, #32
90017618:	6023      	str	r3, [r4, #0]
9001761a:	2310      	movs	r3, #16
9001761c:	e7b0      	b.n	90017580 <_printf_i+0xfc>
9001761e:	6823      	ldr	r3, [r4, #0]
90017620:	f043 0320 	orr.w	r3, r3, #32
90017624:	6023      	str	r3, [r4, #0]
90017626:	2378      	movs	r3, #120	; 0x78
90017628:	4828      	ldr	r0, [pc, #160]	; (900176cc <_printf_i+0x248>)
9001762a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9001762e:	e7e3      	b.n	900175f8 <_printf_i+0x174>
90017630:	0659      	lsls	r1, r3, #25
90017632:	bf48      	it	mi
90017634:	b2b6      	uxthmi	r6, r6
90017636:	e7e6      	b.n	90017606 <_printf_i+0x182>
90017638:	4615      	mov	r5, r2
9001763a:	e7bb      	b.n	900175b4 <_printf_i+0x130>
9001763c:	682b      	ldr	r3, [r5, #0]
9001763e:	6826      	ldr	r6, [r4, #0]
90017640:	6961      	ldr	r1, [r4, #20]
90017642:	1d18      	adds	r0, r3, #4
90017644:	6028      	str	r0, [r5, #0]
90017646:	0635      	lsls	r5, r6, #24
90017648:	681b      	ldr	r3, [r3, #0]
9001764a:	d501      	bpl.n	90017650 <_printf_i+0x1cc>
9001764c:	6019      	str	r1, [r3, #0]
9001764e:	e002      	b.n	90017656 <_printf_i+0x1d2>
90017650:	0670      	lsls	r0, r6, #25
90017652:	d5fb      	bpl.n	9001764c <_printf_i+0x1c8>
90017654:	8019      	strh	r1, [r3, #0]
90017656:	2300      	movs	r3, #0
90017658:	6123      	str	r3, [r4, #16]
9001765a:	4615      	mov	r5, r2
9001765c:	e7ba      	b.n	900175d4 <_printf_i+0x150>
9001765e:	682b      	ldr	r3, [r5, #0]
90017660:	1d1a      	adds	r2, r3, #4
90017662:	602a      	str	r2, [r5, #0]
90017664:	681d      	ldr	r5, [r3, #0]
90017666:	6862      	ldr	r2, [r4, #4]
90017668:	2100      	movs	r1, #0
9001766a:	4628      	mov	r0, r5
9001766c:	f7e8 fe00 	bl	90000270 <memchr>
90017670:	b108      	cbz	r0, 90017676 <_printf_i+0x1f2>
90017672:	1b40      	subs	r0, r0, r5
90017674:	6060      	str	r0, [r4, #4]
90017676:	6863      	ldr	r3, [r4, #4]
90017678:	6123      	str	r3, [r4, #16]
9001767a:	2300      	movs	r3, #0
9001767c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90017680:	e7a8      	b.n	900175d4 <_printf_i+0x150>
90017682:	6923      	ldr	r3, [r4, #16]
90017684:	462a      	mov	r2, r5
90017686:	4649      	mov	r1, r9
90017688:	4640      	mov	r0, r8
9001768a:	47d0      	blx	sl
9001768c:	3001      	adds	r0, #1
9001768e:	d0ab      	beq.n	900175e8 <_printf_i+0x164>
90017690:	6823      	ldr	r3, [r4, #0]
90017692:	079b      	lsls	r3, r3, #30
90017694:	d413      	bmi.n	900176be <_printf_i+0x23a>
90017696:	68e0      	ldr	r0, [r4, #12]
90017698:	9b03      	ldr	r3, [sp, #12]
9001769a:	4298      	cmp	r0, r3
9001769c:	bfb8      	it	lt
9001769e:	4618      	movlt	r0, r3
900176a0:	e7a4      	b.n	900175ec <_printf_i+0x168>
900176a2:	2301      	movs	r3, #1
900176a4:	4632      	mov	r2, r6
900176a6:	4649      	mov	r1, r9
900176a8:	4640      	mov	r0, r8
900176aa:	47d0      	blx	sl
900176ac:	3001      	adds	r0, #1
900176ae:	d09b      	beq.n	900175e8 <_printf_i+0x164>
900176b0:	3501      	adds	r5, #1
900176b2:	68e3      	ldr	r3, [r4, #12]
900176b4:	9903      	ldr	r1, [sp, #12]
900176b6:	1a5b      	subs	r3, r3, r1
900176b8:	42ab      	cmp	r3, r5
900176ba:	dcf2      	bgt.n	900176a2 <_printf_i+0x21e>
900176bc:	e7eb      	b.n	90017696 <_printf_i+0x212>
900176be:	2500      	movs	r5, #0
900176c0:	f104 0619 	add.w	r6, r4, #25
900176c4:	e7f5      	b.n	900176b2 <_printf_i+0x22e>
900176c6:	bf00      	nop
900176c8:	9001bf0b 	.word	0x9001bf0b
900176cc:	9001bf1c 	.word	0x9001bf1c

900176d0 <_read_r>:
900176d0:	b538      	push	{r3, r4, r5, lr}
900176d2:	4d07      	ldr	r5, [pc, #28]	; (900176f0 <_read_r+0x20>)
900176d4:	4604      	mov	r4, r0
900176d6:	4608      	mov	r0, r1
900176d8:	4611      	mov	r1, r2
900176da:	2200      	movs	r2, #0
900176dc:	602a      	str	r2, [r5, #0]
900176de:	461a      	mov	r2, r3
900176e0:	f7e9 fba0 	bl	90000e24 <_read>
900176e4:	1c43      	adds	r3, r0, #1
900176e6:	d102      	bne.n	900176ee <_read_r+0x1e>
900176e8:	682b      	ldr	r3, [r5, #0]
900176ea:	b103      	cbz	r3, 900176ee <_read_r+0x1e>
900176ec:	6023      	str	r3, [r4, #0]
900176ee:	bd38      	pop	{r3, r4, r5, pc}
900176f0:	2000d734 	.word	0x2000d734

900176f4 <__swbuf_r>:
900176f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900176f6:	460e      	mov	r6, r1
900176f8:	4614      	mov	r4, r2
900176fa:	4605      	mov	r5, r0
900176fc:	b118      	cbz	r0, 90017706 <__swbuf_r+0x12>
900176fe:	6983      	ldr	r3, [r0, #24]
90017700:	b90b      	cbnz	r3, 90017706 <__swbuf_r+0x12>
90017702:	f7ff f8c1 	bl	90016888 <__sinit>
90017706:	4b21      	ldr	r3, [pc, #132]	; (9001778c <__swbuf_r+0x98>)
90017708:	429c      	cmp	r4, r3
9001770a:	d12b      	bne.n	90017764 <__swbuf_r+0x70>
9001770c:	686c      	ldr	r4, [r5, #4]
9001770e:	69a3      	ldr	r3, [r4, #24]
90017710:	60a3      	str	r3, [r4, #8]
90017712:	89a3      	ldrh	r3, [r4, #12]
90017714:	071a      	lsls	r2, r3, #28
90017716:	d52f      	bpl.n	90017778 <__swbuf_r+0x84>
90017718:	6923      	ldr	r3, [r4, #16]
9001771a:	b36b      	cbz	r3, 90017778 <__swbuf_r+0x84>
9001771c:	6923      	ldr	r3, [r4, #16]
9001771e:	6820      	ldr	r0, [r4, #0]
90017720:	1ac0      	subs	r0, r0, r3
90017722:	6963      	ldr	r3, [r4, #20]
90017724:	b2f6      	uxtb	r6, r6
90017726:	4283      	cmp	r3, r0
90017728:	4637      	mov	r7, r6
9001772a:	dc04      	bgt.n	90017736 <__swbuf_r+0x42>
9001772c:	4621      	mov	r1, r4
9001772e:	4628      	mov	r0, r5
90017730:	f7ff fc74 	bl	9001701c <_fflush_r>
90017734:	bb30      	cbnz	r0, 90017784 <__swbuf_r+0x90>
90017736:	68a3      	ldr	r3, [r4, #8]
90017738:	3b01      	subs	r3, #1
9001773a:	60a3      	str	r3, [r4, #8]
9001773c:	6823      	ldr	r3, [r4, #0]
9001773e:	1c5a      	adds	r2, r3, #1
90017740:	6022      	str	r2, [r4, #0]
90017742:	701e      	strb	r6, [r3, #0]
90017744:	6963      	ldr	r3, [r4, #20]
90017746:	3001      	adds	r0, #1
90017748:	4283      	cmp	r3, r0
9001774a:	d004      	beq.n	90017756 <__swbuf_r+0x62>
9001774c:	89a3      	ldrh	r3, [r4, #12]
9001774e:	07db      	lsls	r3, r3, #31
90017750:	d506      	bpl.n	90017760 <__swbuf_r+0x6c>
90017752:	2e0a      	cmp	r6, #10
90017754:	d104      	bne.n	90017760 <__swbuf_r+0x6c>
90017756:	4621      	mov	r1, r4
90017758:	4628      	mov	r0, r5
9001775a:	f7ff fc5f 	bl	9001701c <_fflush_r>
9001775e:	b988      	cbnz	r0, 90017784 <__swbuf_r+0x90>
90017760:	4638      	mov	r0, r7
90017762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90017764:	4b0a      	ldr	r3, [pc, #40]	; (90017790 <__swbuf_r+0x9c>)
90017766:	429c      	cmp	r4, r3
90017768:	d101      	bne.n	9001776e <__swbuf_r+0x7a>
9001776a:	68ac      	ldr	r4, [r5, #8]
9001776c:	e7cf      	b.n	9001770e <__swbuf_r+0x1a>
9001776e:	4b09      	ldr	r3, [pc, #36]	; (90017794 <__swbuf_r+0xa0>)
90017770:	429c      	cmp	r4, r3
90017772:	bf08      	it	eq
90017774:	68ec      	ldreq	r4, [r5, #12]
90017776:	e7ca      	b.n	9001770e <__swbuf_r+0x1a>
90017778:	4621      	mov	r1, r4
9001777a:	4628      	mov	r0, r5
9001777c:	f000 f80c 	bl	90017798 <__swsetup_r>
90017780:	2800      	cmp	r0, #0
90017782:	d0cb      	beq.n	9001771c <__swbuf_r+0x28>
90017784:	f04f 37ff 	mov.w	r7, #4294967295
90017788:	e7ea      	b.n	90017760 <__swbuf_r+0x6c>
9001778a:	bf00      	nop
9001778c:	9001be08 	.word	0x9001be08
90017790:	9001be28 	.word	0x9001be28
90017794:	9001bde8 	.word	0x9001bde8

90017798 <__swsetup_r>:
90017798:	4b32      	ldr	r3, [pc, #200]	; (90017864 <__swsetup_r+0xcc>)
9001779a:	b570      	push	{r4, r5, r6, lr}
9001779c:	681d      	ldr	r5, [r3, #0]
9001779e:	4606      	mov	r6, r0
900177a0:	460c      	mov	r4, r1
900177a2:	b125      	cbz	r5, 900177ae <__swsetup_r+0x16>
900177a4:	69ab      	ldr	r3, [r5, #24]
900177a6:	b913      	cbnz	r3, 900177ae <__swsetup_r+0x16>
900177a8:	4628      	mov	r0, r5
900177aa:	f7ff f86d 	bl	90016888 <__sinit>
900177ae:	4b2e      	ldr	r3, [pc, #184]	; (90017868 <__swsetup_r+0xd0>)
900177b0:	429c      	cmp	r4, r3
900177b2:	d10f      	bne.n	900177d4 <__swsetup_r+0x3c>
900177b4:	686c      	ldr	r4, [r5, #4]
900177b6:	89a3      	ldrh	r3, [r4, #12]
900177b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900177bc:	0719      	lsls	r1, r3, #28
900177be:	d42c      	bmi.n	9001781a <__swsetup_r+0x82>
900177c0:	06dd      	lsls	r5, r3, #27
900177c2:	d411      	bmi.n	900177e8 <__swsetup_r+0x50>
900177c4:	2309      	movs	r3, #9
900177c6:	6033      	str	r3, [r6, #0]
900177c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
900177cc:	81a3      	strh	r3, [r4, #12]
900177ce:	f04f 30ff 	mov.w	r0, #4294967295
900177d2:	e03e      	b.n	90017852 <__swsetup_r+0xba>
900177d4:	4b25      	ldr	r3, [pc, #148]	; (9001786c <__swsetup_r+0xd4>)
900177d6:	429c      	cmp	r4, r3
900177d8:	d101      	bne.n	900177de <__swsetup_r+0x46>
900177da:	68ac      	ldr	r4, [r5, #8]
900177dc:	e7eb      	b.n	900177b6 <__swsetup_r+0x1e>
900177de:	4b24      	ldr	r3, [pc, #144]	; (90017870 <__swsetup_r+0xd8>)
900177e0:	429c      	cmp	r4, r3
900177e2:	bf08      	it	eq
900177e4:	68ec      	ldreq	r4, [r5, #12]
900177e6:	e7e6      	b.n	900177b6 <__swsetup_r+0x1e>
900177e8:	0758      	lsls	r0, r3, #29
900177ea:	d512      	bpl.n	90017812 <__swsetup_r+0x7a>
900177ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
900177ee:	b141      	cbz	r1, 90017802 <__swsetup_r+0x6a>
900177f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
900177f4:	4299      	cmp	r1, r3
900177f6:	d002      	beq.n	900177fe <__swsetup_r+0x66>
900177f8:	4630      	mov	r0, r6
900177fa:	f7ff f941 	bl	90016a80 <_free_r>
900177fe:	2300      	movs	r3, #0
90017800:	6363      	str	r3, [r4, #52]	; 0x34
90017802:	89a3      	ldrh	r3, [r4, #12]
90017804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90017808:	81a3      	strh	r3, [r4, #12]
9001780a:	2300      	movs	r3, #0
9001780c:	6063      	str	r3, [r4, #4]
9001780e:	6923      	ldr	r3, [r4, #16]
90017810:	6023      	str	r3, [r4, #0]
90017812:	89a3      	ldrh	r3, [r4, #12]
90017814:	f043 0308 	orr.w	r3, r3, #8
90017818:	81a3      	strh	r3, [r4, #12]
9001781a:	6923      	ldr	r3, [r4, #16]
9001781c:	b94b      	cbnz	r3, 90017832 <__swsetup_r+0x9a>
9001781e:	89a3      	ldrh	r3, [r4, #12]
90017820:	f403 7320 	and.w	r3, r3, #640	; 0x280
90017824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90017828:	d003      	beq.n	90017832 <__swsetup_r+0x9a>
9001782a:	4621      	mov	r1, r4
9001782c:	4630      	mov	r0, r6
9001782e:	f000 f84d 	bl	900178cc <__smakebuf_r>
90017832:	89a0      	ldrh	r0, [r4, #12]
90017834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90017838:	f010 0301 	ands.w	r3, r0, #1
9001783c:	d00a      	beq.n	90017854 <__swsetup_r+0xbc>
9001783e:	2300      	movs	r3, #0
90017840:	60a3      	str	r3, [r4, #8]
90017842:	6963      	ldr	r3, [r4, #20]
90017844:	425b      	negs	r3, r3
90017846:	61a3      	str	r3, [r4, #24]
90017848:	6923      	ldr	r3, [r4, #16]
9001784a:	b943      	cbnz	r3, 9001785e <__swsetup_r+0xc6>
9001784c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90017850:	d1ba      	bne.n	900177c8 <__swsetup_r+0x30>
90017852:	bd70      	pop	{r4, r5, r6, pc}
90017854:	0781      	lsls	r1, r0, #30
90017856:	bf58      	it	pl
90017858:	6963      	ldrpl	r3, [r4, #20]
9001785a:	60a3      	str	r3, [r4, #8]
9001785c:	e7f4      	b.n	90017848 <__swsetup_r+0xb0>
9001785e:	2000      	movs	r0, #0
90017860:	e7f7      	b.n	90017852 <__swsetup_r+0xba>
90017862:	bf00      	nop
90017864:	2000001c 	.word	0x2000001c
90017868:	9001be08 	.word	0x9001be08
9001786c:	9001be28 	.word	0x9001be28
90017870:	9001bde8 	.word	0x9001bde8

90017874 <abort>:
90017874:	b508      	push	{r3, lr}
90017876:	2006      	movs	r0, #6
90017878:	f000 f890 	bl	9001799c <raise>
9001787c:	2001      	movs	r0, #1
9001787e:	f7e9 fac7 	bl	90000e10 <_exit>

90017882 <__swhatbuf_r>:
90017882:	b570      	push	{r4, r5, r6, lr}
90017884:	460e      	mov	r6, r1
90017886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9001788a:	2900      	cmp	r1, #0
9001788c:	b096      	sub	sp, #88	; 0x58
9001788e:	4614      	mov	r4, r2
90017890:	461d      	mov	r5, r3
90017892:	da08      	bge.n	900178a6 <__swhatbuf_r+0x24>
90017894:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90017898:	2200      	movs	r2, #0
9001789a:	602a      	str	r2, [r5, #0]
9001789c:	061a      	lsls	r2, r3, #24
9001789e:	d410      	bmi.n	900178c2 <__swhatbuf_r+0x40>
900178a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
900178a4:	e00e      	b.n	900178c4 <__swhatbuf_r+0x42>
900178a6:	466a      	mov	r2, sp
900178a8:	f000 f894 	bl	900179d4 <_fstat_r>
900178ac:	2800      	cmp	r0, #0
900178ae:	dbf1      	blt.n	90017894 <__swhatbuf_r+0x12>
900178b0:	9a01      	ldr	r2, [sp, #4]
900178b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
900178b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
900178ba:	425a      	negs	r2, r3
900178bc:	415a      	adcs	r2, r3
900178be:	602a      	str	r2, [r5, #0]
900178c0:	e7ee      	b.n	900178a0 <__swhatbuf_r+0x1e>
900178c2:	2340      	movs	r3, #64	; 0x40
900178c4:	2000      	movs	r0, #0
900178c6:	6023      	str	r3, [r4, #0]
900178c8:	b016      	add	sp, #88	; 0x58
900178ca:	bd70      	pop	{r4, r5, r6, pc}

900178cc <__smakebuf_r>:
900178cc:	898b      	ldrh	r3, [r1, #12]
900178ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
900178d0:	079d      	lsls	r5, r3, #30
900178d2:	4606      	mov	r6, r0
900178d4:	460c      	mov	r4, r1
900178d6:	d507      	bpl.n	900178e8 <__smakebuf_r+0x1c>
900178d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
900178dc:	6023      	str	r3, [r4, #0]
900178de:	6123      	str	r3, [r4, #16]
900178e0:	2301      	movs	r3, #1
900178e2:	6163      	str	r3, [r4, #20]
900178e4:	b002      	add	sp, #8
900178e6:	bd70      	pop	{r4, r5, r6, pc}
900178e8:	ab01      	add	r3, sp, #4
900178ea:	466a      	mov	r2, sp
900178ec:	f7ff ffc9 	bl	90017882 <__swhatbuf_r>
900178f0:	9900      	ldr	r1, [sp, #0]
900178f2:	4605      	mov	r5, r0
900178f4:	4630      	mov	r0, r6
900178f6:	f7ff f92f 	bl	90016b58 <_malloc_r>
900178fa:	b948      	cbnz	r0, 90017910 <__smakebuf_r+0x44>
900178fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90017900:	059a      	lsls	r2, r3, #22
90017902:	d4ef      	bmi.n	900178e4 <__smakebuf_r+0x18>
90017904:	f023 0303 	bic.w	r3, r3, #3
90017908:	f043 0302 	orr.w	r3, r3, #2
9001790c:	81a3      	strh	r3, [r4, #12]
9001790e:	e7e3      	b.n	900178d8 <__smakebuf_r+0xc>
90017910:	4b0d      	ldr	r3, [pc, #52]	; (90017948 <__smakebuf_r+0x7c>)
90017912:	62b3      	str	r3, [r6, #40]	; 0x28
90017914:	89a3      	ldrh	r3, [r4, #12]
90017916:	6020      	str	r0, [r4, #0]
90017918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9001791c:	81a3      	strh	r3, [r4, #12]
9001791e:	9b00      	ldr	r3, [sp, #0]
90017920:	6163      	str	r3, [r4, #20]
90017922:	9b01      	ldr	r3, [sp, #4]
90017924:	6120      	str	r0, [r4, #16]
90017926:	b15b      	cbz	r3, 90017940 <__smakebuf_r+0x74>
90017928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9001792c:	4630      	mov	r0, r6
9001792e:	f000 f863 	bl	900179f8 <_isatty_r>
90017932:	b128      	cbz	r0, 90017940 <__smakebuf_r+0x74>
90017934:	89a3      	ldrh	r3, [r4, #12]
90017936:	f023 0303 	bic.w	r3, r3, #3
9001793a:	f043 0301 	orr.w	r3, r3, #1
9001793e:	81a3      	strh	r3, [r4, #12]
90017940:	89a0      	ldrh	r0, [r4, #12]
90017942:	4305      	orrs	r5, r0
90017944:	81a5      	strh	r5, [r4, #12]
90017946:	e7cd      	b.n	900178e4 <__smakebuf_r+0x18>
90017948:	90016821 	.word	0x90016821

9001794c <_raise_r>:
9001794c:	291f      	cmp	r1, #31
9001794e:	b538      	push	{r3, r4, r5, lr}
90017950:	4604      	mov	r4, r0
90017952:	460d      	mov	r5, r1
90017954:	d904      	bls.n	90017960 <_raise_r+0x14>
90017956:	2316      	movs	r3, #22
90017958:	6003      	str	r3, [r0, #0]
9001795a:	f04f 30ff 	mov.w	r0, #4294967295
9001795e:	bd38      	pop	{r3, r4, r5, pc}
90017960:	6c42      	ldr	r2, [r0, #68]	; 0x44
90017962:	b112      	cbz	r2, 9001796a <_raise_r+0x1e>
90017964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90017968:	b94b      	cbnz	r3, 9001797e <_raise_r+0x32>
9001796a:	4620      	mov	r0, r4
9001796c:	f000 f830 	bl	900179d0 <_getpid_r>
90017970:	462a      	mov	r2, r5
90017972:	4601      	mov	r1, r0
90017974:	4620      	mov	r0, r4
90017976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9001797a:	f000 b817 	b.w	900179ac <_kill_r>
9001797e:	2b01      	cmp	r3, #1
90017980:	d00a      	beq.n	90017998 <_raise_r+0x4c>
90017982:	1c59      	adds	r1, r3, #1
90017984:	d103      	bne.n	9001798e <_raise_r+0x42>
90017986:	2316      	movs	r3, #22
90017988:	6003      	str	r3, [r0, #0]
9001798a:	2001      	movs	r0, #1
9001798c:	e7e7      	b.n	9001795e <_raise_r+0x12>
9001798e:	2400      	movs	r4, #0
90017990:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90017994:	4628      	mov	r0, r5
90017996:	4798      	blx	r3
90017998:	2000      	movs	r0, #0
9001799a:	e7e0      	b.n	9001795e <_raise_r+0x12>

9001799c <raise>:
9001799c:	4b02      	ldr	r3, [pc, #8]	; (900179a8 <raise+0xc>)
9001799e:	4601      	mov	r1, r0
900179a0:	6818      	ldr	r0, [r3, #0]
900179a2:	f7ff bfd3 	b.w	9001794c <_raise_r>
900179a6:	bf00      	nop
900179a8:	2000001c 	.word	0x2000001c

900179ac <_kill_r>:
900179ac:	b538      	push	{r3, r4, r5, lr}
900179ae:	4d07      	ldr	r5, [pc, #28]	; (900179cc <_kill_r+0x20>)
900179b0:	2300      	movs	r3, #0
900179b2:	4604      	mov	r4, r0
900179b4:	4608      	mov	r0, r1
900179b6:	4611      	mov	r1, r2
900179b8:	602b      	str	r3, [r5, #0]
900179ba:	f7e9 fa17 	bl	90000dec <_kill>
900179be:	1c43      	adds	r3, r0, #1
900179c0:	d102      	bne.n	900179c8 <_kill_r+0x1c>
900179c2:	682b      	ldr	r3, [r5, #0]
900179c4:	b103      	cbz	r3, 900179c8 <_kill_r+0x1c>
900179c6:	6023      	str	r3, [r4, #0]
900179c8:	bd38      	pop	{r3, r4, r5, pc}
900179ca:	bf00      	nop
900179cc:	2000d734 	.word	0x2000d734

900179d0 <_getpid_r>:
900179d0:	f7e9 ba04 	b.w	90000ddc <_getpid>

900179d4 <_fstat_r>:
900179d4:	b538      	push	{r3, r4, r5, lr}
900179d6:	4d07      	ldr	r5, [pc, #28]	; (900179f4 <_fstat_r+0x20>)
900179d8:	2300      	movs	r3, #0
900179da:	4604      	mov	r4, r0
900179dc:	4608      	mov	r0, r1
900179de:	4611      	mov	r1, r2
900179e0:	602b      	str	r3, [r5, #0]
900179e2:	f7e9 fa64 	bl	90000eae <_fstat>
900179e6:	1c43      	adds	r3, r0, #1
900179e8:	d102      	bne.n	900179f0 <_fstat_r+0x1c>
900179ea:	682b      	ldr	r3, [r5, #0]
900179ec:	b103      	cbz	r3, 900179f0 <_fstat_r+0x1c>
900179ee:	6023      	str	r3, [r4, #0]
900179f0:	bd38      	pop	{r3, r4, r5, pc}
900179f2:	bf00      	nop
900179f4:	2000d734 	.word	0x2000d734

900179f8 <_isatty_r>:
900179f8:	b538      	push	{r3, r4, r5, lr}
900179fa:	4d06      	ldr	r5, [pc, #24]	; (90017a14 <_isatty_r+0x1c>)
900179fc:	2300      	movs	r3, #0
900179fe:	4604      	mov	r4, r0
90017a00:	4608      	mov	r0, r1
90017a02:	602b      	str	r3, [r5, #0]
90017a04:	f7e9 fa63 	bl	90000ece <_isatty>
90017a08:	1c43      	adds	r3, r0, #1
90017a0a:	d102      	bne.n	90017a12 <_isatty_r+0x1a>
90017a0c:	682b      	ldr	r3, [r5, #0]
90017a0e:	b103      	cbz	r3, 90017a12 <_isatty_r+0x1a>
90017a10:	6023      	str	r3, [r4, #0]
90017a12:	bd38      	pop	{r3, r4, r5, pc}
90017a14:	2000d734 	.word	0x2000d734

90017a18 <_init>:
90017a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90017a1a:	bf00      	nop
90017a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
90017a1e:	bc08      	pop	{r3}
90017a20:	469e      	mov	lr, r3
90017a22:	4770      	bx	lr

90017a24 <_fini>:
90017a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90017a26:	bf00      	nop
90017a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
90017a2a:	bc08      	pop	{r3}
90017a2c:	469e      	mov	lr, r3
90017a2e:	4770      	bx	lr
