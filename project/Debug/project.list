
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001324c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002db8  0801344c  0801344c  0002344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016204  08016204  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08016204  08016204  00026204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801620c  0801620c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801620c  0801620c  0002620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016210  08016210  00026210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08016214  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d67c  20000080  08016294  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d6fc  08016294  0003d6fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d399  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000737c  00000000  00000000  0005d447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f78  00000000  00000000  000647c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df8  00000000  00000000  00066740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039f5f  00000000  00000000  00068538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032d58  00000000  00000000  000a2497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123656  00000000  00000000  000d51ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f8845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008934  00000000  00000000  001f8898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08013434 	.word	0x08013434

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08013434 	.word	0x08013434

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <_Z16MX_FREERTOS_Initv+0x18>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <_Z16MX_FREERTOS_Initv+0x1c>)
 80005ee:	f003 ff27 	bl	8004440 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <_Z16MX_FREERTOS_Initv+0x20>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	08015f5c 	.word	0x08015f5c
 8000600:	08000609 	.word	0x08000609
 8000604:	2000009c 	.word	0x2000009c

08000608 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000610:	f003 f908 	bl	8003824 <MX_LWIP_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f003 ffb9 	bl	800458c <osDelay>
 800061a:	e7fb      	b.n	8000614 <_Z16StartDefaultTaskPv+0xc>

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	; 0x30
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a2e      	ldr	r2, [pc, #184]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_GPIO_Init+0xd4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a28      	ldr	r2, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_GPIO_Init+0xd4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xd4>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_GPIO_Init+0xd4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_GPIO_Init+0xd4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <MX_GPIO_Init+0xd4>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_GPIO_Init+0xd4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <MX_GPIO_Init+0xd8>)
 80006c8:	f002 f896 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_GPIO_Init+0xd8>)
 80006e4:	f001 fedc 	bl	80024a0 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3730      	adds	r7, #48	; 0x30
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020400 	.word	0x40020400

080006f8 <_ZN8GPIObaseC1Ev>:

#include "gpio_hal.h"

bool GPIObase::isInit = false;

GPIObase::GPIObase(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	GPIObase::init();
 8000700:	f000 f810 	bl	8000724 <_ZN8GPIObase4initEv>
}
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <_ZN8GPIObaseD1Ev>:

GPIObase::~GPIObase(){
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]

}
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <_ZN8GPIObase4initEv>:
void GPIObase::init(void){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	if(GPIObase::isInit){
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <_ZN8GPIObase4initEv+0x1c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d105      	bne.n	800073c <_ZN8GPIObase4initEv+0x18>
		return;
	}
	MX_GPIO_Init();
 8000730:	f7ff ff74 	bl	800061c <MX_GPIO_Init>
	GPIObase::isInit = true;
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <_ZN8GPIObase4initEv+0x1c>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
 800073a:	e000      	b.n	800073e <_ZN8GPIObase4initEv+0x1a>
		return;
 800073c:	bf00      	nop
}
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000a0 	.word	0x200000a0

08000744 <_ZN4DoutC1EP12GPIO_TypeDeft13GPIO_PinState>:

Dout::Dout(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState state)
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	4611      	mov	r1, r2
 8000750:	461a      	mov	r2, r3
 8000752:	460b      	mov	r3, r1
 8000754:	80fb      	strh	r3, [r7, #6]
 8000756:	4613      	mov	r3, r2
 8000758:	717b      	strb	r3, [r7, #5]
			: _GPIOx(), _GPIO_Pin(){
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f7ff ffcc 	bl	80006f8 <_ZN8GPIObaseC1Ev>
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2200      	movs	r2, #0
 800076a:	809a      	strh	r2, [r3, #4]
	write(state);
 800076c:	797b      	ldrb	r3, [r7, #5]
 800076e:	4619      	mov	r1, r3
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f000 f811 	bl	8000798 <_ZN4Dout5writeE13GPIO_PinState>
}
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <_ZN4DoutD1Ev>:

Dout::~Dout(){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ffc0 	bl	800070e <_ZN8GPIObaseD1Ev>

}
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN4Dout5writeE13GPIO_PinState>:

void Dout::write(GPIO_PinState state){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
	 HAL_GPIO_WritePin(_GPIOx,_GPIO_Pin,state);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6818      	ldr	r0, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	889b      	ldrh	r3, [r3, #4]
 80007ac:	78fa      	ldrb	r2, [r7, #3]
 80007ae:	4619      	mov	r1, r3
 80007b0:	f002 f822 	bl	80027f8 <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_ZN4Dout6toggleEv>:

void Dout::toggle(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(_GPIOx, _GPIO_Pin);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	889b      	ldrh	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4610      	mov	r0, r2
 80007d0:	f002 f82b 	bl	800282a <HAL_GPIO_TogglePin>

}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007e0:	f3bf 8f4f 	dsb	sy
}
 80007e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e6:	f3bf 8f6f 	isb	sy
}
 80007ea:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <SCB_EnableICache+0x48>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007f4:	f3bf 8f4f 	dsb	sy
}
 80007f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007fa:	f3bf 8f6f 	isb	sy
}
 80007fe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <SCB_EnableICache+0x48>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <SCB_EnableICache+0x48>)
 8000806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800080c:	f3bf 8f4f 	dsb	sy
}
 8000810:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000812:	f3bf 8f6f 	isb	sy
}
 8000816:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <SCB_EnableDCache+0x9c>)
 8000830:	2200      	movs	r2, #0
 8000832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000836:	f3bf 8f4f 	dsb	sy
}
 800083a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800083c:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <SCB_EnableDCache+0x9c>)
 800083e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000842:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	0b5b      	lsrs	r3, r3, #13
 8000848:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800084c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	08db      	lsrs	r3, r3, #3
 8000852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000856:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	015a      	lsls	r2, r3, #5
 800085c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000860:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000866:	4917      	ldr	r1, [pc, #92]	; (80008c4 <SCB_EnableDCache+0x9c>)
 8000868:	4313      	orrs	r3, r2
 800086a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	60ba      	str	r2, [r7, #8]
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d000      	beq.n	8000884 <SCB_EnableDCache+0x5c>
      do {
 8000882:	e7e9      	b.n	8000858 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	60fa      	str	r2, [r7, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d000      	beq.n	800089a <SCB_EnableDCache+0x72>
    do {
 8000898:	e7d9      	b.n	800084e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800089a:	f3bf 8f4f 	dsb	sy
}
 800089e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <SCB_EnableDCache+0x9c>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <SCB_EnableDCache+0x9c>)
 80008a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ac:	f3bf 8f4f 	dsb	sy
}
 80008b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008b2:	f3bf 8f6f 	isb	sy
}
 80008b6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <ethernetif_notify_conn_changed>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ethernetif_notify_conn_changed(struct netif *netif)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	/* NOTE : This is function could be implemented in user file
	 when the callback is needed,
	 */
	Dout led0(GPIOB, GPIO_PIN_0);
 80008d0:	f107 0008 	add.w	r0, r7, #8
 80008d4:	2301      	movs	r3, #1
 80008d6:	2201      	movs	r2, #1
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <ethernetif_notify_conn_changed+0x44>)
 80008da:	f7ff ff33 	bl	8000744 <_ZN4DoutC1EP12GPIO_TypeDeft13GPIO_PinState>

	if (netif_is_link_up(netif))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80008e4:	109b      	asrs	r3, r3, #2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d004      	beq.n	80008fa <ethernetif_notify_conn_changed+0x32>
	{
		led0.toggle();
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff61 	bl	80007bc <_ZN4Dout6toggleEv>
	Dout led0(GPIOB, GPIO_PIN_0);
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff3e 	bl	8000780 <_ZN4DoutD1Ev>
	}
	else
	{

	}
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40020400 	.word	0x40020400

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000914:	f000 f892 	bl	8000a3c <_ZL10MPU_Configv>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000918:	f7ff ff60 	bl	80007dc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800091c:	f7ff ff84 	bl	8000828 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f000 fa9a 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f80c 	bl	8000940 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000928:	f003 fcf8 	bl	800431c <osKernelInitialize>
  MX_FREERTOS_Init();
 800092c:	f7ff fe5a 	bl	80005e4 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8000930:	f003 fd28 	bl	8004384 <osKernelStart>
  ethernetif_notify_conn_changed(&gnetif);
 8000934:	4801      	ldr	r0, [pc, #4]	; (800093c <main+0x2c>)
 8000936:	f7ff ffc7 	bl	80008c8 <ethernetif_notify_conn_changed>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093a:	e7fe      	b.n	800093a <main+0x2a>
 800093c:	20000104 	.word	0x20000104

08000940 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2234      	movs	r2, #52	; 0x34
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f011 fda7 	bl	80124a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <_Z18SystemClock_Configv+0xf4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <_Z18SystemClock_Configv+0xf4>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <_Z18SystemClock_Configv+0xf4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <_Z18SystemClock_Configv+0xf8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <_Z18SystemClock_Configv+0xf8>)
 8000982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <_Z18SystemClock_Configv+0xf8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2310      	movs	r3, #16
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a8:	2308      	movs	r3, #8
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009ac:	23d8      	movs	r3, #216	; 0xd8
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 ff9d 	bl	8002900 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 80009d6:	f000 f889 	bl	8000aec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009da:	f001 ff41 	bl	8002860 <HAL_PWREx_EnableOverDrive>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 80009ee:	f000 f87d 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2302      	movs	r3, #2
 80009f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	2107      	movs	r1, #7
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fa23 	bl	8002e5c <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	bf14      	ite	ne
 8000a1c:	2301      	movne	r3, #1
 8000a1e:	2300      	moveq	r3, #0
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 8000a26:	f000 f861 	bl	8000aec <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3750      	adds	r7, #80	; 0x50
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a4e:	f000 fb3f 	bl	80010d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a52:	2301      	movs	r3, #1
 8000a54:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000a5a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000a5e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000a60:	231c      	movs	r3, #28
 8000a62:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a80:	463b      	mov	r3, r7
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fb5c 	bl	8001140 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000a8c:	2317      	movs	r3, #23
 8000a8e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a90:	2303      	movs	r3, #3
 8000a92:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fb4e 	bl	8001140 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000aa8:	2313      	movs	r3, #19
 8000aaa:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fb44 	bl	8001140 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ab8:	2004      	movs	r0, #4
 8000aba:	f000 fb21 	bl	8001100 <HAL_MPU_Enable>

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d101      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ada:	f000 f9d3 	bl	8000e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40001000 	.word	0x40001000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	210f      	movs	r1, #15
 8000b32:	f06f 0001 	mvn.w	r0, #1
 8000b36:	f000 faa1 	bl	800107c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2036      	movs	r0, #54	; 0x36
 8000b5e:	f000 fa8d 	bl	800107c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b62:	2036      	movs	r0, #54	; 0x36
 8000b64:	f000 faa6 	bl	80010b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_InitTick+0xa0>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <HAL_InitTick+0xa0>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_InitTick+0xa0>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 0210 	add.w	r2, r7, #16
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fb38 	bl	8003200 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b90:	f002 fb22 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8000b94:	4603      	mov	r3, r0
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <HAL_InitTick+0xa4>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bca:	f002 fb4b 	bl	8003264 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d104      	bne.n	8000bde <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000bd6:	f002 fba7 	bl	8003328 <HAL_TIM_Base_Start_IT>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3730      	adds	r7, #48	; 0x30
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	200000a4 	.word	0x200000a4
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM6_DAC_IRQHandler+0x10>)
 8000c2a:	f002 fbf5 	bl	8003418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000a4 	.word	0x200000a4

08000c38 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <ETH_IRQHandler+0x10>)
 8000c3e:	f000 fea1 	bl	8001984 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20003218 	.word	0x20003218

08000c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	return 1;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_kill>:

int _kill(int pid, int sig)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <_kill+0x20>)
 8000c68:	2216      	movs	r2, #22
 8000c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	2000d6f8 	.word	0x2000d6f8

08000c80 <_exit>:

void _exit (int status)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ffe5 	bl	8000c5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c92:	e7fe      	b.n	8000c92 <_exit+0x12>

08000c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e00a      	b.n	8000cbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ca6:	f3af 8000 	nop.w
 8000caa:	4601      	mov	r1, r0
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	b2ca      	uxtb	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf0      	blt.n	8000ca6 <_read+0x12>
	}

return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e009      	b.n	8000cf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf1      	blt.n	8000ce0 <_write+0x12>
	}
	return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_close>:

int _close(int file)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_isatty>:

int _isatty(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
	return 1;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d205      	bcs.n	8000dac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <_sbrk+0x6c>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	371c      	adds	r7, #28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20080000 	.word	0x20080000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	200000f0 	.word	0x200000f0
 8000dd8:	2000d700 	.word	0x2000d700
 8000ddc:	2000d6f8 	.word	0x2000d6f8

08000de0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0a:	490e      	ldr	r1, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e20:	4c0b      	ldr	r4, [pc, #44]	; (8000e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffd7 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f011 faf1 	bl	8012418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fd6b 	bl	8000910 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e48:	08016214 	.word	0x08016214
  ldr r2, =_sbss
 8000e4c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e50:	2000d6fc 	.word	0x2000d6fc

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x28>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x28>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f8fc 	bl	8001066 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f7ff fe6a 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fe40 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200000f4 	.word	0x200000f4

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200000f4 	.word	0x200000f4

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x40>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	05fa0000 	.word	0x05fa0000

08000f54 <__NVIC_GetPriorityGrouping>:
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff4c 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800108e:	f7ff ff61 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 8001092:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	6978      	ldr	r0, [r7, #20]
 800109a:	f7ff ffb1 	bl	8001000 <NVIC_EncodePriority>
 800109e:	4602      	mov	r2, r0
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff80 	bl	8000fac <__NVIC_SetPriority>
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff54 	bl	8000f70 <__NVIC_EnableIRQ>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010d4:	f3bf 8f5f 	dmb	sy
}
 80010d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_MPU_Disable+0x28>)
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_MPU_Disable+0x28>)
 80010e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_MPU_Disable+0x2c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	e000ed90 	.word	0xe000ed90

08001100 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_MPU_Enable+0x38>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_MPU_Enable+0x3c>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	4a09      	ldr	r2, [pc, #36]	; (800113c <HAL_MPU_Enable+0x3c>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800111e:	f3bf 8f4f 	dsb	sy
}
 8001122:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001124:	f3bf 8f6f 	isb	sy
}
 8001128:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed90 	.word	0xe000ed90
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	785a      	ldrb	r2, [r3, #1]
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_MPU_ConfigRegion+0x84>)
 800114e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d029      	beq.n	80011ac <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_MPU_ConfigRegion+0x84>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7b1b      	ldrb	r3, [r3, #12]
 8001164:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7adb      	ldrb	r3, [r3, #11]
 800116a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800116c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7a9b      	ldrb	r3, [r3, #10]
 8001172:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001174:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7b5b      	ldrb	r3, [r3, #13]
 800117a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800117c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7b9b      	ldrb	r3, [r3, #14]
 8001182:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001184:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7bdb      	ldrb	r3, [r3, #15]
 800118a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800118c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7a5b      	ldrb	r3, [r3, #9]
 8001192:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001194:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7a1b      	ldrb	r3, [r3, #8]
 800119a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800119c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	7812      	ldrb	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011a6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80011aa:	e005      	b.n	80011b8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_MPU_ConfigRegion+0x84>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_MPU_ConfigRegion+0x84>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed90 	.word	0xe000ed90

080011c8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80011d8:	4ba0      	ldr	r3, [pc, #640]	; (800145c <HAL_ETH_Init+0x294>)
 80011da:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e180      	b.n	80014f0 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f002 fc70 	bl	8003ae8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b95      	ldr	r3, [pc, #596]	; (8001460 <HAL_ETH_Init+0x298>)
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	4a94      	ldr	r2, [pc, #592]	; (8001460 <HAL_ETH_Init+0x298>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001212:	6453      	str	r3, [r2, #68]	; 0x44
 8001214:	4b92      	ldr	r3, [pc, #584]	; (8001460 <HAL_ETH_Init+0x298>)
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001220:	4b90      	ldr	r3, [pc, #576]	; (8001464 <HAL_ETH_Init+0x29c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a8f      	ldr	r2, [pc, #572]	; (8001464 <HAL_ETH_Init+0x29c>)
 8001226:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800122a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800122c:	4b8d      	ldr	r3, [pc, #564]	; (8001464 <HAL_ETH_Init+0x29c>)
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	498b      	ldr	r1, [pc, #556]	; (8001464 <HAL_ETH_Init+0x29c>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001250:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001252:	f7ff fe2b 	bl	8000eac <HAL_GetTick>
 8001256:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001258:	e011      	b.n	800127e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800125a:	f7ff fe27 	bl	8000eac <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001268:	d909      	bls.n	800127e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2203      	movs	r2, #3
 800126e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e138      	b.n	80014f0 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e4      	bne.n	800125a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f023 031c 	bic.w	r3, r3, #28
 800129e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80012a0:	f001 ff8e 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80012a4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4a6f      	ldr	r2, [pc, #444]	; (8001468 <HAL_ETH_Init+0x2a0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d908      	bls.n	80012c0 <HAL_ETH_Init+0xf8>
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	4a6e      	ldr	r2, [pc, #440]	; (800146c <HAL_ETH_Init+0x2a4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d804      	bhi.n	80012c0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e027      	b.n	8001310 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	4a6a      	ldr	r2, [pc, #424]	; (800146c <HAL_ETH_Init+0x2a4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d908      	bls.n	80012da <HAL_ETH_Init+0x112>
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	4a64      	ldr	r2, [pc, #400]	; (800145c <HAL_ETH_Init+0x294>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d204      	bcs.n	80012da <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f043 030c 	orr.w	r3, r3, #12
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	e01a      	b.n	8001310 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4a5f      	ldr	r2, [pc, #380]	; (800145c <HAL_ETH_Init+0x294>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d303      	bcc.n	80012ea <HAL_ETH_Init+0x122>
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4a62      	ldr	r2, [pc, #392]	; (8001470 <HAL_ETH_Init+0x2a8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d911      	bls.n	800130e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4a60      	ldr	r2, [pc, #384]	; (8001470 <HAL_ETH_Init+0x2a8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d908      	bls.n	8001304 <HAL_ETH_Init+0x13c>
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4a5f      	ldr	r2, [pc, #380]	; (8001474 <HAL_ETH_Init+0x2ac>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d804      	bhi.n	8001304 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e005      	b.n	8001310 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	e000      	b.n	8001310 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800130e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001318:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800131c:	2100      	movs	r1, #0
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fc10 	bl	8001b44 <HAL_ETH_WritePHYRegister>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800132e:	6939      	ldr	r1, [r7, #16]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fdc5 	bl	8001ec0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e0d6      	b.n	80014f0 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001342:	20ff      	movs	r0, #255	; 0xff
 8001344:	f7ff fdbe 	bl	8000ec4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80a4 	beq.w	800149a <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001352:	f7ff fdab 	bl	8000eac <HAL_GetTick>
 8001356:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	461a      	mov	r2, r3
 800135e:	2101      	movs	r1, #1
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fb87 	bl	8001a74 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001366:	f7ff fda1 	bl	8000eac <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d90f      	bls.n	8001398 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800137c:	6939      	ldr	r1, [r7, #16]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fd9e 	bl	8001ec0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0ab      	b.n	80014f0 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0da      	beq.n	8001358 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80013a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fbcb 	bl	8001b44 <HAL_ETH_WritePHYRegister>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00b      	beq.n	80013cc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fd80 	bl	8001ec0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013c8:	2301      	movs	r3, #1
 80013ca:	e091      	b.n	80014f0 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fd6e 	bl	8000eac <HAL_GetTick>
 80013d0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	461a      	mov	r2, r3
 80013d8:	2101      	movs	r1, #1
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fb4a 	bl	8001a74 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80013e0:	f7ff fd64 	bl	8000eac <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d90f      	bls.n	8001412 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013f6:	6939      	ldr	r1, [r7, #16]
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fd61 	bl	8001ec0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e06e      	b.n	80014f0 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0da      	beq.n	80013d2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	461a      	mov	r2, r3
 8001422:	2110      	movs	r1, #16
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fb25 	bl	8001a74 <HAL_ETH_ReadPHYRegister>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00b      	beq.n	8001448 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001434:	6939      	ldr	r1, [r7, #16]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fd42 	bl	8001ec0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001444:	2301      	movs	r3, #1
 8001446:	e053      	b.n	80014f0 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	d012      	beq.n	8001478 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	e010      	b.n	800147e <HAL_ETH_Init+0x2b6>
 800145c:	03938700 	.word	0x03938700
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	01312cff 	.word	0x01312cff
 800146c:	02160ebf 	.word	0x02160ebf
 8001470:	05f5e0ff 	.word	0x05f5e0ff
 8001474:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	e026      	b.n	80014de <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e021      	b.n	80014de <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	2100      	movs	r1, #0
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fb46 	bl	8001b44 <HAL_ETH_WritePHYRegister>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014c2:	6939      	ldr	r1, [r7, #16]
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fcfb 	bl	8001ec0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00c      	b.n	80014f0 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80014d6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80014da:	f7ff fcf3 	bl	8000ec4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80014de:	6939      	ldr	r1, [r7, #16]
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fced 	bl	8001ec0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_ETH_DMATxDescListInit+0x20>
 8001514:	2302      	movs	r3, #2
 8001516:	e051      	b.n	80015bc <HAL_ETH_DMATxDescListInit+0xc4>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e030      	b.n	8001596 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	4413      	add	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001544:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	461a      	mov	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	429a      	cmp	r2, r3
 8001576:	d208      	bcs.n	800158a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	015b      	lsls	r3, r3, #5
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	4413      	add	r3, r2
 8001582:	461a      	mov	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	e002      	b.n	8001590 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d3ca      	bcc.n	8001534 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a8:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ETH_DMARxDescListInit+0x20>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e055      	b.n	8001694 <HAL_ETH_DMARxDescListInit+0xcc>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e034      	b.n	800166e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	015b      	lsls	r3, r3, #5
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	4413      	add	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001614:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800161c:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	461a      	mov	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d105      	bne.n	8001646 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3b01      	subs	r3, #1
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	d208      	bcs.n	8001662 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	4413      	add	r3, r2
 800165a:	461a      	mov	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	e002      	b.n	8001668 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3301      	adds	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3c6      	bcc.n	8001604 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001680:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_ETH_TransmitFrame+0x24>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0cc      	b.n	800185e <HAL_ETH_TransmitFrame+0x1be>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0b7      	b.n	800185e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da09      	bge.n	800170c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2212      	movs	r2, #18
 80016fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0a8      	b.n	800185e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001712:	4293      	cmp	r3, r2
 8001714:	d915      	bls.n	8001742 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	4a54      	ldr	r2, [pc, #336]	; (800186c <HAL_ETH_TransmitFrame+0x1cc>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0a9b      	lsrs	r3, r3, #10
 8001720:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4b51      	ldr	r3, [pc, #324]	; (800186c <HAL_ETH_TransmitFrame+0x1cc>)
 8001726:	fba3 1302 	umull	r1, r3, r3, r2
 800172a:	0a9b      	lsrs	r3, r3, #10
 800172c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e001      	b.n	8001746 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d11c      	bne.n	8001786 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800175a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001766:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001776:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
 8001784:	e04b      	b.n	800181e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	e044      	b.n	8001816 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800179a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017b0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017ba:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3b01      	subs	r3, #1
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d116      	bne.n	80017f4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017d4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	4a25      	ldr	r2, [pc, #148]	; (8001870 <HAL_ETH_TransmitFrame+0x1d0>)
 80017da:	fb03 f202 	mul.w	r2, r3, r2
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80017e6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017f2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001802:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3301      	adds	r3, #1
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	429a      	cmp	r2, r3
 800181c:	d3b6      	bcc.n	800178c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00d      	beq.n	800184c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001838:	461a      	mov	r2, r3
 800183a:	2304      	movs	r3, #4
 800183c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	461a      	mov	r2, r3
 8001848:	2300      	movs	r3, #0
 800184a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	ac02b00b 	.word	0xac02b00b
 8001870:	fffffa0c 	.word	0xfffffa0c

08001874 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800188a:	2302      	movs	r3, #2
 800188c:	e074      	b.n	8001978 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2202      	movs	r2, #2
 800189a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800189e:	e05a      	b.n	8001956 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b4:	d10d      	bne.n	80018d2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
 80018d0:	e041      	b.n	8001956 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10b      	bne.n	80018f8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	461a      	mov	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
 80018f6:	e02e      	b.n	8001956 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	2b01      	cmp	r3, #1
 8001910:	d103      	bne.n	800191a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0c1b      	lsrs	r3, r3, #16
 8001922:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001926:	1f1a      	subs	r2, r3, #4
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e010      	b.n	8001978 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db02      	blt.n	8001966 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d99c      	bls.n	80018a0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199a:	2b40      	cmp	r3, #64	; 0x40
 800199c:	d112      	bne.n	80019c4 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f002 f962 	bl	8003c68 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ac:	461a      	mov	r2, r3
 80019ae:	2340      	movs	r3, #64	; 0x40
 80019b0:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019c2:	e01a      	b.n	80019fa <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d111      	bne.n	80019fa <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f838 	bl	8001a4c <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e4:	461a      	mov	r2, r3
 80019e6:	2301      	movs	r3, #1
 80019e8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a02:	461a      	mov	r2, r3
 8001a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a08:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a1c:	d112      	bne.n	8001a44 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f81e 	bl	8001a60 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a32:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b82      	cmp	r3, #130	; 0x82
 8001a94:	d101      	bne.n	8001a9a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a96:	2302      	movs	r3, #2
 8001a98:	e050      	b.n	8001b3c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2282      	movs	r2, #130	; 0x82
 8001a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 031c 	and.w	r3, r3, #28
 8001ab0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8a1b      	ldrh	r3, [r3, #16]
 8001ab6:	02db      	lsls	r3, r3, #11
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ac0:	897b      	ldrh	r3, [r7, #10]
 8001ac2:	019b      	lsls	r3, r3, #6
 8001ac4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f023 0302 	bic.w	r3, r3, #2
 8001ad4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ae6:	f7ff f9e1 	bl	8000eac <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aec:	e015      	b.n	8001b1a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001aee:	f7ff f9dd 	bl	8000eac <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d309      	bcc.n	8001b12 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e014      	b.n	8001b3c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1e4      	bne.n	8001aee <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b42      	cmp	r3, #66	; 0x42
 8001b64:	d101      	bne.n	8001b6a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
 8001b68:	e04e      	b.n	8001c08 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2242      	movs	r2, #66	; 0x42
 8001b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 031c 	and.w	r3, r3, #28
 8001b80:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8a1b      	ldrh	r3, [r3, #16]
 8001b86:	02db      	lsls	r3, r3, #11
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	019b      	lsls	r3, r3, #6
 8001b94:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc0:	f7ff f974 	bl	8000eac <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bc6:	e015      	b.n	8001bf4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001bc8:	f7ff f970 	bl	8000eac <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd6:	d309      	bcc.n	8001bec <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e00d      	b.n	8001c08 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1e4      	bne.n	8001bc8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_ETH_Start+0x16>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e01f      	b.n	8001c66 <HAL_ETH_Start+0x56>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fb40 	bl	80022bc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fb77 	bl	8002330 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fc06 	bl	8002454 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fbab 	bl	80023a4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fbd4 	bl	80023fc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_ETH_Stop+0x16>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e01f      	b.n	8001cc4 <HAL_ETH_Stop+0x56>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fb9b 	bl	80023d0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fbc4 	bl	8002428 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 fb62 	bl	800236a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fbd4 	bl	8002454 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fb22 	bl	80022f6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ETH_ConfigMAC+0x1c>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e0e4      	b.n	8001eb2 <HAL_ETH_ConfigMAC+0x1e6>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80b1 	beq.w	8001e62 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4b6c      	ldr	r3, [pc, #432]	; (8001ebc <HAL_ETH_ConfigMAC+0x1f0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d18:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d1e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d24:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d2a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001d30:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001d36:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001d3c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001d42:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001d48:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001d4e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001d54:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001d5a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f7ff f8a6 	bl	8000ec4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d88:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001d8e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d94:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001d9a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001da0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001da6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001db2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001db4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f7ff f880 	bl	8000ec4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dd4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dde:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001dfc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e02:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e08:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e0e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e14:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff f849 	bl	8000ec4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff f836 	bl	8000ec4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	61da      	str	r2, [r3, #28]
 8001e60:	e01e      	b.n	8001ea0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e70:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff f816 	bl	8000ec4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	ff20810f 	.word	0xff20810f

08001ec0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0b0      	sub	sp, #192	; 0xc0
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001edc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8001f0c:	e001      	b.n	8001f12 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f16:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f2c:	2340      	movs	r3, #64	; 0x40
 8001f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f98:	4ba9      	ldr	r3, [pc, #676]	; (8002240 <ETH_MACDMAConfig+0x380>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fa4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fa8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fac:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001fb2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fb6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fba:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001fc0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001fc4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001fc8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001fcc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001fd0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001fd4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7fe ff65 	bl	8000ec4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002002:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002004:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002008:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800200a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800200c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800200e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002012:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002018:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800201a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800201e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002024:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002028:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002030:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002032:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800203e:	2001      	movs	r0, #1
 8002040:	f7fe ff40 	bl	8000ec4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800204c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002056:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002060:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800206c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002070:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002074:	4013      	ands	r3, r2
 8002076:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800207a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800207e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002080:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002084:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800208a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800208c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002090:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002096:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800209c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800209e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7fe ff01 	bl	8000ec4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ca:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7fe feec 	bl	8000ec4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80020fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002104:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002108:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800211a:	2304      	movs	r3, #4
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800211e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800212a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800213a:	2300      	movs	r3, #0
 800213c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800213e:	2300      	movs	r3, #0
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002150:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002154:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <ETH_MACDMAConfig+0x384>)
 8002156:	4013      	ands	r3, r2
 8002158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800215c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800215e:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002160:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002162:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002164:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002166:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002168:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800216a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800216c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800216e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002170:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002172:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002174:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002178:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800217c:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800217e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002190:	461a      	mov	r2, r3
 8002192:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002196:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f7fe fe8c 	bl	8000ec4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b4:	461a      	mov	r2, r3
 80021b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021ba:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021c0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021c4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021c8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021cc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80021ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80021d2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80021d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80021d6:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021e4:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7fe fe65 	bl	8000ec4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002202:	461a      	mov	r2, r3
 8002204:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002208:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d10b      	bne.n	800222a <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221a:	69d9      	ldr	r1, [r3, #28]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <ETH_MACDMAConfig+0x388>)
 8002222:	430b      	orrs	r3, r1
 8002224:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002228:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	461a      	mov	r2, r3
 8002230:	2100      	movs	r1, #0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f80a 	bl	800224c <ETH_MACAddressConfig>
}
 8002238:	bf00      	nop
 800223a:	37c0      	adds	r7, #192	; 0xc0
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	ff20810f 	.word	0xff20810f
 8002244:	f8de3f23 	.word	0xf8de3f23
 8002248:	00010040 	.word	0x00010040

0800224c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3305      	adds	r3, #5
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	3204      	adds	r2, #4
 8002264:	7812      	ldrb	r2, [r2, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <ETH_MACAddressConfig+0x68>)
 800226e:	4413      	add	r3, r2
 8002270:	461a      	mov	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3303      	adds	r3, #3
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	061a      	lsls	r2, r3, #24
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3302      	adds	r3, #2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3301      	adds	r3, #1
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	4313      	orrs	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <ETH_MACAddressConfig+0x6c>)
 800229e:	4413      	add	r3, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40028040 	.word	0x40028040
 80022b8:	40028044 	.word	0x40028044

080022bc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0208 	orr.w	r2, r2, #8
 80022d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7fe fdef 	bl	8000ec4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	601a      	str	r2, [r3, #0]
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0208 	bic.w	r2, r2, #8
 8002310:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800231a:	2001      	movs	r0, #1
 800231c:	f7fe fdd2 	bl	8000ec4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	601a      	str	r2, [r3, #0]
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0204 	orr.w	r2, r2, #4
 800234a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002354:	2001      	movs	r0, #1
 8002356:	f7fe fdb5 	bl	8000ec4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	601a      	str	r2, [r3, #0]
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0204 	bic.w	r2, r2, #4
 8002384:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800238e:	2001      	movs	r0, #1
 8002390:	f7fe fd98 	bl	8000ec4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c2:	6193      	str	r3, [r2, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ee:	6193      	str	r3, [r2, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800241a:	6193      	str	r3, [r2, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	f023 0302 	bic.w	r3, r3, #2
 8002442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002446:	6193      	str	r3, [r2, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002476:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe fd1d 	bl	8000ec4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002494:	6193      	str	r3, [r2, #24]
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e175      	b.n	80027ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 8164 	bne.w	80027a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d005      	beq.n	80024f6 <HAL_GPIO_Init+0x56>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80be 	beq.w	80027a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <HAL_GPIO_Init+0x324>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_GPIO_Init+0x324>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_GPIO_Init+0x324>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002642:	4a61      	ldr	r2, [pc, #388]	; (80027c8 <HAL_GPIO_Init+0x328>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_GPIO_Init+0x32c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d037      	beq.n	80026de <HAL_GPIO_Init+0x23e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a57      	ldr	r2, [pc, #348]	; (80027d0 <HAL_GPIO_Init+0x330>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d031      	beq.n	80026da <HAL_GPIO_Init+0x23a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <HAL_GPIO_Init+0x334>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02b      	beq.n	80026d6 <HAL_GPIO_Init+0x236>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a55      	ldr	r2, [pc, #340]	; (80027d8 <HAL_GPIO_Init+0x338>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d025      	beq.n	80026d2 <HAL_GPIO_Init+0x232>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a54      	ldr	r2, [pc, #336]	; (80027dc <HAL_GPIO_Init+0x33c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01f      	beq.n	80026ce <HAL_GPIO_Init+0x22e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a53      	ldr	r2, [pc, #332]	; (80027e0 <HAL_GPIO_Init+0x340>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d019      	beq.n	80026ca <HAL_GPIO_Init+0x22a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a52      	ldr	r2, [pc, #328]	; (80027e4 <HAL_GPIO_Init+0x344>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a51      	ldr	r2, [pc, #324]	; (80027e8 <HAL_GPIO_Init+0x348>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x222>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a50      	ldr	r2, [pc, #320]	; (80027ec <HAL_GPIO_Init+0x34c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x21e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4f      	ldr	r2, [pc, #316]	; (80027f0 <HAL_GPIO_Init+0x350>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x21a>
 80026b6:	2309      	movs	r3, #9
 80026b8:	e012      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ba:	230a      	movs	r3, #10
 80026bc:	e010      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026be:	2308      	movs	r3, #8
 80026c0:	e00e      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026c6:	2306      	movs	r3, #6
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x328>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_GPIO_Init+0x354>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <HAL_GPIO_Init+0x354>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002776:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_GPIO_Init+0x354>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_GPIO_Init+0x354>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae86 	bls.w	80024c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40021c00 	.word	0x40021c00
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40022400 	.word	0x40022400
 80027f4:	40013c00 	.word	0x40013c00

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800283c:	887a      	ldrh	r2, [r7, #2]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	041a      	lsls	r2, r3, #16
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43d9      	mvns	r1, r3
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	400b      	ands	r3, r1
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800288e:	f7fe fb0d 	bl	8000eac <HAL_GetTick>
 8002892:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002894:	e009      	b.n	80028aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002896:	f7fe fb09 	bl	8000eac <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a4:	d901      	bls.n	80028aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e022      	b.n	80028f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028aa:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b6:	d1ee      	bne.n	8002896 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c4:	f7fe faf2 	bl	8000eac <HAL_GetTick>
 80028c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028ca:	e009      	b.n	80028e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028cc:	f7fe faee 	bl	8000eac <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028da:	d901      	bls.n	80028e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e007      	b.n	80028f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ec:	d1ee      	bne.n	80028cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40007000 	.word	0x40007000

08002900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e29b      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8087 	beq.w	8002a32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002924:	4b96      	ldr	r3, [pc, #600]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b04      	cmp	r3, #4
 800292e:	d00c      	beq.n	800294a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002930:	4b93      	ldr	r3, [pc, #588]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d112      	bne.n	8002962 <HAL_RCC_OscConfig+0x62>
 800293c:	4b90      	ldr	r3, [pc, #576]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002948:	d10b      	bne.n	8002962 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294a:	4b8d      	ldr	r3, [pc, #564]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d06c      	beq.n	8002a30 <HAL_RCC_OscConfig+0x130>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d168      	bne.n	8002a30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e275      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x7a>
 800296c:	4b84      	ldr	r3, [pc, #528]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a83      	ldr	r2, [pc, #524]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	e02e      	b.n	80029d8 <HAL_RCC_OscConfig+0xd8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x9c>
 8002982:	4b7f      	ldr	r3, [pc, #508]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7e      	ldr	r2, [pc, #504]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b7c      	ldr	r3, [pc, #496]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7b      	ldr	r2, [pc, #492]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e01d      	b.n	80029d8 <HAL_RCC_OscConfig+0xd8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0xc0>
 80029a6:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a75      	ldr	r2, [pc, #468]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a72      	ldr	r2, [pc, #456]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0xd8>
 80029c0:	4b6f      	ldr	r3, [pc, #444]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6e      	ldr	r2, [pc, #440]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a6b      	ldr	r2, [pc, #428]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fa64 	bl	8000eac <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe fa60 	bl	8000eac <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e229      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe8>
 8002a06:	e014      	b.n	8002a32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fa50 	bl	8000eac <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fa4c 	bl	8000eac <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e215      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a22:	4b57      	ldr	r3, [pc, #348]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x110>
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d069      	beq.n	8002b12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3e:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4a:	4b4d      	ldr	r3, [pc, #308]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d11c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x190>
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_RCC_OscConfig+0x17a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e1e9      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	493d      	ldr	r1, [pc, #244]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	e040      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d023      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a38      	ldr	r2, [pc, #224]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fa02 	bl	8000eac <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aac:	f7fe f9fe 	bl	8000eac <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1c7      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4929      	ldr	r1, [pc, #164]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
 8002ade:	e018      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe f9de 	bl	8000eac <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe f9da 	bl	8000eac <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1a3      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d038      	beq.n	8002b90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7fe f9bb 	bl	8000eac <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3a:	f7fe f9b7 	bl	8000eac <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e180      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x23a>
 8002b58:	e01a      	b.n	8002b90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe f9a1 	bl	8000eac <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7fe f99d 	bl	8000eac <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d903      	bls.n	8002b84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e166      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
 8002b80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	4b92      	ldr	r3, [pc, #584]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a4 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b8c      	ldr	r3, [pc, #560]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b89      	ldr	r3, [pc, #548]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a88      	ldr	r2, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b86      	ldr	r3, [pc, #536]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc6:	4b83      	ldr	r3, [pc, #524]	; (8002dd4 <HAL_RCC_OscConfig+0x4d4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d118      	bne.n	8002c04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bd2:	4b80      	ldr	r3, [pc, #512]	; (8002dd4 <HAL_RCC_OscConfig+0x4d4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7f      	ldr	r2, [pc, #508]	; (8002dd4 <HAL_RCC_OscConfig+0x4d4>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bde:	f7fe f965 	bl	8000eac <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be6:	f7fe f961 	bl	8000eac <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b64      	cmp	r3, #100	; 0x64
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e12a      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf8:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x4d4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x31a>
 8002c0c:	4b70      	ldr	r3, [pc, #448]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a6f      	ldr	r2, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
 8002c18:	e02d      	b.n	8002c76 <HAL_RCC_OscConfig+0x376>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x33c>
 8002c22:	4b6b      	ldr	r3, [pc, #428]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a6a      	ldr	r2, [pc, #424]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a67      	ldr	r2, [pc, #412]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3a:	e01c      	b.n	8002c76 <HAL_RCC_OscConfig+0x376>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x35e>
 8002c44:	4b62      	ldr	r3, [pc, #392]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a61      	ldr	r2, [pc, #388]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a5e      	ldr	r2, [pc, #376]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	e00b      	b.n	8002c76 <HAL_RCC_OscConfig+0x376>
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a5b      	ldr	r2, [pc, #364]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a58      	ldr	r2, [pc, #352]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d015      	beq.n	8002caa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f915 	bl	8000eac <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe f911 	bl	8000eac <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0d8      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ee      	beq.n	8002c86 <HAL_RCC_OscConfig+0x386>
 8002ca8:	e014      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7fe f8ff 	bl	8000eac <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7fe f8fb 	bl	8000eac <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0c2      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc8:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ee      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cda:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a3c      	ldr	r2, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80ae 	beq.w	8002e4c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf0:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d06d      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d14b      	bne.n	8002d9c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe f8cc 	bl	8000eac <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe f8c8 	bl	8000eac <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e091      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	019b      	lsls	r3, r3, #6
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	071b      	lsls	r3, r3, #28
 8002d62:	491b      	ldr	r1, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe f89a 	bl	8000eac <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe f896 	bl	8000eac <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e05f      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x47c>
 8002d9a:	e057      	b.n	8002e4c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe f880 	bl	8000eac <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe f87c 	bl	8000eac <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e045      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4b0>
 8002dce:	e03d      	b.n	8002e4c <HAL_RCC_OscConfig+0x54c>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <HAL_RCC_OscConfig+0x558>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d030      	beq.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d129      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d122      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d119      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d10f      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d0      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 020f 	bic.w	r2, r3, #15
 8002e8a:	4965      	ldr	r1, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ede:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d040      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d115      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e073      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06b      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4936      	ldr	r1, [pc, #216]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f50:	f7fd ffac 	bl	8000eac <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7fd ffa8 	bl	8000eac <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e053      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 020c 	and.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d1eb      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d210      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 020f 	bic.w	r2, r3, #15
 8002f96:	4922      	ldr	r1, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	490a      	ldr	r1, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1cc>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1d0>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1d4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fd9a 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00
 8003024:	40023800 	.word	0x40023800
 8003028:	08015f80 	.word	0x08015f80
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003038:	b090      	sub	sp, #64	; 0x40
 800303a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	637b      	str	r3, [r7, #52]	; 0x34
 8003040:	2300      	movs	r3, #0
 8003042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003044:	2300      	movs	r3, #0
 8003046:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304c:	4b59      	ldr	r3, [pc, #356]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d00d      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x40>
 8003058:	2b08      	cmp	r3, #8
 800305a:	f200 80a1 	bhi.w	80031a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x34>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x3a>
 8003066:	e09b      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800306a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800306c:	e09b      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306e:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_GetSysClockFreq+0x188>)
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003072:	e098      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b4f      	ldr	r3, [pc, #316]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800307e:	4b4d      	ldr	r3, [pc, #308]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d028      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b4a      	ldr	r3, [pc, #296]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	2200      	movs	r2, #0
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	627a      	str	r2, [r7, #36]	; 0x24
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800309c:	2100      	movs	r1, #0
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_GetSysClockFreq+0x188>)
 80030a0:	fb03 f201 	mul.w	r2, r3, r1
 80030a4:	2300      	movs	r3, #0
 80030a6:	fb00 f303 	mul.w	r3, r0, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	4a43      	ldr	r2, [pc, #268]	; (80031bc <HAL_RCC_GetSysClockFreq+0x188>)
 80030ae:	fba0 1202 	umull	r1, r2, r0, r2
 80030b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030b4:	460a      	mov	r2, r1
 80030b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ba:	4413      	add	r3, r2
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	2200      	movs	r2, #0
 80030c2:	61bb      	str	r3, [r7, #24]
 80030c4:	61fa      	str	r2, [r7, #28]
 80030c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030ce:	f7fd f907 	bl	80002e0 <__aeabi_uldivmod>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4613      	mov	r3, r2
 80030d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030da:	e053      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030dc:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	2200      	movs	r2, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	617a      	str	r2, [r7, #20]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ee:	f04f 0b00 	mov.w	fp, #0
 80030f2:	4652      	mov	r2, sl
 80030f4:	465b      	mov	r3, fp
 80030f6:	f04f 0000 	mov.w	r0, #0
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	0159      	lsls	r1, r3, #5
 8003100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003104:	0150      	lsls	r0, r2, #5
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	ebb2 080a 	subs.w	r8, r2, sl
 800310e:	eb63 090b 	sbc.w	r9, r3, fp
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800311e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003122:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003126:	ebb2 0408 	subs.w	r4, r2, r8
 800312a:	eb63 0509 	sbc.w	r5, r3, r9
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	00eb      	lsls	r3, r5, #3
 8003138:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313c:	00e2      	lsls	r2, r4, #3
 800313e:	4614      	mov	r4, r2
 8003140:	461d      	mov	r5, r3
 8003142:	eb14 030a 	adds.w	r3, r4, sl
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	eb45 030b 	adc.w	r3, r5, fp
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800315a:	4629      	mov	r1, r5
 800315c:	028b      	lsls	r3, r1, #10
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003164:	4621      	mov	r1, r4
 8003166:	028a      	lsls	r2, r1, #10
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316e:	2200      	movs	r2, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	60fa      	str	r2, [r7, #12]
 8003174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003178:	f7fd f8b2 	bl	80002e0 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800319e:	e002      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80031a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3740      	adds	r7, #64	; 0x40
 80031ac:	46bd      	mov	sp, r7
 80031ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	017d7840 	.word	0x017d7840

080031c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000000 	.word	0x20000000

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0a9b      	lsrs	r3, r3, #10
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08015f90 	.word	0x08015f90

08003200 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	220f      	movs	r2, #15
 800320e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_GetClockConfig+0x5c>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_RCC_GetClockConfig+0x5c>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <HAL_RCC_GetClockConfig+0x5c>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_GetClockConfig+0x5c>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003242:	4b07      	ldr	r3, [pc, #28]	; (8003260 <HAL_RCC_GetClockConfig+0x60>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 020f 	and.w	r2, r3, #15
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	40023c00 	.word	0x40023c00

08003264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e049      	b.n	800330a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f841 	bl	8003312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f000 fa00 	bl	80036a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d001      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e054      	b.n	80033ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d022      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d01d      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a22      	ldr	r2, [pc, #136]	; (80033fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d018      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_TIM_Base_Start_IT+0xd8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <HAL_TIM_Base_Start_IT+0xdc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00e      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_TIM_Base_Start_IT+0xe0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d009      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1c      	ldr	r2, [pc, #112]	; (800340c <HAL_TIM_Base_Start_IT+0xe4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_TIM_Base_Start_IT+0xe8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d115      	bne.n	80033d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_TIM_Base_Start_IT+0xec>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d015      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0xbe>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c0:	d011      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	e008      	b.n	80033e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40010400 	.word	0x40010400
 800340c:	40014000 	.word	0x40014000
 8003410:	40001800 	.word	0x40001800
 8003414:	00010007 	.word	0x00010007

08003418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d122      	bne.n	8003474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b02      	cmp	r3, #2
 800343a:	d11b      	bne.n	8003474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0202 	mvn.w	r2, #2
 8003444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f905 	bl	800366a <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f8f7 	bl	8003656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f908 	bl	800367e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b04      	cmp	r3, #4
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b04      	cmp	r3, #4
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0204 	mvn.w	r2, #4
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8db 	bl	800366a <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8cd 	bl	8003656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8de 	bl	800367e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0208 	mvn.w	r2, #8
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2204      	movs	r2, #4
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8b1 	bl	800366a <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8a3 	bl	8003656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8b4 	bl	800367e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b10      	cmp	r3, #16
 8003528:	d122      	bne.n	8003570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b10      	cmp	r3, #16
 8003536:	d11b      	bne.n	8003570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0210 	mvn.w	r2, #16
 8003540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2208      	movs	r2, #8
 8003546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f887 	bl	800366a <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f879 	bl	8003656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f88a 	bl	800367e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d10e      	bne.n	800359c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0201 	mvn.w	r2, #1
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fa96 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b80      	cmp	r3, #128	; 0x80
 80035a8:	d10e      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b80      	cmp	r3, #128	; 0x80
 80035b6:	d107      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f91a 	bl	80037fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d10e      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d107      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f90d 	bl	8003810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d10e      	bne.n	8003622 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d107      	bne.n	8003622 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800361a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f838 	bl	8003692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b20      	cmp	r3, #32
 800362e:	d10e      	bne.n	800364e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b20      	cmp	r3, #32
 800363c:	d107      	bne.n	800364e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f06f 0220 	mvn.w	r2, #32
 8003646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f8cd 	bl	80037e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a40      	ldr	r2, [pc, #256]	; (80037bc <TIM_Base_SetConfig+0x114>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d00f      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a3d      	ldr	r2, [pc, #244]	; (80037c0 <TIM_Base_SetConfig+0x118>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00b      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a3c      	ldr	r2, [pc, #240]	; (80037c4 <TIM_Base_SetConfig+0x11c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a3b      	ldr	r2, [pc, #236]	; (80037c8 <TIM_Base_SetConfig+0x120>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0x40>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a3a      	ldr	r2, [pc, #232]	; (80037cc <TIM_Base_SetConfig+0x124>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d108      	bne.n	80036fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a2f      	ldr	r2, [pc, #188]	; (80037bc <TIM_Base_SetConfig+0x114>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02b      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003708:	d027      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a2c      	ldr	r2, [pc, #176]	; (80037c0 <TIM_Base_SetConfig+0x118>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d023      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a2b      	ldr	r2, [pc, #172]	; (80037c4 <TIM_Base_SetConfig+0x11c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01f      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a2a      	ldr	r2, [pc, #168]	; (80037c8 <TIM_Base_SetConfig+0x120>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01b      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a29      	ldr	r2, [pc, #164]	; (80037cc <TIM_Base_SetConfig+0x124>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d017      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <TIM_Base_SetConfig+0x128>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d013      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <TIM_Base_SetConfig+0x12c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00f      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <TIM_Base_SetConfig+0x130>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00b      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a25      	ldr	r2, [pc, #148]	; (80037dc <TIM_Base_SetConfig+0x134>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d007      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a24      	ldr	r2, [pc, #144]	; (80037e0 <TIM_Base_SetConfig+0x138>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <TIM_Base_SetConfig+0x13c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d108      	bne.n	800376c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <TIM_Base_SetConfig+0x114>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_Base_SetConfig+0xf8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a0c      	ldr	r2, [pc, #48]	; (80037cc <TIM_Base_SetConfig+0x124>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d103      	bne.n	80037a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	615a      	str	r2, [r3, #20]
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40000c00 	.word	0x40000c00
 80037cc:	40010400 	.word	0x40010400
 80037d0:	40014000 	.word	0x40014000
 80037d4:	40014400 	.word	0x40014400
 80037d8:	40014800 	.word	0x40014800
 80037dc:	40001800 	.word	0x40001800
 80037e0:	40001c00 	.word	0x40001c00
 80037e4:	40002000 	.word	0x40002000

080037e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800382a:	4ba0      	ldr	r3, [pc, #640]	; (8003aac <MX_LWIP_Init+0x288>)
 800382c:	22c0      	movs	r2, #192	; 0xc0
 800382e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003830:	4b9e      	ldr	r3, [pc, #632]	; (8003aac <MX_LWIP_Init+0x288>)
 8003832:	22a8      	movs	r2, #168	; 0xa8
 8003834:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003836:	4b9d      	ldr	r3, [pc, #628]	; (8003aac <MX_LWIP_Init+0x288>)
 8003838:	2200      	movs	r2, #0
 800383a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 800383c:	4b9b      	ldr	r3, [pc, #620]	; (8003aac <MX_LWIP_Init+0x288>)
 800383e:	227b      	movs	r2, #123	; 0x7b
 8003840:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003842:	4b9b      	ldr	r3, [pc, #620]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003844:	22ff      	movs	r2, #255	; 0xff
 8003846:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003848:	4b99      	ldr	r3, [pc, #612]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800384e:	4b98      	ldr	r3, [pc, #608]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003850:	22ff      	movs	r2, #255	; 0xff
 8003852:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003854:	4b96      	ldr	r3, [pc, #600]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003856:	2200      	movs	r2, #0
 8003858:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800385a:	4b96      	ldr	r3, [pc, #600]	; (8003ab4 <MX_LWIP_Init+0x290>)
 800385c:	22c0      	movs	r2, #192	; 0xc0
 800385e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003860:	4b94      	ldr	r3, [pc, #592]	; (8003ab4 <MX_LWIP_Init+0x290>)
 8003862:	22a8      	movs	r2, #168	; 0xa8
 8003864:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003866:	4b93      	ldr	r3, [pc, #588]	; (8003ab4 <MX_LWIP_Init+0x290>)
 8003868:	2200      	movs	r2, #0
 800386a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800386c:	4b91      	ldr	r3, [pc, #580]	; (8003ab4 <MX_LWIP_Init+0x290>)
 800386e:	2201      	movs	r2, #1
 8003870:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003872:	2100      	movs	r1, #0
 8003874:	2000      	movs	r0, #0
 8003876:	f004 fe01 	bl	800847c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800387a:	4b8c      	ldr	r3, [pc, #560]	; (8003aac <MX_LWIP_Init+0x288>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	061a      	lsls	r2, r3, #24
 8003880:	4b8a      	ldr	r3, [pc, #552]	; (8003aac <MX_LWIP_Init+0x288>)
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	431a      	orrs	r2, r3
 8003888:	4b88      	ldr	r3, [pc, #544]	; (8003aac <MX_LWIP_Init+0x288>)
 800388a:	789b      	ldrb	r3, [r3, #2]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	4313      	orrs	r3, r2
 8003890:	4a86      	ldr	r2, [pc, #536]	; (8003aac <MX_LWIP_Init+0x288>)
 8003892:	78d2      	ldrb	r2, [r2, #3]
 8003894:	4313      	orrs	r3, r2
 8003896:	061a      	lsls	r2, r3, #24
 8003898:	4b84      	ldr	r3, [pc, #528]	; (8003aac <MX_LWIP_Init+0x288>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	0619      	lsls	r1, r3, #24
 800389e:	4b83      	ldr	r3, [pc, #524]	; (8003aac <MX_LWIP_Init+0x288>)
 80038a0:	785b      	ldrb	r3, [r3, #1]
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	4319      	orrs	r1, r3
 80038a6:	4b81      	ldr	r3, [pc, #516]	; (8003aac <MX_LWIP_Init+0x288>)
 80038a8:	789b      	ldrb	r3, [r3, #2]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	430b      	orrs	r3, r1
 80038ae:	497f      	ldr	r1, [pc, #508]	; (8003aac <MX_LWIP_Init+0x288>)
 80038b0:	78c9      	ldrb	r1, [r1, #3]
 80038b2:	430b      	orrs	r3, r1
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038ba:	431a      	orrs	r2, r3
 80038bc:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <MX_LWIP_Init+0x288>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	0619      	lsls	r1, r3, #24
 80038c2:	4b7a      	ldr	r3, [pc, #488]	; (8003aac <MX_LWIP_Init+0x288>)
 80038c4:	785b      	ldrb	r3, [r3, #1]
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	4319      	orrs	r1, r3
 80038ca:	4b78      	ldr	r3, [pc, #480]	; (8003aac <MX_LWIP_Init+0x288>)
 80038cc:	789b      	ldrb	r3, [r3, #2]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	430b      	orrs	r3, r1
 80038d2:	4976      	ldr	r1, [pc, #472]	; (8003aac <MX_LWIP_Init+0x288>)
 80038d4:	78c9      	ldrb	r1, [r1, #3]
 80038d6:	430b      	orrs	r3, r1
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038de:	431a      	orrs	r2, r3
 80038e0:	4b72      	ldr	r3, [pc, #456]	; (8003aac <MX_LWIP_Init+0x288>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	0619      	lsls	r1, r3, #24
 80038e6:	4b71      	ldr	r3, [pc, #452]	; (8003aac <MX_LWIP_Init+0x288>)
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	4319      	orrs	r1, r3
 80038ee:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <MX_LWIP_Init+0x288>)
 80038f0:	789b      	ldrb	r3, [r3, #2]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	430b      	orrs	r3, r1
 80038f6:	496d      	ldr	r1, [pc, #436]	; (8003aac <MX_LWIP_Init+0x288>)
 80038f8:	78c9      	ldrb	r1, [r1, #3]
 80038fa:	430b      	orrs	r3, r1
 80038fc:	0e1b      	lsrs	r3, r3, #24
 80038fe:	4313      	orrs	r3, r2
 8003900:	4a6d      	ldr	r2, [pc, #436]	; (8003ab8 <MX_LWIP_Init+0x294>)
 8003902:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003904:	4b6a      	ldr	r3, [pc, #424]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	061a      	lsls	r2, r3, #24
 800390a:	4b69      	ldr	r3, [pc, #420]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 800390c:	785b      	ldrb	r3, [r3, #1]
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003914:	789b      	ldrb	r3, [r3, #2]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	4313      	orrs	r3, r2
 800391a:	4a65      	ldr	r2, [pc, #404]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 800391c:	78d2      	ldrb	r2, [r2, #3]
 800391e:	4313      	orrs	r3, r2
 8003920:	061a      	lsls	r2, r3, #24
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	0619      	lsls	r1, r3, #24
 8003928:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	4319      	orrs	r1, r3
 8003930:	4b5f      	ldr	r3, [pc, #380]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003932:	789b      	ldrb	r3, [r3, #2]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	430b      	orrs	r3, r1
 8003938:	495d      	ldr	r1, [pc, #372]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 800393a:	78c9      	ldrb	r1, [r1, #3]
 800393c:	430b      	orrs	r3, r1
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003944:	431a      	orrs	r2, r3
 8003946:	4b5a      	ldr	r3, [pc, #360]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	0619      	lsls	r1, r3, #24
 800394c:	4b58      	ldr	r3, [pc, #352]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	4319      	orrs	r1, r3
 8003954:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003956:	789b      	ldrb	r3, [r3, #2]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	430b      	orrs	r3, r1
 800395c:	4954      	ldr	r1, [pc, #336]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 800395e:	78c9      	ldrb	r1, [r1, #3]
 8003960:	430b      	orrs	r3, r1
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003968:	431a      	orrs	r2, r3
 800396a:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	0619      	lsls	r1, r3, #24
 8003970:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	4319      	orrs	r1, r3
 8003978:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 800397a:	789b      	ldrb	r3, [r3, #2]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	430b      	orrs	r3, r1
 8003980:	494b      	ldr	r1, [pc, #300]	; (8003ab0 <MX_LWIP_Init+0x28c>)
 8003982:	78c9      	ldrb	r1, [r1, #3]
 8003984:	430b      	orrs	r3, r1
 8003986:	0e1b      	lsrs	r3, r3, #24
 8003988:	4313      	orrs	r3, r2
 800398a:	4a4c      	ldr	r2, [pc, #304]	; (8003abc <MX_LWIP_Init+0x298>)
 800398c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800398e:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <MX_LWIP_Init+0x290>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	061a      	lsls	r2, r3, #24
 8003994:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <MX_LWIP_Init+0x290>)
 8003996:	785b      	ldrb	r3, [r3, #1]
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <MX_LWIP_Init+0x290>)
 800399e:	789b      	ldrb	r3, [r3, #2]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	4313      	orrs	r3, r2
 80039a4:	4a43      	ldr	r2, [pc, #268]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039a6:	78d2      	ldrb	r2, [r2, #3]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	061a      	lsls	r2, r3, #24
 80039ac:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	0619      	lsls	r1, r3, #24
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	041b      	lsls	r3, r3, #16
 80039b8:	4319      	orrs	r1, r3
 80039ba:	4b3e      	ldr	r3, [pc, #248]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039bc:	789b      	ldrb	r3, [r3, #2]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	430b      	orrs	r3, r1
 80039c2:	493c      	ldr	r1, [pc, #240]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039c4:	78c9      	ldrb	r1, [r1, #3]
 80039c6:	430b      	orrs	r3, r1
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039ce:	431a      	orrs	r2, r3
 80039d0:	4b38      	ldr	r3, [pc, #224]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	0619      	lsls	r1, r3, #24
 80039d6:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	4319      	orrs	r1, r3
 80039de:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039e0:	789b      	ldrb	r3, [r3, #2]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	430b      	orrs	r3, r1
 80039e6:	4933      	ldr	r1, [pc, #204]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039e8:	78c9      	ldrb	r1, [r1, #3]
 80039ea:	430b      	orrs	r3, r1
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039f2:	431a      	orrs	r2, r3
 80039f4:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	0619      	lsls	r1, r3, #24
 80039fa:	4b2e      	ldr	r3, [pc, #184]	; (8003ab4 <MX_LWIP_Init+0x290>)
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	041b      	lsls	r3, r3, #16
 8003a00:	4319      	orrs	r1, r3
 8003a02:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <MX_LWIP_Init+0x290>)
 8003a04:	789b      	ldrb	r3, [r3, #2]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	492a      	ldr	r1, [pc, #168]	; (8003ab4 <MX_LWIP_Init+0x290>)
 8003a0c:	78c9      	ldrb	r1, [r1, #3]
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	0e1b      	lsrs	r3, r3, #24
 8003a12:	4313      	orrs	r3, r2
 8003a14:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <MX_LWIP_Init+0x29c>)
 8003a16:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003a18:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <MX_LWIP_Init+0x2a0>)
 8003a1a:	9302      	str	r3, [sp, #8]
 8003a1c:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <MX_LWIP_Init+0x2a4>)
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	2300      	movs	r3, #0
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <MX_LWIP_Init+0x29c>)
 8003a26:	4a25      	ldr	r2, [pc, #148]	; (8003abc <MX_LWIP_Init+0x298>)
 8003a28:	4923      	ldr	r1, [pc, #140]	; (8003ab8 <MX_LWIP_Init+0x294>)
 8003a2a:	4828      	ldr	r0, [pc, #160]	; (8003acc <MX_LWIP_Init+0x2a8>)
 8003a2c:	f005 faaa 	bl	8008f84 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003a30:	4826      	ldr	r0, [pc, #152]	; (8003acc <MX_LWIP_Init+0x2a8>)
 8003a32:	f005 fc59 	bl	80092e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003a36:	4b25      	ldr	r3, [pc, #148]	; (8003acc <MX_LWIP_Init+0x2a8>)
 8003a38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003a48:	4820      	ldr	r0, [pc, #128]	; (8003acc <MX_LWIP_Init+0x2a8>)
 8003a4a:	f005 fc5d 	bl	8009308 <netif_set_up>
 8003a4e:	e002      	b.n	8003a56 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003a50:	481e      	ldr	r0, [pc, #120]	; (8003acc <MX_LWIP_Init+0x2a8>)
 8003a52:	f005 fcc5 	bl	80093e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003a56:	491e      	ldr	r1, [pc, #120]	; (8003ad0 <MX_LWIP_Init+0x2ac>)
 8003a58:	481c      	ldr	r0, [pc, #112]	; (8003acc <MX_LWIP_Init+0x2a8>)
 8003a5a:	f005 fd57 	bl	800950c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2101      	movs	r1, #1
 8003a62:	2001      	movs	r0, #1
 8003a64:	f000 ff08 	bl	8004878 <osSemaphoreNew>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <MX_LWIP_Init+0x2b0>)
 8003a6c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <MX_LWIP_Init+0x2b4>)
 8003a70:	4a16      	ldr	r2, [pc, #88]	; (8003acc <MX_LWIP_Init+0x2a8>)
 8003a72:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <MX_LWIP_Init+0x2b0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <MX_LWIP_Init+0x2b4>)
 8003a7a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003a7c:	2224      	movs	r2, #36	; 0x24
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4816      	ldr	r0, [pc, #88]	; (8003adc <MX_LWIP_Init+0x2b8>)
 8003a82:	f00e fd0e 	bl	80124a2 <memset>
  attributes.name = "LinkThr";
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <MX_LWIP_Init+0x2b8>)
 8003a88:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <MX_LWIP_Init+0x2bc>)
 8003a8a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <MX_LWIP_Init+0x2b8>)
 8003a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a92:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <MX_LWIP_Init+0x2b8>)
 8003a96:	2210      	movs	r2, #16
 8003a98:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8003a9a:	4a10      	ldr	r2, [pc, #64]	; (8003adc <MX_LWIP_Init+0x2b8>)
 8003a9c:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <MX_LWIP_Init+0x2b4>)
 8003a9e:	4811      	ldr	r0, [pc, #68]	; (8003ae4 <MX_LWIP_Init+0x2c0>)
 8003aa0:	f000 fcce 	bl	8004440 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000144 	.word	0x20000144
 8003ab0:	20000148 	.word	0x20000148
 8003ab4:	2000014c 	.word	0x2000014c
 8003ab8:	20000138 	.word	0x20000138
 8003abc:	2000013c 	.word	0x2000013c
 8003ac0:	20000140 	.word	0x20000140
 8003ac4:	080083b9 	.word	0x080083b9
 8003ac8:	08004131 	.word	0x08004131
 8003acc:	20000104 	.word	0x20000104
 8003ad0:	08004215 	.word	0x08004215
 8003ad4:	200000f8 	.word	0x200000f8
 8003ad8:	200000fc 	.word	0x200000fc
 8003adc:	20000150 	.word	0x20000150
 8003ae0:	08013458 	.word	0x08013458
 8003ae4:	0800419d 	.word	0x0800419d

08003ae8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08e      	sub	sp, #56	; 0x38
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a52      	ldr	r2, [pc, #328]	; (8003c50 <HAL_ETH_MspInit+0x168>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	f040 809e 	bne.w	8003c48 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003b0c:	4b51      	ldr	r3, [pc, #324]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	4a50      	ldr	r2, [pc, #320]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b16:	6313      	str	r3, [r2, #48]	; 0x30
 8003b18:	4b4e      	ldr	r3, [pc, #312]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	4b4b      	ldr	r3, [pc, #300]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4a4a      	ldr	r2, [pc, #296]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b30:	4b48      	ldr	r3, [pc, #288]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	4b45      	ldr	r3, [pc, #276]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	4a44      	ldr	r2, [pc, #272]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b46:	6313      	str	r3, [r2, #48]	; 0x30
 8003b48:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b54:	4b3f      	ldr	r3, [pc, #252]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	4a3e      	ldr	r2, [pc, #248]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b60:	4b3c      	ldr	r3, [pc, #240]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6c:	4b39      	ldr	r3, [pc, #228]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	4a38      	ldr	r2, [pc, #224]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6313      	str	r3, [r2, #48]	; 0x30
 8003b78:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b84:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	4a32      	ldr	r2, [pc, #200]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b8a:	f043 0302 	orr.w	r3, r3, #2
 8003b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b90:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b9c:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	4a2c      	ldr	r2, [pc, #176]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba8:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <HAL_ETH_MspInit+0x16c>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003bb4:	2332      	movs	r3, #50	; 0x32
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bc4:	230b      	movs	r3, #11
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4822      	ldr	r0, [pc, #136]	; (8003c58 <HAL_ETH_MspInit+0x170>)
 8003bd0:	f7fe fc66 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003bd4:	2386      	movs	r3, #134	; 0x86
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003be4:	230b      	movs	r3, #11
 8003be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bec:	4619      	mov	r1, r3
 8003bee:	481b      	ldr	r0, [pc, #108]	; (8003c5c <HAL_ETH_MspInit+0x174>)
 8003bf0:	f7fe fc56 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c02:	2303      	movs	r3, #3
 8003c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c06:	230b      	movs	r3, #11
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4813      	ldr	r0, [pc, #76]	; (8003c60 <HAL_ETH_MspInit+0x178>)
 8003c12:	f7fe fc45 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003c16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c24:	2303      	movs	r3, #3
 8003c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c28:	230b      	movs	r3, #11
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c30:	4619      	mov	r1, r3
 8003c32:	480c      	ldr	r0, [pc, #48]	; (8003c64 <HAL_ETH_MspInit+0x17c>)
 8003c34:	f7fe fc34 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2105      	movs	r1, #5
 8003c3c:	203d      	movs	r0, #61	; 0x3d
 8003c3e:	f7fd fa1d 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003c42:	203d      	movs	r0, #61	; 0x3d
 8003c44:	f7fd fa36 	bl	80010b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003c48:	bf00      	nop
 8003c4a:	3738      	adds	r7, #56	; 0x38
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40028000 	.word	0x40028000
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	40020400 	.word	0x40020400
 8003c64:	40021800 	.word	0x40021800

08003c68 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <HAL_ETH_RxCpltCallback+0x1c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 ff01 	bl	8004a7c <osSemaphoreRelease>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20003214 	.word	0x20003214

08003c88 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b090      	sub	sp, #64	; 0x40
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003c94:	4b5d      	ldr	r3, [pc, #372]	; (8003e0c <low_level_init+0x184>)
 8003c96:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <low_level_init+0x188>)
 8003c98:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <low_level_init+0x184>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003ca0:	4b5a      	ldr	r3, [pc, #360]	; (8003e0c <low_level_init+0x184>)
 8003ca2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ca6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003ca8:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <low_level_init+0x184>)
 8003caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cae:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003cb0:	4b56      	ldr	r3, [pc, #344]	; (8003e0c <low_level_init+0x184>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8003cbe:	23e1      	movs	r3, #225	; 0xe1
 8003cc0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8003cce:	4a4f      	ldr	r2, [pc, #316]	; (8003e0c <low_level_init+0x184>)
 8003cd0:	f107 030c 	add.w	r3, r7, #12
 8003cd4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003cd6:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <low_level_init+0x184>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <low_level_init+0x184>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <low_level_init+0x184>)
 8003ce4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ce8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003cea:	4848      	ldr	r0, [pc, #288]	; (8003e0c <low_level_init+0x184>)
 8003cec:	f7fd fa6c 	bl	80011c8 <HAL_ETH_Init>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003cf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003d10:	2304      	movs	r3, #4
 8003d12:	4a40      	ldr	r2, [pc, #256]	; (8003e14 <low_level_init+0x18c>)
 8003d14:	4940      	ldr	r1, [pc, #256]	; (8003e18 <low_level_init+0x190>)
 8003d16:	483d      	ldr	r0, [pc, #244]	; (8003e0c <low_level_init+0x184>)
 8003d18:	f7fd fbee 	bl	80014f8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	4a3f      	ldr	r2, [pc, #252]	; (8003e1c <low_level_init+0x194>)
 8003d20:	493f      	ldr	r1, [pc, #252]	; (8003e20 <low_level_init+0x198>)
 8003d22:	483a      	ldr	r0, [pc, #232]	; (8003e0c <low_level_init+0x184>)
 8003d24:	f7fd fc50 	bl	80015c8 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2206      	movs	r2, #6
 8003d2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <low_level_init+0x184>)
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003d3c:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <low_level_init+0x184>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	785a      	ldrb	r2, [r3, #1]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003d48:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <low_level_init+0x184>)
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	789a      	ldrb	r2, [r3, #2]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <low_level_init+0x184>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	78da      	ldrb	r2, [r3, #3]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003d60:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <low_level_init+0x184>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	791a      	ldrb	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003d6c:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <low_level_init+0x184>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	795a      	ldrb	r2, [r3, #5]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003d7e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d86:	f043 030a 	orr.w	r3, r3, #10
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2101      	movs	r1, #1
 8003d96:	2001      	movs	r0, #1
 8003d98:	f000 fd6e 	bl	8004878 <osSemaphoreNew>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4a21      	ldr	r2, [pc, #132]	; (8003e24 <low_level_init+0x19c>)
 8003da0:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003da2:	f107 0314 	add.w	r3, r7, #20
 8003da6:	2224      	movs	r2, #36	; 0x24
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f00e fb79 	bl	80124a2 <memset>
  attributes.name = "EthIf";
 8003db0:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <low_level_init+0x1a0>)
 8003db2:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003db4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8003dba:	2330      	movs	r3, #48	; 0x30
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4819      	ldr	r0, [pc, #100]	; (8003e2c <low_level_init+0x1a4>)
 8003dc8:	f000 fb3a 	bl	8004440 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003dcc:	480f      	ldr	r0, [pc, #60]	; (8003e0c <low_level_init+0x184>)
 8003dce:	f7fd ff1f 	bl	8001c10 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003dd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	211d      	movs	r1, #29
 8003dda:	480c      	ldr	r0, [pc, #48]	; (8003e0c <low_level_init+0x184>)
 8003ddc:	f7fd fe4a 	bl	8001a74 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	f043 030b 	orr.w	r3, r3, #11
 8003de6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	461a      	mov	r2, r3
 8003dec:	211d      	movs	r1, #29
 8003dee:	4807      	ldr	r0, [pc, #28]	; (8003e0c <low_level_init+0x184>)
 8003df0:	f7fd fea8 	bl	8001b44 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003df4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003df8:	461a      	mov	r2, r3
 8003dfa:	211d      	movs	r1, #29
 8003dfc:	4803      	ldr	r0, [pc, #12]	; (8003e0c <low_level_init+0x184>)
 8003dfe:	f7fd fe39 	bl	8001a74 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003e02:	bf00      	nop
 8003e04:	3740      	adds	r7, #64	; 0x40
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20003218 	.word	0x20003218
 8003e10:	40028000 	.word	0x40028000
 8003e14:	20001a44 	.word	0x20001a44
 8003e18:	200001f4 	.word	0x200001f4
 8003e1c:	20000274 	.word	0x20000274
 8003e20:	20000174 	.word	0x20000174
 8003e24:	20003214 	.word	0x20003214
 8003e28:	08013460 	.word	0x08013460
 8003e2c:	080040d1 	.word	0x080040d1

08003e30 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003e3a:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <low_level_output+0x138>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003e52:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <low_level_output+0x138>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	623b      	str	r3, [r7, #32]
 8003e60:	e05a      	b.n	8003f18 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da03      	bge.n	8003e72 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003e6a:	23f8      	movs	r3, #248	; 0xf8
 8003e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003e70:	e05c      	b.n	8003f2c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	895b      	ldrh	r3, [r3, #10]
 8003e76:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003e7c:	e02f      	b.n	8003ede <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	18d0      	adds	r0, r2, r3
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	18d1      	adds	r1, r2, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	461a      	mov	r2, r3
 8003e96:	f00e faf6 	bl	8012486 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da03      	bge.n	8003eb0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003ea8:	23f8      	movs	r3, #248	; 0xf8
 8003eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003eae:	e03d      	b.n	8003f2c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003ec0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ecc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ed8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d8c8      	bhi.n	8003e7e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	18d0      	adds	r0, r2, r3
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4413      	add	r3, r2
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f00e fac2 	bl	8012486 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1a1      	bne.n	8003e62 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003f1e:	6979      	ldr	r1, [r7, #20]
 8003f20:	4811      	ldr	r0, [pc, #68]	; (8003f68 <low_level_output+0x138>)
 8003f22:	f7fd fbbd 	bl	80016a0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <low_level_output+0x138>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <low_level_output+0x138>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f46:	461a      	mov	r2, r3
 8003f48:	2320      	movs	r3, #32
 8003f4a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <low_level_output+0x138>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f54:	461a      	mov	r2, r3
 8003f56:	2300      	movs	r3, #0
 8003f58:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003f5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3728      	adds	r7, #40	; 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20003218 	.word	0x20003218

08003f6c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08c      	sub	sp, #48	; 0x30
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003f90:	484e      	ldr	r0, [pc, #312]	; (80040cc <low_level_input+0x160>)
 8003f92:	f7fd fc6f 	bl	8001874 <HAL_ETH_GetReceivedFrame_IT>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <low_level_input+0x34>

    return NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e091      	b.n	80040c4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003fa0:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <low_level_input+0x160>)
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003fa6:	4b49      	ldr	r3, [pc, #292]	; (80040cc <low_level_input+0x160>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003fac:	89fb      	ldrh	r3, [r7, #14]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003fb2:	89fb      	ldrh	r3, [r7, #14]
 8003fb4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003fb8:	4619      	mov	r1, r3
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f005 fb70 	bl	80096a0 <pbuf_alloc>
 8003fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d04b      	beq.n	8004060 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003fc8:	4b40      	ldr	r3, [pc, #256]	; (80040cc <low_level_input+0x160>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd6:	e040      	b.n	800405a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	895b      	ldrh	r3, [r3, #10]
 8003fdc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003fe2:	e021      	b.n	8004028 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	18d0      	adds	r0, r2, r3
 8003fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	18d1      	adds	r1, r2, r3
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f00e fa43 	bl	8012486 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	4413      	add	r3, r2
 8004012:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004016:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004022:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004032:	4293      	cmp	r3, r2
 8004034:	d8d6      	bhi.n	8003fe4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	18d0      	adds	r0, r2, r3
 800403e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4619      	mov	r1, r3
 8004048:	f00e fa1d 	bl	8012486 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4413      	add	r3, r2
 8004052:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1bb      	bne.n	8003fd8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <low_level_input+0x160>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	e00b      	b.n	8004084 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	3301      	adds	r3, #1
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <low_level_input+0x160>)
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	429a      	cmp	r2, r3
 800408c:	d3ee      	bcc.n	800406c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800408e:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <low_level_input+0x160>)
 8004090:	2200      	movs	r2, #0
 8004092:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004094:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <low_level_input+0x160>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <low_level_input+0x160>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ae:	461a      	mov	r2, r3
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <low_level_input+0x160>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040bc:	461a      	mov	r2, r3
 80040be:	2300      	movs	r3, #0
 80040c0:	6093      	str	r3, [r2, #8]
  }
  return p;
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3730      	adds	r7, #48	; 0x30
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20003218 	.word	0x20003218

080040d0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80040dc:	4b12      	ldr	r3, [pc, #72]	; (8004128 <ethernetif_input+0x58>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f04f 31ff 	mov.w	r1, #4294967295
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fc63 	bl	80049b0 <osSemaphoreAcquire>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f5      	bne.n	80040dc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80040f0:	480e      	ldr	r0, [pc, #56]	; (800412c <ethernetif_input+0x5c>)
 80040f2:	f00e f841 	bl	8012178 <sys_mutex_lock>
        p = low_level_input( netif );
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ff38 	bl	8003f6c <low_level_input>
 80040fc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	68f9      	ldr	r1, [r7, #12]
 800410a:	68b8      	ldr	r0, [r7, #8]
 800410c:	4798      	blx	r3
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004114:	68b8      	ldr	r0, [r7, #8]
 8004116:	f005 fda7 	bl	8009c68 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800411a:	4804      	ldr	r0, [pc, #16]	; (800412c <ethernetif_input+0x5c>)
 800411c:	f00e f83b 	bl	8012196 <sys_mutex_unlock>
      } while(p!=NULL);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e4      	bne.n	80040f0 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004126:	e7d9      	b.n	80040dc <ethernetif_input+0xc>
 8004128:	20003214 	.word	0x20003214
 800412c:	20007c74 	.word	0x20007c74

08004130 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <ethernetif_init+0x1c>
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <ethernetif_init+0x48>)
 8004140:	f240 223b 	movw	r2, #571	; 0x23b
 8004144:	490d      	ldr	r1, [pc, #52]	; (800417c <ethernetif_init+0x4c>)
 8004146:	480e      	ldr	r0, [pc, #56]	; (8004180 <ethernetif_init+0x50>)
 8004148:	f00e fa48 	bl	80125dc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2273      	movs	r2, #115	; 0x73
 8004150:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2274      	movs	r2, #116	; 0x74
 8004158:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a09      	ldr	r2, [pc, #36]	; (8004184 <ethernetif_init+0x54>)
 8004160:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a08      	ldr	r2, [pc, #32]	; (8004188 <ethernetif_init+0x58>)
 8004166:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fd8d 	bl	8003c88 <low_level_init>

  return ERR_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	08013468 	.word	0x08013468
 800417c:	08013484 	.word	0x08013484
 8004180:	08013494 	.word	0x08013494
 8004184:	08010355 	.word	0x08010355
 8004188:	08003e31 	.word	0x08003e31

0800418c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004190:	f7fc fe8c 	bl	8000eac <HAL_GetTick>
 8004194:	4603      	mov	r3, r0
}
 8004196:	4618      	mov	r0, r3
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80041ac:	f107 0308 	add.w	r3, r7, #8
 80041b0:	461a      	mov	r2, r3
 80041b2:	2101      	movs	r1, #1
 80041b4:	4816      	ldr	r0, [pc, #88]	; (8004210 <ethernetif_set_link+0x74>)
 80041b6:	f7fd fc5d 	bl	8001a74 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d108      	bne.n	80041e4 <ethernetif_set_link+0x48>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f005 f931 	bl	8009444 <netif_set_link_up>
 80041e2:	e011      	b.n	8004208 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <ethernetif_set_link+0x6c>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f005 f952 	bl	80094ac <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004208:	20c8      	movs	r0, #200	; 0xc8
 800420a:	f000 f9bf 	bl	800458c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800420e:	e7cd      	b.n	80041ac <ethernetif_set_link+0x10>
 8004210:	20003218 	.word	0x20003218

08004214 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800422a:	089b      	lsrs	r3, r3, #2
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d05d      	beq.n	80042f2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004236:	4b34      	ldr	r3, [pc, #208]	; (8004308 <ethernetif_update_config+0xf4>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d03f      	beq.n	80042be <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800423e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004242:	2100      	movs	r1, #0
 8004244:	4830      	ldr	r0, [pc, #192]	; (8004308 <ethernetif_update_config+0xf4>)
 8004246:	f7fd fc7d 	bl	8001b44 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800424a:	f7fc fe2f 	bl	8000eac <HAL_GetTick>
 800424e:	4603      	mov	r3, r0
 8004250:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	461a      	mov	r2, r3
 8004258:	2101      	movs	r1, #1
 800425a:	482b      	ldr	r0, [pc, #172]	; (8004308 <ethernetif_update_config+0xf4>)
 800425c:	f7fd fc0a 	bl	8001a74 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004260:	f7fc fe24 	bl	8000eac <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800426e:	d828      	bhi.n	80042c2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0eb      	beq.n	8004252 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800427a:	f107 0308 	add.w	r3, r7, #8
 800427e:	461a      	mov	r2, r3
 8004280:	2110      	movs	r1, #16
 8004282:	4821      	ldr	r0, [pc, #132]	; (8004308 <ethernetif_update_config+0xf4>)
 8004284:	f7fd fbf6 	bl	8001a74 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <ethernetif_update_config+0xf4>)
 8004294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	e002      	b.n	80042a2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <ethernetif_update_config+0xf4>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80042ac:	4b16      	ldr	r3, [pc, #88]	; (8004308 <ethernetif_update_config+0xf4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	e016      	b.n	80042e2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <ethernetif_update_config+0xf4>)
 80042b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	e011      	b.n	80042e2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <ethernetif_update_config+0xb0>
          goto error;
 80042c2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <ethernetif_update_config+0xf4>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	08db      	lsrs	r3, r3, #3
 80042ca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <ethernetif_update_config+0xf4>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80042d4:	4313      	orrs	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	2100      	movs	r1, #0
 80042dc:	480a      	ldr	r0, [pc, #40]	; (8004308 <ethernetif_update_config+0xf4>)
 80042de:	f7fd fc31 	bl	8001b44 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80042e2:	2100      	movs	r1, #0
 80042e4:	4808      	ldr	r0, [pc, #32]	; (8004308 <ethernetif_update_config+0xf4>)
 80042e6:	f7fd fcf1 	bl	8001ccc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80042ea:	4807      	ldr	r0, [pc, #28]	; (8004308 <ethernetif_update_config+0xf4>)
 80042ec:	f7fd fc90 	bl	8001c10 <HAL_ETH_Start>
 80042f0:	e002      	b.n	80042f8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80042f2:	4805      	ldr	r0, [pc, #20]	; (8004308 <ethernetif_update_config+0xf4>)
 80042f4:	f7fd fcbb 	bl	8001c6e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fc fae5 	bl	80008c8 <ethernetif_notify_conn_changed>
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20003218 	.word	0x20003218

0800430c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004322:	f3ef 8305 	mrs	r3, IPSR
 8004326:	60bb      	str	r3, [r7, #8]
  return(result);
 8004328:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10f      	bne.n	800434e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432e:	f3ef 8310 	mrs	r3, PRIMASK
 8004332:	607b      	str	r3, [r7, #4]
  return(result);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800433a:	f3ef 8311 	mrs	r3, BASEPRI
 800433e:	603b      	str	r3, [r7, #0]
  return(result);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <osKernelInitialize+0x3a>
 8004346:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <osKernelInitialize+0x64>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d103      	bne.n	8004356 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800434e:	f06f 0305 	mvn.w	r3, #5
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e00c      	b.n	8004370 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <osKernelInitialize+0x64>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <osKernelInitialize+0x64>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e002      	b.n	8004370 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004370:	68fb      	ldr	r3, [r7, #12]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20003260 	.word	0x20003260

08004384 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800438a:	f3ef 8305 	mrs	r3, IPSR
 800438e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004390:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004396:	f3ef 8310 	mrs	r3, PRIMASK
 800439a:	607b      	str	r3, [r7, #4]
  return(result);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043a2:	f3ef 8311 	mrs	r3, BASEPRI
 80043a6:	603b      	str	r3, [r7, #0]
  return(result);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <osKernelStart+0x3a>
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <osKernelStart+0x68>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d103      	bne.n	80043be <osKernelStart+0x3a>
    stat = osErrorISR;
 80043b6:	f06f 0305 	mvn.w	r3, #5
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e010      	b.n	80043e0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <osKernelStart+0x68>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d109      	bne.n	80043da <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043c6:	f7ff ffa1 	bl	800430c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043ca:	4b08      	ldr	r3, [pc, #32]	; (80043ec <osKernelStart+0x68>)
 80043cc:	2202      	movs	r2, #2
 80043ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043d0:	f002 f906 	bl	80065e0 <vTaskStartScheduler>
      stat = osOK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e002      	b.n	80043e0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
 80043de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80043e0:	68fb      	ldr	r3, [r7, #12]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20003260 	.word	0x20003260

080043f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043f6:	f3ef 8305 	mrs	r3, IPSR
 80043fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80043fc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004402:	f3ef 8310 	mrs	r3, PRIMASK
 8004406:	607b      	str	r3, [r7, #4]
  return(result);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800440e:	f3ef 8311 	mrs	r3, BASEPRI
 8004412:	603b      	str	r3, [r7, #0]
  return(result);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <osKernelGetTickCount+0x3a>
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <osKernelGetTickCount+0x4c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d103      	bne.n	800442a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004422:	f002 fa0f 	bl	8006844 <xTaskGetTickCountFromISR>
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	e002      	b.n	8004430 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800442a:	f002 f9fb 	bl	8006824 <xTaskGetTickCount>
 800442e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004430:	68fb      	ldr	r3, [r7, #12]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20003260 	.word	0x20003260

08004440 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b090      	sub	sp, #64	; 0x40
 8004444:	af04      	add	r7, sp, #16
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004450:	f3ef 8305 	mrs	r3, IPSR
 8004454:	61fb      	str	r3, [r7, #28]
  return(result);
 8004456:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 808f 	bne.w	800457c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445e:	f3ef 8310 	mrs	r3, PRIMASK
 8004462:	61bb      	str	r3, [r7, #24]
  return(result);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d105      	bne.n	8004476 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800446a:	f3ef 8311 	mrs	r3, BASEPRI
 800446e:	617b      	str	r3, [r7, #20]
  return(result);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <osThreadNew+0x3e>
 8004476:	4b44      	ldr	r3, [pc, #272]	; (8004588 <osThreadNew+0x148>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d07e      	beq.n	800457c <osThreadNew+0x13c>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d07b      	beq.n	800457c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004488:	2318      	movs	r3, #24
 800448a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004490:	f04f 33ff 	mov.w	r3, #4294967295
 8004494:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d045      	beq.n	8004528 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <osThreadNew+0x6a>
        name = attr->name;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d008      	beq.n	80044d0 <osThreadNew+0x90>
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	2b38      	cmp	r3, #56	; 0x38
 80044c2:	d805      	bhi.n	80044d0 <osThreadNew+0x90>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <osThreadNew+0x94>
        return (NULL);
 80044d0:	2300      	movs	r3, #0
 80044d2:	e054      	b.n	800457e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	089b      	lsrs	r3, r3, #2
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <osThreadNew+0xca>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2bbb      	cmp	r3, #187	; 0xbb
 80044f2:	d90a      	bls.n	800450a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <osThreadNew+0xca>
        mem = 1;
 8004504:	2301      	movs	r3, #1
 8004506:	623b      	str	r3, [r7, #32]
 8004508:	e010      	b.n	800452c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <osThreadNew+0xec>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d108      	bne.n	800452c <osThreadNew+0xec>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d104      	bne.n	800452c <osThreadNew+0xec>
          mem = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	e001      	b.n	800452c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d110      	bne.n	8004554 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800453a:	9202      	str	r2, [sp, #8]
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f001 fe53 	bl	80061f4 <xTaskCreateStatic>
 800454e:	4603      	mov	r3, r0
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e013      	b.n	800457c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d110      	bne.n	800457c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	b29a      	uxth	r2, r3
 800455e:	f107 0310 	add.w	r3, r7, #16
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f001 fea4 	bl	80062ba <xTaskCreate>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <osThreadNew+0x13c>
          hTask = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800457c:	693b      	ldr	r3, [r7, #16]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3730      	adds	r7, #48	; 0x30
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20003260 	.word	0x20003260

0800458c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004594:	f3ef 8305 	mrs	r3, IPSR
 8004598:	613b      	str	r3, [r7, #16]
  return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10f      	bne.n	80045c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a0:	f3ef 8310 	mrs	r3, PRIMASK
 80045a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045ac:	f3ef 8311 	mrs	r3, BASEPRI
 80045b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <osDelay+0x3c>
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <osDelay+0x58>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d103      	bne.n	80045c8 <osDelay+0x3c>
    stat = osErrorISR;
 80045c0:	f06f 0305 	mvn.w	r3, #5
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e007      	b.n	80045d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f001 ffce 	bl	8006574 <vTaskDelay>
    }
  }

  return (stat);
 80045d8:	697b      	ldr	r3, [r7, #20]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20003260 	.word	0x20003260

080045e8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f4:	f3ef 8305 	mrs	r3, IPSR
 80045f8:	613b      	str	r3, [r7, #16]
  return(result);
 80045fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 8085 	bne.w	800470c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004602:	f3ef 8310 	mrs	r3, PRIMASK
 8004606:	60fb      	str	r3, [r7, #12]
  return(result);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d105      	bne.n	800461a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800460e:	f3ef 8311 	mrs	r3, BASEPRI
 8004612:	60bb      	str	r3, [r7, #8]
  return(result);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <osMutexNew+0x3a>
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <osMutexNew+0x130>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d074      	beq.n	800470c <osMutexNew+0x124>
    if (attr != NULL) {
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	623b      	str	r3, [r7, #32]
 800462e:	e001      	b.n	8004634 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <osMutexNew+0x5c>
      rmtx = 1U;
 800463e:	2301      	movs	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e001      	b.n	8004648 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d15c      	bne.n	800470c <osMutexNew+0x124>
      mem = -1;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295
 8004656:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d015      	beq.n	800468a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d006      	beq.n	8004674 <osMutexNew+0x8c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b4f      	cmp	r3, #79	; 0x4f
 800466c:	d902      	bls.n	8004674 <osMutexNew+0x8c>
          mem = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	e00c      	b.n	800468e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d108      	bne.n	800468e <osMutexNew+0xa6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <osMutexNew+0xa6>
            mem = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	e001      	b.n	800468e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d112      	bne.n	80046ba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	4619      	mov	r1, r3
 80046a0:	2004      	movs	r0, #4
 80046a2:	f000 fe1a 	bl	80052da <xQueueCreateMutexStatic>
 80046a6:	6278      	str	r0, [r7, #36]	; 0x24
 80046a8:	e016      	b.n	80046d8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4619      	mov	r1, r3
 80046b0:	2001      	movs	r0, #1
 80046b2:	f000 fe12 	bl	80052da <xQueueCreateMutexStatic>
 80046b6:	6278      	str	r0, [r7, #36]	; 0x24
 80046b8:	e00e      	b.n	80046d8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10b      	bne.n	80046d8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80046c6:	2004      	movs	r0, #4
 80046c8:	f000 fdef 	bl	80052aa <xQueueCreateMutex>
 80046cc:	6278      	str	r0, [r7, #36]	; 0x24
 80046ce:	e003      	b.n	80046d8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80046d0:	2001      	movs	r0, #1
 80046d2:	f000 fdea 	bl	80052aa <xQueueCreateMutex>
 80046d6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <osMutexNew+0x110>
        if (attr != NULL) {
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <osMutexNew+0x104>
          name = attr->name;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e001      	b.n	80046f0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80046f0:	6979      	ldr	r1, [r7, #20]
 80046f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046f4:	f001 fcf6 	bl	80060e4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d006      	beq.n	800470c <osMutexNew+0x124>
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800470e:	4618      	mov	r0, r3
 8004710:	3728      	adds	r7, #40	; 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20003260 	.word	0x20003260

0800471c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800473a:	f3ef 8305 	mrs	r3, IPSR
 800473e:	613b      	str	r3, [r7, #16]
  return(result);
 8004740:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10f      	bne.n	8004766 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004746:	f3ef 8310 	mrs	r3, PRIMASK
 800474a:	60fb      	str	r3, [r7, #12]
  return(result);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004752:	f3ef 8311 	mrs	r3, BASEPRI
 8004756:	60bb      	str	r3, [r7, #8]
  return(result);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <osMutexAcquire+0x52>
 800475e:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <osMutexAcquire+0xb8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d103      	bne.n	800476e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004766:	f06f 0305 	mvn.w	r3, #5
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	e02c      	b.n	80047c8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004774:	f06f 0303 	mvn.w	r3, #3
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	e025      	b.n	80047c8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d011      	beq.n	80047a6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004782:	6839      	ldr	r1, [r7, #0]
 8004784:	69b8      	ldr	r0, [r7, #24]
 8004786:	f000 fdf9 	bl	800537c <xQueueTakeMutexRecursive>
 800478a:	4603      	mov	r3, r0
 800478c:	2b01      	cmp	r3, #1
 800478e:	d01b      	beq.n	80047c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004796:	f06f 0301 	mvn.w	r3, #1
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e014      	b.n	80047c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800479e:	f06f 0302 	mvn.w	r3, #2
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	e010      	b.n	80047c8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	69b8      	ldr	r0, [r7, #24]
 80047aa:	f001 f9b3 	bl	8005b14 <xQueueSemaphoreTake>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d009      	beq.n	80047c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80047ba:	f06f 0301 	mvn.w	r3, #1
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	e002      	b.n	80047c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80047c2:	f06f 0302 	mvn.w	r3, #2
 80047c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80047c8:	69fb      	ldr	r3, [r7, #28]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20003260 	.word	0x20003260

080047d8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f023 0301 	bic.w	r3, r3, #1
 80047e6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f4:	f3ef 8305 	mrs	r3, IPSR
 80047f8:	613b      	str	r3, [r7, #16]
  return(result);
 80047fa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10f      	bne.n	8004820 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004800:	f3ef 8310 	mrs	r3, PRIMASK
 8004804:	60fb      	str	r3, [r7, #12]
  return(result);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d105      	bne.n	8004818 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800480c:	f3ef 8311 	mrs	r3, BASEPRI
 8004810:	60bb      	str	r3, [r7, #8]
  return(result);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <osMutexRelease+0x50>
 8004818:	4b16      	ldr	r3, [pc, #88]	; (8004874 <osMutexRelease+0x9c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d103      	bne.n	8004828 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004820:	f06f 0305 	mvn.w	r3, #5
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	e01f      	b.n	8004868 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800482e:	f06f 0303 	mvn.w	r3, #3
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	e018      	b.n	8004868 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800483c:	69b8      	ldr	r0, [r7, #24]
 800483e:	f000 fd67 	bl	8005310 <xQueueGiveMutexRecursive>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d00f      	beq.n	8004868 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004848:	f06f 0302 	mvn.w	r3, #2
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e00b      	b.n	8004868 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004850:	2300      	movs	r3, #0
 8004852:	2200      	movs	r2, #0
 8004854:	2100      	movs	r1, #0
 8004856:	69b8      	ldr	r0, [r7, #24]
 8004858:	f000 fe3a 	bl	80054d0 <xQueueGenericSend>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d002      	beq.n	8004868 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004862:	f06f 0302 	mvn.w	r3, #2
 8004866:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004868:	69fb      	ldr	r3, [r7, #28]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20003260 	.word	0x20003260

08004878 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	; 0x30
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004888:	f3ef 8305 	mrs	r3, IPSR
 800488c:	61bb      	str	r3, [r7, #24]
  return(result);
 800488e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004890:	2b00      	cmp	r3, #0
 8004892:	f040 8086 	bne.w	80049a2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004896:	f3ef 8310 	mrs	r3, PRIMASK
 800489a:	617b      	str	r3, [r7, #20]
  return(result);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048a2:	f3ef 8311 	mrs	r3, BASEPRI
 80048a6:	613b      	str	r3, [r7, #16]
  return(result);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <osSemaphoreNew+0x3e>
 80048ae:	4b3f      	ldr	r3, [pc, #252]	; (80049ac <osSemaphoreNew+0x134>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d075      	beq.n	80049a2 <osSemaphoreNew+0x12a>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d072      	beq.n	80049a2 <osSemaphoreNew+0x12a>
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d86e      	bhi.n	80049a2 <osSemaphoreNew+0x12a>
    mem = -1;
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d006      	beq.n	80048e6 <osSemaphoreNew+0x6e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b4f      	cmp	r3, #79	; 0x4f
 80048de:	d902      	bls.n	80048e6 <osSemaphoreNew+0x6e>
        mem = 1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	623b      	str	r3, [r7, #32]
 80048e4:	e00c      	b.n	8004900 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d108      	bne.n	8004900 <osSemaphoreNew+0x88>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <osSemaphoreNew+0x88>
          mem = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	e001      	b.n	8004900 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d04c      	beq.n	80049a2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d128      	bne.n	8004960 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10a      	bne.n	800492a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2203      	movs	r2, #3
 800491a:	9200      	str	r2, [sp, #0]
 800491c:	2200      	movs	r2, #0
 800491e:	2100      	movs	r1, #0
 8004920:	2001      	movs	r0, #1
 8004922:	f000 fbc1 	bl	80050a8 <xQueueGenericCreateStatic>
 8004926:	6278      	str	r0, [r7, #36]	; 0x24
 8004928:	e005      	b.n	8004936 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800492a:	2203      	movs	r2, #3
 800492c:	2100      	movs	r1, #0
 800492e:	2001      	movs	r0, #1
 8004930:	f000 fc3c 	bl	80051ac <xQueueGenericCreate>
 8004934:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d022      	beq.n	8004982 <osSemaphoreNew+0x10a>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01f      	beq.n	8004982 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004942:	2300      	movs	r3, #0
 8004944:	2200      	movs	r2, #0
 8004946:	2100      	movs	r1, #0
 8004948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800494a:	f000 fdc1 	bl	80054d0 <xQueueGenericSend>
 800494e:	4603      	mov	r3, r0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d016      	beq.n	8004982 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004956:	f001 fa77 	bl	8005e48 <vQueueDelete>
            hSemaphore = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
 800495e:	e010      	b.n	8004982 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d108      	bne.n	8004978 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	461a      	mov	r2, r3
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fd3c 	bl	80053ec <xQueueCreateCountingSemaphoreStatic>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24
 8004976:	e004      	b.n	8004982 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fd71 	bl	8005462 <xQueueCreateCountingSemaphore>
 8004980:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00c      	beq.n	80049a2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <osSemaphoreNew+0x11e>
          name = attr->name;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	e001      	b.n	800499a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800499e:	f001 fba1 	bl	80060e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3728      	adds	r7, #40	; 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20003260 	.word	0x20003260

080049b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80049c8:	f06f 0303 	mvn.w	r3, #3
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e04b      	b.n	8004a68 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d0:	f3ef 8305 	mrs	r3, IPSR
 80049d4:	617b      	str	r3, [r7, #20]
  return(result);
 80049d6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10f      	bne.n	80049fc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049dc:	f3ef 8310 	mrs	r3, PRIMASK
 80049e0:	613b      	str	r3, [r7, #16]
  return(result);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049e8:	f3ef 8311 	mrs	r3, BASEPRI
 80049ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d026      	beq.n	8004a42 <osSemaphoreAcquire+0x92>
 80049f4:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <osSemaphoreAcquire+0xc4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d122      	bne.n	8004a42 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004a02:	f06f 0303 	mvn.w	r3, #3
 8004a06:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004a08:	e02d      	b.n	8004a66 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004a0e:	f107 0308 	add.w	r3, r7, #8
 8004a12:	461a      	mov	r2, r3
 8004a14:	2100      	movs	r1, #0
 8004a16:	69b8      	ldr	r0, [r7, #24]
 8004a18:	f001 f990 	bl	8005d3c <xQueueReceiveFromISR>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d003      	beq.n	8004a2a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004a22:	f06f 0302 	mvn.w	r3, #2
 8004a26:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004a28:	e01d      	b.n	8004a66 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01a      	beq.n	8004a66 <osSemaphoreAcquire+0xb6>
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <osSemaphoreAcquire+0xc8>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004a40:	e011      	b.n	8004a66 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	69b8      	ldr	r0, [r7, #24]
 8004a46:	f001 f865 	bl	8005b14 <xQueueSemaphoreTake>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d00b      	beq.n	8004a68 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004a56:	f06f 0301 	mvn.w	r3, #1
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	e004      	b.n	8004a68 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004a5e:	f06f 0302 	mvn.w	r3, #2
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	e000      	b.n	8004a68 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004a66:	bf00      	nop
      }
    }
  }

  return (stat);
 8004a68:	69fb      	ldr	r3, [r7, #28]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20003260 	.word	0x20003260
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004a92:	f06f 0303 	mvn.w	r3, #3
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e03e      	b.n	8004b18 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a9a:	f3ef 8305 	mrs	r3, IPSR
 8004a9e:	617b      	str	r3, [r7, #20]
  return(result);
 8004aa0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10f      	bne.n	8004ac6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aaa:	613b      	str	r3, [r7, #16]
  return(result);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d105      	bne.n	8004abe <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01e      	beq.n	8004afc <osSemaphoreRelease+0x80>
 8004abe:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <osSemaphoreRelease+0xa8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d11a      	bne.n	8004afc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004aca:	f107 0308 	add.w	r3, r7, #8
 8004ace:	4619      	mov	r1, r3
 8004ad0:	69b8      	ldr	r0, [r7, #24]
 8004ad2:	f000 fea3 	bl	800581c <xQueueGiveFromISR>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d003      	beq.n	8004ae4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004adc:	f06f 0302 	mvn.w	r3, #2
 8004ae0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ae2:	e018      	b.n	8004b16 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d015      	beq.n	8004b16 <osSemaphoreRelease+0x9a>
 8004aea:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <osSemaphoreRelease+0xac>)
 8004aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004afa:	e00c      	b.n	8004b16 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004afc:	2300      	movs	r3, #0
 8004afe:	2200      	movs	r2, #0
 8004b00:	2100      	movs	r1, #0
 8004b02:	69b8      	ldr	r0, [r7, #24]
 8004b04:	f000 fce4 	bl	80054d0 <xQueueGenericSend>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d004      	beq.n	8004b18 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004b0e:	f06f 0302 	mvn.w	r3, #2
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	e000      	b.n	8004b18 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004b16:	bf00      	nop
    }
  }

  return (stat);
 8004b18:	69fb      	ldr	r3, [r7, #28]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20003260 	.word	0x20003260
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08c      	sub	sp, #48	; 0x30
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b3c:	f3ef 8305 	mrs	r3, IPSR
 8004b40:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d16f      	bne.n	8004c28 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b48:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b54:	f3ef 8311 	mrs	r3, BASEPRI
 8004b58:	613b      	str	r3, [r7, #16]
  return(result);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <osMessageQueueNew+0x3c>
 8004b60:	4b34      	ldr	r3, [pc, #208]	; (8004c34 <osMessageQueueNew+0x108>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d05f      	beq.n	8004c28 <osMessageQueueNew+0xfc>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d05c      	beq.n	8004c28 <osMessageQueueNew+0xfc>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d059      	beq.n	8004c28 <osMessageQueueNew+0xfc>
    mem = -1;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d029      	beq.n	8004bd4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d012      	beq.n	8004bae <osMessageQueueNew+0x82>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b4f      	cmp	r3, #79	; 0x4f
 8004b8e:	d90e      	bls.n	8004bae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <osMessageQueueNew+0x82>
        mem = 1;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	623b      	str	r3, [r7, #32]
 8004bac:	e014      	b.n	8004bd8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d110      	bne.n	8004bd8 <osMessageQueueNew+0xac>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10c      	bne.n	8004bd8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d108      	bne.n	8004bd8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <osMessageQueueNew+0xac>
          mem = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	e001      	b.n	8004bd8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d10b      	bne.n	8004bf6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2100      	movs	r1, #0
 8004be8:	9100      	str	r1, [sp, #0]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fa5b 	bl	80050a8 <xQueueGenericCreateStatic>
 8004bf2:	6278      	str	r0, [r7, #36]	; 0x24
 8004bf4:	e008      	b.n	8004c08 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fad3 	bl	80051ac <xQueueGenericCreate>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <osMessageQueueNew+0xf0>
        name = attr->name;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	e001      	b.n	8004c20 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004c20:	69f9      	ldr	r1, [r7, #28]
 8004c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c24:	f001 fa5e 	bl	80060e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3728      	adds	r7, #40	; 0x28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20003260 	.word	0x20003260

08004c38 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c50:	f3ef 8305 	mrs	r3, IPSR
 8004c54:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c56:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10f      	bne.n	8004c7c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c60:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d105      	bne.n	8004c74 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c68:	f3ef 8311 	mrs	r3, BASEPRI
 8004c6c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02c      	beq.n	8004cce <osMessageQueuePut+0x96>
 8004c74:	4b28      	ldr	r3, [pc, #160]	; (8004d18 <osMessageQueuePut+0xe0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d128      	bne.n	8004cce <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <osMessageQueuePut+0x56>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <osMessageQueuePut+0x56>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004c8e:	f06f 0303 	mvn.w	r3, #3
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c94:	e039      	b.n	8004d0a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004c9a:	f107 0210 	add.w	r2, r7, #16
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	6a38      	ldr	r0, [r7, #32]
 8004ca4:	f000 fd1a 	bl	80056dc <xQueueGenericSendFromISR>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d003      	beq.n	8004cb6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004cae:	f06f 0302 	mvn.w	r3, #2
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cb4:	e029      	b.n	8004d0a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d026      	beq.n	8004d0a <osMessageQueuePut+0xd2>
 8004cbc:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <osMessageQueuePut+0xe4>)
 8004cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ccc:	e01d      	b.n	8004d0a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <osMessageQueuePut+0xa2>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004cda:	f06f 0303 	mvn.w	r3, #3
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce0:	e014      	b.n	8004d0c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	6a38      	ldr	r0, [r7, #32]
 8004cea:	f000 fbf1 	bl	80054d0 <xQueueGenericSend>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d00b      	beq.n	8004d0c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004cfa:	f06f 0301 	mvn.w	r3, #1
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004d00:	e004      	b.n	8004d0c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004d02:	f06f 0302 	mvn.w	r3, #2
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
 8004d08:	e000      	b.n	8004d0c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3728      	adds	r7, #40	; 0x28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20003260 	.word	0x20003260
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d36:	f3ef 8305 	mrs	r3, IPSR
 8004d3a:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d3c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d42:	f3ef 8310 	mrs	r3, PRIMASK
 8004d46:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d52:	617b      	str	r3, [r7, #20]
  return(result);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02c      	beq.n	8004db4 <osMessageQueueGet+0x94>
 8004d5a:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <osMessageQueueGet+0xdc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d128      	bne.n	8004db4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <osMessageQueueGet+0x54>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <osMessageQueueGet+0x54>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004d74:	f06f 0303 	mvn.w	r3, #3
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d7a:	e038      	b.n	8004dee <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004d80:	f107 0310 	add.w	r3, r7, #16
 8004d84:	461a      	mov	r2, r3
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	6a38      	ldr	r0, [r7, #32]
 8004d8a:	f000 ffd7 	bl	8005d3c <xQueueReceiveFromISR>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d003      	beq.n	8004d9c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004d94:	f06f 0302 	mvn.w	r3, #2
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d9a:	e028      	b.n	8004dee <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d025      	beq.n	8004dee <osMessageQueueGet+0xce>
 8004da2:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <osMessageQueueGet+0xe0>)
 8004da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004db2:	e01c      	b.n	8004dee <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <osMessageQueueGet+0xa0>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d103      	bne.n	8004dc8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004dc0:	f06f 0303 	mvn.w	r3, #3
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc6:	e013      	b.n	8004df0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	6a38      	ldr	r0, [r7, #32]
 8004dce:	f000 fdbb 	bl	8005948 <xQueueReceive>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d00b      	beq.n	8004df0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004dde:	f06f 0301 	mvn.w	r3, #1
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
 8004de4:	e004      	b.n	8004df0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004de6:	f06f 0302 	mvn.w	r3, #2
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
 8004dec:	e000      	b.n	8004df0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004dee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3728      	adds	r7, #40	; 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20003260 	.word	0x20003260
 8004e00:	e000ed04 	.word	0xe000ed04

08004e04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4a07      	ldr	r2, [pc, #28]	; (8004e30 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4a06      	ldr	r2, [pc, #24]	; (8004e34 <vApplicationGetIdleTaskMemory+0x30>)
 8004e1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2280      	movs	r2, #128	; 0x80
 8004e20:	601a      	str	r2, [r3, #0]
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20003264 	.word	0x20003264
 8004e34:	20003320 	.word	0x20003320

08004e38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a06      	ldr	r2, [pc, #24]	; (8004e68 <vApplicationGetTimerTaskMemory+0x30>)
 8004e4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e56:	601a      	str	r2, [r3, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	20003520 	.word	0x20003520
 8004e68:	200035dc 	.word	0x200035dc

08004e6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f103 0208 	add.w	r2, r3, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295
 8004e84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f103 0208 	add.w	r2, r3, #8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f103 0208 	add.w	r2, r3, #8
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	601a      	str	r2, [r3, #0]
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d103      	bne.n	8004f2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e00c      	b.n	8004f48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3308      	adds	r3, #8
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e002      	b.n	8004f3c <vListInsert+0x2e>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d2f6      	bcs.n	8004f36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	601a      	str	r2, [r3, #0]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6892      	ldr	r2, [r2, #8]
 8004f96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6852      	ldr	r2, [r2, #4]
 8004fa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d103      	bne.n	8004fb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	1e5a      	subs	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10c      	bne.n	8005002 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	b672      	cpsid	i
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	b662      	cpsie	i
 8004ffc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005002:	f002 fdd3 	bl	8007bac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	441a      	add	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	3b01      	subs	r3, #1
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	441a      	add	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22ff      	movs	r2, #255	; 0xff
 800504e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d114      	bne.n	8005082 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01a      	beq.n	8005096 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3310      	adds	r3, #16
 8005064:	4618      	mov	r0, r3
 8005066:	f001 fd75 	bl	8006b54 <xTaskRemoveFromEventList>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d012      	beq.n	8005096 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <xQueueGenericReset+0xd0>)
 8005072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	e009      	b.n	8005096 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3310      	adds	r3, #16
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fef0 	bl	8004e6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3324      	adds	r3, #36	; 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff feeb 	bl	8004e6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005096:	f002 fdbd 	bl	8007c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800509a:	2301      	movs	r3, #1
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08e      	sub	sp, #56	; 0x38
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10c      	bne.n	80050d6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	b672      	cpsid	i
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	b662      	cpsie	i
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10c      	bne.n	80050f6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	b672      	cpsid	i
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	b662      	cpsie	i
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <xQueueGenericCreateStatic+0x5a>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <xQueueGenericCreateStatic+0x5e>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <xQueueGenericCreateStatic+0x60>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10c      	bne.n	8005126 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	b672      	cpsid	i
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	b662      	cpsie	i
 8005120:	623b      	str	r3, [r7, #32]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <xQueueGenericCreateStatic+0x8a>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <xQueueGenericCreateStatic+0x8e>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <xQueueGenericCreateStatic+0x90>
 8005136:	2300      	movs	r3, #0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10c      	bne.n	8005156 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	b672      	cpsid	i
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	b662      	cpsie	i
 8005150:	61fb      	str	r3, [r7, #28]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005156:	2350      	movs	r3, #80	; 0x50
 8005158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b50      	cmp	r3, #80	; 0x50
 800515e:	d00c      	beq.n	800517a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	b672      	cpsid	i
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	b662      	cpsie	i
 8005174:	61bb      	str	r3, [r7, #24]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800517a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800518e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f847 	bl	8005230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3730      	adds	r7, #48	; 0x30
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10c      	bne.n	80051da <xQueueGenericCreate+0x2e>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	b672      	cpsid	i
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	b662      	cpsie	i
 80051d4:	613b      	str	r3, [r7, #16]
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	e004      	b.n	80051f0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3350      	adds	r3, #80	; 0x50
 80051f4:	4618      	mov	r0, r3
 80051f6:	f002 fe05 	bl	8007e04 <pvPortMalloc>
 80051fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d011      	beq.n	8005226 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	3350      	adds	r3, #80	; 0x50
 800520a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005214:	79fa      	ldrb	r2, [r7, #7]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	4613      	mov	r3, r2
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f805 	bl	8005230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005226:	69bb      	ldr	r3, [r7, #24]
	}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d103      	bne.n	800524c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e002      	b.n	8005252 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800525e:	2101      	movs	r1, #1
 8005260:	69b8      	ldr	r0, [r7, #24]
 8005262:	f7ff feb7 	bl	8004fd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00e      	beq.n	80052a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005296:	2300      	movs	r3, #0
 8005298:	2200      	movs	r2, #0
 800529a:	2100      	movs	r1, #0
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f917 	bl	80054d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b086      	sub	sp, #24
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	4603      	mov	r3, r0
 80052b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80052b4:	2301      	movs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	461a      	mov	r2, r3
 80052c0:	6939      	ldr	r1, [r7, #16]
 80052c2:	6978      	ldr	r0, [r7, #20]
 80052c4:	f7ff ff72 	bl	80051ac <xQueueGenericCreate>
 80052c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff ffd3 	bl	8005276 <prvInitialiseMutex>

		return xNewQueue;
 80052d0:	68fb      	ldr	r3, [r7, #12]
	}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b088      	sub	sp, #32
 80052de:	af02      	add	r7, sp, #8
 80052e0:	4603      	mov	r3, r0
 80052e2:	6039      	str	r1, [r7, #0]
 80052e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80052e6:	2301      	movs	r3, #1
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2200      	movs	r2, #0
 80052f6:	6939      	ldr	r1, [r7, #16]
 80052f8:	6978      	ldr	r0, [r7, #20]
 80052fa:	f7ff fed5 	bl	80050a8 <xQueueGenericCreateStatic>
 80052fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff ffb8 	bl	8005276 <prvInitialiseMutex>

		return xNewQueue;
 8005306:	68fb      	ldr	r3, [r7, #12]
	}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10c      	bne.n	800533c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	b672      	cpsid	i
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	b662      	cpsie	i
 8005336:	60fb      	str	r3, [r7, #12]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	689c      	ldr	r4, [r3, #8]
 8005340:	f001 fdd2 	bl	8006ee8 <xTaskGetCurrentTaskHandle>
 8005344:	4603      	mov	r3, r0
 8005346:	429c      	cmp	r4, r3
 8005348:	d111      	bne.n	800536e <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	1e5a      	subs	r2, r3, #1
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800535c:	2300      	movs	r3, #0
 800535e:	2200      	movs	r2, #0
 8005360:	2100      	movs	r1, #0
 8005362:	6938      	ldr	r0, [r7, #16]
 8005364:	f000 f8b4 	bl	80054d0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005368:	2301      	movs	r3, #1
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e001      	b.n	8005372 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005372:	697b      	ldr	r3, [r7, #20]
	}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	bd90      	pop	{r4, r7, pc}

0800537c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10c      	bne.n	80053aa <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	b672      	cpsid	i
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	b662      	cpsie	i
 80053a4:	60fb      	str	r3, [r7, #12]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	689c      	ldr	r4, [r3, #8]
 80053ae:	f001 fd9b 	bl	8006ee8 <xTaskGetCurrentTaskHandle>
 80053b2:	4603      	mov	r3, r0
 80053b4:	429c      	cmp	r4, r3
 80053b6:	d107      	bne.n	80053c8 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80053c2:	2301      	movs	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	e00c      	b.n	80053e2 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	6938      	ldr	r0, [r7, #16]
 80053cc:	f000 fba2 	bl	8005b14 <xQueueSemaphoreTake>
 80053d0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80053e2:	697b      	ldr	r3, [r7, #20]
	}
 80053e4:	4618      	mov	r0, r3
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}

080053ec <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10c      	bne.n	8005418 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	b672      	cpsid	i
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	b662      	cpsie	i
 8005412:	61bb      	str	r3, [r7, #24]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d90c      	bls.n	800543a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	b672      	cpsid	i
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	b662      	cpsie	i
 8005434:	617b      	str	r3, [r7, #20]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800543a:	2302      	movs	r3, #2
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	2100      	movs	r1, #0
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f7ff fe2f 	bl	80050a8 <xQueueGenericCreateStatic>
 800544a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005458:	69fb      	ldr	r3, [r7, #28]
	}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10c      	bne.n	800548c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	b672      	cpsid	i
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	b662      	cpsie	i
 8005486:	613b      	str	r3, [r7, #16]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d90c      	bls.n	80054ae <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	b672      	cpsid	i
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	b662      	cpsie	i
 80054a8:	60fb      	str	r3, [r7, #12]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80054ae:	2202      	movs	r2, #2
 80054b0:	2100      	movs	r1, #0
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fe7a 	bl	80051ac <xQueueGenericCreate>
 80054b8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80054c6:	697b      	ldr	r3, [r7, #20]
	}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	; 0x38
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054de:	2300      	movs	r3, #0
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10c      	bne.n	8005506 <xQueueGenericSend+0x36>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	b672      	cpsid	i
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	b662      	cpsie	i
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <xQueueGenericSend+0x44>
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <xQueueGenericSend+0x48>
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <xQueueGenericSend+0x4a>
 8005518:	2300      	movs	r3, #0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10c      	bne.n	8005538 <xQueueGenericSend+0x68>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	b672      	cpsid	i
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	b662      	cpsie	i
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d103      	bne.n	8005546 <xQueueGenericSend+0x76>
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <xQueueGenericSend+0x7a>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueGenericSend+0x7c>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10c      	bne.n	800556a <xQueueGenericSend+0x9a>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	b672      	cpsid	i
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	b662      	cpsie	i
 8005564:	623b      	str	r3, [r7, #32]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800556a:	f001 fccd 	bl	8006f08 <xTaskGetSchedulerState>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <xQueueGenericSend+0xaa>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <xQueueGenericSend+0xae>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <xQueueGenericSend+0xb0>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10c      	bne.n	800559e <xQueueGenericSend+0xce>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	b672      	cpsid	i
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	b662      	cpsie	i
 8005598:	61fb      	str	r3, [r7, #28]
}
 800559a:	bf00      	nop
 800559c:	e7fe      	b.n	800559c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800559e:	f002 fb05 	bl	8007bac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <xQueueGenericSend+0xe4>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d129      	bne.n	8005608 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ba:	f000 fc82 	bl	8005ec2 <prvCopyDataToQueue>
 80055be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d010      	beq.n	80055ea <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	3324      	adds	r3, #36	; 0x24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 fac1 	bl	8006b54 <xTaskRemoveFromEventList>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d013      	beq.n	8005600 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055d8:	4b3f      	ldr	r3, [pc, #252]	; (80056d8 <xQueueGenericSend+0x208>)
 80055da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	e00a      	b.n	8005600 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055f0:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <xQueueGenericSend+0x208>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005600:	f002 fb08 	bl	8007c14 <vPortExitCritical>
				return pdPASS;
 8005604:	2301      	movs	r3, #1
 8005606:	e063      	b.n	80056d0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800560e:	f002 fb01 	bl	8007c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005612:	2300      	movs	r3, #0
 8005614:	e05c      	b.n	80056d0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800561c:	f107 0314 	add.w	r3, r7, #20
 8005620:	4618      	mov	r0, r3
 8005622:	f001 fafd 	bl	8006c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005626:	2301      	movs	r3, #1
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800562a:	f002 faf3 	bl	8007c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800562e:	f001 f84b 	bl	80066c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005632:	f002 fabb 	bl	8007bac <vPortEnterCritical>
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800563c:	b25b      	sxtb	r3, r3
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d103      	bne.n	800564c <xQueueGenericSend+0x17c>
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005652:	b25b      	sxtb	r3, r3
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d103      	bne.n	8005662 <xQueueGenericSend+0x192>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005662:	f002 fad7 	bl	8007c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005666:	1d3a      	adds	r2, r7, #4
 8005668:	f107 0314 	add.w	r3, r7, #20
 800566c:	4611      	mov	r1, r2
 800566e:	4618      	mov	r0, r3
 8005670:	f001 faec 	bl	8006c4c <xTaskCheckForTimeOut>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d124      	bne.n	80056c4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800567a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800567c:	f000 fd19 	bl	80060b2 <prvIsQueueFull>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d018      	beq.n	80056b8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	3310      	adds	r3, #16
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f001 fa0c 	bl	8006aac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005696:	f000 fca4 	bl	8005fe2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800569a:	f001 f823 	bl	80066e4 <xTaskResumeAll>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f47f af7c 	bne.w	800559e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80056a6:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <xQueueGenericSend+0x208>)
 80056a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	e772      	b.n	800559e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ba:	f000 fc92 	bl	8005fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056be:	f001 f811 	bl	80066e4 <xTaskResumeAll>
 80056c2:	e76c      	b.n	800559e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c6:	f000 fc8c 	bl	8005fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ca:	f001 f80b 	bl	80066e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3738      	adds	r7, #56	; 0x38
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	; 0x38
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10c      	bne.n	800570e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	b672      	cpsid	i
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	b662      	cpsie	i
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <xQueueGenericSendFromISR+0x40>
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <xQueueGenericSendFromISR+0x44>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <xQueueGenericSendFromISR+0x46>
 8005720:	2300      	movs	r3, #0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10c      	bne.n	8005740 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	b672      	cpsid	i
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	b662      	cpsie	i
 800573a:	623b      	str	r3, [r7, #32]
}
 800573c:	bf00      	nop
 800573e:	e7fe      	b.n	800573e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d103      	bne.n	800574e <xQueueGenericSendFromISR+0x72>
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <xQueueGenericSendFromISR+0x76>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <xQueueGenericSendFromISR+0x78>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10c      	bne.n	8005772 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	b672      	cpsid	i
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	b662      	cpsie	i
 800576c:	61fb      	str	r3, [r7, #28]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005772:	f002 fb03 	bl	8007d7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005776:	f3ef 8211 	mrs	r2, BASEPRI
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	b672      	cpsid	i
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	b662      	cpsie	i
 800578e:	61ba      	str	r2, [r7, #24]
 8005790:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005792:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579e:	429a      	cmp	r2, r3
 80057a0:	d302      	bcc.n	80057a8 <xQueueGenericSendFromISR+0xcc>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d12c      	bne.n	8005802 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b8:	f000 fb83 	bl	8005ec2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d112      	bne.n	80057ec <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d016      	beq.n	80057fc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	3324      	adds	r3, #36	; 0x24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 f9be 	bl	8006b54 <xTaskRemoveFromEventList>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00e      	beq.n	80057fc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00b      	beq.n	80057fc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e007      	b.n	80057fc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057f0:	3301      	adds	r3, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	b25a      	sxtb	r2, r3
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057fc:	2301      	movs	r3, #1
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005800:	e001      	b.n	8005806 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005802:	2300      	movs	r3, #0
 8005804:	637b      	str	r3, [r7, #52]	; 0x34
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005810:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005814:	4618      	mov	r0, r3
 8005816:	3738      	adds	r7, #56	; 0x38
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10c      	bne.n	800584a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	b672      	cpsid	i
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	b662      	cpsie	i
 8005844:	623b      	str	r3, [r7, #32]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <xQueueGiveFromISR+0x50>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	b672      	cpsid	i
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	b662      	cpsie	i
 8005866:	61fb      	str	r3, [r7, #28]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d103      	bne.n	800587c <xQueueGiveFromISR+0x60>
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <xQueueGiveFromISR+0x64>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <xQueueGiveFromISR+0x66>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	b672      	cpsid	i
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	b662      	cpsie	i
 800589a:	61bb      	str	r3, [r7, #24]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058a0:	f002 fa6c 	bl	8007d7c <vPortValidateInterruptPriority>
	__asm volatile
 80058a4:	f3ef 8211 	mrs	r2, BASEPRI
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	b672      	cpsid	i
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	b662      	cpsie	i
 80058bc:	617a      	str	r2, [r7, #20]
 80058be:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80058c0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d22b      	bcs.n	800592c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d112      	bne.n	8005916 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d016      	beq.n	8005926 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	3324      	adds	r3, #36	; 0x24
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 f929 	bl	8006b54 <xTaskRemoveFromEventList>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00e      	beq.n	8005926 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e007      	b.n	8005926 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800591a:	3301      	adds	r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	b25a      	sxtb	r2, r3
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005926:	2301      	movs	r3, #1
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	e001      	b.n	8005930 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800592c:	2300      	movs	r3, #0
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f383 8811 	msr	BASEPRI, r3
}
 800593a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800593e:	4618      	mov	r0, r3
 8005940:	3738      	adds	r7, #56	; 0x38
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08c      	sub	sp, #48	; 0x30
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10c      	bne.n	800597c <xQueueReceive+0x34>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	b672      	cpsid	i
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	b662      	cpsie	i
 8005976:	623b      	str	r3, [r7, #32]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <xQueueReceive+0x42>
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <xQueueReceive+0x46>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <xQueueReceive+0x48>
 800598e:	2300      	movs	r3, #0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10c      	bne.n	80059ae <xQueueReceive+0x66>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	b672      	cpsid	i
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	b662      	cpsie	i
 80059a8:	61fb      	str	r3, [r7, #28]
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ae:	f001 faab 	bl	8006f08 <xTaskGetSchedulerState>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <xQueueReceive+0x76>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <xQueueReceive+0x7a>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <xQueueReceive+0x7c>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10c      	bne.n	80059e2 <xQueueReceive+0x9a>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	b672      	cpsid	i
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	b662      	cpsie	i
 80059dc:	61bb      	str	r3, [r7, #24]
}
 80059de:	bf00      	nop
 80059e0:	e7fe      	b.n	80059e0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059e2:	f002 f8e3 	bl	8007bac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01f      	beq.n	8005a32 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f6:	f000 face 	bl	8005f96 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	1e5a      	subs	r2, r3, #1
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00f      	beq.n	8005a2a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	3310      	adds	r3, #16
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 f8a0 	bl	8006b54 <xTaskRemoveFromEventList>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a1a:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <xQueueReceive+0x1c8>)
 8005a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a2a:	f002 f8f3 	bl	8007c14 <vPortExitCritical>
				return pdPASS;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e069      	b.n	8005b06 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d103      	bne.n	8005a40 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a38:	f002 f8ec 	bl	8007c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e062      	b.n	8005b06 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a46:	f107 0310 	add.w	r3, r7, #16
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 f8e8 	bl	8006c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a54:	f002 f8de 	bl	8007c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a58:	f000 fe36 	bl	80066c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a5c:	f002 f8a6 	bl	8007bac <vPortEnterCritical>
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a66:	b25b      	sxtb	r3, r3
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d103      	bne.n	8005a76 <xQueueReceive+0x12e>
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a7c:	b25b      	sxtb	r3, r3
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d103      	bne.n	8005a8c <xQueueReceive+0x144>
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a8c:	f002 f8c2 	bl	8007c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a90:	1d3a      	adds	r2, r7, #4
 8005a92:	f107 0310 	add.w	r3, r7, #16
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 f8d7 	bl	8006c4c <xTaskCheckForTimeOut>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d123      	bne.n	8005aec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa6:	f000 faee 	bl	8006086 <prvIsQueueEmpty>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d017      	beq.n	8005ae0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	3324      	adds	r3, #36	; 0x24
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fff7 	bl	8006aac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac0:	f000 fa8f 	bl	8005fe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ac4:	f000 fe0e 	bl	80066e4 <xTaskResumeAll>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d189      	bne.n	80059e2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <xQueueReceive+0x1c8>)
 8005ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	e780      	b.n	80059e2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae2:	f000 fa7e 	bl	8005fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ae6:	f000 fdfd 	bl	80066e4 <xTaskResumeAll>
 8005aea:	e77a      	b.n	80059e2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aee:	f000 fa78 	bl	8005fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005af2:	f000 fdf7 	bl	80066e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af8:	f000 fac5 	bl	8006086 <prvIsQueueEmpty>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f43f af6f 	beq.w	80059e2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3730      	adds	r7, #48	; 0x30
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	; 0x38
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10c      	bne.n	8005b4a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	b672      	cpsid	i
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	b662      	cpsie	i
 8005b44:	623b      	str	r3, [r7, #32]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00c      	beq.n	8005b6c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	b672      	cpsid	i
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	b662      	cpsie	i
 8005b66:	61fb      	str	r3, [r7, #28]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b6c:	f001 f9cc 	bl	8006f08 <xTaskGetSchedulerState>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <xQueueSemaphoreTake+0x68>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <xQueueSemaphoreTake+0x6c>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <xQueueSemaphoreTake+0x6e>
 8005b80:	2300      	movs	r3, #0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10c      	bne.n	8005ba0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	b672      	cpsid	i
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	b662      	cpsie	i
 8005b9a:	61bb      	str	r3, [r7, #24]
}
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ba0:	f002 f804 	bl	8007bac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d024      	beq.n	8005bfa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	1e5a      	subs	r2, r3, #1
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005bc0:	f001 fb20 	bl	8007204 <pvTaskIncrementMutexHeldCount>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00f      	beq.n	8005bf2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	3310      	adds	r3, #16
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 ffbc 	bl	8006b54 <xTaskRemoveFromEventList>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d007      	beq.n	8005bf2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005be2:	4b55      	ldr	r3, [pc, #340]	; (8005d38 <xQueueSemaphoreTake+0x224>)
 8005be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bf2:	f002 f80f 	bl	8007c14 <vPortExitCritical>
				return pdPASS;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e099      	b.n	8005d2e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d113      	bne.n	8005c28 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00c      	beq.n	8005c20 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	b672      	cpsid	i
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	b662      	cpsie	i
 8005c1a:	617b      	str	r3, [r7, #20]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c20:	f001 fff8 	bl	8007c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e082      	b.n	8005d2e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c2e:	f107 030c 	add.w	r3, r7, #12
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fff4 	bl	8006c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c3c:	f001 ffea 	bl	8007c14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c40:	f000 fd42 	bl	80066c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c44:	f001 ffb2 	bl	8007bac <vPortEnterCritical>
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c4e:	b25b      	sxtb	r3, r3
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d103      	bne.n	8005c5e <xQueueSemaphoreTake+0x14a>
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c64:	b25b      	sxtb	r3, r3
 8005c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6a:	d103      	bne.n	8005c74 <xQueueSemaphoreTake+0x160>
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c74:	f001 ffce 	bl	8007c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c78:	463a      	mov	r2, r7
 8005c7a:	f107 030c 	add.w	r3, r7, #12
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 ffe3 	bl	8006c4c <xTaskCheckForTimeOut>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d132      	bne.n	8005cf2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c8e:	f000 f9fa 	bl	8006086 <prvIsQueueEmpty>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d026      	beq.n	8005ce6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005ca0:	f001 ff84 	bl	8007bac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 f94b 	bl	8006f44 <xTaskPriorityInherit>
 8005cae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005cb0:	f001 ffb0 	bl	8007c14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	3324      	adds	r3, #36	; 0x24
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fef5 	bl	8006aac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cc4:	f000 f98d 	bl	8005fe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cc8:	f000 fd0c 	bl	80066e4 <xTaskResumeAll>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f47f af66 	bne.w	8005ba0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005cd4:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <xQueueSemaphoreTake+0x224>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	e75c      	b.n	8005ba0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ce8:	f000 f97b 	bl	8005fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cec:	f000 fcfa 	bl	80066e4 <xTaskResumeAll>
 8005cf0:	e756      	b.n	8005ba0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cf4:	f000 f975 	bl	8005fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cf8:	f000 fcf4 	bl	80066e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cfe:	f000 f9c2 	bl	8006086 <prvIsQueueEmpty>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f43f af4b 	beq.w	8005ba0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005d10:	f001 ff4c 	bl	8007bac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d16:	f000 f8bc 	bl	8005e92 <prvGetDisinheritPriorityAfterTimeout>
 8005d1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 f9e8 	bl	80070f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d28:	f001 ff74 	bl	8007c14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3738      	adds	r7, #56	; 0x38
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08e      	sub	sp, #56	; 0x38
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	b672      	cpsid	i
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	b662      	cpsie	i
 8005d66:	623b      	str	r3, [r7, #32]
}
 8005d68:	bf00      	nop
 8005d6a:	e7fe      	b.n	8005d6a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d103      	bne.n	8005d7a <xQueueReceiveFromISR+0x3e>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <xQueueReceiveFromISR+0x42>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <xQueueReceiveFromISR+0x44>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10c      	bne.n	8005d9e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	b672      	cpsid	i
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	b662      	cpsie	i
 8005d98:	61fb      	str	r3, [r7, #28]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d9e:	f001 ffed 	bl	8007d7c <vPortValidateInterruptPriority>
	__asm volatile
 8005da2:	f3ef 8211 	mrs	r2, BASEPRI
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	b672      	cpsid	i
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	b662      	cpsie	i
 8005dba:	61ba      	str	r2, [r7, #24]
 8005dbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005dbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d02f      	beq.n	8005e2e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ddc:	f000 f8db 	bl	8005f96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	1e5a      	subs	r2, r3, #1
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005de8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d112      	bne.n	8005e18 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d016      	beq.n	8005e28 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	3310      	adds	r3, #16
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fea8 	bl	8006b54 <xTaskRemoveFromEventList>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00e      	beq.n	8005e28 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e007      	b.n	8005e28 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	b25a      	sxtb	r2, r3
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2c:	e001      	b.n	8005e32 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	637b      	str	r3, [r7, #52]	; 0x34
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f383 8811 	msr	BASEPRI, r3
}
 8005e3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3738      	adds	r7, #56	; 0x38
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10c      	bne.n	8005e74 <vQueueDelete+0x2c>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	b672      	cpsid	i
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	b662      	cpsie	i
 8005e6e:	60bb      	str	r3, [r7, #8]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f95f 	bl	8006138 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f002 f887 	bl	8007f98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d006      	beq.n	8005eb0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	e001      	b.n	8005eb4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
	}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b086      	sub	sp, #24
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10d      	bne.n	8005efc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d14d      	bne.n	8005f84 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 f891 	bl	8007014 <xTaskPriorityDisinherit>
 8005ef2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	609a      	str	r2, [r3, #8]
 8005efa:	e043      	b.n	8005f84 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d119      	bne.n	8005f36 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6858      	ldr	r0, [r3, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	f00c faba 	bl	8012486 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	441a      	add	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d32b      	bcc.n	8005f84 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	605a      	str	r2, [r3, #4]
 8005f34:	e026      	b.n	8005f84 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68d8      	ldr	r0, [r3, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	f00c faa0 	bl	8012486 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	425b      	negs	r3, r3
 8005f50:	441a      	add	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d207      	bcs.n	8005f72 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	441a      	add	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d105      	bne.n	8005f84 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f8c:	697b      	ldr	r3, [r7, #20]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d018      	beq.n	8005fda <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d303      	bcc.n	8005fca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68d9      	ldr	r1, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6838      	ldr	r0, [r7, #0]
 8005fd6:	f00c fa56 	bl	8012486 <memcpy>
	}
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fea:	f001 fddf 	bl	8007bac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ff4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ff6:	e011      	b.n	800601c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3324      	adds	r3, #36	; 0x24
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fda5 	bl	8006b54 <xTaskRemoveFromEventList>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006010:	f000 fe82 	bl	8006d18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	3b01      	subs	r3, #1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800601c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006020:	2b00      	cmp	r3, #0
 8006022:	dce9      	bgt.n	8005ff8 <prvUnlockQueue+0x16>
 8006024:	e000      	b.n	8006028 <prvUnlockQueue+0x46>
					break;
 8006026:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	22ff      	movs	r2, #255	; 0xff
 800602c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006030:	f001 fdf0 	bl	8007c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006034:	f001 fdba 	bl	8007bac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800603e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006040:	e011      	b.n	8006066 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d012      	beq.n	8006070 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3310      	adds	r3, #16
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fd80 	bl	8006b54 <xTaskRemoveFromEventList>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800605a:	f000 fe5d 	bl	8006d18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	3b01      	subs	r3, #1
 8006062:	b2db      	uxtb	r3, r3
 8006064:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	dce9      	bgt.n	8006042 <prvUnlockQueue+0x60>
 800606e:	e000      	b.n	8006072 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006070:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800607a:	f001 fdcb 	bl	8007c14 <vPortExitCritical>
}
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800608e:	f001 fd8d 	bl	8007bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800609a:	2301      	movs	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e001      	b.n	80060a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060a4:	f001 fdb6 	bl	8007c14 <vPortExitCritical>

	return xReturn;
 80060a8:	68fb      	ldr	r3, [r7, #12]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060ba:	f001 fd77 	bl	8007bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d102      	bne.n	80060d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e001      	b.n	80060d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060d4:	f001 fd9e 	bl	8007c14 <vPortExitCritical>

	return xReturn;
 80060d8:	68fb      	ldr	r3, [r7, #12]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e014      	b.n	800611e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060f4:	4a0f      	ldr	r2, [pc, #60]	; (8006134 <vQueueAddToRegistry+0x50>)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10b      	bne.n	8006118 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006100:	490c      	ldr	r1, [pc, #48]	; (8006134 <vQueueAddToRegistry+0x50>)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800610a:	4a0a      	ldr	r2, [pc, #40]	; (8006134 <vQueueAddToRegistry+0x50>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006116:	e006      	b.n	8006126 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b07      	cmp	r3, #7
 8006122:	d9e7      	bls.n	80060f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	200039dc 	.word	0x200039dc

08006138 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e016      	b.n	8006174 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006146:	4a10      	ldr	r2, [pc, #64]	; (8006188 <vQueueUnregisterQueue+0x50>)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4413      	add	r3, r2
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d10b      	bne.n	800616e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006156:	4a0c      	ldr	r2, [pc, #48]	; (8006188 <vQueueUnregisterQueue+0x50>)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2100      	movs	r1, #0
 800615c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006160:	4a09      	ldr	r2, [pc, #36]	; (8006188 <vQueueUnregisterQueue+0x50>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4413      	add	r3, r2
 8006168:	2200      	movs	r2, #0
 800616a:	605a      	str	r2, [r3, #4]
				break;
 800616c:	e006      	b.n	800617c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b07      	cmp	r3, #7
 8006178:	d9e5      	bls.n	8006146 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	200039dc 	.word	0x200039dc

0800618c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800619c:	f001 fd06 	bl	8007bac <vPortEnterCritical>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a6:	b25b      	sxtb	r3, r3
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d103      	bne.n	80061b6 <vQueueWaitForMessageRestricted+0x2a>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061bc:	b25b      	sxtb	r3, r3
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d103      	bne.n	80061cc <vQueueWaitForMessageRestricted+0x40>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061cc:	f001 fd22 	bl	8007c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	3324      	adds	r3, #36	; 0x24
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fc89 	bl	8006af8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061e6:	6978      	ldr	r0, [r7, #20]
 80061e8:	f7ff fefb 	bl	8005fe2 <prvUnlockQueue>
	}
 80061ec:	bf00      	nop
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08e      	sub	sp, #56	; 0x38
 80061f8:	af04      	add	r7, sp, #16
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10c      	bne.n	8006222 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	b672      	cpsid	i
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	b662      	cpsie	i
 800621c:	623b      	str	r3, [r7, #32]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10c      	bne.n	8006242 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	b672      	cpsid	i
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	b662      	cpsie	i
 800623c:	61fb      	str	r3, [r7, #28]
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006242:	23bc      	movs	r3, #188	; 0xbc
 8006244:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2bbc      	cmp	r3, #188	; 0xbc
 800624a:	d00c      	beq.n	8006266 <xTaskCreateStatic+0x72>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	b672      	cpsid	i
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	b662      	cpsie	i
 8006260:	61bb      	str	r3, [r7, #24]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006266:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01e      	beq.n	80062ac <xTaskCreateStatic+0xb8>
 800626e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01b      	beq.n	80062ac <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800627c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	2202      	movs	r2, #2
 8006282:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006286:	2300      	movs	r3, #0
 8006288:	9303      	str	r3, [sp, #12]
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	9302      	str	r3, [sp, #8]
 800628e:	f107 0314 	add.w	r3, r7, #20
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f850 	bl	8006344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062a6:	f000 f8f5 	bl	8006494 <prvAddNewTaskToReadyList>
 80062aa:	e001      	b.n	80062b0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062b0:	697b      	ldr	r3, [r7, #20]
	}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3728      	adds	r7, #40	; 0x28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b08c      	sub	sp, #48	; 0x30
 80062be:	af04      	add	r7, sp, #16
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 fd98 	bl	8007e04 <pvPortMalloc>
 80062d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00e      	beq.n	80062fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062dc:	20bc      	movs	r0, #188	; 0xbc
 80062de:	f001 fd91 	bl	8007e04 <pvPortMalloc>
 80062e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
 80062f0:	e005      	b.n	80062fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062f2:	6978      	ldr	r0, [r7, #20]
 80062f4:	f001 fe50 	bl	8007f98 <vPortFree>
 80062f8:	e001      	b.n	80062fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d017      	beq.n	8006334 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	2300      	movs	r3, #0
 8006310:	9303      	str	r3, [sp, #12]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	9302      	str	r3, [sp, #8]
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 f80e 	bl	8006344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006328:	69f8      	ldr	r0, [r7, #28]
 800632a:	f000 f8b3 	bl	8006494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800632e:	2301      	movs	r3, #1
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e002      	b.n	800633a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006334:	f04f 33ff 	mov.w	r3, #4294967295
 8006338:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800633a:	69bb      	ldr	r3, [r7, #24]
	}
 800633c:	4618      	mov	r0, r3
 800633e:	3720      	adds	r7, #32
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	461a      	mov	r2, r3
 800635c:	21a5      	movs	r1, #165	; 0xa5
 800635e:	f00c f8a0 	bl	80124a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800636c:	440b      	add	r3, r1
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00c      	beq.n	80063a0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	b672      	cpsid	i
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	b662      	cpsie	i
 800639a:	617b      	str	r3, [r7, #20]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d01f      	beq.n	80063e6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	e012      	b.n	80063d2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	7819      	ldrb	r1, [r3, #0]
 80063b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	3334      	adds	r3, #52	; 0x34
 80063bc:	460a      	mov	r2, r1
 80063be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d006      	beq.n	80063da <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	3301      	adds	r3, #1
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	2b0f      	cmp	r3, #15
 80063d6:	d9e9      	bls.n	80063ac <prvInitialiseNewTask+0x68>
 80063d8:	e000      	b.n	80063dc <prvInitialiseNewTask+0x98>
			{
				break;
 80063da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063e4:	e003      	b.n	80063ee <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	2b37      	cmp	r3, #55	; 0x37
 80063f2:	d901      	bls.n	80063f8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063f4:	2337      	movs	r3, #55	; 0x37
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006402:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	2200      	movs	r2, #0
 8006408:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	3304      	adds	r3, #4
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fd4c 	bl	8004eac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	3318      	adds	r3, #24
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fd47 	bl	8004eac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006422:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006432:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	2200      	movs	r2, #0
 8006438:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	2200      	movs	r2, #0
 8006440:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	3354      	adds	r3, #84	; 0x54
 8006448:	2260      	movs	r2, #96	; 0x60
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f00c f828 	bl	80124a2 <memset>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	4a0c      	ldr	r2, [pc, #48]	; (8006488 <prvInitialiseNewTask+0x144>)
 8006456:	659a      	str	r2, [r3, #88]	; 0x58
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	4a0c      	ldr	r2, [pc, #48]	; (800648c <prvInitialiseNewTask+0x148>)
 800645c:	65da      	str	r2, [r3, #92]	; 0x5c
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	4a0b      	ldr	r2, [pc, #44]	; (8006490 <prvInitialiseNewTask+0x14c>)
 8006462:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	69b8      	ldr	r0, [r7, #24]
 800646a:	f001 fa8f 	bl	800798c <pxPortInitialiseStack>
 800646e:	4602      	mov	r2, r0
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800647e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006480:	bf00      	nop
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	080160dc 	.word	0x080160dc
 800648c:	080160fc 	.word	0x080160fc
 8006490:	080160bc 	.word	0x080160bc

08006494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800649c:	f001 fb86 	bl	8007bac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064a0:	4b2d      	ldr	r3, [pc, #180]	; (8006558 <prvAddNewTaskToReadyList+0xc4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	4a2c      	ldr	r2, [pc, #176]	; (8006558 <prvAddNewTaskToReadyList+0xc4>)
 80064a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064aa:	4b2c      	ldr	r3, [pc, #176]	; (800655c <prvAddNewTaskToReadyList+0xc8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d109      	bne.n	80064c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064b2:	4a2a      	ldr	r2, [pc, #168]	; (800655c <prvAddNewTaskToReadyList+0xc8>)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064b8:	4b27      	ldr	r3, [pc, #156]	; (8006558 <prvAddNewTaskToReadyList+0xc4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d110      	bne.n	80064e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064c0:	f000 fc4e 	bl	8006d60 <prvInitialiseTaskLists>
 80064c4:	e00d      	b.n	80064e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064c6:	4b26      	ldr	r3, [pc, #152]	; (8006560 <prvAddNewTaskToReadyList+0xcc>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064ce:	4b23      	ldr	r3, [pc, #140]	; (800655c <prvAddNewTaskToReadyList+0xc8>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	429a      	cmp	r2, r3
 80064da:	d802      	bhi.n	80064e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064dc:	4a1f      	ldr	r2, [pc, #124]	; (800655c <prvAddNewTaskToReadyList+0xc8>)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064e2:	4b20      	ldr	r3, [pc, #128]	; (8006564 <prvAddNewTaskToReadyList+0xd0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	4a1e      	ldr	r2, [pc, #120]	; (8006564 <prvAddNewTaskToReadyList+0xd0>)
 80064ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064ec:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <prvAddNewTaskToReadyList+0xd0>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <prvAddNewTaskToReadyList+0xd4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d903      	bls.n	8006508 <prvAddNewTaskToReadyList+0x74>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	4a18      	ldr	r2, [pc, #96]	; (8006568 <prvAddNewTaskToReadyList+0xd4>)
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650c:	4613      	mov	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4a15      	ldr	r2, [pc, #84]	; (800656c <prvAddNewTaskToReadyList+0xd8>)
 8006516:	441a      	add	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f7fe fcd1 	bl	8004ec6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006524:	f001 fb76 	bl	8007c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006528:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <prvAddNewTaskToReadyList+0xcc>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00e      	beq.n	800654e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <prvAddNewTaskToReadyList+0xc8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	429a      	cmp	r2, r3
 800653c:	d207      	bcs.n	800654e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800653e:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <prvAddNewTaskToReadyList+0xdc>)
 8006540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20003ef0 	.word	0x20003ef0
 800655c:	20003a1c 	.word	0x20003a1c
 8006560:	20003efc 	.word	0x20003efc
 8006564:	20003f0c 	.word	0x20003f0c
 8006568:	20003ef8 	.word	0x20003ef8
 800656c:	20003a20 	.word	0x20003a20
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d019      	beq.n	80065ba <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006586:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <vTaskDelay+0x64>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00c      	beq.n	80065a8 <vTaskDelay+0x34>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	b672      	cpsid	i
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	b662      	cpsie	i
 80065a2:	60bb      	str	r3, [r7, #8]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80065a8:	f000 f88e 	bl	80066c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065ac:	2100      	movs	r1, #0
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fe3c 	bl	800722c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065b4:	f000 f896 	bl	80066e4 <xTaskResumeAll>
 80065b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d107      	bne.n	80065d0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <vTaskDelay+0x68>)
 80065c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20003f18 	.word	0x20003f18
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065ee:	463a      	mov	r2, r7
 80065f0:	1d39      	adds	r1, r7, #4
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fc04 	bl	8004e04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	9202      	str	r2, [sp, #8]
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	2300      	movs	r3, #0
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	460a      	mov	r2, r1
 800660e:	4926      	ldr	r1, [pc, #152]	; (80066a8 <vTaskStartScheduler+0xc8>)
 8006610:	4826      	ldr	r0, [pc, #152]	; (80066ac <vTaskStartScheduler+0xcc>)
 8006612:	f7ff fdef 	bl	80061f4 <xTaskCreateStatic>
 8006616:	4603      	mov	r3, r0
 8006618:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <vTaskStartScheduler+0xd0>)
 800661a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800661c:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <vTaskStartScheduler+0xd0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006624:	2301      	movs	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e001      	b.n	800662e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d102      	bne.n	800663a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006634:	f000 fe4e 	bl	80072d4 <xTimerCreateTimerTask>
 8006638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d11d      	bne.n	800667c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	b672      	cpsid	i
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	b662      	cpsie	i
 8006654:	613b      	str	r3, [r7, #16]
}
 8006656:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006658:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <vTaskStartScheduler+0xd4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3354      	adds	r3, #84	; 0x54
 800665e:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <vTaskStartScheduler+0xd8>)
 8006660:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006662:	4b16      	ldr	r3, [pc, #88]	; (80066bc <vTaskStartScheduler+0xdc>)
 8006664:	f04f 32ff 	mov.w	r2, #4294967295
 8006668:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800666a:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <vTaskStartScheduler+0xe0>)
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006670:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <vTaskStartScheduler+0xe4>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006676:	f001 fa1b 	bl	8007ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800667a:	e010      	b.n	800669e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d10c      	bne.n	800669e <vTaskStartScheduler+0xbe>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	b672      	cpsid	i
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	b662      	cpsie	i
 8006698:	60fb      	str	r3, [r7, #12]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <vTaskStartScheduler+0xbc>
}
 800669e:	bf00      	nop
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	080134bc 	.word	0x080134bc
 80066ac:	08006d31 	.word	0x08006d31
 80066b0:	20003f14 	.word	0x20003f14
 80066b4:	20003a1c 	.word	0x20003a1c
 80066b8:	2000001c 	.word	0x2000001c
 80066bc:	20003f10 	.word	0x20003f10
 80066c0:	20003efc 	.word	0x20003efc
 80066c4:	20003ef4 	.word	0x20003ef4

080066c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066cc:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <vTaskSuspendAll+0x18>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	4a03      	ldr	r2, [pc, #12]	; (80066e0 <vTaskSuspendAll+0x18>)
 80066d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	20003f18 	.word	0x20003f18

080066e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066f2:	4b43      	ldr	r3, [pc, #268]	; (8006800 <xTaskResumeAll+0x11c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10c      	bne.n	8006714 <xTaskResumeAll+0x30>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	b672      	cpsid	i
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	b662      	cpsie	i
 800670e:	603b      	str	r3, [r7, #0]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006714:	f001 fa4a 	bl	8007bac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006718:	4b39      	ldr	r3, [pc, #228]	; (8006800 <xTaskResumeAll+0x11c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	4a38      	ldr	r2, [pc, #224]	; (8006800 <xTaskResumeAll+0x11c>)
 8006720:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006722:	4b37      	ldr	r3, [pc, #220]	; (8006800 <xTaskResumeAll+0x11c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d162      	bne.n	80067f0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800672a:	4b36      	ldr	r3, [pc, #216]	; (8006804 <xTaskResumeAll+0x120>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d05e      	beq.n	80067f0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006732:	e02f      	b.n	8006794 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006734:	4b34      	ldr	r3, [pc, #208]	; (8006808 <xTaskResumeAll+0x124>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3318      	adds	r3, #24
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fc1d 	bl	8004f80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3304      	adds	r3, #4
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fc18 	bl	8004f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	4b2d      	ldr	r3, [pc, #180]	; (800680c <xTaskResumeAll+0x128>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d903      	bls.n	8006764 <xTaskResumeAll+0x80>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	4a2a      	ldr	r2, [pc, #168]	; (800680c <xTaskResumeAll+0x128>)
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4a27      	ldr	r2, [pc, #156]	; (8006810 <xTaskResumeAll+0x12c>)
 8006772:	441a      	add	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3304      	adds	r3, #4
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f7fe fba3 	bl	8004ec6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006784:	4b23      	ldr	r3, [pc, #140]	; (8006814 <xTaskResumeAll+0x130>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	429a      	cmp	r2, r3
 800678c:	d302      	bcc.n	8006794 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800678e:	4b22      	ldr	r3, [pc, #136]	; (8006818 <xTaskResumeAll+0x134>)
 8006790:	2201      	movs	r2, #1
 8006792:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006794:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <xTaskResumeAll+0x124>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1cb      	bne.n	8006734 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067a2:	f000 fb81 	bl	8006ea8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80067a6:	4b1d      	ldr	r3, [pc, #116]	; (800681c <xTaskResumeAll+0x138>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d010      	beq.n	80067d4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067b2:	f000 f859 	bl	8006868 <xTaskIncrementTick>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <xTaskResumeAll+0x134>)
 80067be:	2201      	movs	r2, #1
 80067c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f1      	bne.n	80067b2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <xTaskResumeAll+0x138>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067d4:	4b10      	ldr	r3, [pc, #64]	; (8006818 <xTaskResumeAll+0x134>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <xTaskResumeAll+0x13c>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067f0:	f001 fa10 	bl	8007c14 <vPortExitCritical>

	return xAlreadyYielded;
 80067f4:	68bb      	ldr	r3, [r7, #8]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20003f18 	.word	0x20003f18
 8006804:	20003ef0 	.word	0x20003ef0
 8006808:	20003eb0 	.word	0x20003eb0
 800680c:	20003ef8 	.word	0x20003ef8
 8006810:	20003a20 	.word	0x20003a20
 8006814:	20003a1c 	.word	0x20003a1c
 8006818:	20003f04 	.word	0x20003f04
 800681c:	20003f00 	.word	0x20003f00
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <xTaskGetTickCount+0x1c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006830:	687b      	ldr	r3, [r7, #4]
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20003ef4 	.word	0x20003ef4

08006844 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800684a:	f001 fa97 	bl	8007d7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800684e:	2300      	movs	r3, #0
 8006850:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006852:	4b04      	ldr	r3, [pc, #16]	; (8006864 <xTaskGetTickCountFromISR+0x20>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006858:	683b      	ldr	r3, [r7, #0]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20003ef4 	.word	0x20003ef4

08006868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006872:	4b50      	ldr	r3, [pc, #320]	; (80069b4 <xTaskIncrementTick+0x14c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 808b 	bne.w	8006992 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800687c:	4b4e      	ldr	r3, [pc, #312]	; (80069b8 <xTaskIncrementTick+0x150>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006884:	4a4c      	ldr	r2, [pc, #304]	; (80069b8 <xTaskIncrementTick+0x150>)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d122      	bne.n	80068d6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006890:	4b4a      	ldr	r3, [pc, #296]	; (80069bc <xTaskIncrementTick+0x154>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	b672      	cpsid	i
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	b662      	cpsie	i
 80068ae:	603b      	str	r3, [r7, #0]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <xTaskIncrementTick+0x4a>
 80068b4:	4b41      	ldr	r3, [pc, #260]	; (80069bc <xTaskIncrementTick+0x154>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	4b41      	ldr	r3, [pc, #260]	; (80069c0 <xTaskIncrementTick+0x158>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a3f      	ldr	r2, [pc, #252]	; (80069bc <xTaskIncrementTick+0x154>)
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	4a3f      	ldr	r2, [pc, #252]	; (80069c0 <xTaskIncrementTick+0x158>)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	4b3e      	ldr	r3, [pc, #248]	; (80069c4 <xTaskIncrementTick+0x15c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	4a3d      	ldr	r2, [pc, #244]	; (80069c4 <xTaskIncrementTick+0x15c>)
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	f000 fae9 	bl	8006ea8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068d6:	4b3c      	ldr	r3, [pc, #240]	; (80069c8 <xTaskIncrementTick+0x160>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d349      	bcc.n	8006974 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068e0:	4b36      	ldr	r3, [pc, #216]	; (80069bc <xTaskIncrementTick+0x154>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d104      	bne.n	80068f4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ea:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <xTaskIncrementTick+0x160>)
 80068ec:	f04f 32ff 	mov.w	r2, #4294967295
 80068f0:	601a      	str	r2, [r3, #0]
					break;
 80068f2:	e03f      	b.n	8006974 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f4:	4b31      	ldr	r3, [pc, #196]	; (80069bc <xTaskIncrementTick+0x154>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	d203      	bcs.n	8006914 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800690c:	4a2e      	ldr	r2, [pc, #184]	; (80069c8 <xTaskIncrementTick+0x160>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006912:	e02f      	b.n	8006974 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	3304      	adds	r3, #4
 8006918:	4618      	mov	r0, r3
 800691a:	f7fe fb31 	bl	8004f80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	3318      	adds	r3, #24
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe fb28 	bl	8004f80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	4b25      	ldr	r3, [pc, #148]	; (80069cc <xTaskIncrementTick+0x164>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d903      	bls.n	8006944 <xTaskIncrementTick+0xdc>
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	4a22      	ldr	r2, [pc, #136]	; (80069cc <xTaskIncrementTick+0x164>)
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <xTaskIncrementTick+0x168>)
 8006952:	441a      	add	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7fe fab3 	bl	8004ec6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4b1b      	ldr	r3, [pc, #108]	; (80069d4 <xTaskIncrementTick+0x16c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	429a      	cmp	r2, r3
 800696c:	d3b8      	bcc.n	80068e0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800696e:	2301      	movs	r3, #1
 8006970:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006972:	e7b5      	b.n	80068e0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006974:	4b17      	ldr	r3, [pc, #92]	; (80069d4 <xTaskIncrementTick+0x16c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	4915      	ldr	r1, [pc, #84]	; (80069d0 <xTaskIncrementTick+0x168>)
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d907      	bls.n	800699c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e004      	b.n	800699c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006992:	4b11      	ldr	r3, [pc, #68]	; (80069d8 <xTaskIncrementTick+0x170>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a0f      	ldr	r2, [pc, #60]	; (80069d8 <xTaskIncrementTick+0x170>)
 800699a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <xTaskIncrementTick+0x174>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80069a8:	697b      	ldr	r3, [r7, #20]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20003f18 	.word	0x20003f18
 80069b8:	20003ef4 	.word	0x20003ef4
 80069bc:	20003ea8 	.word	0x20003ea8
 80069c0:	20003eac 	.word	0x20003eac
 80069c4:	20003f08 	.word	0x20003f08
 80069c8:	20003f10 	.word	0x20003f10
 80069cc:	20003ef8 	.word	0x20003ef8
 80069d0:	20003a20 	.word	0x20003a20
 80069d4:	20003a1c 	.word	0x20003a1c
 80069d8:	20003f00 	.word	0x20003f00
 80069dc:	20003f04 	.word	0x20003f04

080069e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069e6:	4b2b      	ldr	r3, [pc, #172]	; (8006a94 <vTaskSwitchContext+0xb4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069ee:	4b2a      	ldr	r3, [pc, #168]	; (8006a98 <vTaskSwitchContext+0xb8>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069f4:	e048      	b.n	8006a88 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80069f6:	4b28      	ldr	r3, [pc, #160]	; (8006a98 <vTaskSwitchContext+0xb8>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069fc:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <vTaskSwitchContext+0xbc>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e012      	b.n	8006a2a <vTaskSwitchContext+0x4a>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10c      	bne.n	8006a24 <vTaskSwitchContext+0x44>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	b672      	cpsid	i
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	b662      	cpsie	i
 8006a1e:	607b      	str	r3, [r7, #4]
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <vTaskSwitchContext+0x42>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	491d      	ldr	r1, [pc, #116]	; (8006aa0 <vTaskSwitchContext+0xc0>)
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0e2      	beq.n	8006a04 <vTaskSwitchContext+0x24>
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <vTaskSwitchContext+0xc0>)
 8006a4a:	4413      	add	r3, r2
 8006a4c:	60bb      	str	r3, [r7, #8]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	605a      	str	r2, [r3, #4]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d104      	bne.n	8006a6e <vTaskSwitchContext+0x8e>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	605a      	str	r2, [r3, #4]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4a0b      	ldr	r2, [pc, #44]	; (8006aa4 <vTaskSwitchContext+0xc4>)
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	4a08      	ldr	r2, [pc, #32]	; (8006a9c <vTaskSwitchContext+0xbc>)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <vTaskSwitchContext+0xc4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3354      	adds	r3, #84	; 0x54
 8006a84:	4a08      	ldr	r2, [pc, #32]	; (8006aa8 <vTaskSwitchContext+0xc8>)
 8006a86:	6013      	str	r3, [r2, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	20003f18 	.word	0x20003f18
 8006a98:	20003f04 	.word	0x20003f04
 8006a9c:	20003ef8 	.word	0x20003ef8
 8006aa0:	20003a20 	.word	0x20003a20
 8006aa4:	20003a1c 	.word	0x20003a1c
 8006aa8:	2000001c 	.word	0x2000001c

08006aac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10c      	bne.n	8006ad6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	b672      	cpsid	i
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	b662      	cpsie	i
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ad6:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <vTaskPlaceOnEventList+0x48>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3318      	adds	r3, #24
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fe fa15 	bl	8004f0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	6838      	ldr	r0, [r7, #0]
 8006ae8:	f000 fba0 	bl	800722c <prvAddCurrentTaskToDelayedList>
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20003a1c 	.word	0x20003a1c

08006af8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10c      	bne.n	8006b24 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	b672      	cpsid	i
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	b662      	cpsie	i
 8006b1e:	617b      	str	r3, [r7, #20]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <vTaskPlaceOnEventListRestricted+0x58>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7fe f9ca 	bl	8004ec6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006b38:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	68b8      	ldr	r0, [r7, #8]
 8006b42:	f000 fb73 	bl	800722c <prvAddCurrentTaskToDelayedList>
	}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20003a1c 	.word	0x20003a1c

08006b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10c      	bne.n	8006b84 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	b672      	cpsid	i
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	b662      	cpsie	i
 8006b7e:	60fb      	str	r3, [r7, #12]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	3318      	adds	r3, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe f9f9 	bl	8004f80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b8e:	4b1e      	ldr	r3, [pc, #120]	; (8006c08 <xTaskRemoveFromEventList+0xb4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d11d      	bne.n	8006bd2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe f9f0 	bl	8004f80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba4:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <xTaskRemoveFromEventList+0xb8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d903      	bls.n	8006bb4 <xTaskRemoveFromEventList+0x60>
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb0:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <xTaskRemoveFromEventList+0xb8>)
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4a13      	ldr	r2, [pc, #76]	; (8006c10 <xTaskRemoveFromEventList+0xbc>)
 8006bc2:	441a      	add	r2, r3
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f7fe f97b 	bl	8004ec6 <vListInsertEnd>
 8006bd0:	e005      	b.n	8006bde <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	480e      	ldr	r0, [pc, #56]	; (8006c14 <xTaskRemoveFromEventList+0xc0>)
 8006bda:	f7fe f974 	bl	8004ec6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <xTaskRemoveFromEventList+0xc4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d905      	bls.n	8006bf8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <xTaskRemoveFromEventList+0xc8>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	e001      	b.n	8006bfc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bfc:	697b      	ldr	r3, [r7, #20]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20003f18 	.word	0x20003f18
 8006c0c:	20003ef8 	.word	0x20003ef8
 8006c10:	20003a20 	.word	0x20003a20
 8006c14:	20003eb0 	.word	0x20003eb0
 8006c18:	20003a1c 	.word	0x20003a1c
 8006c1c:	20003f04 	.word	0x20003f04

08006c20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c28:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <vTaskInternalSetTimeOutState+0x24>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <vTaskInternalSetTimeOutState+0x28>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	605a      	str	r2, [r3, #4]
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	20003f08 	.word	0x20003f08
 8006c48:	20003ef4 	.word	0x20003ef4

08006c4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10c      	bne.n	8006c76 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	b672      	cpsid	i
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	b662      	cpsie	i
 8006c70:	613b      	str	r3, [r7, #16]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10c      	bne.n	8006c96 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	b672      	cpsid	i
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	b662      	cpsie	i
 8006c90:	60fb      	str	r3, [r7, #12]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006c96:	f000 ff89 	bl	8007bac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <xTaskCheckForTimeOut+0xc4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d102      	bne.n	8006cba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	e023      	b.n	8006d02 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b15      	ldr	r3, [pc, #84]	; (8006d14 <xTaskCheckForTimeOut+0xc8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d007      	beq.n	8006cd6 <xTaskCheckForTimeOut+0x8a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d302      	bcc.n	8006cd6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	e015      	b.n	8006d02 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d20b      	bcs.n	8006cf8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	1ad2      	subs	r2, r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ff97 	bl	8006c20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	e004      	b.n	8006d02 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d02:	f000 ff87 	bl	8007c14 <vPortExitCritical>

	return xReturn;
 8006d06:	69fb      	ldr	r3, [r7, #28]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20003ef4 	.word	0x20003ef4
 8006d14:	20003f08 	.word	0x20003f08

08006d18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <vTaskMissedYield+0x14>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
}
 8006d22:	bf00      	nop
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	20003f04 	.word	0x20003f04

08006d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d38:	f000 f852 	bl	8006de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <prvIdleTask+0x28>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d9f9      	bls.n	8006d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <prvIdleTask+0x2c>)
 8006d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d54:	e7f0      	b.n	8006d38 <prvIdleTask+0x8>
 8006d56:	bf00      	nop
 8006d58:	20003a20 	.word	0x20003a20
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d66:	2300      	movs	r3, #0
 8006d68:	607b      	str	r3, [r7, #4]
 8006d6a:	e00c      	b.n	8006d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4a12      	ldr	r2, [pc, #72]	; (8006dc0 <prvInitialiseTaskLists+0x60>)
 8006d78:	4413      	add	r3, r2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe f876 	bl	8004e6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3301      	adds	r3, #1
 8006d84:	607b      	str	r3, [r7, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b37      	cmp	r3, #55	; 0x37
 8006d8a:	d9ef      	bls.n	8006d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d8c:	480d      	ldr	r0, [pc, #52]	; (8006dc4 <prvInitialiseTaskLists+0x64>)
 8006d8e:	f7fe f86d 	bl	8004e6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d92:	480d      	ldr	r0, [pc, #52]	; (8006dc8 <prvInitialiseTaskLists+0x68>)
 8006d94:	f7fe f86a 	bl	8004e6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d98:	480c      	ldr	r0, [pc, #48]	; (8006dcc <prvInitialiseTaskLists+0x6c>)
 8006d9a:	f7fe f867 	bl	8004e6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d9e:	480c      	ldr	r0, [pc, #48]	; (8006dd0 <prvInitialiseTaskLists+0x70>)
 8006da0:	f7fe f864 	bl	8004e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006da4:	480b      	ldr	r0, [pc, #44]	; (8006dd4 <prvInitialiseTaskLists+0x74>)
 8006da6:	f7fe f861 	bl	8004e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006daa:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <prvInitialiseTaskLists+0x78>)
 8006dac:	4a05      	ldr	r2, [pc, #20]	; (8006dc4 <prvInitialiseTaskLists+0x64>)
 8006dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <prvInitialiseTaskLists+0x7c>)
 8006db2:	4a05      	ldr	r2, [pc, #20]	; (8006dc8 <prvInitialiseTaskLists+0x68>)
 8006db4:	601a      	str	r2, [r3, #0]
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20003a20 	.word	0x20003a20
 8006dc4:	20003e80 	.word	0x20003e80
 8006dc8:	20003e94 	.word	0x20003e94
 8006dcc:	20003eb0 	.word	0x20003eb0
 8006dd0:	20003ec4 	.word	0x20003ec4
 8006dd4:	20003edc 	.word	0x20003edc
 8006dd8:	20003ea8 	.word	0x20003ea8
 8006ddc:	20003eac 	.word	0x20003eac

08006de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006de6:	e019      	b.n	8006e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006de8:	f000 fee0 	bl	8007bac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dec:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <prvCheckTasksWaitingTermination+0x50>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe f8c1 	bl	8004f80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <prvCheckTasksWaitingTermination+0x54>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	4a0b      	ldr	r2, [pc, #44]	; (8006e34 <prvCheckTasksWaitingTermination+0x54>)
 8006e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <prvCheckTasksWaitingTermination+0x58>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	4a0a      	ldr	r2, [pc, #40]	; (8006e38 <prvCheckTasksWaitingTermination+0x58>)
 8006e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e12:	f000 feff 	bl	8007c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f810 	bl	8006e3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e1c:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <prvCheckTasksWaitingTermination+0x58>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e1      	bne.n	8006de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20003ec4 	.word	0x20003ec4
 8006e34:	20003ef0 	.word	0x20003ef0
 8006e38:	20003ed8 	.word	0x20003ed8

08006e3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3354      	adds	r3, #84	; 0x54
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f00b fc2b 	bl	80126a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d108      	bne.n	8006e6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 f89b 	bl	8007f98 <vPortFree>
				vPortFree( pxTCB );
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 f898 	bl	8007f98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e68:	e01a      	b.n	8006ea0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d103      	bne.n	8006e7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 f88f 	bl	8007f98 <vPortFree>
	}
 8006e7a:	e011      	b.n	8006ea0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d00c      	beq.n	8006ea0 <prvDeleteTCB+0x64>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	b672      	cpsid	i
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	b662      	cpsie	i
 8006e9a:	60fb      	str	r3, [r7, #12]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <prvDeleteTCB+0x62>
	}
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eae:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <prvResetNextTaskUnblockTime+0x38>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006eb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <prvResetNextTaskUnblockTime+0x3c>)
 8006eba:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ec0:	e008      	b.n	8006ed4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <prvResetNextTaskUnblockTime+0x38>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4a04      	ldr	r2, [pc, #16]	; (8006ee4 <prvResetNextTaskUnblockTime+0x3c>)
 8006ed2:	6013      	str	r3, [r2, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	20003ea8 	.word	0x20003ea8
 8006ee4:	20003f10 	.word	0x20003f10

08006ee8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006eee:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <xTaskGetCurrentTaskHandle+0x1c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006ef4:	687b      	ldr	r3, [r7, #4]
	}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20003a1c 	.word	0x20003a1c

08006f08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f0e:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <xTaskGetSchedulerState+0x34>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f16:	2301      	movs	r3, #1
 8006f18:	607b      	str	r3, [r7, #4]
 8006f1a:	e008      	b.n	8006f2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f1c:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <xTaskGetSchedulerState+0x38>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f24:	2302      	movs	r3, #2
 8006f26:	607b      	str	r3, [r7, #4]
 8006f28:	e001      	b.n	8006f2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f2e:	687b      	ldr	r3, [r7, #4]
	}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20003efc 	.word	0x20003efc
 8006f40:	20003f18 	.word	0x20003f18

08006f44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d051      	beq.n	8006ffe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5e:	4b2a      	ldr	r3, [pc, #168]	; (8007008 <xTaskPriorityInherit+0xc4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d241      	bcs.n	8006fec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	db06      	blt.n	8006f7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f70:	4b25      	ldr	r3, [pc, #148]	; (8007008 <xTaskPriorityInherit+0xc4>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6959      	ldr	r1, [r3, #20]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	; (800700c <xTaskPriorityInherit+0xc8>)
 8006f90:	4413      	add	r3, r2
 8006f92:	4299      	cmp	r1, r3
 8006f94:	d122      	bne.n	8006fdc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fd fff0 	bl	8004f80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fa0:	4b19      	ldr	r3, [pc, #100]	; (8007008 <xTaskPriorityInherit+0xc4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fae:	4b18      	ldr	r3, [pc, #96]	; (8007010 <xTaskPriorityInherit+0xcc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d903      	bls.n	8006fbe <xTaskPriorityInherit+0x7a>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	4a15      	ldr	r2, [pc, #84]	; (8007010 <xTaskPriorityInherit+0xcc>)
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4a10      	ldr	r2, [pc, #64]	; (800700c <xTaskPriorityInherit+0xc8>)
 8006fcc:	441a      	add	r2, r3
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f7fd ff76 	bl	8004ec6 <vListInsertEnd>
 8006fda:	e004      	b.n	8006fe6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <xTaskPriorityInherit+0xc4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e008      	b.n	8006ffe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <xTaskPriorityInherit+0xc4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d201      	bcs.n	8006ffe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
	}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	20003a1c 	.word	0x20003a1c
 800700c:	20003a20 	.word	0x20003a20
 8007010:	20003ef8 	.word	0x20003ef8

08007014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d05a      	beq.n	80070e0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800702a:	4b30      	ldr	r3, [pc, #192]	; (80070ec <xTaskPriorityDisinherit+0xd8>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	429a      	cmp	r2, r3
 8007032:	d00c      	beq.n	800704e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	b672      	cpsid	i
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	b662      	cpsie	i
 8007048:	60fb      	str	r3, [r7, #12]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10c      	bne.n	8007070 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	b672      	cpsid	i
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	b662      	cpsie	i
 800706a:	60bb      	str	r3, [r7, #8]
}
 800706c:	bf00      	nop
 800706e:	e7fe      	b.n	800706e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007074:	1e5a      	subs	r2, r3, #1
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007082:	429a      	cmp	r2, r3
 8007084:	d02c      	beq.n	80070e0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	2b00      	cmp	r3, #0
 800708c:	d128      	bne.n	80070e0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	3304      	adds	r3, #4
 8007092:	4618      	mov	r0, r3
 8007094:	f7fd ff74 	bl	8004f80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <xTaskPriorityDisinherit+0xdc>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d903      	bls.n	80070c0 <xTaskPriorityDisinherit+0xac>
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	4a0c      	ldr	r2, [pc, #48]	; (80070f0 <xTaskPriorityDisinherit+0xdc>)
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4a09      	ldr	r2, [pc, #36]	; (80070f4 <xTaskPriorityDisinherit+0xe0>)
 80070ce:	441a      	add	r2, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f7fd fef5 	bl	8004ec6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070dc:	2301      	movs	r3, #1
 80070de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070e0:	697b      	ldr	r3, [r7, #20]
	}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20003a1c 	.word	0x20003a1c
 80070f0:	20003ef8 	.word	0x20003ef8
 80070f4:	20003a20 	.word	0x20003a20

080070f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007106:	2301      	movs	r3, #1
 8007108:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d06e      	beq.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10c      	bne.n	8007132 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	b672      	cpsid	i
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	b662      	cpsie	i
 800712c:	60fb      	str	r3, [r7, #12]
}
 800712e:	bf00      	nop
 8007130:	e7fe      	b.n	8007130 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d902      	bls.n	8007142 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	e002      	b.n	8007148 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007146:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	429a      	cmp	r2, r3
 8007150:	d04d      	beq.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	429a      	cmp	r2, r3
 800715a:	d148      	bne.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800715c:	4b26      	ldr	r3, [pc, #152]	; (80071f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	429a      	cmp	r2, r3
 8007164:	d10c      	bne.n	8007180 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	b672      	cpsid	i
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	b662      	cpsie	i
 800717a:	60bb      	str	r3, [r7, #8]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	db04      	blt.n	800719e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	6959      	ldr	r1, [r3, #20]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a13      	ldr	r2, [pc, #76]	; (80071fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80071ae:	4413      	add	r3, r2
 80071b0:	4299      	cmp	r1, r3
 80071b2:	d11c      	bne.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fd fee1 	bl	8004f80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d903      	bls.n	80071d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a07      	ldr	r2, [pc, #28]	; (80071fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80071e0:	441a      	add	r2, r3
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fd fe6c 	bl	8004ec6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071ee:	bf00      	nop
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20003a1c 	.word	0x20003a1c
 80071fc:	20003a20 	.word	0x20003a20
 8007200:	20003ef8 	.word	0x20003ef8

08007204 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007208:	4b07      	ldr	r3, [pc, #28]	; (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007216:	3201      	adds	r2, #1
 8007218:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800721a:	4b03      	ldr	r3, [pc, #12]	; (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 800721c:	681b      	ldr	r3, [r3, #0]
	}
 800721e:	4618      	mov	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	20003a1c 	.word	0x20003a1c

0800722c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007236:	4b21      	ldr	r3, [pc, #132]	; (80072bc <prvAddCurrentTaskToDelayedList+0x90>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800723c:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3304      	adds	r3, #4
 8007242:	4618      	mov	r0, r3
 8007244:	f7fd fe9c 	bl	8004f80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d10a      	bne.n	8007266 <prvAddCurrentTaskToDelayedList+0x3a>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007256:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3304      	adds	r3, #4
 800725c:	4619      	mov	r1, r3
 800725e:	4819      	ldr	r0, [pc, #100]	; (80072c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007260:	f7fd fe31 	bl	8004ec6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007264:	e026      	b.n	80072b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4413      	add	r3, r2
 800726c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800726e:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	429a      	cmp	r2, r3
 800727c:	d209      	bcs.n	8007292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800727e:	4b12      	ldr	r3, [pc, #72]	; (80072c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3304      	adds	r3, #4
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	f7fd fe3f 	bl	8004f0e <vListInsert>
}
 8007290:	e010      	b.n	80072b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007292:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f7fd fe35 	bl	8004f0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072a4:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d202      	bcs.n	80072b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072ae:	4a08      	ldr	r2, [pc, #32]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6013      	str	r3, [r2, #0]
}
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20003ef4 	.word	0x20003ef4
 80072c0:	20003a1c 	.word	0x20003a1c
 80072c4:	20003edc 	.word	0x20003edc
 80072c8:	20003eac 	.word	0x20003eac
 80072cc:	20003ea8 	.word	0x20003ea8
 80072d0:	20003f10 	.word	0x20003f10

080072d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08a      	sub	sp, #40	; 0x28
 80072d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072de:	f000 fb15 	bl	800790c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072e2:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <xTimerCreateTimerTask+0x84>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d021      	beq.n	800732e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072f2:	1d3a      	adds	r2, r7, #4
 80072f4:	f107 0108 	add.w	r1, r7, #8
 80072f8:	f107 030c 	add.w	r3, r7, #12
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fd fd9b 	bl	8004e38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	9202      	str	r2, [sp, #8]
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	2302      	movs	r3, #2
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	460a      	mov	r2, r1
 8007314:	4911      	ldr	r1, [pc, #68]	; (800735c <xTimerCreateTimerTask+0x88>)
 8007316:	4812      	ldr	r0, [pc, #72]	; (8007360 <xTimerCreateTimerTask+0x8c>)
 8007318:	f7fe ff6c 	bl	80061f4 <xTaskCreateStatic>
 800731c:	4603      	mov	r3, r0
 800731e:	4a11      	ldr	r2, [pc, #68]	; (8007364 <xTimerCreateTimerTask+0x90>)
 8007320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <xTimerCreateTimerTask+0x90>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800732a:	2301      	movs	r3, #1
 800732c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10c      	bne.n	800734e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	b672      	cpsid	i
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	b662      	cpsie	i
 8007348:	613b      	str	r3, [r7, #16]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800734e:	697b      	ldr	r3, [r7, #20]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20003f4c 	.word	0x20003f4c
 800735c:	080134c4 	.word	0x080134c4
 8007360:	080074a5 	.word	0x080074a5
 8007364:	20003f50 	.word	0x20003f50

08007368 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007376:	2300      	movs	r3, #0
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10c      	bne.n	800739a <xTimerGenericCommand+0x32>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	b672      	cpsid	i
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	b662      	cpsie	i
 8007394:	623b      	str	r3, [r7, #32]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800739a:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <xTimerGenericCommand+0x9c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d02a      	beq.n	80073f8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b05      	cmp	r3, #5
 80073b2:	dc18      	bgt.n	80073e6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073b4:	f7ff fda8 	bl	8006f08 <xTaskGetSchedulerState>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d109      	bne.n	80073d2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073be:	4b11      	ldr	r3, [pc, #68]	; (8007404 <xTimerGenericCommand+0x9c>)
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	f107 0110 	add.w	r1, r7, #16
 80073c6:	2300      	movs	r3, #0
 80073c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ca:	f7fe f881 	bl	80054d0 <xQueueGenericSend>
 80073ce:	6278      	str	r0, [r7, #36]	; 0x24
 80073d0:	e012      	b.n	80073f8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073d2:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <xTimerGenericCommand+0x9c>)
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	f107 0110 	add.w	r1, r7, #16
 80073da:	2300      	movs	r3, #0
 80073dc:	2200      	movs	r2, #0
 80073de:	f7fe f877 	bl	80054d0 <xQueueGenericSend>
 80073e2:	6278      	str	r0, [r7, #36]	; 0x24
 80073e4:	e008      	b.n	80073f8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <xTimerGenericCommand+0x9c>)
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	f107 0110 	add.w	r1, r7, #16
 80073ee:	2300      	movs	r3, #0
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	f7fe f973 	bl	80056dc <xQueueGenericSendFromISR>
 80073f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3728      	adds	r7, #40	; 0x28
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20003f4c 	.word	0x20003f4c

08007408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af02      	add	r7, sp, #8
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007412:	4b23      	ldr	r3, [pc, #140]	; (80074a0 <prvProcessExpiredTimer+0x98>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	3304      	adds	r3, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f7fd fdad 	bl	8004f80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d024      	beq.n	800747e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	699a      	ldr	r2, [r3, #24]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	18d1      	adds	r1, r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	6978      	ldr	r0, [r7, #20]
 8007442:	f000 f8d3 	bl	80075ec <prvInsertTimerInActiveList>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d021      	beq.n	8007490 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800744c:	2300      	movs	r3, #0
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	2300      	movs	r3, #0
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	2100      	movs	r1, #0
 8007456:	6978      	ldr	r0, [r7, #20]
 8007458:	f7ff ff86 	bl	8007368 <xTimerGenericCommand>
 800745c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d115      	bne.n	8007490 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	b672      	cpsid	i
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	b662      	cpsie	i
 8007478:	60fb      	str	r3, [r7, #12]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	b2da      	uxtb	r2, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	6978      	ldr	r0, [r7, #20]
 8007496:	4798      	blx	r3
}
 8007498:	bf00      	nop
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20003f44 	.word	0x20003f44

080074a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074ac:	f107 0308 	add.w	r3, r7, #8
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 f857 	bl	8007564 <prvGetNextExpireTime>
 80074b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4619      	mov	r1, r3
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f803 	bl	80074c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074c2:	f000 f8d5 	bl	8007670 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074c6:	e7f1      	b.n	80074ac <prvTimerTask+0x8>

080074c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074d2:	f7ff f8f9 	bl	80066c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074d6:	f107 0308 	add.w	r3, r7, #8
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f866 	bl	80075ac <prvSampleTimeNow>
 80074e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d130      	bne.n	800754a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <prvProcessTimerOrBlockTask+0x3c>
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d806      	bhi.n	8007504 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074f6:	f7ff f8f5 	bl	80066e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074fa:	68f9      	ldr	r1, [r7, #12]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff ff83 	bl	8007408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007502:	e024      	b.n	800754e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800750a:	4b13      	ldr	r3, [pc, #76]	; (8007558 <prvProcessTimerOrBlockTask+0x90>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <prvProcessTimerOrBlockTask+0x50>
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <prvProcessTimerOrBlockTask+0x52>
 8007518:	2300      	movs	r3, #0
 800751a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <prvProcessTimerOrBlockTask+0x94>)
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	4619      	mov	r1, r3
 800752a:	f7fe fe2f 	bl	800618c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800752e:	f7ff f8d9 	bl	80066e4 <xTaskResumeAll>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007538:	4b09      	ldr	r3, [pc, #36]	; (8007560 <prvProcessTimerOrBlockTask+0x98>)
 800753a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	f3bf 8f6f 	isb	sy
}
 8007548:	e001      	b.n	800754e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800754a:	f7ff f8cb 	bl	80066e4 <xTaskResumeAll>
}
 800754e:	bf00      	nop
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20003f48 	.word	0x20003f48
 800755c:	20003f4c 	.word	0x20003f4c
 8007560:	e000ed04 	.word	0xe000ed04

08007564 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <prvGetNextExpireTime+0x44>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <prvGetNextExpireTime+0x16>
 8007576:	2201      	movs	r2, #1
 8007578:	e000      	b.n	800757c <prvGetNextExpireTime+0x18>
 800757a:	2200      	movs	r2, #0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d105      	bne.n	8007594 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007588:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <prvGetNextExpireTime+0x44>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e001      	b.n	8007598 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007598:	68fb      	ldr	r3, [r7, #12]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20003f44 	.word	0x20003f44

080075ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075b4:	f7ff f936 	bl	8006824 <xTaskGetTickCount>
 80075b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075ba:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <prvSampleTimeNow+0x3c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d205      	bcs.n	80075d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075c4:	f000 f93c 	bl	8007840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e002      	b.n	80075d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075d6:	4a04      	ldr	r2, [pc, #16]	; (80075e8 <prvSampleTimeNow+0x3c>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075dc:	68fb      	ldr	r3, [r7, #12]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20003f54 	.word	0x20003f54

080075ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	429a      	cmp	r2, r3
 8007610:	d812      	bhi.n	8007638 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	1ad2      	subs	r2, r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	429a      	cmp	r2, r3
 800761e:	d302      	bcc.n	8007626 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007620:	2301      	movs	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	e01b      	b.n	800765e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007626:	4b10      	ldr	r3, [pc, #64]	; (8007668 <prvInsertTimerInActiveList+0x7c>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3304      	adds	r3, #4
 800762e:	4619      	mov	r1, r3
 8007630:	4610      	mov	r0, r2
 8007632:	f7fd fc6c 	bl	8004f0e <vListInsert>
 8007636:	e012      	b.n	800765e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d206      	bcs.n	800764e <prvInsertTimerInActiveList+0x62>
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d302      	bcc.n	800764e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	e007      	b.n	800765e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800764e:	4b07      	ldr	r3, [pc, #28]	; (800766c <prvInsertTimerInActiveList+0x80>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7fd fc58 	bl	8004f0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800765e:	697b      	ldr	r3, [r7, #20]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20003f48 	.word	0x20003f48
 800766c:	20003f44 	.word	0x20003f44

08007670 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b08e      	sub	sp, #56	; 0x38
 8007674:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007676:	e0d0      	b.n	800781a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	da1a      	bge.n	80076b4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800767e:	1d3b      	adds	r3, r7, #4
 8007680:	3304      	adds	r3, #4
 8007682:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10c      	bne.n	80076a4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	b672      	cpsid	i
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	b662      	cpsie	i
 800769e:	61fb      	str	r3, [r7, #28]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076aa:	6850      	ldr	r0, [r2, #4]
 80076ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ae:	6892      	ldr	r2, [r2, #8]
 80076b0:	4611      	mov	r1, r2
 80076b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f2c0 80ae 	blt.w	8007818 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	3304      	adds	r3, #4
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fd fc57 	bl	8004f80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076d2:	463b      	mov	r3, r7
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff ff69 	bl	80075ac <prvSampleTimeNow>
 80076da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b09      	cmp	r3, #9
 80076e0:	f200 809b 	bhi.w	800781a <prvProcessReceivedCommands+0x1aa>
 80076e4:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <prvProcessReceivedCommands+0x7c>)
 80076e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ea:	bf00      	nop
 80076ec:	08007715 	.word	0x08007715
 80076f0:	08007715 	.word	0x08007715
 80076f4:	08007715 	.word	0x08007715
 80076f8:	0800778d 	.word	0x0800778d
 80076fc:	080077a1 	.word	0x080077a1
 8007700:	080077ef 	.word	0x080077ef
 8007704:	08007715 	.word	0x08007715
 8007708:	08007715 	.word	0x08007715
 800770c:	0800778d 	.word	0x0800778d
 8007710:	080077a1 	.word	0x080077a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	b2da      	uxtb	r2, r3
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	18d1      	adds	r1, r2, r3
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007734:	f7ff ff5a 	bl	80075ec <prvInsertTimerInActiveList>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d06d      	beq.n	800781a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007744:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d062      	beq.n	800781a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	441a      	add	r2, r3
 800775c:	2300      	movs	r3, #0
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	2300      	movs	r3, #0
 8007762:	2100      	movs	r1, #0
 8007764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007766:	f7ff fdff 	bl	8007368 <xTimerGenericCommand>
 800776a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d153      	bne.n	800781a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	b672      	cpsid	i
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	b662      	cpsie	i
 8007786:	61bb      	str	r3, [r7, #24]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007792:	f023 0301 	bic.w	r3, r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800779e:	e03c      	b.n	800781a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077a6:	f043 0301 	orr.w	r3, r3, #1
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10c      	bne.n	80077da <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	b672      	cpsid	i
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	b662      	cpsie	i
 80077d4:	617b      	str	r3, [r7, #20]
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	18d1      	adds	r1, r2, r3
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e8:	f7ff ff00 	bl	80075ec <prvInsertTimerInActiveList>
					break;
 80077ec:	e015      	b.n	800781a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80077fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077fe:	f000 fbcb 	bl	8007f98 <vPortFree>
 8007802:	e00a      	b.n	800781a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800780a:	f023 0301 	bic.w	r3, r3, #1
 800780e:	b2da      	uxtb	r2, r3
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007816:	e000      	b.n	800781a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007818:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800781a:	4b08      	ldr	r3, [pc, #32]	; (800783c <prvProcessReceivedCommands+0x1cc>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	1d39      	adds	r1, r7, #4
 8007820:	2200      	movs	r2, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe f890 	bl	8005948 <xQueueReceive>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	f47f af24 	bne.w	8007678 <prvProcessReceivedCommands+0x8>
	}
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3730      	adds	r7, #48	; 0x30
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20003f4c 	.word	0x20003f4c

08007840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007846:	e04a      	b.n	80078de <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007848:	4b2e      	ldr	r3, [pc, #184]	; (8007904 <prvSwitchTimerLists+0xc4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007852:	4b2c      	ldr	r3, [pc, #176]	; (8007904 <prvSwitchTimerLists+0xc4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3304      	adds	r3, #4
 8007860:	4618      	mov	r0, r3
 8007862:	f7fd fb8d 	bl	8004f80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d030      	beq.n	80078de <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	429a      	cmp	r2, r3
 800788c:	d90e      	bls.n	80078ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800789a:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <prvSwitchTimerLists+0xc4>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3304      	adds	r3, #4
 80078a2:	4619      	mov	r1, r3
 80078a4:	4610      	mov	r0, r2
 80078a6:	f7fd fb32 	bl	8004f0e <vListInsert>
 80078aa:	e018      	b.n	80078de <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078ac:	2300      	movs	r3, #0
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	2300      	movs	r3, #0
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	2100      	movs	r1, #0
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff fd56 	bl	8007368 <xTimerGenericCommand>
 80078bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10c      	bne.n	80078de <prvSwitchTimerLists+0x9e>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	b672      	cpsid	i
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	b662      	cpsie	i
 80078d8:	603b      	str	r3, [r7, #0]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <prvSwitchTimerLists+0xc4>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1af      	bne.n	8007848 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <prvSwitchTimerLists+0xc4>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078ee:	4b06      	ldr	r3, [pc, #24]	; (8007908 <prvSwitchTimerLists+0xc8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a04      	ldr	r2, [pc, #16]	; (8007904 <prvSwitchTimerLists+0xc4>)
 80078f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078f6:	4a04      	ldr	r2, [pc, #16]	; (8007908 <prvSwitchTimerLists+0xc8>)
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	6013      	str	r3, [r2, #0]
}
 80078fc:	bf00      	nop
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20003f44 	.word	0x20003f44
 8007908:	20003f48 	.word	0x20003f48

0800790c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007912:	f000 f94b 	bl	8007bac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007916:	4b15      	ldr	r3, [pc, #84]	; (800796c <prvCheckForValidListAndQueue+0x60>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d120      	bne.n	8007960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800791e:	4814      	ldr	r0, [pc, #80]	; (8007970 <prvCheckForValidListAndQueue+0x64>)
 8007920:	f7fd faa4 	bl	8004e6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007924:	4813      	ldr	r0, [pc, #76]	; (8007974 <prvCheckForValidListAndQueue+0x68>)
 8007926:	f7fd faa1 	bl	8004e6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800792a:	4b13      	ldr	r3, [pc, #76]	; (8007978 <prvCheckForValidListAndQueue+0x6c>)
 800792c:	4a10      	ldr	r2, [pc, #64]	; (8007970 <prvCheckForValidListAndQueue+0x64>)
 800792e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007930:	4b12      	ldr	r3, [pc, #72]	; (800797c <prvCheckForValidListAndQueue+0x70>)
 8007932:	4a10      	ldr	r2, [pc, #64]	; (8007974 <prvCheckForValidListAndQueue+0x68>)
 8007934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007936:	2300      	movs	r3, #0
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	4b11      	ldr	r3, [pc, #68]	; (8007980 <prvCheckForValidListAndQueue+0x74>)
 800793c:	4a11      	ldr	r2, [pc, #68]	; (8007984 <prvCheckForValidListAndQueue+0x78>)
 800793e:	2110      	movs	r1, #16
 8007940:	200a      	movs	r0, #10
 8007942:	f7fd fbb1 	bl	80050a8 <xQueueGenericCreateStatic>
 8007946:	4603      	mov	r3, r0
 8007948:	4a08      	ldr	r2, [pc, #32]	; (800796c <prvCheckForValidListAndQueue+0x60>)
 800794a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800794c:	4b07      	ldr	r3, [pc, #28]	; (800796c <prvCheckForValidListAndQueue+0x60>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007954:	4b05      	ldr	r3, [pc, #20]	; (800796c <prvCheckForValidListAndQueue+0x60>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	490b      	ldr	r1, [pc, #44]	; (8007988 <prvCheckForValidListAndQueue+0x7c>)
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe fbc2 	bl	80060e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007960:	f000 f958 	bl	8007c14 <vPortExitCritical>
}
 8007964:	bf00      	nop
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20003f4c 	.word	0x20003f4c
 8007970:	20003f1c 	.word	0x20003f1c
 8007974:	20003f30 	.word	0x20003f30
 8007978:	20003f44 	.word	0x20003f44
 800797c:	20003f48 	.word	0x20003f48
 8007980:	20003ff8 	.word	0x20003ff8
 8007984:	20003f58 	.word	0x20003f58
 8007988:	080134cc 	.word	0x080134cc

0800798c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3b04      	subs	r3, #4
 800799c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3b04      	subs	r3, #4
 80079aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f023 0201 	bic.w	r2, r3, #1
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3b04      	subs	r3, #4
 80079ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079bc:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <pxPortInitialiseStack+0x64>)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3b14      	subs	r3, #20
 80079c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3b04      	subs	r3, #4
 80079d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f06f 0202 	mvn.w	r2, #2
 80079da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3b20      	subs	r3, #32
 80079e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079e2:	68fb      	ldr	r3, [r7, #12]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	080079f5 	.word	0x080079f5

080079f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079fe:	4b14      	ldr	r3, [pc, #80]	; (8007a50 <prvTaskExitError+0x5c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a06:	d00c      	beq.n	8007a22 <prvTaskExitError+0x2e>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	b672      	cpsid	i
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	b662      	cpsie	i
 8007a1c:	60fb      	str	r3, [r7, #12]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <prvTaskExitError+0x2c>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	b672      	cpsid	i
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	b662      	cpsie	i
 8007a36:	60bb      	str	r3, [r7, #8]
}
 8007a38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a3a:	bf00      	nop
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0fc      	beq.n	8007a3c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	2000000c 	.word	0x2000000c
	...

08007a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <pxCurrentTCBConst2>)
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	6808      	ldr	r0, [r1, #0]
 8007a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	f380 8809 	msr	PSP, r0
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	4770      	bx	lr
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst2>:
 8007a80:	20003a1c 	.word	0x20003a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a88:	4808      	ldr	r0, [pc, #32]	; (8007aac <prvPortStartFirstTask+0x24>)
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f380 8808 	msr	MSP, r0
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8814 	msr	CONTROL, r0
 8007a9a:	b662      	cpsie	i
 8007a9c:	b661      	cpsie	f
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	df00      	svc	0
 8007aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aaa:	bf00      	nop
 8007aac:	e000ed08 	.word	0xe000ed08

08007ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ab6:	4b37      	ldr	r3, [pc, #220]	; (8007b94 <xPortStartScheduler+0xe4>)
 8007ab8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	4b2f      	ldr	r3, [pc, #188]	; (8007b98 <xPortStartScheduler+0xe8>)
 8007adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ade:	4b2f      	ldr	r3, [pc, #188]	; (8007b9c <xPortStartScheduler+0xec>)
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ae4:	e009      	b.n	8007afa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ae6:	4b2d      	ldr	r3, [pc, #180]	; (8007b9c <xPortStartScheduler+0xec>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4a2b      	ldr	r2, [pc, #172]	; (8007b9c <xPortStartScheduler+0xec>)
 8007aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b02:	2b80      	cmp	r3, #128	; 0x80
 8007b04:	d0ef      	beq.n	8007ae6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b06:	4b25      	ldr	r3, [pc, #148]	; (8007b9c <xPortStartScheduler+0xec>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f1c3 0307 	rsb	r3, r3, #7
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d00c      	beq.n	8007b2c <xPortStartScheduler+0x7c>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	b672      	cpsid	i
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	b662      	cpsie	i
 8007b26:	60bb      	str	r3, [r7, #8]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b2c:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <xPortStartScheduler+0xec>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	4a1a      	ldr	r2, [pc, #104]	; (8007b9c <xPortStartScheduler+0xec>)
 8007b34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b36:	4b19      	ldr	r3, [pc, #100]	; (8007b9c <xPortStartScheduler+0xec>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b3e:	4a17      	ldr	r2, [pc, #92]	; (8007b9c <xPortStartScheduler+0xec>)
 8007b40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b4a:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <xPortStartScheduler+0xf0>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a14      	ldr	r2, [pc, #80]	; (8007ba0 <xPortStartScheduler+0xf0>)
 8007b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b56:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <xPortStartScheduler+0xf0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a11      	ldr	r2, [pc, #68]	; (8007ba0 <xPortStartScheduler+0xf0>)
 8007b5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b62:	f000 f8dd 	bl	8007d20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b66:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <xPortStartScheduler+0xf4>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b6c:	f000 f8fc 	bl	8007d68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b70:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <xPortStartScheduler+0xf8>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a0c      	ldr	r2, [pc, #48]	; (8007ba8 <xPortStartScheduler+0xf8>)
 8007b76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b7c:	f7ff ff84 	bl	8007a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b80:	f7fe ff2e 	bl	80069e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007b84:	f7ff ff36 	bl	80079f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	e000e400 	.word	0xe000e400
 8007b98:	20004048 	.word	0x20004048
 8007b9c:	2000404c 	.word	0x2000404c
 8007ba0:	e000ed20 	.word	0xe000ed20
 8007ba4:	2000000c 	.word	0x2000000c
 8007ba8:	e000ef34 	.word	0xe000ef34

08007bac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	b672      	cpsid	i
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	b662      	cpsie	i
 8007bc6:	607b      	str	r3, [r7, #4]
}
 8007bc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bca:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <vPortEnterCritical+0x60>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	4a0e      	ldr	r2, [pc, #56]	; (8007c0c <vPortEnterCritical+0x60>)
 8007bd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bd4:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <vPortEnterCritical+0x60>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d111      	bne.n	8007c00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bdc:	4b0c      	ldr	r3, [pc, #48]	; (8007c10 <vPortEnterCritical+0x64>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00c      	beq.n	8007c00 <vPortEnterCritical+0x54>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	b672      	cpsid	i
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	b662      	cpsie	i
 8007bfa:	603b      	str	r3, [r7, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <vPortEnterCritical+0x52>
	}
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	2000000c 	.word	0x2000000c
 8007c10:	e000ed04 	.word	0xe000ed04

08007c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c1a:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <vPortExitCritical+0x54>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10c      	bne.n	8007c3c <vPortExitCritical+0x28>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	b672      	cpsid	i
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	b662      	cpsie	i
 8007c36:	607b      	str	r3, [r7, #4]
}
 8007c38:	bf00      	nop
 8007c3a:	e7fe      	b.n	8007c3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <vPortExitCritical+0x54>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	4a09      	ldr	r2, [pc, #36]	; (8007c68 <vPortExitCritical+0x54>)
 8007c44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c46:	4b08      	ldr	r3, [pc, #32]	; (8007c68 <vPortExitCritical+0x54>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d105      	bne.n	8007c5a <vPortExitCritical+0x46>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	f383 8811 	msr	BASEPRI, r3
}
 8007c58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	2000000c 	.word	0x2000000c
 8007c6c:	00000000 	.word	0x00000000

08007c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c70:	f3ef 8009 	mrs	r0, PSP
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <pxCurrentTCBConst>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	f01e 0f10 	tst.w	lr, #16
 8007c80:	bf08      	it	eq
 8007c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	6010      	str	r0, [r2, #0]
 8007c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f380 8811 	msr	BASEPRI, r0
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	f7fe fe9c 	bl	80069e0 <vTaskSwitchContext>
 8007ca8:	f04f 0000 	mov.w	r0, #0
 8007cac:	f380 8811 	msr	BASEPRI, r0
 8007cb0:	bc09      	pop	{r0, r3}
 8007cb2:	6819      	ldr	r1, [r3, #0]
 8007cb4:	6808      	ldr	r0, [r1, #0]
 8007cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cba:	f01e 0f10 	tst.w	lr, #16
 8007cbe:	bf08      	it	eq
 8007cc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cc4:	f380 8809 	msr	PSP, r0
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop

08007cd0 <pxCurrentTCBConst>:
 8007cd0:	20003a1c 	.word	0x20003a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop

08007cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	b672      	cpsid	i
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	b662      	cpsie	i
 8007cf2:	607b      	str	r3, [r7, #4]
}
 8007cf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cf6:	f7fe fdb7 	bl	8006868 <xTaskIncrementTick>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d00:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <SysTick_Handler+0x44>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	f383 8811 	msr	BASEPRI, r3
}
 8007d12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	e000ed04 	.word	0xe000ed04

08007d20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d24:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <vPortSetupTimerInterrupt+0x34>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <vPortSetupTimerInterrupt+0x38>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <vPortSetupTimerInterrupt+0x3c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a0a      	ldr	r2, [pc, #40]	; (8007d60 <vPortSetupTimerInterrupt+0x40>)
 8007d36:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3a:	099b      	lsrs	r3, r3, #6
 8007d3c:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <vPortSetupTimerInterrupt+0x44>)
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d42:	4b04      	ldr	r3, [pc, #16]	; (8007d54 <vPortSetupTimerInterrupt+0x34>)
 8007d44:	2207      	movs	r2, #7
 8007d46:	601a      	str	r2, [r3, #0]
}
 8007d48:	bf00      	nop
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	e000e010 	.word	0xe000e010
 8007d58:	e000e018 	.word	0xe000e018
 8007d5c:	20000000 	.word	0x20000000
 8007d60:	10624dd3 	.word	0x10624dd3
 8007d64:	e000e014 	.word	0xe000e014

08007d68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d78 <vPortEnableVFP+0x10>
 8007d6c:	6801      	ldr	r1, [r0, #0]
 8007d6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d72:	6001      	str	r1, [r0, #0]
 8007d74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d76:	bf00      	nop
 8007d78:	e000ed88 	.word	0xe000ed88

08007d7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d82:	f3ef 8305 	mrs	r3, IPSR
 8007d86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b0f      	cmp	r3, #15
 8007d8c:	d916      	bls.n	8007dbc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d8e:	4a19      	ldr	r2, [pc, #100]	; (8007df4 <vPortValidateInterruptPriority+0x78>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d98:	4b17      	ldr	r3, [pc, #92]	; (8007df8 <vPortValidateInterruptPriority+0x7c>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	7afa      	ldrb	r2, [r7, #11]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d20c      	bcs.n	8007dbc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	b672      	cpsid	i
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	b662      	cpsie	i
 8007db6:	607b      	str	r3, [r7, #4]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dbc:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <vPortValidateInterruptPriority+0x80>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <vPortValidateInterruptPriority+0x84>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d90c      	bls.n	8007de6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	b672      	cpsid	i
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	b662      	cpsie	i
 8007de0:	603b      	str	r3, [r7, #0]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <vPortValidateInterruptPriority+0x68>
	}
 8007de6:	bf00      	nop
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	e000e3f0 	.word	0xe000e3f0
 8007df8:	20004048 	.word	0x20004048
 8007dfc:	e000ed0c 	.word	0xe000ed0c
 8007e00:	2000404c 	.word	0x2000404c

08007e04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e10:	f7fe fc5a 	bl	80066c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e14:	4b5b      	ldr	r3, [pc, #364]	; (8007f84 <pvPortMalloc+0x180>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e1c:	f000 f91a 	bl	8008054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e20:	4b59      	ldr	r3, [pc, #356]	; (8007f88 <pvPortMalloc+0x184>)
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4013      	ands	r3, r2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f040 8092 	bne.w	8007f52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01f      	beq.n	8007e74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007e34:	2208      	movs	r2, #8
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4413      	add	r3, r2
 8007e3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d016      	beq.n	8007e74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f023 0307 	bic.w	r3, r3, #7
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00c      	beq.n	8007e74 <pvPortMalloc+0x70>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	b672      	cpsid	i
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	b662      	cpsie	i
 8007e6e:	617b      	str	r3, [r7, #20]
}
 8007e70:	bf00      	nop
 8007e72:	e7fe      	b.n	8007e72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d06b      	beq.n	8007f52 <pvPortMalloc+0x14e>
 8007e7a:	4b44      	ldr	r3, [pc, #272]	; (8007f8c <pvPortMalloc+0x188>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d866      	bhi.n	8007f52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e84:	4b42      	ldr	r3, [pc, #264]	; (8007f90 <pvPortMalloc+0x18c>)
 8007e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e88:	4b41      	ldr	r3, [pc, #260]	; (8007f90 <pvPortMalloc+0x18c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e8e:	e004      	b.n	8007e9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d903      	bls.n	8007eac <pvPortMalloc+0xa8>
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1f1      	bne.n	8007e90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007eac:	4b35      	ldr	r3, [pc, #212]	; (8007f84 <pvPortMalloc+0x180>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d04d      	beq.n	8007f52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2208      	movs	r2, #8
 8007ebc:	4413      	add	r3, r2
 8007ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d921      	bls.n	8007f1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4413      	add	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00c      	beq.n	8007f04 <pvPortMalloc+0x100>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	b672      	cpsid	i
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	b662      	cpsie	i
 8007efe:	613b      	str	r3, [r7, #16]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	1ad2      	subs	r2, r2, r3
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f16:	69b8      	ldr	r0, [r7, #24]
 8007f18:	f000 f8fe 	bl	8008118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f1c:	4b1b      	ldr	r3, [pc, #108]	; (8007f8c <pvPortMalloc+0x188>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	4a19      	ldr	r2, [pc, #100]	; (8007f8c <pvPortMalloc+0x188>)
 8007f28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f2a:	4b18      	ldr	r3, [pc, #96]	; (8007f8c <pvPortMalloc+0x188>)
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4b19      	ldr	r3, [pc, #100]	; (8007f94 <pvPortMalloc+0x190>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d203      	bcs.n	8007f3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f36:	4b15      	ldr	r3, [pc, #84]	; (8007f8c <pvPortMalloc+0x188>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a16      	ldr	r2, [pc, #88]	; (8007f94 <pvPortMalloc+0x190>)
 8007f3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <pvPortMalloc+0x184>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f52:	f7fe fbc7 	bl	80066e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00c      	beq.n	8007f7a <pvPortMalloc+0x176>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	b672      	cpsid	i
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	b662      	cpsie	i
 8007f74:	60fb      	str	r3, [r7, #12]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <pvPortMalloc+0x174>
	return pvReturn;
 8007f7a:	69fb      	ldr	r3, [r7, #28]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3728      	adds	r7, #40	; 0x28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	20007c58 	.word	0x20007c58
 8007f88:	20007c64 	.word	0x20007c64
 8007f8c:	20007c5c 	.word	0x20007c5c
 8007f90:	20007c50 	.word	0x20007c50
 8007f94:	20007c60 	.word	0x20007c60

08007f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d04c      	beq.n	8008044 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007faa:	2308      	movs	r3, #8
 8007fac:	425b      	negs	r3, r3
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	4b23      	ldr	r3, [pc, #140]	; (800804c <vPortFree+0xb4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10c      	bne.n	8007fe0 <vPortFree+0x48>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	b672      	cpsid	i
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	b662      	cpsie	i
 8007fda:	60fb      	str	r3, [r7, #12]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00c      	beq.n	8008002 <vPortFree+0x6a>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fec:	b672      	cpsid	i
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	b662      	cpsie	i
 8007ffc:	60bb      	str	r3, [r7, #8]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <vPortFree+0xb4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d019      	beq.n	8008044 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d115      	bne.n	8008044 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <vPortFree+0xb4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	43db      	mvns	r3, r3
 8008022:	401a      	ands	r2, r3
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008028:	f7fe fb4e 	bl	80066c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <vPortFree+0xb8>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4413      	add	r3, r2
 8008036:	4a06      	ldr	r2, [pc, #24]	; (8008050 <vPortFree+0xb8>)
 8008038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800803a:	6938      	ldr	r0, [r7, #16]
 800803c:	f000 f86c 	bl	8008118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008040:	f7fe fb50 	bl	80066e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008044:	bf00      	nop
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20007c64 	.word	0x20007c64
 8008050:	20007c5c 	.word	0x20007c5c

08008054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800805a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800805e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008060:	4b27      	ldr	r3, [pc, #156]	; (8008100 <prvHeapInit+0xac>)
 8008062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00c      	beq.n	8008088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3307      	adds	r3, #7
 8008072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <prvHeapInit+0xac>)
 8008084:	4413      	add	r3, r2
 8008086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800808c:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <prvHeapInit+0xb0>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008092:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <prvHeapInit+0xb0>)
 8008094:	2200      	movs	r2, #0
 8008096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4413      	add	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080a0:	2208      	movs	r2, #8
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1a9b      	subs	r3, r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0307 	bic.w	r3, r3, #7
 80080ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a15      	ldr	r2, [pc, #84]	; (8008108 <prvHeapInit+0xb4>)
 80080b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080b6:	4b14      	ldr	r3, [pc, #80]	; (8008108 <prvHeapInit+0xb4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2200      	movs	r2, #0
 80080bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080be:	4b12      	ldr	r3, [pc, #72]	; (8008108 <prvHeapInit+0xb4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvHeapInit+0xb4>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4a0a      	ldr	r2, [pc, #40]	; (800810c <prvHeapInit+0xb8>)
 80080e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	4a09      	ldr	r2, [pc, #36]	; (8008110 <prvHeapInit+0xbc>)
 80080ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080ec:	4b09      	ldr	r3, [pc, #36]	; (8008114 <prvHeapInit+0xc0>)
 80080ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080f2:	601a      	str	r2, [r3, #0]
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	20004050 	.word	0x20004050
 8008104:	20007c50 	.word	0x20007c50
 8008108:	20007c58 	.word	0x20007c58
 800810c:	20007c60 	.word	0x20007c60
 8008110:	20007c5c 	.word	0x20007c5c
 8008114:	20007c64 	.word	0x20007c64

08008118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008120:	4b28      	ldr	r3, [pc, #160]	; (80081c4 <prvInsertBlockIntoFreeList+0xac>)
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e002      	b.n	800812c <prvInsertBlockIntoFreeList+0x14>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d8f7      	bhi.n	8008126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	4413      	add	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d108      	bne.n	800815a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	441a      	add	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d118      	bne.n	80081a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d00d      	beq.n	8008196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	441a      	add	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	e008      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008196:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e003      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d002      	beq.n	80081b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081b6:	bf00      	nop
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	20007c50 	.word	0x20007c50
 80081c8:	20007c58 	.word	0x20007c58

080081cc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80081d6:	f007 fa7f 	bl	800f6d8 <sys_timeouts_sleeptime>
 80081da:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e2:	d10b      	bne.n	80081fc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80081e4:	4813      	ldr	r0, [pc, #76]	; (8008234 <tcpip_timeouts_mbox_fetch+0x68>)
 80081e6:	f009 ffd6 	bl	8012196 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80081ea:	2200      	movs	r2, #0
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f009 ff5e 	bl	80120b0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80081f4:	480f      	ldr	r0, [pc, #60]	; (8008234 <tcpip_timeouts_mbox_fetch+0x68>)
 80081f6:	f009 ffbf 	bl	8012178 <sys_mutex_lock>
    return;
 80081fa:	e018      	b.n	800822e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008202:	f007 fa2f 	bl	800f664 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008206:	e7e6      	b.n	80081d6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008208:	480a      	ldr	r0, [pc, #40]	; (8008234 <tcpip_timeouts_mbox_fetch+0x68>)
 800820a:	f009 ffc4 	bl	8012196 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f009 ff4c 	bl	80120b0 <sys_arch_mbox_fetch>
 8008218:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800821a:	4806      	ldr	r0, [pc, #24]	; (8008234 <tcpip_timeouts_mbox_fetch+0x68>)
 800821c:	f009 ffac 	bl	8012178 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008226:	d102      	bne.n	800822e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008228:	f007 fa1c 	bl	800f664 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800822c:	e7d3      	b.n	80081d6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	20007c74 	.word	0x20007c74

08008238 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008240:	4810      	ldr	r0, [pc, #64]	; (8008284 <tcpip_thread+0x4c>)
 8008242:	f009 ff99 	bl	8012178 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008246:	4b10      	ldr	r3, [pc, #64]	; (8008288 <tcpip_thread+0x50>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d005      	beq.n	800825a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800824e:	4b0e      	ldr	r3, [pc, #56]	; (8008288 <tcpip_thread+0x50>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a0e      	ldr	r2, [pc, #56]	; (800828c <tcpip_thread+0x54>)
 8008254:	6812      	ldr	r2, [r2, #0]
 8008256:	4610      	mov	r0, r2
 8008258:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800825a:	f107 030c 	add.w	r3, r7, #12
 800825e:	4619      	mov	r1, r3
 8008260:	480b      	ldr	r0, [pc, #44]	; (8008290 <tcpip_thread+0x58>)
 8008262:	f7ff ffb3 	bl	80081cc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d106      	bne.n	800827a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <tcpip_thread+0x5c>)
 800826e:	2291      	movs	r2, #145	; 0x91
 8008270:	4909      	ldr	r1, [pc, #36]	; (8008298 <tcpip_thread+0x60>)
 8008272:	480a      	ldr	r0, [pc, #40]	; (800829c <tcpip_thread+0x64>)
 8008274:	f00a f9b2 	bl	80125dc <iprintf>
      continue;
 8008278:	e003      	b.n	8008282 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 f80f 	bl	80082a0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008282:	e7ea      	b.n	800825a <tcpip_thread+0x22>
 8008284:	20007c74 	.word	0x20007c74
 8008288:	20007c68 	.word	0x20007c68
 800828c:	20007c6c 	.word	0x20007c6c
 8008290:	20007c70 	.word	0x20007c70
 8008294:	080134d4 	.word	0x080134d4
 8008298:	08013504 	.word	0x08013504
 800829c:	08013524 	.word	0x08013524

080082a0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d026      	beq.n	80082fe <tcpip_thread_handle_msg+0x5e>
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	dc2b      	bgt.n	800830c <tcpip_thread_handle_msg+0x6c>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <tcpip_thread_handle_msg+0x1e>
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d015      	beq.n	80082e8 <tcpip_thread_handle_msg+0x48>
 80082bc:	e026      	b.n	800830c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	6850      	ldr	r0, [r2, #4]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6892      	ldr	r2, [r2, #8]
 80082ca:	4611      	mov	r1, r2
 80082cc:	4798      	blx	r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d004      	beq.n	80082de <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 fcc5 	bl	8009c68 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	2009      	movs	r0, #9
 80082e2:	f000 fe1d 	bl	8008f20 <memp_free>
      break;
 80082e6:	e018      	b.n	800831a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	6892      	ldr	r2, [r2, #8]
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	2008      	movs	r0, #8
 80082f8:	f000 fe12 	bl	8008f20 <memp_free>
      break;
 80082fc:	e00d      	b.n	800831a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6892      	ldr	r2, [r2, #8]
 8008306:	4610      	mov	r0, r2
 8008308:	4798      	blx	r3
      break;
 800830a:	e006      	b.n	800831a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800830c:	4b05      	ldr	r3, [pc, #20]	; (8008324 <tcpip_thread_handle_msg+0x84>)
 800830e:	22cf      	movs	r2, #207	; 0xcf
 8008310:	4905      	ldr	r1, [pc, #20]	; (8008328 <tcpip_thread_handle_msg+0x88>)
 8008312:	4806      	ldr	r0, [pc, #24]	; (800832c <tcpip_thread_handle_msg+0x8c>)
 8008314:	f00a f962 	bl	80125dc <iprintf>
      break;
 8008318:	bf00      	nop
  }
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	080134d4 	.word	0x080134d4
 8008328:	08013504 	.word	0x08013504
 800832c:	08013524 	.word	0x08013524

08008330 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800833c:	481a      	ldr	r0, [pc, #104]	; (80083a8 <tcpip_inpkt+0x78>)
 800833e:	f009 fee8 	bl	8012112 <sys_mbox_valid>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d105      	bne.n	8008354 <tcpip_inpkt+0x24>
 8008348:	4b18      	ldr	r3, [pc, #96]	; (80083ac <tcpip_inpkt+0x7c>)
 800834a:	22fc      	movs	r2, #252	; 0xfc
 800834c:	4918      	ldr	r1, [pc, #96]	; (80083b0 <tcpip_inpkt+0x80>)
 800834e:	4819      	ldr	r0, [pc, #100]	; (80083b4 <tcpip_inpkt+0x84>)
 8008350:	f00a f944 	bl	80125dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008354:	2009      	movs	r0, #9
 8008356:	f000 fd91 	bl	8008e7c <memp_malloc>
 800835a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d102      	bne.n	8008368 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008362:	f04f 33ff 	mov.w	r3, #4294967295
 8008366:	e01a      	b.n	800839e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008380:	6979      	ldr	r1, [r7, #20]
 8008382:	4809      	ldr	r0, [pc, #36]	; (80083a8 <tcpip_inpkt+0x78>)
 8008384:	f009 fe7a 	bl	801207c <sys_mbox_trypost>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d006      	beq.n	800839c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800838e:	6979      	ldr	r1, [r7, #20]
 8008390:	2009      	movs	r0, #9
 8008392:	f000 fdc5 	bl	8008f20 <memp_free>
    return ERR_MEM;
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	e000      	b.n	800839e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800839c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20007c70 	.word	0x20007c70
 80083ac:	080134d4 	.word	0x080134d4
 80083b0:	0801354c 	.word	0x0801354c
 80083b4:	08013524 	.word	0x08013524

080083b8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083c8:	f003 0318 	and.w	r3, r3, #24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d006      	beq.n	80083de <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80083d0:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <tcpip_input+0x3c>)
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff ffab 	bl	8008330 <tcpip_inpkt>
 80083da:	4603      	mov	r3, r0
 80083dc:	e005      	b.n	80083ea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80083de:	4a06      	ldr	r2, [pc, #24]	; (80083f8 <tcpip_input+0x40>)
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff ffa4 	bl	8008330 <tcpip_inpkt>
 80083e8:	4603      	mov	r3, r0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	08011e9d 	.word	0x08011e9d
 80083f8:	08010da5 	.word	0x08010da5

080083fc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008406:	4819      	ldr	r0, [pc, #100]	; (800846c <tcpip_try_callback+0x70>)
 8008408:	f009 fe83 	bl	8012112 <sys_mbox_valid>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <tcpip_try_callback+0x24>
 8008412:	4b17      	ldr	r3, [pc, #92]	; (8008470 <tcpip_try_callback+0x74>)
 8008414:	f240 125d 	movw	r2, #349	; 0x15d
 8008418:	4916      	ldr	r1, [pc, #88]	; (8008474 <tcpip_try_callback+0x78>)
 800841a:	4817      	ldr	r0, [pc, #92]	; (8008478 <tcpip_try_callback+0x7c>)
 800841c:	f00a f8de 	bl	80125dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008420:	2008      	movs	r0, #8
 8008422:	f000 fd2b 	bl	8008e7c <memp_malloc>
 8008426:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d102      	bne.n	8008434 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800842e:	f04f 33ff 	mov.w	r3, #4294967295
 8008432:	e017      	b.n	8008464 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008446:	68f9      	ldr	r1, [r7, #12]
 8008448:	4808      	ldr	r0, [pc, #32]	; (800846c <tcpip_try_callback+0x70>)
 800844a:	f009 fe17 	bl	801207c <sys_mbox_trypost>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d006      	beq.n	8008462 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008454:	68f9      	ldr	r1, [r7, #12]
 8008456:	2008      	movs	r0, #8
 8008458:	f000 fd62 	bl	8008f20 <memp_free>
    return ERR_MEM;
 800845c:	f04f 33ff 	mov.w	r3, #4294967295
 8008460:	e000      	b.n	8008464 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20007c70 	.word	0x20007c70
 8008470:	080134d4 	.word	0x080134d4
 8008474:	0801354c 	.word	0x0801354c
 8008478:	08013524 	.word	0x08013524

0800847c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af02      	add	r7, sp, #8
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008486:	f000 f871 	bl	800856c <lwip_init>

  tcpip_init_done = initfunc;
 800848a:	4a17      	ldr	r2, [pc, #92]	; (80084e8 <tcpip_init+0x6c>)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008490:	4a16      	ldr	r2, [pc, #88]	; (80084ec <tcpip_init+0x70>)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008496:	2106      	movs	r1, #6
 8008498:	4815      	ldr	r0, [pc, #84]	; (80084f0 <tcpip_init+0x74>)
 800849a:	f009 fdd5 	bl	8012048 <sys_mbox_new>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d006      	beq.n	80084b2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80084a4:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <tcpip_init+0x78>)
 80084a6:	f240 2261 	movw	r2, #609	; 0x261
 80084aa:	4913      	ldr	r1, [pc, #76]	; (80084f8 <tcpip_init+0x7c>)
 80084ac:	4813      	ldr	r0, [pc, #76]	; (80084fc <tcpip_init+0x80>)
 80084ae:	f00a f895 	bl	80125dc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80084b2:	4813      	ldr	r0, [pc, #76]	; (8008500 <tcpip_init+0x84>)
 80084b4:	f009 fe4a 	bl	801214c <sys_mutex_new>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d006      	beq.n	80084cc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80084be:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <tcpip_init+0x78>)
 80084c0:	f240 2265 	movw	r2, #613	; 0x265
 80084c4:	490f      	ldr	r1, [pc, #60]	; (8008504 <tcpip_init+0x88>)
 80084c6:	480d      	ldr	r0, [pc, #52]	; (80084fc <tcpip_init+0x80>)
 80084c8:	f00a f888 	bl	80125dc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80084cc:	2318      	movs	r3, #24
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d4:	2200      	movs	r2, #0
 80084d6:	490c      	ldr	r1, [pc, #48]	; (8008508 <tcpip_init+0x8c>)
 80084d8:	480c      	ldr	r0, [pc, #48]	; (800850c <tcpip_init+0x90>)
 80084da:	f009 fe69 	bl	80121b0 <sys_thread_new>
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20007c68 	.word	0x20007c68
 80084ec:	20007c6c 	.word	0x20007c6c
 80084f0:	20007c70 	.word	0x20007c70
 80084f4:	080134d4 	.word	0x080134d4
 80084f8:	0801355c 	.word	0x0801355c
 80084fc:	08013524 	.word	0x08013524
 8008500:	20007c74 	.word	0x20007c74
 8008504:	08013580 	.word	0x08013580
 8008508:	08008239 	.word	0x08008239
 800850c:	080135a4 	.word	0x080135a4

08008510 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800851a:	88fb      	ldrh	r3, [r7, #6]
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	b21a      	sxth	r2, r3
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	0a1b      	lsrs	r3, r3, #8
 8008524:	b29b      	uxth	r3, r3
 8008526:	b21b      	sxth	r3, r3
 8008528:	4313      	orrs	r3, r2
 800852a:	b21b      	sxth	r3, r3
 800852c:	b29b      	uxth	r3, r3
}
 800852e:	4618      	mov	r0, r3
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	061a      	lsls	r2, r3, #24
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	021b      	lsls	r3, r3, #8
 800854a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	0a1b      	lsrs	r3, r3, #8
 8008554:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008558:	431a      	orrs	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	0e1b      	lsrs	r3, r3, #24
 800855e:	4313      	orrs	r3, r2
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008576:	f009 fddd 	bl	8012134 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800857a:	f000 f8d5 	bl	8008728 <mem_init>
  memp_init();
 800857e:	f000 fc31 	bl	8008de4 <memp_init>
  pbuf_init();
  netif_init();
 8008582:	f000 fcf7 	bl	8008f74 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008586:	f007 f8df 	bl	800f748 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800858a:	f001 fe07 	bl	800a19c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800858e:	f007 f821 	bl	800f5d4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80085a6:	4b05      	ldr	r3, [pc, #20]	; (80085bc <ptr_to_mem+0x20>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	4413      	add	r3, r2
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	2000a4a4 	.word	0x2000a4a4

080085c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <mem_to_ptr+0x20>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	b29b      	uxth	r3, r3
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	2000a4a4 	.word	0x2000a4a4

080085e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80085e4:	b590      	push	{r4, r7, lr}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80085ec:	4b45      	ldr	r3, [pc, #276]	; (8008704 <plug_holes+0x120>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d206      	bcs.n	8008604 <plug_holes+0x20>
 80085f6:	4b44      	ldr	r3, [pc, #272]	; (8008708 <plug_holes+0x124>)
 80085f8:	f240 12df 	movw	r2, #479	; 0x1df
 80085fc:	4943      	ldr	r1, [pc, #268]	; (800870c <plug_holes+0x128>)
 80085fe:	4844      	ldr	r0, [pc, #272]	; (8008710 <plug_holes+0x12c>)
 8008600:	f009 ffec 	bl	80125dc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008604:	4b43      	ldr	r3, [pc, #268]	; (8008714 <plug_holes+0x130>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d306      	bcc.n	800861c <plug_holes+0x38>
 800860e:	4b3e      	ldr	r3, [pc, #248]	; (8008708 <plug_holes+0x124>)
 8008610:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008614:	4940      	ldr	r1, [pc, #256]	; (8008718 <plug_holes+0x134>)
 8008616:	483e      	ldr	r0, [pc, #248]	; (8008710 <plug_holes+0x12c>)
 8008618:	f009 ffe0 	bl	80125dc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	791b      	ldrb	r3, [r3, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d006      	beq.n	8008632 <plug_holes+0x4e>
 8008624:	4b38      	ldr	r3, [pc, #224]	; (8008708 <plug_holes+0x124>)
 8008626:	f240 12e1 	movw	r2, #481	; 0x1e1
 800862a:	493c      	ldr	r1, [pc, #240]	; (800871c <plug_holes+0x138>)
 800862c:	4838      	ldr	r0, [pc, #224]	; (8008710 <plug_holes+0x12c>)
 800862e:	f009 ffd5 	bl	80125dc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800863a:	d906      	bls.n	800864a <plug_holes+0x66>
 800863c:	4b32      	ldr	r3, [pc, #200]	; (8008708 <plug_holes+0x124>)
 800863e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008642:	4937      	ldr	r1, [pc, #220]	; (8008720 <plug_holes+0x13c>)
 8008644:	4832      	ldr	r0, [pc, #200]	; (8008710 <plug_holes+0x12c>)
 8008646:	f009 ffc9 	bl	80125dc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff ffa4 	bl	800859c <ptr_to_mem>
 8008654:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	429a      	cmp	r2, r3
 800865c:	d024      	beq.n	80086a8 <plug_holes+0xc4>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	791b      	ldrb	r3, [r3, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d120      	bne.n	80086a8 <plug_holes+0xc4>
 8008666:	4b2b      	ldr	r3, [pc, #172]	; (8008714 <plug_holes+0x130>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	429a      	cmp	r2, r3
 800866e:	d01b      	beq.n	80086a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008670:	4b2c      	ldr	r3, [pc, #176]	; (8008724 <plug_holes+0x140>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	429a      	cmp	r2, r3
 8008678:	d102      	bne.n	8008680 <plug_holes+0x9c>
      lfree = mem;
 800867a:	4a2a      	ldr	r2, [pc, #168]	; (8008724 <plug_holes+0x140>)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	881a      	ldrh	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008690:	d00a      	beq.n	80086a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff ff80 	bl	800859c <ptr_to_mem>
 800869c:	4604      	mov	r4, r0
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff ff8e 	bl	80085c0 <mem_to_ptr>
 80086a4:	4603      	mov	r3, r0
 80086a6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	885b      	ldrh	r3, [r3, #2]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff ff75 	bl	800859c <ptr_to_mem>
 80086b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d01f      	beq.n	80086fc <plug_holes+0x118>
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	791b      	ldrb	r3, [r3, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d11b      	bne.n	80086fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80086c4:	4b17      	ldr	r3, [pc, #92]	; (8008724 <plug_holes+0x140>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d102      	bne.n	80086d4 <plug_holes+0xf0>
      lfree = pmem;
 80086ce:	4a15      	ldr	r2, [pc, #84]	; (8008724 <plug_holes+0x140>)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	881a      	ldrh	r2, [r3, #0]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80086e4:	d00a      	beq.n	80086fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff ff56 	bl	800859c <ptr_to_mem>
 80086f0:	4604      	mov	r4, r0
 80086f2:	68b8      	ldr	r0, [r7, #8]
 80086f4:	f7ff ff64 	bl	80085c0 <mem_to_ptr>
 80086f8:	4603      	mov	r3, r0
 80086fa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80086fc:	bf00      	nop
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	bd90      	pop	{r4, r7, pc}
 8008704:	2000a4a4 	.word	0x2000a4a4
 8008708:	080135b4 	.word	0x080135b4
 800870c:	080135e4 	.word	0x080135e4
 8008710:	080135fc 	.word	0x080135fc
 8008714:	2000a4a8 	.word	0x2000a4a8
 8008718:	08013624 	.word	0x08013624
 800871c:	08013640 	.word	0x08013640
 8008720:	0801365c 	.word	0x0801365c
 8008724:	2000a4b0 	.word	0x2000a4b0

08008728 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800872e:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <mem_init+0x84>)
 8008730:	3303      	adds	r3, #3
 8008732:	f023 0303 	bic.w	r3, r3, #3
 8008736:	461a      	mov	r2, r3
 8008738:	4b1d      	ldr	r3, [pc, #116]	; (80087b0 <mem_init+0x88>)
 800873a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <mem_init+0x88>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008748:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008756:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800875a:	f7ff ff1f 	bl	800859c <ptr_to_mem>
 800875e:	4603      	mov	r3, r0
 8008760:	4a14      	ldr	r2, [pc, #80]	; (80087b4 <mem_init+0x8c>)
 8008762:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008764:	4b13      	ldr	r3, [pc, #76]	; (80087b4 <mem_init+0x8c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2201      	movs	r2, #1
 800876a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800876c:	4b11      	ldr	r3, [pc, #68]	; (80087b4 <mem_init+0x8c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008774:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <mem_init+0x8c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800877e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <mem_init+0x88>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a0c      	ldr	r2, [pc, #48]	; (80087b8 <mem_init+0x90>)
 8008786:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008788:	480c      	ldr	r0, [pc, #48]	; (80087bc <mem_init+0x94>)
 800878a:	f009 fcdf 	bl	801214c <sys_mutex_new>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d006      	beq.n	80087a2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <mem_init+0x98>)
 8008796:	f240 221f 	movw	r2, #543	; 0x21f
 800879a:	490a      	ldr	r1, [pc, #40]	; (80087c4 <mem_init+0x9c>)
 800879c:	480a      	ldr	r0, [pc, #40]	; (80087c8 <mem_init+0xa0>)
 800879e:	f009 ff1d 	bl	80125dc <iprintf>
  }
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20007c90 	.word	0x20007c90
 80087b0:	2000a4a4 	.word	0x2000a4a4
 80087b4:	2000a4a8 	.word	0x2000a4a8
 80087b8:	2000a4b0 	.word	0x2000a4b0
 80087bc:	2000a4ac 	.word	0x2000a4ac
 80087c0:	080135b4 	.word	0x080135b4
 80087c4:	08013688 	.word	0x08013688
 80087c8:	080135fc 	.word	0x080135fc

080087cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff fef3 	bl	80085c0 <mem_to_ptr>
 80087da:	4603      	mov	r3, r0
 80087dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff feda 	bl	800859c <ptr_to_mem>
 80087e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	885b      	ldrh	r3, [r3, #2]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fed4 	bl	800859c <ptr_to_mem>
 80087f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80087fe:	d818      	bhi.n	8008832 <mem_link_valid+0x66>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	885b      	ldrh	r3, [r3, #2]
 8008804:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008808:	d813      	bhi.n	8008832 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800880e:	8afa      	ldrh	r2, [r7, #22]
 8008810:	429a      	cmp	r2, r3
 8008812:	d004      	beq.n	800881e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	8afa      	ldrh	r2, [r7, #22]
 800881a:	429a      	cmp	r2, r3
 800881c:	d109      	bne.n	8008832 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800881e:	4b08      	ldr	r3, [pc, #32]	; (8008840 <mem_link_valid+0x74>)
 8008820:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	429a      	cmp	r2, r3
 8008826:	d006      	beq.n	8008836 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	885b      	ldrh	r3, [r3, #2]
 800882c:	8afa      	ldrh	r2, [r7, #22]
 800882e:	429a      	cmp	r2, r3
 8008830:	d001      	beq.n	8008836 <mem_link_valid+0x6a>
    return 0;
 8008832:	2300      	movs	r3, #0
 8008834:	e000      	b.n	8008838 <mem_link_valid+0x6c>
  }
  return 1;
 8008836:	2301      	movs	r3, #1
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	2000a4a8 	.word	0x2000a4a8

08008844 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d070      	beq.n	8008934 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f003 0303 	and.w	r3, r3, #3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00d      	beq.n	8008878 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800885c:	4b37      	ldr	r3, [pc, #220]	; (800893c <mem_free+0xf8>)
 800885e:	f240 2273 	movw	r2, #627	; 0x273
 8008862:	4937      	ldr	r1, [pc, #220]	; (8008940 <mem_free+0xfc>)
 8008864:	4837      	ldr	r0, [pc, #220]	; (8008944 <mem_free+0x100>)
 8008866:	f009 feb9 	bl	80125dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800886a:	f009 fcc1 	bl	80121f0 <sys_arch_protect>
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f009 fccb 	bl	801220c <sys_arch_unprotect>
    return;
 8008876:	e05e      	b.n	8008936 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3b08      	subs	r3, #8
 800887c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800887e:	4b32      	ldr	r3, [pc, #200]	; (8008948 <mem_free+0x104>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	429a      	cmp	r2, r3
 8008886:	d306      	bcc.n	8008896 <mem_free+0x52>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f103 020c 	add.w	r2, r3, #12
 800888e:	4b2f      	ldr	r3, [pc, #188]	; (800894c <mem_free+0x108>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d90d      	bls.n	80088b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008896:	4b29      	ldr	r3, [pc, #164]	; (800893c <mem_free+0xf8>)
 8008898:	f240 227f 	movw	r2, #639	; 0x27f
 800889c:	492c      	ldr	r1, [pc, #176]	; (8008950 <mem_free+0x10c>)
 800889e:	4829      	ldr	r0, [pc, #164]	; (8008944 <mem_free+0x100>)
 80088a0:	f009 fe9c 	bl	80125dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80088a4:	f009 fca4 	bl	80121f0 <sys_arch_protect>
 80088a8:	6138      	str	r0, [r7, #16]
 80088aa:	6938      	ldr	r0, [r7, #16]
 80088ac:	f009 fcae 	bl	801220c <sys_arch_unprotect>
    return;
 80088b0:	e041      	b.n	8008936 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80088b2:	4828      	ldr	r0, [pc, #160]	; (8008954 <mem_free+0x110>)
 80088b4:	f009 fc60 	bl	8012178 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	791b      	ldrb	r3, [r3, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d110      	bne.n	80088e2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80088c0:	4b1e      	ldr	r3, [pc, #120]	; (800893c <mem_free+0xf8>)
 80088c2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80088c6:	4924      	ldr	r1, [pc, #144]	; (8008958 <mem_free+0x114>)
 80088c8:	481e      	ldr	r0, [pc, #120]	; (8008944 <mem_free+0x100>)
 80088ca:	f009 fe87 	bl	80125dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80088ce:	4821      	ldr	r0, [pc, #132]	; (8008954 <mem_free+0x110>)
 80088d0:	f009 fc61 	bl	8012196 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80088d4:	f009 fc8c 	bl	80121f0 <sys_arch_protect>
 80088d8:	6178      	str	r0, [r7, #20]
 80088da:	6978      	ldr	r0, [r7, #20]
 80088dc:	f009 fc96 	bl	801220c <sys_arch_unprotect>
    return;
 80088e0:	e029      	b.n	8008936 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80088e2:	69f8      	ldr	r0, [r7, #28]
 80088e4:	f7ff ff72 	bl	80087cc <mem_link_valid>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d110      	bne.n	8008910 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <mem_free+0xf8>)
 80088f0:	f240 2295 	movw	r2, #661	; 0x295
 80088f4:	4919      	ldr	r1, [pc, #100]	; (800895c <mem_free+0x118>)
 80088f6:	4813      	ldr	r0, [pc, #76]	; (8008944 <mem_free+0x100>)
 80088f8:	f009 fe70 	bl	80125dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80088fc:	4815      	ldr	r0, [pc, #84]	; (8008954 <mem_free+0x110>)
 80088fe:	f009 fc4a 	bl	8012196 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008902:	f009 fc75 	bl	80121f0 <sys_arch_protect>
 8008906:	61b8      	str	r0, [r7, #24]
 8008908:	69b8      	ldr	r0, [r7, #24]
 800890a:	f009 fc7f 	bl	801220c <sys_arch_unprotect>
    return;
 800890e:	e012      	b.n	8008936 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2200      	movs	r2, #0
 8008914:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008916:	4b12      	ldr	r3, [pc, #72]	; (8008960 <mem_free+0x11c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	429a      	cmp	r2, r3
 800891e:	d202      	bcs.n	8008926 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008920:	4a0f      	ldr	r2, [pc, #60]	; (8008960 <mem_free+0x11c>)
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008926:	69f8      	ldr	r0, [r7, #28]
 8008928:	f7ff fe5c 	bl	80085e4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800892c:	4809      	ldr	r0, [pc, #36]	; (8008954 <mem_free+0x110>)
 800892e:	f009 fc32 	bl	8012196 <sys_mutex_unlock>
 8008932:	e000      	b.n	8008936 <mem_free+0xf2>
    return;
 8008934:	bf00      	nop
}
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	080135b4 	.word	0x080135b4
 8008940:	080136a4 	.word	0x080136a4
 8008944:	080135fc 	.word	0x080135fc
 8008948:	2000a4a4 	.word	0x2000a4a4
 800894c:	2000a4a8 	.word	0x2000a4a8
 8008950:	080136c8 	.word	0x080136c8
 8008954:	2000a4ac 	.word	0x2000a4ac
 8008958:	080136e4 	.word	0x080136e4
 800895c:	0801370c 	.word	0x0801370c
 8008960:	2000a4b0 	.word	0x2000a4b0

08008964 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008970:	887b      	ldrh	r3, [r7, #2]
 8008972:	3303      	adds	r3, #3
 8008974:	b29b      	uxth	r3, r3
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800897c:	8bfb      	ldrh	r3, [r7, #30]
 800897e:	2b0b      	cmp	r3, #11
 8008980:	d801      	bhi.n	8008986 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008982:	230c      	movs	r3, #12
 8008984:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008986:	8bfb      	ldrh	r3, [r7, #30]
 8008988:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800898c:	d803      	bhi.n	8008996 <mem_trim+0x32>
 800898e:	8bfa      	ldrh	r2, [r7, #30]
 8008990:	887b      	ldrh	r3, [r7, #2]
 8008992:	429a      	cmp	r2, r3
 8008994:	d201      	bcs.n	800899a <mem_trim+0x36>
    return NULL;
 8008996:	2300      	movs	r3, #0
 8008998:	e0d8      	b.n	8008b4c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800899a:	4b6e      	ldr	r3, [pc, #440]	; (8008b54 <mem_trim+0x1f0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d304      	bcc.n	80089ae <mem_trim+0x4a>
 80089a4:	4b6c      	ldr	r3, [pc, #432]	; (8008b58 <mem_trim+0x1f4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d306      	bcc.n	80089bc <mem_trim+0x58>
 80089ae:	4b6b      	ldr	r3, [pc, #428]	; (8008b5c <mem_trim+0x1f8>)
 80089b0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80089b4:	496a      	ldr	r1, [pc, #424]	; (8008b60 <mem_trim+0x1fc>)
 80089b6:	486b      	ldr	r0, [pc, #428]	; (8008b64 <mem_trim+0x200>)
 80089b8:	f009 fe10 	bl	80125dc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80089bc:	4b65      	ldr	r3, [pc, #404]	; (8008b54 <mem_trim+0x1f0>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d304      	bcc.n	80089d0 <mem_trim+0x6c>
 80089c6:	4b64      	ldr	r3, [pc, #400]	; (8008b58 <mem_trim+0x1f4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d307      	bcc.n	80089e0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80089d0:	f009 fc0e 	bl	80121f0 <sys_arch_protect>
 80089d4:	60b8      	str	r0, [r7, #8]
 80089d6:	68b8      	ldr	r0, [r7, #8]
 80089d8:	f009 fc18 	bl	801220c <sys_arch_unprotect>
    return rmem;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	e0b5      	b.n	8008b4c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3b08      	subs	r3, #8
 80089e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80089e6:	69b8      	ldr	r0, [r7, #24]
 80089e8:	f7ff fdea 	bl	80085c0 <mem_to_ptr>
 80089ec:	4603      	mov	r3, r0
 80089ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	881a      	ldrh	r2, [r3, #0]
 80089f4:	8afb      	ldrh	r3, [r7, #22]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3b08      	subs	r3, #8
 80089fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80089fe:	8bfa      	ldrh	r2, [r7, #30]
 8008a00:	8abb      	ldrh	r3, [r7, #20]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d906      	bls.n	8008a14 <mem_trim+0xb0>
 8008a06:	4b55      	ldr	r3, [pc, #340]	; (8008b5c <mem_trim+0x1f8>)
 8008a08:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008a0c:	4956      	ldr	r1, [pc, #344]	; (8008b68 <mem_trim+0x204>)
 8008a0e:	4855      	ldr	r0, [pc, #340]	; (8008b64 <mem_trim+0x200>)
 8008a10:	f009 fde4 	bl	80125dc <iprintf>
  if (newsize > size) {
 8008a14:	8bfa      	ldrh	r2, [r7, #30]
 8008a16:	8abb      	ldrh	r3, [r7, #20]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d901      	bls.n	8008a20 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e095      	b.n	8008b4c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8008a20:	8bfa      	ldrh	r2, [r7, #30]
 8008a22:	8abb      	ldrh	r3, [r7, #20]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d101      	bne.n	8008a2c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	e08f      	b.n	8008b4c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008a2c:	484f      	ldr	r0, [pc, #316]	; (8008b6c <mem_trim+0x208>)
 8008a2e:	f009 fba3 	bl	8012178 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff fdb0 	bl	800859c <ptr_to_mem>
 8008a3c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	791b      	ldrb	r3, [r3, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d13f      	bne.n	8008ac6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008a4e:	d106      	bne.n	8008a5e <mem_trim+0xfa>
 8008a50:	4b42      	ldr	r3, [pc, #264]	; (8008b5c <mem_trim+0x1f8>)
 8008a52:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008a56:	4946      	ldr	r1, [pc, #280]	; (8008b70 <mem_trim+0x20c>)
 8008a58:	4842      	ldr	r0, [pc, #264]	; (8008b64 <mem_trim+0x200>)
 8008a5a:	f009 fdbf 	bl	80125dc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008a64:	8afa      	ldrh	r2, [r7, #22]
 8008a66:	8bfb      	ldrh	r3, [r7, #30]
 8008a68:	4413      	add	r3, r2
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008a70:	4b40      	ldr	r3, [pc, #256]	; (8008b74 <mem_trim+0x210>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d106      	bne.n	8008a88 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8008a7a:	89fb      	ldrh	r3, [r7, #14]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff fd8d 	bl	800859c <ptr_to_mem>
 8008a82:	4603      	mov	r3, r0
 8008a84:	4a3b      	ldr	r2, [pc, #236]	; (8008b74 <mem_trim+0x210>)
 8008a86:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008a88:	89fb      	ldrh	r3, [r7, #14]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fd86 	bl	800859c <ptr_to_mem>
 8008a90:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	2200      	movs	r2, #0
 8008a96:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	89ba      	ldrh	r2, [r7, #12]
 8008a9c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	8afa      	ldrh	r2, [r7, #22]
 8008aa2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	89fa      	ldrh	r2, [r7, #14]
 8008aa8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008ab2:	d047      	beq.n	8008b44 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff fd6f 	bl	800859c <ptr_to_mem>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	89fb      	ldrh	r3, [r7, #14]
 8008ac2:	8053      	strh	r3, [r2, #2]
 8008ac4:	e03e      	b.n	8008b44 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008ac6:	8bfb      	ldrh	r3, [r7, #30]
 8008ac8:	f103 0214 	add.w	r2, r3, #20
 8008acc:	8abb      	ldrh	r3, [r7, #20]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d838      	bhi.n	8008b44 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008ad2:	8afa      	ldrh	r2, [r7, #22]
 8008ad4:	8bfb      	ldrh	r3, [r7, #30]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	3308      	adds	r3, #8
 8008adc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008ae6:	d106      	bne.n	8008af6 <mem_trim+0x192>
 8008ae8:	4b1c      	ldr	r3, [pc, #112]	; (8008b5c <mem_trim+0x1f8>)
 8008aea:	f240 3216 	movw	r2, #790	; 0x316
 8008aee:	4920      	ldr	r1, [pc, #128]	; (8008b70 <mem_trim+0x20c>)
 8008af0:	481c      	ldr	r0, [pc, #112]	; (8008b64 <mem_trim+0x200>)
 8008af2:	f009 fd73 	bl	80125dc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008af6:	89fb      	ldrh	r3, [r7, #14]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff fd4f 	bl	800859c <ptr_to_mem>
 8008afe:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008b00:	4b1c      	ldr	r3, [pc, #112]	; (8008b74 <mem_trim+0x210>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d202      	bcs.n	8008b10 <mem_trim+0x1ac>
      lfree = mem2;
 8008b0a:	4a1a      	ldr	r2, [pc, #104]	; (8008b74 <mem_trim+0x210>)
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	2200      	movs	r2, #0
 8008b14:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	881a      	ldrh	r2, [r3, #0]
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	8afa      	ldrh	r2, [r7, #22]
 8008b22:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	89fa      	ldrh	r2, [r7, #14]
 8008b28:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008b32:	d007      	beq.n	8008b44 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff fd2f 	bl	800859c <ptr_to_mem>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	89fb      	ldrh	r3, [r7, #14]
 8008b42:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008b44:	4809      	ldr	r0, [pc, #36]	; (8008b6c <mem_trim+0x208>)
 8008b46:	f009 fb26 	bl	8012196 <sys_mutex_unlock>
  return rmem;
 8008b4a:	687b      	ldr	r3, [r7, #4]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3720      	adds	r7, #32
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	2000a4a4 	.word	0x2000a4a4
 8008b58:	2000a4a8 	.word	0x2000a4a8
 8008b5c:	080135b4 	.word	0x080135b4
 8008b60:	08013740 	.word	0x08013740
 8008b64:	080135fc 	.word	0x080135fc
 8008b68:	08013758 	.word	0x08013758
 8008b6c:	2000a4ac 	.word	0x2000a4ac
 8008b70:	08013778 	.word	0x08013778
 8008b74:	2000a4b0 	.word	0x2000a4b0

08008b78 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <mem_malloc+0x14>
    return NULL;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e0e2      	b.n	8008d52 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008b8c:	88fb      	ldrh	r3, [r7, #6]
 8008b8e:	3303      	adds	r3, #3
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f023 0303 	bic.w	r3, r3, #3
 8008b96:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008b98:	8bbb      	ldrh	r3, [r7, #28]
 8008b9a:	2b0b      	cmp	r3, #11
 8008b9c:	d801      	bhi.n	8008ba2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008ba2:	8bbb      	ldrh	r3, [r7, #28]
 8008ba4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008ba8:	d803      	bhi.n	8008bb2 <mem_malloc+0x3a>
 8008baa:	8bba      	ldrh	r2, [r7, #28]
 8008bac:	88fb      	ldrh	r3, [r7, #6]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d201      	bcs.n	8008bb6 <mem_malloc+0x3e>
    return NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e0cd      	b.n	8008d52 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008bb6:	4869      	ldr	r0, [pc, #420]	; (8008d5c <mem_malloc+0x1e4>)
 8008bb8:	f009 fade 	bl	8012178 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008bbc:	4b68      	ldr	r3, [pc, #416]	; (8008d60 <mem_malloc+0x1e8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff fcfd 	bl	80085c0 <mem_to_ptr>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	83fb      	strh	r3, [r7, #30]
 8008bca:	e0b7      	b.n	8008d3c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008bcc:	8bfb      	ldrh	r3, [r7, #30]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fce4 	bl	800859c <ptr_to_mem>
 8008bd4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	791b      	ldrb	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f040 80a7 	bne.w	8008d2e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	8bfb      	ldrh	r3, [r7, #30]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	f1a3 0208 	sub.w	r2, r3, #8
 8008bee:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	f0c0 809c 	bcc.w	8008d2e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	8bfb      	ldrh	r3, [r7, #30]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	f1a3 0208 	sub.w	r2, r3, #8
 8008c04:	8bbb      	ldrh	r3, [r7, #28]
 8008c06:	3314      	adds	r3, #20
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d333      	bcc.n	8008c74 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008c0c:	8bfa      	ldrh	r2, [r7, #30]
 8008c0e:	8bbb      	ldrh	r3, [r7, #28]
 8008c10:	4413      	add	r3, r2
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3308      	adds	r3, #8
 8008c16:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008c18:	8a7b      	ldrh	r3, [r7, #18]
 8008c1a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008c1e:	d106      	bne.n	8008c2e <mem_malloc+0xb6>
 8008c20:	4b50      	ldr	r3, [pc, #320]	; (8008d64 <mem_malloc+0x1ec>)
 8008c22:	f240 3287 	movw	r2, #903	; 0x387
 8008c26:	4950      	ldr	r1, [pc, #320]	; (8008d68 <mem_malloc+0x1f0>)
 8008c28:	4850      	ldr	r0, [pc, #320]	; (8008d6c <mem_malloc+0x1f4>)
 8008c2a:	f009 fcd7 	bl	80125dc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008c2e:	8a7b      	ldrh	r3, [r7, #18]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff fcb3 	bl	800859c <ptr_to_mem>
 8008c36:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	881a      	ldrh	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8bfa      	ldrh	r2, [r7, #30]
 8008c4a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	8a7a      	ldrh	r2, [r7, #18]
 8008c50:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2201      	movs	r2, #1
 8008c56:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008c60:	d00b      	beq.n	8008c7a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff fc98 	bl	800859c <ptr_to_mem>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	8a7b      	ldrh	r3, [r7, #18]
 8008c70:	8053      	strh	r3, [r2, #2]
 8008c72:	e002      	b.n	8008c7a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2201      	movs	r2, #1
 8008c78:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008c7a:	4b39      	ldr	r3, [pc, #228]	; (8008d60 <mem_malloc+0x1e8>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d127      	bne.n	8008cd4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008c84:	4b36      	ldr	r3, [pc, #216]	; (8008d60 <mem_malloc+0x1e8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008c8a:	e005      	b.n	8008c98 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff fc83 	bl	800859c <ptr_to_mem>
 8008c96:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	791b      	ldrb	r3, [r3, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d004      	beq.n	8008caa <mem_malloc+0x132>
 8008ca0:	4b33      	ldr	r3, [pc, #204]	; (8008d70 <mem_malloc+0x1f8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d1f0      	bne.n	8008c8c <mem_malloc+0x114>
          }
          lfree = cur;
 8008caa:	4a2d      	ldr	r2, [pc, #180]	; (8008d60 <mem_malloc+0x1e8>)
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <mem_malloc+0x1e8>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	4b2e      	ldr	r3, [pc, #184]	; (8008d70 <mem_malloc+0x1f8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d00b      	beq.n	8008cd4 <mem_malloc+0x15c>
 8008cbc:	4b28      	ldr	r3, [pc, #160]	; (8008d60 <mem_malloc+0x1e8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	791b      	ldrb	r3, [r3, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d006      	beq.n	8008cd4 <mem_malloc+0x15c>
 8008cc6:	4b27      	ldr	r3, [pc, #156]	; (8008d64 <mem_malloc+0x1ec>)
 8008cc8:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008ccc:	4929      	ldr	r1, [pc, #164]	; (8008d74 <mem_malloc+0x1fc>)
 8008cce:	4827      	ldr	r0, [pc, #156]	; (8008d6c <mem_malloc+0x1f4>)
 8008cd0:	f009 fc84 	bl	80125dc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008cd4:	4821      	ldr	r0, [pc, #132]	; (8008d5c <mem_malloc+0x1e4>)
 8008cd6:	f009 fa5e 	bl	8012196 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008cda:	8bba      	ldrh	r2, [r7, #28]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	4413      	add	r3, r2
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	4a23      	ldr	r2, [pc, #140]	; (8008d70 <mem_malloc+0x1f8>)
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d906      	bls.n	8008cf8 <mem_malloc+0x180>
 8008cea:	4b1e      	ldr	r3, [pc, #120]	; (8008d64 <mem_malloc+0x1ec>)
 8008cec:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008cf0:	4921      	ldr	r1, [pc, #132]	; (8008d78 <mem_malloc+0x200>)
 8008cf2:	481e      	ldr	r0, [pc, #120]	; (8008d6c <mem_malloc+0x1f4>)
 8008cf4:	f009 fc72 	bl	80125dc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d006      	beq.n	8008d10 <mem_malloc+0x198>
 8008d02:	4b18      	ldr	r3, [pc, #96]	; (8008d64 <mem_malloc+0x1ec>)
 8008d04:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008d08:	491c      	ldr	r1, [pc, #112]	; (8008d7c <mem_malloc+0x204>)
 8008d0a:	4818      	ldr	r0, [pc, #96]	; (8008d6c <mem_malloc+0x1f4>)
 8008d0c:	f009 fc66 	bl	80125dc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f003 0303 	and.w	r3, r3, #3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d006      	beq.n	8008d28 <mem_malloc+0x1b0>
 8008d1a:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <mem_malloc+0x1ec>)
 8008d1c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008d20:	4917      	ldr	r1, [pc, #92]	; (8008d80 <mem_malloc+0x208>)
 8008d22:	4812      	ldr	r0, [pc, #72]	; (8008d6c <mem_malloc+0x1f4>)
 8008d24:	f009 fc5a 	bl	80125dc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	3308      	adds	r3, #8
 8008d2c:	e011      	b.n	8008d52 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8008d2e:	8bfb      	ldrh	r3, [r7, #30]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff fc33 	bl	800859c <ptr_to_mem>
 8008d36:	4603      	mov	r3, r0
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008d3c:	8bfa      	ldrh	r2, [r7, #30]
 8008d3e:	8bbb      	ldrh	r3, [r7, #28]
 8008d40:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8008d44:	429a      	cmp	r2, r3
 8008d46:	f4ff af41 	bcc.w	8008bcc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008d4a:	4804      	ldr	r0, [pc, #16]	; (8008d5c <mem_malloc+0x1e4>)
 8008d4c:	f009 fa23 	bl	8012196 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3720      	adds	r7, #32
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	2000a4ac 	.word	0x2000a4ac
 8008d60:	2000a4b0 	.word	0x2000a4b0
 8008d64:	080135b4 	.word	0x080135b4
 8008d68:	08013778 	.word	0x08013778
 8008d6c:	080135fc 	.word	0x080135fc
 8008d70:	2000a4a8 	.word	0x2000a4a8
 8008d74:	0801378c 	.word	0x0801378c
 8008d78:	080137a8 	.word	0x080137a8
 8008d7c:	080137d8 	.word	0x080137d8
 8008d80:	08013808 	.word	0x08013808

08008d84 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	3303      	adds	r3, #3
 8008d9a:	f023 0303 	bic.w	r3, r3, #3
 8008d9e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e011      	b.n	8008dca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	60fb      	str	r3, [r7, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	885b      	ldrh	r3, [r3, #2]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	dbe7      	blt.n	8008da6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008dea:	2300      	movs	r3, #0
 8008dec:	80fb      	strh	r3, [r7, #6]
 8008dee:	e009      	b.n	8008e04 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <memp_init+0x30>)
 8008df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7ff ffc3 	bl	8008d84 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	3301      	adds	r3, #1
 8008e02:	80fb      	strh	r3, [r7, #6]
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	2b0c      	cmp	r3, #12
 8008e08:	d9f2      	bls.n	8008df0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	08016034 	.word	0x08016034

08008e18 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008e20:	f009 f9e6 	bl	80121f0 <sys_arch_protect>
 8008e24:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d015      	beq.n	8008e60 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	6812      	ldr	r2, [r2, #0]
 8008e3c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	f003 0303 	and.w	r3, r3, #3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <do_memp_malloc_pool+0x3e>
 8008e48:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <do_memp_malloc_pool+0x58>)
 8008e4a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008e4e:	4909      	ldr	r1, [pc, #36]	; (8008e74 <do_memp_malloc_pool+0x5c>)
 8008e50:	4809      	ldr	r0, [pc, #36]	; (8008e78 <do_memp_malloc_pool+0x60>)
 8008e52:	f009 fbc3 	bl	80125dc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f009 f9d8 	bl	801220c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	e003      	b.n	8008e68 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f009 f9d3 	bl	801220c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	0801382c 	.word	0x0801382c
 8008e74:	0801385c 	.word	0x0801385c
 8008e78:	08013880 	.word	0x08013880

08008e7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008e86:	79fb      	ldrb	r3, [r7, #7]
 8008e88:	2b0c      	cmp	r3, #12
 8008e8a:	d908      	bls.n	8008e9e <memp_malloc+0x22>
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <memp_malloc+0x3c>)
 8008e8e:	f240 1257 	movw	r2, #343	; 0x157
 8008e92:	490a      	ldr	r1, [pc, #40]	; (8008ebc <memp_malloc+0x40>)
 8008e94:	480a      	ldr	r0, [pc, #40]	; (8008ec0 <memp_malloc+0x44>)
 8008e96:	f009 fba1 	bl	80125dc <iprintf>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e008      	b.n	8008eb0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	4a08      	ldr	r2, [pc, #32]	; (8008ec4 <memp_malloc+0x48>)
 8008ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff ffb6 	bl	8008e18 <do_memp_malloc_pool>
 8008eac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008eae:	68fb      	ldr	r3, [r7, #12]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	0801382c 	.word	0x0801382c
 8008ebc:	080138bc 	.word	0x080138bc
 8008ec0:	08013880 	.word	0x08013880
 8008ec4:	08016034 	.word	0x08016034

08008ec8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d006      	beq.n	8008eea <do_memp_free_pool+0x22>
 8008edc:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <do_memp_free_pool+0x4c>)
 8008ede:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008ee2:	490d      	ldr	r1, [pc, #52]	; (8008f18 <do_memp_free_pool+0x50>)
 8008ee4:	480d      	ldr	r0, [pc, #52]	; (8008f1c <do_memp_free_pool+0x54>)
 8008ee6:	f009 fb79 	bl	80125dc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008eee:	f009 f97f 	bl	80121f0 <sys_arch_protect>
 8008ef2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008f06:	68b8      	ldr	r0, [r7, #8]
 8008f08:	f009 f980 	bl	801220c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008f0c:	bf00      	nop
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	0801382c 	.word	0x0801382c
 8008f18:	080138dc 	.word	0x080138dc
 8008f1c:	08013880 	.word	0x08013880

08008f20 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	6039      	str	r1, [r7, #0]
 8008f2a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	2b0c      	cmp	r3, #12
 8008f30:	d907      	bls.n	8008f42 <memp_free+0x22>
 8008f32:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <memp_free+0x44>)
 8008f34:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008f38:	490b      	ldr	r1, [pc, #44]	; (8008f68 <memp_free+0x48>)
 8008f3a:	480c      	ldr	r0, [pc, #48]	; (8008f6c <memp_free+0x4c>)
 8008f3c:	f009 fb4e 	bl	80125dc <iprintf>
 8008f40:	e00c      	b.n	8008f5c <memp_free+0x3c>

  if (mem == NULL) {
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	4a09      	ldr	r2, [pc, #36]	; (8008f70 <memp_free+0x50>)
 8008f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff ffb8 	bl	8008ec8 <do_memp_free_pool>
 8008f58:	e000      	b.n	8008f5c <memp_free+0x3c>
    return;
 8008f5a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	0801382c 	.word	0x0801382c
 8008f68:	080138fc 	.word	0x080138fc
 8008f6c:	08013880 	.word	0x08013880
 8008f70:	08016034 	.word	0x08016034

08008f74 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008f78:	bf00      	nop
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
	...

08008f84 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d108      	bne.n	8008faa <netif_add+0x26>
 8008f98:	4b57      	ldr	r3, [pc, #348]	; (80090f8 <netif_add+0x174>)
 8008f9a:	f240 1227 	movw	r2, #295	; 0x127
 8008f9e:	4957      	ldr	r1, [pc, #348]	; (80090fc <netif_add+0x178>)
 8008fa0:	4857      	ldr	r0, [pc, #348]	; (8009100 <netif_add+0x17c>)
 8008fa2:	f009 fb1b 	bl	80125dc <iprintf>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e0a2      	b.n	80090f0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d108      	bne.n	8008fc2 <netif_add+0x3e>
 8008fb0:	4b51      	ldr	r3, [pc, #324]	; (80090f8 <netif_add+0x174>)
 8008fb2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008fb6:	4953      	ldr	r1, [pc, #332]	; (8009104 <netif_add+0x180>)
 8008fb8:	4851      	ldr	r0, [pc, #324]	; (8009100 <netif_add+0x17c>)
 8008fba:	f009 fb0f 	bl	80125dc <iprintf>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	e096      	b.n	80090f0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008fc8:	4b4f      	ldr	r3, [pc, #316]	; (8009108 <netif_add+0x184>)
 8008fca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008fd2:	4b4d      	ldr	r3, [pc, #308]	; (8009108 <netif_add+0x184>)
 8008fd4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008fdc:	4b4a      	ldr	r3, [pc, #296]	; (8009108 <netif_add+0x184>)
 8008fde:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4a45      	ldr	r2, [pc, #276]	; (800910c <netif_add+0x188>)
 8008ff6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a3a      	ldr	r2, [r7, #32]
 8009010:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009012:	4b3f      	ldr	r3, [pc, #252]	; (8009110 <netif_add+0x18c>)
 8009014:	781a      	ldrb	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009020:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f913 	bl	8009254 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	4798      	blx	r3
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <netif_add+0xba>
    return NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	e058      	b.n	80090f0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009044:	2bff      	cmp	r3, #255	; 0xff
 8009046:	d103      	bne.n	8009050 <netif_add+0xcc>
        netif->num = 0;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009054:	4b2f      	ldr	r3, [pc, #188]	; (8009114 <netif_add+0x190>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	e02b      	b.n	80090b4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	429a      	cmp	r2, r3
 8009062:	d106      	bne.n	8009072 <netif_add+0xee>
 8009064:	4b24      	ldr	r3, [pc, #144]	; (80090f8 <netif_add+0x174>)
 8009066:	f240 128b 	movw	r2, #395	; 0x18b
 800906a:	492b      	ldr	r1, [pc, #172]	; (8009118 <netif_add+0x194>)
 800906c:	4824      	ldr	r0, [pc, #144]	; (8009100 <netif_add+0x17c>)
 800906e:	f009 fab5 	bl	80125dc <iprintf>
        num_netifs++;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	3301      	adds	r3, #1
 8009076:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	2bff      	cmp	r3, #255	; 0xff
 800907c:	dd06      	ble.n	800908c <netif_add+0x108>
 800907e:	4b1e      	ldr	r3, [pc, #120]	; (80090f8 <netif_add+0x174>)
 8009080:	f240 128d 	movw	r2, #397	; 0x18d
 8009084:	4925      	ldr	r1, [pc, #148]	; (800911c <netif_add+0x198>)
 8009086:	481e      	ldr	r0, [pc, #120]	; (8009100 <netif_add+0x17c>)
 8009088:	f009 faa8 	bl	80125dc <iprintf>
        if (netif2->num == netif->num) {
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009098:	429a      	cmp	r2, r3
 800909a:	d108      	bne.n	80090ae <netif_add+0x12a>
          netif->num++;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090a2:	3301      	adds	r3, #1
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80090ac:	e005      	b.n	80090ba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1d0      	bne.n	800905c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1be      	bne.n	800903e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090c6:	2bfe      	cmp	r3, #254	; 0xfe
 80090c8:	d103      	bne.n	80090d2 <netif_add+0x14e>
    netif_num = 0;
 80090ca:	4b11      	ldr	r3, [pc, #68]	; (8009110 <netif_add+0x18c>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	e006      	b.n	80090e0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090d8:	3301      	adds	r3, #1
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <netif_add+0x18c>)
 80090de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80090e0:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <netif_add+0x190>)
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80090e8:	4a0a      	ldr	r2, [pc, #40]	; (8009114 <netif_add+0x190>)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80090ee:	68fb      	ldr	r3, [r7, #12]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	08013918 	.word	0x08013918
 80090fc:	080139ac 	.word	0x080139ac
 8009100:	08013968 	.word	0x08013968
 8009104:	080139c8 	.word	0x080139c8
 8009108:	080160a8 	.word	0x080160a8
 800910c:	0800952f 	.word	0x0800952f
 8009110:	2000d588 	.word	0x2000d588
 8009114:	2000d580 	.word	0x2000d580
 8009118:	080139ec 	.word	0x080139ec
 800911c:	08013a00 	.word	0x08013a00

08009120 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f002 fb7d 	bl	800b82c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f006 fc91 	bl	800fa5c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <netif_do_set_ipaddr+0x20>
 8009156:	4b1d      	ldr	r3, [pc, #116]	; (80091cc <netif_do_set_ipaddr+0x88>)
 8009158:	f240 12cb 	movw	r2, #459	; 0x1cb
 800915c:	491c      	ldr	r1, [pc, #112]	; (80091d0 <netif_do_set_ipaddr+0x8c>)
 800915e:	481d      	ldr	r0, [pc, #116]	; (80091d4 <netif_do_set_ipaddr+0x90>)
 8009160:	f009 fa3c 	bl	80125dc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d106      	bne.n	8009178 <netif_do_set_ipaddr+0x34>
 800916a:	4b18      	ldr	r3, [pc, #96]	; (80091cc <netif_do_set_ipaddr+0x88>)
 800916c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009170:	4917      	ldr	r1, [pc, #92]	; (80091d0 <netif_do_set_ipaddr+0x8c>)
 8009172:	4818      	ldr	r0, [pc, #96]	; (80091d4 <netif_do_set_ipaddr+0x90>)
 8009174:	f009 fa32 	bl	80125dc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3304      	adds	r3, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d01c      	beq.n	80091c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3304      	adds	r3, #4
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009196:	f107 0314 	add.w	r3, r7, #20
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff ffbf 	bl	8009120 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <netif_do_set_ipaddr+0x6a>
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	e000      	b.n	80091b0 <netif_do_set_ipaddr+0x6c>
 80091ae:	2300      	movs	r3, #0
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80091b4:	2101      	movs	r1, #1
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f8d2 	bl	8009360 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80091bc:	2301      	movs	r3, #1
 80091be:	e000      	b.n	80091c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	08013918 	.word	0x08013918
 80091d0:	08013a30 	.word	0x08013a30
 80091d4:	08013968 	.word	0x08013968

080091d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3308      	adds	r3, #8
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d00a      	beq.n	8009208 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <netif_do_set_netmask+0x26>
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	e000      	b.n	8009200 <netif_do_set_netmask+0x28>
 80091fe:	2300      	movs	r3, #0
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009204:	2301      	movs	r3, #1
 8009206:	e000      	b.n	800920a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009216:	b480      	push	{r7}
 8009218:	b085      	sub	sp, #20
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	330c      	adds	r3, #12
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	429a      	cmp	r2, r3
 800922e:	d00a      	beq.n	8009246 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <netif_do_set_gw+0x26>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	e000      	b.n	800923e <netif_do_set_gw+0x28>
 800923c:	2300      	movs	r3, #0
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009270:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <netif_set_addr+0x90>)
 8009272:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800927a:	4b1a      	ldr	r3, [pc, #104]	; (80092e4 <netif_set_addr+0x90>)
 800927c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009284:	4b17      	ldr	r3, [pc, #92]	; (80092e4 <netif_set_addr+0x90>)
 8009286:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <netif_set_addr+0x42>
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <netif_set_addr+0x46>
 8009296:	2301      	movs	r3, #1
 8009298:	e000      	b.n	800929c <netif_set_addr+0x48>
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d006      	beq.n	80092b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80092a4:	f107 0310 	add.w	r3, r7, #16
 80092a8:	461a      	mov	r2, r3
 80092aa:	68b9      	ldr	r1, [r7, #8]
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7ff ff49 	bl	8009144 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80092b2:	69fa      	ldr	r2, [r7, #28]
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7ff ff8e 	bl	80091d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f7ff ffa8 	bl	8009216 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d106      	bne.n	80092da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80092cc:	f107 0310 	add.w	r3, r7, #16
 80092d0:	461a      	mov	r2, r3
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff ff35 	bl	8009144 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80092da:	bf00      	nop
 80092dc:	3720      	adds	r7, #32
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	080160a8 	.word	0x080160a8

080092e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80092f0:	4a04      	ldr	r2, [pc, #16]	; (8009304 <netif_set_default+0x1c>)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	2000d584 	.word	0x2000d584

08009308 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d107      	bne.n	8009326 <netif_set_up+0x1e>
 8009316:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <netif_set_up+0x4c>)
 8009318:	f44f 7254 	mov.w	r2, #848	; 0x350
 800931c:	490e      	ldr	r1, [pc, #56]	; (8009358 <netif_set_up+0x50>)
 800931e:	480f      	ldr	r0, [pc, #60]	; (800935c <netif_set_up+0x54>)
 8009320:	f009 f95c 	bl	80125dc <iprintf>
 8009324:	e013      	b.n	800934e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10c      	bne.n	800934e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800933a:	f043 0301 	orr.w	r3, r3, #1
 800933e:	b2da      	uxtb	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009346:	2103      	movs	r1, #3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f809 	bl	8009360 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	08013918 	.word	0x08013918
 8009358:	08013aa0 	.word	0x08013aa0
 800935c:	08013968 	.word	0x08013968

08009360 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d106      	bne.n	8009380 <netif_issue_reports+0x20>
 8009372:	4b18      	ldr	r3, [pc, #96]	; (80093d4 <netif_issue_reports+0x74>)
 8009374:	f240 326d 	movw	r2, #877	; 0x36d
 8009378:	4917      	ldr	r1, [pc, #92]	; (80093d8 <netif_issue_reports+0x78>)
 800937a:	4818      	ldr	r0, [pc, #96]	; (80093dc <netif_issue_reports+0x7c>)
 800937c:	f009 f92e 	bl	80125dc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b00      	cmp	r3, #0
 800938c:	d01e      	beq.n	80093cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009394:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009398:	2b00      	cmp	r3, #0
 800939a:	d017      	beq.n	80093cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800939c:	78fb      	ldrb	r3, [r7, #3]
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d013      	beq.n	80093ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	3304      	adds	r3, #4
 80093aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00e      	beq.n	80093ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093b6:	f003 0308 	and.w	r3, r3, #8
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f007 fab3 	bl	8010930 <etharp_request>
 80093ca:	e000      	b.n	80093ce <netif_issue_reports+0x6e>
    return;
 80093cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	08013918 	.word	0x08013918
 80093d8:	08013abc 	.word	0x08013abc
 80093dc:	08013968 	.word	0x08013968

080093e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d107      	bne.n	80093fe <netif_set_down+0x1e>
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <netif_set_down+0x58>)
 80093f0:	f240 329b 	movw	r2, #923	; 0x39b
 80093f4:	4911      	ldr	r1, [pc, #68]	; (800943c <netif_set_down+0x5c>)
 80093f6:	4812      	ldr	r0, [pc, #72]	; (8009440 <netif_set_down+0x60>)
 80093f8:	f009 f8f0 	bl	80125dc <iprintf>
 80093fc:	e019      	b.n	8009432 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	d012      	beq.n	8009432 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009412:	f023 0301 	bic.w	r3, r3, #1
 8009416:	b2da      	uxtb	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009424:	f003 0308 	and.w	r3, r3, #8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f006 fe3d 	bl	80100ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	08013918 	.word	0x08013918
 800943c:	08013ae0 	.word	0x08013ae0
 8009440:	08013968 	.word	0x08013968

08009444 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d107      	bne.n	8009462 <netif_set_link_up+0x1e>
 8009452:	4b13      	ldr	r3, [pc, #76]	; (80094a0 <netif_set_link_up+0x5c>)
 8009454:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009458:	4912      	ldr	r1, [pc, #72]	; (80094a4 <netif_set_link_up+0x60>)
 800945a:	4813      	ldr	r0, [pc, #76]	; (80094a8 <netif_set_link_up+0x64>)
 800945c:	f009 f8be 	bl	80125dc <iprintf>
 8009460:	e01b      	b.n	800949a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b00      	cmp	r3, #0
 800946e:	d114      	bne.n	800949a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009476:	f043 0304 	orr.w	r3, r3, #4
 800947a:	b2da      	uxtb	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009482:	2103      	movs	r1, #3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff ff6b 	bl	8009360 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <netif_set_link_up+0x56>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	08013918 	.word	0x08013918
 80094a4:	08013b00 	.word	0x08013b00
 80094a8:	08013968 	.word	0x08013968

080094ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d107      	bne.n	80094ca <netif_set_link_down+0x1e>
 80094ba:	4b11      	ldr	r3, [pc, #68]	; (8009500 <netif_set_link_down+0x54>)
 80094bc:	f240 4206 	movw	r2, #1030	; 0x406
 80094c0:	4910      	ldr	r1, [pc, #64]	; (8009504 <netif_set_link_down+0x58>)
 80094c2:	4811      	ldr	r0, [pc, #68]	; (8009508 <netif_set_link_down+0x5c>)
 80094c4:	f009 f88a 	bl	80125dc <iprintf>
 80094c8:	e017      	b.n	80094fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d010      	beq.n	80094fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094de:	f023 0304 	bic.w	r3, r3, #4
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <netif_set_link_down+0x4e>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	08013918 	.word	0x08013918
 8009504:	08013b24 	.word	0x08013b24
 8009508:	08013968 	.word	0x08013968

0800950c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	61da      	str	r2, [r3, #28]
  }
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800952e:	b480      	push	{r7}
 8009530:	b085      	sub	sp, #20
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800953a:	f06f 030b 	mvn.w	r3, #11
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
	...

0800954c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d013      	beq.n	8009584 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800955c:	4b0d      	ldr	r3, [pc, #52]	; (8009594 <netif_get_by_index+0x48>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e00c      	b.n	800957e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800956a:	3301      	adds	r3, #1
 800956c:	b2db      	uxtb	r3, r3
 800956e:	79fa      	ldrb	r2, [r7, #7]
 8009570:	429a      	cmp	r2, r3
 8009572:	d101      	bne.n	8009578 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	e006      	b.n	8009586 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1ef      	bne.n	8009564 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	2000d580 	.word	0x2000d580

08009598 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800959e:	f008 fe27 	bl	80121f0 <sys_arch_protect>
 80095a2:	6038      	str	r0, [r7, #0]
 80095a4:	4b0d      	ldr	r3, [pc, #52]	; (80095dc <pbuf_free_ooseq+0x44>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	701a      	strb	r2, [r3, #0]
 80095aa:	6838      	ldr	r0, [r7, #0]
 80095ac:	f008 fe2e 	bl	801220c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80095b0:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <pbuf_free_ooseq+0x48>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	607b      	str	r3, [r7, #4]
 80095b6:	e00a      	b.n	80095ce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f002 f971 	bl	800b8a8 <tcp_free_ooseq>
      return;
 80095c6:	e005      	b.n	80095d4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1f1      	bne.n	80095b8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	2000d589 	.word	0x2000d589
 80095e0:	2000d598 	.word	0x2000d598

080095e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80095ec:	f7ff ffd4 	bl	8009598 <pbuf_free_ooseq>
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80095fe:	f008 fdf7 	bl	80121f0 <sys_arch_protect>
 8009602:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <pbuf_pool_is_empty+0x4c>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800960a:	4b0e      	ldr	r3, [pc, #56]	; (8009644 <pbuf_pool_is_empty+0x4c>)
 800960c:	2201      	movs	r2, #1
 800960e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f008 fdfb 	bl	801220c <sys_arch_unprotect>

  if (!queued) {
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10f      	bne.n	800963c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800961c:	2100      	movs	r1, #0
 800961e:	480a      	ldr	r0, [pc, #40]	; (8009648 <pbuf_pool_is_empty+0x50>)
 8009620:	f7fe feec 	bl	80083fc <tcpip_try_callback>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d008      	beq.n	800963c <pbuf_pool_is_empty+0x44>
 800962a:	f008 fde1 	bl	80121f0 <sys_arch_protect>
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <pbuf_pool_is_empty+0x4c>)
 8009632:	2200      	movs	r2, #0
 8009634:	701a      	strb	r2, [r3, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f008 fde8 	bl	801220c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	2000d589 	.word	0x2000d589
 8009648:	080095e5 	.word	0x080095e5

0800964c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	4611      	mov	r1, r2
 8009658:	461a      	mov	r2, r3
 800965a:	460b      	mov	r3, r1
 800965c:	80fb      	strh	r3, [r7, #6]
 800965e:	4613      	mov	r3, r2
 8009660:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	88fa      	ldrh	r2, [r7, #6]
 8009672:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	88ba      	ldrh	r2, [r7, #4]
 8009678:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800967a:	8b3b      	ldrh	r3, [r7, #24]
 800967c:	b2da      	uxtb	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	7f3a      	ldrb	r2, [r7, #28]
 8009686:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	73da      	strb	r2, [r3, #15]
}
 8009694:	bf00      	nop
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08c      	sub	sp, #48	; 0x30
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	4603      	mov	r3, r0
 80096a8:	71fb      	strb	r3, [r7, #7]
 80096aa:	460b      	mov	r3, r1
 80096ac:	80bb      	strh	r3, [r7, #4]
 80096ae:	4613      	mov	r3, r2
 80096b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80096b6:	887b      	ldrh	r3, [r7, #2]
 80096b8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80096bc:	d07f      	beq.n	80097be <pbuf_alloc+0x11e>
 80096be:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80096c2:	f300 80c8 	bgt.w	8009856 <pbuf_alloc+0x1b6>
 80096c6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80096ca:	d010      	beq.n	80096ee <pbuf_alloc+0x4e>
 80096cc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80096d0:	f300 80c1 	bgt.w	8009856 <pbuf_alloc+0x1b6>
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d002      	beq.n	80096de <pbuf_alloc+0x3e>
 80096d8:	2b41      	cmp	r3, #65	; 0x41
 80096da:	f040 80bc 	bne.w	8009856 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80096de:	887a      	ldrh	r2, [r7, #2]
 80096e0:	88bb      	ldrh	r3, [r7, #4]
 80096e2:	4619      	mov	r1, r3
 80096e4:	2000      	movs	r0, #0
 80096e6:	f000 f8d1 	bl	800988c <pbuf_alloc_reference>
 80096ea:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80096ec:	e0bd      	b.n	800986a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80096f6:	88bb      	ldrh	r3, [r7, #4]
 80096f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80096fa:	200c      	movs	r0, #12
 80096fc:	f7ff fbbe 	bl	8008e7c <memp_malloc>
 8009700:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d109      	bne.n	800971c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009708:	f7ff ff76 	bl	80095f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009714:	f000 faa8 	bl	8009c68 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009718:	2300      	movs	r3, #0
 800971a:	e0a7      	b.n	800986c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800971c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800971e:	3303      	adds	r3, #3
 8009720:	b29b      	uxth	r3, r3
 8009722:	f023 0303 	bic.w	r3, r3, #3
 8009726:	b29b      	uxth	r3, r3
 8009728:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800972c:	b29b      	uxth	r3, r3
 800972e:	8b7a      	ldrh	r2, [r7, #26]
 8009730:	4293      	cmp	r3, r2
 8009732:	bf28      	it	cs
 8009734:	4613      	movcs	r3, r2
 8009736:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800973a:	3310      	adds	r3, #16
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	4413      	add	r3, r2
 8009740:	3303      	adds	r3, #3
 8009742:	f023 0303 	bic.w	r3, r3, #3
 8009746:	4618      	mov	r0, r3
 8009748:	89f9      	ldrh	r1, [r7, #14]
 800974a:	8b7a      	ldrh	r2, [r7, #26]
 800974c:	2300      	movs	r3, #0
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	887b      	ldrh	r3, [r7, #2]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	460b      	mov	r3, r1
 8009756:	4601      	mov	r1, r0
 8009758:	6938      	ldr	r0, [r7, #16]
 800975a:	f7ff ff77 	bl	800964c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f003 0303 	and.w	r3, r3, #3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d006      	beq.n	8009778 <pbuf_alloc+0xd8>
 800976a:	4b42      	ldr	r3, [pc, #264]	; (8009874 <pbuf_alloc+0x1d4>)
 800976c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009770:	4941      	ldr	r1, [pc, #260]	; (8009878 <pbuf_alloc+0x1d8>)
 8009772:	4842      	ldr	r0, [pc, #264]	; (800987c <pbuf_alloc+0x1dc>)
 8009774:	f008 ff32 	bl	80125dc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009778:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800977a:	3303      	adds	r3, #3
 800977c:	f023 0303 	bic.w	r3, r3, #3
 8009780:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009784:	d106      	bne.n	8009794 <pbuf_alloc+0xf4>
 8009786:	4b3b      	ldr	r3, [pc, #236]	; (8009874 <pbuf_alloc+0x1d4>)
 8009788:	f44f 7281 	mov.w	r2, #258	; 0x102
 800978c:	493c      	ldr	r1, [pc, #240]	; (8009880 <pbuf_alloc+0x1e0>)
 800978e:	483b      	ldr	r0, [pc, #236]	; (800987c <pbuf_alloc+0x1dc>)
 8009790:	f008 ff24 	bl	80125dc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	2b00      	cmp	r3, #0
 8009798:	d102      	bne.n	80097a0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
 800979e:	e002      	b.n	80097a6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80097aa:	8b7a      	ldrh	r2, [r7, #26]
 80097ac:	89fb      	ldrh	r3, [r7, #14]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80097b6:	8b7b      	ldrh	r3, [r7, #26]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d19e      	bne.n	80096fa <pbuf_alloc+0x5a>
      break;
 80097bc:	e055      	b.n	800986a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80097be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097c0:	3303      	adds	r3, #3
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	f023 0303 	bic.w	r3, r3, #3
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	88bb      	ldrh	r3, [r7, #4]
 80097cc:	3303      	adds	r3, #3
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	f023 0303 	bic.w	r3, r3, #3
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80097da:	8b3b      	ldrh	r3, [r7, #24]
 80097dc:	3310      	adds	r3, #16
 80097de:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80097e0:	8b3a      	ldrh	r2, [r7, #24]
 80097e2:	88bb      	ldrh	r3, [r7, #4]
 80097e4:	3303      	adds	r3, #3
 80097e6:	f023 0303 	bic.w	r3, r3, #3
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d306      	bcc.n	80097fc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80097ee:	8afa      	ldrh	r2, [r7, #22]
 80097f0:	88bb      	ldrh	r3, [r7, #4]
 80097f2:	3303      	adds	r3, #3
 80097f4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d201      	bcs.n	8009800 <pbuf_alloc+0x160>
        return NULL;
 80097fc:	2300      	movs	r3, #0
 80097fe:	e035      	b.n	800986c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009800:	8afb      	ldrh	r3, [r7, #22]
 8009802:	4618      	mov	r0, r3
 8009804:	f7ff f9b8 	bl	8008b78 <mem_malloc>
 8009808:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <pbuf_alloc+0x174>
        return NULL;
 8009810:	2300      	movs	r3, #0
 8009812:	e02b      	b.n	800986c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009814:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009816:	3310      	adds	r3, #16
 8009818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981a:	4413      	add	r3, r2
 800981c:	3303      	adds	r3, #3
 800981e:	f023 0303 	bic.w	r3, r3, #3
 8009822:	4618      	mov	r0, r3
 8009824:	88b9      	ldrh	r1, [r7, #4]
 8009826:	88ba      	ldrh	r2, [r7, #4]
 8009828:	2300      	movs	r3, #0
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	887b      	ldrh	r3, [r7, #2]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	460b      	mov	r3, r1
 8009832:	4601      	mov	r1, r0
 8009834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009836:	f7ff ff09 	bl	800964c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d010      	beq.n	8009868 <pbuf_alloc+0x1c8>
 8009846:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <pbuf_alloc+0x1d4>)
 8009848:	f44f 7291 	mov.w	r2, #290	; 0x122
 800984c:	490d      	ldr	r1, [pc, #52]	; (8009884 <pbuf_alloc+0x1e4>)
 800984e:	480b      	ldr	r0, [pc, #44]	; (800987c <pbuf_alloc+0x1dc>)
 8009850:	f008 fec4 	bl	80125dc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009854:	e008      	b.n	8009868 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009856:	4b07      	ldr	r3, [pc, #28]	; (8009874 <pbuf_alloc+0x1d4>)
 8009858:	f240 1227 	movw	r2, #295	; 0x127
 800985c:	490a      	ldr	r1, [pc, #40]	; (8009888 <pbuf_alloc+0x1e8>)
 800985e:	4807      	ldr	r0, [pc, #28]	; (800987c <pbuf_alloc+0x1dc>)
 8009860:	f008 febc 	bl	80125dc <iprintf>
      return NULL;
 8009864:	2300      	movs	r3, #0
 8009866:	e001      	b.n	800986c <pbuf_alloc+0x1cc>
      break;
 8009868:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800986c:	4618      	mov	r0, r3
 800986e:	3728      	adds	r7, #40	; 0x28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	08013b48 	.word	0x08013b48
 8009878:	08013b78 	.word	0x08013b78
 800987c:	08013ba8 	.word	0x08013ba8
 8009880:	08013bd0 	.word	0x08013bd0
 8009884:	08013c04 	.word	0x08013c04
 8009888:	08013c30 	.word	0x08013c30

0800988c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af02      	add	r7, sp, #8
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	807b      	strh	r3, [r7, #2]
 8009898:	4613      	mov	r3, r2
 800989a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800989c:	883b      	ldrh	r3, [r7, #0]
 800989e:	2b41      	cmp	r3, #65	; 0x41
 80098a0:	d009      	beq.n	80098b6 <pbuf_alloc_reference+0x2a>
 80098a2:	883b      	ldrh	r3, [r7, #0]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d006      	beq.n	80098b6 <pbuf_alloc_reference+0x2a>
 80098a8:	4b0f      	ldr	r3, [pc, #60]	; (80098e8 <pbuf_alloc_reference+0x5c>)
 80098aa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80098ae:	490f      	ldr	r1, [pc, #60]	; (80098ec <pbuf_alloc_reference+0x60>)
 80098b0:	480f      	ldr	r0, [pc, #60]	; (80098f0 <pbuf_alloc_reference+0x64>)
 80098b2:	f008 fe93 	bl	80125dc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80098b6:	200b      	movs	r0, #11
 80098b8:	f7ff fae0 	bl	8008e7c <memp_malloc>
 80098bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80098c4:	2300      	movs	r3, #0
 80098c6:	e00b      	b.n	80098e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80098c8:	8879      	ldrh	r1, [r7, #2]
 80098ca:	887a      	ldrh	r2, [r7, #2]
 80098cc:	2300      	movs	r3, #0
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	883b      	ldrh	r3, [r7, #0]
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	460b      	mov	r3, r1
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f7ff feb7 	bl	800964c <pbuf_init_alloced_pbuf>
  return p;
 80098de:	68fb      	ldr	r3, [r7, #12]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	08013b48 	.word	0x08013b48
 80098ec:	08013c4c 	.word	0x08013c4c
 80098f0:	08013ba8 	.word	0x08013ba8

080098f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af02      	add	r7, sp, #8
 80098fa:	607b      	str	r3, [r7, #4]
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
 8009900:	460b      	mov	r3, r1
 8009902:	81bb      	strh	r3, [r7, #12]
 8009904:	4613      	mov	r3, r2
 8009906:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800990c:	8a7b      	ldrh	r3, [r7, #18]
 800990e:	3303      	adds	r3, #3
 8009910:	f023 0203 	bic.w	r2, r3, #3
 8009914:	89bb      	ldrh	r3, [r7, #12]
 8009916:	441a      	add	r2, r3
 8009918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800991a:	429a      	cmp	r2, r3
 800991c:	d901      	bls.n	8009922 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800991e:	2300      	movs	r3, #0
 8009920:	e018      	b.n	8009954 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d007      	beq.n	8009938 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009928:	8a7b      	ldrh	r3, [r7, #18]
 800992a:	3303      	adds	r3, #3
 800992c:	f023 0303 	bic.w	r3, r3, #3
 8009930:	6a3a      	ldr	r2, [r7, #32]
 8009932:	4413      	add	r3, r2
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	e001      	b.n	800993c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	89b9      	ldrh	r1, [r7, #12]
 8009940:	89ba      	ldrh	r2, [r7, #12]
 8009942:	2302      	movs	r3, #2
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	897b      	ldrh	r3, [r7, #10]
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	460b      	mov	r3, r1
 800994c:	6979      	ldr	r1, [r7, #20]
 800994e:	f7ff fe7d 	bl	800964c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009952:	687b      	ldr	r3, [r7, #4]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d106      	bne.n	800997c <pbuf_realloc+0x20>
 800996e:	4b3a      	ldr	r3, [pc, #232]	; (8009a58 <pbuf_realloc+0xfc>)
 8009970:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009974:	4939      	ldr	r1, [pc, #228]	; (8009a5c <pbuf_realloc+0x100>)
 8009976:	483a      	ldr	r0, [pc, #232]	; (8009a60 <pbuf_realloc+0x104>)
 8009978:	f008 fe30 	bl	80125dc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	891b      	ldrh	r3, [r3, #8]
 8009980:	887a      	ldrh	r2, [r7, #2]
 8009982:	429a      	cmp	r2, r3
 8009984:	d263      	bcs.n	8009a4e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	891a      	ldrh	r2, [r3, #8]
 800998a:	887b      	ldrh	r3, [r7, #2]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009990:	887b      	ldrh	r3, [r7, #2]
 8009992:	817b      	strh	r3, [r7, #10]
  q = p;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009998:	e018      	b.n	80099cc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	895b      	ldrh	r3, [r3, #10]
 800999e:	897a      	ldrh	r2, [r7, #10]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	891a      	ldrh	r2, [r3, #8]
 80099a8:	893b      	ldrh	r3, [r7, #8]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d106      	bne.n	80099cc <pbuf_realloc+0x70>
 80099be:	4b26      	ldr	r3, [pc, #152]	; (8009a58 <pbuf_realloc+0xfc>)
 80099c0:	f240 12af 	movw	r2, #431	; 0x1af
 80099c4:	4927      	ldr	r1, [pc, #156]	; (8009a64 <pbuf_realloc+0x108>)
 80099c6:	4826      	ldr	r0, [pc, #152]	; (8009a60 <pbuf_realloc+0x104>)
 80099c8:	f008 fe08 	bl	80125dc <iprintf>
  while (rem_len > q->len) {
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	895b      	ldrh	r3, [r3, #10]
 80099d0:	897a      	ldrh	r2, [r7, #10]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d8e1      	bhi.n	800999a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	7b1b      	ldrb	r3, [r3, #12]
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d121      	bne.n	8009a26 <pbuf_realloc+0xca>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	895b      	ldrh	r3, [r3, #10]
 80099e6:	897a      	ldrh	r2, [r7, #10]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d01c      	beq.n	8009a26 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	7b5b      	ldrb	r3, [r3, #13]
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d116      	bne.n	8009a26 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	897b      	ldrh	r3, [r7, #10]
 8009a04:	4413      	add	r3, r2
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4619      	mov	r1, r3
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f7fe ffaa 	bl	8008964 <mem_trim>
 8009a10:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <pbuf_realloc+0xca>
 8009a18:	4b0f      	ldr	r3, [pc, #60]	; (8009a58 <pbuf_realloc+0xfc>)
 8009a1a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009a1e:	4912      	ldr	r1, [pc, #72]	; (8009a68 <pbuf_realloc+0x10c>)
 8009a20:	480f      	ldr	r0, [pc, #60]	; (8009a60 <pbuf_realloc+0x104>)
 8009a22:	f008 fddb 	bl	80125dc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	897a      	ldrh	r2, [r7, #10]
 8009a2a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	895a      	ldrh	r2, [r3, #10]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d004      	beq.n	8009a46 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 f911 	bl	8009c68 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	e000      	b.n	8009a50 <pbuf_realloc+0xf4>
    return;
 8009a4e:	bf00      	nop

}
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	08013b48 	.word	0x08013b48
 8009a5c:	08013c60 	.word	0x08013c60
 8009a60:	08013ba8 	.word	0x08013ba8
 8009a64:	08013c78 	.word	0x08013c78
 8009a68:	08013c90 	.word	0x08013c90

08009a6c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	4613      	mov	r3, r2
 8009a78:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <pbuf_add_header_impl+0x22>
 8009a80:	4b2b      	ldr	r3, [pc, #172]	; (8009b30 <pbuf_add_header_impl+0xc4>)
 8009a82:	f240 12df 	movw	r2, #479	; 0x1df
 8009a86:	492b      	ldr	r1, [pc, #172]	; (8009b34 <pbuf_add_header_impl+0xc8>)
 8009a88:	482b      	ldr	r0, [pc, #172]	; (8009b38 <pbuf_add_header_impl+0xcc>)
 8009a8a:	f008 fda7 	bl	80125dc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d003      	beq.n	8009a9c <pbuf_add_header_impl+0x30>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a9a:	d301      	bcc.n	8009aa0 <pbuf_add_header_impl+0x34>
    return 1;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e043      	b.n	8009b28 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <pbuf_add_header_impl+0x3e>
    return 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	e03e      	b.n	8009b28 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	891a      	ldrh	r2, [r3, #8]
 8009ab2:	8a7b      	ldrh	r3, [r7, #18]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	8a7a      	ldrh	r2, [r7, #18]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d901      	bls.n	8009ac2 <pbuf_add_header_impl+0x56>
    return 1;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e032      	b.n	8009b28 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	7b1b      	ldrb	r3, [r3, #12]
 8009ac6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009ac8:	8a3b      	ldrh	r3, [r7, #16]
 8009aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00c      	beq.n	8009aec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	425b      	negs	r3, r3
 8009ada:	4413      	add	r3, r2
 8009adc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3310      	adds	r3, #16
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d20d      	bcs.n	8009b04 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e01d      	b.n	8009b28 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d006      	beq.n	8009b00 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	425b      	negs	r3, r3
 8009afa:	4413      	add	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	e001      	b.n	8009b04 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e011      	b.n	8009b28 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	895a      	ldrh	r2, [r3, #10]
 8009b0e:	8a7b      	ldrh	r3, [r7, #18]
 8009b10:	4413      	add	r3, r2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	891a      	ldrh	r2, [r3, #8]
 8009b1c:	8a7b      	ldrh	r3, [r7, #18]
 8009b1e:	4413      	add	r3, r2
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	811a      	strh	r2, [r3, #8]


  return 0;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	08013b48 	.word	0x08013b48
 8009b34:	08013cac 	.word	0x08013cac
 8009b38:	08013ba8 	.word	0x08013ba8

08009b3c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009b46:	2200      	movs	r2, #0
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff ff8e 	bl	8009a6c <pbuf_add_header_impl>
 8009b50:	4603      	mov	r3, r0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d106      	bne.n	8009b7a <pbuf_remove_header+0x1e>
 8009b6c:	4b20      	ldr	r3, [pc, #128]	; (8009bf0 <pbuf_remove_header+0x94>)
 8009b6e:	f240 224b 	movw	r2, #587	; 0x24b
 8009b72:	4920      	ldr	r1, [pc, #128]	; (8009bf4 <pbuf_remove_header+0x98>)
 8009b74:	4820      	ldr	r0, [pc, #128]	; (8009bf8 <pbuf_remove_header+0x9c>)
 8009b76:	f008 fd31 	bl	80125dc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <pbuf_remove_header+0x2c>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b86:	d301      	bcc.n	8009b8c <pbuf_remove_header+0x30>
    return 1;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e02c      	b.n	8009be6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <pbuf_remove_header+0x3a>
    return 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	e027      	b.n	8009be6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	895b      	ldrh	r3, [r3, #10]
 8009b9e:	89fa      	ldrh	r2, [r7, #14]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d908      	bls.n	8009bb6 <pbuf_remove_header+0x5a>
 8009ba4:	4b12      	ldr	r3, [pc, #72]	; (8009bf0 <pbuf_remove_header+0x94>)
 8009ba6:	f240 2255 	movw	r2, #597	; 0x255
 8009baa:	4914      	ldr	r1, [pc, #80]	; (8009bfc <pbuf_remove_header+0xa0>)
 8009bac:	4812      	ldr	r0, [pc, #72]	; (8009bf8 <pbuf_remove_header+0x9c>)
 8009bae:	f008 fd15 	bl	80125dc <iprintf>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e017      	b.n	8009be6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	441a      	add	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	895a      	ldrh	r2, [r3, #10]
 8009bcc:	89fb      	ldrh	r3, [r7, #14]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	891a      	ldrh	r2, [r3, #8]
 8009bda:	89fb      	ldrh	r3, [r7, #14]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	08013b48 	.word	0x08013b48
 8009bf4:	08013cac 	.word	0x08013cac
 8009bf8:	08013ba8 	.word	0x08013ba8
 8009bfc:	08013cb8 	.word	0x08013cb8

08009c00 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	807b      	strh	r3, [r7, #2]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009c10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	da08      	bge.n	8009c2a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009c18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c1c:	425b      	negs	r3, r3
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff ff9b 	bl	8009b5c <pbuf_remove_header>
 8009c26:	4603      	mov	r3, r0
 8009c28:	e007      	b.n	8009c3a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c2e:	787a      	ldrb	r2, [r7, #1]
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff ff1a 	bl	8009a6c <pbuf_add_header_impl>
 8009c38:	4603      	mov	r3, r0
  }
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009c4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c52:	2201      	movs	r2, #1
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff ffd2 	bl	8009c00 <pbuf_header_impl>
 8009c5c:	4603      	mov	r3, r0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d106      	bne.n	8009c8a <pbuf_free+0x22>
 8009c7c:	4b3b      	ldr	r3, [pc, #236]	; (8009d6c <pbuf_free+0x104>)
 8009c7e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009c82:	493b      	ldr	r1, [pc, #236]	; (8009d70 <pbuf_free+0x108>)
 8009c84:	483b      	ldr	r0, [pc, #236]	; (8009d74 <pbuf_free+0x10c>)
 8009c86:	f008 fca9 	bl	80125dc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e069      	b.n	8009d62 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009c92:	e062      	b.n	8009d5a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009c94:	f008 faac 	bl	80121f0 <sys_arch_protect>
 8009c98:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	7b9b      	ldrb	r3, [r3, #14]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d106      	bne.n	8009cb0 <pbuf_free+0x48>
 8009ca2:	4b32      	ldr	r3, [pc, #200]	; (8009d6c <pbuf_free+0x104>)
 8009ca4:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009ca8:	4933      	ldr	r1, [pc, #204]	; (8009d78 <pbuf_free+0x110>)
 8009caa:	4832      	ldr	r0, [pc, #200]	; (8009d74 <pbuf_free+0x10c>)
 8009cac:	f008 fc96 	bl	80125dc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	7b9b      	ldrb	r3, [r3, #14]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	739a      	strb	r2, [r3, #14]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	7b9b      	ldrb	r3, [r3, #14]
 8009cc0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009cc2:	69b8      	ldr	r0, [r7, #24]
 8009cc4:	f008 faa2 	bl	801220c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d143      	bne.n	8009d56 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	7b1b      	ldrb	r3, [r3, #12]
 8009cd8:	f003 030f 	and.w	r3, r3, #15
 8009cdc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	7b5b      	ldrb	r3, [r3, #13]
 8009ce2:	f003 0302 	and.w	r3, r3, #2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d011      	beq.n	8009d0e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <pbuf_free+0x9c>
 8009cf6:	4b1d      	ldr	r3, [pc, #116]	; (8009d6c <pbuf_free+0x104>)
 8009cf8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009cfc:	491f      	ldr	r1, [pc, #124]	; (8009d7c <pbuf_free+0x114>)
 8009cfe:	481d      	ldr	r0, [pc, #116]	; (8009d74 <pbuf_free+0x10c>)
 8009d00:	f008 fc6c 	bl	80125dc <iprintf>
        pc->custom_free_function(p);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	4798      	blx	r3
 8009d0c:	e01d      	b.n	8009d4a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d104      	bne.n	8009d1e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009d14:	6879      	ldr	r1, [r7, #4]
 8009d16:	200c      	movs	r0, #12
 8009d18:	f7ff f902 	bl	8008f20 <memp_free>
 8009d1c:	e015      	b.n	8009d4a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d104      	bne.n	8009d2e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	200b      	movs	r0, #11
 8009d28:	f7ff f8fa 	bl	8008f20 <memp_free>
 8009d2c:	e00d      	b.n	8009d4a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d103      	bne.n	8009d3c <pbuf_free+0xd4>
          mem_free(p);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7fe fd85 	bl	8008844 <mem_free>
 8009d3a:	e006      	b.n	8009d4a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009d3c:	4b0b      	ldr	r3, [pc, #44]	; (8009d6c <pbuf_free+0x104>)
 8009d3e:	f240 320f 	movw	r2, #783	; 0x30f
 8009d42:	490f      	ldr	r1, [pc, #60]	; (8009d80 <pbuf_free+0x118>)
 8009d44:	480b      	ldr	r0, [pc, #44]	; (8009d74 <pbuf_free+0x10c>)
 8009d46:	f008 fc49 	bl	80125dc <iprintf>
        }
      }
      count++;
 8009d4a:	7ffb      	ldrb	r3, [r7, #31]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	607b      	str	r3, [r7, #4]
 8009d54:	e001      	b.n	8009d5a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d199      	bne.n	8009c94 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3720      	adds	r7, #32
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	08013b48 	.word	0x08013b48
 8009d70:	08013cac 	.word	0x08013cac
 8009d74:	08013ba8 	.word	0x08013ba8
 8009d78:	08013cd8 	.word	0x08013cd8
 8009d7c:	08013cf0 	.word	0x08013cf0
 8009d80:	08013d14 	.word	0x08013d14

08009d84 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009d90:	e005      	b.n	8009d9e <pbuf_clen+0x1a>
    ++len;
 8009d92:	89fb      	ldrh	r3, [r7, #14]
 8009d94:	3301      	adds	r3, #1
 8009d96:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1f6      	bne.n	8009d92 <pbuf_clen+0xe>
  }
  return len;
 8009da4:	89fb      	ldrh	r3, [r7, #14]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
	...

08009db4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d016      	beq.n	8009df0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009dc2:	f008 fa15 	bl	80121f0 <sys_arch_protect>
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7b9b      	ldrb	r3, [r3, #14]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	739a      	strb	r2, [r3, #14]
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f008 fa19 	bl	801220c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7b9b      	ldrb	r3, [r3, #14]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d106      	bne.n	8009df0 <pbuf_ref+0x3c>
 8009de2:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <pbuf_ref+0x44>)
 8009de4:	f240 3242 	movw	r2, #834	; 0x342
 8009de8:	4904      	ldr	r1, [pc, #16]	; (8009dfc <pbuf_ref+0x48>)
 8009dea:	4805      	ldr	r0, [pc, #20]	; (8009e00 <pbuf_ref+0x4c>)
 8009dec:	f008 fbf6 	bl	80125dc <iprintf>
  }
}
 8009df0:	bf00      	nop
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	08013b48 	.word	0x08013b48
 8009dfc:	08013d28 	.word	0x08013d28
 8009e00:	08013ba8 	.word	0x08013ba8

08009e04 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <pbuf_cat+0x16>
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d107      	bne.n	8009e2a <pbuf_cat+0x26>
 8009e1a:	4b20      	ldr	r3, [pc, #128]	; (8009e9c <pbuf_cat+0x98>)
 8009e1c:	f240 3259 	movw	r2, #857	; 0x359
 8009e20:	491f      	ldr	r1, [pc, #124]	; (8009ea0 <pbuf_cat+0x9c>)
 8009e22:	4820      	ldr	r0, [pc, #128]	; (8009ea4 <pbuf_cat+0xa0>)
 8009e24:	f008 fbda 	bl	80125dc <iprintf>
 8009e28:	e034      	b.n	8009e94 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	e00a      	b.n	8009e46 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	891a      	ldrh	r2, [r3, #8]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	891b      	ldrh	r3, [r3, #8]
 8009e38:	4413      	add	r3, r2
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1f0      	bne.n	8009e30 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	891a      	ldrh	r2, [r3, #8]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	895b      	ldrh	r3, [r3, #10]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d006      	beq.n	8009e68 <pbuf_cat+0x64>
 8009e5a:	4b10      	ldr	r3, [pc, #64]	; (8009e9c <pbuf_cat+0x98>)
 8009e5c:	f240 3262 	movw	r2, #866	; 0x362
 8009e60:	4911      	ldr	r1, [pc, #68]	; (8009ea8 <pbuf_cat+0xa4>)
 8009e62:	4810      	ldr	r0, [pc, #64]	; (8009ea4 <pbuf_cat+0xa0>)
 8009e64:	f008 fbba 	bl	80125dc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d006      	beq.n	8009e7e <pbuf_cat+0x7a>
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <pbuf_cat+0x98>)
 8009e72:	f240 3263 	movw	r2, #867	; 0x363
 8009e76:	490d      	ldr	r1, [pc, #52]	; (8009eac <pbuf_cat+0xa8>)
 8009e78:	480a      	ldr	r0, [pc, #40]	; (8009ea4 <pbuf_cat+0xa0>)
 8009e7a:	f008 fbaf 	bl	80125dc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	891a      	ldrh	r2, [r3, #8]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	891b      	ldrh	r3, [r3, #8]
 8009e86:	4413      	add	r3, r2
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	08013b48 	.word	0x08013b48
 8009ea0:	08013d3c 	.word	0x08013d3c
 8009ea4:	08013ba8 	.word	0x08013ba8
 8009ea8:	08013d74 	.word	0x08013d74
 8009eac:	08013da4 	.word	0x08013da4

08009eb0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	617b      	str	r3, [r7, #20]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d008      	beq.n	8009eda <pbuf_copy+0x2a>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <pbuf_copy+0x2a>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	891a      	ldrh	r2, [r3, #8]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	891b      	ldrh	r3, [r3, #8]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d209      	bcs.n	8009eee <pbuf_copy+0x3e>
 8009eda:	4b57      	ldr	r3, [pc, #348]	; (800a038 <pbuf_copy+0x188>)
 8009edc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009ee0:	4956      	ldr	r1, [pc, #344]	; (800a03c <pbuf_copy+0x18c>)
 8009ee2:	4857      	ldr	r0, [pc, #348]	; (800a040 <pbuf_copy+0x190>)
 8009ee4:	f008 fb7a 	bl	80125dc <iprintf>
 8009ee8:	f06f 030f 	mvn.w	r3, #15
 8009eec:	e09f      	b.n	800a02e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	895b      	ldrh	r3, [r3, #10]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	1ad2      	subs	r2, r2, r3
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	895b      	ldrh	r3, [r3, #10]
 8009efc:	4619      	mov	r1, r3
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	1acb      	subs	r3, r1, r3
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d306      	bcc.n	8009f14 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	895b      	ldrh	r3, [r3, #10]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e005      	b.n	8009f20 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	895b      	ldrh	r3, [r3, #10]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	18d0      	adds	r0, r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4413      	add	r3, r2
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	4619      	mov	r1, r3
 8009f34:	f008 faa7 	bl	8012486 <memcpy>
    offset_to += len;
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	4413      	add	r3, r2
 8009f46:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	895b      	ldrh	r3, [r3, #10]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d906      	bls.n	8009f62 <pbuf_copy+0xb2>
 8009f54:	4b38      	ldr	r3, [pc, #224]	; (800a038 <pbuf_copy+0x188>)
 8009f56:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009f5a:	493a      	ldr	r1, [pc, #232]	; (800a044 <pbuf_copy+0x194>)
 8009f5c:	4838      	ldr	r0, [pc, #224]	; (800a040 <pbuf_copy+0x190>)
 8009f5e:	f008 fb3d 	bl	80125dc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	895b      	ldrh	r3, [r3, #10]
 8009f66:	461a      	mov	r2, r3
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d906      	bls.n	8009f7c <pbuf_copy+0xcc>
 8009f6e:	4b32      	ldr	r3, [pc, #200]	; (800a038 <pbuf_copy+0x188>)
 8009f70:	f240 32da 	movw	r2, #986	; 0x3da
 8009f74:	4934      	ldr	r1, [pc, #208]	; (800a048 <pbuf_copy+0x198>)
 8009f76:	4832      	ldr	r0, [pc, #200]	; (800a040 <pbuf_copy+0x190>)
 8009f78:	f008 fb30 	bl	80125dc <iprintf>
    if (offset_from >= p_from->len) {
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	895b      	ldrh	r3, [r3, #10]
 8009f80:	461a      	mov	r2, r3
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d304      	bcc.n	8009f92 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	895b      	ldrh	r3, [r3, #10]
 8009f96:	461a      	mov	r2, r3
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d114      	bne.n	8009fc8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10c      	bne.n	8009fc8 <pbuf_copy+0x118>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d009      	beq.n	8009fc8 <pbuf_copy+0x118>
 8009fb4:	4b20      	ldr	r3, [pc, #128]	; (800a038 <pbuf_copy+0x188>)
 8009fb6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009fba:	4924      	ldr	r1, [pc, #144]	; (800a04c <pbuf_copy+0x19c>)
 8009fbc:	4820      	ldr	r0, [pc, #128]	; (800a040 <pbuf_copy+0x190>)
 8009fbe:	f008 fb0d 	bl	80125dc <iprintf>
 8009fc2:	f06f 030f 	mvn.w	r3, #15
 8009fc6:	e032      	b.n	800a02e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d013      	beq.n	8009ff6 <pbuf_copy+0x146>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	895a      	ldrh	r2, [r3, #10]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	891b      	ldrh	r3, [r3, #8]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d10d      	bne.n	8009ff6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <pbuf_copy+0x146>
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <pbuf_copy+0x188>)
 8009fe4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009fe8:	4919      	ldr	r1, [pc, #100]	; (800a050 <pbuf_copy+0x1a0>)
 8009fea:	4815      	ldr	r0, [pc, #84]	; (800a040 <pbuf_copy+0x190>)
 8009fec:	f008 faf6 	bl	80125dc <iprintf>
 8009ff0:	f06f 0305 	mvn.w	r3, #5
 8009ff4:	e01b      	b.n	800a02e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d013      	beq.n	800a024 <pbuf_copy+0x174>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	895a      	ldrh	r2, [r3, #10]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	891b      	ldrh	r3, [r3, #8]
 800a004:	429a      	cmp	r2, r3
 800a006:	d10d      	bne.n	800a024 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d009      	beq.n	800a024 <pbuf_copy+0x174>
 800a010:	4b09      	ldr	r3, [pc, #36]	; (800a038 <pbuf_copy+0x188>)
 800a012:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a016:	490e      	ldr	r1, [pc, #56]	; (800a050 <pbuf_copy+0x1a0>)
 800a018:	4809      	ldr	r0, [pc, #36]	; (800a040 <pbuf_copy+0x190>)
 800a01a:	f008 fadf 	bl	80125dc <iprintf>
 800a01e:	f06f 0305 	mvn.w	r3, #5
 800a022:	e004      	b.n	800a02e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	f47f af61 	bne.w	8009eee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	08013b48 	.word	0x08013b48
 800a03c:	08013df0 	.word	0x08013df0
 800a040:	08013ba8 	.word	0x08013ba8
 800a044:	08013e20 	.word	0x08013e20
 800a048:	08013e38 	.word	0x08013e38
 800a04c:	08013e54 	.word	0x08013e54
 800a050:	08013e64 	.word	0x08013e64

0800a054 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b088      	sub	sp, #32
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4611      	mov	r1, r2
 800a060:	461a      	mov	r2, r3
 800a062:	460b      	mov	r3, r1
 800a064:	80fb      	strh	r3, [r7, #6]
 800a066:	4613      	mov	r3, r2
 800a068:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d108      	bne.n	800a08a <pbuf_copy_partial+0x36>
 800a078:	4b2b      	ldr	r3, [pc, #172]	; (800a128 <pbuf_copy_partial+0xd4>)
 800a07a:	f240 420a 	movw	r2, #1034	; 0x40a
 800a07e:	492b      	ldr	r1, [pc, #172]	; (800a12c <pbuf_copy_partial+0xd8>)
 800a080:	482b      	ldr	r0, [pc, #172]	; (800a130 <pbuf_copy_partial+0xdc>)
 800a082:	f008 faab 	bl	80125dc <iprintf>
 800a086:	2300      	movs	r3, #0
 800a088:	e04a      	b.n	800a120 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d108      	bne.n	800a0a2 <pbuf_copy_partial+0x4e>
 800a090:	4b25      	ldr	r3, [pc, #148]	; (800a128 <pbuf_copy_partial+0xd4>)
 800a092:	f240 420b 	movw	r2, #1035	; 0x40b
 800a096:	4927      	ldr	r1, [pc, #156]	; (800a134 <pbuf_copy_partial+0xe0>)
 800a098:	4825      	ldr	r0, [pc, #148]	; (800a130 <pbuf_copy_partial+0xdc>)
 800a09a:	f008 fa9f 	bl	80125dc <iprintf>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e03e      	b.n	800a120 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	61fb      	str	r3, [r7, #28]
 800a0a6:	e034      	b.n	800a112 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a0a8:	88bb      	ldrh	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00a      	beq.n	800a0c4 <pbuf_copy_partial+0x70>
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	895b      	ldrh	r3, [r3, #10]
 800a0b2:	88ba      	ldrh	r2, [r7, #4]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d305      	bcc.n	800a0c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	895b      	ldrh	r3, [r3, #10]
 800a0bc:	88ba      	ldrh	r2, [r7, #4]
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	80bb      	strh	r3, [r7, #4]
 800a0c2:	e023      	b.n	800a10c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	895a      	ldrh	r2, [r3, #10]
 800a0c8:	88bb      	ldrh	r3, [r7, #4]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a0ce:	8b3a      	ldrh	r2, [r7, #24]
 800a0d0:	88fb      	ldrh	r3, [r7, #6]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d901      	bls.n	800a0da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a0d6:	88fb      	ldrh	r3, [r7, #6]
 800a0d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a0da:	8b7b      	ldrh	r3, [r7, #26]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	18d0      	adds	r0, r2, r3
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	88bb      	ldrh	r3, [r7, #4]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	8b3a      	ldrh	r2, [r7, #24]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	f008 f9cb 	bl	8012486 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a0f0:	8afa      	ldrh	r2, [r7, #22]
 800a0f2:	8b3b      	ldrh	r3, [r7, #24]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a0f8:	8b7a      	ldrh	r2, [r7, #26]
 800a0fa:	8b3b      	ldrh	r3, [r7, #24]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a100:	88fa      	ldrh	r2, [r7, #6]
 800a102:	8b3b      	ldrh	r3, [r7, #24]
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	88fb      	ldrh	r3, [r7, #6]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <pbuf_copy_partial+0xca>
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1c4      	bne.n	800a0a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a11e:	8afb      	ldrh	r3, [r7, #22]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3720      	adds	r7, #32
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	08013b48 	.word	0x08013b48
 800a12c:	08013e90 	.word	0x08013e90
 800a130:	08013ba8 	.word	0x08013ba8
 800a134:	08013eb0 	.word	0x08013eb0

0800a138 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	603a      	str	r2, [r7, #0]
 800a142:	71fb      	strb	r3, [r7, #7]
 800a144:	460b      	mov	r3, r1
 800a146:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	8919      	ldrh	r1, [r3, #8]
 800a14c:	88ba      	ldrh	r2, [r7, #4]
 800a14e:	79fb      	ldrb	r3, [r7, #7]
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff faa5 	bl	80096a0 <pbuf_alloc>
 800a156:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <pbuf_clone+0x2a>
    return NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	e011      	b.n	800a186 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff fea3 	bl	8009eb0 <pbuf_copy>
 800a16a:	4603      	mov	r3, r0
 800a16c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a16e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d006      	beq.n	800a184 <pbuf_clone+0x4c>
 800a176:	4b06      	ldr	r3, [pc, #24]	; (800a190 <pbuf_clone+0x58>)
 800a178:	f240 5224 	movw	r2, #1316	; 0x524
 800a17c:	4905      	ldr	r1, [pc, #20]	; (800a194 <pbuf_clone+0x5c>)
 800a17e:	4806      	ldr	r0, [pc, #24]	; (800a198 <pbuf_clone+0x60>)
 800a180:	f008 fa2c 	bl	80125dc <iprintf>
  return q;
 800a184:	68fb      	ldr	r3, [r7, #12]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	08013b48 	.word	0x08013b48
 800a194:	08013fbc 	.word	0x08013fbc
 800a198:	08013ba8 	.word	0x08013ba8

0800a19c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a1a0:	f008 fa34 	bl	801260c <rand>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	4b01      	ldr	r3, [pc, #4]	; (800a1bc <tcp_init+0x20>)
 800a1b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a1b8:	bf00      	nop
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	20000010 	.word	0x20000010

0800a1c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7d1b      	ldrb	r3, [r3, #20]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d105      	bne.n	800a1dc <tcp_free+0x1c>
 800a1d0:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <tcp_free+0x2c>)
 800a1d2:	22d4      	movs	r2, #212	; 0xd4
 800a1d4:	4906      	ldr	r1, [pc, #24]	; (800a1f0 <tcp_free+0x30>)
 800a1d6:	4807      	ldr	r0, [pc, #28]	; (800a1f4 <tcp_free+0x34>)
 800a1d8:	f008 fa00 	bl	80125dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	2001      	movs	r0, #1
 800a1e0:	f7fe fe9e 	bl	8008f20 <memp_free>
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	08014048 	.word	0x08014048
 800a1f0:	08014078 	.word	0x08014078
 800a1f4:	0801408c 	.word	0x0801408c

0800a1f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	7d1b      	ldrb	r3, [r3, #20]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d105      	bne.n	800a214 <tcp_free_listen+0x1c>
 800a208:	4b06      	ldr	r3, [pc, #24]	; (800a224 <tcp_free_listen+0x2c>)
 800a20a:	22df      	movs	r2, #223	; 0xdf
 800a20c:	4906      	ldr	r1, [pc, #24]	; (800a228 <tcp_free_listen+0x30>)
 800a20e:	4807      	ldr	r0, [pc, #28]	; (800a22c <tcp_free_listen+0x34>)
 800a210:	f008 f9e4 	bl	80125dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	2002      	movs	r0, #2
 800a218:	f7fe fe82 	bl	8008f20 <memp_free>
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	08014048 	.word	0x08014048
 800a228:	080140b4 	.word	0x080140b4
 800a22c:	0801408c 	.word	0x0801408c

0800a230 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a234:	f000 fea2 	bl	800af7c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a238:	4b07      	ldr	r3, [pc, #28]	; (800a258 <tcp_tmr+0x28>)
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	3301      	adds	r3, #1
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	4b05      	ldr	r3, [pc, #20]	; (800a258 <tcp_tmr+0x28>)
 800a242:	701a      	strb	r2, [r3, #0]
 800a244:	4b04      	ldr	r3, [pc, #16]	; (800a258 <tcp_tmr+0x28>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a250:	f000 fb54 	bl	800a8fc <tcp_slowtmr>
  }
}
 800a254:	bf00      	nop
 800a256:	bd80      	pop	{r7, pc}
 800a258:	2000d5a1 	.word	0x2000d5a1

0800a25c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d105      	bne.n	800a278 <tcp_remove_listener+0x1c>
 800a26c:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <tcp_remove_listener+0x48>)
 800a26e:	22ff      	movs	r2, #255	; 0xff
 800a270:	490d      	ldr	r1, [pc, #52]	; (800a2a8 <tcp_remove_listener+0x4c>)
 800a272:	480e      	ldr	r0, [pc, #56]	; (800a2ac <tcp_remove_listener+0x50>)
 800a274:	f008 f9b2 	bl	80125dc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e00a      	b.n	800a294 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	429a      	cmp	r2, r3
 800a286:	d102      	bne.n	800a28e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1f1      	bne.n	800a27e <tcp_remove_listener+0x22>
    }
  }
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	08014048 	.word	0x08014048
 800a2a8:	080140d0 	.word	0x080140d0
 800a2ac:	0801408c 	.word	0x0801408c

0800a2b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d106      	bne.n	800a2cc <tcp_listen_closed+0x1c>
 800a2be:	4b14      	ldr	r3, [pc, #80]	; (800a310 <tcp_listen_closed+0x60>)
 800a2c0:	f240 1211 	movw	r2, #273	; 0x111
 800a2c4:	4913      	ldr	r1, [pc, #76]	; (800a314 <tcp_listen_closed+0x64>)
 800a2c6:	4814      	ldr	r0, [pc, #80]	; (800a318 <tcp_listen_closed+0x68>)
 800a2c8:	f008 f988 	bl	80125dc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7d1b      	ldrb	r3, [r3, #20]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d006      	beq.n	800a2e2 <tcp_listen_closed+0x32>
 800a2d4:	4b0e      	ldr	r3, [pc, #56]	; (800a310 <tcp_listen_closed+0x60>)
 800a2d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a2da:	4910      	ldr	r1, [pc, #64]	; (800a31c <tcp_listen_closed+0x6c>)
 800a2dc:	480e      	ldr	r0, [pc, #56]	; (800a318 <tcp_listen_closed+0x68>)
 800a2de:	f008 f97d 	bl	80125dc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e00b      	b.n	800a300 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a2e8:	4a0d      	ldr	r2, [pc, #52]	; (800a320 <tcp_listen_closed+0x70>)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7ff ffb1 	bl	800a25c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2b03      	cmp	r3, #3
 800a304:	d9f0      	bls.n	800a2e8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a306:	bf00      	nop
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	08014048 	.word	0x08014048
 800a314:	080140f8 	.word	0x080140f8
 800a318:	0801408c 	.word	0x0801408c
 800a31c:	08014104 	.word	0x08014104
 800a320:	08016080 	.word	0x08016080

0800a324 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a324:	b5b0      	push	{r4, r5, r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af04      	add	r7, sp, #16
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d106      	bne.n	800a344 <tcp_close_shutdown+0x20>
 800a336:	4b63      	ldr	r3, [pc, #396]	; (800a4c4 <tcp_close_shutdown+0x1a0>)
 800a338:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a33c:	4962      	ldr	r1, [pc, #392]	; (800a4c8 <tcp_close_shutdown+0x1a4>)
 800a33e:	4863      	ldr	r0, [pc, #396]	; (800a4cc <tcp_close_shutdown+0x1a8>)
 800a340:	f008 f94c 	bl	80125dc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d066      	beq.n	800a418 <tcp_close_shutdown+0xf4>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	7d1b      	ldrb	r3, [r3, #20]
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d003      	beq.n	800a35a <tcp_close_shutdown+0x36>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	7d1b      	ldrb	r3, [r3, #20]
 800a356:	2b07      	cmp	r3, #7
 800a358:	d15e      	bne.n	800a418 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d104      	bne.n	800a36c <tcp_close_shutdown+0x48>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a366:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a36a:	d055      	beq.n	800a418 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	8b5b      	ldrh	r3, [r3, #26]
 800a370:	f003 0310 	and.w	r3, r3, #16
 800a374:	2b00      	cmp	r3, #0
 800a376:	d106      	bne.n	800a386 <tcp_close_shutdown+0x62>
 800a378:	4b52      	ldr	r3, [pc, #328]	; (800a4c4 <tcp_close_shutdown+0x1a0>)
 800a37a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a37e:	4954      	ldr	r1, [pc, #336]	; (800a4d0 <tcp_close_shutdown+0x1ac>)
 800a380:	4852      	ldr	r0, [pc, #328]	; (800a4cc <tcp_close_shutdown+0x1a8>)
 800a382:	f008 f92b 	bl	80125dc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a38e:	687d      	ldr	r5, [r7, #4]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3304      	adds	r3, #4
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	8ad2      	ldrh	r2, [r2, #22]
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	8b09      	ldrh	r1, [r1, #24]
 800a39c:	9102      	str	r1, [sp, #8]
 800a39e:	9201      	str	r2, [sp, #4]
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	462b      	mov	r3, r5
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	4601      	mov	r1, r0
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f004 fe91 	bl	800f0d0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f001 f8c6 	bl	800b540 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a3b4:	4b47      	ldr	r3, [pc, #284]	; (800a4d4 <tcp_close_shutdown+0x1b0>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d105      	bne.n	800a3ca <tcp_close_shutdown+0xa6>
 800a3be:	4b45      	ldr	r3, [pc, #276]	; (800a4d4 <tcp_close_shutdown+0x1b0>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	4a43      	ldr	r2, [pc, #268]	; (800a4d4 <tcp_close_shutdown+0x1b0>)
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	e013      	b.n	800a3f2 <tcp_close_shutdown+0xce>
 800a3ca:	4b42      	ldr	r3, [pc, #264]	; (800a4d4 <tcp_close_shutdown+0x1b0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	e00c      	b.n	800a3ec <tcp_close_shutdown+0xc8>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d104      	bne.n	800a3e6 <tcp_close_shutdown+0xc2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	60da      	str	r2, [r3, #12]
 800a3e4:	e005      	b.n	800a3f2 <tcp_close_shutdown+0xce>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1ef      	bne.n	800a3d2 <tcp_close_shutdown+0xae>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	60da      	str	r2, [r3, #12]
 800a3f8:	4b37      	ldr	r3, [pc, #220]	; (800a4d8 <tcp_close_shutdown+0x1b4>)
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a3fe:	4b37      	ldr	r3, [pc, #220]	; (800a4dc <tcp_close_shutdown+0x1b8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	429a      	cmp	r2, r3
 800a406:	d102      	bne.n	800a40e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a408:	f003 fd5e 	bl	800dec8 <tcp_trigger_input_pcb_close>
 800a40c:	e002      	b.n	800a414 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff fed6 	bl	800a1c0 <tcp_free>
      }
      return ERR_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	e050      	b.n	800a4ba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7d1b      	ldrb	r3, [r3, #20]
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d03b      	beq.n	800a498 <tcp_close_shutdown+0x174>
 800a420:	2b02      	cmp	r3, #2
 800a422:	dc44      	bgt.n	800a4ae <tcp_close_shutdown+0x18a>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <tcp_close_shutdown+0x10a>
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d02a      	beq.n	800a482 <tcp_close_shutdown+0x15e>
 800a42c:	e03f      	b.n	800a4ae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	8adb      	ldrh	r3, [r3, #22]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d021      	beq.n	800a47a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a436:	4b2a      	ldr	r3, [pc, #168]	; (800a4e0 <tcp_close_shutdown+0x1bc>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d105      	bne.n	800a44c <tcp_close_shutdown+0x128>
 800a440:	4b27      	ldr	r3, [pc, #156]	; (800a4e0 <tcp_close_shutdown+0x1bc>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	4a26      	ldr	r2, [pc, #152]	; (800a4e0 <tcp_close_shutdown+0x1bc>)
 800a448:	6013      	str	r3, [r2, #0]
 800a44a:	e013      	b.n	800a474 <tcp_close_shutdown+0x150>
 800a44c:	4b24      	ldr	r3, [pc, #144]	; (800a4e0 <tcp_close_shutdown+0x1bc>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	60bb      	str	r3, [r7, #8]
 800a452:	e00c      	b.n	800a46e <tcp_close_shutdown+0x14a>
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d104      	bne.n	800a468 <tcp_close_shutdown+0x144>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	60da      	str	r2, [r3, #12]
 800a466:	e005      	b.n	800a474 <tcp_close_shutdown+0x150>
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	60bb      	str	r3, [r7, #8]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1ef      	bne.n	800a454 <tcp_close_shutdown+0x130>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff fea0 	bl	800a1c0 <tcp_free>
      break;
 800a480:	e01a      	b.n	800a4b8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff ff14 	bl	800a2b0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a488:	6879      	ldr	r1, [r7, #4]
 800a48a:	4816      	ldr	r0, [pc, #88]	; (800a4e4 <tcp_close_shutdown+0x1c0>)
 800a48c:	f001 f8a8 	bl	800b5e0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff feb1 	bl	800a1f8 <tcp_free_listen>
      break;
 800a496:	e00f      	b.n	800a4b8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a498:	6879      	ldr	r1, [r7, #4]
 800a49a:	480e      	ldr	r0, [pc, #56]	; (800a4d4 <tcp_close_shutdown+0x1b0>)
 800a49c:	f001 f8a0 	bl	800b5e0 <tcp_pcb_remove>
 800a4a0:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <tcp_close_shutdown+0x1b4>)
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff fe8a 	bl	800a1c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a4ac:	e004      	b.n	800a4b8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f81a 	bl	800a4e8 <tcp_close_shutdown_fin>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	e000      	b.n	800a4ba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	08014048 	.word	0x08014048
 800a4c8:	0801411c 	.word	0x0801411c
 800a4cc:	0801408c 	.word	0x0801408c
 800a4d0:	0801413c 	.word	0x0801413c
 800a4d4:	2000d598 	.word	0x2000d598
 800a4d8:	2000d5a0 	.word	0x2000d5a0
 800a4dc:	2000d5d8 	.word	0x2000d5d8
 800a4e0:	2000d590 	.word	0x2000d590
 800a4e4:	2000d594 	.word	0x2000d594

0800a4e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <tcp_close_shutdown_fin+0x1c>
 800a4f6:	4b2e      	ldr	r3, [pc, #184]	; (800a5b0 <tcp_close_shutdown_fin+0xc8>)
 800a4f8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a4fc:	492d      	ldr	r1, [pc, #180]	; (800a5b4 <tcp_close_shutdown_fin+0xcc>)
 800a4fe:	482e      	ldr	r0, [pc, #184]	; (800a5b8 <tcp_close_shutdown_fin+0xd0>)
 800a500:	f008 f86c 	bl	80125dc <iprintf>

  switch (pcb->state) {
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	7d1b      	ldrb	r3, [r3, #20]
 800a508:	2b07      	cmp	r3, #7
 800a50a:	d020      	beq.n	800a54e <tcp_close_shutdown_fin+0x66>
 800a50c:	2b07      	cmp	r3, #7
 800a50e:	dc2b      	bgt.n	800a568 <tcp_close_shutdown_fin+0x80>
 800a510:	2b03      	cmp	r3, #3
 800a512:	d002      	beq.n	800a51a <tcp_close_shutdown_fin+0x32>
 800a514:	2b04      	cmp	r3, #4
 800a516:	d00d      	beq.n	800a534 <tcp_close_shutdown_fin+0x4c>
 800a518:	e026      	b.n	800a568 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f003 fee6 	bl	800e2ec <tcp_send_fin>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d11f      	bne.n	800a56c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2205      	movs	r2, #5
 800a530:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a532:	e01b      	b.n	800a56c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f003 fed9 	bl	800e2ec <tcp_send_fin>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d114      	bne.n	800a570 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2205      	movs	r2, #5
 800a54a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a54c:	e010      	b.n	800a570 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f003 fecc 	bl	800e2ec <tcp_send_fin>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d109      	bne.n	800a574 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2209      	movs	r2, #9
 800a564:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a566:	e005      	b.n	800a574 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	e01c      	b.n	800a5a6 <tcp_close_shutdown_fin+0xbe>
      break;
 800a56c:	bf00      	nop
 800a56e:	e002      	b.n	800a576 <tcp_close_shutdown_fin+0x8e>
      break;
 800a570:	bf00      	nop
 800a572:	e000      	b.n	800a576 <tcp_close_shutdown_fin+0x8e>
      break;
 800a574:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d103      	bne.n	800a586 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f003 fff2 	bl	800e568 <tcp_output>
 800a584:	e00d      	b.n	800a5a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58e:	d108      	bne.n	800a5a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	8b5b      	ldrh	r3, [r3, #26]
 800a594:	f043 0308 	orr.w	r3, r3, #8
 800a598:	b29a      	uxth	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e001      	b.n	800a5a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a5a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	08014048 	.word	0x08014048
 800a5b4:	080140f8 	.word	0x080140f8
 800a5b8:	0801408c 	.word	0x0801408c

0800a5bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <tcp_close+0x22>
 800a5ca:	4b0f      	ldr	r3, [pc, #60]	; (800a608 <tcp_close+0x4c>)
 800a5cc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a5d0:	490e      	ldr	r1, [pc, #56]	; (800a60c <tcp_close+0x50>)
 800a5d2:	480f      	ldr	r0, [pc, #60]	; (800a610 <tcp_close+0x54>)
 800a5d4:	f008 f802 	bl	80125dc <iprintf>
 800a5d8:	f06f 030f 	mvn.w	r3, #15
 800a5dc:	e00f      	b.n	800a5fe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	7d1b      	ldrb	r3, [r3, #20]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d006      	beq.n	800a5f4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	8b5b      	ldrh	r3, [r3, #26]
 800a5ea:	f043 0310 	orr.w	r3, r3, #16
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7ff fe94 	bl	800a324 <tcp_close_shutdown>
 800a5fc:	4603      	mov	r3, r0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	08014048 	.word	0x08014048
 800a60c:	08014158 	.word	0x08014158
 800a610:	0801408c 	.word	0x0801408c

0800a614 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08e      	sub	sp, #56	; 0x38
 800a618:	af04      	add	r7, sp, #16
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d107      	bne.n	800a634 <tcp_abandon+0x20>
 800a624:	4b52      	ldr	r3, [pc, #328]	; (800a770 <tcp_abandon+0x15c>)
 800a626:	f240 223d 	movw	r2, #573	; 0x23d
 800a62a:	4952      	ldr	r1, [pc, #328]	; (800a774 <tcp_abandon+0x160>)
 800a62c:	4852      	ldr	r0, [pc, #328]	; (800a778 <tcp_abandon+0x164>)
 800a62e:	f007 ffd5 	bl	80125dc <iprintf>
 800a632:	e099      	b.n	800a768 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	7d1b      	ldrb	r3, [r3, #20]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d106      	bne.n	800a64a <tcp_abandon+0x36>
 800a63c:	4b4c      	ldr	r3, [pc, #304]	; (800a770 <tcp_abandon+0x15c>)
 800a63e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a642:	494e      	ldr	r1, [pc, #312]	; (800a77c <tcp_abandon+0x168>)
 800a644:	484c      	ldr	r0, [pc, #304]	; (800a778 <tcp_abandon+0x164>)
 800a646:	f007 ffc9 	bl	80125dc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	7d1b      	ldrb	r3, [r3, #20]
 800a64e:	2b0a      	cmp	r3, #10
 800a650:	d107      	bne.n	800a662 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	484a      	ldr	r0, [pc, #296]	; (800a780 <tcp_abandon+0x16c>)
 800a656:	f000 ffc3 	bl	800b5e0 <tcp_pcb_remove>
    tcp_free(pcb);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff fdb0 	bl	800a1c0 <tcp_free>
 800a660:	e082      	b.n	800a768 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a67c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	7d1b      	ldrb	r3, [r3, #20]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d126      	bne.n	800a6da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	8adb      	ldrh	r3, [r3, #22]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d02e      	beq.n	800a6f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a694:	4b3b      	ldr	r3, [pc, #236]	; (800a784 <tcp_abandon+0x170>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d105      	bne.n	800a6aa <tcp_abandon+0x96>
 800a69e:	4b39      	ldr	r3, [pc, #228]	; (800a784 <tcp_abandon+0x170>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	4a37      	ldr	r2, [pc, #220]	; (800a784 <tcp_abandon+0x170>)
 800a6a6:	6013      	str	r3, [r2, #0]
 800a6a8:	e013      	b.n	800a6d2 <tcp_abandon+0xbe>
 800a6aa:	4b36      	ldr	r3, [pc, #216]	; (800a784 <tcp_abandon+0x170>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	61fb      	str	r3, [r7, #28]
 800a6b0:	e00c      	b.n	800a6cc <tcp_abandon+0xb8>
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d104      	bne.n	800a6c6 <tcp_abandon+0xb2>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	60da      	str	r2, [r3, #12]
 800a6c4:	e005      	b.n	800a6d2 <tcp_abandon+0xbe>
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	61fb      	str	r3, [r7, #28]
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1ef      	bne.n	800a6b2 <tcp_abandon+0x9e>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	60da      	str	r2, [r3, #12]
 800a6d8:	e00b      	b.n	800a6f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	8adb      	ldrh	r3, [r3, #22]
 800a6e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a6e4:	6879      	ldr	r1, [r7, #4]
 800a6e6:	4828      	ldr	r0, [pc, #160]	; (800a788 <tcp_abandon+0x174>)
 800a6e8:	f000 ff7a 	bl	800b5e0 <tcp_pcb_remove>
 800a6ec:	4b27      	ldr	r3, [pc, #156]	; (800a78c <tcp_abandon+0x178>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d004      	beq.n	800a704 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fd1c 	bl	800b13c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d004      	beq.n	800a716 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a710:	4618      	mov	r0, r3
 800a712:	f000 fd13 	bl	800b13c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d004      	beq.n	800a728 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fd0a 	bl	800b13c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00e      	beq.n	800a74c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3304      	adds	r3, #4
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	8b12      	ldrh	r2, [r2, #24]
 800a738:	9202      	str	r2, [sp, #8]
 800a73a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a73c:	9201      	str	r2, [sp, #4]
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	460b      	mov	r3, r1
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	69b9      	ldr	r1, [r7, #24]
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f004 fcc2 	bl	800f0d0 <tcp_rst>
    }
    last_state = pcb->state;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7d1b      	ldrb	r3, [r3, #20]
 800a750:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff fd34 	bl	800a1c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <tcp_abandon+0x154>
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	f06f 010c 	mvn.w	r1, #12
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	4798      	blx	r3
  }
}
 800a768:	3728      	adds	r7, #40	; 0x28
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	08014048 	.word	0x08014048
 800a774:	0801418c 	.word	0x0801418c
 800a778:	0801408c 	.word	0x0801408c
 800a77c:	080141a8 	.word	0x080141a8
 800a780:	2000d59c 	.word	0x2000d59c
 800a784:	2000d590 	.word	0x2000d590
 800a788:	2000d598 	.word	0x2000d598
 800a78c:	2000d5a0 	.word	0x2000d5a0

0800a790 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a798:	2101      	movs	r1, #1
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff ff3a 	bl	800a614 <tcp_abandon>
}
 800a7a0:	bf00      	nop
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d106      	bne.n	800a7c4 <tcp_update_rcv_ann_wnd+0x1c>
 800a7b6:	4b25      	ldr	r3, [pc, #148]	; (800a84c <tcp_update_rcv_ann_wnd+0xa4>)
 800a7b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a7bc:	4924      	ldr	r1, [pc, #144]	; (800a850 <tcp_update_rcv_ann_wnd+0xa8>)
 800a7be:	4825      	ldr	r0, [pc, #148]	; (800a854 <tcp_update_rcv_ann_wnd+0xac>)
 800a7c0:	f007 ff0c 	bl	80125dc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a7cc:	4413      	add	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a7d8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a7dc:	bf28      	it	cs
 800a7de:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a7e2:	b292      	uxth	r2, r2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	db08      	blt.n	800a800 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	e020      	b.n	800a842 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dd03      	ble.n	800a816 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a814:	e014      	b.n	800a840 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a828:	d306      	bcc.n	800a838 <tcp_update_rcv_ann_wnd+0x90>
 800a82a:	4b08      	ldr	r3, [pc, #32]	; (800a84c <tcp_update_rcv_ann_wnd+0xa4>)
 800a82c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a830:	4909      	ldr	r1, [pc, #36]	; (800a858 <tcp_update_rcv_ann_wnd+0xb0>)
 800a832:	4808      	ldr	r0, [pc, #32]	; (800a854 <tcp_update_rcv_ann_wnd+0xac>)
 800a834:	f007 fed2 	bl	80125dc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a840:	2300      	movs	r3, #0
  }
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	08014048 	.word	0x08014048
 800a850:	080142a4 	.word	0x080142a4
 800a854:	0801408c 	.word	0x0801408c
 800a858:	080142c8 	.word	0x080142c8

0800a85c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d107      	bne.n	800a87e <tcp_recved+0x22>
 800a86e:	4b1f      	ldr	r3, [pc, #124]	; (800a8ec <tcp_recved+0x90>)
 800a870:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a874:	491e      	ldr	r1, [pc, #120]	; (800a8f0 <tcp_recved+0x94>)
 800a876:	481f      	ldr	r0, [pc, #124]	; (800a8f4 <tcp_recved+0x98>)
 800a878:	f007 feb0 	bl	80125dc <iprintf>
 800a87c:	e032      	b.n	800a8e4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	7d1b      	ldrb	r3, [r3, #20]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d106      	bne.n	800a894 <tcp_recved+0x38>
 800a886:	4b19      	ldr	r3, [pc, #100]	; (800a8ec <tcp_recved+0x90>)
 800a888:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a88c:	491a      	ldr	r1, [pc, #104]	; (800a8f8 <tcp_recved+0x9c>)
 800a88e:	4819      	ldr	r0, [pc, #100]	; (800a8f4 <tcp_recved+0x98>)
 800a890:	f007 fea4 	bl	80125dc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a898:	887b      	ldrh	r3, [r7, #2]
 800a89a:	4413      	add	r3, r2
 800a89c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a89e:	89fb      	ldrh	r3, [r7, #14]
 800a8a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a8a4:	d804      	bhi.n	800a8b0 <tcp_recved+0x54>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8aa:	89fa      	ldrh	r2, [r7, #14]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d204      	bcs.n	800a8ba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a8b6:	851a      	strh	r2, [r3, #40]	; 0x28
 800a8b8:	e002      	b.n	800a8c0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	89fa      	ldrh	r2, [r7, #14]
 800a8be:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff ff71 	bl	800a7a8 <tcp_update_rcv_ann_wnd>
 800a8c6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a8ce:	d309      	bcc.n	800a8e4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	8b5b      	ldrh	r3, [r3, #26]
 800a8d4:	f043 0302 	orr.w	r3, r3, #2
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f003 fe42 	bl	800e568 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	08014048 	.word	0x08014048
 800a8f0:	080142e4 	.word	0x080142e4
 800a8f4:	0801408c 	.word	0x0801408c
 800a8f8:	080142fc 	.word	0x080142fc

0800a8fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a8fc:	b5b0      	push	{r4, r5, r7, lr}
 800a8fe:	b090      	sub	sp, #64	; 0x40
 800a900:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a908:	4b94      	ldr	r3, [pc, #592]	; (800ab5c <tcp_slowtmr+0x260>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3301      	adds	r3, #1
 800a90e:	4a93      	ldr	r2, [pc, #588]	; (800ab5c <tcp_slowtmr+0x260>)
 800a910:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a912:	4b93      	ldr	r3, [pc, #588]	; (800ab60 <tcp_slowtmr+0x264>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	3301      	adds	r3, #1
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	4b91      	ldr	r3, [pc, #580]	; (800ab60 <tcp_slowtmr+0x264>)
 800a91c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a922:	4b90      	ldr	r3, [pc, #576]	; (800ab64 <tcp_slowtmr+0x268>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a928:	e29d      	b.n	800ae66 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	7d1b      	ldrb	r3, [r3, #20]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d106      	bne.n	800a940 <tcp_slowtmr+0x44>
 800a932:	4b8d      	ldr	r3, [pc, #564]	; (800ab68 <tcp_slowtmr+0x26c>)
 800a934:	f240 42be 	movw	r2, #1214	; 0x4be
 800a938:	498c      	ldr	r1, [pc, #560]	; (800ab6c <tcp_slowtmr+0x270>)
 800a93a:	488d      	ldr	r0, [pc, #564]	; (800ab70 <tcp_slowtmr+0x274>)
 800a93c:	f007 fe4e 	bl	80125dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	7d1b      	ldrb	r3, [r3, #20]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d106      	bne.n	800a956 <tcp_slowtmr+0x5a>
 800a948:	4b87      	ldr	r3, [pc, #540]	; (800ab68 <tcp_slowtmr+0x26c>)
 800a94a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a94e:	4989      	ldr	r1, [pc, #548]	; (800ab74 <tcp_slowtmr+0x278>)
 800a950:	4887      	ldr	r0, [pc, #540]	; (800ab70 <tcp_slowtmr+0x274>)
 800a952:	f007 fe43 	bl	80125dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a958:	7d1b      	ldrb	r3, [r3, #20]
 800a95a:	2b0a      	cmp	r3, #10
 800a95c:	d106      	bne.n	800a96c <tcp_slowtmr+0x70>
 800a95e:	4b82      	ldr	r3, [pc, #520]	; (800ab68 <tcp_slowtmr+0x26c>)
 800a960:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a964:	4984      	ldr	r1, [pc, #528]	; (800ab78 <tcp_slowtmr+0x27c>)
 800a966:	4882      	ldr	r0, [pc, #520]	; (800ab70 <tcp_slowtmr+0x274>)
 800a968:	f007 fe38 	bl	80125dc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	7f9a      	ldrb	r2, [r3, #30]
 800a970:	4b7b      	ldr	r3, [pc, #492]	; (800ab60 <tcp_slowtmr+0x264>)
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	429a      	cmp	r2, r3
 800a976:	d105      	bne.n	800a984 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a982:	e270      	b.n	800ae66 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a984:	4b76      	ldr	r3, [pc, #472]	; (800ab60 <tcp_slowtmr+0x264>)
 800a986:	781a      	ldrb	r2, [r3, #0]
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99a:	7d1b      	ldrb	r3, [r3, #20]
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d10a      	bne.n	800a9b6 <tcp_slowtmr+0xba>
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9a6:	2b05      	cmp	r3, #5
 800a9a8:	d905      	bls.n	800a9b6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a9aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9b4:	e11e      	b.n	800abf4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9bc:	2b0b      	cmp	r3, #11
 800a9be:	d905      	bls.n	800a9cc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9ca:	e113      	b.n	800abf4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d075      	beq.n	800aac2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d006      	beq.n	800a9ec <tcp_slowtmr+0xf0>
 800a9de:	4b62      	ldr	r3, [pc, #392]	; (800ab68 <tcp_slowtmr+0x26c>)
 800a9e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a9e4:	4965      	ldr	r1, [pc, #404]	; (800ab7c <tcp_slowtmr+0x280>)
 800a9e6:	4862      	ldr	r0, [pc, #392]	; (800ab70 <tcp_slowtmr+0x274>)
 800a9e8:	f007 fdf8 	bl	80125dc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d106      	bne.n	800aa02 <tcp_slowtmr+0x106>
 800a9f4:	4b5c      	ldr	r3, [pc, #368]	; (800ab68 <tcp_slowtmr+0x26c>)
 800a9f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a9fa:	4961      	ldr	r1, [pc, #388]	; (800ab80 <tcp_slowtmr+0x284>)
 800a9fc:	485c      	ldr	r0, [pc, #368]	; (800ab70 <tcp_slowtmr+0x274>)
 800a9fe:	f007 fded 	bl	80125dc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800aa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa04:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aa08:	2b0b      	cmp	r3, #11
 800aa0a:	d905      	bls.n	800aa18 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800aa0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa10:	3301      	adds	r3, #1
 800aa12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa16:	e0ed      	b.n	800abf4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	4a58      	ldr	r2, [pc, #352]	; (800ab84 <tcp_slowtmr+0x288>)
 800aa22:	5cd3      	ldrb	r3, [r2, r3]
 800aa24:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800aa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa2c:	7c7a      	ldrb	r2, [r7, #17]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d907      	bls.n	800aa42 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa38:	3301      	adds	r3, #1
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa48:	7c7a      	ldrb	r2, [r7, #17]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	f200 80d2 	bhi.w	800abf4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800aa50:	2301      	movs	r3, #1
 800aa52:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800aa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d108      	bne.n	800aa70 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800aa5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa60:	f004 fc2a 	bl	800f2b8 <tcp_zero_window_probe>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d014      	beq.n	800aa94 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	623b      	str	r3, [r7, #32]
 800aa6e:	e011      	b.n	800aa94 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800aa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa76:	4619      	mov	r1, r3
 800aa78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa7a:	f003 faef 	bl	800e05c <tcp_split_unsent_seg>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d107      	bne.n	800aa94 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800aa84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa86:	f003 fd6f 	bl	800e568 <tcp_output>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 80ac 	beq.w	800abf4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aaaa:	2b06      	cmp	r3, #6
 800aaac:	f200 80a2 	bhi.w	800abf4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aab6:	3301      	adds	r3, #1
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800aac0:	e098      	b.n	800abf4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	db0f      	blt.n	800aaec <tcp_slowtmr+0x1f0>
 800aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aace:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aad2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d008      	beq.n	800aaec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	3301      	adds	r3, #1
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	b21a      	sxth	r2, r3
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	db7b      	blt.n	800abf4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800aafc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aafe:	f004 f825 	bl	800eb4c <tcp_rexmit_rto_prepare>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d007      	beq.n	800ab18 <tcp_slowtmr+0x21c>
 800ab08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d171      	bne.n	800abf4 <tcp_slowtmr+0x2f8>
 800ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d06d      	beq.n	800abf4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	7d1b      	ldrb	r3, [r3, #20]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d03a      	beq.n	800ab96 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab26:	2b0c      	cmp	r3, #12
 800ab28:	bf28      	it	cs
 800ab2a:	230c      	movcs	r3, #12
 800ab2c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ab2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ab34:	10db      	asrs	r3, r3, #3
 800ab36:	b21b      	sxth	r3, r3
 800ab38:	461a      	mov	r2, r3
 800ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ab40:	4413      	add	r3, r2
 800ab42:	7efa      	ldrb	r2, [r7, #27]
 800ab44:	4910      	ldr	r1, [pc, #64]	; (800ab88 <tcp_slowtmr+0x28c>)
 800ab46:	5c8a      	ldrb	r2, [r1, r2]
 800ab48:	4093      	lsls	r3, r2
 800ab4a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ab52:	4293      	cmp	r3, r2
 800ab54:	dc1a      	bgt.n	800ab8c <tcp_slowtmr+0x290>
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	b21a      	sxth	r2, r3
 800ab5a:	e019      	b.n	800ab90 <tcp_slowtmr+0x294>
 800ab5c:	2000d58c 	.word	0x2000d58c
 800ab60:	2000d5a2 	.word	0x2000d5a2
 800ab64:	2000d598 	.word	0x2000d598
 800ab68:	08014048 	.word	0x08014048
 800ab6c:	0801438c 	.word	0x0801438c
 800ab70:	0801408c 	.word	0x0801408c
 800ab74:	080143b8 	.word	0x080143b8
 800ab78:	080143e4 	.word	0x080143e4
 800ab7c:	08014414 	.word	0x08014414
 800ab80:	08014448 	.word	0x08014448
 800ab84:	08016078 	.word	0x08016078
 800ab88:	08016068 	.word	0x08016068
 800ab8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	2200      	movs	r2, #0
 800ab9a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aba8:	4293      	cmp	r3, r2
 800abaa:	bf28      	it	cs
 800abac:	4613      	movcs	r3, r2
 800abae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800abb0:	8a7b      	ldrh	r3, [r7, #18]
 800abb2:	085b      	lsrs	r3, r3, #1
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800abc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	b29b      	uxth	r3, r3
 800abca:	429a      	cmp	r2, r3
 800abcc:	d206      	bcs.n	800abdc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800abe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe8:	2200      	movs	r2, #0
 800abea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800abee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abf0:	f004 f81c 	bl	800ec2c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf6:	7d1b      	ldrb	r3, [r3, #20]
 800abf8:	2b06      	cmp	r3, #6
 800abfa:	d111      	bne.n	800ac20 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	8b5b      	ldrh	r3, [r3, #26]
 800ac00:	f003 0310 	and.w	r3, r3, #16
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00b      	beq.n	800ac20 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac08:	4b9c      	ldr	r3, [pc, #624]	; (800ae7c <tcp_slowtmr+0x580>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	2b28      	cmp	r3, #40	; 0x28
 800ac14:	d904      	bls.n	800ac20 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ac16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac22:	7a5b      	ldrb	r3, [r3, #9]
 800ac24:	f003 0308 	and.w	r3, r3, #8
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d04a      	beq.n	800acc2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d003      	beq.n	800ac3c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ac38:	2b07      	cmp	r3, #7
 800ac3a:	d142      	bne.n	800acc2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac3c:	4b8f      	ldr	r3, [pc, #572]	; (800ae7c <tcp_slowtmr+0x580>)
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	6a1b      	ldr	r3, [r3, #32]
 800ac44:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ac46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac48:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ac4c:	4b8c      	ldr	r3, [pc, #560]	; (800ae80 <tcp_slowtmr+0x584>)
 800ac4e:	440b      	add	r3, r1
 800ac50:	498c      	ldr	r1, [pc, #560]	; (800ae84 <tcp_slowtmr+0x588>)
 800ac52:	fba1 1303 	umull	r1, r3, r1, r3
 800ac56:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d90a      	bls.n	800ac72 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ac5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac60:	3301      	adds	r3, #1
 800ac62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ac66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac70:	e027      	b.n	800acc2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac72:	4b82      	ldr	r3, [pc, #520]	; (800ae7c <tcp_slowtmr+0x580>)
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ac88:	4618      	mov	r0, r3
 800ac8a:	4b7f      	ldr	r3, [pc, #508]	; (800ae88 <tcp_slowtmr+0x58c>)
 800ac8c:	fb00 f303 	mul.w	r3, r0, r3
 800ac90:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ac92:	497c      	ldr	r1, [pc, #496]	; (800ae84 <tcp_slowtmr+0x588>)
 800ac94:	fba1 1303 	umull	r1, r3, r1, r3
 800ac98:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d911      	bls.n	800acc2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ac9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aca0:	f004 faca 	bl	800f238 <tcp_keepalive>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800acaa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d107      	bne.n	800acc2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800acb8:	3301      	adds	r3, #1
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d011      	beq.n	800acee <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800acca:	4b6c      	ldr	r3, [pc, #432]	; (800ae7c <tcp_slowtmr+0x580>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	1ad2      	subs	r2, r2, r3
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800acda:	4619      	mov	r1, r3
 800acdc:	460b      	mov	r3, r1
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	440b      	add	r3, r1
 800ace2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d302      	bcc.n	800acee <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ace8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acea:	f000 fddd 	bl	800b8a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800acee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf0:	7d1b      	ldrb	r3, [r3, #20]
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d10b      	bne.n	800ad0e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800acf6:	4b61      	ldr	r3, [pc, #388]	; (800ae7c <tcp_slowtmr+0x580>)
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b28      	cmp	r3, #40	; 0x28
 800ad02:	d904      	bls.n	800ad0e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ad04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad08:	3301      	adds	r3, #1
 800ad0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	7d1b      	ldrb	r3, [r3, #20]
 800ad12:	2b09      	cmp	r3, #9
 800ad14:	d10b      	bne.n	800ad2e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ad16:	4b59      	ldr	r3, [pc, #356]	; (800ae7c <tcp_slowtmr+0x580>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	2bf0      	cmp	r3, #240	; 0xf0
 800ad22:	d904      	bls.n	800ad2e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ad24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad28:	3301      	adds	r3, #1
 800ad2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ad2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d060      	beq.n	800adf8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad3c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ad3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad40:	f000 fbfe 	bl	800b540 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d010      	beq.n	800ad6c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ad4a:	4b50      	ldr	r3, [pc, #320]	; (800ae8c <tcp_slowtmr+0x590>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d106      	bne.n	800ad62 <tcp_slowtmr+0x466>
 800ad54:	4b4e      	ldr	r3, [pc, #312]	; (800ae90 <tcp_slowtmr+0x594>)
 800ad56:	f240 526d 	movw	r2, #1389	; 0x56d
 800ad5a:	494e      	ldr	r1, [pc, #312]	; (800ae94 <tcp_slowtmr+0x598>)
 800ad5c:	484e      	ldr	r0, [pc, #312]	; (800ae98 <tcp_slowtmr+0x59c>)
 800ad5e:	f007 fc3d 	bl	80125dc <iprintf>
        prev->next = pcb->next;
 800ad62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	60da      	str	r2, [r3, #12]
 800ad6a:	e00f      	b.n	800ad8c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ad6c:	4b47      	ldr	r3, [pc, #284]	; (800ae8c <tcp_slowtmr+0x590>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d006      	beq.n	800ad84 <tcp_slowtmr+0x488>
 800ad76:	4b46      	ldr	r3, [pc, #280]	; (800ae90 <tcp_slowtmr+0x594>)
 800ad78:	f240 5271 	movw	r2, #1393	; 0x571
 800ad7c:	4947      	ldr	r1, [pc, #284]	; (800ae9c <tcp_slowtmr+0x5a0>)
 800ad7e:	4846      	ldr	r0, [pc, #280]	; (800ae98 <tcp_slowtmr+0x59c>)
 800ad80:	f007 fc2c 	bl	80125dc <iprintf>
        tcp_active_pcbs = pcb->next;
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	4a40      	ldr	r2, [pc, #256]	; (800ae8c <tcp_slowtmr+0x590>)
 800ad8a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ad8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d013      	beq.n	800adbc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ad9c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	3304      	adds	r3, #4
 800ada2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ada4:	8ad2      	ldrh	r2, [r2, #22]
 800ada6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ada8:	8b09      	ldrh	r1, [r1, #24]
 800adaa:	9102      	str	r1, [sp, #8]
 800adac:	9201      	str	r2, [sp, #4]
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	462b      	mov	r3, r5
 800adb2:	4622      	mov	r2, r4
 800adb4:	4601      	mov	r1, r0
 800adb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adb8:	f004 f98a 	bl	800f0d0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800adc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc4:	7d1b      	ldrb	r3, [r3, #20]
 800adc6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800add2:	6838      	ldr	r0, [r7, #0]
 800add4:	f7ff f9f4 	bl	800a1c0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800add8:	4b31      	ldr	r3, [pc, #196]	; (800aea0 <tcp_slowtmr+0x5a4>)
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d004      	beq.n	800adee <tcp_slowtmr+0x4f2>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f06f 010c 	mvn.w	r1, #12
 800adea:	68b8      	ldr	r0, [r7, #8]
 800adec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800adee:	4b2c      	ldr	r3, [pc, #176]	; (800aea0 <tcp_slowtmr+0x5a4>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d037      	beq.n	800ae66 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800adf6:	e592      	b.n	800a91e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800adfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	7f1b      	ldrb	r3, [r3, #28]
 800ae06:	3301      	adds	r3, #1
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	7f1a      	ldrb	r2, [r3, #28]
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	7f5b      	ldrb	r3, [r3, #29]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d325      	bcc.n	800ae66 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ae20:	4b1f      	ldr	r3, [pc, #124]	; (800aea0 <tcp_slowtmr+0x5a4>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00b      	beq.n	800ae48 <tcp_slowtmr+0x54c>
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae38:	6912      	ldr	r2, [r2, #16]
 800ae3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	4603      	mov	r3, r0
 800ae42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ae46:	e002      	b.n	800ae4e <tcp_slowtmr+0x552>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ae4e:	4b14      	ldr	r3, [pc, #80]	; (800aea0 <tcp_slowtmr+0x5a4>)
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d000      	beq.n	800ae58 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ae56:	e562      	b.n	800a91e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ae58:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d102      	bne.n	800ae66 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ae60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae62:	f003 fb81 	bl	800e568 <tcp_output>
  while (pcb != NULL) {
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f47f ad5e 	bne.w	800a92a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ae72:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <tcp_slowtmr+0x5a8>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ae78:	e069      	b.n	800af4e <tcp_slowtmr+0x652>
 800ae7a:	bf00      	nop
 800ae7c:	2000d58c 	.word	0x2000d58c
 800ae80:	000a4cb8 	.word	0x000a4cb8
 800ae84:	10624dd3 	.word	0x10624dd3
 800ae88:	000124f8 	.word	0x000124f8
 800ae8c:	2000d598 	.word	0x2000d598
 800ae90:	08014048 	.word	0x08014048
 800ae94:	08014480 	.word	0x08014480
 800ae98:	0801408c 	.word	0x0801408c
 800ae9c:	080144ac 	.word	0x080144ac
 800aea0:	2000d5a0 	.word	0x2000d5a0
 800aea4:	2000d59c 	.word	0x2000d59c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	7d1b      	ldrb	r3, [r3, #20]
 800aeac:	2b0a      	cmp	r3, #10
 800aeae:	d006      	beq.n	800aebe <tcp_slowtmr+0x5c2>
 800aeb0:	4b2b      	ldr	r3, [pc, #172]	; (800af60 <tcp_slowtmr+0x664>)
 800aeb2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800aeb6:	492b      	ldr	r1, [pc, #172]	; (800af64 <tcp_slowtmr+0x668>)
 800aeb8:	482b      	ldr	r0, [pc, #172]	; (800af68 <tcp_slowtmr+0x66c>)
 800aeba:	f007 fb8f 	bl	80125dc <iprintf>
    pcb_remove = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aec4:	4b29      	ldr	r3, [pc, #164]	; (800af6c <tcp_slowtmr+0x670>)
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	6a1b      	ldr	r3, [r3, #32]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	2bf0      	cmp	r3, #240	; 0xf0
 800aed0:	d904      	bls.n	800aedc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800aed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aed6:	3301      	adds	r3, #1
 800aed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800aedc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d02f      	beq.n	800af44 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800aee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aee6:	f000 fb2b 	bl	800b540 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d010      	beq.n	800af12 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800aef0:	4b1f      	ldr	r3, [pc, #124]	; (800af70 <tcp_slowtmr+0x674>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d106      	bne.n	800af08 <tcp_slowtmr+0x60c>
 800aefa:	4b19      	ldr	r3, [pc, #100]	; (800af60 <tcp_slowtmr+0x664>)
 800aefc:	f240 52af 	movw	r2, #1455	; 0x5af
 800af00:	491c      	ldr	r1, [pc, #112]	; (800af74 <tcp_slowtmr+0x678>)
 800af02:	4819      	ldr	r0, [pc, #100]	; (800af68 <tcp_slowtmr+0x66c>)
 800af04:	f007 fb6a 	bl	80125dc <iprintf>
        prev->next = pcb->next;
 800af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	60da      	str	r2, [r3, #12]
 800af10:	e00f      	b.n	800af32 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800af12:	4b17      	ldr	r3, [pc, #92]	; (800af70 <tcp_slowtmr+0x674>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af18:	429a      	cmp	r2, r3
 800af1a:	d006      	beq.n	800af2a <tcp_slowtmr+0x62e>
 800af1c:	4b10      	ldr	r3, [pc, #64]	; (800af60 <tcp_slowtmr+0x664>)
 800af1e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800af22:	4915      	ldr	r1, [pc, #84]	; (800af78 <tcp_slowtmr+0x67c>)
 800af24:	4810      	ldr	r0, [pc, #64]	; (800af68 <tcp_slowtmr+0x66c>)
 800af26:	f007 fb59 	bl	80125dc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800af2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	4a10      	ldr	r2, [pc, #64]	; (800af70 <tcp_slowtmr+0x674>)
 800af30:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800af32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af34:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800af36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800af3c:	69f8      	ldr	r0, [r7, #28]
 800af3e:	f7ff f93f 	bl	800a1c0 <tcp_free>
 800af42:	e004      	b.n	800af4e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800af48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1a9      	bne.n	800aea8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	3730      	adds	r7, #48	; 0x30
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bdb0      	pop	{r4, r5, r7, pc}
 800af5e:	bf00      	nop
 800af60:	08014048 	.word	0x08014048
 800af64:	080144d8 	.word	0x080144d8
 800af68:	0801408c 	.word	0x0801408c
 800af6c:	2000d58c 	.word	0x2000d58c
 800af70:	2000d59c 	.word	0x2000d59c
 800af74:	08014508 	.word	0x08014508
 800af78:	08014530 	.word	0x08014530

0800af7c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800af82:	4b2d      	ldr	r3, [pc, #180]	; (800b038 <tcp_fasttmr+0xbc>)
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	3301      	adds	r3, #1
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	4b2b      	ldr	r3, [pc, #172]	; (800b038 <tcp_fasttmr+0xbc>)
 800af8c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800af8e:	4b2b      	ldr	r3, [pc, #172]	; (800b03c <tcp_fasttmr+0xc0>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800af94:	e048      	b.n	800b028 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	7f9a      	ldrb	r2, [r3, #30]
 800af9a:	4b27      	ldr	r3, [pc, #156]	; (800b038 <tcp_fasttmr+0xbc>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d03f      	beq.n	800b022 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800afa2:	4b25      	ldr	r3, [pc, #148]	; (800b038 <tcp_fasttmr+0xbc>)
 800afa4:	781a      	ldrb	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	8b5b      	ldrh	r3, [r3, #26]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d010      	beq.n	800afd8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	8b5b      	ldrh	r3, [r3, #26]
 800afba:	f043 0302 	orr.w	r3, r3, #2
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f003 facf 	bl	800e568 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	8b5b      	ldrh	r3, [r3, #26]
 800afce:	f023 0303 	bic.w	r3, r3, #3
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	8b5b      	ldrh	r3, [r3, #26]
 800afdc:	f003 0308 	and.w	r3, r3, #8
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d009      	beq.n	800aff8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	8b5b      	ldrh	r3, [r3, #26]
 800afe8:	f023 0308 	bic.w	r3, r3, #8
 800afec:	b29a      	uxth	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fa78 	bl	800a4e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00a      	beq.n	800b01c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b006:	4b0e      	ldr	r3, [pc, #56]	; (800b040 <tcp_fasttmr+0xc4>)
 800b008:	2200      	movs	r2, #0
 800b00a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 f819 	bl	800b044 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b012:	4b0b      	ldr	r3, [pc, #44]	; (800b040 <tcp_fasttmr+0xc4>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d000      	beq.n	800b01c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b01a:	e7b8      	b.n	800af8e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	607b      	str	r3, [r7, #4]
 800b020:	e002      	b.n	800b028 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1b3      	bne.n	800af96 <tcp_fasttmr+0x1a>
    }
  }
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	2000d5a2 	.word	0x2000d5a2
 800b03c:	2000d598 	.word	0x2000d598
 800b040:	2000d5a0 	.word	0x2000d5a0

0800b044 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b044:	b590      	push	{r4, r7, lr}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d109      	bne.n	800b066 <tcp_process_refused_data+0x22>
 800b052:	4b37      	ldr	r3, [pc, #220]	; (800b130 <tcp_process_refused_data+0xec>)
 800b054:	f240 6209 	movw	r2, #1545	; 0x609
 800b058:	4936      	ldr	r1, [pc, #216]	; (800b134 <tcp_process_refused_data+0xf0>)
 800b05a:	4837      	ldr	r0, [pc, #220]	; (800b138 <tcp_process_refused_data+0xf4>)
 800b05c:	f007 fabe 	bl	80125dc <iprintf>
 800b060:	f06f 030f 	mvn.w	r3, #15
 800b064:	e060      	b.n	800b128 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b06a:	7b5b      	ldrb	r3, [r3, #13]
 800b06c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b072:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00b      	beq.n	800b09c <tcp_process_refused_data+0x58>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6918      	ldr	r0, [r3, #16]
 800b08e:	2300      	movs	r3, #0
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	47a0      	blx	r4
 800b096:	4603      	mov	r3, r0
 800b098:	73fb      	strb	r3, [r7, #15]
 800b09a:	e007      	b.n	800b0ac <tcp_process_refused_data+0x68>
 800b09c:	2300      	movs	r3, #0
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	f000 f8a4 	bl	800b1f0 <tcp_recv_null>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d12a      	bne.n	800b10a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	f003 0320 	and.w	r3, r3, #32
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d033      	beq.n	800b126 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b0c6:	d005      	beq.n	800b0d4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00b      	beq.n	800b0f6 <tcp_process_refused_data+0xb2>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6918      	ldr	r0, [r3, #16]
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	47a0      	blx	r4
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73fb      	strb	r3, [r7, #15]
 800b0f4:	e001      	b.n	800b0fa <tcp_process_refused_data+0xb6>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0fe:	f113 0f0d 	cmn.w	r3, #13
 800b102:	d110      	bne.n	800b126 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b104:	f06f 030c 	mvn.w	r3, #12
 800b108:	e00e      	b.n	800b128 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b10e:	f113 0f0d 	cmn.w	r3, #13
 800b112:	d102      	bne.n	800b11a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b114:	f06f 030c 	mvn.w	r3, #12
 800b118:	e006      	b.n	800b128 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b120:	f06f 0304 	mvn.w	r3, #4
 800b124:	e000      	b.n	800b128 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd90      	pop	{r4, r7, pc}
 800b130:	08014048 	.word	0x08014048
 800b134:	08014558 	.word	0x08014558
 800b138:	0801408c 	.word	0x0801408c

0800b13c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b144:	e007      	b.n	800b156 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 f80a 	bl	800b166 <tcp_seg_free>
    seg = next;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1f4      	bne.n	800b146 <tcp_segs_free+0xa>
  }
}
 800b15c:	bf00      	nop
 800b15e:	bf00      	nop
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00c      	beq.n	800b18e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	4618      	mov	r0, r3
 800b182:	f7fe fd71 	bl	8009c68 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	2003      	movs	r0, #3
 800b18a:	f7fd fec9 	bl	8008f20 <memp_free>
  }
}
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d106      	bne.n	800b1b4 <tcp_seg_copy+0x1c>
 800b1a6:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <tcp_seg_copy+0x4c>)
 800b1a8:	f240 6282 	movw	r2, #1666	; 0x682
 800b1ac:	490e      	ldr	r1, [pc, #56]	; (800b1e8 <tcp_seg_copy+0x50>)
 800b1ae:	480f      	ldr	r0, [pc, #60]	; (800b1ec <tcp_seg_copy+0x54>)
 800b1b0:	f007 fa14 	bl	80125dc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b1b4:	2003      	movs	r0, #3
 800b1b6:	f7fd fe61 	bl	8008e7c <memp_malloc>
 800b1ba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <tcp_seg_copy+0x2e>
    return NULL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e00a      	b.n	800b1dc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b1c6:	2210      	movs	r2, #16
 800b1c8:	6879      	ldr	r1, [r7, #4]
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f007 f95b 	bl	8012486 <memcpy>
  pbuf_ref(cseg->p);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe fded 	bl	8009db4 <pbuf_ref>
  return cseg;
 800b1da:	68fb      	ldr	r3, [r7, #12]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	08014048 	.word	0x08014048
 800b1e8:	0801459c 	.word	0x0801459c
 800b1ec:	0801408c 	.word	0x0801408c

0800b1f0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d109      	bne.n	800b218 <tcp_recv_null+0x28>
 800b204:	4b12      	ldr	r3, [pc, #72]	; (800b250 <tcp_recv_null+0x60>)
 800b206:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b20a:	4912      	ldr	r1, [pc, #72]	; (800b254 <tcp_recv_null+0x64>)
 800b20c:	4812      	ldr	r0, [pc, #72]	; (800b258 <tcp_recv_null+0x68>)
 800b20e:	f007 f9e5 	bl	80125dc <iprintf>
 800b212:	f06f 030f 	mvn.w	r3, #15
 800b216:	e016      	b.n	800b246 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d009      	beq.n	800b232 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	891b      	ldrh	r3, [r3, #8]
 800b222:	4619      	mov	r1, r3
 800b224:	68b8      	ldr	r0, [r7, #8]
 800b226:	f7ff fb19 	bl	800a85c <tcp_recved>
    pbuf_free(p);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7fe fd1c 	bl	8009c68 <pbuf_free>
 800b230:	e008      	b.n	800b244 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d104      	bne.n	800b244 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b23a:	68b8      	ldr	r0, [r7, #8]
 800b23c:	f7ff f9be 	bl	800a5bc <tcp_close>
 800b240:	4603      	mov	r3, r0
 800b242:	e000      	b.n	800b246 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	08014048 	.word	0x08014048
 800b254:	080145b8 	.word	0x080145b8
 800b258:	0801408c 	.word	0x0801408c

0800b25c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	4603      	mov	r3, r0
 800b264:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	db01      	blt.n	800b272 <tcp_kill_prio+0x16>
 800b26e:	79fb      	ldrb	r3, [r7, #7]
 800b270:	e000      	b.n	800b274 <tcp_kill_prio+0x18>
 800b272:	237f      	movs	r3, #127	; 0x7f
 800b274:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b276:	7afb      	ldrb	r3, [r7, #11]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d034      	beq.n	800b2e6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b27c:	7afb      	ldrb	r3, [r7, #11]
 800b27e:	3b01      	subs	r3, #1
 800b280:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b28a:	4b19      	ldr	r3, [pc, #100]	; (800b2f0 <tcp_kill_prio+0x94>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	617b      	str	r3, [r7, #20]
 800b290:	e01f      	b.n	800b2d2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	7d5b      	ldrb	r3, [r3, #21]
 800b296:	7afa      	ldrb	r2, [r7, #11]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d80c      	bhi.n	800b2b6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b2a0:	7afa      	ldrb	r2, [r7, #11]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d112      	bne.n	800b2cc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b2a6:	4b13      	ldr	r3, [pc, #76]	; (800b2f4 <tcp_kill_prio+0x98>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d80a      	bhi.n	800b2cc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b2b6:	4b0f      	ldr	r3, [pc, #60]	; (800b2f4 <tcp_kill_prio+0x98>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	7d5b      	ldrb	r3, [r3, #21]
 800b2ca:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1dc      	bne.n	800b292 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d004      	beq.n	800b2e8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b2de:	6938      	ldr	r0, [r7, #16]
 800b2e0:	f7ff fa56 	bl	800a790 <tcp_abort>
 800b2e4:	e000      	b.n	800b2e8 <tcp_kill_prio+0x8c>
    return;
 800b2e6:	bf00      	nop
  }
}
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	2000d598 	.word	0x2000d598
 800b2f4:	2000d58c 	.word	0x2000d58c

0800b2f8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	2b08      	cmp	r3, #8
 800b306:	d009      	beq.n	800b31c <tcp_kill_state+0x24>
 800b308:	79fb      	ldrb	r3, [r7, #7]
 800b30a:	2b09      	cmp	r3, #9
 800b30c:	d006      	beq.n	800b31c <tcp_kill_state+0x24>
 800b30e:	4b1a      	ldr	r3, [pc, #104]	; (800b378 <tcp_kill_state+0x80>)
 800b310:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b314:	4919      	ldr	r1, [pc, #100]	; (800b37c <tcp_kill_state+0x84>)
 800b316:	481a      	ldr	r0, [pc, #104]	; (800b380 <tcp_kill_state+0x88>)
 800b318:	f007 f960 	bl	80125dc <iprintf>

  inactivity = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b320:	2300      	movs	r3, #0
 800b322:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b324:	4b17      	ldr	r3, [pc, #92]	; (800b384 <tcp_kill_state+0x8c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	617b      	str	r3, [r7, #20]
 800b32a:	e017      	b.n	800b35c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	7d1b      	ldrb	r3, [r3, #20]
 800b330:	79fa      	ldrb	r2, [r7, #7]
 800b332:	429a      	cmp	r2, r3
 800b334:	d10f      	bne.n	800b356 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b336:	4b14      	ldr	r3, [pc, #80]	; (800b388 <tcp_kill_state+0x90>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	429a      	cmp	r2, r3
 800b344:	d807      	bhi.n	800b356 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b346:	4b10      	ldr	r3, [pc, #64]	; (800b388 <tcp_kill_state+0x90>)
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1e4      	bne.n	800b32c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d003      	beq.n	800b370 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b368:	2100      	movs	r1, #0
 800b36a:	6938      	ldr	r0, [r7, #16]
 800b36c:	f7ff f952 	bl	800a614 <tcp_abandon>
  }
}
 800b370:	bf00      	nop
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	08014048 	.word	0x08014048
 800b37c:	080145d4 	.word	0x080145d4
 800b380:	0801408c 	.word	0x0801408c
 800b384:	2000d598 	.word	0x2000d598
 800b388:	2000d58c 	.word	0x2000d58c

0800b38c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b396:	2300      	movs	r3, #0
 800b398:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b39a:	4b12      	ldr	r3, [pc, #72]	; (800b3e4 <tcp_kill_timewait+0x58>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e012      	b.n	800b3c8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b3a2:	4b11      	ldr	r3, [pc, #68]	; (800b3e8 <tcp_kill_timewait+0x5c>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d807      	bhi.n	800b3c2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	; (800b3e8 <tcp_kill_timewait+0x5c>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	60fb      	str	r3, [r7, #12]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1e9      	bne.n	800b3a2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b3d4:	68b8      	ldr	r0, [r7, #8]
 800b3d6:	f7ff f9db 	bl	800a790 <tcp_abort>
  }
}
 800b3da:	bf00      	nop
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	2000d59c 	.word	0x2000d59c
 800b3e8:	2000d58c 	.word	0x2000d58c

0800b3ec <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b3f2:	4b10      	ldr	r3, [pc, #64]	; (800b434 <tcp_handle_closepend+0x48>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b3f8:	e014      	b.n	800b424 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	8b5b      	ldrh	r3, [r3, #26]
 800b404:	f003 0308 	and.w	r3, r3, #8
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d009      	beq.n	800b420 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	8b5b      	ldrh	r3, [r3, #26]
 800b410:	f023 0308 	bic.w	r3, r3, #8
 800b414:	b29a      	uxth	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff f864 	bl	800a4e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1e7      	bne.n	800b3fa <tcp_handle_closepend+0xe>
  }
}
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	2000d598 	.word	0x2000d598

0800b438 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b442:	2001      	movs	r0, #1
 800b444:	f7fd fd1a 	bl	8008e7c <memp_malloc>
 800b448:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d126      	bne.n	800b49e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b450:	f7ff ffcc 	bl	800b3ec <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b454:	f7ff ff9a 	bl	800b38c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b458:	2001      	movs	r0, #1
 800b45a:	f7fd fd0f 	bl	8008e7c <memp_malloc>
 800b45e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d11b      	bne.n	800b49e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b466:	2009      	movs	r0, #9
 800b468:	f7ff ff46 	bl	800b2f8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b46c:	2001      	movs	r0, #1
 800b46e:	f7fd fd05 	bl	8008e7c <memp_malloc>
 800b472:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d111      	bne.n	800b49e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b47a:	2008      	movs	r0, #8
 800b47c:	f7ff ff3c 	bl	800b2f8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b480:	2001      	movs	r0, #1
 800b482:	f7fd fcfb 	bl	8008e7c <memp_malloc>
 800b486:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d107      	bne.n	800b49e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff fee3 	bl	800b25c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b496:	2001      	movs	r0, #1
 800b498:	f7fd fcf0 	bl	8008e7c <memp_malloc>
 800b49c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d03f      	beq.n	800b524 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b4a4:	229c      	movs	r2, #156	; 0x9c
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f006 fffa 	bl	80124a2 <memset>
    pcb->prio = prio;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	79fa      	ldrb	r2, [r7, #7]
 800b4b2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b4ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b4c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	22ff      	movs	r2, #255	; 0xff
 800b4d2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b4da:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2206      	movs	r2, #6
 800b4e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2206      	movs	r2, #6
 800b4e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4f0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b4fa:	4b0d      	ldr	r3, [pc, #52]	; (800b530 <tcp_alloc+0xf8>)
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b502:	4b0c      	ldr	r3, [pc, #48]	; (800b534 <tcp_alloc+0xfc>)
 800b504:	781a      	ldrb	r2, [r3, #0]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b510:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4a08      	ldr	r2, [pc, #32]	; (800b538 <tcp_alloc+0x100>)
 800b518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	4a07      	ldr	r2, [pc, #28]	; (800b53c <tcp_alloc+0x104>)
 800b520:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b524:	68fb      	ldr	r3, [r7, #12]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	2000d58c 	.word	0x2000d58c
 800b534:	2000d5a2 	.word	0x2000d5a2
 800b538:	0800b1f1 	.word	0x0800b1f1
 800b53c:	006ddd00 	.word	0x006ddd00

0800b540 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d107      	bne.n	800b55e <tcp_pcb_purge+0x1e>
 800b54e:	4b21      	ldr	r3, [pc, #132]	; (800b5d4 <tcp_pcb_purge+0x94>)
 800b550:	f640 0251 	movw	r2, #2129	; 0x851
 800b554:	4920      	ldr	r1, [pc, #128]	; (800b5d8 <tcp_pcb_purge+0x98>)
 800b556:	4821      	ldr	r0, [pc, #132]	; (800b5dc <tcp_pcb_purge+0x9c>)
 800b558:	f007 f840 	bl	80125dc <iprintf>
 800b55c:	e037      	b.n	800b5ce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	7d1b      	ldrb	r3, [r3, #20]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d033      	beq.n	800b5ce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b56a:	2b0a      	cmp	r3, #10
 800b56c:	d02f      	beq.n	800b5ce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b572:	2b01      	cmp	r3, #1
 800b574:	d02b      	beq.n	800b5ce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d007      	beq.n	800b58e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b582:	4618      	mov	r0, r3
 800b584:	f7fe fb70 	bl	8009c68 <pbuf_free>
      pcb->refused_data = NULL;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b592:	2b00      	cmp	r3, #0
 800b594:	d002      	beq.n	800b59c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f986 	bl	800b8a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5a2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff fdc7 	bl	800b13c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fdc2 	bl	800b13c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	66da      	str	r2, [r3, #108]	; 0x6c
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	08014048 	.word	0x08014048
 800b5d8:	08014694 	.word	0x08014694
 800b5dc:	0801408c 	.word	0x0801408c

0800b5e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d106      	bne.n	800b5fe <tcp_pcb_remove+0x1e>
 800b5f0:	4b3e      	ldr	r3, [pc, #248]	; (800b6ec <tcp_pcb_remove+0x10c>)
 800b5f2:	f640 0283 	movw	r2, #2179	; 0x883
 800b5f6:	493e      	ldr	r1, [pc, #248]	; (800b6f0 <tcp_pcb_remove+0x110>)
 800b5f8:	483e      	ldr	r0, [pc, #248]	; (800b6f4 <tcp_pcb_remove+0x114>)
 800b5fa:	f006 ffef 	bl	80125dc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d106      	bne.n	800b612 <tcp_pcb_remove+0x32>
 800b604:	4b39      	ldr	r3, [pc, #228]	; (800b6ec <tcp_pcb_remove+0x10c>)
 800b606:	f640 0284 	movw	r2, #2180	; 0x884
 800b60a:	493b      	ldr	r1, [pc, #236]	; (800b6f8 <tcp_pcb_remove+0x118>)
 800b60c:	4839      	ldr	r0, [pc, #228]	; (800b6f4 <tcp_pcb_remove+0x114>)
 800b60e:	f006 ffe5 	bl	80125dc <iprintf>

  TCP_RMV(pcblist, pcb);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d105      	bne.n	800b628 <tcp_pcb_remove+0x48>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68da      	ldr	r2, [r3, #12]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	e013      	b.n	800b650 <tcp_pcb_remove+0x70>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	60fb      	str	r3, [r7, #12]
 800b62e:	e00c      	b.n	800b64a <tcp_pcb_remove+0x6a>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d104      	bne.n	800b644 <tcp_pcb_remove+0x64>
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	68da      	ldr	r2, [r3, #12]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	60da      	str	r2, [r3, #12]
 800b642:	e005      	b.n	800b650 <tcp_pcb_remove+0x70>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	60fb      	str	r3, [r7, #12]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1ef      	bne.n	800b630 <tcp_pcb_remove+0x50>
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2200      	movs	r2, #0
 800b654:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b656:	6838      	ldr	r0, [r7, #0]
 800b658:	f7ff ff72 	bl	800b540 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	7d1b      	ldrb	r3, [r3, #20]
 800b660:	2b0a      	cmp	r3, #10
 800b662:	d013      	beq.n	800b68c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d00f      	beq.n	800b68c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	8b5b      	ldrh	r3, [r3, #26]
 800b670:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b674:	2b00      	cmp	r3, #0
 800b676:	d009      	beq.n	800b68c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	8b5b      	ldrh	r3, [r3, #26]
 800b67c:	f043 0302 	orr.w	r3, r3, #2
 800b680:	b29a      	uxth	r2, r3
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b686:	6838      	ldr	r0, [r7, #0]
 800b688:	f002 ff6e 	bl	800e568 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	7d1b      	ldrb	r3, [r3, #20]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d020      	beq.n	800b6d6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d006      	beq.n	800b6aa <tcp_pcb_remove+0xca>
 800b69c:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <tcp_pcb_remove+0x10c>)
 800b69e:	f640 0293 	movw	r2, #2195	; 0x893
 800b6a2:	4916      	ldr	r1, [pc, #88]	; (800b6fc <tcp_pcb_remove+0x11c>)
 800b6a4:	4813      	ldr	r0, [pc, #76]	; (800b6f4 <tcp_pcb_remove+0x114>)
 800b6a6:	f006 ff99 	bl	80125dc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d006      	beq.n	800b6c0 <tcp_pcb_remove+0xe0>
 800b6b2:	4b0e      	ldr	r3, [pc, #56]	; (800b6ec <tcp_pcb_remove+0x10c>)
 800b6b4:	f640 0294 	movw	r2, #2196	; 0x894
 800b6b8:	4911      	ldr	r1, [pc, #68]	; (800b700 <tcp_pcb_remove+0x120>)
 800b6ba:	480e      	ldr	r0, [pc, #56]	; (800b6f4 <tcp_pcb_remove+0x114>)
 800b6bc:	f006 ff8e 	bl	80125dc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d006      	beq.n	800b6d6 <tcp_pcb_remove+0xf6>
 800b6c8:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <tcp_pcb_remove+0x10c>)
 800b6ca:	f640 0296 	movw	r2, #2198	; 0x896
 800b6ce:	490d      	ldr	r1, [pc, #52]	; (800b704 <tcp_pcb_remove+0x124>)
 800b6d0:	4808      	ldr	r0, [pc, #32]	; (800b6f4 <tcp_pcb_remove+0x114>)
 800b6d2:	f006 ff83 	bl	80125dc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	08014048 	.word	0x08014048
 800b6f0:	080146b0 	.word	0x080146b0
 800b6f4:	0801408c 	.word	0x0801408c
 800b6f8:	080146cc 	.word	0x080146cc
 800b6fc:	080146ec 	.word	0x080146ec
 800b700:	08014704 	.word	0x08014704
 800b704:	08014720 	.word	0x08014720

0800b708 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d106      	bne.n	800b724 <tcp_next_iss+0x1c>
 800b716:	4b0a      	ldr	r3, [pc, #40]	; (800b740 <tcp_next_iss+0x38>)
 800b718:	f640 02af 	movw	r2, #2223	; 0x8af
 800b71c:	4909      	ldr	r1, [pc, #36]	; (800b744 <tcp_next_iss+0x3c>)
 800b71e:	480a      	ldr	r0, [pc, #40]	; (800b748 <tcp_next_iss+0x40>)
 800b720:	f006 ff5c 	bl	80125dc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b724:	4b09      	ldr	r3, [pc, #36]	; (800b74c <tcp_next_iss+0x44>)
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	4b09      	ldr	r3, [pc, #36]	; (800b750 <tcp_next_iss+0x48>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4413      	add	r3, r2
 800b72e:	4a07      	ldr	r2, [pc, #28]	; (800b74c <tcp_next_iss+0x44>)
 800b730:	6013      	str	r3, [r2, #0]
  return iss;
 800b732:	4b06      	ldr	r3, [pc, #24]	; (800b74c <tcp_next_iss+0x44>)
 800b734:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	08014048 	.word	0x08014048
 800b744:	08014738 	.word	0x08014738
 800b748:	0801408c 	.word	0x0801408c
 800b74c:	20000014 	.word	0x20000014
 800b750:	2000d58c 	.word	0x2000d58c

0800b754 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b086      	sub	sp, #24
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
 800b760:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d106      	bne.n	800b776 <tcp_eff_send_mss_netif+0x22>
 800b768:	4b14      	ldr	r3, [pc, #80]	; (800b7bc <tcp_eff_send_mss_netif+0x68>)
 800b76a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b76e:	4914      	ldr	r1, [pc, #80]	; (800b7c0 <tcp_eff_send_mss_netif+0x6c>)
 800b770:	4814      	ldr	r0, [pc, #80]	; (800b7c4 <tcp_eff_send_mss_netif+0x70>)
 800b772:	f006 ff33 	bl	80125dc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b77c:	89fb      	ldrh	r3, [r7, #14]
 800b77e:	e019      	b.n	800b7b4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b784:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b786:	8afb      	ldrh	r3, [r7, #22]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d012      	beq.n	800b7b2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b78c:	2328      	movs	r3, #40	; 0x28
 800b78e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b790:	8afa      	ldrh	r2, [r7, #22]
 800b792:	8abb      	ldrh	r3, [r7, #20]
 800b794:	429a      	cmp	r2, r3
 800b796:	d904      	bls.n	800b7a2 <tcp_eff_send_mss_netif+0x4e>
 800b798:	8afa      	ldrh	r2, [r7, #22]
 800b79a:	8abb      	ldrh	r3, [r7, #20]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	e000      	b.n	800b7a4 <tcp_eff_send_mss_netif+0x50>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b7a6:	8a7a      	ldrh	r2, [r7, #18]
 800b7a8:	89fb      	ldrh	r3, [r7, #14]
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	bf28      	it	cs
 800b7ae:	4613      	movcs	r3, r2
 800b7b0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b7b2:	89fb      	ldrh	r3, [r7, #14]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3718      	adds	r7, #24
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	08014048 	.word	0x08014048
 800b7c0:	08014754 	.word	0x08014754
 800b7c4:	0801408c 	.word	0x0801408c

0800b7c8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d119      	bne.n	800b810 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b7dc:	4b10      	ldr	r3, [pc, #64]	; (800b820 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b7de:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b7e2:	4910      	ldr	r1, [pc, #64]	; (800b824 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b7e4:	4810      	ldr	r0, [pc, #64]	; (800b828 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b7e6:	f006 fef9 	bl	80125dc <iprintf>

  while (pcb != NULL) {
 800b7ea:	e011      	b.n	800b810 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d108      	bne.n	800b80a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7fe ffc6 	bl	800a790 <tcp_abort>
      pcb = next;
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	e002      	b.n	800b810 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1ea      	bne.n	800b7ec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b816:	bf00      	nop
 800b818:	bf00      	nop
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	08014048 	.word	0x08014048
 800b824:	0801477c 	.word	0x0801477c
 800b828:	0801408c 	.word	0x0801408c

0800b82c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d02a      	beq.n	800b892 <tcp_netif_ip_addr_changed+0x66>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d026      	beq.n	800b892 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b844:	4b15      	ldr	r3, [pc, #84]	; (800b89c <tcp_netif_ip_addr_changed+0x70>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4619      	mov	r1, r3
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7ff ffbc 	bl	800b7c8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b850:	4b13      	ldr	r3, [pc, #76]	; (800b8a0 <tcp_netif_ip_addr_changed+0x74>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7ff ffb6 	bl	800b7c8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d017      	beq.n	800b892 <tcp_netif_ip_addr_changed+0x66>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d013      	beq.n	800b892 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b86a:	4b0e      	ldr	r3, [pc, #56]	; (800b8a4 <tcp_netif_ip_addr_changed+0x78>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	60fb      	str	r3, [r7, #12]
 800b870:	e00c      	b.n	800b88c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d103      	bne.n	800b886 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1ef      	bne.n	800b872 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b892:	bf00      	nop
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	2000d598 	.word	0x2000d598
 800b8a0:	2000d590 	.word	0x2000d590
 800b8a4:	2000d594 	.word	0x2000d594

0800b8a8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d007      	beq.n	800b8c8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7ff fc3d 	bl	800b13c <tcp_segs_free>
    pcb->ooseq = NULL;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b8c8:	bf00      	nop
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b8d0:	b590      	push	{r4, r7, lr}
 800b8d2:	b08d      	sub	sp, #52	; 0x34
 800b8d4:	af04      	add	r7, sp, #16
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d105      	bne.n	800b8ec <tcp_input+0x1c>
 800b8e0:	4b9b      	ldr	r3, [pc, #620]	; (800bb50 <tcp_input+0x280>)
 800b8e2:	2283      	movs	r2, #131	; 0x83
 800b8e4:	499b      	ldr	r1, [pc, #620]	; (800bb54 <tcp_input+0x284>)
 800b8e6:	489c      	ldr	r0, [pc, #624]	; (800bb58 <tcp_input+0x288>)
 800b8e8:	f006 fe78 	bl	80125dc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	4a9a      	ldr	r2, [pc, #616]	; (800bb5c <tcp_input+0x28c>)
 800b8f2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	895b      	ldrh	r3, [r3, #10]
 800b8f8:	2b13      	cmp	r3, #19
 800b8fa:	f240 83d1 	bls.w	800c0a0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b8fe:	4b98      	ldr	r3, [pc, #608]	; (800bb60 <tcp_input+0x290>)
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	4a97      	ldr	r2, [pc, #604]	; (800bb60 <tcp_input+0x290>)
 800b904:	6812      	ldr	r2, [r2, #0]
 800b906:	4611      	mov	r1, r2
 800b908:	4618      	mov	r0, r3
 800b90a:	f005 fc47 	bl	801119c <ip4_addr_isbroadcast_u32>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	f040 83c7 	bne.w	800c0a4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b916:	4b92      	ldr	r3, [pc, #584]	; (800bb60 <tcp_input+0x290>)
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b91e:	2be0      	cmp	r3, #224	; 0xe0
 800b920:	f000 83c0 	beq.w	800c0a4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b924:	4b8d      	ldr	r3, [pc, #564]	; (800bb5c <tcp_input+0x28c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	899b      	ldrh	r3, [r3, #12]
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fc fdef 	bl	8008510 <lwip_htons>
 800b932:	4603      	mov	r3, r0
 800b934:	0b1b      	lsrs	r3, r3, #12
 800b936:	b29b      	uxth	r3, r3
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b93e:	7cbb      	ldrb	r3, [r7, #18]
 800b940:	2b13      	cmp	r3, #19
 800b942:	f240 83b1 	bls.w	800c0a8 <tcp_input+0x7d8>
 800b946:	7cbb      	ldrb	r3, [r7, #18]
 800b948:	b29a      	uxth	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	891b      	ldrh	r3, [r3, #8]
 800b94e:	429a      	cmp	r2, r3
 800b950:	f200 83aa 	bhi.w	800c0a8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b954:	7cbb      	ldrb	r3, [r7, #18]
 800b956:	b29b      	uxth	r3, r3
 800b958:	3b14      	subs	r3, #20
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	4b81      	ldr	r3, [pc, #516]	; (800bb64 <tcp_input+0x294>)
 800b95e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b960:	4b81      	ldr	r3, [pc, #516]	; (800bb68 <tcp_input+0x298>)
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	895a      	ldrh	r2, [r3, #10]
 800b96a:	7cbb      	ldrb	r3, [r7, #18]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	429a      	cmp	r2, r3
 800b970:	d309      	bcc.n	800b986 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b972:	4b7c      	ldr	r3, [pc, #496]	; (800bb64 <tcp_input+0x294>)
 800b974:	881a      	ldrh	r2, [r3, #0]
 800b976:	4b7d      	ldr	r3, [pc, #500]	; (800bb6c <tcp_input+0x29c>)
 800b978:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b97a:	7cbb      	ldrb	r3, [r7, #18]
 800b97c:	4619      	mov	r1, r3
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7fe f8ec 	bl	8009b5c <pbuf_remove_header>
 800b984:	e04e      	b.n	800ba24 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d105      	bne.n	800b99a <tcp_input+0xca>
 800b98e:	4b70      	ldr	r3, [pc, #448]	; (800bb50 <tcp_input+0x280>)
 800b990:	22c2      	movs	r2, #194	; 0xc2
 800b992:	4977      	ldr	r1, [pc, #476]	; (800bb70 <tcp_input+0x2a0>)
 800b994:	4870      	ldr	r0, [pc, #448]	; (800bb58 <tcp_input+0x288>)
 800b996:	f006 fe21 	bl	80125dc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b99a:	2114      	movs	r1, #20
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7fe f8dd 	bl	8009b5c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	895a      	ldrh	r2, [r3, #10]
 800b9a6:	4b71      	ldr	r3, [pc, #452]	; (800bb6c <tcp_input+0x29c>)
 800b9a8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b9aa:	4b6e      	ldr	r3, [pc, #440]	; (800bb64 <tcp_input+0x294>)
 800b9ac:	881a      	ldrh	r2, [r3, #0]
 800b9ae:	4b6f      	ldr	r3, [pc, #444]	; (800bb6c <tcp_input+0x29c>)
 800b9b0:	881b      	ldrh	r3, [r3, #0]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b9b6:	4b6d      	ldr	r3, [pc, #436]	; (800bb6c <tcp_input+0x29c>)
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7fe f8cd 	bl	8009b5c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	895b      	ldrh	r3, [r3, #10]
 800b9c8:	8a3a      	ldrh	r2, [r7, #16]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	f200 836e 	bhi.w	800c0ac <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	4a64      	ldr	r2, [pc, #400]	; (800bb68 <tcp_input+0x298>)
 800b9d8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	8a3a      	ldrh	r2, [r7, #16]
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fe f8ba 	bl	8009b5c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	891a      	ldrh	r2, [r3, #8]
 800b9ec:	8a3b      	ldrh	r3, [r7, #16]
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	895b      	ldrh	r3, [r3, #10]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d005      	beq.n	800ba0a <tcp_input+0x13a>
 800b9fe:	4b54      	ldr	r3, [pc, #336]	; (800bb50 <tcp_input+0x280>)
 800ba00:	22df      	movs	r2, #223	; 0xdf
 800ba02:	495c      	ldr	r1, [pc, #368]	; (800bb74 <tcp_input+0x2a4>)
 800ba04:	4854      	ldr	r0, [pc, #336]	; (800bb58 <tcp_input+0x288>)
 800ba06:	f006 fde9 	bl	80125dc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	891a      	ldrh	r2, [r3, #8]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	891b      	ldrh	r3, [r3, #8]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d005      	beq.n	800ba24 <tcp_input+0x154>
 800ba18:	4b4d      	ldr	r3, [pc, #308]	; (800bb50 <tcp_input+0x280>)
 800ba1a:	22e0      	movs	r2, #224	; 0xe0
 800ba1c:	4956      	ldr	r1, [pc, #344]	; (800bb78 <tcp_input+0x2a8>)
 800ba1e:	484e      	ldr	r0, [pc, #312]	; (800bb58 <tcp_input+0x288>)
 800ba20:	f006 fddc 	bl	80125dc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ba24:	4b4d      	ldr	r3, [pc, #308]	; (800bb5c <tcp_input+0x28c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	4a4b      	ldr	r2, [pc, #300]	; (800bb5c <tcp_input+0x28c>)
 800ba2e:	6814      	ldr	r4, [r2, #0]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fc fd6d 	bl	8008510 <lwip_htons>
 800ba36:	4603      	mov	r3, r0
 800ba38:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ba3a:	4b48      	ldr	r3, [pc, #288]	; (800bb5c <tcp_input+0x28c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	885b      	ldrh	r3, [r3, #2]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	4a46      	ldr	r2, [pc, #280]	; (800bb5c <tcp_input+0x28c>)
 800ba44:	6814      	ldr	r4, [r2, #0]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fc fd62 	bl	8008510 <lwip_htons>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ba50:	4b42      	ldr	r3, [pc, #264]	; (800bb5c <tcp_input+0x28c>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	4a41      	ldr	r2, [pc, #260]	; (800bb5c <tcp_input+0x28c>)
 800ba58:	6814      	ldr	r4, [r2, #0]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fc fd6d 	bl	800853a <lwip_htonl>
 800ba60:	4603      	mov	r3, r0
 800ba62:	6063      	str	r3, [r4, #4]
 800ba64:	6863      	ldr	r3, [r4, #4]
 800ba66:	4a45      	ldr	r2, [pc, #276]	; (800bb7c <tcp_input+0x2ac>)
 800ba68:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ba6a:	4b3c      	ldr	r3, [pc, #240]	; (800bb5c <tcp_input+0x28c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	4a3a      	ldr	r2, [pc, #232]	; (800bb5c <tcp_input+0x28c>)
 800ba72:	6814      	ldr	r4, [r2, #0]
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fc fd60 	bl	800853a <lwip_htonl>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	60a3      	str	r3, [r4, #8]
 800ba7e:	68a3      	ldr	r3, [r4, #8]
 800ba80:	4a3f      	ldr	r2, [pc, #252]	; (800bb80 <tcp_input+0x2b0>)
 800ba82:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ba84:	4b35      	ldr	r3, [pc, #212]	; (800bb5c <tcp_input+0x28c>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	89db      	ldrh	r3, [r3, #14]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	4a33      	ldr	r2, [pc, #204]	; (800bb5c <tcp_input+0x28c>)
 800ba8e:	6814      	ldr	r4, [r2, #0]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7fc fd3d 	bl	8008510 <lwip_htons>
 800ba96:	4603      	mov	r3, r0
 800ba98:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ba9a:	4b30      	ldr	r3, [pc, #192]	; (800bb5c <tcp_input+0x28c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	899b      	ldrh	r3, [r3, #12]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fc fd34 	bl	8008510 <lwip_htons>
 800baa8:	4603      	mov	r3, r0
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	4b34      	ldr	r3, [pc, #208]	; (800bb84 <tcp_input+0x2b4>)
 800bab4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	891a      	ldrh	r2, [r3, #8]
 800baba:	4b33      	ldr	r3, [pc, #204]	; (800bb88 <tcp_input+0x2b8>)
 800babc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800babe:	4b31      	ldr	r3, [pc, #196]	; (800bb84 <tcp_input+0x2b4>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	f003 0303 	and.w	r3, r3, #3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00c      	beq.n	800bae4 <tcp_input+0x214>
    tcplen++;
 800baca:	4b2f      	ldr	r3, [pc, #188]	; (800bb88 <tcp_input+0x2b8>)
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	3301      	adds	r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	4b2d      	ldr	r3, [pc, #180]	; (800bb88 <tcp_input+0x2b8>)
 800bad4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	891a      	ldrh	r2, [r3, #8]
 800bada:	4b2b      	ldr	r3, [pc, #172]	; (800bb88 <tcp_input+0x2b8>)
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	429a      	cmp	r2, r3
 800bae0:	f200 82e6 	bhi.w	800c0b0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bae4:	2300      	movs	r3, #0
 800bae6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bae8:	4b28      	ldr	r3, [pc, #160]	; (800bb8c <tcp_input+0x2bc>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	61fb      	str	r3, [r7, #28]
 800baee:	e09d      	b.n	800bc2c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	7d1b      	ldrb	r3, [r3, #20]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d105      	bne.n	800bb04 <tcp_input+0x234>
 800baf8:	4b15      	ldr	r3, [pc, #84]	; (800bb50 <tcp_input+0x280>)
 800bafa:	22fb      	movs	r2, #251	; 0xfb
 800bafc:	4924      	ldr	r1, [pc, #144]	; (800bb90 <tcp_input+0x2c0>)
 800bafe:	4816      	ldr	r0, [pc, #88]	; (800bb58 <tcp_input+0x288>)
 800bb00:	f006 fd6c 	bl	80125dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	7d1b      	ldrb	r3, [r3, #20]
 800bb08:	2b0a      	cmp	r3, #10
 800bb0a:	d105      	bne.n	800bb18 <tcp_input+0x248>
 800bb0c:	4b10      	ldr	r3, [pc, #64]	; (800bb50 <tcp_input+0x280>)
 800bb0e:	22fc      	movs	r2, #252	; 0xfc
 800bb10:	4920      	ldr	r1, [pc, #128]	; (800bb94 <tcp_input+0x2c4>)
 800bb12:	4811      	ldr	r0, [pc, #68]	; (800bb58 <tcp_input+0x288>)
 800bb14:	f006 fd62 	bl	80125dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	7d1b      	ldrb	r3, [r3, #20]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d105      	bne.n	800bb2c <tcp_input+0x25c>
 800bb20:	4b0b      	ldr	r3, [pc, #44]	; (800bb50 <tcp_input+0x280>)
 800bb22:	22fd      	movs	r2, #253	; 0xfd
 800bb24:	491c      	ldr	r1, [pc, #112]	; (800bb98 <tcp_input+0x2c8>)
 800bb26:	480c      	ldr	r0, [pc, #48]	; (800bb58 <tcp_input+0x288>)
 800bb28:	f006 fd58 	bl	80125dc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	7a1b      	ldrb	r3, [r3, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d033      	beq.n	800bb9c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	7a1a      	ldrb	r2, [r3, #8]
 800bb38:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <tcp_input+0x290>)
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb40:	3301      	adds	r3, #1
 800bb42:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d029      	beq.n	800bb9c <tcp_input+0x2cc>
      prev = pcb;
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	61bb      	str	r3, [r7, #24]
      continue;
 800bb4c:	e06b      	b.n	800bc26 <tcp_input+0x356>
 800bb4e:	bf00      	nop
 800bb50:	080147b0 	.word	0x080147b0
 800bb54:	080147e4 	.word	0x080147e4
 800bb58:	080147fc 	.word	0x080147fc
 800bb5c:	2000d5b4 	.word	0x2000d5b4
 800bb60:	20007c78 	.word	0x20007c78
 800bb64:	2000d5b8 	.word	0x2000d5b8
 800bb68:	2000d5bc 	.word	0x2000d5bc
 800bb6c:	2000d5ba 	.word	0x2000d5ba
 800bb70:	08014824 	.word	0x08014824
 800bb74:	08014834 	.word	0x08014834
 800bb78:	08014840 	.word	0x08014840
 800bb7c:	2000d5c4 	.word	0x2000d5c4
 800bb80:	2000d5c8 	.word	0x2000d5c8
 800bb84:	2000d5d0 	.word	0x2000d5d0
 800bb88:	2000d5ce 	.word	0x2000d5ce
 800bb8c:	2000d598 	.word	0x2000d598
 800bb90:	08014860 	.word	0x08014860
 800bb94:	08014888 	.word	0x08014888
 800bb98:	080148b4 	.word	0x080148b4
    }

    if (pcb->remote_port == tcphdr->src &&
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	8b1a      	ldrh	r2, [r3, #24]
 800bba0:	4b72      	ldr	r3, [pc, #456]	; (800bd6c <tcp_input+0x49c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d13a      	bne.n	800bc22 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	8ada      	ldrh	r2, [r3, #22]
 800bbb0:	4b6e      	ldr	r3, [pc, #440]	; (800bd6c <tcp_input+0x49c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	885b      	ldrh	r3, [r3, #2]
 800bbb6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d132      	bne.n	800bc22 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	4b6b      	ldr	r3, [pc, #428]	; (800bd70 <tcp_input+0x4a0>)
 800bbc2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d12c      	bne.n	800bc22 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	4b68      	ldr	r3, [pc, #416]	; (800bd70 <tcp_input+0x4a0>)
 800bbce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d126      	bne.n	800bc22 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	69fa      	ldr	r2, [r7, #28]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d106      	bne.n	800bbec <tcp_input+0x31c>
 800bbde:	4b65      	ldr	r3, [pc, #404]	; (800bd74 <tcp_input+0x4a4>)
 800bbe0:	f240 120d 	movw	r2, #269	; 0x10d
 800bbe4:	4964      	ldr	r1, [pc, #400]	; (800bd78 <tcp_input+0x4a8>)
 800bbe6:	4865      	ldr	r0, [pc, #404]	; (800bd7c <tcp_input+0x4ac>)
 800bbe8:	f006 fcf8 	bl	80125dc <iprintf>
      if (prev != NULL) {
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <tcp_input+0x338>
        prev->next = pcb->next;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bbfa:	4b61      	ldr	r3, [pc, #388]	; (800bd80 <tcp_input+0x4b0>)
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bc02:	4a5f      	ldr	r2, [pc, #380]	; (800bd80 <tcp_input+0x4b0>)
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	69fa      	ldr	r2, [r7, #28]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d111      	bne.n	800bc36 <tcp_input+0x366>
 800bc12:	4b58      	ldr	r3, [pc, #352]	; (800bd74 <tcp_input+0x4a4>)
 800bc14:	f240 1215 	movw	r2, #277	; 0x115
 800bc18:	495a      	ldr	r1, [pc, #360]	; (800bd84 <tcp_input+0x4b4>)
 800bc1a:	4858      	ldr	r0, [pc, #352]	; (800bd7c <tcp_input+0x4ac>)
 800bc1c:	f006 fcde 	bl	80125dc <iprintf>
      break;
 800bc20:	e009      	b.n	800bc36 <tcp_input+0x366>
    }
    prev = pcb;
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f47f af5e 	bne.w	800baf0 <tcp_input+0x220>
 800bc34:	e000      	b.n	800bc38 <tcp_input+0x368>
      break;
 800bc36:	bf00      	nop
  }

  if (pcb == NULL) {
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f040 80aa 	bne.w	800bd94 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc40:	4b51      	ldr	r3, [pc, #324]	; (800bd88 <tcp_input+0x4b8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	61fb      	str	r3, [r7, #28]
 800bc46:	e03f      	b.n	800bcc8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	7d1b      	ldrb	r3, [r3, #20]
 800bc4c:	2b0a      	cmp	r3, #10
 800bc4e:	d006      	beq.n	800bc5e <tcp_input+0x38e>
 800bc50:	4b48      	ldr	r3, [pc, #288]	; (800bd74 <tcp_input+0x4a4>)
 800bc52:	f240 121f 	movw	r2, #287	; 0x11f
 800bc56:	494d      	ldr	r1, [pc, #308]	; (800bd8c <tcp_input+0x4bc>)
 800bc58:	4848      	ldr	r0, [pc, #288]	; (800bd7c <tcp_input+0x4ac>)
 800bc5a:	f006 fcbf 	bl	80125dc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	7a1b      	ldrb	r3, [r3, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d009      	beq.n	800bc7a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	7a1a      	ldrb	r2, [r3, #8]
 800bc6a:	4b41      	ldr	r3, [pc, #260]	; (800bd70 <tcp_input+0x4a0>)
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc72:	3301      	adds	r3, #1
 800bc74:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d122      	bne.n	800bcc0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	8b1a      	ldrh	r2, [r3, #24]
 800bc7e:	4b3b      	ldr	r3, [pc, #236]	; (800bd6c <tcp_input+0x49c>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d11b      	bne.n	800bcc2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	8ada      	ldrh	r2, [r3, #22]
 800bc8e:	4b37      	ldr	r3, [pc, #220]	; (800bd6c <tcp_input+0x49c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	885b      	ldrh	r3, [r3, #2]
 800bc94:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d113      	bne.n	800bcc2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	4b34      	ldr	r3, [pc, #208]	; (800bd70 <tcp_input+0x4a0>)
 800bca0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d10d      	bne.n	800bcc2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	4b31      	ldr	r3, [pc, #196]	; (800bd70 <tcp_input+0x4a0>)
 800bcac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d107      	bne.n	800bcc2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bcb2:	69f8      	ldr	r0, [r7, #28]
 800bcb4:	f000 fb56 	bl	800c364 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7fd ffd5 	bl	8009c68 <pbuf_free>
        return;
 800bcbe:	e1fd      	b.n	800c0bc <tcp_input+0x7ec>
        continue;
 800bcc0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	61fb      	str	r3, [r7, #28]
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1bc      	bne.n	800bc48 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bcd2:	4b2f      	ldr	r3, [pc, #188]	; (800bd90 <tcp_input+0x4c0>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	617b      	str	r3, [r7, #20]
 800bcd8:	e02a      	b.n	800bd30 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	7a1b      	ldrb	r3, [r3, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00c      	beq.n	800bcfc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	7a1a      	ldrb	r2, [r3, #8]
 800bce6:	4b22      	ldr	r3, [pc, #136]	; (800bd70 <tcp_input+0x4a0>)
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bcee:	3301      	adds	r3, #1
 800bcf0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d002      	beq.n	800bcfc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	61bb      	str	r3, [r7, #24]
        continue;
 800bcfa:	e016      	b.n	800bd2a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	8ada      	ldrh	r2, [r3, #22]
 800bd00:	4b1a      	ldr	r3, [pc, #104]	; (800bd6c <tcp_input+0x49c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	885b      	ldrh	r3, [r3, #2]
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d10c      	bne.n	800bd26 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	4b17      	ldr	r3, [pc, #92]	; (800bd70 <tcp_input+0x4a0>)
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d00f      	beq.n	800bd38 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00d      	beq.n	800bd3a <tcp_input+0x46a>
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d009      	beq.n	800bd3a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	617b      	str	r3, [r7, #20]
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1d1      	bne.n	800bcda <tcp_input+0x40a>
 800bd36:	e000      	b.n	800bd3a <tcp_input+0x46a>
            break;
 800bd38:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d029      	beq.n	800bd94 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00a      	beq.n	800bd5c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	68da      	ldr	r2, [r3, #12]
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bd4e:	4b10      	ldr	r3, [pc, #64]	; (800bd90 <tcp_input+0x4c0>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bd56:	4a0e      	ldr	r2, [pc, #56]	; (800bd90 <tcp_input+0x4c0>)
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bd5c:	6978      	ldr	r0, [r7, #20]
 800bd5e:	f000 fa03 	bl	800c168 <tcp_listen_input>
      }
      pbuf_free(p);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7fd ff80 	bl	8009c68 <pbuf_free>
      return;
 800bd68:	e1a8      	b.n	800c0bc <tcp_input+0x7ec>
 800bd6a:	bf00      	nop
 800bd6c:	2000d5b4 	.word	0x2000d5b4
 800bd70:	20007c78 	.word	0x20007c78
 800bd74:	080147b0 	.word	0x080147b0
 800bd78:	080148dc 	.word	0x080148dc
 800bd7c:	080147fc 	.word	0x080147fc
 800bd80:	2000d598 	.word	0x2000d598
 800bd84:	08014908 	.word	0x08014908
 800bd88:	2000d59c 	.word	0x2000d59c
 800bd8c:	08014934 	.word	0x08014934
 800bd90:	2000d594 	.word	0x2000d594
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 8158 	beq.w	800c04c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bd9c:	4b95      	ldr	r3, [pc, #596]	; (800bff4 <tcp_input+0x724>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	891a      	ldrh	r2, [r3, #8]
 800bda6:	4b93      	ldr	r3, [pc, #588]	; (800bff4 <tcp_input+0x724>)
 800bda8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bdaa:	4a92      	ldr	r2, [pc, #584]	; (800bff4 <tcp_input+0x724>)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bdb0:	4b91      	ldr	r3, [pc, #580]	; (800bff8 <tcp_input+0x728>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a8f      	ldr	r2, [pc, #572]	; (800bff4 <tcp_input+0x724>)
 800bdb6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bdb8:	4b90      	ldr	r3, [pc, #576]	; (800bffc <tcp_input+0x72c>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bdbe:	4b90      	ldr	r3, [pc, #576]	; (800c000 <tcp_input+0x730>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bdc4:	4b8f      	ldr	r3, [pc, #572]	; (800c004 <tcp_input+0x734>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bdca:	4b8f      	ldr	r3, [pc, #572]	; (800c008 <tcp_input+0x738>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	f003 0308 	and.w	r3, r3, #8
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d006      	beq.n	800bde4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	7b5b      	ldrb	r3, [r3, #13]
 800bdda:	f043 0301 	orr.w	r3, r3, #1
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d017      	beq.n	800be1c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bdec:	69f8      	ldr	r0, [r7, #28]
 800bdee:	f7ff f929 	bl	800b044 <tcp_process_refused_data>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f113 0f0d 	cmn.w	r3, #13
 800bdf8:	d007      	beq.n	800be0a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00c      	beq.n	800be1c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be02:	4b82      	ldr	r3, [pc, #520]	; (800c00c <tcp_input+0x73c>)
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d008      	beq.n	800be1c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f040 80e3 	bne.w	800bfda <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800be14:	69f8      	ldr	r0, [r7, #28]
 800be16:	f003 f9ad 	bl	800f174 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800be1a:	e0de      	b.n	800bfda <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800be1c:	4a7c      	ldr	r2, [pc, #496]	; (800c010 <tcp_input+0x740>)
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800be22:	69f8      	ldr	r0, [r7, #28]
 800be24:	f000 fb18 	bl	800c458 <tcp_process>
 800be28:	4603      	mov	r3, r0
 800be2a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800be2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be30:	f113 0f0d 	cmn.w	r3, #13
 800be34:	f000 80d3 	beq.w	800bfde <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800be38:	4b71      	ldr	r3, [pc, #452]	; (800c000 <tcp_input+0x730>)
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	f003 0308 	and.w	r3, r3, #8
 800be40:	2b00      	cmp	r3, #0
 800be42:	d015      	beq.n	800be70 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d008      	beq.n	800be60 <tcp_input+0x590>
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be54:	69fa      	ldr	r2, [r7, #28]
 800be56:	6912      	ldr	r2, [r2, #16]
 800be58:	f06f 010d 	mvn.w	r1, #13
 800be5c:	4610      	mov	r0, r2
 800be5e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800be60:	69f9      	ldr	r1, [r7, #28]
 800be62:	486c      	ldr	r0, [pc, #432]	; (800c014 <tcp_input+0x744>)
 800be64:	f7ff fbbc 	bl	800b5e0 <tcp_pcb_remove>
        tcp_free(pcb);
 800be68:	69f8      	ldr	r0, [r7, #28]
 800be6a:	f7fe f9a9 	bl	800a1c0 <tcp_free>
 800be6e:	e0da      	b.n	800c026 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800be70:	2300      	movs	r3, #0
 800be72:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800be74:	4b63      	ldr	r3, [pc, #396]	; (800c004 <tcp_input+0x734>)
 800be76:	881b      	ldrh	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d01d      	beq.n	800beb8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800be7c:	4b61      	ldr	r3, [pc, #388]	; (800c004 <tcp_input+0x734>)
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00a      	beq.n	800bea2 <tcp_input+0x5d2>
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be92:	69fa      	ldr	r2, [r7, #28]
 800be94:	6910      	ldr	r0, [r2, #16]
 800be96:	89fa      	ldrh	r2, [r7, #14]
 800be98:	69f9      	ldr	r1, [r7, #28]
 800be9a:	4798      	blx	r3
 800be9c:	4603      	mov	r3, r0
 800be9e:	74fb      	strb	r3, [r7, #19]
 800bea0:	e001      	b.n	800bea6 <tcp_input+0x5d6>
 800bea2:	2300      	movs	r3, #0
 800bea4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bea6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800beaa:	f113 0f0d 	cmn.w	r3, #13
 800beae:	f000 8098 	beq.w	800bfe2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800beb2:	4b54      	ldr	r3, [pc, #336]	; (800c004 <tcp_input+0x734>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800beb8:	69f8      	ldr	r0, [r7, #28]
 800beba:	f000 f915 	bl	800c0e8 <tcp_input_delayed_close>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f040 8090 	bne.w	800bfe6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bec6:	4b4d      	ldr	r3, [pc, #308]	; (800bffc <tcp_input+0x72c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d041      	beq.n	800bf52 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d006      	beq.n	800bee4 <tcp_input+0x614>
 800bed6:	4b50      	ldr	r3, [pc, #320]	; (800c018 <tcp_input+0x748>)
 800bed8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bedc:	494f      	ldr	r1, [pc, #316]	; (800c01c <tcp_input+0x74c>)
 800bede:	4850      	ldr	r0, [pc, #320]	; (800c020 <tcp_input+0x750>)
 800bee0:	f006 fb7c 	bl	80125dc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	8b5b      	ldrh	r3, [r3, #26]
 800bee8:	f003 0310 	and.w	r3, r3, #16
 800beec:	2b00      	cmp	r3, #0
 800beee:	d008      	beq.n	800bf02 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bef0:	4b42      	ldr	r3, [pc, #264]	; (800bffc <tcp_input+0x72c>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fd feb7 	bl	8009c68 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800befa:	69f8      	ldr	r0, [r7, #28]
 800befc:	f7fe fc48 	bl	800a790 <tcp_abort>
            goto aborted;
 800bf00:	e091      	b.n	800c026 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00c      	beq.n	800bf26 <tcp_input+0x656>
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	6918      	ldr	r0, [r3, #16]
 800bf16:	4b39      	ldr	r3, [pc, #228]	; (800bffc <tcp_input+0x72c>)
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	69f9      	ldr	r1, [r7, #28]
 800bf1e:	47a0      	blx	r4
 800bf20:	4603      	mov	r3, r0
 800bf22:	74fb      	strb	r3, [r7, #19]
 800bf24:	e008      	b.n	800bf38 <tcp_input+0x668>
 800bf26:	4b35      	ldr	r3, [pc, #212]	; (800bffc <tcp_input+0x72c>)
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	69f9      	ldr	r1, [r7, #28]
 800bf2e:	2000      	movs	r0, #0
 800bf30:	f7ff f95e 	bl	800b1f0 <tcp_recv_null>
 800bf34:	4603      	mov	r3, r0
 800bf36:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bf38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf3c:	f113 0f0d 	cmn.w	r3, #13
 800bf40:	d053      	beq.n	800bfea <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bf42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d003      	beq.n	800bf52 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bf4a:	4b2c      	ldr	r3, [pc, #176]	; (800bffc <tcp_input+0x72c>)
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bf52:	4b2b      	ldr	r3, [pc, #172]	; (800c000 <tcp_input+0x730>)
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	f003 0320 	and.w	r3, r3, #32
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d030      	beq.n	800bfc0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d009      	beq.n	800bf7a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf6a:	7b5a      	ldrb	r2, [r3, #13]
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf70:	f042 0220 	orr.w	r2, r2, #32
 800bf74:	b2d2      	uxtb	r2, r2
 800bf76:	735a      	strb	r2, [r3, #13]
 800bf78:	e022      	b.n	800bfc0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf82:	d005      	beq.n	800bf90 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf88:	3301      	adds	r3, #1
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00b      	beq.n	800bfb2 <tcp_input+0x6e2>
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	6918      	ldr	r0, [r3, #16]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	69f9      	ldr	r1, [r7, #28]
 800bfaa:	47a0      	blx	r4
 800bfac:	4603      	mov	r3, r0
 800bfae:	74fb      	strb	r3, [r7, #19]
 800bfb0:	e001      	b.n	800bfb6 <tcp_input+0x6e6>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bfb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfba:	f113 0f0d 	cmn.w	r3, #13
 800bfbe:	d016      	beq.n	800bfee <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bfc0:	4b13      	ldr	r3, [pc, #76]	; (800c010 <tcp_input+0x740>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bfc6:	69f8      	ldr	r0, [r7, #28]
 800bfc8:	f000 f88e 	bl	800c0e8 <tcp_input_delayed_close>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d128      	bne.n	800c024 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bfd2:	69f8      	ldr	r0, [r7, #28]
 800bfd4:	f002 fac8 	bl	800e568 <tcp_output>
 800bfd8:	e025      	b.n	800c026 <tcp_input+0x756>
        goto aborted;
 800bfda:	bf00      	nop
 800bfdc:	e023      	b.n	800c026 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bfde:	bf00      	nop
 800bfe0:	e021      	b.n	800c026 <tcp_input+0x756>
              goto aborted;
 800bfe2:	bf00      	nop
 800bfe4:	e01f      	b.n	800c026 <tcp_input+0x756>
          goto aborted;
 800bfe6:	bf00      	nop
 800bfe8:	e01d      	b.n	800c026 <tcp_input+0x756>
            goto aborted;
 800bfea:	bf00      	nop
 800bfec:	e01b      	b.n	800c026 <tcp_input+0x756>
              goto aborted;
 800bfee:	bf00      	nop
 800bff0:	e019      	b.n	800c026 <tcp_input+0x756>
 800bff2:	bf00      	nop
 800bff4:	2000d5a4 	.word	0x2000d5a4
 800bff8:	2000d5b4 	.word	0x2000d5b4
 800bffc:	2000d5d4 	.word	0x2000d5d4
 800c000:	2000d5d1 	.word	0x2000d5d1
 800c004:	2000d5cc 	.word	0x2000d5cc
 800c008:	2000d5d0 	.word	0x2000d5d0
 800c00c:	2000d5ce 	.word	0x2000d5ce
 800c010:	2000d5d8 	.word	0x2000d5d8
 800c014:	2000d598 	.word	0x2000d598
 800c018:	080147b0 	.word	0x080147b0
 800c01c:	08014964 	.word	0x08014964
 800c020:	080147fc 	.word	0x080147fc
          goto aborted;
 800c024:	bf00      	nop
    tcp_input_pcb = NULL;
 800c026:	4b27      	ldr	r3, [pc, #156]	; (800c0c4 <tcp_input+0x7f4>)
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c02c:	4b26      	ldr	r3, [pc, #152]	; (800c0c8 <tcp_input+0x7f8>)
 800c02e:	2200      	movs	r2, #0
 800c030:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c032:	4b26      	ldr	r3, [pc, #152]	; (800c0cc <tcp_input+0x7fc>)
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d03f      	beq.n	800c0ba <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c03a:	4b24      	ldr	r3, [pc, #144]	; (800c0cc <tcp_input+0x7fc>)
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fd fe12 	bl	8009c68 <pbuf_free>
      inseg.p = NULL;
 800c044:	4b21      	ldr	r3, [pc, #132]	; (800c0cc <tcp_input+0x7fc>)
 800c046:	2200      	movs	r2, #0
 800c048:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c04a:	e036      	b.n	800c0ba <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c04c:	4b20      	ldr	r3, [pc, #128]	; (800c0d0 <tcp_input+0x800>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	899b      	ldrh	r3, [r3, #12]
 800c052:	b29b      	uxth	r3, r3
 800c054:	4618      	mov	r0, r3
 800c056:	f7fc fa5b 	bl	8008510 <lwip_htons>
 800c05a:	4603      	mov	r3, r0
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	f003 0304 	and.w	r3, r3, #4
 800c062:	2b00      	cmp	r3, #0
 800c064:	d118      	bne.n	800c098 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c066:	4b1b      	ldr	r3, [pc, #108]	; (800c0d4 <tcp_input+0x804>)
 800c068:	6819      	ldr	r1, [r3, #0]
 800c06a:	4b1b      	ldr	r3, [pc, #108]	; (800c0d8 <tcp_input+0x808>)
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	4b1a      	ldr	r3, [pc, #104]	; (800c0dc <tcp_input+0x80c>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c076:	4b16      	ldr	r3, [pc, #88]	; (800c0d0 <tcp_input+0x800>)
 800c078:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c07a:	885b      	ldrh	r3, [r3, #2]
 800c07c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c07e:	4a14      	ldr	r2, [pc, #80]	; (800c0d0 <tcp_input+0x800>)
 800c080:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c082:	8812      	ldrh	r2, [r2, #0]
 800c084:	b292      	uxth	r2, r2
 800c086:	9202      	str	r2, [sp, #8]
 800c088:	9301      	str	r3, [sp, #4]
 800c08a:	4b15      	ldr	r3, [pc, #84]	; (800c0e0 <tcp_input+0x810>)
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	4b15      	ldr	r3, [pc, #84]	; (800c0e4 <tcp_input+0x814>)
 800c090:	4602      	mov	r2, r0
 800c092:	2000      	movs	r0, #0
 800c094:	f003 f81c 	bl	800f0d0 <tcp_rst>
    pbuf_free(p);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7fd fde5 	bl	8009c68 <pbuf_free>
  return;
 800c09e:	e00c      	b.n	800c0ba <tcp_input+0x7ea>
    goto dropped;
 800c0a0:	bf00      	nop
 800c0a2:	e006      	b.n	800c0b2 <tcp_input+0x7e2>
    goto dropped;
 800c0a4:	bf00      	nop
 800c0a6:	e004      	b.n	800c0b2 <tcp_input+0x7e2>
    goto dropped;
 800c0a8:	bf00      	nop
 800c0aa:	e002      	b.n	800c0b2 <tcp_input+0x7e2>
      goto dropped;
 800c0ac:	bf00      	nop
 800c0ae:	e000      	b.n	800c0b2 <tcp_input+0x7e2>
      goto dropped;
 800c0b0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7fd fdd8 	bl	8009c68 <pbuf_free>
 800c0b8:	e000      	b.n	800c0bc <tcp_input+0x7ec>
  return;
 800c0ba:	bf00      	nop
}
 800c0bc:	3724      	adds	r7, #36	; 0x24
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd90      	pop	{r4, r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	2000d5d8 	.word	0x2000d5d8
 800c0c8:	2000d5d4 	.word	0x2000d5d4
 800c0cc:	2000d5a4 	.word	0x2000d5a4
 800c0d0:	2000d5b4 	.word	0x2000d5b4
 800c0d4:	2000d5c8 	.word	0x2000d5c8
 800c0d8:	2000d5ce 	.word	0x2000d5ce
 800c0dc:	2000d5c4 	.word	0x2000d5c4
 800c0e0:	20007c88 	.word	0x20007c88
 800c0e4:	20007c8c 	.word	0x20007c8c

0800c0e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d106      	bne.n	800c104 <tcp_input_delayed_close+0x1c>
 800c0f6:	4b17      	ldr	r3, [pc, #92]	; (800c154 <tcp_input_delayed_close+0x6c>)
 800c0f8:	f240 225a 	movw	r2, #602	; 0x25a
 800c0fc:	4916      	ldr	r1, [pc, #88]	; (800c158 <tcp_input_delayed_close+0x70>)
 800c0fe:	4817      	ldr	r0, [pc, #92]	; (800c15c <tcp_input_delayed_close+0x74>)
 800c100:	f006 fa6c 	bl	80125dc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c104:	4b16      	ldr	r3, [pc, #88]	; (800c160 <tcp_input_delayed_close+0x78>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	f003 0310 	and.w	r3, r3, #16
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d01c      	beq.n	800c14a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	8b5b      	ldrh	r3, [r3, #26]
 800c114:	f003 0310 	and.w	r3, r3, #16
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10d      	bne.n	800c138 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c122:	2b00      	cmp	r3, #0
 800c124:	d008      	beq.n	800c138 <tcp_input_delayed_close+0x50>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	6912      	ldr	r2, [r2, #16]
 800c130:	f06f 010e 	mvn.w	r1, #14
 800c134:	4610      	mov	r0, r2
 800c136:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	480a      	ldr	r0, [pc, #40]	; (800c164 <tcp_input_delayed_close+0x7c>)
 800c13c:	f7ff fa50 	bl	800b5e0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7fe f83d 	bl	800a1c0 <tcp_free>
    return 1;
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c14a:	2300      	movs	r3, #0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3708      	adds	r7, #8
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	080147b0 	.word	0x080147b0
 800c158:	08014980 	.word	0x08014980
 800c15c:	080147fc 	.word	0x080147fc
 800c160:	2000d5d1 	.word	0x2000d5d1
 800c164:	2000d598 	.word	0x2000d598

0800c168 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c168:	b590      	push	{r4, r7, lr}
 800c16a:	b08b      	sub	sp, #44	; 0x2c
 800c16c:	af04      	add	r7, sp, #16
 800c16e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c170:	4b6f      	ldr	r3, [pc, #444]	; (800c330 <tcp_listen_input+0x1c8>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	f003 0304 	and.w	r3, r3, #4
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f040 80d2 	bne.w	800c322 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d106      	bne.n	800c192 <tcp_listen_input+0x2a>
 800c184:	4b6b      	ldr	r3, [pc, #428]	; (800c334 <tcp_listen_input+0x1cc>)
 800c186:	f240 2281 	movw	r2, #641	; 0x281
 800c18a:	496b      	ldr	r1, [pc, #428]	; (800c338 <tcp_listen_input+0x1d0>)
 800c18c:	486b      	ldr	r0, [pc, #428]	; (800c33c <tcp_listen_input+0x1d4>)
 800c18e:	f006 fa25 	bl	80125dc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c192:	4b67      	ldr	r3, [pc, #412]	; (800c330 <tcp_listen_input+0x1c8>)
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	f003 0310 	and.w	r3, r3, #16
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d019      	beq.n	800c1d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c19e:	4b68      	ldr	r3, [pc, #416]	; (800c340 <tcp_listen_input+0x1d8>)
 800c1a0:	6819      	ldr	r1, [r3, #0]
 800c1a2:	4b68      	ldr	r3, [pc, #416]	; (800c344 <tcp_listen_input+0x1dc>)
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	4b67      	ldr	r3, [pc, #412]	; (800c348 <tcp_listen_input+0x1e0>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1ae:	4b67      	ldr	r3, [pc, #412]	; (800c34c <tcp_listen_input+0x1e4>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1b2:	885b      	ldrh	r3, [r3, #2]
 800c1b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1b6:	4a65      	ldr	r2, [pc, #404]	; (800c34c <tcp_listen_input+0x1e4>)
 800c1b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1ba:	8812      	ldrh	r2, [r2, #0]
 800c1bc:	b292      	uxth	r2, r2
 800c1be:	9202      	str	r2, [sp, #8]
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	4b63      	ldr	r3, [pc, #396]	; (800c350 <tcp_listen_input+0x1e8>)
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	4b63      	ldr	r3, [pc, #396]	; (800c354 <tcp_listen_input+0x1ec>)
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f002 ff80 	bl	800f0d0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c1d0:	e0a9      	b.n	800c326 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c1d2:	4b57      	ldr	r3, [pc, #348]	; (800c330 <tcp_listen_input+0x1c8>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	f003 0302 	and.w	r3, r3, #2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f000 80a3 	beq.w	800c326 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	7d5b      	ldrb	r3, [r3, #21]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7ff f927 	bl	800b438 <tcp_alloc>
 800c1ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d111      	bne.n	800c216 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00a      	beq.n	800c210 <tcp_listen_input+0xa8>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	699b      	ldr	r3, [r3, #24]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	6910      	ldr	r0, [r2, #16]
 800c202:	f04f 32ff 	mov.w	r2, #4294967295
 800c206:	2100      	movs	r1, #0
 800c208:	4798      	blx	r3
 800c20a:	4603      	mov	r3, r0
 800c20c:	73bb      	strb	r3, [r7, #14]
      return;
 800c20e:	e08b      	b.n	800c328 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c210:	23f0      	movs	r3, #240	; 0xf0
 800c212:	73bb      	strb	r3, [r7, #14]
      return;
 800c214:	e088      	b.n	800c328 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c216:	4b50      	ldr	r3, [pc, #320]	; (800c358 <tcp_listen_input+0x1f0>)
 800c218:	695a      	ldr	r2, [r3, #20]
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c21e:	4b4e      	ldr	r3, [pc, #312]	; (800c358 <tcp_listen_input+0x1f0>)
 800c220:	691a      	ldr	r2, [r3, #16]
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	8ada      	ldrh	r2, [r3, #22]
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c22e:	4b47      	ldr	r3, [pc, #284]	; (800c34c <tcp_listen_input+0x1e4>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	b29a      	uxth	r2, r3
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	2203      	movs	r2, #3
 800c23e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c240:	4b41      	ldr	r3, [pc, #260]	; (800c348 <tcp_listen_input+0x1e0>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	1c5a      	adds	r2, r3, #1
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c252:	6978      	ldr	r0, [r7, #20]
 800c254:	f7ff fa58 	bl	800b708 <tcp_next_iss>
 800c258:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	693a      	ldr	r2, [r7, #16]
 800c264:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c272:	4b35      	ldr	r3, [pc, #212]	; (800c348 <tcp_listen_input+0x1e0>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	1e5a      	subs	r2, r3, #1
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	691a      	ldr	r2, [r3, #16]
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	7a5b      	ldrb	r3, [r3, #9]
 800c28e:	f003 030c 	and.w	r3, r3, #12
 800c292:	b2da      	uxtb	r2, r3
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	7a1a      	ldrb	r2, [r3, #8]
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c2a0:	4b2e      	ldr	r3, [pc, #184]	; (800c35c <tcp_listen_input+0x1f4>)
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	60da      	str	r2, [r3, #12]
 800c2a8:	4a2c      	ldr	r2, [pc, #176]	; (800c35c <tcp_listen_input+0x1f4>)
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	f003 f8d1 	bl	800f454 <tcp_timer_needed>
 800c2b2:	4b2b      	ldr	r3, [pc, #172]	; (800c360 <tcp_listen_input+0x1f8>)
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c2b8:	6978      	ldr	r0, [r7, #20]
 800c2ba:	f001 fd8f 	bl	800dddc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c2be:	4b23      	ldr	r3, [pc, #140]	; (800c34c <tcp_listen_input+0x1e4>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	89db      	ldrh	r3, [r3, #14]
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f004 fcc5 	bl	8010c70 <ip4_route>
 800c2e6:	4601      	mov	r1, r0
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f7ff fa30 	bl	800b754 <tcp_eff_send_mss_netif>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c2fc:	2112      	movs	r1, #18
 800c2fe:	6978      	ldr	r0, [r7, #20]
 800c300:	f002 f844 	bl	800e38c <tcp_enqueue_flags>
 800c304:	4603      	mov	r3, r0
 800c306:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d004      	beq.n	800c31a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c310:	2100      	movs	r1, #0
 800c312:	6978      	ldr	r0, [r7, #20]
 800c314:	f7fe f97e 	bl	800a614 <tcp_abandon>
      return;
 800c318:	e006      	b.n	800c328 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c31a:	6978      	ldr	r0, [r7, #20]
 800c31c:	f002 f924 	bl	800e568 <tcp_output>
  return;
 800c320:	e001      	b.n	800c326 <tcp_listen_input+0x1be>
    return;
 800c322:	bf00      	nop
 800c324:	e000      	b.n	800c328 <tcp_listen_input+0x1c0>
  return;
 800c326:	bf00      	nop
}
 800c328:	371c      	adds	r7, #28
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd90      	pop	{r4, r7, pc}
 800c32e:	bf00      	nop
 800c330:	2000d5d0 	.word	0x2000d5d0
 800c334:	080147b0 	.word	0x080147b0
 800c338:	080149a8 	.word	0x080149a8
 800c33c:	080147fc 	.word	0x080147fc
 800c340:	2000d5c8 	.word	0x2000d5c8
 800c344:	2000d5ce 	.word	0x2000d5ce
 800c348:	2000d5c4 	.word	0x2000d5c4
 800c34c:	2000d5b4 	.word	0x2000d5b4
 800c350:	20007c88 	.word	0x20007c88
 800c354:	20007c8c 	.word	0x20007c8c
 800c358:	20007c78 	.word	0x20007c78
 800c35c:	2000d598 	.word	0x2000d598
 800c360:	2000d5a0 	.word	0x2000d5a0

0800c364 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af04      	add	r7, sp, #16
 800c36a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c36c:	4b2f      	ldr	r3, [pc, #188]	; (800c42c <tcp_timewait_input+0xc8>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	2b00      	cmp	r3, #0
 800c376:	d153      	bne.n	800c420 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d106      	bne.n	800c38c <tcp_timewait_input+0x28>
 800c37e:	4b2c      	ldr	r3, [pc, #176]	; (800c430 <tcp_timewait_input+0xcc>)
 800c380:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c384:	492b      	ldr	r1, [pc, #172]	; (800c434 <tcp_timewait_input+0xd0>)
 800c386:	482c      	ldr	r0, [pc, #176]	; (800c438 <tcp_timewait_input+0xd4>)
 800c388:	f006 f928 	bl	80125dc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c38c:	4b27      	ldr	r3, [pc, #156]	; (800c42c <tcp_timewait_input+0xc8>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	f003 0302 	and.w	r3, r3, #2
 800c394:	2b00      	cmp	r3, #0
 800c396:	d02a      	beq.n	800c3ee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c398:	4b28      	ldr	r3, [pc, #160]	; (800c43c <tcp_timewait_input+0xd8>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	db2d      	blt.n	800c402 <tcp_timewait_input+0x9e>
 800c3a6:	4b25      	ldr	r3, [pc, #148]	; (800c43c <tcp_timewait_input+0xd8>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ae:	6879      	ldr	r1, [r7, #4]
 800c3b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c3b2:	440b      	add	r3, r1
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	dc23      	bgt.n	800c402 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3ba:	4b21      	ldr	r3, [pc, #132]	; (800c440 <tcp_timewait_input+0xdc>)
 800c3bc:	6819      	ldr	r1, [r3, #0]
 800c3be:	4b21      	ldr	r3, [pc, #132]	; (800c444 <tcp_timewait_input+0xe0>)
 800c3c0:	881b      	ldrh	r3, [r3, #0]
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	4b1d      	ldr	r3, [pc, #116]	; (800c43c <tcp_timewait_input+0xd8>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3ca:	4b1f      	ldr	r3, [pc, #124]	; (800c448 <tcp_timewait_input+0xe4>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3ce:	885b      	ldrh	r3, [r3, #2]
 800c3d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3d2:	4a1d      	ldr	r2, [pc, #116]	; (800c448 <tcp_timewait_input+0xe4>)
 800c3d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3d6:	8812      	ldrh	r2, [r2, #0]
 800c3d8:	b292      	uxth	r2, r2
 800c3da:	9202      	str	r2, [sp, #8]
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	4b1b      	ldr	r3, [pc, #108]	; (800c44c <tcp_timewait_input+0xe8>)
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	4b1b      	ldr	r3, [pc, #108]	; (800c450 <tcp_timewait_input+0xec>)
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f002 fe72 	bl	800f0d0 <tcp_rst>
      return;
 800c3ec:	e01b      	b.n	800c426 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <tcp_timewait_input+0xc8>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d003      	beq.n	800c402 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c3fa:	4b16      	ldr	r3, [pc, #88]	; (800c454 <tcp_timewait_input+0xf0>)
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c402:	4b10      	ldr	r3, [pc, #64]	; (800c444 <tcp_timewait_input+0xe0>)
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00c      	beq.n	800c424 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	8b5b      	ldrh	r3, [r3, #26]
 800c40e:	f043 0302 	orr.w	r3, r3, #2
 800c412:	b29a      	uxth	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f002 f8a5 	bl	800e568 <tcp_output>
  }
  return;
 800c41e:	e001      	b.n	800c424 <tcp_timewait_input+0xc0>
    return;
 800c420:	bf00      	nop
 800c422:	e000      	b.n	800c426 <tcp_timewait_input+0xc2>
  return;
 800c424:	bf00      	nop
}
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	2000d5d0 	.word	0x2000d5d0
 800c430:	080147b0 	.word	0x080147b0
 800c434:	080149c8 	.word	0x080149c8
 800c438:	080147fc 	.word	0x080147fc
 800c43c:	2000d5c4 	.word	0x2000d5c4
 800c440:	2000d5c8 	.word	0x2000d5c8
 800c444:	2000d5ce 	.word	0x2000d5ce
 800c448:	2000d5b4 	.word	0x2000d5b4
 800c44c:	20007c88 	.word	0x20007c88
 800c450:	20007c8c 	.word	0x20007c8c
 800c454:	2000d58c 	.word	0x2000d58c

0800c458 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c458:	b590      	push	{r4, r7, lr}
 800c45a:	b08d      	sub	sp, #52	; 0x34
 800c45c:	af04      	add	r7, sp, #16
 800c45e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c464:	2300      	movs	r3, #0
 800c466:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <tcp_process+0x24>
 800c46e:	4b9d      	ldr	r3, [pc, #628]	; (800c6e4 <tcp_process+0x28c>)
 800c470:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c474:	499c      	ldr	r1, [pc, #624]	; (800c6e8 <tcp_process+0x290>)
 800c476:	489d      	ldr	r0, [pc, #628]	; (800c6ec <tcp_process+0x294>)
 800c478:	f006 f8b0 	bl	80125dc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c47c:	4b9c      	ldr	r3, [pc, #624]	; (800c6f0 <tcp_process+0x298>)
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	f003 0304 	and.w	r3, r3, #4
 800c484:	2b00      	cmp	r3, #0
 800c486:	d04e      	beq.n	800c526 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	7d1b      	ldrb	r3, [r3, #20]
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	d108      	bne.n	800c4a2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c494:	4b97      	ldr	r3, [pc, #604]	; (800c6f4 <tcp_process+0x29c>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d123      	bne.n	800c4e4 <tcp_process+0x8c>
        acceptable = 1;
 800c49c:	2301      	movs	r3, #1
 800c49e:	76fb      	strb	r3, [r7, #27]
 800c4a0:	e020      	b.n	800c4e4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4a6:	4b94      	ldr	r3, [pc, #592]	; (800c6f8 <tcp_process+0x2a0>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d102      	bne.n	800c4b4 <tcp_process+0x5c>
        acceptable = 1;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	76fb      	strb	r3, [r7, #27]
 800c4b2:	e017      	b.n	800c4e4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c4b4:	4b90      	ldr	r3, [pc, #576]	; (800c6f8 <tcp_process+0x2a0>)
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	db10      	blt.n	800c4e4 <tcp_process+0x8c>
 800c4c2:	4b8d      	ldr	r3, [pc, #564]	; (800c6f8 <tcp_process+0x2a0>)
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c4ce:	440b      	add	r3, r1
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	dc06      	bgt.n	800c4e4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	8b5b      	ldrh	r3, [r3, #26]
 800c4da:	f043 0302 	orr.w	r3, r3, #2
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c4e4:	7efb      	ldrb	r3, [r7, #27]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d01b      	beq.n	800c522 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	7d1b      	ldrb	r3, [r3, #20]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <tcp_process+0xa8>
 800c4f2:	4b7c      	ldr	r3, [pc, #496]	; (800c6e4 <tcp_process+0x28c>)
 800c4f4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c4f8:	4980      	ldr	r1, [pc, #512]	; (800c6fc <tcp_process+0x2a4>)
 800c4fa:	487c      	ldr	r0, [pc, #496]	; (800c6ec <tcp_process+0x294>)
 800c4fc:	f006 f86e 	bl	80125dc <iprintf>
      recv_flags |= TF_RESET;
 800c500:	4b7f      	ldr	r3, [pc, #508]	; (800c700 <tcp_process+0x2a8>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	f043 0308 	orr.w	r3, r3, #8
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	4b7d      	ldr	r3, [pc, #500]	; (800c700 <tcp_process+0x2a8>)
 800c50c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	8b5b      	ldrh	r3, [r3, #26]
 800c512:	f023 0301 	bic.w	r3, r3, #1
 800c516:	b29a      	uxth	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c51c:	f06f 030d 	mvn.w	r3, #13
 800c520:	e37a      	b.n	800cc18 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c522:	2300      	movs	r3, #0
 800c524:	e378      	b.n	800cc18 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c526:	4b72      	ldr	r3, [pc, #456]	; (800c6f0 <tcp_process+0x298>)
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d010      	beq.n	800c554 <tcp_process+0xfc>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	7d1b      	ldrb	r3, [r3, #20]
 800c536:	2b02      	cmp	r3, #2
 800c538:	d00c      	beq.n	800c554 <tcp_process+0xfc>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	7d1b      	ldrb	r3, [r3, #20]
 800c53e:	2b03      	cmp	r3, #3
 800c540:	d008      	beq.n	800c554 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	8b5b      	ldrh	r3, [r3, #26]
 800c546:	f043 0302 	orr.w	r3, r3, #2
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	e361      	b.n	800cc18 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	8b5b      	ldrh	r3, [r3, #26]
 800c558:	f003 0310 	and.w	r3, r3, #16
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d103      	bne.n	800c568 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c560:	4b68      	ldr	r3, [pc, #416]	; (800c704 <tcp_process+0x2ac>)
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f001 fc2f 	bl	800dddc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	7d1b      	ldrb	r3, [r3, #20]
 800c582:	3b02      	subs	r3, #2
 800c584:	2b07      	cmp	r3, #7
 800c586:	f200 8337 	bhi.w	800cbf8 <tcp_process+0x7a0>
 800c58a:	a201      	add	r2, pc, #4	; (adr r2, 800c590 <tcp_process+0x138>)
 800c58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c590:	0800c5b1 	.word	0x0800c5b1
 800c594:	0800c7e1 	.word	0x0800c7e1
 800c598:	0800c959 	.word	0x0800c959
 800c59c:	0800c983 	.word	0x0800c983
 800c5a0:	0800caa7 	.word	0x0800caa7
 800c5a4:	0800c959 	.word	0x0800c959
 800c5a8:	0800cb33 	.word	0x0800cb33
 800c5ac:	0800cbc3 	.word	0x0800cbc3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c5b0:	4b4f      	ldr	r3, [pc, #316]	; (800c6f0 <tcp_process+0x298>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	f003 0310 	and.w	r3, r3, #16
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 80e4 	beq.w	800c786 <tcp_process+0x32e>
 800c5be:	4b4c      	ldr	r3, [pc, #304]	; (800c6f0 <tcp_process+0x298>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	f003 0302 	and.w	r3, r3, #2
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f000 80dd 	beq.w	800c786 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	4b48      	ldr	r3, [pc, #288]	; (800c6f4 <tcp_process+0x29c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	f040 80d5 	bne.w	800c786 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c5dc:	4b46      	ldr	r3, [pc, #280]	; (800c6f8 <tcp_process+0x2a0>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	1c5a      	adds	r2, r3, #1
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c5ee:	4b41      	ldr	r3, [pc, #260]	; (800c6f4 <tcp_process+0x29c>)
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c5f6:	4b44      	ldr	r3, [pc, #272]	; (800c708 <tcp_process+0x2b0>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	89db      	ldrh	r3, [r3, #14]
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c610:	4b39      	ldr	r3, [pc, #228]	; (800c6f8 <tcp_process+0x2a0>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	1e5a      	subs	r2, r3, #1
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2204      	movs	r2, #4
 800c61e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	3304      	adds	r3, #4
 800c628:	4618      	mov	r0, r3
 800c62a:	f004 fb21 	bl	8010c70 <ip4_route>
 800c62e:	4601      	mov	r1, r0
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3304      	adds	r3, #4
 800c634:	461a      	mov	r2, r3
 800c636:	4620      	mov	r0, r4
 800c638:	f7ff f88c 	bl	800b754 <tcp_eff_send_mss_netif>
 800c63c:	4603      	mov	r3, r0
 800c63e:	461a      	mov	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c648:	009a      	lsls	r2, r3, #2
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c64e:	005b      	lsls	r3, r3, #1
 800c650:	f241 111c 	movw	r1, #4380	; 0x111c
 800c654:	428b      	cmp	r3, r1
 800c656:	bf38      	it	cc
 800c658:	460b      	movcc	r3, r1
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d204      	bcs.n	800c668 <tcp_process+0x210>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	b29b      	uxth	r3, r3
 800c666:	e00d      	b.n	800c684 <tcp_process+0x22c>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	f241 121c 	movw	r2, #4380	; 0x111c
 800c672:	4293      	cmp	r3, r2
 800c674:	d904      	bls.n	800c680 <tcp_process+0x228>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c67a:	005b      	lsls	r3, r3, #1
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	e001      	b.n	800c684 <tcp_process+0x22c>
 800c680:	f241 131c 	movw	r3, #4380	; 0x111c
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c690:	2b00      	cmp	r3, #0
 800c692:	d106      	bne.n	800c6a2 <tcp_process+0x24a>
 800c694:	4b13      	ldr	r3, [pc, #76]	; (800c6e4 <tcp_process+0x28c>)
 800c696:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c69a:	491c      	ldr	r1, [pc, #112]	; (800c70c <tcp_process+0x2b4>)
 800c69c:	4813      	ldr	r0, [pc, #76]	; (800c6ec <tcp_process+0x294>)
 800c69e:	f005 ff9d 	bl	80125dc <iprintf>
        --pcb->snd_queuelen;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d12a      	bne.n	800c714 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6c2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d106      	bne.n	800c6d8 <tcp_process+0x280>
 800c6ca:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <tcp_process+0x28c>)
 800c6cc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c6d0:	490f      	ldr	r1, [pc, #60]	; (800c710 <tcp_process+0x2b8>)
 800c6d2:	4806      	ldr	r0, [pc, #24]	; (800c6ec <tcp_process+0x294>)
 800c6d4:	f005 ff82 	bl	80125dc <iprintf>
          pcb->unsent = rseg->next;
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	66da      	str	r2, [r3, #108]	; 0x6c
 800c6e0:	e01c      	b.n	800c71c <tcp_process+0x2c4>
 800c6e2:	bf00      	nop
 800c6e4:	080147b0 	.word	0x080147b0
 800c6e8:	080149e8 	.word	0x080149e8
 800c6ec:	080147fc 	.word	0x080147fc
 800c6f0:	2000d5d0 	.word	0x2000d5d0
 800c6f4:	2000d5c8 	.word	0x2000d5c8
 800c6f8:	2000d5c4 	.word	0x2000d5c4
 800c6fc:	08014a04 	.word	0x08014a04
 800c700:	2000d5d1 	.word	0x2000d5d1
 800c704:	2000d58c 	.word	0x2000d58c
 800c708:	2000d5b4 	.word	0x2000d5b4
 800c70c:	08014a24 	.word	0x08014a24
 800c710:	08014a3c 	.word	0x08014a3c
        } else {
          pcb->unacked = rseg->next;
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c71c:	69f8      	ldr	r0, [r7, #28]
 800c71e:	f7fe fd22 	bl	800b166 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c726:	2b00      	cmp	r3, #0
 800c728:	d104      	bne.n	800c734 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c730:	861a      	strh	r2, [r3, #48]	; 0x30
 800c732:	e006      	b.n	800c742 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00a      	beq.n	800c762 <tcp_process+0x30a>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	6910      	ldr	r0, [r2, #16]
 800c756:	2200      	movs	r2, #0
 800c758:	6879      	ldr	r1, [r7, #4]
 800c75a:	4798      	blx	r3
 800c75c:	4603      	mov	r3, r0
 800c75e:	76bb      	strb	r3, [r7, #26]
 800c760:	e001      	b.n	800c766 <tcp_process+0x30e>
 800c762:	2300      	movs	r3, #0
 800c764:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c766:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c76a:	f113 0f0d 	cmn.w	r3, #13
 800c76e:	d102      	bne.n	800c776 <tcp_process+0x31e>
          return ERR_ABRT;
 800c770:	f06f 030c 	mvn.w	r3, #12
 800c774:	e250      	b.n	800cc18 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	8b5b      	ldrh	r3, [r3, #26]
 800c77a:	f043 0302 	orr.w	r3, r3, #2
 800c77e:	b29a      	uxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c784:	e23a      	b.n	800cbfc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c786:	4b98      	ldr	r3, [pc, #608]	; (800c9e8 <tcp_process+0x590>)
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	f003 0310 	and.w	r3, r3, #16
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 8234 	beq.w	800cbfc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c794:	4b95      	ldr	r3, [pc, #596]	; (800c9ec <tcp_process+0x594>)
 800c796:	6819      	ldr	r1, [r3, #0]
 800c798:	4b95      	ldr	r3, [pc, #596]	; (800c9f0 <tcp_process+0x598>)
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	461a      	mov	r2, r3
 800c79e:	4b95      	ldr	r3, [pc, #596]	; (800c9f4 <tcp_process+0x59c>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7a4:	4b94      	ldr	r3, [pc, #592]	; (800c9f8 <tcp_process+0x5a0>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7a8:	885b      	ldrh	r3, [r3, #2]
 800c7aa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7ac:	4a92      	ldr	r2, [pc, #584]	; (800c9f8 <tcp_process+0x5a0>)
 800c7ae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7b0:	8812      	ldrh	r2, [r2, #0]
 800c7b2:	b292      	uxth	r2, r2
 800c7b4:	9202      	str	r2, [sp, #8]
 800c7b6:	9301      	str	r3, [sp, #4]
 800c7b8:	4b90      	ldr	r3, [pc, #576]	; (800c9fc <tcp_process+0x5a4>)
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	4b90      	ldr	r3, [pc, #576]	; (800ca00 <tcp_process+0x5a8>)
 800c7be:	4602      	mov	r2, r0
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f002 fc85 	bl	800f0d0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7cc:	2b05      	cmp	r3, #5
 800c7ce:	f200 8215 	bhi.w	800cbfc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f002 fa4f 	bl	800ec7c <tcp_rexmit_rto>
      break;
 800c7de:	e20d      	b.n	800cbfc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c7e0:	4b81      	ldr	r3, [pc, #516]	; (800c9e8 <tcp_process+0x590>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	f003 0310 	and.w	r3, r3, #16
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 80a1 	beq.w	800c930 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c7ee:	4b7f      	ldr	r3, [pc, #508]	; (800c9ec <tcp_process+0x594>)
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	db7e      	blt.n	800c8fc <tcp_process+0x4a4>
 800c7fe:	4b7b      	ldr	r3, [pc, #492]	; (800c9ec <tcp_process+0x594>)
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	dc77      	bgt.n	800c8fc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2204      	movs	r2, #4
 800c810:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d102      	bne.n	800c820 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c81a:	23fa      	movs	r3, #250	; 0xfa
 800c81c:	76bb      	strb	r3, [r7, #26]
 800c81e:	e01d      	b.n	800c85c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d106      	bne.n	800c838 <tcp_process+0x3e0>
 800c82a:	4b76      	ldr	r3, [pc, #472]	; (800ca04 <tcp_process+0x5ac>)
 800c82c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c830:	4975      	ldr	r1, [pc, #468]	; (800ca08 <tcp_process+0x5b0>)
 800c832:	4876      	ldr	r0, [pc, #472]	; (800ca0c <tcp_process+0x5b4>)
 800c834:	f005 fed2 	bl	80125dc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <tcp_process+0x400>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c846:	699b      	ldr	r3, [r3, #24]
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	6910      	ldr	r0, [r2, #16]
 800c84c:	2200      	movs	r2, #0
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	4798      	blx	r3
 800c852:	4603      	mov	r3, r0
 800c854:	76bb      	strb	r3, [r7, #26]
 800c856:	e001      	b.n	800c85c <tcp_process+0x404>
 800c858:	23f0      	movs	r3, #240	; 0xf0
 800c85a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c85c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00a      	beq.n	800c87a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c864:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c868:	f113 0f0d 	cmn.w	r3, #13
 800c86c:	d002      	beq.n	800c874 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7fd ff8e 	bl	800a790 <tcp_abort>
            }
            return ERR_ABRT;
 800c874:	f06f 030c 	mvn.w	r3, #12
 800c878:	e1ce      	b.n	800cc18 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fae0 	bl	800ce40 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c880:	4b63      	ldr	r3, [pc, #396]	; (800ca10 <tcp_process+0x5b8>)
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d005      	beq.n	800c894 <tcp_process+0x43c>
            recv_acked--;
 800c888:	4b61      	ldr	r3, [pc, #388]	; (800ca10 <tcp_process+0x5b8>)
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	3b01      	subs	r3, #1
 800c88e:	b29a      	uxth	r2, r3
 800c890:	4b5f      	ldr	r3, [pc, #380]	; (800ca10 <tcp_process+0x5b8>)
 800c892:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c898:	009a      	lsls	r2, r3, #2
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c89e:	005b      	lsls	r3, r3, #1
 800c8a0:	f241 111c 	movw	r1, #4380	; 0x111c
 800c8a4:	428b      	cmp	r3, r1
 800c8a6:	bf38      	it	cc
 800c8a8:	460b      	movcc	r3, r1
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d204      	bcs.n	800c8b8 <tcp_process+0x460>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	e00d      	b.n	800c8d4 <tcp_process+0x47c>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8bc:	005b      	lsls	r3, r3, #1
 800c8be:	f241 121c 	movw	r2, #4380	; 0x111c
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d904      	bls.n	800c8d0 <tcp_process+0x478>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	e001      	b.n	800c8d4 <tcp_process+0x47c>
 800c8d0:	f241 131c 	movw	r3, #4380	; 0x111c
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c8da:	4b4e      	ldr	r3, [pc, #312]	; (800ca14 <tcp_process+0x5bc>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	f003 0320 	and.w	r3, r3, #32
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d037      	beq.n	800c956 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	8b5b      	ldrh	r3, [r3, #26]
 800c8ea:	f043 0302 	orr.w	r3, r3, #2
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2207      	movs	r2, #7
 800c8f8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c8fa:	e02c      	b.n	800c956 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8fc:	4b3b      	ldr	r3, [pc, #236]	; (800c9ec <tcp_process+0x594>)
 800c8fe:	6819      	ldr	r1, [r3, #0]
 800c900:	4b3b      	ldr	r3, [pc, #236]	; (800c9f0 <tcp_process+0x598>)
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	461a      	mov	r2, r3
 800c906:	4b3b      	ldr	r3, [pc, #236]	; (800c9f4 <tcp_process+0x59c>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c90c:	4b3a      	ldr	r3, [pc, #232]	; (800c9f8 <tcp_process+0x5a0>)
 800c90e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c910:	885b      	ldrh	r3, [r3, #2]
 800c912:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c914:	4a38      	ldr	r2, [pc, #224]	; (800c9f8 <tcp_process+0x5a0>)
 800c916:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c918:	8812      	ldrh	r2, [r2, #0]
 800c91a:	b292      	uxth	r2, r2
 800c91c:	9202      	str	r2, [sp, #8]
 800c91e:	9301      	str	r3, [sp, #4]
 800c920:	4b36      	ldr	r3, [pc, #216]	; (800c9fc <tcp_process+0x5a4>)
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	4b36      	ldr	r3, [pc, #216]	; (800ca00 <tcp_process+0x5a8>)
 800c926:	4602      	mov	r2, r0
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f002 fbd1 	bl	800f0d0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c92e:	e167      	b.n	800cc00 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c930:	4b2d      	ldr	r3, [pc, #180]	; (800c9e8 <tcp_process+0x590>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	f003 0302 	and.w	r3, r3, #2
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f000 8161 	beq.w	800cc00 <tcp_process+0x7a8>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c942:	1e5a      	subs	r2, r3, #1
 800c944:	4b2b      	ldr	r3, [pc, #172]	; (800c9f4 <tcp_process+0x59c>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	429a      	cmp	r2, r3
 800c94a:	f040 8159 	bne.w	800cc00 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f002 f9b6 	bl	800ecc0 <tcp_rexmit>
      break;
 800c954:	e154      	b.n	800cc00 <tcp_process+0x7a8>
 800c956:	e153      	b.n	800cc00 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fa71 	bl	800ce40 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c95e:	4b2d      	ldr	r3, [pc, #180]	; (800ca14 <tcp_process+0x5bc>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	f003 0320 	and.w	r3, r3, #32
 800c966:	2b00      	cmp	r3, #0
 800c968:	f000 814c 	beq.w	800cc04 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	8b5b      	ldrh	r3, [r3, #26]
 800c970:	f043 0302 	orr.w	r3, r3, #2
 800c974:	b29a      	uxth	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2207      	movs	r2, #7
 800c97e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c980:	e140      	b.n	800cc04 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fa5c 	bl	800ce40 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c988:	4b22      	ldr	r3, [pc, #136]	; (800ca14 <tcp_process+0x5bc>)
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	f003 0320 	and.w	r3, r3, #32
 800c990:	2b00      	cmp	r3, #0
 800c992:	d071      	beq.n	800ca78 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c994:	4b14      	ldr	r3, [pc, #80]	; (800c9e8 <tcp_process+0x590>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	f003 0310 	and.w	r3, r3, #16
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d060      	beq.n	800ca62 <tcp_process+0x60a>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c9a4:	4b11      	ldr	r3, [pc, #68]	; (800c9ec <tcp_process+0x594>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d15a      	bne.n	800ca62 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d156      	bne.n	800ca62 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	8b5b      	ldrh	r3, [r3, #26]
 800c9b8:	f043 0302 	orr.w	r3, r3, #2
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7fe fdbc 	bl	800b540 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c9c8:	4b13      	ldr	r3, [pc, #76]	; (800ca18 <tcp_process+0x5c0>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d105      	bne.n	800c9de <tcp_process+0x586>
 800c9d2:	4b11      	ldr	r3, [pc, #68]	; (800ca18 <tcp_process+0x5c0>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	4a0f      	ldr	r2, [pc, #60]	; (800ca18 <tcp_process+0x5c0>)
 800c9da:	6013      	str	r3, [r2, #0]
 800c9dc:	e02e      	b.n	800ca3c <tcp_process+0x5e4>
 800c9de:	4b0e      	ldr	r3, [pc, #56]	; (800ca18 <tcp_process+0x5c0>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	617b      	str	r3, [r7, #20]
 800c9e4:	e027      	b.n	800ca36 <tcp_process+0x5de>
 800c9e6:	bf00      	nop
 800c9e8:	2000d5d0 	.word	0x2000d5d0
 800c9ec:	2000d5c8 	.word	0x2000d5c8
 800c9f0:	2000d5ce 	.word	0x2000d5ce
 800c9f4:	2000d5c4 	.word	0x2000d5c4
 800c9f8:	2000d5b4 	.word	0x2000d5b4
 800c9fc:	20007c88 	.word	0x20007c88
 800ca00:	20007c8c 	.word	0x20007c8c
 800ca04:	080147b0 	.word	0x080147b0
 800ca08:	08014a50 	.word	0x08014a50
 800ca0c:	080147fc 	.word	0x080147fc
 800ca10:	2000d5cc 	.word	0x2000d5cc
 800ca14:	2000d5d1 	.word	0x2000d5d1
 800ca18:	2000d598 	.word	0x2000d598
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d104      	bne.n	800ca30 <tcp_process+0x5d8>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68da      	ldr	r2, [r3, #12]
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	60da      	str	r2, [r3, #12]
 800ca2e:	e005      	b.n	800ca3c <tcp_process+0x5e4>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	617b      	str	r3, [r7, #20]
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1ef      	bne.n	800ca1c <tcp_process+0x5c4>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	60da      	str	r2, [r3, #12]
 800ca42:	4b77      	ldr	r3, [pc, #476]	; (800cc20 <tcp_process+0x7c8>)
 800ca44:	2201      	movs	r2, #1
 800ca46:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	220a      	movs	r2, #10
 800ca4c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ca4e:	4b75      	ldr	r3, [pc, #468]	; (800cc24 <tcp_process+0x7cc>)
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60da      	str	r2, [r3, #12]
 800ca56:	4a73      	ldr	r2, [pc, #460]	; (800cc24 <tcp_process+0x7cc>)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6013      	str	r3, [r2, #0]
 800ca5c:	f002 fcfa 	bl	800f454 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ca60:	e0d2      	b.n	800cc08 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	8b5b      	ldrh	r3, [r3, #26]
 800ca66:	f043 0302 	orr.w	r3, r3, #2
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2208      	movs	r2, #8
 800ca74:	751a      	strb	r2, [r3, #20]
      break;
 800ca76:	e0c7      	b.n	800cc08 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca78:	4b6b      	ldr	r3, [pc, #428]	; (800cc28 <tcp_process+0x7d0>)
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	f003 0310 	and.w	r3, r3, #16
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 80c1 	beq.w	800cc08 <tcp_process+0x7b0>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca8a:	4b68      	ldr	r3, [pc, #416]	; (800cc2c <tcp_process+0x7d4>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	f040 80ba 	bne.w	800cc08 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f040 80b5 	bne.w	800cc08 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2206      	movs	r2, #6
 800caa2:	751a      	strb	r2, [r3, #20]
      break;
 800caa4:	e0b0      	b.n	800cc08 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f9ca 	bl	800ce40 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800caac:	4b60      	ldr	r3, [pc, #384]	; (800cc30 <tcp_process+0x7d8>)
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	f003 0320 	and.w	r3, r3, #32
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f000 80a9 	beq.w	800cc0c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	8b5b      	ldrh	r3, [r3, #26]
 800cabe:	f043 0302 	orr.w	r3, r3, #2
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7fe fd39 	bl	800b540 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cace:	4b59      	ldr	r3, [pc, #356]	; (800cc34 <tcp_process+0x7dc>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d105      	bne.n	800cae4 <tcp_process+0x68c>
 800cad8:	4b56      	ldr	r3, [pc, #344]	; (800cc34 <tcp_process+0x7dc>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	4a55      	ldr	r2, [pc, #340]	; (800cc34 <tcp_process+0x7dc>)
 800cae0:	6013      	str	r3, [r2, #0]
 800cae2:	e013      	b.n	800cb0c <tcp_process+0x6b4>
 800cae4:	4b53      	ldr	r3, [pc, #332]	; (800cc34 <tcp_process+0x7dc>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	613b      	str	r3, [r7, #16]
 800caea:	e00c      	b.n	800cb06 <tcp_process+0x6ae>
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d104      	bne.n	800cb00 <tcp_process+0x6a8>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	60da      	str	r2, [r3, #12]
 800cafe:	e005      	b.n	800cb0c <tcp_process+0x6b4>
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	613b      	str	r3, [r7, #16]
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1ef      	bne.n	800caec <tcp_process+0x694>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	60da      	str	r2, [r3, #12]
 800cb12:	4b43      	ldr	r3, [pc, #268]	; (800cc20 <tcp_process+0x7c8>)
 800cb14:	2201      	movs	r2, #1
 800cb16:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	220a      	movs	r2, #10
 800cb1c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cb1e:	4b41      	ldr	r3, [pc, #260]	; (800cc24 <tcp_process+0x7cc>)
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	60da      	str	r2, [r3, #12]
 800cb26:	4a3f      	ldr	r2, [pc, #252]	; (800cc24 <tcp_process+0x7cc>)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6013      	str	r3, [r2, #0]
 800cb2c:	f002 fc92 	bl	800f454 <tcp_timer_needed>
      }
      break;
 800cb30:	e06c      	b.n	800cc0c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f984 	bl	800ce40 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cb38:	4b3b      	ldr	r3, [pc, #236]	; (800cc28 <tcp_process+0x7d0>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	f003 0310 	and.w	r3, r3, #16
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d065      	beq.n	800cc10 <tcp_process+0x7b8>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb48:	4b38      	ldr	r3, [pc, #224]	; (800cc2c <tcp_process+0x7d4>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d15f      	bne.n	800cc10 <tcp_process+0x7b8>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d15b      	bne.n	800cc10 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7fe fcf1 	bl	800b540 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cb5e:	4b35      	ldr	r3, [pc, #212]	; (800cc34 <tcp_process+0x7dc>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d105      	bne.n	800cb74 <tcp_process+0x71c>
 800cb68:	4b32      	ldr	r3, [pc, #200]	; (800cc34 <tcp_process+0x7dc>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	4a31      	ldr	r2, [pc, #196]	; (800cc34 <tcp_process+0x7dc>)
 800cb70:	6013      	str	r3, [r2, #0]
 800cb72:	e013      	b.n	800cb9c <tcp_process+0x744>
 800cb74:	4b2f      	ldr	r3, [pc, #188]	; (800cc34 <tcp_process+0x7dc>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	60fb      	str	r3, [r7, #12]
 800cb7a:	e00c      	b.n	800cb96 <tcp_process+0x73e>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d104      	bne.n	800cb90 <tcp_process+0x738>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	68da      	ldr	r2, [r3, #12]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	60da      	str	r2, [r3, #12]
 800cb8e:	e005      	b.n	800cb9c <tcp_process+0x744>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	60fb      	str	r3, [r7, #12]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1ef      	bne.n	800cb7c <tcp_process+0x724>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	60da      	str	r2, [r3, #12]
 800cba2:	4b1f      	ldr	r3, [pc, #124]	; (800cc20 <tcp_process+0x7c8>)
 800cba4:	2201      	movs	r2, #1
 800cba6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	220a      	movs	r2, #10
 800cbac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cbae:	4b1d      	ldr	r3, [pc, #116]	; (800cc24 <tcp_process+0x7cc>)
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	60da      	str	r2, [r3, #12]
 800cbb6:	4a1b      	ldr	r2, [pc, #108]	; (800cc24 <tcp_process+0x7cc>)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	f002 fc4a 	bl	800f454 <tcp_timer_needed>
      }
      break;
 800cbc0:	e026      	b.n	800cc10 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f93c 	bl	800ce40 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cbc8:	4b17      	ldr	r3, [pc, #92]	; (800cc28 <tcp_process+0x7d0>)
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	f003 0310 	and.w	r3, r3, #16
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d01f      	beq.n	800cc14 <tcp_process+0x7bc>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbd8:	4b14      	ldr	r3, [pc, #80]	; (800cc2c <tcp_process+0x7d4>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d119      	bne.n	800cc14 <tcp_process+0x7bc>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d115      	bne.n	800cc14 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cbe8:	4b11      	ldr	r3, [pc, #68]	; (800cc30 <tcp_process+0x7d8>)
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	f043 0310 	orr.w	r3, r3, #16
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	4b0f      	ldr	r3, [pc, #60]	; (800cc30 <tcp_process+0x7d8>)
 800cbf4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cbf6:	e00d      	b.n	800cc14 <tcp_process+0x7bc>
    default:
      break;
 800cbf8:	bf00      	nop
 800cbfa:	e00c      	b.n	800cc16 <tcp_process+0x7be>
      break;
 800cbfc:	bf00      	nop
 800cbfe:	e00a      	b.n	800cc16 <tcp_process+0x7be>
      break;
 800cc00:	bf00      	nop
 800cc02:	e008      	b.n	800cc16 <tcp_process+0x7be>
      break;
 800cc04:	bf00      	nop
 800cc06:	e006      	b.n	800cc16 <tcp_process+0x7be>
      break;
 800cc08:	bf00      	nop
 800cc0a:	e004      	b.n	800cc16 <tcp_process+0x7be>
      break;
 800cc0c:	bf00      	nop
 800cc0e:	e002      	b.n	800cc16 <tcp_process+0x7be>
      break;
 800cc10:	bf00      	nop
 800cc12:	e000      	b.n	800cc16 <tcp_process+0x7be>
      break;
 800cc14:	bf00      	nop
  }
  return ERR_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3724      	adds	r7, #36	; 0x24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd90      	pop	{r4, r7, pc}
 800cc20:	2000d5a0 	.word	0x2000d5a0
 800cc24:	2000d59c 	.word	0x2000d59c
 800cc28:	2000d5d0 	.word	0x2000d5d0
 800cc2c:	2000d5c8 	.word	0x2000d5c8
 800cc30:	2000d5d1 	.word	0x2000d5d1
 800cc34:	2000d598 	.word	0x2000d598

0800cc38 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cc38:	b590      	push	{r4, r7, lr}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d106      	bne.n	800cc56 <tcp_oos_insert_segment+0x1e>
 800cc48:	4b3b      	ldr	r3, [pc, #236]	; (800cd38 <tcp_oos_insert_segment+0x100>)
 800cc4a:	f240 421f 	movw	r2, #1055	; 0x41f
 800cc4e:	493b      	ldr	r1, [pc, #236]	; (800cd3c <tcp_oos_insert_segment+0x104>)
 800cc50:	483b      	ldr	r0, [pc, #236]	; (800cd40 <tcp_oos_insert_segment+0x108>)
 800cc52:	f005 fcc3 	bl	80125dc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	899b      	ldrh	r3, [r3, #12]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fb fc56 	bl	8008510 <lwip_htons>
 800cc64:	4603      	mov	r3, r0
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	f003 0301 	and.w	r3, r3, #1
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d028      	beq.n	800ccc2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cc70:	6838      	ldr	r0, [r7, #0]
 800cc72:	f7fe fa63 	bl	800b13c <tcp_segs_free>
    next = NULL;
 800cc76:	2300      	movs	r3, #0
 800cc78:	603b      	str	r3, [r7, #0]
 800cc7a:	e056      	b.n	800cd2a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	899b      	ldrh	r3, [r3, #12]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fb fc43 	bl	8008510 <lwip_htons>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	f003 0301 	and.w	r3, r3, #1
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00d      	beq.n	800ccb2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	899b      	ldrh	r3, [r3, #12]
 800cc9c:	b29c      	uxth	r4, r3
 800cc9e:	2001      	movs	r0, #1
 800cca0:	f7fb fc36 	bl	8008510 <lwip_htons>
 800cca4:	4603      	mov	r3, r0
 800cca6:	461a      	mov	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	4322      	orrs	r2, r4
 800ccae:	b292      	uxth	r2, r2
 800ccb0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f7fe fa52 	bl	800b166 <tcp_seg_free>
    while (next &&
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00e      	beq.n	800cce6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	891b      	ldrh	r3, [r3, #8]
 800cccc:	461a      	mov	r2, r3
 800ccce:	4b1d      	ldr	r3, [pc, #116]	; (800cd44 <tcp_oos_insert_segment+0x10c>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	441a      	add	r2, r3
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	6839      	ldr	r1, [r7, #0]
 800ccdc:	8909      	ldrh	r1, [r1, #8]
 800ccde:	440b      	add	r3, r1
 800cce0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	daca      	bge.n	800cc7c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d01e      	beq.n	800cd2a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	891b      	ldrh	r3, [r3, #8]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	4b14      	ldr	r3, [pc, #80]	; (800cd44 <tcp_oos_insert_segment+0x10c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	441a      	add	r2, r3
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	dd12      	ble.n	800cd2a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	4b0d      	ldr	r3, [pc, #52]	; (800cd44 <tcp_oos_insert_segment+0x10c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	891b      	ldrh	r3, [r3, #8]
 800cd22:	4619      	mov	r1, r3
 800cd24:	4610      	mov	r0, r2
 800cd26:	f7fc fe19 	bl	800995c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	601a      	str	r2, [r3, #0]
}
 800cd30:	bf00      	nop
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd90      	pop	{r4, r7, pc}
 800cd38:	080147b0 	.word	0x080147b0
 800cd3c:	08014a70 	.word	0x08014a70
 800cd40:	080147fc 	.word	0x080147fc
 800cd44:	2000d5c4 	.word	0x2000d5c4

0800cd48 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cd48:	b5b0      	push	{r4, r5, r7, lr}
 800cd4a:	b086      	sub	sp, #24
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cd56:	e03e      	b.n	800cdd6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fd f80c 	bl	8009d84 <pbuf_clen>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd76:	8a7a      	ldrh	r2, [r7, #18]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d906      	bls.n	800cd8a <tcp_free_acked_segments+0x42>
 800cd7c:	4b2a      	ldr	r3, [pc, #168]	; (800ce28 <tcp_free_acked_segments+0xe0>)
 800cd7e:	f240 4257 	movw	r2, #1111	; 0x457
 800cd82:	492a      	ldr	r1, [pc, #168]	; (800ce2c <tcp_free_acked_segments+0xe4>)
 800cd84:	482a      	ldr	r0, [pc, #168]	; (800ce30 <tcp_free_acked_segments+0xe8>)
 800cd86:	f005 fc29 	bl	80125dc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800cd90:	8a7b      	ldrh	r3, [r7, #18]
 800cd92:	1ad3      	subs	r3, r2, r3
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	891a      	ldrh	r2, [r3, #8]
 800cda0:	4b24      	ldr	r3, [pc, #144]	; (800ce34 <tcp_free_acked_segments+0xec>)
 800cda2:	881b      	ldrh	r3, [r3, #0]
 800cda4:	4413      	add	r3, r2
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	4b22      	ldr	r3, [pc, #136]	; (800ce34 <tcp_free_acked_segments+0xec>)
 800cdaa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cdac:	6978      	ldr	r0, [r7, #20]
 800cdae:	f7fe f9da 	bl	800b166 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00c      	beq.n	800cdd6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d109      	bne.n	800cdd6 <tcp_free_acked_segments+0x8e>
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d106      	bne.n	800cdd6 <tcp_free_acked_segments+0x8e>
 800cdc8:	4b17      	ldr	r3, [pc, #92]	; (800ce28 <tcp_free_acked_segments+0xe0>)
 800cdca:	f240 4261 	movw	r2, #1121	; 0x461
 800cdce:	491a      	ldr	r1, [pc, #104]	; (800ce38 <tcp_free_acked_segments+0xf0>)
 800cdd0:	4817      	ldr	r0, [pc, #92]	; (800ce30 <tcp_free_acked_segments+0xe8>)
 800cdd2:	f005 fc03 	bl	80125dc <iprintf>
  while (seg_list != NULL &&
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d020      	beq.n	800ce1e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fb fba9 	bl	800853a <lwip_htonl>
 800cde8:	4604      	mov	r4, r0
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	891b      	ldrh	r3, [r3, #8]
 800cdee:	461d      	mov	r5, r3
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	899b      	ldrh	r3, [r3, #12]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fb fb89 	bl	8008510 <lwip_htons>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	f003 0303 	and.w	r3, r3, #3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <tcp_free_acked_segments+0xc6>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e000      	b.n	800ce10 <tcp_free_acked_segments+0xc8>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	442b      	add	r3, r5
 800ce12:	18e2      	adds	r2, r4, r3
 800ce14:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <tcp_free_acked_segments+0xf4>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	dd9c      	ble.n	800cd58 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ce1e:	68bb      	ldr	r3, [r7, #8]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3718      	adds	r7, #24
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bdb0      	pop	{r4, r5, r7, pc}
 800ce28:	080147b0 	.word	0x080147b0
 800ce2c:	08014a98 	.word	0x08014a98
 800ce30:	080147fc 	.word	0x080147fc
 800ce34:	2000d5cc 	.word	0x2000d5cc
 800ce38:	08014ac0 	.word	0x08014ac0
 800ce3c:	2000d5c8 	.word	0x2000d5c8

0800ce40 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ce40:	b5b0      	push	{r4, r5, r7, lr}
 800ce42:	b094      	sub	sp, #80	; 0x50
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <tcp_receive+0x20>
 800ce52:	4b91      	ldr	r3, [pc, #580]	; (800d098 <tcp_receive+0x258>)
 800ce54:	f240 427b 	movw	r2, #1147	; 0x47b
 800ce58:	4990      	ldr	r1, [pc, #576]	; (800d09c <tcp_receive+0x25c>)
 800ce5a:	4891      	ldr	r0, [pc, #580]	; (800d0a0 <tcp_receive+0x260>)
 800ce5c:	f005 fbbe 	bl	80125dc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	7d1b      	ldrb	r3, [r3, #20]
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d806      	bhi.n	800ce76 <tcp_receive+0x36>
 800ce68:	4b8b      	ldr	r3, [pc, #556]	; (800d098 <tcp_receive+0x258>)
 800ce6a:	f240 427c 	movw	r2, #1148	; 0x47c
 800ce6e:	498d      	ldr	r1, [pc, #564]	; (800d0a4 <tcp_receive+0x264>)
 800ce70:	488b      	ldr	r0, [pc, #556]	; (800d0a0 <tcp_receive+0x260>)
 800ce72:	f005 fbb3 	bl	80125dc <iprintf>

  if (flags & TCP_ACK) {
 800ce76:	4b8c      	ldr	r3, [pc, #560]	; (800d0a8 <tcp_receive+0x268>)
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	f003 0310 	and.w	r3, r3, #16
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f000 8264 	beq.w	800d34c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce90:	4413      	add	r3, r2
 800ce92:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce98:	4b84      	ldr	r3, [pc, #528]	; (800d0ac <tcp_receive+0x26c>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	db1b      	blt.n	800ceda <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cea6:	4b81      	ldr	r3, [pc, #516]	; (800d0ac <tcp_receive+0x26c>)
 800cea8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d106      	bne.n	800cebc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ceb2:	4b7f      	ldr	r3, [pc, #508]	; (800d0b0 <tcp_receive+0x270>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	db0e      	blt.n	800ceda <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cec0:	4b7b      	ldr	r3, [pc, #492]	; (800d0b0 <tcp_receive+0x270>)
 800cec2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d125      	bne.n	800cf14 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cec8:	4b7a      	ldr	r3, [pc, #488]	; (800d0b4 <tcp_receive+0x274>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	89db      	ldrh	r3, [r3, #14]
 800cece:	b29a      	uxth	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d91c      	bls.n	800cf14 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ceda:	4b76      	ldr	r3, [pc, #472]	; (800d0b4 <tcp_receive+0x274>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	89db      	ldrh	r3, [r3, #14]
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d205      	bcs.n	800cf04 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800cf04:	4b69      	ldr	r3, [pc, #420]	; (800d0ac <tcp_receive+0x26c>)
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800cf0c:	4b68      	ldr	r3, [pc, #416]	; (800d0b0 <tcp_receive+0x270>)
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cf14:	4b66      	ldr	r3, [pc, #408]	; (800d0b0 <tcp_receive+0x270>)
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	dc58      	bgt.n	800cfd4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cf22:	4b65      	ldr	r3, [pc, #404]	; (800d0b8 <tcp_receive+0x278>)
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d14b      	bne.n	800cfc2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800cf34:	4413      	add	r3, r2
 800cf36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d142      	bne.n	800cfc2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	db3d      	blt.n	800cfc2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf4a:	4b59      	ldr	r3, [pc, #356]	; (800d0b0 <tcp_receive+0x270>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d137      	bne.n	800cfc2 <tcp_receive+0x182>
              found_dupack = 1;
 800cf52:	2301      	movs	r3, #1
 800cf54:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf5c:	2bff      	cmp	r3, #255	; 0xff
 800cf5e:	d007      	beq.n	800cf70 <tcp_receive+0x130>
                ++pcb->dupacks;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf66:	3301      	adds	r3, #1
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d91b      	bls.n	800cfb2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf84:	4413      	add	r3, r2
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d30a      	bcc.n	800cfa8 <tcp_receive+0x168>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf9c:	4413      	add	r3, r2
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cfa6:	e004      	b.n	800cfb2 <tcp_receive+0x172>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d902      	bls.n	800cfc2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f001 feeb 	bl	800ed98 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800cfc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f040 8161 	bne.w	800d28c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cfd2:	e15b      	b.n	800d28c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cfd4:	4b36      	ldr	r3, [pc, #216]	; (800d0b0 <tcp_receive+0x270>)
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f2c0 814e 	blt.w	800d282 <tcp_receive+0x442>
 800cfe6:	4b32      	ldr	r3, [pc, #200]	; (800d0b0 <tcp_receive+0x270>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f300 8146 	bgt.w	800d282 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	8b5b      	ldrh	r3, [r3, #26]
 800cffa:	f003 0304 	and.w	r3, r3, #4
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d010      	beq.n	800d024 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	8b5b      	ldrh	r3, [r3, #26]
 800d006:	f023 0304 	bic.w	r3, r3, #4
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d032:	10db      	asrs	r3, r3, #3
 800d034:	b21b      	sxth	r3, r3
 800d036:	b29a      	uxth	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d03e:	b29b      	uxth	r3, r3
 800d040:	4413      	add	r3, r2
 800d042:	b29b      	uxth	r3, r3
 800d044:	b21a      	sxth	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d04c:	4b18      	ldr	r3, [pc, #96]	; (800d0b0 <tcp_receive+0x270>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	b29a      	uxth	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d056:	b29b      	uxth	r3, r3
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d064:	4b12      	ldr	r3, [pc, #72]	; (800d0b0 <tcp_receive+0x270>)
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	7d1b      	ldrb	r3, [r3, #20]
 800d070:	2b03      	cmp	r3, #3
 800d072:	f240 8097 	bls.w	800d1a4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d082:	429a      	cmp	r2, r3
 800d084:	d245      	bcs.n	800d112 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	8b5b      	ldrh	r3, [r3, #26]
 800d08a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d014      	beq.n	800d0bc <tcp_receive+0x27c>
 800d092:	2301      	movs	r3, #1
 800d094:	e013      	b.n	800d0be <tcp_receive+0x27e>
 800d096:	bf00      	nop
 800d098:	080147b0 	.word	0x080147b0
 800d09c:	08014ae0 	.word	0x08014ae0
 800d0a0:	080147fc 	.word	0x080147fc
 800d0a4:	08014afc 	.word	0x08014afc
 800d0a8:	2000d5d0 	.word	0x2000d5d0
 800d0ac:	2000d5c4 	.word	0x2000d5c4
 800d0b0:	2000d5c8 	.word	0x2000d5c8
 800d0b4:	2000d5b4 	.word	0x2000d5b4
 800d0b8:	2000d5ce 	.word	0x2000d5ce
 800d0bc:	2302      	movs	r3, #2
 800d0be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d0c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0cc:	fb12 f303 	smulbb	r3, r2, r3
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	bf28      	it	cs
 800d0d8:	4613      	movcs	r3, r2
 800d0da:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d0e4:	4413      	add	r3, r2
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d309      	bcc.n	800d106 <tcp_receive+0x2c6>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d0fa:	4413      	add	r3, r2
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d104:	e04e      	b.n	800d1a4 <tcp_receive+0x364>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d10c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d110:	e048      	b.n	800d1a4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d118:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d11a:	4413      	add	r3, r2
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d124:	429a      	cmp	r2, r3
 800d126:	d309      	bcc.n	800d13c <tcp_receive+0x2fc>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d12e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d130:	4413      	add	r3, r2
 800d132:	b29a      	uxth	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d13a:	e004      	b.n	800d146 <tcp_receive+0x306>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d152:	429a      	cmp	r2, r3
 800d154:	d326      	bcc.n	800d1a4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	b29a      	uxth	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d176:	4413      	add	r3, r2
 800d178:	b29a      	uxth	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d180:	429a      	cmp	r2, r3
 800d182:	d30a      	bcc.n	800d19a <tcp_receive+0x35a>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d18e:	4413      	add	r3, r2
 800d190:	b29a      	uxth	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d198:	e004      	b.n	800d1a4 <tcp_receive+0x364>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1ac:	4a98      	ldr	r2, [pc, #608]	; (800d410 <tcp_receive+0x5d0>)
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff fdca 	bl	800cd48 <tcp_free_acked_segments>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c2:	4a94      	ldr	r2, [pc, #592]	; (800d414 <tcp_receive+0x5d4>)
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f7ff fdbf 	bl	800cd48 <tcp_free_acked_segments>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d104      	bne.n	800d1e2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1de:	861a      	strh	r2, [r3, #48]	; 0x30
 800d1e0:	e002      	b.n	800d1e8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d103      	bne.n	800d1fe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d204:	4b84      	ldr	r3, [pc, #528]	; (800d418 <tcp_receive+0x5d8>)
 800d206:	881b      	ldrh	r3, [r3, #0]
 800d208:	4413      	add	r3, r2
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	8b5b      	ldrh	r3, [r3, #26]
 800d216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d035      	beq.n	800d28a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d222:	2b00      	cmp	r3, #0
 800d224:	d118      	bne.n	800d258 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00c      	beq.n	800d248 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fb f97d 	bl	800853a <lwip_htonl>
 800d240:	4603      	mov	r3, r0
 800d242:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d244:	2b00      	cmp	r3, #0
 800d246:	dc20      	bgt.n	800d28a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	8b5b      	ldrh	r3, [r3, #26]
 800d24c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d250:	b29a      	uxth	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d256:	e018      	b.n	800d28a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	4618      	mov	r0, r3
 800d266:	f7fb f968 	bl	800853a <lwip_htonl>
 800d26a:	4603      	mov	r3, r0
 800d26c:	1ae3      	subs	r3, r4, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	dc0b      	bgt.n	800d28a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	8b5b      	ldrh	r3, [r3, #26]
 800d276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d280:	e003      	b.n	800d28a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f001 ff76 	bl	800f174 <tcp_send_empty_ack>
 800d288:	e000      	b.n	800d28c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d28a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d290:	2b00      	cmp	r3, #0
 800d292:	d05b      	beq.n	800d34c <tcp_receive+0x50c>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d298:	4b60      	ldr	r3, [pc, #384]	; (800d41c <tcp_receive+0x5dc>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	da54      	bge.n	800d34c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d2a2:	4b5f      	ldr	r3, [pc, #380]	; (800d420 <tcp_receive+0x5e0>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d2b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d2c0:	10db      	asrs	r3, r3, #3
 800d2c2:	b21b      	sxth	r3, r3
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d2da:	4413      	add	r3, r2
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	b21a      	sxth	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d2e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	da05      	bge.n	800d2f8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d2ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d2f0:	425b      	negs	r3, r3
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d2f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d302:	109b      	asrs	r3, r3, #2
 800d304:	b21b      	sxth	r3, r3
 800d306:	b29b      	uxth	r3, r3
 800d308:	1ad3      	subs	r3, r2, r3
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d316:	b29a      	uxth	r2, r3
 800d318:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d31c:	4413      	add	r3, r2
 800d31e:	b29b      	uxth	r3, r3
 800d320:	b21a      	sxth	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d32c:	10db      	asrs	r3, r3, #3
 800d32e:	b21b      	sxth	r3, r3
 800d330:	b29a      	uxth	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d338:	b29b      	uxth	r3, r3
 800d33a:	4413      	add	r3, r2
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	b21a      	sxth	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d34c:	4b35      	ldr	r3, [pc, #212]	; (800d424 <tcp_receive+0x5e4>)
 800d34e:	881b      	ldrh	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	f000 84e2 	beq.w	800dd1a <tcp_receive+0xeda>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	7d1b      	ldrb	r3, [r3, #20]
 800d35a:	2b06      	cmp	r3, #6
 800d35c:	f200 84dd 	bhi.w	800dd1a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d364:	4b30      	ldr	r3, [pc, #192]	; (800d428 <tcp_receive+0x5e8>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	1ad3      	subs	r3, r2, r3
 800d36a:	3b01      	subs	r3, #1
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f2c0 808f 	blt.w	800d490 <tcp_receive+0x650>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d376:	4b2b      	ldr	r3, [pc, #172]	; (800d424 <tcp_receive+0x5e4>)
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	4619      	mov	r1, r3
 800d37c:	4b2a      	ldr	r3, [pc, #168]	; (800d428 <tcp_receive+0x5e8>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	440b      	add	r3, r1
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	3301      	adds	r3, #1
 800d386:	2b00      	cmp	r3, #0
 800d388:	f300 8082 	bgt.w	800d490 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d38c:	4b27      	ldr	r3, [pc, #156]	; (800d42c <tcp_receive+0x5ec>)
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d396:	4b24      	ldr	r3, [pc, #144]	; (800d428 <tcp_receive+0x5e8>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d39e:	4b23      	ldr	r3, [pc, #140]	; (800d42c <tcp_receive+0x5ec>)
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d106      	bne.n	800d3b4 <tcp_receive+0x574>
 800d3a6:	4b22      	ldr	r3, [pc, #136]	; (800d430 <tcp_receive+0x5f0>)
 800d3a8:	f240 5294 	movw	r2, #1428	; 0x594
 800d3ac:	4921      	ldr	r1, [pc, #132]	; (800d434 <tcp_receive+0x5f4>)
 800d3ae:	4822      	ldr	r0, [pc, #136]	; (800d438 <tcp_receive+0x5f8>)
 800d3b0:	f005 f914 	bl	80125dc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d906      	bls.n	800d3cc <tcp_receive+0x58c>
 800d3be:	4b1c      	ldr	r3, [pc, #112]	; (800d430 <tcp_receive+0x5f0>)
 800d3c0:	f240 5295 	movw	r2, #1429	; 0x595
 800d3c4:	491d      	ldr	r1, [pc, #116]	; (800d43c <tcp_receive+0x5fc>)
 800d3c6:	481c      	ldr	r0, [pc, #112]	; (800d438 <tcp_receive+0x5f8>)
 800d3c8:	f005 f908 	bl	80125dc <iprintf>
      off = (u16_t)off32;
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d3d2:	4b16      	ldr	r3, [pc, #88]	; (800d42c <tcp_receive+0x5ec>)
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	891b      	ldrh	r3, [r3, #8]
 800d3d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d906      	bls.n	800d3ee <tcp_receive+0x5ae>
 800d3e0:	4b13      	ldr	r3, [pc, #76]	; (800d430 <tcp_receive+0x5f0>)
 800d3e2:	f240 5297 	movw	r2, #1431	; 0x597
 800d3e6:	4916      	ldr	r1, [pc, #88]	; (800d440 <tcp_receive+0x600>)
 800d3e8:	4813      	ldr	r0, [pc, #76]	; (800d438 <tcp_receive+0x5f8>)
 800d3ea:	f005 f8f7 	bl	80125dc <iprintf>
      inseg.len -= off;
 800d3ee:	4b0f      	ldr	r3, [pc, #60]	; (800d42c <tcp_receive+0x5ec>)
 800d3f0:	891a      	ldrh	r2, [r3, #8]
 800d3f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	4b0c      	ldr	r3, [pc, #48]	; (800d42c <tcp_receive+0x5ec>)
 800d3fc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d3fe:	4b0b      	ldr	r3, [pc, #44]	; (800d42c <tcp_receive+0x5ec>)
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	891a      	ldrh	r2, [r3, #8]
 800d404:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d40c:	e02a      	b.n	800d464 <tcp_receive+0x624>
 800d40e:	bf00      	nop
 800d410:	08014b18 	.word	0x08014b18
 800d414:	08014b20 	.word	0x08014b20
 800d418:	2000d5cc 	.word	0x2000d5cc
 800d41c:	2000d5c8 	.word	0x2000d5c8
 800d420:	2000d58c 	.word	0x2000d58c
 800d424:	2000d5ce 	.word	0x2000d5ce
 800d428:	2000d5c4 	.word	0x2000d5c4
 800d42c:	2000d5a4 	.word	0x2000d5a4
 800d430:	080147b0 	.word	0x080147b0
 800d434:	08014b28 	.word	0x08014b28
 800d438:	080147fc 	.word	0x080147fc
 800d43c:	08014b38 	.word	0x08014b38
 800d440:	08014b48 	.word	0x08014b48
        off -= p->len;
 800d444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d446:	895b      	ldrh	r3, [r3, #10]
 800d448:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d44c:	1ad3      	subs	r3, r2, r3
 800d44e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d454:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d456:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d45a:	2200      	movs	r2, #0
 800d45c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d466:	895b      	ldrh	r3, [r3, #10]
 800d468:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d8e9      	bhi.n	800d444 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d474:	4619      	mov	r1, r3
 800d476:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d478:	f7fc fb70 	bl	8009b5c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d480:	4a91      	ldr	r2, [pc, #580]	; (800d6c8 <tcp_receive+0x888>)
 800d482:	6013      	str	r3, [r2, #0]
 800d484:	4b91      	ldr	r3, [pc, #580]	; (800d6cc <tcp_receive+0x88c>)
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	4a8f      	ldr	r2, [pc, #572]	; (800d6c8 <tcp_receive+0x888>)
 800d48a:	6812      	ldr	r2, [r2, #0]
 800d48c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d48e:	e00d      	b.n	800d4ac <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d490:	4b8d      	ldr	r3, [pc, #564]	; (800d6c8 <tcp_receive+0x888>)
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	da06      	bge.n	800d4ac <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	8b5b      	ldrh	r3, [r3, #26]
 800d4a2:	f043 0302 	orr.w	r3, r3, #2
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d4ac:	4b86      	ldr	r3, [pc, #536]	; (800d6c8 <tcp_receive+0x888>)
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b4:	1ad3      	subs	r3, r2, r3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f2c0 842a 	blt.w	800dd10 <tcp_receive+0xed0>
 800d4bc:	4b82      	ldr	r3, [pc, #520]	; (800d6c8 <tcp_receive+0x888>)
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d4c8:	440b      	add	r3, r1
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f300 841e 	bgt.w	800dd10 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4d8:	4b7b      	ldr	r3, [pc, #492]	; (800d6c8 <tcp_receive+0x888>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	f040 829a 	bne.w	800da16 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d4e2:	4b7a      	ldr	r3, [pc, #488]	; (800d6cc <tcp_receive+0x88c>)
 800d4e4:	891c      	ldrh	r4, [r3, #8]
 800d4e6:	4b79      	ldr	r3, [pc, #484]	; (800d6cc <tcp_receive+0x88c>)
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	899b      	ldrh	r3, [r3, #12]
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fb f80e 	bl	8008510 <lwip_htons>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	f003 0303 	and.w	r3, r3, #3
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d001      	beq.n	800d504 <tcp_receive+0x6c4>
 800d500:	2301      	movs	r3, #1
 800d502:	e000      	b.n	800d506 <tcp_receive+0x6c6>
 800d504:	2300      	movs	r3, #0
 800d506:	4423      	add	r3, r4
 800d508:	b29a      	uxth	r2, r3
 800d50a:	4b71      	ldr	r3, [pc, #452]	; (800d6d0 <tcp_receive+0x890>)
 800d50c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d512:	4b6f      	ldr	r3, [pc, #444]	; (800d6d0 <tcp_receive+0x890>)
 800d514:	881b      	ldrh	r3, [r3, #0]
 800d516:	429a      	cmp	r2, r3
 800d518:	d275      	bcs.n	800d606 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d51a:	4b6c      	ldr	r3, [pc, #432]	; (800d6cc <tcp_receive+0x88c>)
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	899b      	ldrh	r3, [r3, #12]
 800d520:	b29b      	uxth	r3, r3
 800d522:	4618      	mov	r0, r3
 800d524:	f7fa fff4 	bl	8008510 <lwip_htons>
 800d528:	4603      	mov	r3, r0
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	f003 0301 	and.w	r3, r3, #1
 800d530:	2b00      	cmp	r3, #0
 800d532:	d01f      	beq.n	800d574 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d534:	4b65      	ldr	r3, [pc, #404]	; (800d6cc <tcp_receive+0x88c>)
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	899b      	ldrh	r3, [r3, #12]
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	b21b      	sxth	r3, r3
 800d53e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d542:	b21c      	sxth	r4, r3
 800d544:	4b61      	ldr	r3, [pc, #388]	; (800d6cc <tcp_receive+0x88c>)
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	899b      	ldrh	r3, [r3, #12]
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fa ffdf 	bl	8008510 <lwip_htons>
 800d552:	4603      	mov	r3, r0
 800d554:	b2db      	uxtb	r3, r3
 800d556:	b29b      	uxth	r3, r3
 800d558:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fa ffd6 	bl	8008510 <lwip_htons>
 800d564:	4603      	mov	r3, r0
 800d566:	b21b      	sxth	r3, r3
 800d568:	4323      	orrs	r3, r4
 800d56a:	b21a      	sxth	r2, r3
 800d56c:	4b57      	ldr	r3, [pc, #348]	; (800d6cc <tcp_receive+0x88c>)
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	b292      	uxth	r2, r2
 800d572:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d578:	4b54      	ldr	r3, [pc, #336]	; (800d6cc <tcp_receive+0x88c>)
 800d57a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d57c:	4b53      	ldr	r3, [pc, #332]	; (800d6cc <tcp_receive+0x88c>)
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	899b      	ldrh	r3, [r3, #12]
 800d582:	b29b      	uxth	r3, r3
 800d584:	4618      	mov	r0, r3
 800d586:	f7fa ffc3 	bl	8008510 <lwip_htons>
 800d58a:	4603      	mov	r3, r0
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	f003 0302 	and.w	r3, r3, #2
 800d592:	2b00      	cmp	r3, #0
 800d594:	d005      	beq.n	800d5a2 <tcp_receive+0x762>
            inseg.len -= 1;
 800d596:	4b4d      	ldr	r3, [pc, #308]	; (800d6cc <tcp_receive+0x88c>)
 800d598:	891b      	ldrh	r3, [r3, #8]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	4b4b      	ldr	r3, [pc, #300]	; (800d6cc <tcp_receive+0x88c>)
 800d5a0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d5a2:	4b4a      	ldr	r3, [pc, #296]	; (800d6cc <tcp_receive+0x88c>)
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	4a49      	ldr	r2, [pc, #292]	; (800d6cc <tcp_receive+0x88c>)
 800d5a8:	8912      	ldrh	r2, [r2, #8]
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fc f9d5 	bl	800995c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d5b2:	4b46      	ldr	r3, [pc, #280]	; (800d6cc <tcp_receive+0x88c>)
 800d5b4:	891c      	ldrh	r4, [r3, #8]
 800d5b6:	4b45      	ldr	r3, [pc, #276]	; (800d6cc <tcp_receive+0x88c>)
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	899b      	ldrh	r3, [r3, #12]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fa ffa6 	bl	8008510 <lwip_htons>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	f003 0303 	and.w	r3, r3, #3
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d001      	beq.n	800d5d4 <tcp_receive+0x794>
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e000      	b.n	800d5d6 <tcp_receive+0x796>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	4423      	add	r3, r4
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	4b3d      	ldr	r3, [pc, #244]	; (800d6d0 <tcp_receive+0x890>)
 800d5dc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d5de:	4b3c      	ldr	r3, [pc, #240]	; (800d6d0 <tcp_receive+0x890>)
 800d5e0:	881b      	ldrh	r3, [r3, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	4b38      	ldr	r3, [pc, #224]	; (800d6c8 <tcp_receive+0x888>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	441a      	add	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ee:	6879      	ldr	r1, [r7, #4]
 800d5f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d5f2:	440b      	add	r3, r1
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d006      	beq.n	800d606 <tcp_receive+0x7c6>
 800d5f8:	4b36      	ldr	r3, [pc, #216]	; (800d6d4 <tcp_receive+0x894>)
 800d5fa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d5fe:	4936      	ldr	r1, [pc, #216]	; (800d6d8 <tcp_receive+0x898>)
 800d600:	4836      	ldr	r0, [pc, #216]	; (800d6dc <tcp_receive+0x89c>)
 800d602:	f004 ffeb 	bl	80125dc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 80e7 	beq.w	800d7de <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d610:	4b2e      	ldr	r3, [pc, #184]	; (800d6cc <tcp_receive+0x88c>)
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	899b      	ldrh	r3, [r3, #12]
 800d616:	b29b      	uxth	r3, r3
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fa ff79 	bl	8008510 <lwip_htons>
 800d61e:	4603      	mov	r3, r0
 800d620:	b2db      	uxtb	r3, r3
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	d010      	beq.n	800d64c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d62a:	e00a      	b.n	800d642 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d630:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f7fd fd92 	bl	800b166 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1f0      	bne.n	800d62c <tcp_receive+0x7ec>
 800d64a:	e0c8      	b.n	800d7de <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d650:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d652:	e052      	b.n	800d6fa <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	899b      	ldrh	r3, [r3, #12]
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fa ff57 	bl	8008510 <lwip_htons>
 800d662:	4603      	mov	r3, r0
 800d664:	b2db      	uxtb	r3, r3
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d03d      	beq.n	800d6ea <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d66e:	4b17      	ldr	r3, [pc, #92]	; (800d6cc <tcp_receive+0x88c>)
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	899b      	ldrh	r3, [r3, #12]
 800d674:	b29b      	uxth	r3, r3
 800d676:	4618      	mov	r0, r3
 800d678:	f7fa ff4a 	bl	8008510 <lwip_htons>
 800d67c:	4603      	mov	r3, r0
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d684:	2b00      	cmp	r3, #0
 800d686:	d130      	bne.n	800d6ea <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d688:	4b10      	ldr	r3, [pc, #64]	; (800d6cc <tcp_receive+0x88c>)
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	899b      	ldrh	r3, [r3, #12]
 800d68e:	b29c      	uxth	r4, r3
 800d690:	2001      	movs	r0, #1
 800d692:	f7fa ff3d 	bl	8008510 <lwip_htons>
 800d696:	4603      	mov	r3, r0
 800d698:	461a      	mov	r2, r3
 800d69a:	4b0c      	ldr	r3, [pc, #48]	; (800d6cc <tcp_receive+0x88c>)
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	4322      	orrs	r2, r4
 800d6a0:	b292      	uxth	r2, r2
 800d6a2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d6a4:	4b09      	ldr	r3, [pc, #36]	; (800d6cc <tcp_receive+0x88c>)
 800d6a6:	891c      	ldrh	r4, [r3, #8]
 800d6a8:	4b08      	ldr	r3, [pc, #32]	; (800d6cc <tcp_receive+0x88c>)
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	899b      	ldrh	r3, [r3, #12]
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fa ff2d 	bl	8008510 <lwip_htons>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	f003 0303 	and.w	r3, r3, #3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00e      	beq.n	800d6e0 <tcp_receive+0x8a0>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e00d      	b.n	800d6e2 <tcp_receive+0x8a2>
 800d6c6:	bf00      	nop
 800d6c8:	2000d5c4 	.word	0x2000d5c4
 800d6cc:	2000d5a4 	.word	0x2000d5a4
 800d6d0:	2000d5ce 	.word	0x2000d5ce
 800d6d4:	080147b0 	.word	0x080147b0
 800d6d8:	08014b58 	.word	0x08014b58
 800d6dc:	080147fc 	.word	0x080147fc
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	4423      	add	r3, r4
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	4b98      	ldr	r3, [pc, #608]	; (800d948 <tcp_receive+0xb08>)
 800d6e8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ec:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d6f4:	6938      	ldr	r0, [r7, #16]
 800d6f6:	f7fd fd36 	bl	800b166 <tcp_seg_free>
            while (next &&
 800d6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00e      	beq.n	800d71e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d700:	4b91      	ldr	r3, [pc, #580]	; (800d948 <tcp_receive+0xb08>)
 800d702:	881b      	ldrh	r3, [r3, #0]
 800d704:	461a      	mov	r2, r3
 800d706:	4b91      	ldr	r3, [pc, #580]	; (800d94c <tcp_receive+0xb0c>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	441a      	add	r2, r3
 800d70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d714:	8909      	ldrh	r1, [r1, #8]
 800d716:	440b      	add	r3, r1
 800d718:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	da9a      	bge.n	800d654 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d720:	2b00      	cmp	r3, #0
 800d722:	d059      	beq.n	800d7d8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d724:	4b88      	ldr	r3, [pc, #544]	; (800d948 <tcp_receive+0xb08>)
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	461a      	mov	r2, r3
 800d72a:	4b88      	ldr	r3, [pc, #544]	; (800d94c <tcp_receive+0xb0c>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	441a      	add	r2, r3
 800d730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d738:	2b00      	cmp	r3, #0
 800d73a:	dd4d      	ble.n	800d7d8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	b29a      	uxth	r2, r3
 800d744:	4b81      	ldr	r3, [pc, #516]	; (800d94c <tcp_receive+0xb0c>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	4b80      	ldr	r3, [pc, #512]	; (800d950 <tcp_receive+0xb10>)
 800d750:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d752:	4b7f      	ldr	r3, [pc, #508]	; (800d950 <tcp_receive+0xb10>)
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	899b      	ldrh	r3, [r3, #12]
 800d758:	b29b      	uxth	r3, r3
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fa fed8 	bl	8008510 <lwip_htons>
 800d760:	4603      	mov	r3, r0
 800d762:	b2db      	uxtb	r3, r3
 800d764:	f003 0302 	and.w	r3, r3, #2
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d005      	beq.n	800d778 <tcp_receive+0x938>
                inseg.len -= 1;
 800d76c:	4b78      	ldr	r3, [pc, #480]	; (800d950 <tcp_receive+0xb10>)
 800d76e:	891b      	ldrh	r3, [r3, #8]
 800d770:	3b01      	subs	r3, #1
 800d772:	b29a      	uxth	r2, r3
 800d774:	4b76      	ldr	r3, [pc, #472]	; (800d950 <tcp_receive+0xb10>)
 800d776:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d778:	4b75      	ldr	r3, [pc, #468]	; (800d950 <tcp_receive+0xb10>)
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	4a74      	ldr	r2, [pc, #464]	; (800d950 <tcp_receive+0xb10>)
 800d77e:	8912      	ldrh	r2, [r2, #8]
 800d780:	4611      	mov	r1, r2
 800d782:	4618      	mov	r0, r3
 800d784:	f7fc f8ea 	bl	800995c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d788:	4b71      	ldr	r3, [pc, #452]	; (800d950 <tcp_receive+0xb10>)
 800d78a:	891c      	ldrh	r4, [r3, #8]
 800d78c:	4b70      	ldr	r3, [pc, #448]	; (800d950 <tcp_receive+0xb10>)
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	899b      	ldrh	r3, [r3, #12]
 800d792:	b29b      	uxth	r3, r3
 800d794:	4618      	mov	r0, r3
 800d796:	f7fa febb 	bl	8008510 <lwip_htons>
 800d79a:	4603      	mov	r3, r0
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	f003 0303 	and.w	r3, r3, #3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <tcp_receive+0x96a>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e000      	b.n	800d7ac <tcp_receive+0x96c>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	4423      	add	r3, r4
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	4b65      	ldr	r3, [pc, #404]	; (800d948 <tcp_receive+0xb08>)
 800d7b2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d7b4:	4b64      	ldr	r3, [pc, #400]	; (800d948 <tcp_receive+0xb08>)
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	4b64      	ldr	r3, [pc, #400]	; (800d94c <tcp_receive+0xb0c>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	441a      	add	r2, r3
 800d7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d006      	beq.n	800d7d8 <tcp_receive+0x998>
 800d7ca:	4b62      	ldr	r3, [pc, #392]	; (800d954 <tcp_receive+0xb14>)
 800d7cc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d7d0:	4961      	ldr	r1, [pc, #388]	; (800d958 <tcp_receive+0xb18>)
 800d7d2:	4862      	ldr	r0, [pc, #392]	; (800d95c <tcp_receive+0xb1c>)
 800d7d4:	f004 ff02 	bl	80125dc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7dc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d7de:	4b5a      	ldr	r3, [pc, #360]	; (800d948 <tcp_receive+0xb08>)
 800d7e0:	881b      	ldrh	r3, [r3, #0]
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	4b59      	ldr	r3, [pc, #356]	; (800d94c <tcp_receive+0xb0c>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	441a      	add	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d7f2:	4b55      	ldr	r3, [pc, #340]	; (800d948 <tcp_receive+0xb08>)
 800d7f4:	881b      	ldrh	r3, [r3, #0]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d206      	bcs.n	800d808 <tcp_receive+0x9c8>
 800d7fa:	4b56      	ldr	r3, [pc, #344]	; (800d954 <tcp_receive+0xb14>)
 800d7fc:	f240 6207 	movw	r2, #1543	; 0x607
 800d800:	4957      	ldr	r1, [pc, #348]	; (800d960 <tcp_receive+0xb20>)
 800d802:	4856      	ldr	r0, [pc, #344]	; (800d95c <tcp_receive+0xb1c>)
 800d804:	f004 feea 	bl	80125dc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d80c:	4b4e      	ldr	r3, [pc, #312]	; (800d948 <tcp_receive+0xb08>)
 800d80e:	881b      	ldrh	r3, [r3, #0]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	b29a      	uxth	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7fc ffc5 	bl	800a7a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d81e:	4b4c      	ldr	r3, [pc, #304]	; (800d950 <tcp_receive+0xb10>)
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	891b      	ldrh	r3, [r3, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d006      	beq.n	800d836 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d828:	4b49      	ldr	r3, [pc, #292]	; (800d950 <tcp_receive+0xb10>)
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	4a4d      	ldr	r2, [pc, #308]	; (800d964 <tcp_receive+0xb24>)
 800d82e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d830:	4b47      	ldr	r3, [pc, #284]	; (800d950 <tcp_receive+0xb10>)
 800d832:	2200      	movs	r2, #0
 800d834:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d836:	4b46      	ldr	r3, [pc, #280]	; (800d950 <tcp_receive+0xb10>)
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	899b      	ldrh	r3, [r3, #12]
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fa fe66 	bl	8008510 <lwip_htons>
 800d844:	4603      	mov	r3, r0
 800d846:	b2db      	uxtb	r3, r3
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f000 80b8 	beq.w	800d9c2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d852:	4b45      	ldr	r3, [pc, #276]	; (800d968 <tcp_receive+0xb28>)
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	f043 0320 	orr.w	r3, r3, #32
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	4b42      	ldr	r3, [pc, #264]	; (800d968 <tcp_receive+0xb28>)
 800d85e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d860:	e0af      	b.n	800d9c2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d866:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	4a36      	ldr	r2, [pc, #216]	; (800d94c <tcp_receive+0xb0c>)
 800d872:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	891b      	ldrh	r3, [r3, #8]
 800d878:	461c      	mov	r4, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	899b      	ldrh	r3, [r3, #12]
 800d880:	b29b      	uxth	r3, r3
 800d882:	4618      	mov	r0, r3
 800d884:	f7fa fe44 	bl	8008510 <lwip_htons>
 800d888:	4603      	mov	r3, r0
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	f003 0303 	and.w	r3, r3, #3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <tcp_receive+0xa58>
 800d894:	2301      	movs	r3, #1
 800d896:	e000      	b.n	800d89a <tcp_receive+0xa5a>
 800d898:	2300      	movs	r3, #0
 800d89a:	191a      	adds	r2, r3, r4
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a0:	441a      	add	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8aa:	461c      	mov	r4, r3
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	891b      	ldrh	r3, [r3, #8]
 800d8b0:	461d      	mov	r5, r3
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	899b      	ldrh	r3, [r3, #12]
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7fa fe28 	bl	8008510 <lwip_htons>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	f003 0303 	and.w	r3, r3, #3
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d001      	beq.n	800d8d0 <tcp_receive+0xa90>
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	e000      	b.n	800d8d2 <tcp_receive+0xa92>
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	442b      	add	r3, r5
 800d8d4:	429c      	cmp	r4, r3
 800d8d6:	d206      	bcs.n	800d8e6 <tcp_receive+0xaa6>
 800d8d8:	4b1e      	ldr	r3, [pc, #120]	; (800d954 <tcp_receive+0xb14>)
 800d8da:	f240 622b 	movw	r2, #1579	; 0x62b
 800d8de:	4923      	ldr	r1, [pc, #140]	; (800d96c <tcp_receive+0xb2c>)
 800d8e0:	481e      	ldr	r0, [pc, #120]	; (800d95c <tcp_receive+0xb1c>)
 800d8e2:	f004 fe7b 	bl	80125dc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	891b      	ldrh	r3, [r3, #8]
 800d8ea:	461c      	mov	r4, r3
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	899b      	ldrh	r3, [r3, #12]
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7fa fe0b 	bl	8008510 <lwip_htons>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	f003 0303 	and.w	r3, r3, #3
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <tcp_receive+0xaca>
 800d906:	2301      	movs	r3, #1
 800d908:	e000      	b.n	800d90c <tcp_receive+0xacc>
 800d90a:	2300      	movs	r3, #0
 800d90c:	1919      	adds	r1, r3, r4
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d912:	b28b      	uxth	r3, r1
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	b29a      	uxth	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7fc ff43 	bl	800a7a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	891b      	ldrh	r3, [r3, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d028      	beq.n	800d97e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d92c:	4b0d      	ldr	r3, [pc, #52]	; (800d964 <tcp_receive+0xb24>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d01d      	beq.n	800d970 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d934:	4b0b      	ldr	r3, [pc, #44]	; (800d964 <tcp_receive+0xb24>)
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	4619      	mov	r1, r3
 800d93e:	4610      	mov	r0, r2
 800d940:	f7fc fa60 	bl	8009e04 <pbuf_cat>
 800d944:	e018      	b.n	800d978 <tcp_receive+0xb38>
 800d946:	bf00      	nop
 800d948:	2000d5ce 	.word	0x2000d5ce
 800d94c:	2000d5c4 	.word	0x2000d5c4
 800d950:	2000d5a4 	.word	0x2000d5a4
 800d954:	080147b0 	.word	0x080147b0
 800d958:	08014b90 	.word	0x08014b90
 800d95c:	080147fc 	.word	0x080147fc
 800d960:	08014bcc 	.word	0x08014bcc
 800d964:	2000d5d4 	.word	0x2000d5d4
 800d968:	2000d5d1 	.word	0x2000d5d1
 800d96c:	08014bec 	.word	0x08014bec
            } else {
              recv_data = cseg->p;
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	4a70      	ldr	r2, [pc, #448]	; (800db38 <tcp_receive+0xcf8>)
 800d976:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	2200      	movs	r2, #0
 800d97c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	899b      	ldrh	r3, [r3, #12]
 800d984:	b29b      	uxth	r3, r3
 800d986:	4618      	mov	r0, r3
 800d988:	f7fa fdc2 	bl	8008510 <lwip_htons>
 800d98c:	4603      	mov	r3, r0
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00d      	beq.n	800d9b4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d998:	4b68      	ldr	r3, [pc, #416]	; (800db3c <tcp_receive+0xcfc>)
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	f043 0320 	orr.w	r3, r3, #32
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	4b66      	ldr	r3, [pc, #408]	; (800db3c <tcp_receive+0xcfc>)
 800d9a4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	7d1b      	ldrb	r3, [r3, #20]
 800d9aa:	2b04      	cmp	r3, #4
 800d9ac:	d102      	bne.n	800d9b4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2207      	movs	r2, #7
 800d9b2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d9bc:	68b8      	ldr	r0, [r7, #8]
 800d9be:	f7fd fbd2 	bl	800b166 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d008      	beq.n	800d9dc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	685a      	ldr	r2, [r3, #4]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	f43f af43 	beq.w	800d862 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	8b5b      	ldrh	r3, [r3, #26]
 800d9e0:	f003 0301 	and.w	r3, r3, #1
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d00e      	beq.n	800da06 <tcp_receive+0xbc6>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	8b5b      	ldrh	r3, [r3, #26]
 800d9ec:	f023 0301 	bic.w	r3, r3, #1
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	835a      	strh	r2, [r3, #26]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	8b5b      	ldrh	r3, [r3, #26]
 800d9fa:	f043 0302 	orr.w	r3, r3, #2
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da04:	e188      	b.n	800dd18 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	8b5b      	ldrh	r3, [r3, #26]
 800da0a:	f043 0301 	orr.w	r3, r3, #1
 800da0e:	b29a      	uxth	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da14:	e180      	b.n	800dd18 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d106      	bne.n	800da2c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800da1e:	4848      	ldr	r0, [pc, #288]	; (800db40 <tcp_receive+0xd00>)
 800da20:	f7fd fbba 	bl	800b198 <tcp_seg_copy>
 800da24:	4602      	mov	r2, r0
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	675a      	str	r2, [r3, #116]	; 0x74
 800da2a:	e16d      	b.n	800dd08 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800da2c:	2300      	movs	r3, #0
 800da2e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da34:	63bb      	str	r3, [r7, #56]	; 0x38
 800da36:	e157      	b.n	800dce8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800da38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	4b41      	ldr	r3, [pc, #260]	; (800db44 <tcp_receive+0xd04>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	429a      	cmp	r2, r3
 800da44:	d11d      	bne.n	800da82 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800da46:	4b3e      	ldr	r3, [pc, #248]	; (800db40 <tcp_receive+0xd00>)
 800da48:	891a      	ldrh	r2, [r3, #8]
 800da4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4c:	891b      	ldrh	r3, [r3, #8]
 800da4e:	429a      	cmp	r2, r3
 800da50:	f240 814f 	bls.w	800dcf2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800da54:	483a      	ldr	r0, [pc, #232]	; (800db40 <tcp_receive+0xd00>)
 800da56:	f7fd fb9f 	bl	800b198 <tcp_seg_copy>
 800da5a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	f000 8149 	beq.w	800dcf6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800da64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da66:	2b00      	cmp	r3, #0
 800da68:	d003      	beq.n	800da72 <tcp_receive+0xc32>
                    prev->next = cseg;
 800da6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6c:	697a      	ldr	r2, [r7, #20]
 800da6e:	601a      	str	r2, [r3, #0]
 800da70:	e002      	b.n	800da78 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	697a      	ldr	r2, [r7, #20]
 800da76:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800da78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da7a:	6978      	ldr	r0, [r7, #20]
 800da7c:	f7ff f8dc 	bl	800cc38 <tcp_oos_insert_segment>
                }
                break;
 800da80:	e139      	b.n	800dcf6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800da82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da84:	2b00      	cmp	r3, #0
 800da86:	d117      	bne.n	800dab8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800da88:	4b2e      	ldr	r3, [pc, #184]	; (800db44 <tcp_receive+0xd04>)
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	2b00      	cmp	r3, #0
 800da96:	da57      	bge.n	800db48 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800da98:	4829      	ldr	r0, [pc, #164]	; (800db40 <tcp_receive+0xd00>)
 800da9a:	f7fd fb7d 	bl	800b198 <tcp_seg_copy>
 800da9e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f000 8129 	beq.w	800dcfa <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	69ba      	ldr	r2, [r7, #24]
 800daac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800daae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dab0:	69b8      	ldr	r0, [r7, #24]
 800dab2:	f7ff f8c1 	bl	800cc38 <tcp_oos_insert_segment>
                  }
                  break;
 800dab6:	e120      	b.n	800dcfa <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800dab8:	4b22      	ldr	r3, [pc, #136]	; (800db44 <tcp_receive+0xd04>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	3b01      	subs	r3, #1
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	db3e      	blt.n	800db48 <tcp_receive+0xd08>
 800daca:	4b1e      	ldr	r3, [pc, #120]	; (800db44 <tcp_receive+0xd04>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	3301      	adds	r3, #1
 800dad8:	2b00      	cmp	r3, #0
 800dada:	dc35      	bgt.n	800db48 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dadc:	4818      	ldr	r0, [pc, #96]	; (800db40 <tcp_receive+0xd00>)
 800dade:	f7fd fb5b 	bl	800b198 <tcp_seg_copy>
 800dae2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f000 8109 	beq.w	800dcfe <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800daec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daf4:	8912      	ldrh	r2, [r2, #8]
 800daf6:	441a      	add	r2, r3
 800daf8:	4b12      	ldr	r3, [pc, #72]	; (800db44 <tcp_receive+0xd04>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	2b00      	cmp	r3, #0
 800db00:	dd12      	ble.n	800db28 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800db02:	4b10      	ldr	r3, [pc, #64]	; (800db44 <tcp_receive+0xd04>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	b29a      	uxth	r2, r3
 800db08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	b29a      	uxth	r2, r3
 800db14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db16:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800db18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db1e:	891b      	ldrh	r3, [r3, #8]
 800db20:	4619      	mov	r1, r3
 800db22:	4610      	mov	r0, r2
 800db24:	f7fb ff1a 	bl	800995c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800db28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2a:	69fa      	ldr	r2, [r7, #28]
 800db2c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800db2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db30:	69f8      	ldr	r0, [r7, #28]
 800db32:	f7ff f881 	bl	800cc38 <tcp_oos_insert_segment>
                  }
                  break;
 800db36:	e0e2      	b.n	800dcfe <tcp_receive+0xebe>
 800db38:	2000d5d4 	.word	0x2000d5d4
 800db3c:	2000d5d1 	.word	0x2000d5d1
 800db40:	2000d5a4 	.word	0x2000d5a4
 800db44:	2000d5c4 	.word	0x2000d5c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800db48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800db4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	f040 80c6 	bne.w	800dce2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800db56:	4b80      	ldr	r3, [pc, #512]	; (800dd58 <tcp_receive+0xf18>)
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800db62:	2b00      	cmp	r3, #0
 800db64:	f340 80bd 	ble.w	800dce2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800db68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	899b      	ldrh	r3, [r3, #12]
 800db6e:	b29b      	uxth	r3, r3
 800db70:	4618      	mov	r0, r3
 800db72:	f7fa fccd 	bl	8008510 <lwip_htons>
 800db76:	4603      	mov	r3, r0
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f040 80bf 	bne.w	800dd02 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800db84:	4875      	ldr	r0, [pc, #468]	; (800dd5c <tcp_receive+0xf1c>)
 800db86:	f7fd fb07 	bl	800b198 <tcp_seg_copy>
 800db8a:	4602      	mov	r2, r0
 800db8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800db90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	f000 80b6 	beq.w	800dd06 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800db9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dba2:	8912      	ldrh	r2, [r2, #8]
 800dba4:	441a      	add	r2, r3
 800dba6:	4b6c      	ldr	r3, [pc, #432]	; (800dd58 <tcp_receive+0xf18>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	1ad3      	subs	r3, r2, r3
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	dd12      	ble.n	800dbd6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dbb0:	4b69      	ldr	r3, [pc, #420]	; (800dd58 <tcp_receive+0xf18>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc8:	685a      	ldr	r2, [r3, #4]
 800dbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbcc:	891b      	ldrh	r3, [r3, #8]
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	f7fb fec3 	bl	800995c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dbd6:	4b62      	ldr	r3, [pc, #392]	; (800dd60 <tcp_receive+0xf20>)
 800dbd8:	881b      	ldrh	r3, [r3, #0]
 800dbda:	461a      	mov	r2, r3
 800dbdc:	4b5e      	ldr	r3, [pc, #376]	; (800dd58 <tcp_receive+0xf18>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	441a      	add	r2, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe6:	6879      	ldr	r1, [r7, #4]
 800dbe8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dbea:	440b      	add	r3, r1
 800dbec:	1ad3      	subs	r3, r2, r3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f340 8089 	ble.w	800dd06 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	899b      	ldrh	r3, [r3, #12]
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fa fc86 	bl	8008510 <lwip_htons>
 800dc04:	4603      	mov	r3, r0
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	f003 0301 	and.w	r3, r3, #1
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d022      	beq.n	800dc56 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	899b      	ldrh	r3, [r3, #12]
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	b21b      	sxth	r3, r3
 800dc1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dc20:	b21c      	sxth	r4, r3
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	899b      	ldrh	r3, [r3, #12]
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fa fc6f 	bl	8008510 <lwip_htons>
 800dc32:	4603      	mov	r3, r0
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fa fc66 	bl	8008510 <lwip_htons>
 800dc44:	4603      	mov	r3, r0
 800dc46:	b21b      	sxth	r3, r3
 800dc48:	4323      	orrs	r3, r4
 800dc4a:	b21a      	sxth	r2, r3
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	b292      	uxth	r2, r2
 800dc54:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc60:	4413      	add	r3, r2
 800dc62:	b299      	uxth	r1, r3
 800dc64:	4b3c      	ldr	r3, [pc, #240]	; (800dd58 <tcp_receive+0xf18>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	1a8a      	subs	r2, r1, r2
 800dc70:	b292      	uxth	r2, r2
 800dc72:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	685a      	ldr	r2, [r3, #4]
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	891b      	ldrh	r3, [r3, #8]
 800dc80:	4619      	mov	r1, r3
 800dc82:	4610      	mov	r0, r2
 800dc84:	f7fb fe6a 	bl	800995c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	891c      	ldrh	r4, [r3, #8]
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	899b      	ldrh	r3, [r3, #12]
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fa fc39 	bl	8008510 <lwip_htons>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	f003 0303 	and.w	r3, r3, #3
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <tcp_receive+0xe6e>
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e000      	b.n	800dcb0 <tcp_receive+0xe70>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	4423      	add	r3, r4
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	4b2a      	ldr	r3, [pc, #168]	; (800dd60 <tcp_receive+0xf20>)
 800dcb6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dcb8:	4b29      	ldr	r3, [pc, #164]	; (800dd60 <tcp_receive+0xf20>)
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	4b26      	ldr	r3, [pc, #152]	; (800dd58 <tcp_receive+0xf18>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	441a      	add	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc8:	6879      	ldr	r1, [r7, #4]
 800dcca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dccc:	440b      	add	r3, r1
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d019      	beq.n	800dd06 <tcp_receive+0xec6>
 800dcd2:	4b24      	ldr	r3, [pc, #144]	; (800dd64 <tcp_receive+0xf24>)
 800dcd4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800dcd8:	4923      	ldr	r1, [pc, #140]	; (800dd68 <tcp_receive+0xf28>)
 800dcda:	4824      	ldr	r0, [pc, #144]	; (800dd6c <tcp_receive+0xf2c>)
 800dcdc:	f004 fc7e 	bl	80125dc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dce0:	e011      	b.n	800dd06 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	63bb      	str	r3, [r7, #56]	; 0x38
 800dce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f47f aea4 	bne.w	800da38 <tcp_receive+0xbf8>
 800dcf0:	e00a      	b.n	800dd08 <tcp_receive+0xec8>
                break;
 800dcf2:	bf00      	nop
 800dcf4:	e008      	b.n	800dd08 <tcp_receive+0xec8>
                break;
 800dcf6:	bf00      	nop
 800dcf8:	e006      	b.n	800dd08 <tcp_receive+0xec8>
                  break;
 800dcfa:	bf00      	nop
 800dcfc:	e004      	b.n	800dd08 <tcp_receive+0xec8>
                  break;
 800dcfe:	bf00      	nop
 800dd00:	e002      	b.n	800dd08 <tcp_receive+0xec8>
                  break;
 800dd02:	bf00      	nop
 800dd04:	e000      	b.n	800dd08 <tcp_receive+0xec8>
                break;
 800dd06:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f001 fa33 	bl	800f174 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dd0e:	e003      	b.n	800dd18 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f001 fa2f 	bl	800f174 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dd16:	e01a      	b.n	800dd4e <tcp_receive+0xf0e>
 800dd18:	e019      	b.n	800dd4e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dd1a:	4b0f      	ldr	r3, [pc, #60]	; (800dd58 <tcp_receive+0xf18>)
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	db0a      	blt.n	800dd3e <tcp_receive+0xefe>
 800dd28:	4b0b      	ldr	r3, [pc, #44]	; (800dd58 <tcp_receive+0xf18>)
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	6879      	ldr	r1, [r7, #4]
 800dd32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd34:	440b      	add	r3, r1
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	3301      	adds	r3, #1
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dd07      	ble.n	800dd4e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	8b5b      	ldrh	r3, [r3, #26]
 800dd42:	f043 0302 	orr.w	r3, r3, #2
 800dd46:	b29a      	uxth	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dd4c:	e7ff      	b.n	800dd4e <tcp_receive+0xf0e>
 800dd4e:	bf00      	nop
 800dd50:	3750      	adds	r7, #80	; 0x50
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bdb0      	pop	{r4, r5, r7, pc}
 800dd56:	bf00      	nop
 800dd58:	2000d5c4 	.word	0x2000d5c4
 800dd5c:	2000d5a4 	.word	0x2000d5a4
 800dd60:	2000d5ce 	.word	0x2000d5ce
 800dd64:	080147b0 	.word	0x080147b0
 800dd68:	08014b58 	.word	0x08014b58
 800dd6c:	080147fc 	.word	0x080147fc

0800dd70 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dd76:	4b15      	ldr	r3, [pc, #84]	; (800ddcc <tcp_get_next_optbyte+0x5c>)
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	1c5a      	adds	r2, r3, #1
 800dd7c:	b291      	uxth	r1, r2
 800dd7e:	4a13      	ldr	r2, [pc, #76]	; (800ddcc <tcp_get_next_optbyte+0x5c>)
 800dd80:	8011      	strh	r1, [r2, #0]
 800dd82:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dd84:	4b12      	ldr	r3, [pc, #72]	; (800ddd0 <tcp_get_next_optbyte+0x60>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d004      	beq.n	800dd96 <tcp_get_next_optbyte+0x26>
 800dd8c:	4b11      	ldr	r3, [pc, #68]	; (800ddd4 <tcp_get_next_optbyte+0x64>)
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	88fa      	ldrh	r2, [r7, #6]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d208      	bcs.n	800dda8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dd96:	4b10      	ldr	r3, [pc, #64]	; (800ddd8 <tcp_get_next_optbyte+0x68>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	3314      	adds	r3, #20
 800dd9c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dd9e:	88fb      	ldrh	r3, [r7, #6]
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	4413      	add	r3, r2
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	e00b      	b.n	800ddc0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dda8:	88fb      	ldrh	r3, [r7, #6]
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	4b09      	ldr	r3, [pc, #36]	; (800ddd4 <tcp_get_next_optbyte+0x64>)
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	1ad3      	subs	r3, r2, r3
 800ddb4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ddb6:	4b06      	ldr	r3, [pc, #24]	; (800ddd0 <tcp_get_next_optbyte+0x60>)
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	797b      	ldrb	r3, [r7, #5]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	2000d5c0 	.word	0x2000d5c0
 800ddd0:	2000d5bc 	.word	0x2000d5bc
 800ddd4:	2000d5ba 	.word	0x2000d5ba
 800ddd8:	2000d5b4 	.word	0x2000d5b4

0800dddc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <tcp_parseopt+0x1c>
 800ddea:	4b32      	ldr	r3, [pc, #200]	; (800deb4 <tcp_parseopt+0xd8>)
 800ddec:	f240 727d 	movw	r2, #1917	; 0x77d
 800ddf0:	4931      	ldr	r1, [pc, #196]	; (800deb8 <tcp_parseopt+0xdc>)
 800ddf2:	4832      	ldr	r0, [pc, #200]	; (800debc <tcp_parseopt+0xe0>)
 800ddf4:	f004 fbf2 	bl	80125dc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ddf8:	4b31      	ldr	r3, [pc, #196]	; (800dec0 <tcp_parseopt+0xe4>)
 800ddfa:	881b      	ldrh	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d055      	beq.n	800deac <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800de00:	4b30      	ldr	r3, [pc, #192]	; (800dec4 <tcp_parseopt+0xe8>)
 800de02:	2200      	movs	r2, #0
 800de04:	801a      	strh	r2, [r3, #0]
 800de06:	e045      	b.n	800de94 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800de08:	f7ff ffb2 	bl	800dd70 <tcp_get_next_optbyte>
 800de0c:	4603      	mov	r3, r0
 800de0e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800de10:	7bfb      	ldrb	r3, [r7, #15]
 800de12:	2b02      	cmp	r3, #2
 800de14:	d006      	beq.n	800de24 <tcp_parseopt+0x48>
 800de16:	2b02      	cmp	r3, #2
 800de18:	dc2b      	bgt.n	800de72 <tcp_parseopt+0x96>
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d041      	beq.n	800dea2 <tcp_parseopt+0xc6>
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d127      	bne.n	800de72 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800de22:	e037      	b.n	800de94 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800de24:	f7ff ffa4 	bl	800dd70 <tcp_get_next_optbyte>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b04      	cmp	r3, #4
 800de2c:	d13b      	bne.n	800dea6 <tcp_parseopt+0xca>
 800de2e:	4b25      	ldr	r3, [pc, #148]	; (800dec4 <tcp_parseopt+0xe8>)
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	3301      	adds	r3, #1
 800de34:	4a22      	ldr	r2, [pc, #136]	; (800dec0 <tcp_parseopt+0xe4>)
 800de36:	8812      	ldrh	r2, [r2, #0]
 800de38:	4293      	cmp	r3, r2
 800de3a:	da34      	bge.n	800dea6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800de3c:	f7ff ff98 	bl	800dd70 <tcp_get_next_optbyte>
 800de40:	4603      	mov	r3, r0
 800de42:	b29b      	uxth	r3, r3
 800de44:	021b      	lsls	r3, r3, #8
 800de46:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800de48:	f7ff ff92 	bl	800dd70 <tcp_get_next_optbyte>
 800de4c:	4603      	mov	r3, r0
 800de4e:	b29a      	uxth	r2, r3
 800de50:	89bb      	ldrh	r3, [r7, #12]
 800de52:	4313      	orrs	r3, r2
 800de54:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800de56:	89bb      	ldrh	r3, [r7, #12]
 800de58:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800de5c:	d804      	bhi.n	800de68 <tcp_parseopt+0x8c>
 800de5e:	89bb      	ldrh	r3, [r7, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <tcp_parseopt+0x8c>
 800de64:	89ba      	ldrh	r2, [r7, #12]
 800de66:	e001      	b.n	800de6c <tcp_parseopt+0x90>
 800de68:	f44f 7206 	mov.w	r2, #536	; 0x218
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800de70:	e010      	b.n	800de94 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800de72:	f7ff ff7d 	bl	800dd70 <tcp_get_next_optbyte>
 800de76:	4603      	mov	r3, r0
 800de78:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800de7a:	7afb      	ldrb	r3, [r7, #11]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d914      	bls.n	800deaa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800de80:	7afb      	ldrb	r3, [r7, #11]
 800de82:	b29a      	uxth	r2, r3
 800de84:	4b0f      	ldr	r3, [pc, #60]	; (800dec4 <tcp_parseopt+0xe8>)
 800de86:	881b      	ldrh	r3, [r3, #0]
 800de88:	4413      	add	r3, r2
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	3b02      	subs	r3, #2
 800de8e:	b29a      	uxth	r2, r3
 800de90:	4b0c      	ldr	r3, [pc, #48]	; (800dec4 <tcp_parseopt+0xe8>)
 800de92:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800de94:	4b0b      	ldr	r3, [pc, #44]	; (800dec4 <tcp_parseopt+0xe8>)
 800de96:	881a      	ldrh	r2, [r3, #0]
 800de98:	4b09      	ldr	r3, [pc, #36]	; (800dec0 <tcp_parseopt+0xe4>)
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d3b3      	bcc.n	800de08 <tcp_parseopt+0x2c>
 800dea0:	e004      	b.n	800deac <tcp_parseopt+0xd0>
          return;
 800dea2:	bf00      	nop
 800dea4:	e002      	b.n	800deac <tcp_parseopt+0xd0>
            return;
 800dea6:	bf00      	nop
 800dea8:	e000      	b.n	800deac <tcp_parseopt+0xd0>
            return;
 800deaa:	bf00      	nop
      }
    }
  }
}
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	080147b0 	.word	0x080147b0
 800deb8:	08014c14 	.word	0x08014c14
 800debc:	080147fc 	.word	0x080147fc
 800dec0:	2000d5b8 	.word	0x2000d5b8
 800dec4:	2000d5c0 	.word	0x2000d5c0

0800dec8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800dec8:	b480      	push	{r7}
 800deca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800decc:	4b05      	ldr	r3, [pc, #20]	; (800dee4 <tcp_trigger_input_pcb_close+0x1c>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	f043 0310 	orr.w	r3, r3, #16
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	4b03      	ldr	r3, [pc, #12]	; (800dee4 <tcp_trigger_input_pcb_close+0x1c>)
 800ded8:	701a      	strb	r2, [r3, #0]
}
 800deda:	bf00      	nop
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr
 800dee4:	2000d5d1 	.word	0x2000d5d1

0800dee8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00a      	beq.n	800df10 <tcp_route+0x28>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	7a1b      	ldrb	r3, [r3, #8]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d006      	beq.n	800df10 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	7a1b      	ldrb	r3, [r3, #8]
 800df06:	4618      	mov	r0, r3
 800df08:	f7fb fb20 	bl	800954c <netif_get_by_index>
 800df0c:	4603      	mov	r3, r0
 800df0e:	e003      	b.n	800df18 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f002 fead 	bl	8010c70 <ip4_route>
 800df16:	4603      	mov	r3, r0
  }
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3710      	adds	r7, #16
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800df20:	b590      	push	{r4, r7, lr}
 800df22:	b087      	sub	sp, #28
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	4613      	mov	r3, r2
 800df2e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d105      	bne.n	800df42 <tcp_create_segment+0x22>
 800df36:	4b44      	ldr	r3, [pc, #272]	; (800e048 <tcp_create_segment+0x128>)
 800df38:	22a3      	movs	r2, #163	; 0xa3
 800df3a:	4944      	ldr	r1, [pc, #272]	; (800e04c <tcp_create_segment+0x12c>)
 800df3c:	4844      	ldr	r0, [pc, #272]	; (800e050 <tcp_create_segment+0x130>)
 800df3e:	f004 fb4d 	bl	80125dc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d105      	bne.n	800df54 <tcp_create_segment+0x34>
 800df48:	4b3f      	ldr	r3, [pc, #252]	; (800e048 <tcp_create_segment+0x128>)
 800df4a:	22a4      	movs	r2, #164	; 0xa4
 800df4c:	4941      	ldr	r1, [pc, #260]	; (800e054 <tcp_create_segment+0x134>)
 800df4e:	4840      	ldr	r0, [pc, #256]	; (800e050 <tcp_create_segment+0x130>)
 800df50:	f004 fb44 	bl	80125dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800df54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	f003 0304 	and.w	r3, r3, #4
 800df60:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800df62:	2003      	movs	r0, #3
 800df64:	f7fa ff8a 	bl	8008e7c <memp_malloc>
 800df68:	6138      	str	r0, [r7, #16]
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d104      	bne.n	800df7a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800df70:	68b8      	ldr	r0, [r7, #8]
 800df72:	f7fb fe79 	bl	8009c68 <pbuf_free>
    return NULL;
 800df76:	2300      	movs	r3, #0
 800df78:	e061      	b.n	800e03e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800df80:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	891a      	ldrh	r2, [r3, #8]
 800df92:	7dfb      	ldrb	r3, [r7, #23]
 800df94:	b29b      	uxth	r3, r3
 800df96:	429a      	cmp	r2, r3
 800df98:	d205      	bcs.n	800dfa6 <tcp_create_segment+0x86>
 800df9a:	4b2b      	ldr	r3, [pc, #172]	; (800e048 <tcp_create_segment+0x128>)
 800df9c:	22b0      	movs	r2, #176	; 0xb0
 800df9e:	492e      	ldr	r1, [pc, #184]	; (800e058 <tcp_create_segment+0x138>)
 800dfa0:	482b      	ldr	r0, [pc, #172]	; (800e050 <tcp_create_segment+0x130>)
 800dfa2:	f004 fb1b 	bl	80125dc <iprintf>
  seg->len = p->tot_len - optlen;
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	891a      	ldrh	r2, [r3, #8]
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	1ad3      	subs	r3, r2, r3
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800dfb6:	2114      	movs	r1, #20
 800dfb8:	68b8      	ldr	r0, [r7, #8]
 800dfba:	f7fb fdbf 	bl	8009b3c <pbuf_add_header>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d004      	beq.n	800dfce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800dfc4:	6938      	ldr	r0, [r7, #16]
 800dfc6:	f7fd f8ce 	bl	800b166 <tcp_seg_free>
    return NULL;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	e037      	b.n	800e03e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	8ada      	ldrh	r2, [r3, #22]
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	68dc      	ldr	r4, [r3, #12]
 800dfe0:	4610      	mov	r0, r2
 800dfe2:	f7fa fa95 	bl	8008510 <lwip_htons>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	8b1a      	ldrh	r2, [r3, #24]
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	68dc      	ldr	r4, [r3, #12]
 800dff2:	4610      	mov	r0, r2
 800dff4:	f7fa fa8c 	bl	8008510 <lwip_htons>
 800dff8:	4603      	mov	r3, r0
 800dffa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	68dc      	ldr	r4, [r3, #12]
 800e000:	6838      	ldr	r0, [r7, #0]
 800e002:	f7fa fa9a 	bl	800853a <lwip_htonl>
 800e006:	4603      	mov	r3, r0
 800e008:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
 800e00c:	089b      	lsrs	r3, r3, #2
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	b29b      	uxth	r3, r3
 800e012:	3305      	adds	r3, #5
 800e014:	b29b      	uxth	r3, r3
 800e016:	031b      	lsls	r3, r3, #12
 800e018:	b29a      	uxth	r2, r3
 800e01a:	79fb      	ldrb	r3, [r7, #7]
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	4313      	orrs	r3, r2
 800e020:	b29a      	uxth	r2, r3
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	68dc      	ldr	r4, [r3, #12]
 800e026:	4610      	mov	r0, r2
 800e028:	f7fa fa72 	bl	8008510 <lwip_htons>
 800e02c:	4603      	mov	r3, r0
 800e02e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	2200      	movs	r2, #0
 800e036:	749a      	strb	r2, [r3, #18]
 800e038:	2200      	movs	r2, #0
 800e03a:	74da      	strb	r2, [r3, #19]
  return seg;
 800e03c:	693b      	ldr	r3, [r7, #16]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	371c      	adds	r7, #28
 800e042:	46bd      	mov	sp, r7
 800e044:	bd90      	pop	{r4, r7, pc}
 800e046:	bf00      	nop
 800e048:	08014c30 	.word	0x08014c30
 800e04c:	08014c64 	.word	0x08014c64
 800e050:	08014c84 	.word	0x08014c84
 800e054:	08014cac 	.word	0x08014cac
 800e058:	08014cd0 	.word	0x08014cd0

0800e05c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b08b      	sub	sp, #44	; 0x2c
 800e060:	af02      	add	r7, sp, #8
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e068:	2300      	movs	r3, #0
 800e06a:	61fb      	str	r3, [r7, #28]
 800e06c:	2300      	movs	r3, #0
 800e06e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e070:	2300      	movs	r3, #0
 800e072:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <tcp_split_unsent_seg+0x2c>
 800e07a:	4b95      	ldr	r3, [pc, #596]	; (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e07c:	f240 324b 	movw	r2, #843	; 0x34b
 800e080:	4994      	ldr	r1, [pc, #592]	; (800e2d4 <tcp_split_unsent_seg+0x278>)
 800e082:	4895      	ldr	r0, [pc, #596]	; (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e084:	f004 faaa 	bl	80125dc <iprintf>

  useg = pcb->unsent;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e08c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d102      	bne.n	800e09a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e094:	f04f 33ff 	mov.w	r3, #4294967295
 800e098:	e116      	b.n	800e2c8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e09a:	887b      	ldrh	r3, [r7, #2]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d109      	bne.n	800e0b4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e0a0:	4b8b      	ldr	r3, [pc, #556]	; (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e0a2:	f240 3253 	movw	r2, #851	; 0x353
 800e0a6:	498d      	ldr	r1, [pc, #564]	; (800e2dc <tcp_split_unsent_seg+0x280>)
 800e0a8:	488b      	ldr	r0, [pc, #556]	; (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e0aa:	f004 fa97 	bl	80125dc <iprintf>
    return ERR_VAL;
 800e0ae:	f06f 0305 	mvn.w	r3, #5
 800e0b2:	e109      	b.n	800e2c8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	891b      	ldrh	r3, [r3, #8]
 800e0b8:	887a      	ldrh	r2, [r7, #2]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d301      	bcc.n	800e0c2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	e102      	b.n	800e2c8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0c6:	887a      	ldrh	r2, [r7, #2]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d906      	bls.n	800e0da <tcp_split_unsent_seg+0x7e>
 800e0cc:	4b80      	ldr	r3, [pc, #512]	; (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e0ce:	f240 325b 	movw	r2, #859	; 0x35b
 800e0d2:	4983      	ldr	r1, [pc, #524]	; (800e2e0 <tcp_split_unsent_seg+0x284>)
 800e0d4:	4880      	ldr	r0, [pc, #512]	; (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e0d6:	f004 fa81 	bl	80125dc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	891b      	ldrh	r3, [r3, #8]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d106      	bne.n	800e0f0 <tcp_split_unsent_seg+0x94>
 800e0e2:	4b7b      	ldr	r3, [pc, #492]	; (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e0e4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e0e8:	497e      	ldr	r1, [pc, #504]	; (800e2e4 <tcp_split_unsent_seg+0x288>)
 800e0ea:	487b      	ldr	r0, [pc, #492]	; (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e0ec:	f004 fa76 	bl	80125dc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	7a9b      	ldrb	r3, [r3, #10]
 800e0f4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	f003 0304 	and.w	r3, r3, #4
 800e100:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	891a      	ldrh	r2, [r3, #8]
 800e106:	887b      	ldrh	r3, [r7, #2]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e10c:	7bbb      	ldrb	r3, [r7, #14]
 800e10e:	b29a      	uxth	r2, r3
 800e110:	89bb      	ldrh	r3, [r7, #12]
 800e112:	4413      	add	r3, r2
 800e114:	b29b      	uxth	r3, r3
 800e116:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e11a:	4619      	mov	r1, r3
 800e11c:	2036      	movs	r0, #54	; 0x36
 800e11e:	f7fb fabf 	bl	80096a0 <pbuf_alloc>
 800e122:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	2b00      	cmp	r3, #0
 800e128:	f000 80b7 	beq.w	800e29a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	891a      	ldrh	r2, [r3, #8]
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	891b      	ldrh	r3, [r3, #8]
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	b29a      	uxth	r2, r3
 800e13a:	887b      	ldrh	r3, [r7, #2]
 800e13c:	4413      	add	r3, r2
 800e13e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	6858      	ldr	r0, [r3, #4]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	685a      	ldr	r2, [r3, #4]
 800e148:	7bbb      	ldrb	r3, [r7, #14]
 800e14a:	18d1      	adds	r1, r2, r3
 800e14c:	897b      	ldrh	r3, [r7, #10]
 800e14e:	89ba      	ldrh	r2, [r7, #12]
 800e150:	f7fb ff80 	bl	800a054 <pbuf_copy_partial>
 800e154:	4603      	mov	r3, r0
 800e156:	461a      	mov	r2, r3
 800e158:	89bb      	ldrh	r3, [r7, #12]
 800e15a:	4293      	cmp	r3, r2
 800e15c:	f040 809f 	bne.w	800e29e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	899b      	ldrh	r3, [r3, #12]
 800e166:	b29b      	uxth	r3, r3
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fa f9d1 	bl	8008510 <lwip_htons>
 800e16e:	4603      	mov	r3, r0
 800e170:	b2db      	uxtb	r3, r3
 800e172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e176:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e178:	2300      	movs	r3, #0
 800e17a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e17c:	7efb      	ldrb	r3, [r7, #27]
 800e17e:	f003 0308 	and.w	r3, r3, #8
 800e182:	2b00      	cmp	r3, #0
 800e184:	d007      	beq.n	800e196 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e186:	7efb      	ldrb	r3, [r7, #27]
 800e188:	f023 0308 	bic.w	r3, r3, #8
 800e18c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e18e:	7ebb      	ldrb	r3, [r7, #26]
 800e190:	f043 0308 	orr.w	r3, r3, #8
 800e194:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e196:	7efb      	ldrb	r3, [r7, #27]
 800e198:	f003 0301 	and.w	r3, r3, #1
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d007      	beq.n	800e1b0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e1a0:	7efb      	ldrb	r3, [r7, #27]
 800e1a2:	f023 0301 	bic.w	r3, r3, #1
 800e1a6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e1a8:	7ebb      	ldrb	r3, [r7, #26]
 800e1aa:	f043 0301 	orr.w	r3, r3, #1
 800e1ae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fa f9bf 	bl	800853a <lwip_htonl>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	887b      	ldrh	r3, [r7, #2]
 800e1c0:	18d1      	adds	r1, r2, r3
 800e1c2:	7eba      	ldrb	r2, [r7, #26]
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	6939      	ldr	r1, [r7, #16]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f7ff fea7 	bl	800df20 <tcp_create_segment>
 800e1d2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d063      	beq.n	800e2a2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fb fdd0 	bl	8009d84 <pbuf_clen>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e1ee:	1a9b      	subs	r3, r3, r2
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	6858      	ldr	r0, [r3, #4]
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	891a      	ldrh	r2, [r3, #8]
 800e202:	89bb      	ldrh	r3, [r7, #12]
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	b29b      	uxth	r3, r3
 800e208:	4619      	mov	r1, r3
 800e20a:	f7fb fba7 	bl	800995c <pbuf_realloc>
  useg->len -= remainder;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	891a      	ldrh	r2, [r3, #8]
 800e212:	89bb      	ldrh	r3, [r7, #12]
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	b29a      	uxth	r2, r3
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	899b      	ldrh	r3, [r3, #12]
 800e222:	b29c      	uxth	r4, r3
 800e224:	7efb      	ldrb	r3, [r7, #27]
 800e226:	b29b      	uxth	r3, r3
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fa f971 	bl	8008510 <lwip_htons>
 800e22e:	4603      	mov	r3, r0
 800e230:	461a      	mov	r2, r3
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	4322      	orrs	r2, r4
 800e238:	b292      	uxth	r2, r2
 800e23a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	f7fb fd9f 	bl	8009d84 <pbuf_clen>
 800e246:	4603      	mov	r3, r0
 800e248:	461a      	mov	r2, r3
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e250:	4413      	add	r3, r2
 800e252:	b29a      	uxth	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fb fd90 	bl	8009d84 <pbuf_clen>
 800e264:	4603      	mov	r3, r0
 800e266:	461a      	mov	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e26e:	4413      	add	r3, r2
 800e270:	b29a      	uxth	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	69fa      	ldr	r2, [r7, #28]
 800e284:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d103      	bne.n	800e296 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e296:	2300      	movs	r3, #0
 800e298:	e016      	b.n	800e2c8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e29a:	bf00      	nop
 800e29c:	e002      	b.n	800e2a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e29e:	bf00      	nop
 800e2a0:	e000      	b.n	800e2a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e2a2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d006      	beq.n	800e2b8 <tcp_split_unsent_seg+0x25c>
 800e2aa:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e2ac:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e2b0:	490d      	ldr	r1, [pc, #52]	; (800e2e8 <tcp_split_unsent_seg+0x28c>)
 800e2b2:	4809      	ldr	r0, [pc, #36]	; (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e2b4:	f004 f992 	bl	80125dc <iprintf>
  if (p != NULL) {
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d002      	beq.n	800e2c4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e2be:	6938      	ldr	r0, [r7, #16]
 800e2c0:	f7fb fcd2 	bl	8009c68 <pbuf_free>
  }

  return ERR_MEM;
 800e2c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3724      	adds	r7, #36	; 0x24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd90      	pop	{r4, r7, pc}
 800e2d0:	08014c30 	.word	0x08014c30
 800e2d4:	08014fc4 	.word	0x08014fc4
 800e2d8:	08014c84 	.word	0x08014c84
 800e2dc:	08014fe8 	.word	0x08014fe8
 800e2e0:	0801500c 	.word	0x0801500c
 800e2e4:	0801501c 	.word	0x0801501c
 800e2e8:	0801502c 	.word	0x0801502c

0800e2ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e2ec:	b590      	push	{r4, r7, lr}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d106      	bne.n	800e308 <tcp_send_fin+0x1c>
 800e2fa:	4b21      	ldr	r3, [pc, #132]	; (800e380 <tcp_send_fin+0x94>)
 800e2fc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e300:	4920      	ldr	r1, [pc, #128]	; (800e384 <tcp_send_fin+0x98>)
 800e302:	4821      	ldr	r0, [pc, #132]	; (800e388 <tcp_send_fin+0x9c>)
 800e304:	f004 f96a 	bl	80125dc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d02e      	beq.n	800e36e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e314:	60fb      	str	r3, [r7, #12]
 800e316:	e002      	b.n	800e31e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1f8      	bne.n	800e318 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	899b      	ldrh	r3, [r3, #12]
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fa f8ee 	bl	8008510 <lwip_htons>
 800e334:	4603      	mov	r3, r0
 800e336:	b2db      	uxtb	r3, r3
 800e338:	f003 0307 	and.w	r3, r3, #7
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d116      	bne.n	800e36e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	899b      	ldrh	r3, [r3, #12]
 800e346:	b29c      	uxth	r4, r3
 800e348:	2001      	movs	r0, #1
 800e34a:	f7fa f8e1 	bl	8008510 <lwip_htons>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	4322      	orrs	r2, r4
 800e358:	b292      	uxth	r2, r2
 800e35a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	8b5b      	ldrh	r3, [r3, #26]
 800e360:	f043 0320 	orr.w	r3, r3, #32
 800e364:	b29a      	uxth	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	e004      	b.n	800e378 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e36e:	2101      	movs	r1, #1
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 f80b 	bl	800e38c <tcp_enqueue_flags>
 800e376:	4603      	mov	r3, r0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd90      	pop	{r4, r7, pc}
 800e380:	08014c30 	.word	0x08014c30
 800e384:	08015038 	.word	0x08015038
 800e388:	08014c84 	.word	0x08014c84

0800e38c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08a      	sub	sp, #40	; 0x28
 800e390:	af02      	add	r7, sp, #8
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	460b      	mov	r3, r1
 800e396:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e398:	2300      	movs	r3, #0
 800e39a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	f003 0303 	and.w	r3, r3, #3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d106      	bne.n	800e3b8 <tcp_enqueue_flags+0x2c>
 800e3aa:	4b67      	ldr	r3, [pc, #412]	; (800e548 <tcp_enqueue_flags+0x1bc>)
 800e3ac:	f240 4211 	movw	r2, #1041	; 0x411
 800e3b0:	4966      	ldr	r1, [pc, #408]	; (800e54c <tcp_enqueue_flags+0x1c0>)
 800e3b2:	4867      	ldr	r0, [pc, #412]	; (800e550 <tcp_enqueue_flags+0x1c4>)
 800e3b4:	f004 f912 	bl	80125dc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d106      	bne.n	800e3cc <tcp_enqueue_flags+0x40>
 800e3be:	4b62      	ldr	r3, [pc, #392]	; (800e548 <tcp_enqueue_flags+0x1bc>)
 800e3c0:	f240 4213 	movw	r2, #1043	; 0x413
 800e3c4:	4963      	ldr	r1, [pc, #396]	; (800e554 <tcp_enqueue_flags+0x1c8>)
 800e3c6:	4862      	ldr	r0, [pc, #392]	; (800e550 <tcp_enqueue_flags+0x1c4>)
 800e3c8:	f004 f908 	bl	80125dc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e3cc:	78fb      	ldrb	r3, [r7, #3]
 800e3ce:	f003 0302 	and.w	r3, r3, #2
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d001      	beq.n	800e3da <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e3da:	7ffb      	ldrb	r3, [r7, #31]
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	f003 0304 	and.w	r3, r3, #4
 800e3e4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e3e6:	7dfb      	ldrb	r3, [r7, #23]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	2036      	movs	r0, #54	; 0x36
 800e3f2:	f7fb f955 	bl	80096a0 <pbuf_alloc>
 800e3f6:	6138      	str	r0, [r7, #16]
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d109      	bne.n	800e412 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	8b5b      	ldrh	r3, [r3, #26]
 800e402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e40c:	f04f 33ff 	mov.w	r3, #4294967295
 800e410:	e095      	b.n	800e53e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	895a      	ldrh	r2, [r3, #10]
 800e416:	7dfb      	ldrb	r3, [r7, #23]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d206      	bcs.n	800e42c <tcp_enqueue_flags+0xa0>
 800e41e:	4b4a      	ldr	r3, [pc, #296]	; (800e548 <tcp_enqueue_flags+0x1bc>)
 800e420:	f240 4239 	movw	r2, #1081	; 0x439
 800e424:	494c      	ldr	r1, [pc, #304]	; (800e558 <tcp_enqueue_flags+0x1cc>)
 800e426:	484a      	ldr	r0, [pc, #296]	; (800e550 <tcp_enqueue_flags+0x1c4>)
 800e428:	f004 f8d8 	bl	80125dc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e430:	78fa      	ldrb	r2, [r7, #3]
 800e432:	7ffb      	ldrb	r3, [r7, #31]
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	460b      	mov	r3, r1
 800e438:	6939      	ldr	r1, [r7, #16]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7ff fd70 	bl	800df20 <tcp_create_segment>
 800e440:	60f8      	str	r0, [r7, #12]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d109      	bne.n	800e45c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	8b5b      	ldrh	r3, [r3, #26]
 800e44c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e450:	b29a      	uxth	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e456:	f04f 33ff 	mov.w	r3, #4294967295
 800e45a:	e070      	b.n	800e53e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	f003 0303 	and.w	r3, r3, #3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d006      	beq.n	800e476 <tcp_enqueue_flags+0xea>
 800e468:	4b37      	ldr	r3, [pc, #220]	; (800e548 <tcp_enqueue_flags+0x1bc>)
 800e46a:	f240 4242 	movw	r2, #1090	; 0x442
 800e46e:	493b      	ldr	r1, [pc, #236]	; (800e55c <tcp_enqueue_flags+0x1d0>)
 800e470:	4837      	ldr	r0, [pc, #220]	; (800e550 <tcp_enqueue_flags+0x1c4>)
 800e472:	f004 f8b3 	bl	80125dc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	891b      	ldrh	r3, [r3, #8]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d006      	beq.n	800e48c <tcp_enqueue_flags+0x100>
 800e47e:	4b32      	ldr	r3, [pc, #200]	; (800e548 <tcp_enqueue_flags+0x1bc>)
 800e480:	f240 4243 	movw	r2, #1091	; 0x443
 800e484:	4936      	ldr	r1, [pc, #216]	; (800e560 <tcp_enqueue_flags+0x1d4>)
 800e486:	4832      	ldr	r0, [pc, #200]	; (800e550 <tcp_enqueue_flags+0x1c4>)
 800e488:	f004 f8a8 	bl	80125dc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d103      	bne.n	800e49c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	66da      	str	r2, [r3, #108]	; 0x6c
 800e49a:	e00d      	b.n	800e4b8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4a0:	61bb      	str	r3, [r7, #24]
 800e4a2:	e002      	b.n	800e4aa <tcp_enqueue_flags+0x11e>
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	61bb      	str	r3, [r7, #24]
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1f8      	bne.n	800e4a4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e4c0:	78fb      	ldrb	r3, [r7, #3]
 800e4c2:	f003 0302 	and.w	r3, r3, #2
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d104      	bne.n	800e4d4 <tcp_enqueue_flags+0x148>
 800e4ca:	78fb      	ldrb	r3, [r7, #3]
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d004      	beq.n	800e4de <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4d8:	1c5a      	adds	r2, r3, #1
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e4de:	78fb      	ldrb	r3, [r7, #3]
 800e4e0:	f003 0301 	and.w	r3, r3, #1
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d006      	beq.n	800e4f6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	8b5b      	ldrh	r3, [r3, #26]
 800e4ec:	f043 0320 	orr.w	r3, r3, #32
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fb fc42 	bl	8009d84 <pbuf_clen>
 800e500:	4603      	mov	r3, r0
 800e502:	461a      	mov	r2, r3
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e50a:	4413      	add	r3, r2
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00e      	beq.n	800e53c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10a      	bne.n	800e53c <tcp_enqueue_flags+0x1b0>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d106      	bne.n	800e53c <tcp_enqueue_flags+0x1b0>
 800e52e:	4b06      	ldr	r3, [pc, #24]	; (800e548 <tcp_enqueue_flags+0x1bc>)
 800e530:	f240 4265 	movw	r2, #1125	; 0x465
 800e534:	490b      	ldr	r1, [pc, #44]	; (800e564 <tcp_enqueue_flags+0x1d8>)
 800e536:	4806      	ldr	r0, [pc, #24]	; (800e550 <tcp_enqueue_flags+0x1c4>)
 800e538:	f004 f850 	bl	80125dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3720      	adds	r7, #32
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	08014c30 	.word	0x08014c30
 800e54c:	08015054 	.word	0x08015054
 800e550:	08014c84 	.word	0x08014c84
 800e554:	080150ac 	.word	0x080150ac
 800e558:	080150cc 	.word	0x080150cc
 800e55c:	08015108 	.word	0x08015108
 800e560:	08015120 	.word	0x08015120
 800e564:	0801514c 	.word	0x0801514c

0800e568 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e568:	b5b0      	push	{r4, r5, r7, lr}
 800e56a:	b08a      	sub	sp, #40	; 0x28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d106      	bne.n	800e584 <tcp_output+0x1c>
 800e576:	4b8a      	ldr	r3, [pc, #552]	; (800e7a0 <tcp_output+0x238>)
 800e578:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e57c:	4989      	ldr	r1, [pc, #548]	; (800e7a4 <tcp_output+0x23c>)
 800e57e:	488a      	ldr	r0, [pc, #552]	; (800e7a8 <tcp_output+0x240>)
 800e580:	f004 f82c 	bl	80125dc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	7d1b      	ldrb	r3, [r3, #20]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d106      	bne.n	800e59a <tcp_output+0x32>
 800e58c:	4b84      	ldr	r3, [pc, #528]	; (800e7a0 <tcp_output+0x238>)
 800e58e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e592:	4986      	ldr	r1, [pc, #536]	; (800e7ac <tcp_output+0x244>)
 800e594:	4884      	ldr	r0, [pc, #528]	; (800e7a8 <tcp_output+0x240>)
 800e596:	f004 f821 	bl	80125dc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e59a:	4b85      	ldr	r3, [pc, #532]	; (800e7b0 <tcp_output+0x248>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d101      	bne.n	800e5a8 <tcp_output+0x40>
    return ERR_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	e1ce      	b.n	800e946 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	bf28      	it	cs
 800e5b8:	4613      	movcs	r3, r2
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d10b      	bne.n	800e5e2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	8b5b      	ldrh	r3, [r3, #26]
 800e5ce:	f003 0302 	and.w	r3, r3, #2
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f000 81aa 	beq.w	800e92c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 fdcb 	bl	800f174 <tcp_send_empty_ack>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	e1b1      	b.n	800e946 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e5e2:	6879      	ldr	r1, [r7, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	3304      	adds	r3, #4
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7ff fc7c 	bl	800dee8 <tcp_route>
 800e5f0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d102      	bne.n	800e5fe <tcp_output+0x96>
    return ERR_RTE;
 800e5f8:	f06f 0303 	mvn.w	r3, #3
 800e5fc:	e1a3      	b.n	800e946 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d003      	beq.n	800e60c <tcp_output+0xa4>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d111      	bne.n	800e630 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d002      	beq.n	800e618 <tcp_output+0xb0>
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	3304      	adds	r3, #4
 800e616:	e000      	b.n	800e61a <tcp_output+0xb2>
 800e618:	2300      	movs	r3, #0
 800e61a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d102      	bne.n	800e628 <tcp_output+0xc0>
      return ERR_RTE;
 800e622:	f06f 0303 	mvn.w	r3, #3
 800e626:	e18e      	b.n	800e946 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	4618      	mov	r0, r3
 800e638:	f7f9 ff7f 	bl	800853a <lwip_htonl>
 800e63c:	4602      	mov	r2, r0
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e646:	8912      	ldrh	r2, [r2, #8]
 800e648:	4413      	add	r3, r2
 800e64a:	69ba      	ldr	r2, [r7, #24]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d227      	bcs.n	800e6a0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e656:	461a      	mov	r2, r3
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d114      	bne.n	800e688 <tcp_output+0x120>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e662:	2b00      	cmp	r3, #0
 800e664:	d110      	bne.n	800e688 <tcp_output+0x120>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10b      	bne.n	800e688 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2201      	movs	r2, #1
 800e67c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	8b5b      	ldrh	r3, [r3, #26]
 800e68c:	f003 0302 	and.w	r3, r3, #2
 800e690:	2b00      	cmp	r3, #0
 800e692:	f000 814d 	beq.w	800e930 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 fd6c 	bl	800f174 <tcp_send_empty_ack>
 800e69c:	4603      	mov	r3, r0
 800e69e:	e152      	b.n	800e946 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e6ae:	6a3b      	ldr	r3, [r7, #32]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 811c 	beq.w	800e8ee <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e6b6:	e002      	b.n	800e6be <tcp_output+0x156>
 800e6b8:	6a3b      	ldr	r3, [r7, #32]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	623b      	str	r3, [r7, #32]
 800e6be:	6a3b      	ldr	r3, [r7, #32]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d1f8      	bne.n	800e6b8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e6c6:	e112      	b.n	800e8ee <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	899b      	ldrh	r3, [r3, #12]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7f9 ff1d 	bl	8008510 <lwip_htons>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	f003 0304 	and.w	r3, r3, #4
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d006      	beq.n	800e6f0 <tcp_output+0x188>
 800e6e2:	4b2f      	ldr	r3, [pc, #188]	; (800e7a0 <tcp_output+0x238>)
 800e6e4:	f240 5236 	movw	r2, #1334	; 0x536
 800e6e8:	4932      	ldr	r1, [pc, #200]	; (800e7b4 <tcp_output+0x24c>)
 800e6ea:	482f      	ldr	r0, [pc, #188]	; (800e7a8 <tcp_output+0x240>)
 800e6ec:	f003 ff76 	bl	80125dc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d01f      	beq.n	800e738 <tcp_output+0x1d0>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	8b5b      	ldrh	r3, [r3, #26]
 800e6fc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e700:	2b00      	cmp	r3, #0
 800e702:	d119      	bne.n	800e738 <tcp_output+0x1d0>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00b      	beq.n	800e724 <tcp_output+0x1bc>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d110      	bne.n	800e738 <tcp_output+0x1d0>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e71a:	891a      	ldrh	r2, [r3, #8]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e720:	429a      	cmp	r2, r3
 800e722:	d209      	bcs.n	800e738 <tcp_output+0x1d0>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d004      	beq.n	800e738 <tcp_output+0x1d0>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e734:	2b08      	cmp	r3, #8
 800e736:	d901      	bls.n	800e73c <tcp_output+0x1d4>
 800e738:	2301      	movs	r3, #1
 800e73a:	e000      	b.n	800e73e <tcp_output+0x1d6>
 800e73c:	2300      	movs	r3, #0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d106      	bne.n	800e750 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	8b5b      	ldrh	r3, [r3, #26]
 800e746:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f000 80e4 	beq.w	800e918 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	7d1b      	ldrb	r3, [r3, #20]
 800e754:	2b02      	cmp	r3, #2
 800e756:	d00d      	beq.n	800e774 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	899b      	ldrh	r3, [r3, #12]
 800e75e:	b29c      	uxth	r4, r3
 800e760:	2010      	movs	r0, #16
 800e762:	f7f9 fed5 	bl	8008510 <lwip_htons>
 800e766:	4603      	mov	r3, r0
 800e768:	461a      	mov	r2, r3
 800e76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	4322      	orrs	r2, r4
 800e770:	b292      	uxth	r2, r2
 800e772:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e774:	697a      	ldr	r2, [r7, #20]
 800e776:	6879      	ldr	r1, [r7, #4]
 800e778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e77a:	f000 f909 	bl	800e990 <tcp_output_segment>
 800e77e:	4603      	mov	r3, r0
 800e780:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d016      	beq.n	800e7b8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8b5b      	ldrh	r3, [r3, #26]
 800e78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e792:	b29a      	uxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	835a      	strh	r2, [r3, #26]
      return err;
 800e798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e79c:	e0d3      	b.n	800e946 <tcp_output+0x3de>
 800e79e:	bf00      	nop
 800e7a0:	08014c30 	.word	0x08014c30
 800e7a4:	08015174 	.word	0x08015174
 800e7a8:	08014c84 	.word	0x08014c84
 800e7ac:	0801518c 	.word	0x0801518c
 800e7b0:	2000d5d8 	.word	0x2000d5d8
 800e7b4:	080151b4 	.word	0x080151b4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	7d1b      	ldrb	r3, [r3, #20]
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d006      	beq.n	800e7d6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	8b5b      	ldrh	r3, [r3, #26]
 800e7cc:	f023 0303 	bic.w	r3, r3, #3
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7f9 feac 	bl	800853a <lwip_htonl>
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	891b      	ldrh	r3, [r3, #8]
 800e7e8:	461d      	mov	r5, r3
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	899b      	ldrh	r3, [r3, #12]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7f9 fe8c 	bl	8008510 <lwip_htons>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	f003 0303 	and.w	r3, r3, #3
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <tcp_output+0x2a0>
 800e804:	2301      	movs	r3, #1
 800e806:	e000      	b.n	800e80a <tcp_output+0x2a2>
 800e808:	2300      	movs	r3, #0
 800e80a:	442b      	add	r3, r5
 800e80c:	4423      	add	r3, r4
 800e80e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	da02      	bge.n	800e822 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e824:	891b      	ldrh	r3, [r3, #8]
 800e826:	461c      	mov	r4, r3
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	899b      	ldrh	r3, [r3, #12]
 800e82e:	b29b      	uxth	r3, r3
 800e830:	4618      	mov	r0, r3
 800e832:	f7f9 fe6d 	bl	8008510 <lwip_htons>
 800e836:	4603      	mov	r3, r0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	f003 0303 	and.w	r3, r3, #3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <tcp_output+0x2de>
 800e842:	2301      	movs	r3, #1
 800e844:	e000      	b.n	800e848 <tcp_output+0x2e0>
 800e846:	2300      	movs	r3, #0
 800e848:	4423      	add	r3, r4
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d049      	beq.n	800e8e2 <tcp_output+0x37a>
      seg->next = NULL;
 800e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e850:	2200      	movs	r2, #0
 800e852:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d105      	bne.n	800e868 <tcp_output+0x300>
        pcb->unacked = seg;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e860:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	623b      	str	r3, [r7, #32]
 800e866:	e03f      	b.n	800e8e8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	4618      	mov	r0, r3
 800e870:	f7f9 fe63 	bl	800853a <lwip_htonl>
 800e874:	4604      	mov	r4, r0
 800e876:	6a3b      	ldr	r3, [r7, #32]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7f9 fe5c 	bl	800853a <lwip_htonl>
 800e882:	4603      	mov	r3, r0
 800e884:	1ae3      	subs	r3, r4, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	da24      	bge.n	800e8d4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3370      	adds	r3, #112	; 0x70
 800e88e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e890:	e002      	b.n	800e898 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d011      	beq.n	800e8c4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7f9 fe46 	bl	800853a <lwip_htonl>
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7f9 fe3f 	bl	800853a <lwip_htonl>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	dbe6      	blt.n	800e892 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8d0:	601a      	str	r2, [r3, #0]
 800e8d2:	e009      	b.n	800e8e8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8d8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e8da:	6a3b      	ldr	r3, [r7, #32]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	623b      	str	r3, [r7, #32]
 800e8e0:	e002      	b.n	800e8e8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e8e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8e4:	f7fc fc3f 	bl	800b166 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d012      	beq.n	800e91a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7f9 fe1d 	bl	800853a <lwip_htonl>
 800e900:	4602      	mov	r2, r0
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e906:	1ad3      	subs	r3, r2, r3
 800e908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e90a:	8912      	ldrh	r2, [r2, #8]
 800e90c:	4413      	add	r3, r2
  while (seg != NULL &&
 800e90e:	69ba      	ldr	r2, [r7, #24]
 800e910:	429a      	cmp	r2, r3
 800e912:	f4bf aed9 	bcs.w	800e6c8 <tcp_output+0x160>
 800e916:	e000      	b.n	800e91a <tcp_output+0x3b2>
      break;
 800e918:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d108      	bne.n	800e934 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e92a:	e004      	b.n	800e936 <tcp_output+0x3ce>
    goto output_done;
 800e92c:	bf00      	nop
 800e92e:	e002      	b.n	800e936 <tcp_output+0x3ce>
    goto output_done;
 800e930:	bf00      	nop
 800e932:	e000      	b.n	800e936 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e934:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	8b5b      	ldrh	r3, [r3, #26]
 800e93a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e93e:	b29a      	uxth	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3728      	adds	r7, #40	; 0x28
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bdb0      	pop	{r4, r5, r7, pc}
 800e94e:	bf00      	nop

0800e950 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d106      	bne.n	800e96c <tcp_output_segment_busy+0x1c>
 800e95e:	4b09      	ldr	r3, [pc, #36]	; (800e984 <tcp_output_segment_busy+0x34>)
 800e960:	f240 529a 	movw	r2, #1434	; 0x59a
 800e964:	4908      	ldr	r1, [pc, #32]	; (800e988 <tcp_output_segment_busy+0x38>)
 800e966:	4809      	ldr	r0, [pc, #36]	; (800e98c <tcp_output_segment_busy+0x3c>)
 800e968:	f003 fe38 	bl	80125dc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	7b9b      	ldrb	r3, [r3, #14]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d001      	beq.n	800e97a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e976:	2301      	movs	r3, #1
 800e978:	e000      	b.n	800e97c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	08014c30 	.word	0x08014c30
 800e988:	080151cc 	.word	0x080151cc
 800e98c:	08014c84 	.word	0x08014c84

0800e990 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e990:	b5b0      	push	{r4, r5, r7, lr}
 800e992:	b08c      	sub	sp, #48	; 0x30
 800e994:	af04      	add	r7, sp, #16
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <tcp_output_segment+0x20>
 800e9a2:	4b63      	ldr	r3, [pc, #396]	; (800eb30 <tcp_output_segment+0x1a0>)
 800e9a4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e9a8:	4962      	ldr	r1, [pc, #392]	; (800eb34 <tcp_output_segment+0x1a4>)
 800e9aa:	4863      	ldr	r0, [pc, #396]	; (800eb38 <tcp_output_segment+0x1a8>)
 800e9ac:	f003 fe16 	bl	80125dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d106      	bne.n	800e9c4 <tcp_output_segment+0x34>
 800e9b6:	4b5e      	ldr	r3, [pc, #376]	; (800eb30 <tcp_output_segment+0x1a0>)
 800e9b8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e9bc:	495f      	ldr	r1, [pc, #380]	; (800eb3c <tcp_output_segment+0x1ac>)
 800e9be:	485e      	ldr	r0, [pc, #376]	; (800eb38 <tcp_output_segment+0x1a8>)
 800e9c0:	f003 fe0c 	bl	80125dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d106      	bne.n	800e9d8 <tcp_output_segment+0x48>
 800e9ca:	4b59      	ldr	r3, [pc, #356]	; (800eb30 <tcp_output_segment+0x1a0>)
 800e9cc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e9d0:	495b      	ldr	r1, [pc, #364]	; (800eb40 <tcp_output_segment+0x1b0>)
 800e9d2:	4859      	ldr	r0, [pc, #356]	; (800eb38 <tcp_output_segment+0x1a8>)
 800e9d4:	f003 fe02 	bl	80125dc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7ff ffb9 	bl	800e950 <tcp_output_segment_busy>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	e09f      	b.n	800eb28 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	68dc      	ldr	r4, [r3, #12]
 800e9f0:	4610      	mov	r0, r2
 800e9f2:	f7f9 fda2 	bl	800853a <lwip_htonl>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	68dc      	ldr	r4, [r3, #12]
 800ea02:	4610      	mov	r0, r2
 800ea04:	f7f9 fd84 	bl	8008510 <lwip_htons>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ea14:	441a      	add	r2, r3
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	3314      	adds	r3, #20
 800ea20:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	7a9b      	ldrb	r3, [r3, #10]
 800ea26:	f003 0301 	and.w	r3, r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d015      	beq.n	800ea5a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	3304      	adds	r3, #4
 800ea32:	461a      	mov	r2, r3
 800ea34:	6879      	ldr	r1, [r7, #4]
 800ea36:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ea3a:	f7fc fe8b 	bl	800b754 <tcp_eff_send_mss_netif>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ea42:	8b7b      	ldrh	r3, [r7, #26]
 800ea44:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f9 fd76 	bl	800853a <lwip_htonl>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	3304      	adds	r3, #4
 800ea58:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	da02      	bge.n	800ea6a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	2200      	movs	r2, #0
 800ea68:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d10c      	bne.n	800ea8c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ea72:	4b34      	ldr	r3, [pc, #208]	; (800eb44 <tcp_output_segment+0x1b4>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7f9 fd5a 	bl	800853a <lwip_htonl>
 800ea86:	4602      	mov	r2, r0
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	68da      	ldr	r2, [r3, #12]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	8959      	ldrh	r1, [r3, #10]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	8b3a      	ldrh	r2, [r7, #24]
 800eaa6:	1a8a      	subs	r2, r1, r2
 800eaa8:	b292      	uxth	r2, r2
 800eaaa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	8919      	ldrh	r1, [r3, #8]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	8b3a      	ldrh	r2, [r7, #24]
 800eab8:	1a8a      	subs	r2, r1, r2
 800eaba:	b292      	uxth	r2, r2
 800eabc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	68d2      	ldr	r2, [r2, #12]
 800eac6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	741a      	strb	r2, [r3, #16]
 800ead0:	2200      	movs	r2, #0
 800ead2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	f103 0214 	add.w	r2, r3, #20
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	7a9b      	ldrb	r3, [r3, #10]
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	f003 0304 	and.w	r3, r3, #4
 800eae6:	4413      	add	r3, r2
 800eae8:	69fa      	ldr	r2, [r7, #28]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d006      	beq.n	800eafc <tcp_output_segment+0x16c>
 800eaee:	4b10      	ldr	r3, [pc, #64]	; (800eb30 <tcp_output_segment+0x1a0>)
 800eaf0:	f240 621c 	movw	r2, #1564	; 0x61c
 800eaf4:	4914      	ldr	r1, [pc, #80]	; (800eb48 <tcp_output_segment+0x1b8>)
 800eaf6:	4810      	ldr	r0, [pc, #64]	; (800eb38 <tcp_output_segment+0x1a8>)
 800eaf8:	f003 fd70 	bl	80125dc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6858      	ldr	r0, [r3, #4]
 800eb00:	68b9      	ldr	r1, [r7, #8]
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	1d1c      	adds	r4, r3, #4
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	7add      	ldrb	r5, [r3, #11]
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	7a9b      	ldrb	r3, [r3, #10]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	9202      	str	r2, [sp, #8]
 800eb12:	2206      	movs	r2, #6
 800eb14:	9201      	str	r2, [sp, #4]
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	462b      	mov	r3, r5
 800eb1a:	4622      	mov	r2, r4
 800eb1c:	f002 fa66 	bl	8010fec <ip4_output_if>
 800eb20:	4603      	mov	r3, r0
 800eb22:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800eb24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3720      	adds	r7, #32
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bdb0      	pop	{r4, r5, r7, pc}
 800eb30:	08014c30 	.word	0x08014c30
 800eb34:	080151f4 	.word	0x080151f4
 800eb38:	08014c84 	.word	0x08014c84
 800eb3c:	08015214 	.word	0x08015214
 800eb40:	08015234 	.word	0x08015234
 800eb44:	2000d58c 	.word	0x2000d58c
 800eb48:	08015258 	.word	0x08015258

0800eb4c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800eb4c:	b5b0      	push	{r4, r5, r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d106      	bne.n	800eb68 <tcp_rexmit_rto_prepare+0x1c>
 800eb5a:	4b31      	ldr	r3, [pc, #196]	; (800ec20 <tcp_rexmit_rto_prepare+0xd4>)
 800eb5c:	f240 6263 	movw	r2, #1635	; 0x663
 800eb60:	4930      	ldr	r1, [pc, #192]	; (800ec24 <tcp_rexmit_rto_prepare+0xd8>)
 800eb62:	4831      	ldr	r0, [pc, #196]	; (800ec28 <tcp_rexmit_rto_prepare+0xdc>)
 800eb64:	f003 fd3a 	bl	80125dc <iprintf>

  if (pcb->unacked == NULL) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d102      	bne.n	800eb76 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800eb70:	f06f 0305 	mvn.w	r3, #5
 800eb74:	e050      	b.n	800ec18 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb7a:	60fb      	str	r3, [r7, #12]
 800eb7c:	e00b      	b.n	800eb96 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f7ff fee6 	bl	800e950 <tcp_output_segment_busy>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d002      	beq.n	800eb90 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800eb8a:	f06f 0305 	mvn.w	r3, #5
 800eb8e:	e043      	b.n	800ec18 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	60fb      	str	r3, [r7, #12]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1ef      	bne.n	800eb7e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f7ff fed6 	bl	800e950 <tcp_output_segment_busy>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d002      	beq.n	800ebb0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ebaa:	f06f 0305 	mvn.w	r3, #5
 800ebae:	e033      	b.n	800ec18 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	8b5b      	ldrh	r3, [r3, #26]
 800ebca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f9 fcad 	bl	800853a <lwip_htonl>
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	891b      	ldrh	r3, [r3, #8]
 800ebe6:	461d      	mov	r5, r3
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	899b      	ldrh	r3, [r3, #12]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7f9 fc8d 	bl	8008510 <lwip_htons>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	f003 0303 	and.w	r3, r3, #3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d001      	beq.n	800ec06 <tcp_rexmit_rto_prepare+0xba>
 800ec02:	2301      	movs	r3, #1
 800ec04:	e000      	b.n	800ec08 <tcp_rexmit_rto_prepare+0xbc>
 800ec06:	2300      	movs	r3, #0
 800ec08:	442b      	add	r3, r5
 800ec0a:	18e2      	adds	r2, r4, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ec16:	2300      	movs	r3, #0
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bdb0      	pop	{r4, r5, r7, pc}
 800ec20:	08014c30 	.word	0x08014c30
 800ec24:	0801526c 	.word	0x0801526c
 800ec28:	08014c84 	.word	0x08014c84

0800ec2c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d106      	bne.n	800ec48 <tcp_rexmit_rto_commit+0x1c>
 800ec3a:	4b0d      	ldr	r3, [pc, #52]	; (800ec70 <tcp_rexmit_rto_commit+0x44>)
 800ec3c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ec40:	490c      	ldr	r1, [pc, #48]	; (800ec74 <tcp_rexmit_rto_commit+0x48>)
 800ec42:	480d      	ldr	r0, [pc, #52]	; (800ec78 <tcp_rexmit_rto_commit+0x4c>)
 800ec44:	f003 fcca 	bl	80125dc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec4e:	2bff      	cmp	r3, #255	; 0xff
 800ec50:	d007      	beq.n	800ec62 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec58:	3301      	adds	r3, #1
 800ec5a:	b2da      	uxtb	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7ff fc80 	bl	800e568 <tcp_output>
}
 800ec68:	bf00      	nop
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	08014c30 	.word	0x08014c30
 800ec74:	08015290 	.word	0x08015290
 800ec78:	08014c84 	.word	0x08014c84

0800ec7c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d106      	bne.n	800ec98 <tcp_rexmit_rto+0x1c>
 800ec8a:	4b0a      	ldr	r3, [pc, #40]	; (800ecb4 <tcp_rexmit_rto+0x38>)
 800ec8c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ec90:	4909      	ldr	r1, [pc, #36]	; (800ecb8 <tcp_rexmit_rto+0x3c>)
 800ec92:	480a      	ldr	r0, [pc, #40]	; (800ecbc <tcp_rexmit_rto+0x40>)
 800ec94:	f003 fca2 	bl	80125dc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7ff ff57 	bl	800eb4c <tcp_rexmit_rto_prepare>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d102      	bne.n	800ecaa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7ff ffc1 	bl	800ec2c <tcp_rexmit_rto_commit>
  }
}
 800ecaa:	bf00      	nop
 800ecac:	3708      	adds	r7, #8
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	08014c30 	.word	0x08014c30
 800ecb8:	080152b4 	.word	0x080152b4
 800ecbc:	08014c84 	.word	0x08014c84

0800ecc0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ecc0:	b590      	push	{r4, r7, lr}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d106      	bne.n	800ecdc <tcp_rexmit+0x1c>
 800ecce:	4b2f      	ldr	r3, [pc, #188]	; (800ed8c <tcp_rexmit+0xcc>)
 800ecd0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ecd4:	492e      	ldr	r1, [pc, #184]	; (800ed90 <tcp_rexmit+0xd0>)
 800ecd6:	482f      	ldr	r0, [pc, #188]	; (800ed94 <tcp_rexmit+0xd4>)
 800ecd8:	f003 fc80 	bl	80125dc <iprintf>

  if (pcb->unacked == NULL) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d102      	bne.n	800ecea <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ece4:	f06f 0305 	mvn.w	r3, #5
 800ece8:	e04c      	b.n	800ed84 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ecf0:	68b8      	ldr	r0, [r7, #8]
 800ecf2:	f7ff fe2d 	bl	800e950 <tcp_output_segment_busy>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ecfc:	f06f 0305 	mvn.w	r3, #5
 800ed00:	e040      	b.n	800ed84 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	336c      	adds	r3, #108	; 0x6c
 800ed0e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed10:	e002      	b.n	800ed18 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d011      	beq.n	800ed44 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7f9 fc06 	bl	800853a <lwip_htonl>
 800ed2e:	4604      	mov	r4, r0
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7f9 fbff 	bl	800853a <lwip_htonl>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	dbe6      	blt.n	800ed12 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d103      	bne.n	800ed62 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed68:	2bff      	cmp	r3, #255	; 0xff
 800ed6a:	d007      	beq.n	800ed7c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed72:	3301      	adds	r3, #1
 800ed74:	b2da      	uxtb	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ed82:	2300      	movs	r3, #0
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3714      	adds	r7, #20
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd90      	pop	{r4, r7, pc}
 800ed8c:	08014c30 	.word	0x08014c30
 800ed90:	080152d0 	.word	0x080152d0
 800ed94:	08014c84 	.word	0x08014c84

0800ed98 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d106      	bne.n	800edb4 <tcp_rexmit_fast+0x1c>
 800eda6:	4b2a      	ldr	r3, [pc, #168]	; (800ee50 <tcp_rexmit_fast+0xb8>)
 800eda8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800edac:	4929      	ldr	r1, [pc, #164]	; (800ee54 <tcp_rexmit_fast+0xbc>)
 800edae:	482a      	ldr	r0, [pc, #168]	; (800ee58 <tcp_rexmit_fast+0xc0>)
 800edb0:	f003 fc14 	bl	80125dc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d045      	beq.n	800ee48 <tcp_rexmit_fast+0xb0>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	8b5b      	ldrh	r3, [r3, #26]
 800edc0:	f003 0304 	and.w	r3, r3, #4
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d13f      	bne.n	800ee48 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7ff ff79 	bl	800ecc0 <tcp_rexmit>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d139      	bne.n	800ee48 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ede0:	4293      	cmp	r3, r2
 800ede2:	bf28      	it	cs
 800ede4:	4613      	movcs	r3, r2
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	2b00      	cmp	r3, #0
 800edea:	da00      	bge.n	800edee <tcp_rexmit_fast+0x56>
 800edec:	3301      	adds	r3, #1
 800edee:	105b      	asrs	r3, r3, #1
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800edfe:	461a      	mov	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee04:	005b      	lsls	r3, r3, #1
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d206      	bcs.n	800ee18 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee0e:	005b      	lsls	r3, r3, #1
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee22:	4619      	mov	r1, r3
 800ee24:	0049      	lsls	r1, r1, #1
 800ee26:	440b      	add	r3, r1
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	4413      	add	r3, r2
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	8b5b      	ldrh	r3, [r3, #26]
 800ee38:	f043 0304 	orr.w	r3, r3, #4
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ee48:	bf00      	nop
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	08014c30 	.word	0x08014c30
 800ee54:	080152e8 	.word	0x080152e8
 800ee58:	08014c84 	.word	0x08014c84

0800ee5c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	607b      	str	r3, [r7, #4]
 800ee66:	460b      	mov	r3, r1
 800ee68:	817b      	strh	r3, [r7, #10]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ee6e:	897a      	ldrh	r2, [r7, #10]
 800ee70:	893b      	ldrh	r3, [r7, #8]
 800ee72:	4413      	add	r3, r2
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	3314      	adds	r3, #20
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee7e:	4619      	mov	r1, r3
 800ee80:	2022      	movs	r0, #34	; 0x22
 800ee82:	f7fa fc0d 	bl	80096a0 <pbuf_alloc>
 800ee86:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d04d      	beq.n	800ef2a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ee8e:	897b      	ldrh	r3, [r7, #10]
 800ee90:	3313      	adds	r3, #19
 800ee92:	697a      	ldr	r2, [r7, #20]
 800ee94:	8952      	ldrh	r2, [r2, #10]
 800ee96:	4293      	cmp	r3, r2
 800ee98:	db06      	blt.n	800eea8 <tcp_output_alloc_header_common+0x4c>
 800ee9a:	4b26      	ldr	r3, [pc, #152]	; (800ef34 <tcp_output_alloc_header_common+0xd8>)
 800ee9c:	f240 7223 	movw	r2, #1827	; 0x723
 800eea0:	4925      	ldr	r1, [pc, #148]	; (800ef38 <tcp_output_alloc_header_common+0xdc>)
 800eea2:	4826      	ldr	r0, [pc, #152]	; (800ef3c <tcp_output_alloc_header_common+0xe0>)
 800eea4:	f003 fb9a 	bl	80125dc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800eeae:	8c3b      	ldrh	r3, [r7, #32]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7f9 fb2d 	bl	8008510 <lwip_htons>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	461a      	mov	r2, r3
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800eebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7f9 fb25 	bl	8008510 <lwip_htons>
 800eec6:	4603      	mov	r3, r0
 800eec8:	461a      	mov	r2, r3
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f7f9 fb30 	bl	800853a <lwip_htonl>
 800eeda:	4602      	mov	r2, r0
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800eee0:	897b      	ldrh	r3, [r7, #10]
 800eee2:	089b      	lsrs	r3, r3, #2
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	3305      	adds	r3, #5
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	031b      	lsls	r3, r3, #12
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	4313      	orrs	r3, r2
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7f9 fb09 	bl	8008510 <lwip_htons>
 800eefe:	4603      	mov	r3, r0
 800ef00:	461a      	mov	r2, r3
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ef06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7f9 fb01 	bl	8008510 <lwip_htons>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	461a      	mov	r2, r3
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	741a      	strb	r2, [r3, #16]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	2200      	movs	r2, #0
 800ef24:	749a      	strb	r2, [r3, #18]
 800ef26:	2200      	movs	r2, #0
 800ef28:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ef2a:	697b      	ldr	r3, [r7, #20]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3718      	adds	r7, #24
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	08014c30 	.word	0x08014c30
 800ef38:	08015308 	.word	0x08015308
 800ef3c:	08014c84 	.word	0x08014c84

0800ef40 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ef40:	b5b0      	push	{r4, r5, r7, lr}
 800ef42:	b08a      	sub	sp, #40	; 0x28
 800ef44:	af04      	add	r7, sp, #16
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	607b      	str	r3, [r7, #4]
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	817b      	strh	r3, [r7, #10]
 800ef4e:	4613      	mov	r3, r2
 800ef50:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d106      	bne.n	800ef66 <tcp_output_alloc_header+0x26>
 800ef58:	4b15      	ldr	r3, [pc, #84]	; (800efb0 <tcp_output_alloc_header+0x70>)
 800ef5a:	f240 7242 	movw	r2, #1858	; 0x742
 800ef5e:	4915      	ldr	r1, [pc, #84]	; (800efb4 <tcp_output_alloc_header+0x74>)
 800ef60:	4815      	ldr	r0, [pc, #84]	; (800efb8 <tcp_output_alloc_header+0x78>)
 800ef62:	f003 fb3b 	bl	80125dc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	8adb      	ldrh	r3, [r3, #22]
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	8b12      	ldrh	r2, [r2, #24]
 800ef72:	68f9      	ldr	r1, [r7, #12]
 800ef74:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ef76:	893d      	ldrh	r5, [r7, #8]
 800ef78:	897c      	ldrh	r4, [r7, #10]
 800ef7a:	9103      	str	r1, [sp, #12]
 800ef7c:	2110      	movs	r1, #16
 800ef7e:	9102      	str	r1, [sp, #8]
 800ef80:	9201      	str	r2, [sp, #4]
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	462a      	mov	r2, r5
 800ef88:	4621      	mov	r1, r4
 800ef8a:	f7ff ff67 	bl	800ee5c <tcp_output_alloc_header_common>
 800ef8e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d006      	beq.n	800efa4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ef9e:	441a      	add	r2, r3
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800efa4:	697b      	ldr	r3, [r7, #20]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3718      	adds	r7, #24
 800efaa:	46bd      	mov	sp, r7
 800efac:	bdb0      	pop	{r4, r5, r7, pc}
 800efae:	bf00      	nop
 800efb0:	08014c30 	.word	0x08014c30
 800efb4:	08015338 	.word	0x08015338
 800efb8:	08014c84 	.word	0x08014c84

0800efbc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b088      	sub	sp, #32
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	4611      	mov	r1, r2
 800efc8:	461a      	mov	r2, r3
 800efca:	460b      	mov	r3, r1
 800efcc:	71fb      	strb	r3, [r7, #7]
 800efce:	4613      	mov	r3, r2
 800efd0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800efd2:	2300      	movs	r3, #0
 800efd4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d106      	bne.n	800efea <tcp_output_fill_options+0x2e>
 800efdc:	4b13      	ldr	r3, [pc, #76]	; (800f02c <tcp_output_fill_options+0x70>)
 800efde:	f240 7256 	movw	r2, #1878	; 0x756
 800efe2:	4913      	ldr	r1, [pc, #76]	; (800f030 <tcp_output_fill_options+0x74>)
 800efe4:	4813      	ldr	r0, [pc, #76]	; (800f034 <tcp_output_fill_options+0x78>)
 800efe6:	f003 faf9 	bl	80125dc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	3314      	adds	r3, #20
 800eff4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	f103 0214 	add.w	r2, r3, #20
 800effc:	8bfb      	ldrh	r3, [r7, #30]
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4619      	mov	r1, r3
 800f002:	79fb      	ldrb	r3, [r7, #7]
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	f003 0304 	and.w	r3, r3, #4
 800f00a:	440b      	add	r3, r1
 800f00c:	4413      	add	r3, r2
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	429a      	cmp	r2, r3
 800f012:	d006      	beq.n	800f022 <tcp_output_fill_options+0x66>
 800f014:	4b05      	ldr	r3, [pc, #20]	; (800f02c <tcp_output_fill_options+0x70>)
 800f016:	f240 7275 	movw	r2, #1909	; 0x775
 800f01a:	4907      	ldr	r1, [pc, #28]	; (800f038 <tcp_output_fill_options+0x7c>)
 800f01c:	4805      	ldr	r0, [pc, #20]	; (800f034 <tcp_output_fill_options+0x78>)
 800f01e:	f003 fadd 	bl	80125dc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f022:	bf00      	nop
 800f024:	3720      	adds	r7, #32
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	08014c30 	.word	0x08014c30
 800f030:	08015360 	.word	0x08015360
 800f034:	08014c84 	.word	0x08014c84
 800f038:	08015258 	.word	0x08015258

0800f03c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b08a      	sub	sp, #40	; 0x28
 800f040:	af04      	add	r7, sp, #16
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	607a      	str	r2, [r7, #4]
 800f048:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d106      	bne.n	800f05e <tcp_output_control_segment+0x22>
 800f050:	4b1c      	ldr	r3, [pc, #112]	; (800f0c4 <tcp_output_control_segment+0x88>)
 800f052:	f240 7287 	movw	r2, #1927	; 0x787
 800f056:	491c      	ldr	r1, [pc, #112]	; (800f0c8 <tcp_output_control_segment+0x8c>)
 800f058:	481c      	ldr	r0, [pc, #112]	; (800f0cc <tcp_output_control_segment+0x90>)
 800f05a:	f003 fabf 	bl	80125dc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f05e:	683a      	ldr	r2, [r7, #0]
 800f060:	6879      	ldr	r1, [r7, #4]
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	f7fe ff40 	bl	800dee8 <tcp_route>
 800f068:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d102      	bne.n	800f076 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f070:	23fc      	movs	r3, #252	; 0xfc
 800f072:	75fb      	strb	r3, [r7, #23]
 800f074:	e01c      	b.n	800f0b0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d006      	beq.n	800f08a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	7adb      	ldrb	r3, [r3, #11]
 800f080:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	7a9b      	ldrb	r3, [r3, #10]
 800f086:	757b      	strb	r3, [r7, #21]
 800f088:	e003      	b.n	800f092 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f08a:	23ff      	movs	r3, #255	; 0xff
 800f08c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f08e:	2300      	movs	r3, #0
 800f090:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f092:	7dba      	ldrb	r2, [r7, #22]
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	9302      	str	r3, [sp, #8]
 800f098:	2306      	movs	r3, #6
 800f09a:	9301      	str	r3, [sp, #4]
 800f09c:	7d7b      	ldrb	r3, [r7, #21]
 800f09e:	9300      	str	r3, [sp, #0]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	6879      	ldr	r1, [r7, #4]
 800f0a6:	68b8      	ldr	r0, [r7, #8]
 800f0a8:	f001 ffa0 	bl	8010fec <ip4_output_if>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f0b0:	68b8      	ldr	r0, [r7, #8]
 800f0b2:	f7fa fdd9 	bl	8009c68 <pbuf_free>
  return err;
 800f0b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	08014c30 	.word	0x08014c30
 800f0c8:	08015388 	.word	0x08015388
 800f0cc:	08014c84 	.word	0x08014c84

0800f0d0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f0d0:	b590      	push	{r4, r7, lr}
 800f0d2:	b08b      	sub	sp, #44	; 0x2c
 800f0d4:	af04      	add	r7, sp, #16
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
 800f0dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d106      	bne.n	800f0f2 <tcp_rst+0x22>
 800f0e4:	4b1f      	ldr	r3, [pc, #124]	; (800f164 <tcp_rst+0x94>)
 800f0e6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f0ea:	491f      	ldr	r1, [pc, #124]	; (800f168 <tcp_rst+0x98>)
 800f0ec:	481f      	ldr	r0, [pc, #124]	; (800f16c <tcp_rst+0x9c>)
 800f0ee:	f003 fa75 	bl	80125dc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d106      	bne.n	800f106 <tcp_rst+0x36>
 800f0f8:	4b1a      	ldr	r3, [pc, #104]	; (800f164 <tcp_rst+0x94>)
 800f0fa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f0fe:	491c      	ldr	r1, [pc, #112]	; (800f170 <tcp_rst+0xa0>)
 800f100:	481a      	ldr	r0, [pc, #104]	; (800f16c <tcp_rst+0x9c>)
 800f102:	f003 fa6b 	bl	80125dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f106:	2300      	movs	r3, #0
 800f108:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f10a:	f246 0308 	movw	r3, #24584	; 0x6008
 800f10e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f110:	7dfb      	ldrb	r3, [r7, #23]
 800f112:	b29c      	uxth	r4, r3
 800f114:	68b8      	ldr	r0, [r7, #8]
 800f116:	f7f9 fa10 	bl	800853a <lwip_htonl>
 800f11a:	4602      	mov	r2, r0
 800f11c:	8abb      	ldrh	r3, [r7, #20]
 800f11e:	9303      	str	r3, [sp, #12]
 800f120:	2314      	movs	r3, #20
 800f122:	9302      	str	r3, [sp, #8]
 800f124:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f126:	9301      	str	r3, [sp, #4]
 800f128:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f12a:	9300      	str	r3, [sp, #0]
 800f12c:	4613      	mov	r3, r2
 800f12e:	2200      	movs	r2, #0
 800f130:	4621      	mov	r1, r4
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7ff fe92 	bl	800ee5c <tcp_output_alloc_header_common>
 800f138:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00c      	beq.n	800f15a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f140:	7dfb      	ldrb	r3, [r7, #23]
 800f142:	2200      	movs	r2, #0
 800f144:	6939      	ldr	r1, [r7, #16]
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f7ff ff38 	bl	800efbc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14e:	683a      	ldr	r2, [r7, #0]
 800f150:	6939      	ldr	r1, [r7, #16]
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f7ff ff72 	bl	800f03c <tcp_output_control_segment>
 800f158:	e000      	b.n	800f15c <tcp_rst+0x8c>
    return;
 800f15a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f15c:	371c      	adds	r7, #28
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd90      	pop	{r4, r7, pc}
 800f162:	bf00      	nop
 800f164:	08014c30 	.word	0x08014c30
 800f168:	080153b4 	.word	0x080153b4
 800f16c:	08014c84 	.word	0x08014c84
 800f170:	080153d0 	.word	0x080153d0

0800f174 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f174:	b590      	push	{r4, r7, lr}
 800f176:	b087      	sub	sp, #28
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f17c:	2300      	movs	r3, #0
 800f17e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f180:	2300      	movs	r3, #0
 800f182:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d106      	bne.n	800f198 <tcp_send_empty_ack+0x24>
 800f18a:	4b28      	ldr	r3, [pc, #160]	; (800f22c <tcp_send_empty_ack+0xb8>)
 800f18c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f190:	4927      	ldr	r1, [pc, #156]	; (800f230 <tcp_send_empty_ack+0xbc>)
 800f192:	4828      	ldr	r0, [pc, #160]	; (800f234 <tcp_send_empty_ack+0xc0>)
 800f194:	f003 fa22 	bl	80125dc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f198:	7dfb      	ldrb	r3, [r7, #23]
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	f003 0304 	and.w	r3, r3, #4
 800f1a2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f1a4:	7d7b      	ldrb	r3, [r7, #21]
 800f1a6:	b29c      	uxth	r4, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7f9 f9c4 	bl	800853a <lwip_htonl>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	4621      	mov	r1, r4
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f7ff fec1 	bl	800ef40 <tcp_output_alloc_header>
 800f1be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d109      	bne.n	800f1da <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	8b5b      	ldrh	r3, [r3, #26]
 800f1ca:	f043 0303 	orr.w	r3, r3, #3
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f1d4:	f06f 0301 	mvn.w	r3, #1
 800f1d8:	e023      	b.n	800f222 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f1da:	7dbb      	ldrb	r3, [r7, #22]
 800f1dc:	7dfa      	ldrb	r2, [r7, #23]
 800f1de:	6939      	ldr	r1, [r7, #16]
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f7ff feeb 	bl	800efbc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	3304      	adds	r3, #4
 800f1ec:	6939      	ldr	r1, [r7, #16]
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f7ff ff24 	bl	800f03c <tcp_output_control_segment>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f1f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d007      	beq.n	800f210 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	8b5b      	ldrh	r3, [r3, #26]
 800f204:	f043 0303 	orr.w	r3, r3, #3
 800f208:	b29a      	uxth	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	835a      	strh	r2, [r3, #26]
 800f20e:	e006      	b.n	800f21e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	8b5b      	ldrh	r3, [r3, #26]
 800f214:	f023 0303 	bic.w	r3, r3, #3
 800f218:	b29a      	uxth	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f222:	4618      	mov	r0, r3
 800f224:	371c      	adds	r7, #28
 800f226:	46bd      	mov	sp, r7
 800f228:	bd90      	pop	{r4, r7, pc}
 800f22a:	bf00      	nop
 800f22c:	08014c30 	.word	0x08014c30
 800f230:	080153ec 	.word	0x080153ec
 800f234:	08014c84 	.word	0x08014c84

0800f238 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f238:	b590      	push	{r4, r7, lr}
 800f23a:	b087      	sub	sp, #28
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f240:	2300      	movs	r3, #0
 800f242:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d106      	bne.n	800f258 <tcp_keepalive+0x20>
 800f24a:	4b18      	ldr	r3, [pc, #96]	; (800f2ac <tcp_keepalive+0x74>)
 800f24c:	f640 0224 	movw	r2, #2084	; 0x824
 800f250:	4917      	ldr	r1, [pc, #92]	; (800f2b0 <tcp_keepalive+0x78>)
 800f252:	4818      	ldr	r0, [pc, #96]	; (800f2b4 <tcp_keepalive+0x7c>)
 800f254:	f003 f9c2 	bl	80125dc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f258:	7dfb      	ldrb	r3, [r7, #23]
 800f25a:	b29c      	uxth	r4, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f260:	3b01      	subs	r3, #1
 800f262:	4618      	mov	r0, r3
 800f264:	f7f9 f969 	bl	800853a <lwip_htonl>
 800f268:	4603      	mov	r3, r0
 800f26a:	2200      	movs	r2, #0
 800f26c:	4621      	mov	r1, r4
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7ff fe66 	bl	800ef40 <tcp_output_alloc_header>
 800f274:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d102      	bne.n	800f282 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f27c:	f04f 33ff 	mov.w	r3, #4294967295
 800f280:	e010      	b.n	800f2a4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f282:	7dfb      	ldrb	r3, [r7, #23]
 800f284:	2200      	movs	r2, #0
 800f286:	6939      	ldr	r1, [r7, #16]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7ff fe97 	bl	800efbc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	3304      	adds	r3, #4
 800f294:	6939      	ldr	r1, [r7, #16]
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7ff fed0 	bl	800f03c <tcp_output_control_segment>
 800f29c:	4603      	mov	r3, r0
 800f29e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	371c      	adds	r7, #28
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd90      	pop	{r4, r7, pc}
 800f2ac:	08014c30 	.word	0x08014c30
 800f2b0:	0801540c 	.word	0x0801540c
 800f2b4:	08014c84 	.word	0x08014c84

0800f2b8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f2b8:	b590      	push	{r4, r7, lr}
 800f2ba:	b08b      	sub	sp, #44	; 0x2c
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d106      	bne.n	800f2da <tcp_zero_window_probe+0x22>
 800f2cc:	4b4c      	ldr	r3, [pc, #304]	; (800f400 <tcp_zero_window_probe+0x148>)
 800f2ce:	f640 024f 	movw	r2, #2127	; 0x84f
 800f2d2:	494c      	ldr	r1, [pc, #304]	; (800f404 <tcp_zero_window_probe+0x14c>)
 800f2d4:	484c      	ldr	r0, [pc, #304]	; (800f408 <tcp_zero_window_probe+0x150>)
 800f2d6:	f003 f981 	bl	80125dc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2de:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f2e0:	6a3b      	ldr	r3, [r7, #32]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d101      	bne.n	800f2ea <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	e086      	b.n	800f3f8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f2f0:	2bff      	cmp	r3, #255	; 0xff
 800f2f2:	d007      	beq.n	800f304 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	b2da      	uxtb	r2, r3
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f304:	6a3b      	ldr	r3, [r7, #32]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	899b      	ldrh	r3, [r3, #12]
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7f9 f8ff 	bl	8008510 <lwip_htons>
 800f312:	4603      	mov	r3, r0
 800f314:	b2db      	uxtb	r3, r3
 800f316:	f003 0301 	and.w	r3, r3, #1
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d005      	beq.n	800f32a <tcp_zero_window_probe+0x72>
 800f31e:	6a3b      	ldr	r3, [r7, #32]
 800f320:	891b      	ldrh	r3, [r3, #8]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d101      	bne.n	800f32a <tcp_zero_window_probe+0x72>
 800f326:	2301      	movs	r3, #1
 800f328:	e000      	b.n	800f32c <tcp_zero_window_probe+0x74>
 800f32a:	2300      	movs	r3, #0
 800f32c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f32e:	7ffb      	ldrb	r3, [r7, #31]
 800f330:	2b00      	cmp	r3, #0
 800f332:	bf0c      	ite	eq
 800f334:	2301      	moveq	r3, #1
 800f336:	2300      	movne	r3, #0
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f340:	b299      	uxth	r1, r3
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	8bba      	ldrh	r2, [r7, #28]
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7ff fdf8 	bl	800ef40 <tcp_output_alloc_header>
 800f350:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d102      	bne.n	800f35e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f358:	f04f 33ff 	mov.w	r3, #4294967295
 800f35c:	e04c      	b.n	800f3f8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f364:	7ffb      	ldrb	r3, [r7, #31]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d011      	beq.n	800f38e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	899b      	ldrh	r3, [r3, #12]
 800f36e:	b29b      	uxth	r3, r3
 800f370:	b21b      	sxth	r3, r3
 800f372:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f376:	b21c      	sxth	r4, r3
 800f378:	2011      	movs	r0, #17
 800f37a:	f7f9 f8c9 	bl	8008510 <lwip_htons>
 800f37e:	4603      	mov	r3, r0
 800f380:	b21b      	sxth	r3, r3
 800f382:	4323      	orrs	r3, r4
 800f384:	b21b      	sxth	r3, r3
 800f386:	b29a      	uxth	r2, r3
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	819a      	strh	r2, [r3, #12]
 800f38c:	e010      	b.n	800f3b0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	3314      	adds	r3, #20
 800f394:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f396:	6a3b      	ldr	r3, [r7, #32]
 800f398:	6858      	ldr	r0, [r3, #4]
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	891a      	ldrh	r2, [r3, #8]
 800f3a0:	6a3b      	ldr	r3, [r7, #32]
 800f3a2:	891b      	ldrh	r3, [r3, #8]
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	6939      	ldr	r1, [r7, #16]
 800f3ac:	f7fa fe52 	bl	800a054 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f3b0:	6a3b      	ldr	r3, [r7, #32]
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7f9 f8bf 	bl	800853a <lwip_htonl>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	3301      	adds	r3, #1
 800f3c0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	da02      	bge.n	800f3d4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3d8:	2200      	movs	r2, #0
 800f3da:	69b9      	ldr	r1, [r7, #24]
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff fded 	bl	800efbc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	3304      	adds	r3, #4
 800f3e8:	69b9      	ldr	r1, [r7, #24]
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff fe26 	bl	800f03c <tcp_output_control_segment>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f3f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	372c      	adds	r7, #44	; 0x2c
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd90      	pop	{r4, r7, pc}
 800f400:	08014c30 	.word	0x08014c30
 800f404:	08015428 	.word	0x08015428
 800f408:	08014c84 	.word	0x08014c84

0800f40c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f414:	f7fa ff0c 	bl	800a230 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f418:	4b0a      	ldr	r3, [pc, #40]	; (800f444 <tcpip_tcp_timer+0x38>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d103      	bne.n	800f428 <tcpip_tcp_timer+0x1c>
 800f420:	4b09      	ldr	r3, [pc, #36]	; (800f448 <tcpip_tcp_timer+0x3c>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d005      	beq.n	800f434 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f428:	2200      	movs	r2, #0
 800f42a:	4908      	ldr	r1, [pc, #32]	; (800f44c <tcpip_tcp_timer+0x40>)
 800f42c:	20fa      	movs	r0, #250	; 0xfa
 800f42e:	f000 f8f3 	bl	800f618 <sys_timeout>
 800f432:	e003      	b.n	800f43c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f434:	4b06      	ldr	r3, [pc, #24]	; (800f450 <tcpip_tcp_timer+0x44>)
 800f436:	2200      	movs	r2, #0
 800f438:	601a      	str	r2, [r3, #0]
  }
}
 800f43a:	bf00      	nop
 800f43c:	bf00      	nop
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	2000d598 	.word	0x2000d598
 800f448:	2000d59c 	.word	0x2000d59c
 800f44c:	0800f40d 	.word	0x0800f40d
 800f450:	2000d5e4 	.word	0x2000d5e4

0800f454 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f458:	4b0a      	ldr	r3, [pc, #40]	; (800f484 <tcp_timer_needed+0x30>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10f      	bne.n	800f480 <tcp_timer_needed+0x2c>
 800f460:	4b09      	ldr	r3, [pc, #36]	; (800f488 <tcp_timer_needed+0x34>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d103      	bne.n	800f470 <tcp_timer_needed+0x1c>
 800f468:	4b08      	ldr	r3, [pc, #32]	; (800f48c <tcp_timer_needed+0x38>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d007      	beq.n	800f480 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f470:	4b04      	ldr	r3, [pc, #16]	; (800f484 <tcp_timer_needed+0x30>)
 800f472:	2201      	movs	r2, #1
 800f474:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f476:	2200      	movs	r2, #0
 800f478:	4905      	ldr	r1, [pc, #20]	; (800f490 <tcp_timer_needed+0x3c>)
 800f47a:	20fa      	movs	r0, #250	; 0xfa
 800f47c:	f000 f8cc 	bl	800f618 <sys_timeout>
  }
}
 800f480:	bf00      	nop
 800f482:	bd80      	pop	{r7, pc}
 800f484:	2000d5e4 	.word	0x2000d5e4
 800f488:	2000d598 	.word	0x2000d598
 800f48c:	2000d59c 	.word	0x2000d59c
 800f490:	0800f40d 	.word	0x0800f40d

0800f494 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f4a0:	200a      	movs	r0, #10
 800f4a2:	f7f9 fceb 	bl	8008e7c <memp_malloc>
 800f4a6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d109      	bne.n	800f4c2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d151      	bne.n	800f558 <sys_timeout_abs+0xc4>
 800f4b4:	4b2a      	ldr	r3, [pc, #168]	; (800f560 <sys_timeout_abs+0xcc>)
 800f4b6:	22be      	movs	r2, #190	; 0xbe
 800f4b8:	492a      	ldr	r1, [pc, #168]	; (800f564 <sys_timeout_abs+0xd0>)
 800f4ba:	482b      	ldr	r0, [pc, #172]	; (800f568 <sys_timeout_abs+0xd4>)
 800f4bc:	f003 f88e 	bl	80125dc <iprintf>
    return;
 800f4c0:	e04a      	b.n	800f558 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f4da:	4b24      	ldr	r3, [pc, #144]	; (800f56c <sys_timeout_abs+0xd8>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d103      	bne.n	800f4ea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f4e2:	4a22      	ldr	r2, [pc, #136]	; (800f56c <sys_timeout_abs+0xd8>)
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	6013      	str	r3, [r2, #0]
    return;
 800f4e8:	e037      	b.n	800f55a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	4b1f      	ldr	r3, [pc, #124]	; (800f56c <sys_timeout_abs+0xd8>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	1ad3      	subs	r3, r2, r3
 800f4f6:	0fdb      	lsrs	r3, r3, #31
 800f4f8:	f003 0301 	and.w	r3, r3, #1
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d007      	beq.n	800f512 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f502:	4b1a      	ldr	r3, [pc, #104]	; (800f56c <sys_timeout_abs+0xd8>)
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f50a:	4a18      	ldr	r2, [pc, #96]	; (800f56c <sys_timeout_abs+0xd8>)
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	6013      	str	r3, [r2, #0]
 800f510:	e023      	b.n	800f55a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f512:	4b16      	ldr	r3, [pc, #88]	; (800f56c <sys_timeout_abs+0xd8>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	617b      	str	r3, [r7, #20]
 800f518:	e01a      	b.n	800f550 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00b      	beq.n	800f53a <sys_timeout_abs+0xa6>
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	685a      	ldr	r2, [r3, #4]
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	1ad3      	subs	r3, r2, r3
 800f52e:	0fdb      	lsrs	r3, r3, #31
 800f530:	f003 0301 	and.w	r3, r3, #1
 800f534:	b2db      	uxtb	r3, r3
 800f536:	2b00      	cmp	r3, #0
 800f538:	d007      	beq.n	800f54a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	693a      	ldr	r2, [r7, #16]
 800f546:	601a      	str	r2, [r3, #0]
        break;
 800f548:	e007      	b.n	800f55a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	617b      	str	r3, [r7, #20]
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e1      	bne.n	800f51a <sys_timeout_abs+0x86>
 800f556:	e000      	b.n	800f55a <sys_timeout_abs+0xc6>
    return;
 800f558:	bf00      	nop
      }
    }
  }
}
 800f55a:	3718      	adds	r7, #24
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	0801544c 	.word	0x0801544c
 800f564:	08015480 	.word	0x08015480
 800f568:	080154c0 	.word	0x080154c0
 800f56c:	2000d5dc 	.word	0x2000d5dc

0800f570 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	4798      	blx	r3

  now = sys_now();
 800f582:	f7f4 fe03 	bl	800418c <sys_now>
 800f586:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	4b0f      	ldr	r3, [pc, #60]	; (800f5cc <lwip_cyclic_timer+0x5c>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4413      	add	r3, r2
 800f592:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	1ad3      	subs	r3, r2, r3
 800f59a:	0fdb      	lsrs	r3, r3, #31
 800f59c:	f003 0301 	and.w	r3, r3, #1
 800f5a0:	b2db      	uxtb	r3, r3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d009      	beq.n	800f5ba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	4907      	ldr	r1, [pc, #28]	; (800f5d0 <lwip_cyclic_timer+0x60>)
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7ff ff6e 	bl	800f494 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f5b8:	e004      	b.n	800f5c4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	4904      	ldr	r1, [pc, #16]	; (800f5d0 <lwip_cyclic_timer+0x60>)
 800f5be:	68f8      	ldr	r0, [r7, #12]
 800f5c0:	f7ff ff68 	bl	800f494 <sys_timeout_abs>
}
 800f5c4:	bf00      	nop
 800f5c6:	3718      	adds	r7, #24
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	2000d5e0 	.word	0x2000d5e0
 800f5d0:	0800f571 	.word	0x0800f571

0800f5d4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f5da:	2301      	movs	r3, #1
 800f5dc:	607b      	str	r3, [r7, #4]
 800f5de:	e00e      	b.n	800f5fe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f5e0:	4a0b      	ldr	r2, [pc, #44]	; (800f610 <sys_timeouts_init+0x3c>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	4a08      	ldr	r2, [pc, #32]	; (800f610 <sys_timeouts_init+0x3c>)
 800f5ee:	4413      	add	r3, r2
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	4908      	ldr	r1, [pc, #32]	; (800f614 <sys_timeouts_init+0x40>)
 800f5f4:	f000 f810 	bl	800f618 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	607b      	str	r3, [r7, #4]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2b02      	cmp	r3, #2
 800f602:	d9ed      	bls.n	800f5e0 <sys_timeouts_init+0xc>
  }
}
 800f604:	bf00      	nop
 800f606:	bf00      	nop
 800f608:	3708      	adds	r7, #8
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	08016090 	.word	0x08016090
 800f614:	0800f571 	.word	0x0800f571

0800f618 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b086      	sub	sp, #24
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f62a:	d306      	bcc.n	800f63a <sys_timeout+0x22>
 800f62c:	4b0a      	ldr	r3, [pc, #40]	; (800f658 <sys_timeout+0x40>)
 800f62e:	f240 1229 	movw	r2, #297	; 0x129
 800f632:	490a      	ldr	r1, [pc, #40]	; (800f65c <sys_timeout+0x44>)
 800f634:	480a      	ldr	r0, [pc, #40]	; (800f660 <sys_timeout+0x48>)
 800f636:	f002 ffd1 	bl	80125dc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f63a:	f7f4 fda7 	bl	800418c <sys_now>
 800f63e:	4602      	mov	r2, r0
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	4413      	add	r3, r2
 800f644:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	68b9      	ldr	r1, [r7, #8]
 800f64a:	6978      	ldr	r0, [r7, #20]
 800f64c:	f7ff ff22 	bl	800f494 <sys_timeout_abs>
#endif
}
 800f650:	bf00      	nop
 800f652:	3718      	adds	r7, #24
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	0801544c 	.word	0x0801544c
 800f65c:	080154e8 	.word	0x080154e8
 800f660:	080154c0 	.word	0x080154c0

0800f664 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f66a:	f7f4 fd8f 	bl	800418c <sys_now>
 800f66e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f670:	4b17      	ldr	r3, [pc, #92]	; (800f6d0 <sys_check_timeouts+0x6c>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d022      	beq.n	800f6c2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	1ad3      	subs	r3, r2, r3
 800f684:	0fdb      	lsrs	r3, r3, #31
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d11a      	bne.n	800f6c6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a0e      	ldr	r2, [pc, #56]	; (800f6d0 <sys_check_timeouts+0x6c>)
 800f696:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	4a0a      	ldr	r2, [pc, #40]	; (800f6d4 <sys_check_timeouts+0x70>)
 800f6aa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f6ac:	68b9      	ldr	r1, [r7, #8]
 800f6ae:	200a      	movs	r0, #10
 800f6b0:	f7f9 fc36 	bl	8008f20 <memp_free>
    if (handler != NULL) {
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d0da      	beq.n	800f670 <sys_check_timeouts+0xc>
      handler(arg);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6838      	ldr	r0, [r7, #0]
 800f6be:	4798      	blx	r3
  do {
 800f6c0:	e7d6      	b.n	800f670 <sys_check_timeouts+0xc>
      return;
 800f6c2:	bf00      	nop
 800f6c4:	e000      	b.n	800f6c8 <sys_check_timeouts+0x64>
      return;
 800f6c6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	2000d5dc 	.word	0x2000d5dc
 800f6d4:	2000d5e0 	.word	0x2000d5e0

0800f6d8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f6de:	4b16      	ldr	r3, [pc, #88]	; (800f738 <sys_timeouts_sleeptime+0x60>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d102      	bne.n	800f6ec <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ea:	e020      	b.n	800f72e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f6ec:	f7f4 fd4e 	bl	800418c <sys_now>
 800f6f0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f6f2:	4b11      	ldr	r3, [pc, #68]	; (800f738 <sys_timeouts_sleeptime+0x60>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	685a      	ldr	r2, [r3, #4]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	1ad3      	subs	r3, r2, r3
 800f6fc:	0fdb      	lsrs	r3, r3, #31
 800f6fe:	f003 0301 	and.w	r3, r3, #1
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d001      	beq.n	800f70c <sys_timeouts_sleeptime+0x34>
    return 0;
 800f708:	2300      	movs	r3, #0
 800f70a:	e010      	b.n	800f72e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f70c:	4b0a      	ldr	r3, [pc, #40]	; (800f738 <sys_timeouts_sleeptime+0x60>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	da06      	bge.n	800f72c <sys_timeouts_sleeptime+0x54>
 800f71e:	4b07      	ldr	r3, [pc, #28]	; (800f73c <sys_timeouts_sleeptime+0x64>)
 800f720:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f724:	4906      	ldr	r1, [pc, #24]	; (800f740 <sys_timeouts_sleeptime+0x68>)
 800f726:	4807      	ldr	r0, [pc, #28]	; (800f744 <sys_timeouts_sleeptime+0x6c>)
 800f728:	f002 ff58 	bl	80125dc <iprintf>
    return ret;
 800f72c:	683b      	ldr	r3, [r7, #0]
  }
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3708      	adds	r7, #8
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	2000d5dc 	.word	0x2000d5dc
 800f73c:	0801544c 	.word	0x0801544c
 800f740:	08015520 	.word	0x08015520
 800f744:	080154c0 	.word	0x080154c0

0800f748 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f74c:	f002 ff5e 	bl	801260c <rand>
 800f750:	4603      	mov	r3, r0
 800f752:	b29b      	uxth	r3, r3
 800f754:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f758:	b29b      	uxth	r3, r3
 800f75a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f75e:	b29a      	uxth	r2, r3
 800f760:	4b01      	ldr	r3, [pc, #4]	; (800f768 <udp_init+0x20>)
 800f762:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f764:	bf00      	nop
 800f766:	bd80      	pop	{r7, pc}
 800f768:	20000018 	.word	0x20000018

0800f76c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	4613      	mov	r3, r2
 800f778:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d105      	bne.n	800f78c <udp_input_local_match+0x20>
 800f780:	4b27      	ldr	r3, [pc, #156]	; (800f820 <udp_input_local_match+0xb4>)
 800f782:	2287      	movs	r2, #135	; 0x87
 800f784:	4927      	ldr	r1, [pc, #156]	; (800f824 <udp_input_local_match+0xb8>)
 800f786:	4828      	ldr	r0, [pc, #160]	; (800f828 <udp_input_local_match+0xbc>)
 800f788:	f002 ff28 	bl	80125dc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d105      	bne.n	800f79e <udp_input_local_match+0x32>
 800f792:	4b23      	ldr	r3, [pc, #140]	; (800f820 <udp_input_local_match+0xb4>)
 800f794:	2288      	movs	r2, #136	; 0x88
 800f796:	4925      	ldr	r1, [pc, #148]	; (800f82c <udp_input_local_match+0xc0>)
 800f798:	4823      	ldr	r0, [pc, #140]	; (800f828 <udp_input_local_match+0xbc>)
 800f79a:	f002 ff1f 	bl	80125dc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	7a1b      	ldrb	r3, [r3, #8]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00b      	beq.n	800f7be <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	7a1a      	ldrb	r2, [r3, #8]
 800f7aa:	4b21      	ldr	r3, [pc, #132]	; (800f830 <udp_input_local_match+0xc4>)
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d001      	beq.n	800f7be <udp_input_local_match+0x52>
    return 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	e02b      	b.n	800f816 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d018      	beq.n	800f7f6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d013      	beq.n	800f7f2 <udp_input_local_match+0x86>
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00f      	beq.n	800f7f2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f7d2:	4b17      	ldr	r3, [pc, #92]	; (800f830 <udp_input_local_match+0xc4>)
 800f7d4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7da:	d00a      	beq.n	800f7f2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	4b13      	ldr	r3, [pc, #76]	; (800f830 <udp_input_local_match+0xc4>)
 800f7e2:	695b      	ldr	r3, [r3, #20]
 800f7e4:	405a      	eors	r2, r3
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	3308      	adds	r3, #8
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d110      	bne.n	800f814 <udp_input_local_match+0xa8>
          return 1;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e00f      	b.n	800f816 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d009      	beq.n	800f810 <udp_input_local_match+0xa4>
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d005      	beq.n	800f810 <udp_input_local_match+0xa4>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	4b09      	ldr	r3, [pc, #36]	; (800f830 <udp_input_local_match+0xc4>)
 800f80a:	695b      	ldr	r3, [r3, #20]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d101      	bne.n	800f814 <udp_input_local_match+0xa8>
        return 1;
 800f810:	2301      	movs	r3, #1
 800f812:	e000      	b.n	800f816 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	08015534 	.word	0x08015534
 800f824:	08015564 	.word	0x08015564
 800f828:	08015588 	.word	0x08015588
 800f82c:	080155b0 	.word	0x080155b0
 800f830:	20007c78 	.word	0x20007c78

0800f834 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f834:	b590      	push	{r4, r7, lr}
 800f836:	b08d      	sub	sp, #52	; 0x34
 800f838:	af02      	add	r7, sp, #8
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f83e:	2300      	movs	r3, #0
 800f840:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d105      	bne.n	800f854 <udp_input+0x20>
 800f848:	4b7c      	ldr	r3, [pc, #496]	; (800fa3c <udp_input+0x208>)
 800f84a:	22cf      	movs	r2, #207	; 0xcf
 800f84c:	497c      	ldr	r1, [pc, #496]	; (800fa40 <udp_input+0x20c>)
 800f84e:	487d      	ldr	r0, [pc, #500]	; (800fa44 <udp_input+0x210>)
 800f850:	f002 fec4 	bl	80125dc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d105      	bne.n	800f866 <udp_input+0x32>
 800f85a:	4b78      	ldr	r3, [pc, #480]	; (800fa3c <udp_input+0x208>)
 800f85c:	22d0      	movs	r2, #208	; 0xd0
 800f85e:	497a      	ldr	r1, [pc, #488]	; (800fa48 <udp_input+0x214>)
 800f860:	4878      	ldr	r0, [pc, #480]	; (800fa44 <udp_input+0x210>)
 800f862:	f002 febb 	bl	80125dc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	895b      	ldrh	r3, [r3, #10]
 800f86a:	2b07      	cmp	r3, #7
 800f86c:	d803      	bhi.n	800f876 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7fa f9fa 	bl	8009c68 <pbuf_free>
    goto end;
 800f874:	e0de      	b.n	800fa34 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f87c:	4b73      	ldr	r3, [pc, #460]	; (800fa4c <udp_input+0x218>)
 800f87e:	695b      	ldr	r3, [r3, #20]
 800f880:	4a72      	ldr	r2, [pc, #456]	; (800fa4c <udp_input+0x218>)
 800f882:	6812      	ldr	r2, [r2, #0]
 800f884:	4611      	mov	r1, r2
 800f886:	4618      	mov	r0, r3
 800f888:	f001 fc88 	bl	801119c <ip4_addr_isbroadcast_u32>
 800f88c:	4603      	mov	r3, r0
 800f88e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	881b      	ldrh	r3, [r3, #0]
 800f894:	b29b      	uxth	r3, r3
 800f896:	4618      	mov	r0, r3
 800f898:	f7f8 fe3a 	bl	8008510 <lwip_htons>
 800f89c:	4603      	mov	r3, r0
 800f89e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	885b      	ldrh	r3, [r3, #2]
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7f8 fe32 	bl	8008510 <lwip_htons>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8bc:	4b64      	ldr	r3, [pc, #400]	; (800fa50 <udp_input+0x21c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800f8c2:	e054      	b.n	800f96e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c6:	8a5b      	ldrh	r3, [r3, #18]
 800f8c8:	89fa      	ldrh	r2, [r7, #14]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d14a      	bne.n	800f964 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f8ce:	7cfb      	ldrb	r3, [r7, #19]
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8d6:	f7ff ff49 	bl	800f76c <udp_input_local_match>
 800f8da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d041      	beq.n	800f964 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e2:	7c1b      	ldrb	r3, [r3, #16]
 800f8e4:	f003 0304 	and.w	r3, r3, #4
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d11d      	bne.n	800f928 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d102      	bne.n	800f8f8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f4:	61fb      	str	r3, [r7, #28]
 800f8f6:	e017      	b.n	800f928 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f8f8:	7cfb      	ldrb	r3, [r7, #19]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d014      	beq.n	800f928 <udp_input+0xf4>
 800f8fe:	4b53      	ldr	r3, [pc, #332]	; (800fa4c <udp_input+0x218>)
 800f900:	695b      	ldr	r3, [r3, #20]
 800f902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f906:	d10f      	bne.n	800f928 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	3304      	adds	r3, #4
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	429a      	cmp	r2, r3
 800f914:	d008      	beq.n	800f928 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	3304      	adds	r3, #4
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	429a      	cmp	r2, r3
 800f922:	d101      	bne.n	800f928 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f926:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92a:	8a9b      	ldrh	r3, [r3, #20]
 800f92c:	8a3a      	ldrh	r2, [r7, #16]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d118      	bne.n	800f964 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f934:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f936:	2b00      	cmp	r3, #0
 800f938:	d005      	beq.n	800f946 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93c:	685a      	ldr	r2, [r3, #4]
 800f93e:	4b43      	ldr	r3, [pc, #268]	; (800fa4c <udp_input+0x218>)
 800f940:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f942:	429a      	cmp	r2, r3
 800f944:	d10e      	bne.n	800f964 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f946:	6a3b      	ldr	r3, [r7, #32]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d014      	beq.n	800f976 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94e:	68da      	ldr	r2, [r3, #12]
 800f950:	6a3b      	ldr	r3, [r7, #32]
 800f952:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f954:	4b3e      	ldr	r3, [pc, #248]	; (800fa50 <udp_input+0x21c>)
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f95c:	4a3c      	ldr	r2, [pc, #240]	; (800fa50 <udp_input+0x21c>)
 800f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f960:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f962:	e008      	b.n	800f976 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f966:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96a:	68db      	ldr	r3, [r3, #12]
 800f96c:	627b      	str	r3, [r7, #36]	; 0x24
 800f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f970:	2b00      	cmp	r3, #0
 800f972:	d1a7      	bne.n	800f8c4 <udp_input+0x90>
 800f974:	e000      	b.n	800f978 <udp_input+0x144>
        break;
 800f976:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d101      	bne.n	800f982 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	2b00      	cmp	r3, #0
 800f986:	d002      	beq.n	800f98e <udp_input+0x15a>
    for_us = 1;
 800f988:	2301      	movs	r3, #1
 800f98a:	76fb      	strb	r3, [r7, #27]
 800f98c:	e00a      	b.n	800f9a4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	3304      	adds	r3, #4
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	4b2d      	ldr	r3, [pc, #180]	; (800fa4c <udp_input+0x218>)
 800f996:	695b      	ldr	r3, [r3, #20]
 800f998:	429a      	cmp	r2, r3
 800f99a:	bf0c      	ite	eq
 800f99c:	2301      	moveq	r3, #1
 800f99e:	2300      	movne	r3, #0
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f9a4:	7efb      	ldrb	r3, [r7, #27]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d041      	beq.n	800fa2e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f9aa:	2108      	movs	r1, #8
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f7fa f8d5 	bl	8009b5c <pbuf_remove_header>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d00a      	beq.n	800f9ce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f9b8:	4b20      	ldr	r3, [pc, #128]	; (800fa3c <udp_input+0x208>)
 800f9ba:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f9be:	4925      	ldr	r1, [pc, #148]	; (800fa54 <udp_input+0x220>)
 800f9c0:	4820      	ldr	r0, [pc, #128]	; (800fa44 <udp_input+0x210>)
 800f9c2:	f002 fe0b 	bl	80125dc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f7fa f94e 	bl	8009c68 <pbuf_free>
      goto end;
 800f9cc:	e032      	b.n	800fa34 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d012      	beq.n	800f9fa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d6:	699b      	ldr	r3, [r3, #24]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00a      	beq.n	800f9f2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9de:	699c      	ldr	r4, [r3, #24]
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	69d8      	ldr	r0, [r3, #28]
 800f9e4:	8a3b      	ldrh	r3, [r7, #16]
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	4b1b      	ldr	r3, [pc, #108]	; (800fa58 <udp_input+0x224>)
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f9f0:	e021      	b.n	800fa36 <udp_input+0x202>
        pbuf_free(p);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f7fa f938 	bl	8009c68 <pbuf_free>
        goto end;
 800f9f8:	e01c      	b.n	800fa34 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f9fa:	7cfb      	ldrb	r3, [r7, #19]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d112      	bne.n	800fa26 <udp_input+0x1f2>
 800fa00:	4b12      	ldr	r3, [pc, #72]	; (800fa4c <udp_input+0x218>)
 800fa02:	695b      	ldr	r3, [r3, #20]
 800fa04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa08:	2be0      	cmp	r3, #224	; 0xe0
 800fa0a:	d00c      	beq.n	800fa26 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fa0c:	4b0f      	ldr	r3, [pc, #60]	; (800fa4c <udp_input+0x218>)
 800fa0e:	899b      	ldrh	r3, [r3, #12]
 800fa10:	3308      	adds	r3, #8
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	b21b      	sxth	r3, r3
 800fa16:	4619      	mov	r1, r3
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f7fa f912 	bl	8009c42 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fa1e:	2103      	movs	r1, #3
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f001 f89b 	bl	8010b5c <icmp_dest_unreach>
      pbuf_free(p);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f7fa f91e 	bl	8009c68 <pbuf_free>
  return;
 800fa2c:	e003      	b.n	800fa36 <udp_input+0x202>
    pbuf_free(p);
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f7fa f91a 	bl	8009c68 <pbuf_free>
  return;
 800fa34:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fa36:	372c      	adds	r7, #44	; 0x2c
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd90      	pop	{r4, r7, pc}
 800fa3c:	08015534 	.word	0x08015534
 800fa40:	080155d8 	.word	0x080155d8
 800fa44:	08015588 	.word	0x08015588
 800fa48:	080155f0 	.word	0x080155f0
 800fa4c:	20007c78 	.word	0x20007c78
 800fa50:	2000d5e8 	.word	0x2000d5e8
 800fa54:	0801560c 	.word	0x0801560c
 800fa58:	20007c88 	.word	0x20007c88

0800fa5c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d01e      	beq.n	800faaa <udp_netif_ip_addr_changed+0x4e>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d01a      	beq.n	800faaa <udp_netif_ip_addr_changed+0x4e>
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d017      	beq.n	800faaa <udp_netif_ip_addr_changed+0x4e>
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d013      	beq.n	800faaa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fa82:	4b0d      	ldr	r3, [pc, #52]	; (800fab8 <udp_netif_ip_addr_changed+0x5c>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	60fb      	str	r3, [r7, #12]
 800fa88:	e00c      	b.n	800faa4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d103      	bne.n	800fa9e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	60fb      	str	r3, [r7, #12]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d1ef      	bne.n	800fa8a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800faaa:	bf00      	nop
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr
 800fab6:	bf00      	nop
 800fab8:	2000d5e8 	.word	0x2000d5e8

0800fabc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fac4:	4915      	ldr	r1, [pc, #84]	; (800fb1c <etharp_free_entry+0x60>)
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	4613      	mov	r3, r2
 800faca:	005b      	lsls	r3, r3, #1
 800facc:	4413      	add	r3, r2
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	440b      	add	r3, r1
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d013      	beq.n	800fb00 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fad8:	4910      	ldr	r1, [pc, #64]	; (800fb1c <etharp_free_entry+0x60>)
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	4613      	mov	r3, r2
 800fade:	005b      	lsls	r3, r3, #1
 800fae0:	4413      	add	r3, r2
 800fae2:	00db      	lsls	r3, r3, #3
 800fae4:	440b      	add	r3, r1
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4618      	mov	r0, r3
 800faea:	f7fa f8bd 	bl	8009c68 <pbuf_free>
    arp_table[i].q = NULL;
 800faee:	490b      	ldr	r1, [pc, #44]	; (800fb1c <etharp_free_entry+0x60>)
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	4613      	mov	r3, r2
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	4413      	add	r3, r2
 800faf8:	00db      	lsls	r3, r3, #3
 800fafa:	440b      	add	r3, r1
 800fafc:	2200      	movs	r2, #0
 800fafe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fb00:	4906      	ldr	r1, [pc, #24]	; (800fb1c <etharp_free_entry+0x60>)
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	4613      	mov	r3, r2
 800fb06:	005b      	lsls	r3, r3, #1
 800fb08:	4413      	add	r3, r2
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	440b      	add	r3, r1
 800fb0e:	3314      	adds	r3, #20
 800fb10:	2200      	movs	r2, #0
 800fb12:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fb14:	bf00      	nop
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	2000d5ec 	.word	0x2000d5ec

0800fb20 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb26:	2300      	movs	r3, #0
 800fb28:	607b      	str	r3, [r7, #4]
 800fb2a:	e096      	b.n	800fc5a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fb2c:	494f      	ldr	r1, [pc, #316]	; (800fc6c <etharp_tmr+0x14c>)
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	4613      	mov	r3, r2
 800fb32:	005b      	lsls	r3, r3, #1
 800fb34:	4413      	add	r3, r2
 800fb36:	00db      	lsls	r3, r3, #3
 800fb38:	440b      	add	r3, r1
 800fb3a:	3314      	adds	r3, #20
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fb40:	78fb      	ldrb	r3, [r7, #3]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	f000 8086 	beq.w	800fc54 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fb48:	4948      	ldr	r1, [pc, #288]	; (800fc6c <etharp_tmr+0x14c>)
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	005b      	lsls	r3, r3, #1
 800fb50:	4413      	add	r3, r2
 800fb52:	00db      	lsls	r3, r3, #3
 800fb54:	440b      	add	r3, r1
 800fb56:	3312      	adds	r3, #18
 800fb58:	881b      	ldrh	r3, [r3, #0]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	b298      	uxth	r0, r3
 800fb5e:	4943      	ldr	r1, [pc, #268]	; (800fc6c <etharp_tmr+0x14c>)
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	4613      	mov	r3, r2
 800fb64:	005b      	lsls	r3, r3, #1
 800fb66:	4413      	add	r3, r2
 800fb68:	00db      	lsls	r3, r3, #3
 800fb6a:	440b      	add	r3, r1
 800fb6c:	3312      	adds	r3, #18
 800fb6e:	4602      	mov	r2, r0
 800fb70:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fb72:	493e      	ldr	r1, [pc, #248]	; (800fc6c <etharp_tmr+0x14c>)
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	4613      	mov	r3, r2
 800fb78:	005b      	lsls	r3, r3, #1
 800fb7a:	4413      	add	r3, r2
 800fb7c:	00db      	lsls	r3, r3, #3
 800fb7e:	440b      	add	r3, r1
 800fb80:	3312      	adds	r3, #18
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fb88:	d215      	bcs.n	800fbb6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fb8a:	4938      	ldr	r1, [pc, #224]	; (800fc6c <etharp_tmr+0x14c>)
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	005b      	lsls	r3, r3, #1
 800fb92:	4413      	add	r3, r2
 800fb94:	00db      	lsls	r3, r3, #3
 800fb96:	440b      	add	r3, r1
 800fb98:	3314      	adds	r3, #20
 800fb9a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d10e      	bne.n	800fbbe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fba0:	4932      	ldr	r1, [pc, #200]	; (800fc6c <etharp_tmr+0x14c>)
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	4613      	mov	r3, r2
 800fba6:	005b      	lsls	r3, r3, #1
 800fba8:	4413      	add	r3, r2
 800fbaa:	00db      	lsls	r3, r3, #3
 800fbac:	440b      	add	r3, r1
 800fbae:	3312      	adds	r3, #18
 800fbb0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fbb2:	2b04      	cmp	r3, #4
 800fbb4:	d903      	bls.n	800fbbe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f7ff ff80 	bl	800fabc <etharp_free_entry>
 800fbbc:	e04a      	b.n	800fc54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fbbe:	492b      	ldr	r1, [pc, #172]	; (800fc6c <etharp_tmr+0x14c>)
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	005b      	lsls	r3, r3, #1
 800fbc6:	4413      	add	r3, r2
 800fbc8:	00db      	lsls	r3, r3, #3
 800fbca:	440b      	add	r3, r1
 800fbcc:	3314      	adds	r3, #20
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	2b03      	cmp	r3, #3
 800fbd2:	d10a      	bne.n	800fbea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fbd4:	4925      	ldr	r1, [pc, #148]	; (800fc6c <etharp_tmr+0x14c>)
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	005b      	lsls	r3, r3, #1
 800fbdc:	4413      	add	r3, r2
 800fbde:	00db      	lsls	r3, r3, #3
 800fbe0:	440b      	add	r3, r1
 800fbe2:	3314      	adds	r3, #20
 800fbe4:	2204      	movs	r2, #4
 800fbe6:	701a      	strb	r2, [r3, #0]
 800fbe8:	e034      	b.n	800fc54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fbea:	4920      	ldr	r1, [pc, #128]	; (800fc6c <etharp_tmr+0x14c>)
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	4613      	mov	r3, r2
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	4413      	add	r3, r2
 800fbf4:	00db      	lsls	r3, r3, #3
 800fbf6:	440b      	add	r3, r1
 800fbf8:	3314      	adds	r3, #20
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	2b04      	cmp	r3, #4
 800fbfe:	d10a      	bne.n	800fc16 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fc00:	491a      	ldr	r1, [pc, #104]	; (800fc6c <etharp_tmr+0x14c>)
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	4613      	mov	r3, r2
 800fc06:	005b      	lsls	r3, r3, #1
 800fc08:	4413      	add	r3, r2
 800fc0a:	00db      	lsls	r3, r3, #3
 800fc0c:	440b      	add	r3, r1
 800fc0e:	3314      	adds	r3, #20
 800fc10:	2202      	movs	r2, #2
 800fc12:	701a      	strb	r2, [r3, #0]
 800fc14:	e01e      	b.n	800fc54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fc16:	4915      	ldr	r1, [pc, #84]	; (800fc6c <etharp_tmr+0x14c>)
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	005b      	lsls	r3, r3, #1
 800fc1e:	4413      	add	r3, r2
 800fc20:	00db      	lsls	r3, r3, #3
 800fc22:	440b      	add	r3, r1
 800fc24:	3314      	adds	r3, #20
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d113      	bne.n	800fc54 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fc2c:	490f      	ldr	r1, [pc, #60]	; (800fc6c <etharp_tmr+0x14c>)
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	4613      	mov	r3, r2
 800fc32:	005b      	lsls	r3, r3, #1
 800fc34:	4413      	add	r3, r2
 800fc36:	00db      	lsls	r3, r3, #3
 800fc38:	440b      	add	r3, r1
 800fc3a:	3308      	adds	r3, #8
 800fc3c:	6818      	ldr	r0, [r3, #0]
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	4613      	mov	r3, r2
 800fc42:	005b      	lsls	r3, r3, #1
 800fc44:	4413      	add	r3, r2
 800fc46:	00db      	lsls	r3, r3, #3
 800fc48:	4a08      	ldr	r2, [pc, #32]	; (800fc6c <etharp_tmr+0x14c>)
 800fc4a:	4413      	add	r3, r2
 800fc4c:	3304      	adds	r3, #4
 800fc4e:	4619      	mov	r1, r3
 800fc50:	f000 fe6e 	bl	8010930 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	3301      	adds	r3, #1
 800fc58:	607b      	str	r3, [r7, #4]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b09      	cmp	r3, #9
 800fc5e:	f77f af65 	ble.w	800fb2c <etharp_tmr+0xc>
      }
    }
  }
}
 800fc62:	bf00      	nop
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	2000d5ec 	.word	0x2000d5ec

0800fc70 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b08a      	sub	sp, #40	; 0x28
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	460b      	mov	r3, r1
 800fc7a:	607a      	str	r2, [r7, #4]
 800fc7c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fc7e:	230a      	movs	r3, #10
 800fc80:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc82:	230a      	movs	r3, #10
 800fc84:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fc86:	230a      	movs	r3, #10
 800fc88:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fc8e:	230a      	movs	r3, #10
 800fc90:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fc92:	2300      	movs	r3, #0
 800fc94:	83bb      	strh	r3, [r7, #28]
 800fc96:	2300      	movs	r3, #0
 800fc98:	837b      	strh	r3, [r7, #26]
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc9e:	2300      	movs	r3, #0
 800fca0:	843b      	strh	r3, [r7, #32]
 800fca2:	e0ae      	b.n	800fe02 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fca4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fca8:	49a6      	ldr	r1, [pc, #664]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fcaa:	4613      	mov	r3, r2
 800fcac:	005b      	lsls	r3, r3, #1
 800fcae:	4413      	add	r3, r2
 800fcb0:	00db      	lsls	r3, r3, #3
 800fcb2:	440b      	add	r3, r1
 800fcb4:	3314      	adds	r3, #20
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fcba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fcbe:	2b0a      	cmp	r3, #10
 800fcc0:	d105      	bne.n	800fcce <etharp_find_entry+0x5e>
 800fcc2:	7dfb      	ldrb	r3, [r7, #23]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d102      	bne.n	800fcce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fcc8:	8c3b      	ldrh	r3, [r7, #32]
 800fcca:	847b      	strh	r3, [r7, #34]	; 0x22
 800fccc:	e095      	b.n	800fdfa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fcce:	7dfb      	ldrb	r3, [r7, #23]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	f000 8092 	beq.w	800fdfa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fcd6:	7dfb      	ldrb	r3, [r7, #23]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d009      	beq.n	800fcf0 <etharp_find_entry+0x80>
 800fcdc:	7dfb      	ldrb	r3, [r7, #23]
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d806      	bhi.n	800fcf0 <etharp_find_entry+0x80>
 800fce2:	4b99      	ldr	r3, [pc, #612]	; (800ff48 <etharp_find_entry+0x2d8>)
 800fce4:	f240 1223 	movw	r2, #291	; 0x123
 800fce8:	4998      	ldr	r1, [pc, #608]	; (800ff4c <etharp_find_entry+0x2dc>)
 800fcea:	4899      	ldr	r0, [pc, #612]	; (800ff50 <etharp_find_entry+0x2e0>)
 800fcec:	f002 fc76 	bl	80125dc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d020      	beq.n	800fd38 <etharp_find_entry+0xc8>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	6819      	ldr	r1, [r3, #0]
 800fcfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fcfe:	4891      	ldr	r0, [pc, #580]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fd00:	4613      	mov	r3, r2
 800fd02:	005b      	lsls	r3, r3, #1
 800fd04:	4413      	add	r3, r2
 800fd06:	00db      	lsls	r3, r3, #3
 800fd08:	4403      	add	r3, r0
 800fd0a:	3304      	adds	r3, #4
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	4299      	cmp	r1, r3
 800fd10:	d112      	bne.n	800fd38 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d00c      	beq.n	800fd32 <etharp_find_entry+0xc2>
 800fd18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd1c:	4989      	ldr	r1, [pc, #548]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fd1e:	4613      	mov	r3, r2
 800fd20:	005b      	lsls	r3, r3, #1
 800fd22:	4413      	add	r3, r2
 800fd24:	00db      	lsls	r3, r3, #3
 800fd26:	440b      	add	r3, r1
 800fd28:	3308      	adds	r3, #8
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d102      	bne.n	800fd38 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fd32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fd36:	e100      	b.n	800ff3a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fd38:	7dfb      	ldrb	r3, [r7, #23]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d140      	bne.n	800fdc0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fd3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd42:	4980      	ldr	r1, [pc, #512]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fd44:	4613      	mov	r3, r2
 800fd46:	005b      	lsls	r3, r3, #1
 800fd48:	4413      	add	r3, r2
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	440b      	add	r3, r1
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d01a      	beq.n	800fd8a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800fd54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd58:	497a      	ldr	r1, [pc, #488]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	005b      	lsls	r3, r3, #1
 800fd5e:	4413      	add	r3, r2
 800fd60:	00db      	lsls	r3, r3, #3
 800fd62:	440b      	add	r3, r1
 800fd64:	3312      	adds	r3, #18
 800fd66:	881b      	ldrh	r3, [r3, #0]
 800fd68:	8bba      	ldrh	r2, [r7, #28]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d845      	bhi.n	800fdfa <etharp_find_entry+0x18a>
            old_queue = i;
 800fd6e:	8c3b      	ldrh	r3, [r7, #32]
 800fd70:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800fd72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd76:	4973      	ldr	r1, [pc, #460]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fd78:	4613      	mov	r3, r2
 800fd7a:	005b      	lsls	r3, r3, #1
 800fd7c:	4413      	add	r3, r2
 800fd7e:	00db      	lsls	r3, r3, #3
 800fd80:	440b      	add	r3, r1
 800fd82:	3312      	adds	r3, #18
 800fd84:	881b      	ldrh	r3, [r3, #0]
 800fd86:	83bb      	strh	r3, [r7, #28]
 800fd88:	e037      	b.n	800fdfa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fd8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd8e:	496d      	ldr	r1, [pc, #436]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fd90:	4613      	mov	r3, r2
 800fd92:	005b      	lsls	r3, r3, #1
 800fd94:	4413      	add	r3, r2
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	440b      	add	r3, r1
 800fd9a:	3312      	adds	r3, #18
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	8b7a      	ldrh	r2, [r7, #26]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d82a      	bhi.n	800fdfa <etharp_find_entry+0x18a>
            old_pending = i;
 800fda4:	8c3b      	ldrh	r3, [r7, #32]
 800fda6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800fda8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fdac:	4965      	ldr	r1, [pc, #404]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fdae:	4613      	mov	r3, r2
 800fdb0:	005b      	lsls	r3, r3, #1
 800fdb2:	4413      	add	r3, r2
 800fdb4:	00db      	lsls	r3, r3, #3
 800fdb6:	440b      	add	r3, r1
 800fdb8:	3312      	adds	r3, #18
 800fdba:	881b      	ldrh	r3, [r3, #0]
 800fdbc:	837b      	strh	r3, [r7, #26]
 800fdbe:	e01c      	b.n	800fdfa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fdc0:	7dfb      	ldrb	r3, [r7, #23]
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d919      	bls.n	800fdfa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fdc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fdca:	495e      	ldr	r1, [pc, #376]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fdcc:	4613      	mov	r3, r2
 800fdce:	005b      	lsls	r3, r3, #1
 800fdd0:	4413      	add	r3, r2
 800fdd2:	00db      	lsls	r3, r3, #3
 800fdd4:	440b      	add	r3, r1
 800fdd6:	3312      	adds	r3, #18
 800fdd8:	881b      	ldrh	r3, [r3, #0]
 800fdda:	8b3a      	ldrh	r2, [r7, #24]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d80c      	bhi.n	800fdfa <etharp_find_entry+0x18a>
            old_stable = i;
 800fde0:	8c3b      	ldrh	r3, [r7, #32]
 800fde2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800fde4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fde8:	4956      	ldr	r1, [pc, #344]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fdea:	4613      	mov	r3, r2
 800fdec:	005b      	lsls	r3, r3, #1
 800fdee:	4413      	add	r3, r2
 800fdf0:	00db      	lsls	r3, r3, #3
 800fdf2:	440b      	add	r3, r1
 800fdf4:	3312      	adds	r3, #18
 800fdf6:	881b      	ldrh	r3, [r3, #0]
 800fdf8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fdfa:	8c3b      	ldrh	r3, [r7, #32]
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	843b      	strh	r3, [r7, #32]
 800fe02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fe06:	2b09      	cmp	r3, #9
 800fe08:	f77f af4c 	ble.w	800fca4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fe0c:	7afb      	ldrb	r3, [r7, #11]
 800fe0e:	f003 0302 	and.w	r3, r3, #2
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d108      	bne.n	800fe28 <etharp_find_entry+0x1b8>
 800fe16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fe1a:	2b0a      	cmp	r3, #10
 800fe1c:	d107      	bne.n	800fe2e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fe1e:	7afb      	ldrb	r3, [r7, #11]
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d102      	bne.n	800fe2e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fe28:	f04f 33ff 	mov.w	r3, #4294967295
 800fe2c:	e085      	b.n	800ff3a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fe2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fe32:	2b09      	cmp	r3, #9
 800fe34:	dc02      	bgt.n	800fe3c <etharp_find_entry+0x1cc>
    i = empty;
 800fe36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe38:	843b      	strh	r3, [r7, #32]
 800fe3a:	e039      	b.n	800feb0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fe3c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fe40:	2b09      	cmp	r3, #9
 800fe42:	dc14      	bgt.n	800fe6e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fe44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe46:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fe48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe4c:	493d      	ldr	r1, [pc, #244]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fe4e:	4613      	mov	r3, r2
 800fe50:	005b      	lsls	r3, r3, #1
 800fe52:	4413      	add	r3, r2
 800fe54:	00db      	lsls	r3, r3, #3
 800fe56:	440b      	add	r3, r1
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d018      	beq.n	800fe90 <etharp_find_entry+0x220>
 800fe5e:	4b3a      	ldr	r3, [pc, #232]	; (800ff48 <etharp_find_entry+0x2d8>)
 800fe60:	f240 126d 	movw	r2, #365	; 0x16d
 800fe64:	493b      	ldr	r1, [pc, #236]	; (800ff54 <etharp_find_entry+0x2e4>)
 800fe66:	483a      	ldr	r0, [pc, #232]	; (800ff50 <etharp_find_entry+0x2e0>)
 800fe68:	f002 fbb8 	bl	80125dc <iprintf>
 800fe6c:	e010      	b.n	800fe90 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fe6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fe72:	2b09      	cmp	r3, #9
 800fe74:	dc02      	bgt.n	800fe7c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800fe76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe78:	843b      	strh	r3, [r7, #32]
 800fe7a:	e009      	b.n	800fe90 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fe7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fe80:	2b09      	cmp	r3, #9
 800fe82:	dc02      	bgt.n	800fe8a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fe84:	8bfb      	ldrh	r3, [r7, #30]
 800fe86:	843b      	strh	r3, [r7, #32]
 800fe88:	e002      	b.n	800fe90 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800fe8a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe8e:	e054      	b.n	800ff3a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fe90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fe94:	2b09      	cmp	r3, #9
 800fe96:	dd06      	ble.n	800fea6 <etharp_find_entry+0x236>
 800fe98:	4b2b      	ldr	r3, [pc, #172]	; (800ff48 <etharp_find_entry+0x2d8>)
 800fe9a:	f240 127f 	movw	r2, #383	; 0x17f
 800fe9e:	492e      	ldr	r1, [pc, #184]	; (800ff58 <etharp_find_entry+0x2e8>)
 800fea0:	482b      	ldr	r0, [pc, #172]	; (800ff50 <etharp_find_entry+0x2e0>)
 800fea2:	f002 fb9b 	bl	80125dc <iprintf>
    etharp_free_entry(i);
 800fea6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800feaa:	4618      	mov	r0, r3
 800feac:	f7ff fe06 	bl	800fabc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800feb0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800feb4:	2b09      	cmp	r3, #9
 800feb6:	dd06      	ble.n	800fec6 <etharp_find_entry+0x256>
 800feb8:	4b23      	ldr	r3, [pc, #140]	; (800ff48 <etharp_find_entry+0x2d8>)
 800feba:	f240 1283 	movw	r2, #387	; 0x183
 800febe:	4926      	ldr	r1, [pc, #152]	; (800ff58 <etharp_find_entry+0x2e8>)
 800fec0:	4823      	ldr	r0, [pc, #140]	; (800ff50 <etharp_find_entry+0x2e0>)
 800fec2:	f002 fb8b 	bl	80125dc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fec6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800feca:	491e      	ldr	r1, [pc, #120]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fecc:	4613      	mov	r3, r2
 800fece:	005b      	lsls	r3, r3, #1
 800fed0:	4413      	add	r3, r2
 800fed2:	00db      	lsls	r3, r3, #3
 800fed4:	440b      	add	r3, r1
 800fed6:	3314      	adds	r3, #20
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d006      	beq.n	800feec <etharp_find_entry+0x27c>
 800fede:	4b1a      	ldr	r3, [pc, #104]	; (800ff48 <etharp_find_entry+0x2d8>)
 800fee0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800fee4:	491d      	ldr	r1, [pc, #116]	; (800ff5c <etharp_find_entry+0x2ec>)
 800fee6:	481a      	ldr	r0, [pc, #104]	; (800ff50 <etharp_find_entry+0x2e0>)
 800fee8:	f002 fb78 	bl	80125dc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00b      	beq.n	800ff0a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fef2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	6819      	ldr	r1, [r3, #0]
 800fefa:	4812      	ldr	r0, [pc, #72]	; (800ff44 <etharp_find_entry+0x2d4>)
 800fefc:	4613      	mov	r3, r2
 800fefe:	005b      	lsls	r3, r3, #1
 800ff00:	4413      	add	r3, r2
 800ff02:	00db      	lsls	r3, r3, #3
 800ff04:	4403      	add	r3, r0
 800ff06:	3304      	adds	r3, #4
 800ff08:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ff0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff0e:	490d      	ldr	r1, [pc, #52]	; (800ff44 <etharp_find_entry+0x2d4>)
 800ff10:	4613      	mov	r3, r2
 800ff12:	005b      	lsls	r3, r3, #1
 800ff14:	4413      	add	r3, r2
 800ff16:	00db      	lsls	r3, r3, #3
 800ff18:	440b      	add	r3, r1
 800ff1a:	3312      	adds	r3, #18
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ff20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff24:	4907      	ldr	r1, [pc, #28]	; (800ff44 <etharp_find_entry+0x2d4>)
 800ff26:	4613      	mov	r3, r2
 800ff28:	005b      	lsls	r3, r3, #1
 800ff2a:	4413      	add	r3, r2
 800ff2c:	00db      	lsls	r3, r3, #3
 800ff2e:	440b      	add	r3, r1
 800ff30:	3308      	adds	r3, #8
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ff36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3728      	adds	r7, #40	; 0x28
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	2000d5ec 	.word	0x2000d5ec
 800ff48:	08015898 	.word	0x08015898
 800ff4c:	080158d0 	.word	0x080158d0
 800ff50:	08015910 	.word	0x08015910
 800ff54:	08015938 	.word	0x08015938
 800ff58:	08015950 	.word	0x08015950
 800ff5c:	08015964 	.word	0x08015964

0800ff60 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b088      	sub	sp, #32
 800ff64:	af02      	add	r7, sp, #8
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
 800ff6c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ff74:	2b06      	cmp	r3, #6
 800ff76:	d006      	beq.n	800ff86 <etharp_update_arp_entry+0x26>
 800ff78:	4b48      	ldr	r3, [pc, #288]	; (801009c <etharp_update_arp_entry+0x13c>)
 800ff7a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ff7e:	4948      	ldr	r1, [pc, #288]	; (80100a0 <etharp_update_arp_entry+0x140>)
 800ff80:	4848      	ldr	r0, [pc, #288]	; (80100a4 <etharp_update_arp_entry+0x144>)
 800ff82:	f002 fb2b 	bl	80125dc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d012      	beq.n	800ffb2 <etharp_update_arp_entry+0x52>
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d00e      	beq.n	800ffb2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	68f9      	ldr	r1, [r7, #12]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f001 f8fe 	bl	801119c <ip4_addr_isbroadcast_u32>
 800ffa0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d105      	bne.n	800ffb2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ffae:	2be0      	cmp	r3, #224	; 0xe0
 800ffb0:	d102      	bne.n	800ffb8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ffb2:	f06f 030f 	mvn.w	r3, #15
 800ffb6:	e06c      	b.n	8010092 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ffb8:	78fb      	ldrb	r3, [r7, #3]
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	68b8      	ldr	r0, [r7, #8]
 800ffc0:	f7ff fe56 	bl	800fc70 <etharp_find_entry>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ffc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	da02      	bge.n	800ffd6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ffd0:	8afb      	ldrh	r3, [r7, #22]
 800ffd2:	b25b      	sxtb	r3, r3
 800ffd4:	e05d      	b.n	8010092 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ffd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ffda:	4933      	ldr	r1, [pc, #204]	; (80100a8 <etharp_update_arp_entry+0x148>)
 800ffdc:	4613      	mov	r3, r2
 800ffde:	005b      	lsls	r3, r3, #1
 800ffe0:	4413      	add	r3, r2
 800ffe2:	00db      	lsls	r3, r3, #3
 800ffe4:	440b      	add	r3, r1
 800ffe6:	3314      	adds	r3, #20
 800ffe8:	2202      	movs	r2, #2
 800ffea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ffec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fff0:	492d      	ldr	r1, [pc, #180]	; (80100a8 <etharp_update_arp_entry+0x148>)
 800fff2:	4613      	mov	r3, r2
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	4413      	add	r3, r2
 800fff8:	00db      	lsls	r3, r3, #3
 800fffa:	440b      	add	r3, r1
 800fffc:	3308      	adds	r3, #8
 800fffe:	68fa      	ldr	r2, [r7, #12]
 8010000:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010002:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010006:	4613      	mov	r3, r2
 8010008:	005b      	lsls	r3, r3, #1
 801000a:	4413      	add	r3, r2
 801000c:	00db      	lsls	r3, r3, #3
 801000e:	3308      	adds	r3, #8
 8010010:	4a25      	ldr	r2, [pc, #148]	; (80100a8 <etharp_update_arp_entry+0x148>)
 8010012:	4413      	add	r3, r2
 8010014:	3304      	adds	r3, #4
 8010016:	2206      	movs	r2, #6
 8010018:	6879      	ldr	r1, [r7, #4]
 801001a:	4618      	mov	r0, r3
 801001c:	f002 fa33 	bl	8012486 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010020:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010024:	4920      	ldr	r1, [pc, #128]	; (80100a8 <etharp_update_arp_entry+0x148>)
 8010026:	4613      	mov	r3, r2
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	4413      	add	r3, r2
 801002c:	00db      	lsls	r3, r3, #3
 801002e:	440b      	add	r3, r1
 8010030:	3312      	adds	r3, #18
 8010032:	2200      	movs	r2, #0
 8010034:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010036:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801003a:	491b      	ldr	r1, [pc, #108]	; (80100a8 <etharp_update_arp_entry+0x148>)
 801003c:	4613      	mov	r3, r2
 801003e:	005b      	lsls	r3, r3, #1
 8010040:	4413      	add	r3, r2
 8010042:	00db      	lsls	r3, r3, #3
 8010044:	440b      	add	r3, r1
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d021      	beq.n	8010090 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801004c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010050:	4915      	ldr	r1, [pc, #84]	; (80100a8 <etharp_update_arp_entry+0x148>)
 8010052:	4613      	mov	r3, r2
 8010054:	005b      	lsls	r3, r3, #1
 8010056:	4413      	add	r3, r2
 8010058:	00db      	lsls	r3, r3, #3
 801005a:	440b      	add	r3, r1
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010060:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010064:	4910      	ldr	r1, [pc, #64]	; (80100a8 <etharp_update_arp_entry+0x148>)
 8010066:	4613      	mov	r3, r2
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	4413      	add	r3, r2
 801006c:	00db      	lsls	r3, r3, #3
 801006e:	440b      	add	r3, r1
 8010070:	2200      	movs	r2, #0
 8010072:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801007a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6939      	ldr	r1, [r7, #16]
 8010084:	68f8      	ldr	r0, [r7, #12]
 8010086:	f001 ff97 	bl	8011fb8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801008a:	6938      	ldr	r0, [r7, #16]
 801008c:	f7f9 fdec 	bl	8009c68 <pbuf_free>
  }
  return ERR_OK;
 8010090:	2300      	movs	r3, #0
}
 8010092:	4618      	mov	r0, r3
 8010094:	3718      	adds	r7, #24
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	08015898 	.word	0x08015898
 80100a0:	08015990 	.word	0x08015990
 80100a4:	08015910 	.word	0x08015910
 80100a8:	2000d5ec 	.word	0x2000d5ec

080100ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100b4:	2300      	movs	r3, #0
 80100b6:	60fb      	str	r3, [r7, #12]
 80100b8:	e01e      	b.n	80100f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80100ba:	4913      	ldr	r1, [pc, #76]	; (8010108 <etharp_cleanup_netif+0x5c>)
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	4613      	mov	r3, r2
 80100c0:	005b      	lsls	r3, r3, #1
 80100c2:	4413      	add	r3, r2
 80100c4:	00db      	lsls	r3, r3, #3
 80100c6:	440b      	add	r3, r1
 80100c8:	3314      	adds	r3, #20
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80100ce:	7afb      	ldrb	r3, [r7, #11]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d00e      	beq.n	80100f2 <etharp_cleanup_netif+0x46>
 80100d4:	490c      	ldr	r1, [pc, #48]	; (8010108 <etharp_cleanup_netif+0x5c>)
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	4613      	mov	r3, r2
 80100da:	005b      	lsls	r3, r3, #1
 80100dc:	4413      	add	r3, r2
 80100de:	00db      	lsls	r3, r3, #3
 80100e0:	440b      	add	r3, r1
 80100e2:	3308      	adds	r3, #8
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d102      	bne.n	80100f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f7ff fce5 	bl	800fabc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	3301      	adds	r3, #1
 80100f6:	60fb      	str	r3, [r7, #12]
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2b09      	cmp	r3, #9
 80100fc:	dddd      	ble.n	80100ba <etharp_cleanup_netif+0xe>
    }
  }
}
 80100fe:	bf00      	nop
 8010100:	bf00      	nop
 8010102:	3710      	adds	r7, #16
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}
 8010108:	2000d5ec 	.word	0x2000d5ec

0801010c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801010c:	b5b0      	push	{r4, r5, r7, lr}
 801010e:	b08a      	sub	sp, #40	; 0x28
 8010110:	af04      	add	r7, sp, #16
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d107      	bne.n	801012c <etharp_input+0x20>
 801011c:	4b3d      	ldr	r3, [pc, #244]	; (8010214 <etharp_input+0x108>)
 801011e:	f240 228a 	movw	r2, #650	; 0x28a
 8010122:	493d      	ldr	r1, [pc, #244]	; (8010218 <etharp_input+0x10c>)
 8010124:	483d      	ldr	r0, [pc, #244]	; (801021c <etharp_input+0x110>)
 8010126:	f002 fa59 	bl	80125dc <iprintf>
 801012a:	e06f      	b.n	801020c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	881b      	ldrh	r3, [r3, #0]
 8010136:	b29b      	uxth	r3, r3
 8010138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801013c:	d10c      	bne.n	8010158 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010142:	2b06      	cmp	r3, #6
 8010144:	d108      	bne.n	8010158 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801014a:	2b04      	cmp	r3, #4
 801014c:	d104      	bne.n	8010158 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	885b      	ldrh	r3, [r3, #2]
 8010152:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010154:	2b08      	cmp	r3, #8
 8010156:	d003      	beq.n	8010160 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7f9 fd85 	bl	8009c68 <pbuf_free>
    return;
 801015e:	e055      	b.n	801020c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	330e      	adds	r3, #14
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	3318      	adds	r3, #24
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	3304      	adds	r3, #4
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d102      	bne.n	8010180 <etharp_input+0x74>
    for_us = 0;
 801017a:	2300      	movs	r3, #0
 801017c:	75fb      	strb	r3, [r7, #23]
 801017e:	e009      	b.n	8010194 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010180:	68ba      	ldr	r2, [r7, #8]
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	3304      	adds	r3, #4
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	429a      	cmp	r2, r3
 801018a:	bf0c      	ite	eq
 801018c:	2301      	moveq	r3, #1
 801018e:	2300      	movne	r3, #0
 8010190:	b2db      	uxtb	r3, r3
 8010192:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	f103 0208 	add.w	r2, r3, #8
 801019a:	7dfb      	ldrb	r3, [r7, #23]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d001      	beq.n	80101a4 <etharp_input+0x98>
 80101a0:	2301      	movs	r3, #1
 80101a2:	e000      	b.n	80101a6 <etharp_input+0x9a>
 80101a4:	2302      	movs	r3, #2
 80101a6:	f107 010c 	add.w	r1, r7, #12
 80101aa:	6838      	ldr	r0, [r7, #0]
 80101ac:	f7ff fed8 	bl	800ff60 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	88db      	ldrh	r3, [r3, #6]
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101ba:	d003      	beq.n	80101c4 <etharp_input+0xb8>
 80101bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101c0:	d01e      	beq.n	8010200 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80101c2:	e020      	b.n	8010206 <etharp_input+0xfa>
      if (for_us) {
 80101c4:	7dfb      	ldrb	r3, [r7, #23]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d01c      	beq.n	8010204 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80101e0:	693a      	ldr	r2, [r7, #16]
 80101e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80101e4:	2102      	movs	r1, #2
 80101e6:	9103      	str	r1, [sp, #12]
 80101e8:	f107 010c 	add.w	r1, r7, #12
 80101ec:	9102      	str	r1, [sp, #8]
 80101ee:	9201      	str	r2, [sp, #4]
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	462b      	mov	r3, r5
 80101f4:	4622      	mov	r2, r4
 80101f6:	4601      	mov	r1, r0
 80101f8:	6838      	ldr	r0, [r7, #0]
 80101fa:	f000 faeb 	bl	80107d4 <etharp_raw>
      break;
 80101fe:	e001      	b.n	8010204 <etharp_input+0xf8>
      break;
 8010200:	bf00      	nop
 8010202:	e000      	b.n	8010206 <etharp_input+0xfa>
      break;
 8010204:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7f9 fd2e 	bl	8009c68 <pbuf_free>
}
 801020c:	3718      	adds	r7, #24
 801020e:	46bd      	mov	sp, r7
 8010210:	bdb0      	pop	{r4, r5, r7, pc}
 8010212:	bf00      	nop
 8010214:	08015898 	.word	0x08015898
 8010218:	080159e8 	.word	0x080159e8
 801021c:	08015910 	.word	0x08015910

08010220 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b086      	sub	sp, #24
 8010224:	af02      	add	r7, sp, #8
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	4613      	mov	r3, r2
 801022c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801022e:	79fa      	ldrb	r2, [r7, #7]
 8010230:	4944      	ldr	r1, [pc, #272]	; (8010344 <etharp_output_to_arp_index+0x124>)
 8010232:	4613      	mov	r3, r2
 8010234:	005b      	lsls	r3, r3, #1
 8010236:	4413      	add	r3, r2
 8010238:	00db      	lsls	r3, r3, #3
 801023a:	440b      	add	r3, r1
 801023c:	3314      	adds	r3, #20
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	2b01      	cmp	r3, #1
 8010242:	d806      	bhi.n	8010252 <etharp_output_to_arp_index+0x32>
 8010244:	4b40      	ldr	r3, [pc, #256]	; (8010348 <etharp_output_to_arp_index+0x128>)
 8010246:	f240 22ee 	movw	r2, #750	; 0x2ee
 801024a:	4940      	ldr	r1, [pc, #256]	; (801034c <etharp_output_to_arp_index+0x12c>)
 801024c:	4840      	ldr	r0, [pc, #256]	; (8010350 <etharp_output_to_arp_index+0x130>)
 801024e:	f002 f9c5 	bl	80125dc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010252:	79fa      	ldrb	r2, [r7, #7]
 8010254:	493b      	ldr	r1, [pc, #236]	; (8010344 <etharp_output_to_arp_index+0x124>)
 8010256:	4613      	mov	r3, r2
 8010258:	005b      	lsls	r3, r3, #1
 801025a:	4413      	add	r3, r2
 801025c:	00db      	lsls	r3, r3, #3
 801025e:	440b      	add	r3, r1
 8010260:	3314      	adds	r3, #20
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	2b02      	cmp	r3, #2
 8010266:	d153      	bne.n	8010310 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010268:	79fa      	ldrb	r2, [r7, #7]
 801026a:	4936      	ldr	r1, [pc, #216]	; (8010344 <etharp_output_to_arp_index+0x124>)
 801026c:	4613      	mov	r3, r2
 801026e:	005b      	lsls	r3, r3, #1
 8010270:	4413      	add	r3, r2
 8010272:	00db      	lsls	r3, r3, #3
 8010274:	440b      	add	r3, r1
 8010276:	3312      	adds	r3, #18
 8010278:	881b      	ldrh	r3, [r3, #0]
 801027a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801027e:	d919      	bls.n	80102b4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010280:	79fa      	ldrb	r2, [r7, #7]
 8010282:	4613      	mov	r3, r2
 8010284:	005b      	lsls	r3, r3, #1
 8010286:	4413      	add	r3, r2
 8010288:	00db      	lsls	r3, r3, #3
 801028a:	4a2e      	ldr	r2, [pc, #184]	; (8010344 <etharp_output_to_arp_index+0x124>)
 801028c:	4413      	add	r3, r2
 801028e:	3304      	adds	r3, #4
 8010290:	4619      	mov	r1, r3
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f000 fb4c 	bl	8010930 <etharp_request>
 8010298:	4603      	mov	r3, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	d138      	bne.n	8010310 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801029e:	79fa      	ldrb	r2, [r7, #7]
 80102a0:	4928      	ldr	r1, [pc, #160]	; (8010344 <etharp_output_to_arp_index+0x124>)
 80102a2:	4613      	mov	r3, r2
 80102a4:	005b      	lsls	r3, r3, #1
 80102a6:	4413      	add	r3, r2
 80102a8:	00db      	lsls	r3, r3, #3
 80102aa:	440b      	add	r3, r1
 80102ac:	3314      	adds	r3, #20
 80102ae:	2203      	movs	r2, #3
 80102b0:	701a      	strb	r2, [r3, #0]
 80102b2:	e02d      	b.n	8010310 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80102b4:	79fa      	ldrb	r2, [r7, #7]
 80102b6:	4923      	ldr	r1, [pc, #140]	; (8010344 <etharp_output_to_arp_index+0x124>)
 80102b8:	4613      	mov	r3, r2
 80102ba:	005b      	lsls	r3, r3, #1
 80102bc:	4413      	add	r3, r2
 80102be:	00db      	lsls	r3, r3, #3
 80102c0:	440b      	add	r3, r1
 80102c2:	3312      	adds	r3, #18
 80102c4:	881b      	ldrh	r3, [r3, #0]
 80102c6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80102ca:	d321      	bcc.n	8010310 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80102cc:	79fa      	ldrb	r2, [r7, #7]
 80102ce:	4613      	mov	r3, r2
 80102d0:	005b      	lsls	r3, r3, #1
 80102d2:	4413      	add	r3, r2
 80102d4:	00db      	lsls	r3, r3, #3
 80102d6:	4a1b      	ldr	r2, [pc, #108]	; (8010344 <etharp_output_to_arp_index+0x124>)
 80102d8:	4413      	add	r3, r2
 80102da:	1d19      	adds	r1, r3, #4
 80102dc:	79fa      	ldrb	r2, [r7, #7]
 80102de:	4613      	mov	r3, r2
 80102e0:	005b      	lsls	r3, r3, #1
 80102e2:	4413      	add	r3, r2
 80102e4:	00db      	lsls	r3, r3, #3
 80102e6:	3308      	adds	r3, #8
 80102e8:	4a16      	ldr	r2, [pc, #88]	; (8010344 <etharp_output_to_arp_index+0x124>)
 80102ea:	4413      	add	r3, r2
 80102ec:	3304      	adds	r3, #4
 80102ee:	461a      	mov	r2, r3
 80102f0:	68f8      	ldr	r0, [r7, #12]
 80102f2:	f000 fafb 	bl	80108ec <etharp_request_dst>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d109      	bne.n	8010310 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80102fc:	79fa      	ldrb	r2, [r7, #7]
 80102fe:	4911      	ldr	r1, [pc, #68]	; (8010344 <etharp_output_to_arp_index+0x124>)
 8010300:	4613      	mov	r3, r2
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	4413      	add	r3, r2
 8010306:	00db      	lsls	r3, r3, #3
 8010308:	440b      	add	r3, r1
 801030a:	3314      	adds	r3, #20
 801030c:	2203      	movs	r2, #3
 801030e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010316:	79fa      	ldrb	r2, [r7, #7]
 8010318:	4613      	mov	r3, r2
 801031a:	005b      	lsls	r3, r3, #1
 801031c:	4413      	add	r3, r2
 801031e:	00db      	lsls	r3, r3, #3
 8010320:	3308      	adds	r3, #8
 8010322:	4a08      	ldr	r2, [pc, #32]	; (8010344 <etharp_output_to_arp_index+0x124>)
 8010324:	4413      	add	r3, r2
 8010326:	3304      	adds	r3, #4
 8010328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801032c:	9200      	str	r2, [sp, #0]
 801032e:	460a      	mov	r2, r1
 8010330:	68b9      	ldr	r1, [r7, #8]
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f001 fe40 	bl	8011fb8 <ethernet_output>
 8010338:	4603      	mov	r3, r0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	2000d5ec 	.word	0x2000d5ec
 8010348:	08015898 	.word	0x08015898
 801034c:	08015a08 	.word	0x08015a08
 8010350:	08015910 	.word	0x08015910

08010354 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b08a      	sub	sp, #40	; 0x28
 8010358:	af02      	add	r7, sp, #8
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d106      	bne.n	8010378 <etharp_output+0x24>
 801036a:	4b73      	ldr	r3, [pc, #460]	; (8010538 <etharp_output+0x1e4>)
 801036c:	f240 321e 	movw	r2, #798	; 0x31e
 8010370:	4972      	ldr	r1, [pc, #456]	; (801053c <etharp_output+0x1e8>)
 8010372:	4873      	ldr	r0, [pc, #460]	; (8010540 <etharp_output+0x1ec>)
 8010374:	f002 f932 	bl	80125dc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d106      	bne.n	801038c <etharp_output+0x38>
 801037e:	4b6e      	ldr	r3, [pc, #440]	; (8010538 <etharp_output+0x1e4>)
 8010380:	f240 321f 	movw	r2, #799	; 0x31f
 8010384:	496f      	ldr	r1, [pc, #444]	; (8010544 <etharp_output+0x1f0>)
 8010386:	486e      	ldr	r0, [pc, #440]	; (8010540 <etharp_output+0x1ec>)
 8010388:	f002 f928 	bl	80125dc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d106      	bne.n	80103a0 <etharp_output+0x4c>
 8010392:	4b69      	ldr	r3, [pc, #420]	; (8010538 <etharp_output+0x1e4>)
 8010394:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010398:	496b      	ldr	r1, [pc, #428]	; (8010548 <etharp_output+0x1f4>)
 801039a:	4869      	ldr	r0, [pc, #420]	; (8010540 <etharp_output+0x1ec>)
 801039c:	f002 f91e 	bl	80125dc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	68f9      	ldr	r1, [r7, #12]
 80103a6:	4618      	mov	r0, r3
 80103a8:	f000 fef8 	bl	801119c <ip4_addr_isbroadcast_u32>
 80103ac:	4603      	mov	r3, r0
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d002      	beq.n	80103b8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80103b2:	4b66      	ldr	r3, [pc, #408]	; (801054c <etharp_output+0x1f8>)
 80103b4:	61fb      	str	r3, [r7, #28]
 80103b6:	e0af      	b.n	8010518 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103c0:	2be0      	cmp	r3, #224	; 0xe0
 80103c2:	d118      	bne.n	80103f6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80103c4:	2301      	movs	r3, #1
 80103c6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80103c8:	2300      	movs	r3, #0
 80103ca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80103cc:	235e      	movs	r3, #94	; 0x5e
 80103ce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	3301      	adds	r3, #1
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	3302      	adds	r3, #2
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	3303      	adds	r3, #3
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80103ee:	f107 0310 	add.w	r3, r7, #16
 80103f2:	61fb      	str	r3, [r7, #28]
 80103f4:	e090      	b.n	8010518 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681a      	ldr	r2, [r3, #0]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	3304      	adds	r3, #4
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	405a      	eors	r2, r3
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	3308      	adds	r3, #8
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4013      	ands	r3, r2
 801040a:	2b00      	cmp	r3, #0
 801040c:	d012      	beq.n	8010434 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010414:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010418:	4293      	cmp	r3, r2
 801041a:	d00b      	beq.n	8010434 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	330c      	adds	r3, #12
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d003      	beq.n	801042e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	330c      	adds	r3, #12
 801042a:	61bb      	str	r3, [r7, #24]
 801042c:	e002      	b.n	8010434 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801042e:	f06f 0303 	mvn.w	r3, #3
 8010432:	e07d      	b.n	8010530 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010434:	4b46      	ldr	r3, [pc, #280]	; (8010550 <etharp_output+0x1fc>)
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	4619      	mov	r1, r3
 801043a:	4a46      	ldr	r2, [pc, #280]	; (8010554 <etharp_output+0x200>)
 801043c:	460b      	mov	r3, r1
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	440b      	add	r3, r1
 8010442:	00db      	lsls	r3, r3, #3
 8010444:	4413      	add	r3, r2
 8010446:	3314      	adds	r3, #20
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	2b01      	cmp	r3, #1
 801044c:	d925      	bls.n	801049a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801044e:	4b40      	ldr	r3, [pc, #256]	; (8010550 <etharp_output+0x1fc>)
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	4619      	mov	r1, r3
 8010454:	4a3f      	ldr	r2, [pc, #252]	; (8010554 <etharp_output+0x200>)
 8010456:	460b      	mov	r3, r1
 8010458:	005b      	lsls	r3, r3, #1
 801045a:	440b      	add	r3, r1
 801045c:	00db      	lsls	r3, r3, #3
 801045e:	4413      	add	r3, r2
 8010460:	3308      	adds	r3, #8
 8010462:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010464:	68fa      	ldr	r2, [r7, #12]
 8010466:	429a      	cmp	r2, r3
 8010468:	d117      	bne.n	801049a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	4b38      	ldr	r3, [pc, #224]	; (8010550 <etharp_output+0x1fc>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	4618      	mov	r0, r3
 8010474:	4937      	ldr	r1, [pc, #220]	; (8010554 <etharp_output+0x200>)
 8010476:	4603      	mov	r3, r0
 8010478:	005b      	lsls	r3, r3, #1
 801047a:	4403      	add	r3, r0
 801047c:	00db      	lsls	r3, r3, #3
 801047e:	440b      	add	r3, r1
 8010480:	3304      	adds	r3, #4
 8010482:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010484:	429a      	cmp	r2, r3
 8010486:	d108      	bne.n	801049a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010488:	4b31      	ldr	r3, [pc, #196]	; (8010550 <etharp_output+0x1fc>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	461a      	mov	r2, r3
 801048e:	68b9      	ldr	r1, [r7, #8]
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f7ff fec5 	bl	8010220 <etharp_output_to_arp_index>
 8010496:	4603      	mov	r3, r0
 8010498:	e04a      	b.n	8010530 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801049a:	2300      	movs	r3, #0
 801049c:	75fb      	strb	r3, [r7, #23]
 801049e:	e031      	b.n	8010504 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80104a0:	7dfa      	ldrb	r2, [r7, #23]
 80104a2:	492c      	ldr	r1, [pc, #176]	; (8010554 <etharp_output+0x200>)
 80104a4:	4613      	mov	r3, r2
 80104a6:	005b      	lsls	r3, r3, #1
 80104a8:	4413      	add	r3, r2
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	440b      	add	r3, r1
 80104ae:	3314      	adds	r3, #20
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d923      	bls.n	80104fe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80104b6:	7dfa      	ldrb	r2, [r7, #23]
 80104b8:	4926      	ldr	r1, [pc, #152]	; (8010554 <etharp_output+0x200>)
 80104ba:	4613      	mov	r3, r2
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	4413      	add	r3, r2
 80104c0:	00db      	lsls	r3, r3, #3
 80104c2:	440b      	add	r3, r1
 80104c4:	3308      	adds	r3, #8
 80104c6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d117      	bne.n	80104fe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	6819      	ldr	r1, [r3, #0]
 80104d2:	7dfa      	ldrb	r2, [r7, #23]
 80104d4:	481f      	ldr	r0, [pc, #124]	; (8010554 <etharp_output+0x200>)
 80104d6:	4613      	mov	r3, r2
 80104d8:	005b      	lsls	r3, r3, #1
 80104da:	4413      	add	r3, r2
 80104dc:	00db      	lsls	r3, r3, #3
 80104de:	4403      	add	r3, r0
 80104e0:	3304      	adds	r3, #4
 80104e2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80104e4:	4299      	cmp	r1, r3
 80104e6:	d10a      	bne.n	80104fe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80104e8:	4a19      	ldr	r2, [pc, #100]	; (8010550 <etharp_output+0x1fc>)
 80104ea:	7dfb      	ldrb	r3, [r7, #23]
 80104ec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80104ee:	7dfb      	ldrb	r3, [r7, #23]
 80104f0:	461a      	mov	r2, r3
 80104f2:	68b9      	ldr	r1, [r7, #8]
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f7ff fe93 	bl	8010220 <etharp_output_to_arp_index>
 80104fa:	4603      	mov	r3, r0
 80104fc:	e018      	b.n	8010530 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80104fe:	7dfb      	ldrb	r3, [r7, #23]
 8010500:	3301      	adds	r3, #1
 8010502:	75fb      	strb	r3, [r7, #23]
 8010504:	7dfb      	ldrb	r3, [r7, #23]
 8010506:	2b09      	cmp	r3, #9
 8010508:	d9ca      	bls.n	80104a0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	69b9      	ldr	r1, [r7, #24]
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f000 f822 	bl	8010558 <etharp_query>
 8010514:	4603      	mov	r3, r0
 8010516:	e00b      	b.n	8010530 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801051e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010522:	9300      	str	r3, [sp, #0]
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	68b9      	ldr	r1, [r7, #8]
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f001 fd45 	bl	8011fb8 <ethernet_output>
 801052e:	4603      	mov	r3, r0
}
 8010530:	4618      	mov	r0, r3
 8010532:	3720      	adds	r7, #32
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}
 8010538:	08015898 	.word	0x08015898
 801053c:	080159e8 	.word	0x080159e8
 8010540:	08015910 	.word	0x08015910
 8010544:	08015a38 	.word	0x08015a38
 8010548:	080159d8 	.word	0x080159d8
 801054c:	080160ac 	.word	0x080160ac
 8010550:	2000d6dc 	.word	0x2000d6dc
 8010554:	2000d5ec 	.word	0x2000d5ec

08010558 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b08c      	sub	sp, #48	; 0x30
 801055c:	af02      	add	r7, sp, #8
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	3326      	adds	r3, #38	; 0x26
 8010568:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801056a:	23ff      	movs	r3, #255	; 0xff
 801056c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010570:	2300      	movs	r3, #0
 8010572:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	68f9      	ldr	r1, [r7, #12]
 801057a:	4618      	mov	r0, r3
 801057c:	f000 fe0e 	bl	801119c <ip4_addr_isbroadcast_u32>
 8010580:	4603      	mov	r3, r0
 8010582:	2b00      	cmp	r3, #0
 8010584:	d10c      	bne.n	80105a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801058e:	2be0      	cmp	r3, #224	; 0xe0
 8010590:	d006      	beq.n	80105a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d003      	beq.n	80105a0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d102      	bne.n	80105a6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80105a0:	f06f 030f 	mvn.w	r3, #15
 80105a4:	e101      	b.n	80107aa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80105a6:	68fa      	ldr	r2, [r7, #12]
 80105a8:	2101      	movs	r1, #1
 80105aa:	68b8      	ldr	r0, [r7, #8]
 80105ac:	f7ff fb60 	bl	800fc70 <etharp_find_entry>
 80105b0:	4603      	mov	r3, r0
 80105b2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80105b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	da02      	bge.n	80105c2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80105bc:	8a7b      	ldrh	r3, [r7, #18]
 80105be:	b25b      	sxtb	r3, r3
 80105c0:	e0f3      	b.n	80107aa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80105c2:	8a7b      	ldrh	r3, [r7, #18]
 80105c4:	2b7e      	cmp	r3, #126	; 0x7e
 80105c6:	d906      	bls.n	80105d6 <etharp_query+0x7e>
 80105c8:	4b7a      	ldr	r3, [pc, #488]	; (80107b4 <etharp_query+0x25c>)
 80105ca:	f240 32c1 	movw	r2, #961	; 0x3c1
 80105ce:	497a      	ldr	r1, [pc, #488]	; (80107b8 <etharp_query+0x260>)
 80105d0:	487a      	ldr	r0, [pc, #488]	; (80107bc <etharp_query+0x264>)
 80105d2:	f002 f803 	bl	80125dc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80105d6:	8a7b      	ldrh	r3, [r7, #18]
 80105d8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80105da:	7c7a      	ldrb	r2, [r7, #17]
 80105dc:	4978      	ldr	r1, [pc, #480]	; (80107c0 <etharp_query+0x268>)
 80105de:	4613      	mov	r3, r2
 80105e0:	005b      	lsls	r3, r3, #1
 80105e2:	4413      	add	r3, r2
 80105e4:	00db      	lsls	r3, r3, #3
 80105e6:	440b      	add	r3, r1
 80105e8:	3314      	adds	r3, #20
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d115      	bne.n	801061c <etharp_query+0xc4>
    is_new_entry = 1;
 80105f0:	2301      	movs	r3, #1
 80105f2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80105f4:	7c7a      	ldrb	r2, [r7, #17]
 80105f6:	4972      	ldr	r1, [pc, #456]	; (80107c0 <etharp_query+0x268>)
 80105f8:	4613      	mov	r3, r2
 80105fa:	005b      	lsls	r3, r3, #1
 80105fc:	4413      	add	r3, r2
 80105fe:	00db      	lsls	r3, r3, #3
 8010600:	440b      	add	r3, r1
 8010602:	3314      	adds	r3, #20
 8010604:	2201      	movs	r2, #1
 8010606:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010608:	7c7a      	ldrb	r2, [r7, #17]
 801060a:	496d      	ldr	r1, [pc, #436]	; (80107c0 <etharp_query+0x268>)
 801060c:	4613      	mov	r3, r2
 801060e:	005b      	lsls	r3, r3, #1
 8010610:	4413      	add	r3, r2
 8010612:	00db      	lsls	r3, r3, #3
 8010614:	440b      	add	r3, r1
 8010616:	3308      	adds	r3, #8
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801061c:	7c7a      	ldrb	r2, [r7, #17]
 801061e:	4968      	ldr	r1, [pc, #416]	; (80107c0 <etharp_query+0x268>)
 8010620:	4613      	mov	r3, r2
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	4413      	add	r3, r2
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	440b      	add	r3, r1
 801062a:	3314      	adds	r3, #20
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	2b01      	cmp	r3, #1
 8010630:	d011      	beq.n	8010656 <etharp_query+0xfe>
 8010632:	7c7a      	ldrb	r2, [r7, #17]
 8010634:	4962      	ldr	r1, [pc, #392]	; (80107c0 <etharp_query+0x268>)
 8010636:	4613      	mov	r3, r2
 8010638:	005b      	lsls	r3, r3, #1
 801063a:	4413      	add	r3, r2
 801063c:	00db      	lsls	r3, r3, #3
 801063e:	440b      	add	r3, r1
 8010640:	3314      	adds	r3, #20
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	2b01      	cmp	r3, #1
 8010646:	d806      	bhi.n	8010656 <etharp_query+0xfe>
 8010648:	4b5a      	ldr	r3, [pc, #360]	; (80107b4 <etharp_query+0x25c>)
 801064a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801064e:	495d      	ldr	r1, [pc, #372]	; (80107c4 <etharp_query+0x26c>)
 8010650:	485a      	ldr	r0, [pc, #360]	; (80107bc <etharp_query+0x264>)
 8010652:	f001 ffc3 	bl	80125dc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010656:	6a3b      	ldr	r3, [r7, #32]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d102      	bne.n	8010662 <etharp_query+0x10a>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d10c      	bne.n	801067c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010662:	68b9      	ldr	r1, [r7, #8]
 8010664:	68f8      	ldr	r0, [r7, #12]
 8010666:	f000 f963 	bl	8010930 <etharp_request>
 801066a:	4603      	mov	r3, r0
 801066c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d102      	bne.n	801067c <etharp_query+0x124>
      return result;
 8010676:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801067a:	e096      	b.n	80107aa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d106      	bne.n	8010690 <etharp_query+0x138>
 8010682:	4b4c      	ldr	r3, [pc, #304]	; (80107b4 <etharp_query+0x25c>)
 8010684:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010688:	494f      	ldr	r1, [pc, #316]	; (80107c8 <etharp_query+0x270>)
 801068a:	484c      	ldr	r0, [pc, #304]	; (80107bc <etharp_query+0x264>)
 801068c:	f001 ffa6 	bl	80125dc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010690:	7c7a      	ldrb	r2, [r7, #17]
 8010692:	494b      	ldr	r1, [pc, #300]	; (80107c0 <etharp_query+0x268>)
 8010694:	4613      	mov	r3, r2
 8010696:	005b      	lsls	r3, r3, #1
 8010698:	4413      	add	r3, r2
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	440b      	add	r3, r1
 801069e:	3314      	adds	r3, #20
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	2b01      	cmp	r3, #1
 80106a4:	d917      	bls.n	80106d6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80106a6:	4a49      	ldr	r2, [pc, #292]	; (80107cc <etharp_query+0x274>)
 80106a8:	7c7b      	ldrb	r3, [r7, #17]
 80106aa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80106ac:	7c7a      	ldrb	r2, [r7, #17]
 80106ae:	4613      	mov	r3, r2
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	4413      	add	r3, r2
 80106b4:	00db      	lsls	r3, r3, #3
 80106b6:	3308      	adds	r3, #8
 80106b8:	4a41      	ldr	r2, [pc, #260]	; (80107c0 <etharp_query+0x268>)
 80106ba:	4413      	add	r3, r2
 80106bc:	3304      	adds	r3, #4
 80106be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80106c2:	9200      	str	r2, [sp, #0]
 80106c4:	697a      	ldr	r2, [r7, #20]
 80106c6:	6879      	ldr	r1, [r7, #4]
 80106c8:	68f8      	ldr	r0, [r7, #12]
 80106ca:	f001 fc75 	bl	8011fb8 <ethernet_output>
 80106ce:	4603      	mov	r3, r0
 80106d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80106d4:	e067      	b.n	80107a6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80106d6:	7c7a      	ldrb	r2, [r7, #17]
 80106d8:	4939      	ldr	r1, [pc, #228]	; (80107c0 <etharp_query+0x268>)
 80106da:	4613      	mov	r3, r2
 80106dc:	005b      	lsls	r3, r3, #1
 80106de:	4413      	add	r3, r2
 80106e0:	00db      	lsls	r3, r3, #3
 80106e2:	440b      	add	r3, r1
 80106e4:	3314      	adds	r3, #20
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d15c      	bne.n	80107a6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80106ec:	2300      	movs	r3, #0
 80106ee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80106f4:	e01c      	b.n	8010730 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	895a      	ldrh	r2, [r3, #10]
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	891b      	ldrh	r3, [r3, #8]
 80106fe:	429a      	cmp	r2, r3
 8010700:	d10a      	bne.n	8010718 <etharp_query+0x1c0>
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d006      	beq.n	8010718 <etharp_query+0x1c0>
 801070a:	4b2a      	ldr	r3, [pc, #168]	; (80107b4 <etharp_query+0x25c>)
 801070c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010710:	492f      	ldr	r1, [pc, #188]	; (80107d0 <etharp_query+0x278>)
 8010712:	482a      	ldr	r0, [pc, #168]	; (80107bc <etharp_query+0x264>)
 8010714:	f001 ff62 	bl	80125dc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	7b1b      	ldrb	r3, [r3, #12]
 801071c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010720:	2b00      	cmp	r3, #0
 8010722:	d002      	beq.n	801072a <etharp_query+0x1d2>
        copy_needed = 1;
 8010724:	2301      	movs	r3, #1
 8010726:	61bb      	str	r3, [r7, #24]
        break;
 8010728:	e005      	b.n	8010736 <etharp_query+0x1de>
      }
      p = p->next;
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1df      	bne.n	80106f6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d007      	beq.n	801074c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010742:	200e      	movs	r0, #14
 8010744:	f7f9 fcf8 	bl	800a138 <pbuf_clone>
 8010748:	61f8      	str	r0, [r7, #28]
 801074a:	e004      	b.n	8010756 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010750:	69f8      	ldr	r0, [r7, #28]
 8010752:	f7f9 fb2f 	bl	8009db4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d021      	beq.n	80107a0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801075c:	7c7a      	ldrb	r2, [r7, #17]
 801075e:	4918      	ldr	r1, [pc, #96]	; (80107c0 <etharp_query+0x268>)
 8010760:	4613      	mov	r3, r2
 8010762:	005b      	lsls	r3, r3, #1
 8010764:	4413      	add	r3, r2
 8010766:	00db      	lsls	r3, r3, #3
 8010768:	440b      	add	r3, r1
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00a      	beq.n	8010786 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010770:	7c7a      	ldrb	r2, [r7, #17]
 8010772:	4913      	ldr	r1, [pc, #76]	; (80107c0 <etharp_query+0x268>)
 8010774:	4613      	mov	r3, r2
 8010776:	005b      	lsls	r3, r3, #1
 8010778:	4413      	add	r3, r2
 801077a:	00db      	lsls	r3, r3, #3
 801077c:	440b      	add	r3, r1
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4618      	mov	r0, r3
 8010782:	f7f9 fa71 	bl	8009c68 <pbuf_free>
      }
      arp_table[i].q = p;
 8010786:	7c7a      	ldrb	r2, [r7, #17]
 8010788:	490d      	ldr	r1, [pc, #52]	; (80107c0 <etharp_query+0x268>)
 801078a:	4613      	mov	r3, r2
 801078c:	005b      	lsls	r3, r3, #1
 801078e:	4413      	add	r3, r2
 8010790:	00db      	lsls	r3, r3, #3
 8010792:	440b      	add	r3, r1
 8010794:	69fa      	ldr	r2, [r7, #28]
 8010796:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010798:	2300      	movs	r3, #0
 801079a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801079e:	e002      	b.n	80107a6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80107a0:	23ff      	movs	r3, #255	; 0xff
 80107a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80107a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3728      	adds	r7, #40	; 0x28
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	08015898 	.word	0x08015898
 80107b8:	08015a44 	.word	0x08015a44
 80107bc:	08015910 	.word	0x08015910
 80107c0:	2000d5ec 	.word	0x2000d5ec
 80107c4:	08015a54 	.word	0x08015a54
 80107c8:	08015a38 	.word	0x08015a38
 80107cc:	2000d6dc 	.word	0x2000d6dc
 80107d0:	08015a7c 	.word	0x08015a7c

080107d4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b08a      	sub	sp, #40	; 0x28
 80107d8:	af02      	add	r7, sp, #8
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]
 80107e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80107e2:	2300      	movs	r3, #0
 80107e4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d106      	bne.n	80107fa <etharp_raw+0x26>
 80107ec:	4b3a      	ldr	r3, [pc, #232]	; (80108d8 <etharp_raw+0x104>)
 80107ee:	f240 4257 	movw	r2, #1111	; 0x457
 80107f2:	493a      	ldr	r1, [pc, #232]	; (80108dc <etharp_raw+0x108>)
 80107f4:	483a      	ldr	r0, [pc, #232]	; (80108e0 <etharp_raw+0x10c>)
 80107f6:	f001 fef1 	bl	80125dc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80107fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107fe:	211c      	movs	r1, #28
 8010800:	200e      	movs	r0, #14
 8010802:	f7f8 ff4d 	bl	80096a0 <pbuf_alloc>
 8010806:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010808:	69bb      	ldr	r3, [r7, #24]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d102      	bne.n	8010814 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801080e:	f04f 33ff 	mov.w	r3, #4294967295
 8010812:	e05d      	b.n	80108d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	895b      	ldrh	r3, [r3, #10]
 8010818:	2b1b      	cmp	r3, #27
 801081a:	d806      	bhi.n	801082a <etharp_raw+0x56>
 801081c:	4b2e      	ldr	r3, [pc, #184]	; (80108d8 <etharp_raw+0x104>)
 801081e:	f240 4262 	movw	r2, #1122	; 0x462
 8010822:	4930      	ldr	r1, [pc, #192]	; (80108e4 <etharp_raw+0x110>)
 8010824:	482e      	ldr	r0, [pc, #184]	; (80108e0 <etharp_raw+0x10c>)
 8010826:	f001 fed9 	bl	80125dc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801082a:	69bb      	ldr	r3, [r7, #24]
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010830:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010832:	4618      	mov	r0, r3
 8010834:	f7f7 fe6c 	bl	8008510 <lwip_htons>
 8010838:	4603      	mov	r3, r0
 801083a:	461a      	mov	r2, r3
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010846:	2b06      	cmp	r3, #6
 8010848:	d006      	beq.n	8010858 <etharp_raw+0x84>
 801084a:	4b23      	ldr	r3, [pc, #140]	; (80108d8 <etharp_raw+0x104>)
 801084c:	f240 4269 	movw	r2, #1129	; 0x469
 8010850:	4925      	ldr	r1, [pc, #148]	; (80108e8 <etharp_raw+0x114>)
 8010852:	4823      	ldr	r0, [pc, #140]	; (80108e0 <etharp_raw+0x10c>)
 8010854:	f001 fec2 	bl	80125dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	3308      	adds	r3, #8
 801085c:	2206      	movs	r2, #6
 801085e:	6839      	ldr	r1, [r7, #0]
 8010860:	4618      	mov	r0, r3
 8010862:	f001 fe10 	bl	8012486 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	3312      	adds	r3, #18
 801086a:	2206      	movs	r2, #6
 801086c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801086e:	4618      	mov	r0, r3
 8010870:	f001 fe09 	bl	8012486 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	330e      	adds	r3, #14
 8010878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801087a:	6812      	ldr	r2, [r2, #0]
 801087c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	3318      	adds	r3, #24
 8010882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010884:	6812      	ldr	r2, [r2, #0]
 8010886:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	2200      	movs	r2, #0
 801088c:	701a      	strb	r2, [r3, #0]
 801088e:	2200      	movs	r2, #0
 8010890:	f042 0201 	orr.w	r2, r2, #1
 8010894:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	2200      	movs	r2, #0
 801089a:	f042 0208 	orr.w	r2, r2, #8
 801089e:	709a      	strb	r2, [r3, #2]
 80108a0:	2200      	movs	r2, #0
 80108a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	2206      	movs	r2, #6
 80108a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	2204      	movs	r2, #4
 80108ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80108b0:	f640 0306 	movw	r3, #2054	; 0x806
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	68ba      	ldr	r2, [r7, #8]
 80108ba:	69b9      	ldr	r1, [r7, #24]
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f001 fb7b 	bl	8011fb8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80108c2:	69b8      	ldr	r0, [r7, #24]
 80108c4:	f7f9 f9d0 	bl	8009c68 <pbuf_free>
  p = NULL;
 80108c8:	2300      	movs	r3, #0
 80108ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80108cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3720      	adds	r7, #32
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	08015898 	.word	0x08015898
 80108dc:	080159e8 	.word	0x080159e8
 80108e0:	08015910 	.word	0x08015910
 80108e4:	08015a98 	.word	0x08015a98
 80108e8:	08015acc 	.word	0x08015acc

080108ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b088      	sub	sp, #32
 80108f0:	af04      	add	r7, sp, #16
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010908:	2201      	movs	r2, #1
 801090a:	9203      	str	r2, [sp, #12]
 801090c:	68ba      	ldr	r2, [r7, #8]
 801090e:	9202      	str	r2, [sp, #8]
 8010910:	4a06      	ldr	r2, [pc, #24]	; (801092c <etharp_request_dst+0x40>)
 8010912:	9201      	str	r2, [sp, #4]
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	4603      	mov	r3, r0
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	68f8      	ldr	r0, [r7, #12]
 801091c:	f7ff ff5a 	bl	80107d4 <etharp_raw>
 8010920:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010922:	4618      	mov	r0, r3
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	080160b4 	.word	0x080160b4

08010930 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801093a:	4a05      	ldr	r2, [pc, #20]	; (8010950 <etharp_request+0x20>)
 801093c:	6839      	ldr	r1, [r7, #0]
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7ff ffd4 	bl	80108ec <etharp_request_dst>
 8010944:	4603      	mov	r3, r0
}
 8010946:	4618      	mov	r0, r3
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	bf00      	nop
 8010950:	080160ac 	.word	0x080160ac

08010954 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b08e      	sub	sp, #56	; 0x38
 8010958:	af04      	add	r7, sp, #16
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801095e:	4b79      	ldr	r3, [pc, #484]	; (8010b44 <icmp_input+0x1f0>)
 8010960:	689b      	ldr	r3, [r3, #8]
 8010962:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	f003 030f 	and.w	r3, r3, #15
 801096c:	b2db      	uxtb	r3, r3
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	b2db      	uxtb	r3, r3
 8010972:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010976:	2b13      	cmp	r3, #19
 8010978:	f240 80cd 	bls.w	8010b16 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	895b      	ldrh	r3, [r3, #10]
 8010980:	2b03      	cmp	r3, #3
 8010982:	f240 80ca 	bls.w	8010b1a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010990:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010994:	2b00      	cmp	r3, #0
 8010996:	f000 80b7 	beq.w	8010b08 <icmp_input+0x1b4>
 801099a:	2b08      	cmp	r3, #8
 801099c:	f040 80b7 	bne.w	8010b0e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80109a0:	4b69      	ldr	r3, [pc, #420]	; (8010b48 <icmp_input+0x1f4>)
 80109a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80109a4:	4b67      	ldr	r3, [pc, #412]	; (8010b44 <icmp_input+0x1f0>)
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109ac:	2be0      	cmp	r3, #224	; 0xe0
 80109ae:	f000 80bb 	beq.w	8010b28 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80109b2:	4b64      	ldr	r3, [pc, #400]	; (8010b44 <icmp_input+0x1f0>)
 80109b4:	695b      	ldr	r3, [r3, #20]
 80109b6:	4a63      	ldr	r2, [pc, #396]	; (8010b44 <icmp_input+0x1f0>)
 80109b8:	6812      	ldr	r2, [r2, #0]
 80109ba:	4611      	mov	r1, r2
 80109bc:	4618      	mov	r0, r3
 80109be:	f000 fbed 	bl	801119c <ip4_addr_isbroadcast_u32>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f040 80b1 	bne.w	8010b2c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	891b      	ldrh	r3, [r3, #8]
 80109ce:	2b07      	cmp	r3, #7
 80109d0:	f240 80a5 	bls.w	8010b1e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80109d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109d6:	330e      	adds	r3, #14
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7f9 f8ae 	bl	8009b3c <pbuf_add_header>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d04b      	beq.n	8010a7e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	891a      	ldrh	r2, [r3, #8]
 80109ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109ec:	4413      	add	r3, r2
 80109ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	891b      	ldrh	r3, [r3, #8]
 80109f4:	8b7a      	ldrh	r2, [r7, #26]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	f0c0 809a 	bcc.w	8010b30 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80109fc:	8b7b      	ldrh	r3, [r7, #26]
 80109fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a02:	4619      	mov	r1, r3
 8010a04:	200e      	movs	r0, #14
 8010a06:	f7f8 fe4b 	bl	80096a0 <pbuf_alloc>
 8010a0a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f000 8090 	beq.w	8010b34 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	895b      	ldrh	r3, [r3, #10]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a1c:	3308      	adds	r3, #8
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d203      	bcs.n	8010a2a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010a22:	6978      	ldr	r0, [r7, #20]
 8010a24:	f7f9 f920 	bl	8009c68 <pbuf_free>
          goto icmperr;
 8010a28:	e085      	b.n	8010b36 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a32:	4618      	mov	r0, r3
 8010a34:	f001 fd27 	bl	8012486 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010a38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	6978      	ldr	r0, [r7, #20]
 8010a3e:	f7f9 f88d 	bl	8009b5c <pbuf_remove_header>
 8010a42:	4603      	mov	r3, r0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d009      	beq.n	8010a5c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010a48:	4b40      	ldr	r3, [pc, #256]	; (8010b4c <icmp_input+0x1f8>)
 8010a4a:	22b6      	movs	r2, #182	; 0xb6
 8010a4c:	4940      	ldr	r1, [pc, #256]	; (8010b50 <icmp_input+0x1fc>)
 8010a4e:	4841      	ldr	r0, [pc, #260]	; (8010b54 <icmp_input+0x200>)
 8010a50:	f001 fdc4 	bl	80125dc <iprintf>
          pbuf_free(r);
 8010a54:	6978      	ldr	r0, [r7, #20]
 8010a56:	f7f9 f907 	bl	8009c68 <pbuf_free>
          goto icmperr;
 8010a5a:	e06c      	b.n	8010b36 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010a5c:	6879      	ldr	r1, [r7, #4]
 8010a5e:	6978      	ldr	r0, [r7, #20]
 8010a60:	f7f9 fa26 	bl	8009eb0 <pbuf_copy>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d003      	beq.n	8010a72 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010a6a:	6978      	ldr	r0, [r7, #20]
 8010a6c:	f7f9 f8fc 	bl	8009c68 <pbuf_free>
          goto icmperr;
 8010a70:	e061      	b.n	8010b36 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f7f9 f8f8 	bl	8009c68 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	607b      	str	r3, [r7, #4]
 8010a7c:	e00f      	b.n	8010a9e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010a7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a80:	330e      	adds	r3, #14
 8010a82:	4619      	mov	r1, r3
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7f9 f869 	bl	8009b5c <pbuf_remove_header>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d006      	beq.n	8010a9e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010a90:	4b2e      	ldr	r3, [pc, #184]	; (8010b4c <icmp_input+0x1f8>)
 8010a92:	22c7      	movs	r2, #199	; 0xc7
 8010a94:	4930      	ldr	r1, [pc, #192]	; (8010b58 <icmp_input+0x204>)
 8010a96:	482f      	ldr	r0, [pc, #188]	; (8010b54 <icmp_input+0x200>)
 8010a98:	f001 fda0 	bl	80125dc <iprintf>
          goto icmperr;
 8010a9c:	e04b      	b.n	8010b36 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010aa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f7f9 f847 	bl	8009b3c <pbuf_add_header>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d12b      	bne.n	8010b0c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	681a      	ldr	r2, [r3, #0]
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010ac2:	4b20      	ldr	r3, [pc, #128]	; (8010b44 <icmp_input+0x1f0>)
 8010ac4:	691a      	ldr	r2, [r3, #16]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	2200      	movs	r2, #0
 8010ace:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	709a      	strb	r2, [r3, #2]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	22ff      	movs	r2, #255	; 0xff
 8010ade:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	729a      	strb	r2, [r3, #10]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	9302      	str	r3, [sp, #8]
 8010aee:	2301      	movs	r3, #1
 8010af0:	9301      	str	r3, [sp, #4]
 8010af2:	2300      	movs	r3, #0
 8010af4:	9300      	str	r3, [sp, #0]
 8010af6:	23ff      	movs	r3, #255	; 0xff
 8010af8:	2200      	movs	r2, #0
 8010afa:	69f9      	ldr	r1, [r7, #28]
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f000 fa75 	bl	8010fec <ip4_output_if>
 8010b02:	4603      	mov	r3, r0
 8010b04:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010b06:	e001      	b.n	8010b0c <icmp_input+0x1b8>
      break;
 8010b08:	bf00      	nop
 8010b0a:	e000      	b.n	8010b0e <icmp_input+0x1ba>
      break;
 8010b0c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f7f9 f8aa 	bl	8009c68 <pbuf_free>
  return;
 8010b14:	e013      	b.n	8010b3e <icmp_input+0x1ea>
    goto lenerr;
 8010b16:	bf00      	nop
 8010b18:	e002      	b.n	8010b20 <icmp_input+0x1cc>
    goto lenerr;
 8010b1a:	bf00      	nop
 8010b1c:	e000      	b.n	8010b20 <icmp_input+0x1cc>
        goto lenerr;
 8010b1e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7f9 f8a1 	bl	8009c68 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010b26:	e00a      	b.n	8010b3e <icmp_input+0x1ea>
        goto icmperr;
 8010b28:	bf00      	nop
 8010b2a:	e004      	b.n	8010b36 <icmp_input+0x1e2>
        goto icmperr;
 8010b2c:	bf00      	nop
 8010b2e:	e002      	b.n	8010b36 <icmp_input+0x1e2>
          goto icmperr;
 8010b30:	bf00      	nop
 8010b32:	e000      	b.n	8010b36 <icmp_input+0x1e2>
          goto icmperr;
 8010b34:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f7f9 f896 	bl	8009c68 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010b3c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010b3e:	3728      	adds	r7, #40	; 0x28
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	20007c78 	.word	0x20007c78
 8010b48:	20007c8c 	.word	0x20007c8c
 8010b4c:	08015b10 	.word	0x08015b10
 8010b50:	08015b48 	.word	0x08015b48
 8010b54:	08015b80 	.word	0x08015b80
 8010b58:	08015ba8 	.word	0x08015ba8

08010b5c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	460b      	mov	r3, r1
 8010b66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010b68:	78fb      	ldrb	r3, [r7, #3]
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	2103      	movs	r1, #3
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 f814 	bl	8010b9c <icmp_send_response>
}
 8010b74:	bf00      	nop
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010b88:	78fb      	ldrb	r3, [r7, #3]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	210b      	movs	r1, #11
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 f804 	bl	8010b9c <icmp_send_response>
}
 8010b94:	bf00      	nop
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b08c      	sub	sp, #48	; 0x30
 8010ba0:	af04      	add	r7, sp, #16
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	70fb      	strb	r3, [r7, #3]
 8010ba8:	4613      	mov	r3, r2
 8010baa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010bac:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bb0:	2124      	movs	r1, #36	; 0x24
 8010bb2:	2022      	movs	r0, #34	; 0x22
 8010bb4:	f7f8 fd74 	bl	80096a0 <pbuf_alloc>
 8010bb8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d04c      	beq.n	8010c5a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	895b      	ldrh	r3, [r3, #10]
 8010bc4:	2b23      	cmp	r3, #35	; 0x23
 8010bc6:	d806      	bhi.n	8010bd6 <icmp_send_response+0x3a>
 8010bc8:	4b26      	ldr	r3, [pc, #152]	; (8010c64 <icmp_send_response+0xc8>)
 8010bca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010bce:	4926      	ldr	r1, [pc, #152]	; (8010c68 <icmp_send_response+0xcc>)
 8010bd0:	4826      	ldr	r0, [pc, #152]	; (8010c6c <icmp_send_response+0xd0>)
 8010bd2:	f001 fd03 	bl	80125dc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	78fa      	ldrb	r2, [r7, #3]
 8010be6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	78ba      	ldrb	r2, [r7, #2]
 8010bec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	711a      	strb	r2, [r3, #4]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	719a      	strb	r2, [r3, #6]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010c02:	69fb      	ldr	r3, [r7, #28]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	f103 0008 	add.w	r0, r3, #8
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	221c      	movs	r2, #28
 8010c10:	4619      	mov	r1, r3
 8010c12:	f001 fc38 	bl	8012486 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010c16:	69bb      	ldr	r3, [r7, #24]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010c1c:	f107 030c 	add.w	r3, r7, #12
 8010c20:	4618      	mov	r0, r3
 8010c22:	f000 f825 	bl	8010c70 <ip4_route>
 8010c26:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d011      	beq.n	8010c52 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	2200      	movs	r2, #0
 8010c32:	709a      	strb	r2, [r3, #2]
 8010c34:	2200      	movs	r2, #0
 8010c36:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010c38:	f107 020c 	add.w	r2, r7, #12
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	9302      	str	r3, [sp, #8]
 8010c40:	2301      	movs	r3, #1
 8010c42:	9301      	str	r3, [sp, #4]
 8010c44:	2300      	movs	r3, #0
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	23ff      	movs	r3, #255	; 0xff
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	69f8      	ldr	r0, [r7, #28]
 8010c4e:	f000 f9cd 	bl	8010fec <ip4_output_if>
  }
  pbuf_free(q);
 8010c52:	69f8      	ldr	r0, [r7, #28]
 8010c54:	f7f9 f808 	bl	8009c68 <pbuf_free>
 8010c58:	e000      	b.n	8010c5c <icmp_send_response+0xc0>
    return;
 8010c5a:	bf00      	nop
}
 8010c5c:	3720      	adds	r7, #32
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	08015b10 	.word	0x08015b10
 8010c68:	08015bdc 	.word	0x08015bdc
 8010c6c:	08015b80 	.word	0x08015b80

08010c70 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010c78:	4b33      	ldr	r3, [pc, #204]	; (8010d48 <ip4_route+0xd8>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	60fb      	str	r3, [r7, #12]
 8010c7e:	e036      	b.n	8010cee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c86:	f003 0301 	and.w	r3, r3, #1
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d02b      	beq.n	8010ce8 <ip4_route+0x78>
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c96:	089b      	lsrs	r3, r3, #2
 8010c98:	f003 0301 	and.w	r3, r3, #1
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d022      	beq.n	8010ce8 <ip4_route+0x78>
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	3304      	adds	r3, #4
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d01d      	beq.n	8010ce8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	405a      	eors	r2, r3
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	3308      	adds	r3, #8
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	4013      	ands	r3, r2
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d101      	bne.n	8010cc8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	e038      	b.n	8010d3a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cce:	f003 0302 	and.w	r3, r3, #2
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d108      	bne.n	8010ce8 <ip4_route+0x78>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	330c      	adds	r3, #12
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d101      	bne.n	8010ce8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	e028      	b.n	8010d3a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	60fb      	str	r3, [r7, #12]
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d1c5      	bne.n	8010c80 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010cf4:	4b15      	ldr	r3, [pc, #84]	; (8010d4c <ip4_route+0xdc>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d01a      	beq.n	8010d32 <ip4_route+0xc2>
 8010cfc:	4b13      	ldr	r3, [pc, #76]	; (8010d4c <ip4_route+0xdc>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d04:	f003 0301 	and.w	r3, r3, #1
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d012      	beq.n	8010d32 <ip4_route+0xc2>
 8010d0c:	4b0f      	ldr	r3, [pc, #60]	; (8010d4c <ip4_route+0xdc>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d14:	f003 0304 	and.w	r3, r3, #4
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d00a      	beq.n	8010d32 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010d1c:	4b0b      	ldr	r3, [pc, #44]	; (8010d4c <ip4_route+0xdc>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	3304      	adds	r3, #4
 8010d22:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d004      	beq.n	8010d32 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8010d30:	d101      	bne.n	8010d36 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010d32:	2300      	movs	r3, #0
 8010d34:	e001      	b.n	8010d3a <ip4_route+0xca>
  }

  return netif_default;
 8010d36:	4b05      	ldr	r3, [pc, #20]	; (8010d4c <ip4_route+0xdc>)
 8010d38:	681b      	ldr	r3, [r3, #0]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3714      	adds	r7, #20
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d44:	4770      	bx	lr
 8010d46:	bf00      	nop
 8010d48:	2000d580 	.word	0x2000d580
 8010d4c:	2000d584 	.word	0x2000d584

08010d50 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d5e:	f003 0301 	and.w	r3, r3, #1
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d016      	beq.n	8010d96 <ip4_input_accept+0x46>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	3304      	adds	r3, #4
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d011      	beq.n	8010d96 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010d72:	4b0b      	ldr	r3, [pc, #44]	; (8010da0 <ip4_input_accept+0x50>)
 8010d74:	695a      	ldr	r2, [r3, #20]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	3304      	adds	r3, #4
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d008      	beq.n	8010d92 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010d80:	4b07      	ldr	r3, [pc, #28]	; (8010da0 <ip4_input_accept+0x50>)
 8010d82:	695b      	ldr	r3, [r3, #20]
 8010d84:	6879      	ldr	r1, [r7, #4]
 8010d86:	4618      	mov	r0, r3
 8010d88:	f000 fa08 	bl	801119c <ip4_addr_isbroadcast_u32>
 8010d8c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d001      	beq.n	8010d96 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010d92:	2301      	movs	r3, #1
 8010d94:	e000      	b.n	8010d98 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010d96:	2300      	movs	r3, #0
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	20007c78 	.word	0x20007c78

08010da4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b086      	sub	sp, #24
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	091b      	lsrs	r3, r3, #4
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	2b04      	cmp	r3, #4
 8010dbe:	d004      	beq.n	8010dca <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7f8 ff51 	bl	8009c68 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	e107      	b.n	8010fda <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	f003 030f 	and.w	r3, r3, #15
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	885b      	ldrh	r3, [r3, #2]
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f7 fb95 	bl	8008510 <lwip_htons>
 8010de6:	4603      	mov	r3, r0
 8010de8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	891b      	ldrh	r3, [r3, #8]
 8010dee:	89ba      	ldrh	r2, [r7, #12]
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d204      	bcs.n	8010dfe <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010df4:	89bb      	ldrh	r3, [r7, #12]
 8010df6:	4619      	mov	r1, r3
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f7f8 fdaf 	bl	800995c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	895b      	ldrh	r3, [r3, #10]
 8010e02:	89fa      	ldrh	r2, [r7, #14]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d807      	bhi.n	8010e18 <ip4_input+0x74>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	891b      	ldrh	r3, [r3, #8]
 8010e0c:	89ba      	ldrh	r2, [r7, #12]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d802      	bhi.n	8010e18 <ip4_input+0x74>
 8010e12:	89fb      	ldrh	r3, [r7, #14]
 8010e14:	2b13      	cmp	r3, #19
 8010e16:	d804      	bhi.n	8010e22 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7f8 ff25 	bl	8009c68 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	e0db      	b.n	8010fda <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	4a6f      	ldr	r2, [pc, #444]	; (8010fe4 <ip4_input+0x240>)
 8010e28:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	4a6d      	ldr	r2, [pc, #436]	; (8010fe4 <ip4_input+0x240>)
 8010e30:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010e32:	4b6c      	ldr	r3, [pc, #432]	; (8010fe4 <ip4_input+0x240>)
 8010e34:	695b      	ldr	r3, [r3, #20]
 8010e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e3a:	2be0      	cmp	r3, #224	; 0xe0
 8010e3c:	d112      	bne.n	8010e64 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e44:	f003 0301 	and.w	r3, r3, #1
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d007      	beq.n	8010e5e <ip4_input+0xba>
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	3304      	adds	r3, #4
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d002      	beq.n	8010e5e <ip4_input+0xba>
      netif = inp;
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	613b      	str	r3, [r7, #16]
 8010e5c:	e02a      	b.n	8010eb4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	613b      	str	r3, [r7, #16]
 8010e62:	e027      	b.n	8010eb4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010e64:	6838      	ldr	r0, [r7, #0]
 8010e66:	f7ff ff73 	bl	8010d50 <ip4_input_accept>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <ip4_input+0xd2>
      netif = inp;
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	613b      	str	r3, [r7, #16]
 8010e74:	e01e      	b.n	8010eb4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010e7a:	4b5a      	ldr	r3, [pc, #360]	; (8010fe4 <ip4_input+0x240>)
 8010e7c:	695b      	ldr	r3, [r3, #20]
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	2b7f      	cmp	r3, #127	; 0x7f
 8010e82:	d017      	beq.n	8010eb4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010e84:	4b58      	ldr	r3, [pc, #352]	; (8010fe8 <ip4_input+0x244>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	613b      	str	r3, [r7, #16]
 8010e8a:	e00e      	b.n	8010eaa <ip4_input+0x106>
          if (netif == inp) {
 8010e8c:	693a      	ldr	r2, [r7, #16]
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d006      	beq.n	8010ea2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010e94:	6938      	ldr	r0, [r7, #16]
 8010e96:	f7ff ff5b 	bl	8010d50 <ip4_input_accept>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d108      	bne.n	8010eb2 <ip4_input+0x10e>
 8010ea0:	e000      	b.n	8010ea4 <ip4_input+0x100>
            continue;
 8010ea2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	613b      	str	r3, [r7, #16]
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1ed      	bne.n	8010e8c <ip4_input+0xe8>
 8010eb0:	e000      	b.n	8010eb4 <ip4_input+0x110>
            break;
 8010eb2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010eb4:	4b4b      	ldr	r3, [pc, #300]	; (8010fe4 <ip4_input+0x240>)
 8010eb6:	691b      	ldr	r3, [r3, #16]
 8010eb8:	6839      	ldr	r1, [r7, #0]
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f000 f96e 	bl	801119c <ip4_addr_isbroadcast_u32>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d105      	bne.n	8010ed2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010ec6:	4b47      	ldr	r3, [pc, #284]	; (8010fe4 <ip4_input+0x240>)
 8010ec8:	691b      	ldr	r3, [r3, #16]
 8010eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010ece:	2be0      	cmp	r3, #224	; 0xe0
 8010ed0:	d104      	bne.n	8010edc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7f8 fec8 	bl	8009c68 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	e07e      	b.n	8010fda <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d104      	bne.n	8010eec <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f7f8 fec0 	bl	8009c68 <pbuf_free>
    return ERR_OK;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	e076      	b.n	8010fda <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	88db      	ldrh	r3, [r3, #6]
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010ef8:	4013      	ands	r3, r2
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00b      	beq.n	8010f16 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 fc92 	bl	8011828 <ip4_reass>
 8010f04:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d101      	bne.n	8010f10 <ip4_input+0x16c>
      return ERR_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	e064      	b.n	8010fda <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010f16:	4a33      	ldr	r2, [pc, #204]	; (8010fe4 <ip4_input+0x240>)
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010f1c:	4a31      	ldr	r2, [pc, #196]	; (8010fe4 <ip4_input+0x240>)
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010f22:	4a30      	ldr	r2, [pc, #192]	; (8010fe4 <ip4_input+0x240>)
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	f003 030f 	and.w	r3, r3, #15
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	009b      	lsls	r3, r3, #2
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	4b2a      	ldr	r3, [pc, #168]	; (8010fe4 <ip4_input+0x240>)
 8010f3a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010f3c:	89fb      	ldrh	r3, [r7, #14]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f7f8 fe0b 	bl	8009b5c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	7a5b      	ldrb	r3, [r3, #9]
 8010f4a:	2b11      	cmp	r3, #17
 8010f4c:	d006      	beq.n	8010f5c <ip4_input+0x1b8>
 8010f4e:	2b11      	cmp	r3, #17
 8010f50:	dc13      	bgt.n	8010f7a <ip4_input+0x1d6>
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d00c      	beq.n	8010f70 <ip4_input+0x1cc>
 8010f56:	2b06      	cmp	r3, #6
 8010f58:	d005      	beq.n	8010f66 <ip4_input+0x1c2>
 8010f5a:	e00e      	b.n	8010f7a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f7fe fc68 	bl	800f834 <udp_input>
        break;
 8010f64:	e026      	b.n	8010fb4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010f66:	6839      	ldr	r1, [r7, #0]
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7fa fcb1 	bl	800b8d0 <tcp_input>
        break;
 8010f6e:	e021      	b.n	8010fb4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010f70:	6839      	ldr	r1, [r7, #0]
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f7ff fcee 	bl	8010954 <icmp_input>
        break;
 8010f78:	e01c      	b.n	8010fb4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010f7a:	4b1a      	ldr	r3, [pc, #104]	; (8010fe4 <ip4_input+0x240>)
 8010f7c:	695b      	ldr	r3, [r3, #20]
 8010f7e:	6939      	ldr	r1, [r7, #16]
 8010f80:	4618      	mov	r0, r3
 8010f82:	f000 f90b 	bl	801119c <ip4_addr_isbroadcast_u32>
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d10f      	bne.n	8010fac <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f8c:	4b15      	ldr	r3, [pc, #84]	; (8010fe4 <ip4_input+0x240>)
 8010f8e:	695b      	ldr	r3, [r3, #20]
 8010f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010f94:	2be0      	cmp	r3, #224	; 0xe0
 8010f96:	d009      	beq.n	8010fac <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010f98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f7f8 fe4f 	bl	8009c42 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010fa4:	2102      	movs	r1, #2
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7ff fdd8 	bl	8010b5c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f7f8 fe5b 	bl	8009c68 <pbuf_free>
        break;
 8010fb2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010fb4:	4b0b      	ldr	r3, [pc, #44]	; (8010fe4 <ip4_input+0x240>)
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010fba:	4b0a      	ldr	r3, [pc, #40]	; (8010fe4 <ip4_input+0x240>)
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010fc0:	4b08      	ldr	r3, [pc, #32]	; (8010fe4 <ip4_input+0x240>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010fc6:	4b07      	ldr	r3, [pc, #28]	; (8010fe4 <ip4_input+0x240>)
 8010fc8:	2200      	movs	r2, #0
 8010fca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010fcc:	4b05      	ldr	r3, [pc, #20]	; (8010fe4 <ip4_input+0x240>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010fd2:	4b04      	ldr	r3, [pc, #16]	; (8010fe4 <ip4_input+0x240>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010fd8:	2300      	movs	r3, #0
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3718      	adds	r7, #24
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	20007c78 	.word	0x20007c78
 8010fe8:	2000d580 	.word	0x2000d580

08010fec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b08a      	sub	sp, #40	; 0x28
 8010ff0:	af04      	add	r7, sp, #16
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
 8010ff8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d009      	beq.n	8011018 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d003      	beq.n	8011012 <ip4_output_if+0x26>
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d102      	bne.n	8011018 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011014:	3304      	adds	r3, #4
 8011016:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011018:	78fa      	ldrb	r2, [r7, #3]
 801101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101c:	9302      	str	r3, [sp, #8]
 801101e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011022:	9301      	str	r3, [sp, #4]
 8011024:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011028:	9300      	str	r3, [sp, #0]
 801102a:	4613      	mov	r3, r2
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	6979      	ldr	r1, [r7, #20]
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	f000 f805 	bl	8011040 <ip4_output_if_src>
 8011036:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011038:	4618      	mov	r0, r3
 801103a:	3718      	adds	r7, #24
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b088      	sub	sp, #32
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
 801104c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	7b9b      	ldrb	r3, [r3, #14]
 8011052:	2b01      	cmp	r3, #1
 8011054:	d006      	beq.n	8011064 <ip4_output_if_src+0x24>
 8011056:	4b4b      	ldr	r3, [pc, #300]	; (8011184 <ip4_output_if_src+0x144>)
 8011058:	f44f 7255 	mov.w	r2, #852	; 0x354
 801105c:	494a      	ldr	r1, [pc, #296]	; (8011188 <ip4_output_if_src+0x148>)
 801105e:	484b      	ldr	r0, [pc, #300]	; (801118c <ip4_output_if_src+0x14c>)
 8011060:	f001 fabc 	bl	80125dc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d060      	beq.n	801112c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801106a:	2314      	movs	r3, #20
 801106c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801106e:	2114      	movs	r1, #20
 8011070:	68f8      	ldr	r0, [r7, #12]
 8011072:	f7f8 fd63 	bl	8009b3c <pbuf_add_header>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d002      	beq.n	8011082 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801107c:	f06f 0301 	mvn.w	r3, #1
 8011080:	e07c      	b.n	801117c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	895b      	ldrh	r3, [r3, #10]
 801108c:	2b13      	cmp	r3, #19
 801108e:	d806      	bhi.n	801109e <ip4_output_if_src+0x5e>
 8011090:	4b3c      	ldr	r3, [pc, #240]	; (8011184 <ip4_output_if_src+0x144>)
 8011092:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011096:	493e      	ldr	r1, [pc, #248]	; (8011190 <ip4_output_if_src+0x150>)
 8011098:	483c      	ldr	r0, [pc, #240]	; (801118c <ip4_output_if_src+0x14c>)
 801109a:	f001 fa9f 	bl	80125dc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801109e:	69fb      	ldr	r3, [r7, #28]
 80110a0:	78fa      	ldrb	r2, [r7, #3]
 80110a2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80110aa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	69fb      	ldr	r3, [r7, #28]
 80110b2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80110b4:	8b7b      	ldrh	r3, [r7, #26]
 80110b6:	089b      	lsrs	r3, r3, #2
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110c0:	b2da      	uxtb	r2, r3
 80110c2:	69fb      	ldr	r3, [r7, #28]
 80110c4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80110cc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	891b      	ldrh	r3, [r3, #8]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7f7 fa1c 	bl	8008510 <lwip_htons>
 80110d8:	4603      	mov	r3, r0
 80110da:	461a      	mov	r2, r3
 80110dc:	69fb      	ldr	r3, [r7, #28]
 80110de:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	2200      	movs	r2, #0
 80110e4:	719a      	strb	r2, [r3, #6]
 80110e6:	2200      	movs	r2, #0
 80110e8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80110ea:	4b2a      	ldr	r3, [pc, #168]	; (8011194 <ip4_output_if_src+0x154>)
 80110ec:	881b      	ldrh	r3, [r3, #0]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7f7 fa0e 	bl	8008510 <lwip_htons>
 80110f4:	4603      	mov	r3, r0
 80110f6:	461a      	mov	r2, r3
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80110fc:	4b25      	ldr	r3, [pc, #148]	; (8011194 <ip4_output_if_src+0x154>)
 80110fe:	881b      	ldrh	r3, [r3, #0]
 8011100:	3301      	adds	r3, #1
 8011102:	b29a      	uxth	r2, r3
 8011104:	4b23      	ldr	r3, [pc, #140]	; (8011194 <ip4_output_if_src+0x154>)
 8011106:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d104      	bne.n	8011118 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801110e:	4b22      	ldr	r3, [pc, #136]	; (8011198 <ip4_output_if_src+0x158>)
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	60da      	str	r2, [r3, #12]
 8011116:	e003      	b.n	8011120 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	2200      	movs	r2, #0
 8011124:	729a      	strb	r2, [r3, #10]
 8011126:	2200      	movs	r2, #0
 8011128:	72da      	strb	r2, [r3, #11]
 801112a:	e00f      	b.n	801114c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	895b      	ldrh	r3, [r3, #10]
 8011130:	2b13      	cmp	r3, #19
 8011132:	d802      	bhi.n	801113a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011134:	f06f 0301 	mvn.w	r3, #1
 8011138:	e020      	b.n	801117c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	691b      	ldr	r3, [r3, #16]
 8011144:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011146:	f107 0314 	add.w	r3, r7, #20
 801114a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00c      	beq.n	801116e <ip4_output_if_src+0x12e>
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	891a      	ldrh	r2, [r3, #8]
 8011158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801115c:	429a      	cmp	r2, r3
 801115e:	d906      	bls.n	801116e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011164:	68f8      	ldr	r0, [r7, #12]
 8011166:	f000 fd53 	bl	8011c10 <ip4_frag>
 801116a:	4603      	mov	r3, r0
 801116c:	e006      	b.n	801117c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011170:	695b      	ldr	r3, [r3, #20]
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	68f9      	ldr	r1, [r7, #12]
 8011176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011178:	4798      	blx	r3
 801117a:	4603      	mov	r3, r0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3720      	adds	r7, #32
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	08015c08 	.word	0x08015c08
 8011188:	08015c3c 	.word	0x08015c3c
 801118c:	08015c48 	.word	0x08015c48
 8011190:	08015c70 	.word	0x08015c70
 8011194:	2000d6de 	.word	0x2000d6de
 8011198:	080160a8 	.word	0x080160a8

0801119c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801119c:	b480      	push	{r7}
 801119e:	b085      	sub	sp, #20
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b0:	d002      	beq.n	80111b8 <ip4_addr_isbroadcast_u32+0x1c>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d101      	bne.n	80111bc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80111b8:	2301      	movs	r3, #1
 80111ba:	e02a      	b.n	8011212 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111c2:	f003 0302 	and.w	r3, r3, #2
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d101      	bne.n	80111ce <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80111ca:	2300      	movs	r3, #0
 80111cc:	e021      	b.n	8011212 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	3304      	adds	r3, #4
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	687a      	ldr	r2, [r7, #4]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d101      	bne.n	80111de <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80111da:	2300      	movs	r3, #0
 80111dc:	e019      	b.n	8011212 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80111de:	68fa      	ldr	r2, [r7, #12]
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	3304      	adds	r3, #4
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	405a      	eors	r2, r3
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	3308      	adds	r3, #8
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4013      	ands	r3, r2
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d10d      	bne.n	8011210 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	3308      	adds	r3, #8
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	43da      	mvns	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	3308      	adds	r3, #8
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011208:	429a      	cmp	r2, r3
 801120a:	d101      	bne.n	8011210 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801120c:	2301      	movs	r3, #1
 801120e:	e000      	b.n	8011212 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011210:	2300      	movs	r3, #0
  }
}
 8011212:	4618      	mov	r0, r3
 8011214:	3714      	adds	r7, #20
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr
	...

08011220 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801122a:	4b12      	ldr	r3, [pc, #72]	; (8011274 <ip_reass_tmr+0x54>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011230:	e018      	b.n	8011264 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	7fdb      	ldrb	r3, [r3, #31]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00b      	beq.n	8011252 <ip_reass_tmr+0x32>
      r->timer--;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	7fdb      	ldrb	r3, [r3, #31]
 801123e:	3b01      	subs	r3, #1
 8011240:	b2da      	uxtb	r2, r3
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	60fb      	str	r3, [r7, #12]
 8011250:	e008      	b.n	8011264 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801125c:	68b9      	ldr	r1, [r7, #8]
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 f80a 	bl	8011278 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d1e3      	bne.n	8011232 <ip_reass_tmr+0x12>
    }
  }
}
 801126a:	bf00      	nop
 801126c:	bf00      	nop
 801126e:	3710      	adds	r7, #16
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	2000d6e0 	.word	0x2000d6e0

08011278 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b088      	sub	sp, #32
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011282:	2300      	movs	r3, #0
 8011284:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011286:	683a      	ldr	r2, [r7, #0]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	429a      	cmp	r2, r3
 801128c:	d105      	bne.n	801129a <ip_reass_free_complete_datagram+0x22>
 801128e:	4b45      	ldr	r3, [pc, #276]	; (80113a4 <ip_reass_free_complete_datagram+0x12c>)
 8011290:	22ab      	movs	r2, #171	; 0xab
 8011292:	4945      	ldr	r1, [pc, #276]	; (80113a8 <ip_reass_free_complete_datagram+0x130>)
 8011294:	4845      	ldr	r0, [pc, #276]	; (80113ac <ip_reass_free_complete_datagram+0x134>)
 8011296:	f001 f9a1 	bl	80125dc <iprintf>
  if (prev != NULL) {
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d00a      	beq.n	80112b6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d005      	beq.n	80112b6 <ip_reass_free_complete_datagram+0x3e>
 80112aa:	4b3e      	ldr	r3, [pc, #248]	; (80113a4 <ip_reass_free_complete_datagram+0x12c>)
 80112ac:	22ad      	movs	r2, #173	; 0xad
 80112ae:	4940      	ldr	r1, [pc, #256]	; (80113b0 <ip_reass_free_complete_datagram+0x138>)
 80112b0:	483e      	ldr	r0, [pc, #248]	; (80113ac <ip_reass_free_complete_datagram+0x134>)
 80112b2:	f001 f993 	bl	80125dc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	889b      	ldrh	r3, [r3, #4]
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d12a      	bne.n	801131e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80112d6:	69bb      	ldr	r3, [r7, #24]
 80112d8:	6858      	ldr	r0, [r3, #4]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	3308      	adds	r3, #8
 80112de:	2214      	movs	r2, #20
 80112e0:	4619      	mov	r1, r3
 80112e2:	f001 f8d0 	bl	8012486 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80112e6:	2101      	movs	r1, #1
 80112e8:	69b8      	ldr	r0, [r7, #24]
 80112ea:	f7ff fc47 	bl	8010b7c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80112ee:	69b8      	ldr	r0, [r7, #24]
 80112f0:	f7f8 fd48 	bl	8009d84 <pbuf_clen>
 80112f4:	4603      	mov	r3, r0
 80112f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80112f8:	8bfa      	ldrh	r2, [r7, #30]
 80112fa:	8a7b      	ldrh	r3, [r7, #18]
 80112fc:	4413      	add	r3, r2
 80112fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011302:	db05      	blt.n	8011310 <ip_reass_free_complete_datagram+0x98>
 8011304:	4b27      	ldr	r3, [pc, #156]	; (80113a4 <ip_reass_free_complete_datagram+0x12c>)
 8011306:	22bc      	movs	r2, #188	; 0xbc
 8011308:	492a      	ldr	r1, [pc, #168]	; (80113b4 <ip_reass_free_complete_datagram+0x13c>)
 801130a:	4828      	ldr	r0, [pc, #160]	; (80113ac <ip_reass_free_complete_datagram+0x134>)
 801130c:	f001 f966 	bl	80125dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011310:	8bfa      	ldrh	r2, [r7, #30]
 8011312:	8a7b      	ldrh	r3, [r7, #18]
 8011314:	4413      	add	r3, r2
 8011316:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011318:	69b8      	ldr	r0, [r7, #24]
 801131a:	f7f8 fca5 	bl	8009c68 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011324:	e01f      	b.n	8011366 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801132c:	69bb      	ldr	r3, [r7, #24]
 801132e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011336:	68f8      	ldr	r0, [r7, #12]
 8011338:	f7f8 fd24 	bl	8009d84 <pbuf_clen>
 801133c:	4603      	mov	r3, r0
 801133e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011340:	8bfa      	ldrh	r2, [r7, #30]
 8011342:	8a7b      	ldrh	r3, [r7, #18]
 8011344:	4413      	add	r3, r2
 8011346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801134a:	db05      	blt.n	8011358 <ip_reass_free_complete_datagram+0xe0>
 801134c:	4b15      	ldr	r3, [pc, #84]	; (80113a4 <ip_reass_free_complete_datagram+0x12c>)
 801134e:	22cc      	movs	r2, #204	; 0xcc
 8011350:	4918      	ldr	r1, [pc, #96]	; (80113b4 <ip_reass_free_complete_datagram+0x13c>)
 8011352:	4816      	ldr	r0, [pc, #88]	; (80113ac <ip_reass_free_complete_datagram+0x134>)
 8011354:	f001 f942 	bl	80125dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011358:	8bfa      	ldrh	r2, [r7, #30]
 801135a:	8a7b      	ldrh	r3, [r7, #18]
 801135c:	4413      	add	r3, r2
 801135e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f7f8 fc81 	bl	8009c68 <pbuf_free>
  while (p != NULL) {
 8011366:	69bb      	ldr	r3, [r7, #24]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1dc      	bne.n	8011326 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801136c:	6839      	ldr	r1, [r7, #0]
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 f8c2 	bl	80114f8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011374:	4b10      	ldr	r3, [pc, #64]	; (80113b8 <ip_reass_free_complete_datagram+0x140>)
 8011376:	881b      	ldrh	r3, [r3, #0]
 8011378:	8bfa      	ldrh	r2, [r7, #30]
 801137a:	429a      	cmp	r2, r3
 801137c:	d905      	bls.n	801138a <ip_reass_free_complete_datagram+0x112>
 801137e:	4b09      	ldr	r3, [pc, #36]	; (80113a4 <ip_reass_free_complete_datagram+0x12c>)
 8011380:	22d2      	movs	r2, #210	; 0xd2
 8011382:	490e      	ldr	r1, [pc, #56]	; (80113bc <ip_reass_free_complete_datagram+0x144>)
 8011384:	4809      	ldr	r0, [pc, #36]	; (80113ac <ip_reass_free_complete_datagram+0x134>)
 8011386:	f001 f929 	bl	80125dc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801138a:	4b0b      	ldr	r3, [pc, #44]	; (80113b8 <ip_reass_free_complete_datagram+0x140>)
 801138c:	881a      	ldrh	r2, [r3, #0]
 801138e:	8bfb      	ldrh	r3, [r7, #30]
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	b29a      	uxth	r2, r3
 8011394:	4b08      	ldr	r3, [pc, #32]	; (80113b8 <ip_reass_free_complete_datagram+0x140>)
 8011396:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011398:	8bfb      	ldrh	r3, [r7, #30]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3720      	adds	r7, #32
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	08015ca0 	.word	0x08015ca0
 80113a8:	08015cdc 	.word	0x08015cdc
 80113ac:	08015ce8 	.word	0x08015ce8
 80113b0:	08015d10 	.word	0x08015d10
 80113b4:	08015d24 	.word	0x08015d24
 80113b8:	2000d6e4 	.word	0x2000d6e4
 80113bc:	08015d44 	.word	0x08015d44

080113c0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b08a      	sub	sp, #40	; 0x28
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80113ca:	2300      	movs	r3, #0
 80113cc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80113ce:	2300      	movs	r3, #0
 80113d0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80113d2:	2300      	movs	r3, #0
 80113d4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80113d6:	2300      	movs	r3, #0
 80113d8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80113da:	2300      	movs	r3, #0
 80113dc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80113de:	4b28      	ldr	r3, [pc, #160]	; (8011480 <ip_reass_remove_oldest_datagram+0xc0>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80113e4:	e030      	b.n	8011448 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80113e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e8:	695a      	ldr	r2, [r3, #20]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d10c      	bne.n	801140c <ip_reass_remove_oldest_datagram+0x4c>
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	699a      	ldr	r2, [r3, #24]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	691b      	ldr	r3, [r3, #16]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d106      	bne.n	801140c <ip_reass_remove_oldest_datagram+0x4c>
 80113fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011400:	899a      	ldrh	r2, [r3, #12]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	889b      	ldrh	r3, [r3, #4]
 8011406:	b29b      	uxth	r3, r3
 8011408:	429a      	cmp	r2, r3
 801140a:	d014      	beq.n	8011436 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	3301      	adds	r3, #1
 8011410:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011412:	6a3b      	ldr	r3, [r7, #32]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d104      	bne.n	8011422 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	61bb      	str	r3, [r7, #24]
 8011420:	e009      	b.n	8011436 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011424:	7fda      	ldrb	r2, [r3, #31]
 8011426:	6a3b      	ldr	r3, [r7, #32]
 8011428:	7fdb      	ldrb	r3, [r3, #31]
 801142a:	429a      	cmp	r2, r3
 801142c:	d803      	bhi.n	8011436 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d001      	beq.n	8011442 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011440:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144a:	2b00      	cmp	r3, #0
 801144c:	d1cb      	bne.n	80113e6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801144e:	6a3b      	ldr	r3, [r7, #32]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d008      	beq.n	8011466 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011454:	69b9      	ldr	r1, [r7, #24]
 8011456:	6a38      	ldr	r0, [r7, #32]
 8011458:	f7ff ff0e 	bl	8011278 <ip_reass_free_complete_datagram>
 801145c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801145e:	697a      	ldr	r2, [r7, #20]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	4413      	add	r3, r2
 8011464:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011466:	697a      	ldr	r2, [r7, #20]
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	429a      	cmp	r2, r3
 801146c:	da02      	bge.n	8011474 <ip_reass_remove_oldest_datagram+0xb4>
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	2b01      	cmp	r3, #1
 8011472:	dcac      	bgt.n	80113ce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011474:	697b      	ldr	r3, [r7, #20]
}
 8011476:	4618      	mov	r0, r3
 8011478:	3728      	adds	r7, #40	; 0x28
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	2000d6e0 	.word	0x2000d6e0

08011484 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801148e:	2004      	movs	r0, #4
 8011490:	f7f7 fcf4 	bl	8008e7c <memp_malloc>
 8011494:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d110      	bne.n	80114be <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801149c:	6839      	ldr	r1, [r7, #0]
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f7ff ff8e 	bl	80113c0 <ip_reass_remove_oldest_datagram>
 80114a4:	4602      	mov	r2, r0
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	4293      	cmp	r3, r2
 80114aa:	dc03      	bgt.n	80114b4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80114ac:	2004      	movs	r0, #4
 80114ae:	f7f7 fce5 	bl	8008e7c <memp_malloc>
 80114b2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d101      	bne.n	80114be <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80114ba:	2300      	movs	r3, #0
 80114bc:	e016      	b.n	80114ec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80114be:	2220      	movs	r2, #32
 80114c0:	2100      	movs	r1, #0
 80114c2:	68f8      	ldr	r0, [r7, #12]
 80114c4:	f000 ffed 	bl	80124a2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	220f      	movs	r2, #15
 80114cc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80114ce:	4b09      	ldr	r3, [pc, #36]	; (80114f4 <ip_reass_enqueue_new_datagram+0x70>)
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80114d6:	4a07      	ldr	r2, [pc, #28]	; (80114f4 <ip_reass_enqueue_new_datagram+0x70>)
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	3308      	adds	r3, #8
 80114e0:	2214      	movs	r2, #20
 80114e2:	6879      	ldr	r1, [r7, #4]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f000 ffce 	bl	8012486 <memcpy>
  return ipr;
 80114ea:	68fb      	ldr	r3, [r7, #12]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3710      	adds	r7, #16
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	2000d6e0 	.word	0x2000d6e0

080114f8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011502:	4b10      	ldr	r3, [pc, #64]	; (8011544 <ip_reass_dequeue_datagram+0x4c>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	429a      	cmp	r2, r3
 801150a:	d104      	bne.n	8011516 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4a0c      	ldr	r2, [pc, #48]	; (8011544 <ip_reass_dequeue_datagram+0x4c>)
 8011512:	6013      	str	r3, [r2, #0]
 8011514:	e00d      	b.n	8011532 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d106      	bne.n	801152a <ip_reass_dequeue_datagram+0x32>
 801151c:	4b0a      	ldr	r3, [pc, #40]	; (8011548 <ip_reass_dequeue_datagram+0x50>)
 801151e:	f240 1245 	movw	r2, #325	; 0x145
 8011522:	490a      	ldr	r1, [pc, #40]	; (801154c <ip_reass_dequeue_datagram+0x54>)
 8011524:	480a      	ldr	r0, [pc, #40]	; (8011550 <ip_reass_dequeue_datagram+0x58>)
 8011526:	f001 f859 	bl	80125dc <iprintf>
    prev->next = ipr->next;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681a      	ldr	r2, [r3, #0]
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011532:	6879      	ldr	r1, [r7, #4]
 8011534:	2004      	movs	r0, #4
 8011536:	f7f7 fcf3 	bl	8008f20 <memp_free>
}
 801153a:	bf00      	nop
 801153c:	3708      	adds	r7, #8
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	2000d6e0 	.word	0x2000d6e0
 8011548:	08015ca0 	.word	0x08015ca0
 801154c:	08015d68 	.word	0x08015d68
 8011550:	08015ce8 	.word	0x08015ce8

08011554 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b08c      	sub	sp, #48	; 0x30
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011560:	2300      	movs	r3, #0
 8011562:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011564:	2301      	movs	r3, #1
 8011566:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	685b      	ldr	r3, [r3, #4]
 801156c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	885b      	ldrh	r3, [r3, #2]
 8011572:	b29b      	uxth	r3, r3
 8011574:	4618      	mov	r0, r3
 8011576:	f7f6 ffcb 	bl	8008510 <lwip_htons>
 801157a:	4603      	mov	r3, r0
 801157c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801157e:	69fb      	ldr	r3, [r7, #28]
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	f003 030f 	and.w	r3, r3, #15
 8011586:	b2db      	uxtb	r3, r3
 8011588:	009b      	lsls	r3, r3, #2
 801158a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801158c:	7e7b      	ldrb	r3, [r7, #25]
 801158e:	b29b      	uxth	r3, r3
 8011590:	8b7a      	ldrh	r2, [r7, #26]
 8011592:	429a      	cmp	r2, r3
 8011594:	d202      	bcs.n	801159c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011596:	f04f 33ff 	mov.w	r3, #4294967295
 801159a:	e135      	b.n	8011808 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801159c:	7e7b      	ldrb	r3, [r7, #25]
 801159e:	b29b      	uxth	r3, r3
 80115a0:	8b7a      	ldrh	r2, [r7, #26]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80115a6:	69fb      	ldr	r3, [r7, #28]
 80115a8:	88db      	ldrh	r3, [r3, #6]
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7f6 ffaf 	bl	8008510 <lwip_htons>
 80115b2:	4603      	mov	r3, r0
 80115b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	00db      	lsls	r3, r3, #3
 80115bc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80115c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c6:	2200      	movs	r2, #0
 80115c8:	701a      	strb	r2, [r3, #0]
 80115ca:	2200      	movs	r2, #0
 80115cc:	705a      	strb	r2, [r3, #1]
 80115ce:	2200      	movs	r2, #0
 80115d0:	709a      	strb	r2, [r3, #2]
 80115d2:	2200      	movs	r2, #0
 80115d4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80115d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d8:	8afa      	ldrh	r2, [r7, #22]
 80115da:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80115dc:	8afa      	ldrh	r2, [r7, #22]
 80115de:	8b7b      	ldrh	r3, [r7, #26]
 80115e0:	4413      	add	r3, r2
 80115e2:	b29a      	uxth	r2, r3
 80115e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80115e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ea:	88db      	ldrh	r3, [r3, #6]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	8afa      	ldrh	r2, [r7, #22]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d902      	bls.n	80115fa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80115f4:	f04f 33ff 	mov.w	r3, #4294967295
 80115f8:	e106      	b.n	8011808 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	627b      	str	r3, [r7, #36]	; 0x24
 8011600:	e068      	b.n	80116d4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160a:	889b      	ldrh	r3, [r3, #4]
 801160c:	b29a      	uxth	r2, r3
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	889b      	ldrh	r3, [r3, #4]
 8011612:	b29b      	uxth	r3, r3
 8011614:	429a      	cmp	r2, r3
 8011616:	d235      	bcs.n	8011684 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801161c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011620:	2b00      	cmp	r3, #0
 8011622:	d020      	beq.n	8011666 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011626:	889b      	ldrh	r3, [r3, #4]
 8011628:	b29a      	uxth	r2, r3
 801162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162c:	88db      	ldrh	r3, [r3, #6]
 801162e:	b29b      	uxth	r3, r3
 8011630:	429a      	cmp	r2, r3
 8011632:	d307      	bcc.n	8011644 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011636:	88db      	ldrh	r3, [r3, #6]
 8011638:	b29a      	uxth	r2, r3
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	889b      	ldrh	r3, [r3, #4]
 801163e:	b29b      	uxth	r3, r3
 8011640:	429a      	cmp	r2, r3
 8011642:	d902      	bls.n	801164a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011644:	f04f 33ff 	mov.w	r3, #4294967295
 8011648:	e0de      	b.n	8011808 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164c:	68ba      	ldr	r2, [r7, #8]
 801164e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011652:	88db      	ldrh	r3, [r3, #6]
 8011654:	b29a      	uxth	r2, r3
 8011656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011658:	889b      	ldrh	r3, [r3, #4]
 801165a:	b29b      	uxth	r3, r3
 801165c:	429a      	cmp	r2, r3
 801165e:	d03d      	beq.n	80116dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011660:	2300      	movs	r3, #0
 8011662:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011664:	e03a      	b.n	80116dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011668:	88db      	ldrh	r3, [r3, #6]
 801166a:	b29a      	uxth	r2, r3
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	889b      	ldrh	r3, [r3, #4]
 8011670:	b29b      	uxth	r3, r3
 8011672:	429a      	cmp	r2, r3
 8011674:	d902      	bls.n	801167c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011676:	f04f 33ff 	mov.w	r3, #4294967295
 801167a:	e0c5      	b.n	8011808 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	68ba      	ldr	r2, [r7, #8]
 8011680:	605a      	str	r2, [r3, #4]
      break;
 8011682:	e02b      	b.n	80116dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011686:	889b      	ldrh	r3, [r3, #4]
 8011688:	b29a      	uxth	r2, r3
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	889b      	ldrh	r3, [r3, #4]
 801168e:	b29b      	uxth	r3, r3
 8011690:	429a      	cmp	r2, r3
 8011692:	d102      	bne.n	801169a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011694:	f04f 33ff 	mov.w	r3, #4294967295
 8011698:	e0b6      	b.n	8011808 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169c:	889b      	ldrh	r3, [r3, #4]
 801169e:	b29a      	uxth	r2, r3
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	88db      	ldrh	r3, [r3, #6]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d202      	bcs.n	80116b0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80116aa:	f04f 33ff 	mov.w	r3, #4294967295
 80116ae:	e0ab      	b.n	8011808 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80116b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d009      	beq.n	80116ca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80116b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b8:	88db      	ldrh	r3, [r3, #6]
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	889b      	ldrh	r3, [r3, #4]
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d001      	beq.n	80116ca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80116c6:	2300      	movs	r3, #0
 80116c8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80116d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d193      	bne.n	8011602 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80116da:	e000      	b.n	80116de <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80116dc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80116de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d12d      	bne.n	8011740 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80116e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d01c      	beq.n	8011724 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80116ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ec:	88db      	ldrh	r3, [r3, #6]
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f2:	889b      	ldrh	r3, [r3, #4]
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d906      	bls.n	8011708 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80116fa:	4b45      	ldr	r3, [pc, #276]	; (8011810 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80116fc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011700:	4944      	ldr	r1, [pc, #272]	; (8011814 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011702:	4845      	ldr	r0, [pc, #276]	; (8011818 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011704:	f000 ff6a 	bl	80125dc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170a:	68ba      	ldr	r2, [r7, #8]
 801170c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011710:	88db      	ldrh	r3, [r3, #6]
 8011712:	b29a      	uxth	r2, r3
 8011714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011716:	889b      	ldrh	r3, [r3, #4]
 8011718:	b29b      	uxth	r3, r3
 801171a:	429a      	cmp	r2, r3
 801171c:	d010      	beq.n	8011740 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801171e:	2300      	movs	r3, #0
 8011720:	623b      	str	r3, [r7, #32]
 8011722:	e00d      	b.n	8011740 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d006      	beq.n	801173a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801172c:	4b38      	ldr	r3, [pc, #224]	; (8011810 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801172e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011732:	493a      	ldr	r1, [pc, #232]	; (801181c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011734:	4838      	ldr	r0, [pc, #224]	; (8011818 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011736:	f000 ff51 	bl	80125dc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	68ba      	ldr	r2, [r7, #8]
 801173e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d105      	bne.n	8011752 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	7f9b      	ldrb	r3, [r3, #30]
 801174a:	f003 0301 	and.w	r3, r3, #1
 801174e:	2b00      	cmp	r3, #0
 8011750:	d059      	beq.n	8011806 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011752:	6a3b      	ldr	r3, [r7, #32]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d04f      	beq.n	80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d006      	beq.n	801176e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	889b      	ldrh	r3, [r3, #4]
 8011768:	b29b      	uxth	r3, r3
 801176a:	2b00      	cmp	r3, #0
 801176c:	d002      	beq.n	8011774 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	623b      	str	r3, [r7, #32]
 8011772:	e041      	b.n	80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011776:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801177e:	e012      	b.n	80117a6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011788:	88db      	ldrh	r3, [r3, #6]
 801178a:	b29a      	uxth	r2, r3
 801178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178e:	889b      	ldrh	r3, [r3, #4]
 8011790:	b29b      	uxth	r3, r3
 8011792:	429a      	cmp	r2, r3
 8011794:	d002      	beq.n	801179c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011796:	2300      	movs	r3, #0
 8011798:	623b      	str	r3, [r7, #32]
            break;
 801179a:	e007      	b.n	80117ac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80117a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80117a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d1e9      	bne.n	8011780 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80117ac:	6a3b      	ldr	r3, [r7, #32]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d022      	beq.n	80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d106      	bne.n	80117c8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80117ba:	4b15      	ldr	r3, [pc, #84]	; (8011810 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80117bc:	f240 12df 	movw	r2, #479	; 0x1df
 80117c0:	4917      	ldr	r1, [pc, #92]	; (8011820 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80117c2:	4815      	ldr	r0, [pc, #84]	; (8011818 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80117c4:	f000 ff0a 	bl	80125dc <iprintf>
          LWIP_ASSERT("sanity check",
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d106      	bne.n	80117e2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80117d4:	4b0e      	ldr	r3, [pc, #56]	; (8011810 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80117d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80117da:	4911      	ldr	r1, [pc, #68]	; (8011820 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80117dc:	480e      	ldr	r0, [pc, #56]	; (8011818 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80117de:	f000 fefd 	bl	80125dc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80117e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d006      	beq.n	80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80117ea:	4b09      	ldr	r3, [pc, #36]	; (8011810 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80117ec:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80117f0:	490c      	ldr	r1, [pc, #48]	; (8011824 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80117f2:	4809      	ldr	r0, [pc, #36]	; (8011818 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80117f4:	f000 fef2 	bl	80125dc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80117f8:	6a3b      	ldr	r3, [r7, #32]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	bf14      	ite	ne
 80117fe:	2301      	movne	r3, #1
 8011800:	2300      	moveq	r3, #0
 8011802:	b2db      	uxtb	r3, r3
 8011804:	e000      	b.n	8011808 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011806:	2300      	movs	r3, #0
}
 8011808:	4618      	mov	r0, r3
 801180a:	3730      	adds	r7, #48	; 0x30
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}
 8011810:	08015ca0 	.word	0x08015ca0
 8011814:	08015d84 	.word	0x08015d84
 8011818:	08015ce8 	.word	0x08015ce8
 801181c:	08015da4 	.word	0x08015da4
 8011820:	08015ddc 	.word	0x08015ddc
 8011824:	08015dec 	.word	0x08015dec

08011828 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b08e      	sub	sp, #56	; 0x38
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	f003 030f 	and.w	r3, r3, #15
 801183e:	b2db      	uxtb	r3, r3
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	b2db      	uxtb	r3, r3
 8011844:	2b14      	cmp	r3, #20
 8011846:	f040 8171 	bne.w	8011b2c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184c:	88db      	ldrh	r3, [r3, #6]
 801184e:	b29b      	uxth	r3, r3
 8011850:	4618      	mov	r0, r3
 8011852:	f7f6 fe5d 	bl	8008510 <lwip_htons>
 8011856:	4603      	mov	r3, r0
 8011858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801185c:	b29b      	uxth	r3, r3
 801185e:	00db      	lsls	r3, r3, #3
 8011860:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011864:	885b      	ldrh	r3, [r3, #2]
 8011866:	b29b      	uxth	r3, r3
 8011868:	4618      	mov	r0, r3
 801186a:	f7f6 fe51 	bl	8008510 <lwip_htons>
 801186e:	4603      	mov	r3, r0
 8011870:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	f003 030f 	and.w	r3, r3, #15
 801187a:	b2db      	uxtb	r3, r3
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011886:	b29b      	uxth	r3, r3
 8011888:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801188a:	429a      	cmp	r2, r3
 801188c:	f0c0 8150 	bcc.w	8011b30 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011894:	b29b      	uxth	r3, r3
 8011896:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011898:	1ad3      	subs	r3, r2, r3
 801189a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f7f8 fa71 	bl	8009d84 <pbuf_clen>
 80118a2:	4603      	mov	r3, r0
 80118a4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80118a6:	4b8c      	ldr	r3, [pc, #560]	; (8011ad8 <ip4_reass+0x2b0>)
 80118a8:	881b      	ldrh	r3, [r3, #0]
 80118aa:	461a      	mov	r2, r3
 80118ac:	8c3b      	ldrh	r3, [r7, #32]
 80118ae:	4413      	add	r3, r2
 80118b0:	2b0a      	cmp	r3, #10
 80118b2:	dd10      	ble.n	80118d6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80118b4:	8c3b      	ldrh	r3, [r7, #32]
 80118b6:	4619      	mov	r1, r3
 80118b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118ba:	f7ff fd81 	bl	80113c0 <ip_reass_remove_oldest_datagram>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	f000 8137 	beq.w	8011b34 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80118c6:	4b84      	ldr	r3, [pc, #528]	; (8011ad8 <ip4_reass+0x2b0>)
 80118c8:	881b      	ldrh	r3, [r3, #0]
 80118ca:	461a      	mov	r2, r3
 80118cc:	8c3b      	ldrh	r3, [r7, #32]
 80118ce:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80118d0:	2b0a      	cmp	r3, #10
 80118d2:	f300 812f 	bgt.w	8011b34 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80118d6:	4b81      	ldr	r3, [pc, #516]	; (8011adc <ip4_reass+0x2b4>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	633b      	str	r3, [r7, #48]	; 0x30
 80118dc:	e015      	b.n	801190a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80118de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e0:	695a      	ldr	r2, [r3, #20]
 80118e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e4:	68db      	ldr	r3, [r3, #12]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d10c      	bne.n	8011904 <ip4_reass+0xdc>
 80118ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ec:	699a      	ldr	r2, [r3, #24]
 80118ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f0:	691b      	ldr	r3, [r3, #16]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d106      	bne.n	8011904 <ip4_reass+0xdc>
 80118f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f8:	899a      	ldrh	r2, [r3, #12]
 80118fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118fc:	889b      	ldrh	r3, [r3, #4]
 80118fe:	b29b      	uxth	r3, r3
 8011900:	429a      	cmp	r2, r3
 8011902:	d006      	beq.n	8011912 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	633b      	str	r3, [r7, #48]	; 0x30
 801190a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801190c:	2b00      	cmp	r3, #0
 801190e:	d1e6      	bne.n	80118de <ip4_reass+0xb6>
 8011910:	e000      	b.n	8011914 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011912:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011916:	2b00      	cmp	r3, #0
 8011918:	d109      	bne.n	801192e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801191a:	8c3b      	ldrh	r3, [r7, #32]
 801191c:	4619      	mov	r1, r3
 801191e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011920:	f7ff fdb0 	bl	8011484 <ip_reass_enqueue_new_datagram>
 8011924:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011928:	2b00      	cmp	r3, #0
 801192a:	d11c      	bne.n	8011966 <ip4_reass+0x13e>
      goto nullreturn;
 801192c:	e105      	b.n	8011b3a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011930:	88db      	ldrh	r3, [r3, #6]
 8011932:	b29b      	uxth	r3, r3
 8011934:	4618      	mov	r0, r3
 8011936:	f7f6 fdeb 	bl	8008510 <lwip_htons>
 801193a:	4603      	mov	r3, r0
 801193c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011940:	2b00      	cmp	r3, #0
 8011942:	d110      	bne.n	8011966 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011946:	89db      	ldrh	r3, [r3, #14]
 8011948:	4618      	mov	r0, r3
 801194a:	f7f6 fde1 	bl	8008510 <lwip_htons>
 801194e:	4603      	mov	r3, r0
 8011950:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011954:	2b00      	cmp	r3, #0
 8011956:	d006      	beq.n	8011966 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195a:	3308      	adds	r3, #8
 801195c:	2214      	movs	r2, #20
 801195e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011960:	4618      	mov	r0, r3
 8011962:	f000 fd90 	bl	8012486 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011968:	88db      	ldrh	r3, [r3, #6]
 801196a:	b29b      	uxth	r3, r3
 801196c:	f003 0320 	and.w	r3, r3, #32
 8011970:	2b00      	cmp	r3, #0
 8011972:	bf0c      	ite	eq
 8011974:	2301      	moveq	r3, #1
 8011976:	2300      	movne	r3, #0
 8011978:	b2db      	uxtb	r3, r3
 801197a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801197c:	69fb      	ldr	r3, [r7, #28]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00e      	beq.n	80119a0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011982:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011986:	4413      	add	r3, r2
 8011988:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801198a:	8b7a      	ldrh	r2, [r7, #26]
 801198c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801198e:	429a      	cmp	r2, r3
 8011990:	f0c0 80a0 	bcc.w	8011ad4 <ip4_reass+0x2ac>
 8011994:	8b7b      	ldrh	r3, [r7, #26]
 8011996:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801199a:	4293      	cmp	r3, r2
 801199c:	f200 809a 	bhi.w	8011ad4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80119a0:	69fa      	ldr	r2, [r7, #28]
 80119a2:	6879      	ldr	r1, [r7, #4]
 80119a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119a6:	f7ff fdd5 	bl	8011554 <ip_reass_chain_frag_into_datagram_and_validate>
 80119aa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119b2:	f000 809b 	beq.w	8011aec <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80119b6:	4b48      	ldr	r3, [pc, #288]	; (8011ad8 <ip4_reass+0x2b0>)
 80119b8:	881a      	ldrh	r2, [r3, #0]
 80119ba:	8c3b      	ldrh	r3, [r7, #32]
 80119bc:	4413      	add	r3, r2
 80119be:	b29a      	uxth	r2, r3
 80119c0:	4b45      	ldr	r3, [pc, #276]	; (8011ad8 <ip4_reass+0x2b0>)
 80119c2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d00d      	beq.n	80119e6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80119ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80119cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119ce:	4413      	add	r3, r2
 80119d0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80119d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d4:	8a7a      	ldrh	r2, [r7, #18]
 80119d6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80119d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119da:	7f9b      	ldrb	r3, [r3, #30]
 80119dc:	f043 0301 	orr.w	r3, r3, #1
 80119e0:	b2da      	uxtb	r2, r3
 80119e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d171      	bne.n	8011ad0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80119ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ee:	8b9b      	ldrh	r3, [r3, #28]
 80119f0:	3314      	adds	r3, #20
 80119f2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80119f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	685b      	ldr	r3, [r3, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80119fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a08:	3308      	adds	r3, #8
 8011a0a:	2214      	movs	r2, #20
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a10:	f000 fd39 	bl	8012486 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011a14:	8a3b      	ldrh	r3, [r7, #16]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7f6 fd7a 	bl	8008510 <lwip_htons>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	461a      	mov	r2, r3
 8011a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a22:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a26:	2200      	movs	r2, #0
 8011a28:	719a      	strb	r2, [r3, #6]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a30:	2200      	movs	r2, #0
 8011a32:	729a      	strb	r2, [r3, #10]
 8011a34:	2200      	movs	r2, #0
 8011a36:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011a3e:	e00d      	b.n	8011a5c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011a46:	2114      	movs	r1, #20
 8011a48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011a4a:	f7f8 f887 	bl	8009b5c <pbuf_remove_header>
      pbuf_cat(p, r);
 8011a4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f7f8 f9d7 	bl	8009e04 <pbuf_cat>
      r = iprh->next_pbuf;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d1ee      	bne.n	8011a40 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011a62:	4b1e      	ldr	r3, [pc, #120]	; (8011adc <ip4_reass+0x2b4>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d102      	bne.n	8011a72 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a70:	e010      	b.n	8011a94 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011a72:	4b1a      	ldr	r3, [pc, #104]	; (8011adc <ip4_reass+0x2b4>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a78:	e007      	b.n	8011a8a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d006      	beq.n	8011a92 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1f4      	bne.n	8011a7a <ip4_reass+0x252>
 8011a90:	e000      	b.n	8011a94 <ip4_reass+0x26c>
          break;
 8011a92:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011a94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a98:	f7ff fd2e 	bl	80114f8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f7f8 f971 	bl	8009d84 <pbuf_clen>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011aa6:	4b0c      	ldr	r3, [pc, #48]	; (8011ad8 <ip4_reass+0x2b0>)
 8011aa8:	881b      	ldrh	r3, [r3, #0]
 8011aaa:	8c3a      	ldrh	r2, [r7, #32]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d906      	bls.n	8011abe <ip4_reass+0x296>
 8011ab0:	4b0b      	ldr	r3, [pc, #44]	; (8011ae0 <ip4_reass+0x2b8>)
 8011ab2:	f240 229b 	movw	r2, #667	; 0x29b
 8011ab6:	490b      	ldr	r1, [pc, #44]	; (8011ae4 <ip4_reass+0x2bc>)
 8011ab8:	480b      	ldr	r0, [pc, #44]	; (8011ae8 <ip4_reass+0x2c0>)
 8011aba:	f000 fd8f 	bl	80125dc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011abe:	4b06      	ldr	r3, [pc, #24]	; (8011ad8 <ip4_reass+0x2b0>)
 8011ac0:	881a      	ldrh	r2, [r3, #0]
 8011ac2:	8c3b      	ldrh	r3, [r7, #32]
 8011ac4:	1ad3      	subs	r3, r2, r3
 8011ac6:	b29a      	uxth	r2, r3
 8011ac8:	4b03      	ldr	r3, [pc, #12]	; (8011ad8 <ip4_reass+0x2b0>)
 8011aca:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	e038      	b.n	8011b42 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	e036      	b.n	8011b42 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011ad4:	bf00      	nop
 8011ad6:	e00a      	b.n	8011aee <ip4_reass+0x2c6>
 8011ad8:	2000d6e4 	.word	0x2000d6e4
 8011adc:	2000d6e0 	.word	0x2000d6e0
 8011ae0:	08015ca0 	.word	0x08015ca0
 8011ae4:	08015e10 	.word	0x08015e10
 8011ae8:	08015ce8 	.word	0x08015ce8
    goto nullreturn_ipr;
 8011aec:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d106      	bne.n	8011b02 <ip4_reass+0x2da>
 8011af4:	4b15      	ldr	r3, [pc, #84]	; (8011b4c <ip4_reass+0x324>)
 8011af6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011afa:	4915      	ldr	r1, [pc, #84]	; (8011b50 <ip4_reass+0x328>)
 8011afc:	4815      	ldr	r0, [pc, #84]	; (8011b54 <ip4_reass+0x32c>)
 8011afe:	f000 fd6d 	bl	80125dc <iprintf>
  if (ipr->p == NULL) {
 8011b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d116      	bne.n	8011b38 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011b0a:	4b13      	ldr	r3, [pc, #76]	; (8011b58 <ip4_reass+0x330>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d006      	beq.n	8011b22 <ip4_reass+0x2fa>
 8011b14:	4b0d      	ldr	r3, [pc, #52]	; (8011b4c <ip4_reass+0x324>)
 8011b16:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011b1a:	4910      	ldr	r1, [pc, #64]	; (8011b5c <ip4_reass+0x334>)
 8011b1c:	480d      	ldr	r0, [pc, #52]	; (8011b54 <ip4_reass+0x32c>)
 8011b1e:	f000 fd5d 	bl	80125dc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011b22:	2100      	movs	r1, #0
 8011b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b26:	f7ff fce7 	bl	80114f8 <ip_reass_dequeue_datagram>
 8011b2a:	e006      	b.n	8011b3a <ip4_reass+0x312>
    goto nullreturn;
 8011b2c:	bf00      	nop
 8011b2e:	e004      	b.n	8011b3a <ip4_reass+0x312>
    goto nullreturn;
 8011b30:	bf00      	nop
 8011b32:	e002      	b.n	8011b3a <ip4_reass+0x312>
      goto nullreturn;
 8011b34:	bf00      	nop
 8011b36:	e000      	b.n	8011b3a <ip4_reass+0x312>
  }

nullreturn:
 8011b38:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7f8 f894 	bl	8009c68 <pbuf_free>
  return NULL;
 8011b40:	2300      	movs	r3, #0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3738      	adds	r7, #56	; 0x38
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	08015ca0 	.word	0x08015ca0
 8011b50:	08015e2c 	.word	0x08015e2c
 8011b54:	08015ce8 	.word	0x08015ce8
 8011b58:	2000d6e0 	.word	0x2000d6e0
 8011b5c:	08015e38 	.word	0x08015e38

08011b60 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011b64:	2005      	movs	r0, #5
 8011b66:	f7f7 f989 	bl	8008e7c <memp_malloc>
 8011b6a:	4603      	mov	r3, r0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d106      	bne.n	8011b8c <ip_frag_free_pbuf_custom_ref+0x1c>
 8011b7e:	4b07      	ldr	r3, [pc, #28]	; (8011b9c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011b80:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011b84:	4906      	ldr	r1, [pc, #24]	; (8011ba0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011b86:	4807      	ldr	r0, [pc, #28]	; (8011ba4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011b88:	f000 fd28 	bl	80125dc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011b8c:	6879      	ldr	r1, [r7, #4]
 8011b8e:	2005      	movs	r0, #5
 8011b90:	f7f7 f9c6 	bl	8008f20 <memp_free>
}
 8011b94:	bf00      	nop
 8011b96:	3708      	adds	r7, #8
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	08015ca0 	.word	0x08015ca0
 8011ba0:	08015e58 	.word	0x08015e58
 8011ba4:	08015ce8 	.word	0x08015ce8

08011ba8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d106      	bne.n	8011bc8 <ipfrag_free_pbuf_custom+0x20>
 8011bba:	4b11      	ldr	r3, [pc, #68]	; (8011c00 <ipfrag_free_pbuf_custom+0x58>)
 8011bbc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011bc0:	4910      	ldr	r1, [pc, #64]	; (8011c04 <ipfrag_free_pbuf_custom+0x5c>)
 8011bc2:	4811      	ldr	r0, [pc, #68]	; (8011c08 <ipfrag_free_pbuf_custom+0x60>)
 8011bc4:	f000 fd0a 	bl	80125dc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011bc8:	68fa      	ldr	r2, [r7, #12]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d006      	beq.n	8011bde <ipfrag_free_pbuf_custom+0x36>
 8011bd0:	4b0b      	ldr	r3, [pc, #44]	; (8011c00 <ipfrag_free_pbuf_custom+0x58>)
 8011bd2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011bd6:	490d      	ldr	r1, [pc, #52]	; (8011c0c <ipfrag_free_pbuf_custom+0x64>)
 8011bd8:	480b      	ldr	r0, [pc, #44]	; (8011c08 <ipfrag_free_pbuf_custom+0x60>)
 8011bda:	f000 fcff 	bl	80125dc <iprintf>
  if (pcr->original != NULL) {
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	695b      	ldr	r3, [r3, #20]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d004      	beq.n	8011bf0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	695b      	ldr	r3, [r3, #20]
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7f8 f83c 	bl	8009c68 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011bf0:	68f8      	ldr	r0, [r7, #12]
 8011bf2:	f7ff ffbd 	bl	8011b70 <ip_frag_free_pbuf_custom_ref>
}
 8011bf6:	bf00      	nop
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	08015ca0 	.word	0x08015ca0
 8011c04:	08015e64 	.word	0x08015e64
 8011c08:	08015ce8 	.word	0x08015ce8
 8011c0c:	08015e70 	.word	0x08015e70

08011c10 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b094      	sub	sp, #80	; 0x50
 8011c14:	af02      	add	r7, sp, #8
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011c26:	3b14      	subs	r3, #20
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	da00      	bge.n	8011c2e <ip4_frag+0x1e>
 8011c2c:	3307      	adds	r3, #7
 8011c2e:	10db      	asrs	r3, r3, #3
 8011c30:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011c32:	2314      	movs	r3, #20
 8011c34:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c3e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	f003 030f 	and.w	r3, r3, #15
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	2b14      	cmp	r3, #20
 8011c50:	d002      	beq.n	8011c58 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011c52:	f06f 0305 	mvn.w	r3, #5
 8011c56:	e110      	b.n	8011e7a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	895b      	ldrh	r3, [r3, #10]
 8011c5c:	2b13      	cmp	r3, #19
 8011c5e:	d809      	bhi.n	8011c74 <ip4_frag+0x64>
 8011c60:	4b88      	ldr	r3, [pc, #544]	; (8011e84 <ip4_frag+0x274>)
 8011c62:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011c66:	4988      	ldr	r1, [pc, #544]	; (8011e88 <ip4_frag+0x278>)
 8011c68:	4888      	ldr	r0, [pc, #544]	; (8011e8c <ip4_frag+0x27c>)
 8011c6a:	f000 fcb7 	bl	80125dc <iprintf>
 8011c6e:	f06f 0305 	mvn.w	r3, #5
 8011c72:	e102      	b.n	8011e7a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c76:	88db      	ldrh	r3, [r3, #6]
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7f6 fc48 	bl	8008510 <lwip_htons>
 8011c80:	4603      	mov	r3, r0
 8011c82:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011c84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011c8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011c8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c94:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	891b      	ldrh	r3, [r3, #8]
 8011c9a:	3b14      	subs	r3, #20
 8011c9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011ca0:	e0e1      	b.n	8011e66 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011ca2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ca4:	00db      	lsls	r3, r3, #3
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cac:	4293      	cmp	r3, r2
 8011cae:	bf28      	it	cs
 8011cb0:	4613      	movcs	r3, r2
 8011cb2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011cb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011cb8:	2114      	movs	r1, #20
 8011cba:	200e      	movs	r0, #14
 8011cbc:	f7f7 fcf0 	bl	80096a0 <pbuf_alloc>
 8011cc0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	f000 80d5 	beq.w	8011e74 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ccc:	895b      	ldrh	r3, [r3, #10]
 8011cce:	2b13      	cmp	r3, #19
 8011cd0:	d806      	bhi.n	8011ce0 <ip4_frag+0xd0>
 8011cd2:	4b6c      	ldr	r3, [pc, #432]	; (8011e84 <ip4_frag+0x274>)
 8011cd4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011cd8:	496d      	ldr	r1, [pc, #436]	; (8011e90 <ip4_frag+0x280>)
 8011cda:	486c      	ldr	r0, [pc, #432]	; (8011e8c <ip4_frag+0x27c>)
 8011cdc:	f000 fc7e 	bl	80125dc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	2214      	movs	r2, #20
 8011ce6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f000 fbcc 	bl	8012486 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf0:	685b      	ldr	r3, [r3, #4]
 8011cf2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011cf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011cf6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011cfa:	e064      	b.n	8011dc6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	895a      	ldrh	r2, [r3, #10]
 8011d00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d02:	1ad3      	subs	r3, r2, r3
 8011d04:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	895b      	ldrh	r3, [r3, #10]
 8011d0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d906      	bls.n	8011d1e <ip4_frag+0x10e>
 8011d10:	4b5c      	ldr	r3, [pc, #368]	; (8011e84 <ip4_frag+0x274>)
 8011d12:	f240 322d 	movw	r2, #813	; 0x32d
 8011d16:	495f      	ldr	r1, [pc, #380]	; (8011e94 <ip4_frag+0x284>)
 8011d18:	485c      	ldr	r0, [pc, #368]	; (8011e8c <ip4_frag+0x27c>)
 8011d1a:	f000 fc5f 	bl	80125dc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011d1e:	8bfa      	ldrh	r2, [r7, #30]
 8011d20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011d24:	4293      	cmp	r3, r2
 8011d26:	bf28      	it	cs
 8011d28:	4613      	movcs	r3, r2
 8011d2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011d2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d105      	bne.n	8011d42 <ip4_frag+0x132>
        poff = 0;
 8011d36:	2300      	movs	r3, #0
 8011d38:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	60fb      	str	r3, [r7, #12]
        continue;
 8011d40:	e041      	b.n	8011dc6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011d42:	f7ff ff0d 	bl	8011b60 <ip_frag_alloc_pbuf_custom_ref>
 8011d46:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d103      	bne.n	8011d56 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d50:	f7f7 ff8a 	bl	8009c68 <pbuf_free>
        goto memerr;
 8011d54:	e08f      	b.n	8011e76 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011d56:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011d5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d5e:	4413      	add	r3, r2
 8011d60:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011d64:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011d68:	9201      	str	r2, [sp, #4]
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2241      	movs	r2, #65	; 0x41
 8011d70:	2000      	movs	r0, #0
 8011d72:	f7f7 fdbf 	bl	80098f4 <pbuf_alloced_custom>
 8011d76:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d106      	bne.n	8011d8c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011d7e:	69b8      	ldr	r0, [r7, #24]
 8011d80:	f7ff fef6 	bl	8011b70 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d86:	f7f7 ff6f 	bl	8009c68 <pbuf_free>
        goto memerr;
 8011d8a:	e074      	b.n	8011e76 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f7f8 f811 	bl	8009db4 <pbuf_ref>
      pcr->original = p;
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	68fa      	ldr	r2, [r7, #12]
 8011d96:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	4a3f      	ldr	r2, [pc, #252]	; (8011e98 <ip4_frag+0x288>)
 8011d9c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011d9e:	6979      	ldr	r1, [r7, #20]
 8011da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011da2:	f7f8 f82f 	bl	8009e04 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011da6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011daa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011db4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d004      	beq.n	8011dc6 <ip4_frag+0x1b6>
        poff = 0;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011dc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d196      	bne.n	8011cfc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011dce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011dd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011dd4:	4413      	add	r3, r2
 8011dd6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011ddc:	f1a3 0213 	sub.w	r2, r3, #19
 8011de0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011de4:	429a      	cmp	r2, r3
 8011de6:	bfcc      	ite	gt
 8011de8:	2301      	movgt	r3, #1
 8011dea:	2300      	movle	r3, #0
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011df0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011df8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011dfa:	6a3b      	ldr	r3, [r7, #32]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d002      	beq.n	8011e06 <ip4_frag+0x1f6>
 8011e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d003      	beq.n	8011e0e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011e06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011e0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011e0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7f6 fb7d 	bl	8008510 <lwip_htons>
 8011e16:	4603      	mov	r3, r0
 8011e18:	461a      	mov	r2, r3
 8011e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011e1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011e20:	3314      	adds	r3, #20
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7f6 fb73 	bl	8008510 <lwip_htons>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e30:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e34:	2200      	movs	r2, #0
 8011e36:	729a      	strb	r2, [r3, #10]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	695b      	ldr	r3, [r3, #20]
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e44:	68b8      	ldr	r0, [r7, #8]
 8011e46:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e4a:	f7f7 ff0d 	bl	8009c68 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011e4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011e54:	1ad3      	subs	r3, r2, r3
 8011e56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011e5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011e5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e60:	4413      	add	r3, r2
 8011e62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f47f af19 	bne.w	8011ca2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011e70:	2300      	movs	r3, #0
 8011e72:	e002      	b.n	8011e7a <ip4_frag+0x26a>
      goto memerr;
 8011e74:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3748      	adds	r7, #72	; 0x48
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	08015ca0 	.word	0x08015ca0
 8011e88:	08015e7c 	.word	0x08015e7c
 8011e8c:	08015ce8 	.word	0x08015ce8
 8011e90:	08015e98 	.word	0x08015e98
 8011e94:	08015eb8 	.word	0x08015eb8
 8011e98:	08011ba9 	.word	0x08011ba9

08011e9c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b086      	sub	sp, #24
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011ea6:	230e      	movs	r3, #14
 8011ea8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	895b      	ldrh	r3, [r3, #10]
 8011eae:	2b0e      	cmp	r3, #14
 8011eb0:	d96e      	bls.n	8011f90 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	7bdb      	ldrb	r3, [r3, #15]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d106      	bne.n	8011ec8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	b2da      	uxtb	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	7b1a      	ldrb	r2, [r3, #12]
 8011ed2:	7b5b      	ldrb	r3, [r3, #13]
 8011ed4:	021b      	lsls	r3, r3, #8
 8011ed6:	4313      	orrs	r3, r2
 8011ed8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	f003 0301 	and.w	r3, r3, #1
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d023      	beq.n	8011f2e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d10f      	bne.n	8011f0e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	785b      	ldrb	r3, [r3, #1]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d11b      	bne.n	8011f2e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011efa:	2b5e      	cmp	r3, #94	; 0x5e
 8011efc:	d117      	bne.n	8011f2e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	7b5b      	ldrb	r3, [r3, #13]
 8011f02:	f043 0310 	orr.w	r3, r3, #16
 8011f06:	b2da      	uxtb	r2, r3
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	735a      	strb	r2, [r3, #13]
 8011f0c:	e00f      	b.n	8011f2e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	2206      	movs	r2, #6
 8011f12:	4928      	ldr	r1, [pc, #160]	; (8011fb4 <ethernet_input+0x118>)
 8011f14:	4618      	mov	r0, r3
 8011f16:	f000 faa6 	bl	8012466 <memcmp>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d106      	bne.n	8011f2e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	7b5b      	ldrb	r3, [r3, #13]
 8011f24:	f043 0308 	orr.w	r3, r3, #8
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011f2e:	89fb      	ldrh	r3, [r7, #14]
 8011f30:	2b08      	cmp	r3, #8
 8011f32:	d003      	beq.n	8011f3c <ethernet_input+0xa0>
 8011f34:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011f38:	d014      	beq.n	8011f64 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011f3a:	e032      	b.n	8011fa2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f42:	f003 0308 	and.w	r3, r3, #8
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d024      	beq.n	8011f94 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011f4a:	8afb      	ldrh	r3, [r7, #22]
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7f7 fe04 	bl	8009b5c <pbuf_remove_header>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d11e      	bne.n	8011f98 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011f5a:	6839      	ldr	r1, [r7, #0]
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7fe ff21 	bl	8010da4 <ip4_input>
      break;
 8011f62:	e013      	b.n	8011f8c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f6a:	f003 0308 	and.w	r3, r3, #8
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d014      	beq.n	8011f9c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011f72:	8afb      	ldrh	r3, [r7, #22]
 8011f74:	4619      	mov	r1, r3
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7f7 fdf0 	bl	8009b5c <pbuf_remove_header>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d10e      	bne.n	8011fa0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011f82:	6839      	ldr	r1, [r7, #0]
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f7fe f8c1 	bl	801010c <etharp_input>
      break;
 8011f8a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	e00c      	b.n	8011faa <ethernet_input+0x10e>
    goto free_and_return;
 8011f90:	bf00      	nop
 8011f92:	e006      	b.n	8011fa2 <ethernet_input+0x106>
        goto free_and_return;
 8011f94:	bf00      	nop
 8011f96:	e004      	b.n	8011fa2 <ethernet_input+0x106>
        goto free_and_return;
 8011f98:	bf00      	nop
 8011f9a:	e002      	b.n	8011fa2 <ethernet_input+0x106>
        goto free_and_return;
 8011f9c:	bf00      	nop
 8011f9e:	e000      	b.n	8011fa2 <ethernet_input+0x106>
        goto free_and_return;
 8011fa0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7f7 fe60 	bl	8009c68 <pbuf_free>
  return ERR_OK;
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3718      	adds	r7, #24
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	080160ac 	.word	0x080160ac

08011fb8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b086      	sub	sp, #24
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	60f8      	str	r0, [r7, #12]
 8011fc0:	60b9      	str	r1, [r7, #8]
 8011fc2:	607a      	str	r2, [r7, #4]
 8011fc4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011fc6:	8c3b      	ldrh	r3, [r7, #32]
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7f6 faa1 	bl	8008510 <lwip_htons>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011fd2:	210e      	movs	r1, #14
 8011fd4:	68b8      	ldr	r0, [r7, #8]
 8011fd6:	f7f7 fdb1 	bl	8009b3c <pbuf_add_header>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d125      	bne.n	801202c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	8afa      	ldrh	r2, [r7, #22]
 8011fea:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	2206      	movs	r2, #6
 8011ff0:	6839      	ldr	r1, [r7, #0]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f000 fa47 	bl	8012486 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	3306      	adds	r3, #6
 8011ffc:	2206      	movs	r2, #6
 8011ffe:	6879      	ldr	r1, [r7, #4]
 8012000:	4618      	mov	r0, r3
 8012002:	f000 fa40 	bl	8012486 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801200c:	2b06      	cmp	r3, #6
 801200e:	d006      	beq.n	801201e <ethernet_output+0x66>
 8012010:	4b0a      	ldr	r3, [pc, #40]	; (801203c <ethernet_output+0x84>)
 8012012:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012016:	490a      	ldr	r1, [pc, #40]	; (8012040 <ethernet_output+0x88>)
 8012018:	480a      	ldr	r0, [pc, #40]	; (8012044 <ethernet_output+0x8c>)
 801201a:	f000 fadf 	bl	80125dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	699b      	ldr	r3, [r3, #24]
 8012022:	68b9      	ldr	r1, [r7, #8]
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	4798      	blx	r3
 8012028:	4603      	mov	r3, r0
 801202a:	e002      	b.n	8012032 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801202c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801202e:	f06f 0301 	mvn.w	r3, #1
}
 8012032:	4618      	mov	r0, r3
 8012034:	3718      	adds	r7, #24
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	08015ec8 	.word	0x08015ec8
 8012040:	08015f00 	.word	0x08015f00
 8012044:	08015f34 	.word	0x08015f34

08012048 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	2200      	movs	r2, #0
 8012056:	2104      	movs	r1, #4
 8012058:	4618      	mov	r0, r3
 801205a:	f7f2 fd67 	bl	8004b2c <osMessageQueueNew>
 801205e:	4602      	mov	r2, r0
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d102      	bne.n	8012072 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801206c:	f04f 33ff 	mov.w	r3, #4294967295
 8012070:	e000      	b.n	8012074 <sys_mbox_new+0x2c>

  return ERR_OK;
 8012072:	2300      	movs	r3, #0
}
 8012074:	4618      	mov	r0, r3
 8012076:	3708      	adds	r7, #8
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b084      	sub	sp, #16
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6818      	ldr	r0, [r3, #0]
 801208a:	4639      	mov	r1, r7
 801208c:	2300      	movs	r3, #0
 801208e:	2200      	movs	r2, #0
 8012090:	f7f2 fdd2 	bl	8004c38 <osMessageQueuePut>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d102      	bne.n	80120a0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801209a:	2300      	movs	r3, #0
 801209c:	73fb      	strb	r3, [r7, #15]
 801209e:	e001      	b.n	80120a4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80120a0:	23ff      	movs	r3, #255	; 0xff
 80120a2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80120a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3710      	adds	r7, #16
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}

080120b0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b086      	sub	sp, #24
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	60f8      	str	r0, [r7, #12]
 80120b8:	60b9      	str	r1, [r7, #8]
 80120ba:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80120bc:	f7f2 f998 	bl	80043f0 <osKernelGetTickCount>
 80120c0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d013      	beq.n	80120f0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	6818      	ldr	r0, [r3, #0]
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2200      	movs	r2, #0
 80120d0:	68b9      	ldr	r1, [r7, #8]
 80120d2:	f7f2 fe25 	bl	8004d20 <osMessageQueueGet>
 80120d6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d105      	bne.n	80120ea <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80120de:	f7f2 f987 	bl	80043f0 <osKernelGetTickCount>
 80120e2:	4602      	mov	r2, r0
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	e00f      	b.n	801210a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80120ea:	f04f 33ff 	mov.w	r3, #4294967295
 80120ee:	e00c      	b.n	801210a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	6818      	ldr	r0, [r3, #0]
 80120f4:	f04f 33ff 	mov.w	r3, #4294967295
 80120f8:	2200      	movs	r2, #0
 80120fa:	68b9      	ldr	r1, [r7, #8]
 80120fc:	f7f2 fe10 	bl	8004d20 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8012100:	f7f2 f976 	bl	80043f0 <osKernelGetTickCount>
 8012104:	4602      	mov	r2, r0
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801210a:	4618      	mov	r0, r3
 801210c:	3718      	adds	r7, #24
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012112:	b480      	push	{r7}
 8012114:	b083      	sub	sp, #12
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d101      	bne.n	8012126 <sys_mbox_valid+0x14>
    return 0;
 8012122:	2300      	movs	r3, #0
 8012124:	e000      	b.n	8012128 <sys_mbox_valid+0x16>
  else
    return 1;
 8012126:	2301      	movs	r3, #1
}
 8012128:	4618      	mov	r0, r3
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8012138:	2000      	movs	r0, #0
 801213a:	f7f2 fa55 	bl	80045e8 <osMutexNew>
 801213e:	4603      	mov	r3, r0
 8012140:	4a01      	ldr	r2, [pc, #4]	; (8012148 <sys_init+0x14>)
 8012142:	6013      	str	r3, [r2, #0]
#endif
}
 8012144:	bf00      	nop
 8012146:	bd80      	pop	{r7, pc}
 8012148:	2000d6e8 	.word	0x2000d6e8

0801214c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8012154:	2000      	movs	r0, #0
 8012156:	f7f2 fa47 	bl	80045e8 <osMutexNew>
 801215a:	4602      	mov	r2, r0
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d102      	bne.n	801216e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012168:	f04f 33ff 	mov.w	r3, #4294967295
 801216c:	e000      	b.n	8012170 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f04f 31ff 	mov.w	r1, #4294967295
 8012188:	4618      	mov	r0, r3
 801218a:	f7f2 fac7 	bl	800471c <osMutexAcquire>
#endif
}
 801218e:	bf00      	nop
 8012190:	3708      	adds	r7, #8
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}

08012196 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012196:	b580      	push	{r7, lr}
 8012198:	b082      	sub	sp, #8
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7f2 fb18 	bl	80047d8 <osMutexRelease>
}
 80121a8:	bf00      	nop
 80121aa:	3708      	adds	r7, #8
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b08e      	sub	sp, #56	; 0x38
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
 80121bc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80121be:	f107 0314 	add.w	r3, r7, #20
 80121c2:	2224      	movs	r2, #36	; 0x24
 80121c4:	2100      	movs	r1, #0
 80121c6:	4618      	mov	r0, r3
 80121c8:	f000 f96b 	bl	80124a2 <memset>
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	617b      	str	r3, [r7, #20]
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80121d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80121d8:	f107 0314 	add.w	r3, r7, #20
 80121dc:	461a      	mov	r2, r3
 80121de:	6879      	ldr	r1, [r7, #4]
 80121e0:	68b8      	ldr	r0, [r7, #8]
 80121e2:	f7f2 f92d 	bl	8004440 <osThreadNew>
 80121e6:	4603      	mov	r3, r0
#endif
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3738      	adds	r7, #56	; 0x38
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80121f4:	4b04      	ldr	r3, [pc, #16]	; (8012208 <sys_arch_protect+0x18>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f04f 31ff 	mov.w	r1, #4294967295
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7f2 fa8d 	bl	800471c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8012202:	2301      	movs	r3, #1
}
 8012204:	4618      	mov	r0, r3
 8012206:	bd80      	pop	{r7, pc}
 8012208:	2000d6e8 	.word	0x2000d6e8

0801220c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012214:	4b04      	ldr	r3, [pc, #16]	; (8012228 <sys_arch_unprotect+0x1c>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4618      	mov	r0, r3
 801221a:	f7f2 fadd 	bl	80047d8 <osMutexRelease>
}
 801221e:	bf00      	nop
 8012220:	3708      	adds	r7, #8
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	2000d6e8 	.word	0x2000d6e8

0801222c <std>:
 801222c:	2300      	movs	r3, #0
 801222e:	b510      	push	{r4, lr}
 8012230:	4604      	mov	r4, r0
 8012232:	e9c0 3300 	strd	r3, r3, [r0]
 8012236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801223a:	6083      	str	r3, [r0, #8]
 801223c:	8181      	strh	r1, [r0, #12]
 801223e:	6643      	str	r3, [r0, #100]	; 0x64
 8012240:	81c2      	strh	r2, [r0, #14]
 8012242:	6183      	str	r3, [r0, #24]
 8012244:	4619      	mov	r1, r3
 8012246:	2208      	movs	r2, #8
 8012248:	305c      	adds	r0, #92	; 0x5c
 801224a:	f000 f92a 	bl	80124a2 <memset>
 801224e:	4b05      	ldr	r3, [pc, #20]	; (8012264 <std+0x38>)
 8012250:	6263      	str	r3, [r4, #36]	; 0x24
 8012252:	4b05      	ldr	r3, [pc, #20]	; (8012268 <std+0x3c>)
 8012254:	62a3      	str	r3, [r4, #40]	; 0x28
 8012256:	4b05      	ldr	r3, [pc, #20]	; (801226c <std+0x40>)
 8012258:	62e3      	str	r3, [r4, #44]	; 0x2c
 801225a:	4b05      	ldr	r3, [pc, #20]	; (8012270 <std+0x44>)
 801225c:	6224      	str	r4, [r4, #32]
 801225e:	6323      	str	r3, [r4, #48]	; 0x30
 8012260:	bd10      	pop	{r4, pc}
 8012262:	bf00      	nop
 8012264:	0801277d 	.word	0x0801277d
 8012268:	0801279f 	.word	0x0801279f
 801226c:	080127d7 	.word	0x080127d7
 8012270:	080127fb 	.word	0x080127fb

08012274 <_cleanup_r>:
 8012274:	4901      	ldr	r1, [pc, #4]	; (801227c <_cleanup_r+0x8>)
 8012276:	f000 b8af 	b.w	80123d8 <_fwalk_reent>
 801227a:	bf00      	nop
 801227c:	08012991 	.word	0x08012991

08012280 <__sfmoreglue>:
 8012280:	b570      	push	{r4, r5, r6, lr}
 8012282:	2268      	movs	r2, #104	; 0x68
 8012284:	1e4d      	subs	r5, r1, #1
 8012286:	4355      	muls	r5, r2
 8012288:	460e      	mov	r6, r1
 801228a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801228e:	f000 f931 	bl	80124f4 <_malloc_r>
 8012292:	4604      	mov	r4, r0
 8012294:	b140      	cbz	r0, 80122a8 <__sfmoreglue+0x28>
 8012296:	2100      	movs	r1, #0
 8012298:	e9c0 1600 	strd	r1, r6, [r0]
 801229c:	300c      	adds	r0, #12
 801229e:	60a0      	str	r0, [r4, #8]
 80122a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80122a4:	f000 f8fd 	bl	80124a2 <memset>
 80122a8:	4620      	mov	r0, r4
 80122aa:	bd70      	pop	{r4, r5, r6, pc}

080122ac <__sfp_lock_acquire>:
 80122ac:	4801      	ldr	r0, [pc, #4]	; (80122b4 <__sfp_lock_acquire+0x8>)
 80122ae:	f000 b8d8 	b.w	8012462 <__retarget_lock_acquire_recursive>
 80122b2:	bf00      	nop
 80122b4:	2000d6ed 	.word	0x2000d6ed

080122b8 <__sfp_lock_release>:
 80122b8:	4801      	ldr	r0, [pc, #4]	; (80122c0 <__sfp_lock_release+0x8>)
 80122ba:	f000 b8d3 	b.w	8012464 <__retarget_lock_release_recursive>
 80122be:	bf00      	nop
 80122c0:	2000d6ed 	.word	0x2000d6ed

080122c4 <__sinit_lock_acquire>:
 80122c4:	4801      	ldr	r0, [pc, #4]	; (80122cc <__sinit_lock_acquire+0x8>)
 80122c6:	f000 b8cc 	b.w	8012462 <__retarget_lock_acquire_recursive>
 80122ca:	bf00      	nop
 80122cc:	2000d6ee 	.word	0x2000d6ee

080122d0 <__sinit_lock_release>:
 80122d0:	4801      	ldr	r0, [pc, #4]	; (80122d8 <__sinit_lock_release+0x8>)
 80122d2:	f000 b8c7 	b.w	8012464 <__retarget_lock_release_recursive>
 80122d6:	bf00      	nop
 80122d8:	2000d6ee 	.word	0x2000d6ee

080122dc <__sinit>:
 80122dc:	b510      	push	{r4, lr}
 80122de:	4604      	mov	r4, r0
 80122e0:	f7ff fff0 	bl	80122c4 <__sinit_lock_acquire>
 80122e4:	69a3      	ldr	r3, [r4, #24]
 80122e6:	b11b      	cbz	r3, 80122f0 <__sinit+0x14>
 80122e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122ec:	f7ff bff0 	b.w	80122d0 <__sinit_lock_release>
 80122f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80122f4:	6523      	str	r3, [r4, #80]	; 0x50
 80122f6:	4b13      	ldr	r3, [pc, #76]	; (8012344 <__sinit+0x68>)
 80122f8:	4a13      	ldr	r2, [pc, #76]	; (8012348 <__sinit+0x6c>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80122fe:	42a3      	cmp	r3, r4
 8012300:	bf04      	itt	eq
 8012302:	2301      	moveq	r3, #1
 8012304:	61a3      	streq	r3, [r4, #24]
 8012306:	4620      	mov	r0, r4
 8012308:	f000 f820 	bl	801234c <__sfp>
 801230c:	6060      	str	r0, [r4, #4]
 801230e:	4620      	mov	r0, r4
 8012310:	f000 f81c 	bl	801234c <__sfp>
 8012314:	60a0      	str	r0, [r4, #8]
 8012316:	4620      	mov	r0, r4
 8012318:	f000 f818 	bl	801234c <__sfp>
 801231c:	2200      	movs	r2, #0
 801231e:	60e0      	str	r0, [r4, #12]
 8012320:	2104      	movs	r1, #4
 8012322:	6860      	ldr	r0, [r4, #4]
 8012324:	f7ff ff82 	bl	801222c <std>
 8012328:	68a0      	ldr	r0, [r4, #8]
 801232a:	2201      	movs	r2, #1
 801232c:	2109      	movs	r1, #9
 801232e:	f7ff ff7d 	bl	801222c <std>
 8012332:	68e0      	ldr	r0, [r4, #12]
 8012334:	2202      	movs	r2, #2
 8012336:	2112      	movs	r1, #18
 8012338:	f7ff ff78 	bl	801222c <std>
 801233c:	2301      	movs	r3, #1
 801233e:	61a3      	str	r3, [r4, #24]
 8012340:	e7d2      	b.n	80122e8 <__sinit+0xc>
 8012342:	bf00      	nop
 8012344:	0801611c 	.word	0x0801611c
 8012348:	08012275 	.word	0x08012275

0801234c <__sfp>:
 801234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801234e:	4607      	mov	r7, r0
 8012350:	f7ff ffac 	bl	80122ac <__sfp_lock_acquire>
 8012354:	4b1e      	ldr	r3, [pc, #120]	; (80123d0 <__sfp+0x84>)
 8012356:	681e      	ldr	r6, [r3, #0]
 8012358:	69b3      	ldr	r3, [r6, #24]
 801235a:	b913      	cbnz	r3, 8012362 <__sfp+0x16>
 801235c:	4630      	mov	r0, r6
 801235e:	f7ff ffbd 	bl	80122dc <__sinit>
 8012362:	3648      	adds	r6, #72	; 0x48
 8012364:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012368:	3b01      	subs	r3, #1
 801236a:	d503      	bpl.n	8012374 <__sfp+0x28>
 801236c:	6833      	ldr	r3, [r6, #0]
 801236e:	b30b      	cbz	r3, 80123b4 <__sfp+0x68>
 8012370:	6836      	ldr	r6, [r6, #0]
 8012372:	e7f7      	b.n	8012364 <__sfp+0x18>
 8012374:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012378:	b9d5      	cbnz	r5, 80123b0 <__sfp+0x64>
 801237a:	4b16      	ldr	r3, [pc, #88]	; (80123d4 <__sfp+0x88>)
 801237c:	60e3      	str	r3, [r4, #12]
 801237e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012382:	6665      	str	r5, [r4, #100]	; 0x64
 8012384:	f000 f86c 	bl	8012460 <__retarget_lock_init_recursive>
 8012388:	f7ff ff96 	bl	80122b8 <__sfp_lock_release>
 801238c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012390:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012394:	6025      	str	r5, [r4, #0]
 8012396:	61a5      	str	r5, [r4, #24]
 8012398:	2208      	movs	r2, #8
 801239a:	4629      	mov	r1, r5
 801239c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80123a0:	f000 f87f 	bl	80124a2 <memset>
 80123a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80123a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80123ac:	4620      	mov	r0, r4
 80123ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123b0:	3468      	adds	r4, #104	; 0x68
 80123b2:	e7d9      	b.n	8012368 <__sfp+0x1c>
 80123b4:	2104      	movs	r1, #4
 80123b6:	4638      	mov	r0, r7
 80123b8:	f7ff ff62 	bl	8012280 <__sfmoreglue>
 80123bc:	4604      	mov	r4, r0
 80123be:	6030      	str	r0, [r6, #0]
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d1d5      	bne.n	8012370 <__sfp+0x24>
 80123c4:	f7ff ff78 	bl	80122b8 <__sfp_lock_release>
 80123c8:	230c      	movs	r3, #12
 80123ca:	603b      	str	r3, [r7, #0]
 80123cc:	e7ee      	b.n	80123ac <__sfp+0x60>
 80123ce:	bf00      	nop
 80123d0:	0801611c 	.word	0x0801611c
 80123d4:	ffff0001 	.word	0xffff0001

080123d8 <_fwalk_reent>:
 80123d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123dc:	4606      	mov	r6, r0
 80123de:	4688      	mov	r8, r1
 80123e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80123e4:	2700      	movs	r7, #0
 80123e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80123ea:	f1b9 0901 	subs.w	r9, r9, #1
 80123ee:	d505      	bpl.n	80123fc <_fwalk_reent+0x24>
 80123f0:	6824      	ldr	r4, [r4, #0]
 80123f2:	2c00      	cmp	r4, #0
 80123f4:	d1f7      	bne.n	80123e6 <_fwalk_reent+0xe>
 80123f6:	4638      	mov	r0, r7
 80123f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123fc:	89ab      	ldrh	r3, [r5, #12]
 80123fe:	2b01      	cmp	r3, #1
 8012400:	d907      	bls.n	8012412 <_fwalk_reent+0x3a>
 8012402:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012406:	3301      	adds	r3, #1
 8012408:	d003      	beq.n	8012412 <_fwalk_reent+0x3a>
 801240a:	4629      	mov	r1, r5
 801240c:	4630      	mov	r0, r6
 801240e:	47c0      	blx	r8
 8012410:	4307      	orrs	r7, r0
 8012412:	3568      	adds	r5, #104	; 0x68
 8012414:	e7e9      	b.n	80123ea <_fwalk_reent+0x12>
	...

08012418 <__libc_init_array>:
 8012418:	b570      	push	{r4, r5, r6, lr}
 801241a:	4d0d      	ldr	r5, [pc, #52]	; (8012450 <__libc_init_array+0x38>)
 801241c:	4c0d      	ldr	r4, [pc, #52]	; (8012454 <__libc_init_array+0x3c>)
 801241e:	1b64      	subs	r4, r4, r5
 8012420:	10a4      	asrs	r4, r4, #2
 8012422:	2600      	movs	r6, #0
 8012424:	42a6      	cmp	r6, r4
 8012426:	d109      	bne.n	801243c <__libc_init_array+0x24>
 8012428:	4d0b      	ldr	r5, [pc, #44]	; (8012458 <__libc_init_array+0x40>)
 801242a:	4c0c      	ldr	r4, [pc, #48]	; (801245c <__libc_init_array+0x44>)
 801242c:	f001 f802 	bl	8013434 <_init>
 8012430:	1b64      	subs	r4, r4, r5
 8012432:	10a4      	asrs	r4, r4, #2
 8012434:	2600      	movs	r6, #0
 8012436:	42a6      	cmp	r6, r4
 8012438:	d105      	bne.n	8012446 <__libc_init_array+0x2e>
 801243a:	bd70      	pop	{r4, r5, r6, pc}
 801243c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012440:	4798      	blx	r3
 8012442:	3601      	adds	r6, #1
 8012444:	e7ee      	b.n	8012424 <__libc_init_array+0xc>
 8012446:	f855 3b04 	ldr.w	r3, [r5], #4
 801244a:	4798      	blx	r3
 801244c:	3601      	adds	r6, #1
 801244e:	e7f2      	b.n	8012436 <__libc_init_array+0x1e>
 8012450:	0801620c 	.word	0x0801620c
 8012454:	0801620c 	.word	0x0801620c
 8012458:	0801620c 	.word	0x0801620c
 801245c:	08016210 	.word	0x08016210

08012460 <__retarget_lock_init_recursive>:
 8012460:	4770      	bx	lr

08012462 <__retarget_lock_acquire_recursive>:
 8012462:	4770      	bx	lr

08012464 <__retarget_lock_release_recursive>:
 8012464:	4770      	bx	lr

08012466 <memcmp>:
 8012466:	b510      	push	{r4, lr}
 8012468:	3901      	subs	r1, #1
 801246a:	4402      	add	r2, r0
 801246c:	4290      	cmp	r0, r2
 801246e:	d101      	bne.n	8012474 <memcmp+0xe>
 8012470:	2000      	movs	r0, #0
 8012472:	e005      	b.n	8012480 <memcmp+0x1a>
 8012474:	7803      	ldrb	r3, [r0, #0]
 8012476:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801247a:	42a3      	cmp	r3, r4
 801247c:	d001      	beq.n	8012482 <memcmp+0x1c>
 801247e:	1b18      	subs	r0, r3, r4
 8012480:	bd10      	pop	{r4, pc}
 8012482:	3001      	adds	r0, #1
 8012484:	e7f2      	b.n	801246c <memcmp+0x6>

08012486 <memcpy>:
 8012486:	440a      	add	r2, r1
 8012488:	4291      	cmp	r1, r2
 801248a:	f100 33ff 	add.w	r3, r0, #4294967295
 801248e:	d100      	bne.n	8012492 <memcpy+0xc>
 8012490:	4770      	bx	lr
 8012492:	b510      	push	{r4, lr}
 8012494:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012498:	f803 4f01 	strb.w	r4, [r3, #1]!
 801249c:	4291      	cmp	r1, r2
 801249e:	d1f9      	bne.n	8012494 <memcpy+0xe>
 80124a0:	bd10      	pop	{r4, pc}

080124a2 <memset>:
 80124a2:	4402      	add	r2, r0
 80124a4:	4603      	mov	r3, r0
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d100      	bne.n	80124ac <memset+0xa>
 80124aa:	4770      	bx	lr
 80124ac:	f803 1b01 	strb.w	r1, [r3], #1
 80124b0:	e7f9      	b.n	80124a6 <memset+0x4>
	...

080124b4 <sbrk_aligned>:
 80124b4:	b570      	push	{r4, r5, r6, lr}
 80124b6:	4e0e      	ldr	r6, [pc, #56]	; (80124f0 <sbrk_aligned+0x3c>)
 80124b8:	460c      	mov	r4, r1
 80124ba:	6831      	ldr	r1, [r6, #0]
 80124bc:	4605      	mov	r5, r0
 80124be:	b911      	cbnz	r1, 80124c6 <sbrk_aligned+0x12>
 80124c0:	f000 f94c 	bl	801275c <_sbrk_r>
 80124c4:	6030      	str	r0, [r6, #0]
 80124c6:	4621      	mov	r1, r4
 80124c8:	4628      	mov	r0, r5
 80124ca:	f000 f947 	bl	801275c <_sbrk_r>
 80124ce:	1c43      	adds	r3, r0, #1
 80124d0:	d00a      	beq.n	80124e8 <sbrk_aligned+0x34>
 80124d2:	1cc4      	adds	r4, r0, #3
 80124d4:	f024 0403 	bic.w	r4, r4, #3
 80124d8:	42a0      	cmp	r0, r4
 80124da:	d007      	beq.n	80124ec <sbrk_aligned+0x38>
 80124dc:	1a21      	subs	r1, r4, r0
 80124de:	4628      	mov	r0, r5
 80124e0:	f000 f93c 	bl	801275c <_sbrk_r>
 80124e4:	3001      	adds	r0, #1
 80124e6:	d101      	bne.n	80124ec <sbrk_aligned+0x38>
 80124e8:	f04f 34ff 	mov.w	r4, #4294967295
 80124ec:	4620      	mov	r0, r4
 80124ee:	bd70      	pop	{r4, r5, r6, pc}
 80124f0:	2000d6f4 	.word	0x2000d6f4

080124f4 <_malloc_r>:
 80124f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f8:	1ccd      	adds	r5, r1, #3
 80124fa:	f025 0503 	bic.w	r5, r5, #3
 80124fe:	3508      	adds	r5, #8
 8012500:	2d0c      	cmp	r5, #12
 8012502:	bf38      	it	cc
 8012504:	250c      	movcc	r5, #12
 8012506:	2d00      	cmp	r5, #0
 8012508:	4607      	mov	r7, r0
 801250a:	db01      	blt.n	8012510 <_malloc_r+0x1c>
 801250c:	42a9      	cmp	r1, r5
 801250e:	d905      	bls.n	801251c <_malloc_r+0x28>
 8012510:	230c      	movs	r3, #12
 8012512:	603b      	str	r3, [r7, #0]
 8012514:	2600      	movs	r6, #0
 8012516:	4630      	mov	r0, r6
 8012518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801251c:	4e2e      	ldr	r6, [pc, #184]	; (80125d8 <_malloc_r+0xe4>)
 801251e:	f000 fa9f 	bl	8012a60 <__malloc_lock>
 8012522:	6833      	ldr	r3, [r6, #0]
 8012524:	461c      	mov	r4, r3
 8012526:	bb34      	cbnz	r4, 8012576 <_malloc_r+0x82>
 8012528:	4629      	mov	r1, r5
 801252a:	4638      	mov	r0, r7
 801252c:	f7ff ffc2 	bl	80124b4 <sbrk_aligned>
 8012530:	1c43      	adds	r3, r0, #1
 8012532:	4604      	mov	r4, r0
 8012534:	d14d      	bne.n	80125d2 <_malloc_r+0xde>
 8012536:	6834      	ldr	r4, [r6, #0]
 8012538:	4626      	mov	r6, r4
 801253a:	2e00      	cmp	r6, #0
 801253c:	d140      	bne.n	80125c0 <_malloc_r+0xcc>
 801253e:	6823      	ldr	r3, [r4, #0]
 8012540:	4631      	mov	r1, r6
 8012542:	4638      	mov	r0, r7
 8012544:	eb04 0803 	add.w	r8, r4, r3
 8012548:	f000 f908 	bl	801275c <_sbrk_r>
 801254c:	4580      	cmp	r8, r0
 801254e:	d13a      	bne.n	80125c6 <_malloc_r+0xd2>
 8012550:	6821      	ldr	r1, [r4, #0]
 8012552:	3503      	adds	r5, #3
 8012554:	1a6d      	subs	r5, r5, r1
 8012556:	f025 0503 	bic.w	r5, r5, #3
 801255a:	3508      	adds	r5, #8
 801255c:	2d0c      	cmp	r5, #12
 801255e:	bf38      	it	cc
 8012560:	250c      	movcc	r5, #12
 8012562:	4629      	mov	r1, r5
 8012564:	4638      	mov	r0, r7
 8012566:	f7ff ffa5 	bl	80124b4 <sbrk_aligned>
 801256a:	3001      	adds	r0, #1
 801256c:	d02b      	beq.n	80125c6 <_malloc_r+0xd2>
 801256e:	6823      	ldr	r3, [r4, #0]
 8012570:	442b      	add	r3, r5
 8012572:	6023      	str	r3, [r4, #0]
 8012574:	e00e      	b.n	8012594 <_malloc_r+0xa0>
 8012576:	6822      	ldr	r2, [r4, #0]
 8012578:	1b52      	subs	r2, r2, r5
 801257a:	d41e      	bmi.n	80125ba <_malloc_r+0xc6>
 801257c:	2a0b      	cmp	r2, #11
 801257e:	d916      	bls.n	80125ae <_malloc_r+0xba>
 8012580:	1961      	adds	r1, r4, r5
 8012582:	42a3      	cmp	r3, r4
 8012584:	6025      	str	r5, [r4, #0]
 8012586:	bf18      	it	ne
 8012588:	6059      	strne	r1, [r3, #4]
 801258a:	6863      	ldr	r3, [r4, #4]
 801258c:	bf08      	it	eq
 801258e:	6031      	streq	r1, [r6, #0]
 8012590:	5162      	str	r2, [r4, r5]
 8012592:	604b      	str	r3, [r1, #4]
 8012594:	4638      	mov	r0, r7
 8012596:	f104 060b 	add.w	r6, r4, #11
 801259a:	f000 fa67 	bl	8012a6c <__malloc_unlock>
 801259e:	f026 0607 	bic.w	r6, r6, #7
 80125a2:	1d23      	adds	r3, r4, #4
 80125a4:	1af2      	subs	r2, r6, r3
 80125a6:	d0b6      	beq.n	8012516 <_malloc_r+0x22>
 80125a8:	1b9b      	subs	r3, r3, r6
 80125aa:	50a3      	str	r3, [r4, r2]
 80125ac:	e7b3      	b.n	8012516 <_malloc_r+0x22>
 80125ae:	6862      	ldr	r2, [r4, #4]
 80125b0:	42a3      	cmp	r3, r4
 80125b2:	bf0c      	ite	eq
 80125b4:	6032      	streq	r2, [r6, #0]
 80125b6:	605a      	strne	r2, [r3, #4]
 80125b8:	e7ec      	b.n	8012594 <_malloc_r+0xa0>
 80125ba:	4623      	mov	r3, r4
 80125bc:	6864      	ldr	r4, [r4, #4]
 80125be:	e7b2      	b.n	8012526 <_malloc_r+0x32>
 80125c0:	4634      	mov	r4, r6
 80125c2:	6876      	ldr	r6, [r6, #4]
 80125c4:	e7b9      	b.n	801253a <_malloc_r+0x46>
 80125c6:	230c      	movs	r3, #12
 80125c8:	603b      	str	r3, [r7, #0]
 80125ca:	4638      	mov	r0, r7
 80125cc:	f000 fa4e 	bl	8012a6c <__malloc_unlock>
 80125d0:	e7a1      	b.n	8012516 <_malloc_r+0x22>
 80125d2:	6025      	str	r5, [r4, #0]
 80125d4:	e7de      	b.n	8012594 <_malloc_r+0xa0>
 80125d6:	bf00      	nop
 80125d8:	2000d6f0 	.word	0x2000d6f0

080125dc <iprintf>:
 80125dc:	b40f      	push	{r0, r1, r2, r3}
 80125de:	4b0a      	ldr	r3, [pc, #40]	; (8012608 <iprintf+0x2c>)
 80125e0:	b513      	push	{r0, r1, r4, lr}
 80125e2:	681c      	ldr	r4, [r3, #0]
 80125e4:	b124      	cbz	r4, 80125f0 <iprintf+0x14>
 80125e6:	69a3      	ldr	r3, [r4, #24]
 80125e8:	b913      	cbnz	r3, 80125f0 <iprintf+0x14>
 80125ea:	4620      	mov	r0, r4
 80125ec:	f7ff fe76 	bl	80122dc <__sinit>
 80125f0:	ab05      	add	r3, sp, #20
 80125f2:	9a04      	ldr	r2, [sp, #16]
 80125f4:	68a1      	ldr	r1, [r4, #8]
 80125f6:	9301      	str	r3, [sp, #4]
 80125f8:	4620      	mov	r0, r4
 80125fa:	f000 fab3 	bl	8012b64 <_vfiprintf_r>
 80125fe:	b002      	add	sp, #8
 8012600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012604:	b004      	add	sp, #16
 8012606:	4770      	bx	lr
 8012608:	2000001c 	.word	0x2000001c

0801260c <rand>:
 801260c:	4b16      	ldr	r3, [pc, #88]	; (8012668 <rand+0x5c>)
 801260e:	b510      	push	{r4, lr}
 8012610:	681c      	ldr	r4, [r3, #0]
 8012612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012614:	b9b3      	cbnz	r3, 8012644 <rand+0x38>
 8012616:	2018      	movs	r0, #24
 8012618:	f000 fa1a 	bl	8012a50 <malloc>
 801261c:	63a0      	str	r0, [r4, #56]	; 0x38
 801261e:	b928      	cbnz	r0, 801262c <rand+0x20>
 8012620:	4602      	mov	r2, r0
 8012622:	4b12      	ldr	r3, [pc, #72]	; (801266c <rand+0x60>)
 8012624:	4812      	ldr	r0, [pc, #72]	; (8012670 <rand+0x64>)
 8012626:	214e      	movs	r1, #78	; 0x4e
 8012628:	f000 f8fe 	bl	8012828 <__assert_func>
 801262c:	4a11      	ldr	r2, [pc, #68]	; (8012674 <rand+0x68>)
 801262e:	4b12      	ldr	r3, [pc, #72]	; (8012678 <rand+0x6c>)
 8012630:	e9c0 2300 	strd	r2, r3, [r0]
 8012634:	4b11      	ldr	r3, [pc, #68]	; (801267c <rand+0x70>)
 8012636:	6083      	str	r3, [r0, #8]
 8012638:	230b      	movs	r3, #11
 801263a:	8183      	strh	r3, [r0, #12]
 801263c:	2201      	movs	r2, #1
 801263e:	2300      	movs	r3, #0
 8012640:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012644:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012646:	4a0e      	ldr	r2, [pc, #56]	; (8012680 <rand+0x74>)
 8012648:	6920      	ldr	r0, [r4, #16]
 801264a:	6963      	ldr	r3, [r4, #20]
 801264c:	490d      	ldr	r1, [pc, #52]	; (8012684 <rand+0x78>)
 801264e:	4342      	muls	r2, r0
 8012650:	fb01 2203 	mla	r2, r1, r3, r2
 8012654:	fba0 0101 	umull	r0, r1, r0, r1
 8012658:	1c43      	adds	r3, r0, #1
 801265a:	eb42 0001 	adc.w	r0, r2, r1
 801265e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012662:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012666:	bd10      	pop	{r4, pc}
 8012668:	2000001c 	.word	0x2000001c
 801266c:	08016120 	.word	0x08016120
 8012670:	08016137 	.word	0x08016137
 8012674:	abcd330e 	.word	0xabcd330e
 8012678:	e66d1234 	.word	0xe66d1234
 801267c:	0005deec 	.word	0x0005deec
 8012680:	5851f42d 	.word	0x5851f42d
 8012684:	4c957f2d 	.word	0x4c957f2d

08012688 <cleanup_glue>:
 8012688:	b538      	push	{r3, r4, r5, lr}
 801268a:	460c      	mov	r4, r1
 801268c:	6809      	ldr	r1, [r1, #0]
 801268e:	4605      	mov	r5, r0
 8012690:	b109      	cbz	r1, 8012696 <cleanup_glue+0xe>
 8012692:	f7ff fff9 	bl	8012688 <cleanup_glue>
 8012696:	4621      	mov	r1, r4
 8012698:	4628      	mov	r0, r5
 801269a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801269e:	f000 b9eb 	b.w	8012a78 <_free_r>
	...

080126a4 <_reclaim_reent>:
 80126a4:	4b2c      	ldr	r3, [pc, #176]	; (8012758 <_reclaim_reent+0xb4>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	4283      	cmp	r3, r0
 80126aa:	b570      	push	{r4, r5, r6, lr}
 80126ac:	4604      	mov	r4, r0
 80126ae:	d051      	beq.n	8012754 <_reclaim_reent+0xb0>
 80126b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80126b2:	b143      	cbz	r3, 80126c6 <_reclaim_reent+0x22>
 80126b4:	68db      	ldr	r3, [r3, #12]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d14a      	bne.n	8012750 <_reclaim_reent+0xac>
 80126ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126bc:	6819      	ldr	r1, [r3, #0]
 80126be:	b111      	cbz	r1, 80126c6 <_reclaim_reent+0x22>
 80126c0:	4620      	mov	r0, r4
 80126c2:	f000 f9d9 	bl	8012a78 <_free_r>
 80126c6:	6961      	ldr	r1, [r4, #20]
 80126c8:	b111      	cbz	r1, 80126d0 <_reclaim_reent+0x2c>
 80126ca:	4620      	mov	r0, r4
 80126cc:	f000 f9d4 	bl	8012a78 <_free_r>
 80126d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80126d2:	b111      	cbz	r1, 80126da <_reclaim_reent+0x36>
 80126d4:	4620      	mov	r0, r4
 80126d6:	f000 f9cf 	bl	8012a78 <_free_r>
 80126da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80126dc:	b111      	cbz	r1, 80126e4 <_reclaim_reent+0x40>
 80126de:	4620      	mov	r0, r4
 80126e0:	f000 f9ca 	bl	8012a78 <_free_r>
 80126e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80126e6:	b111      	cbz	r1, 80126ee <_reclaim_reent+0x4a>
 80126e8:	4620      	mov	r0, r4
 80126ea:	f000 f9c5 	bl	8012a78 <_free_r>
 80126ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80126f0:	b111      	cbz	r1, 80126f8 <_reclaim_reent+0x54>
 80126f2:	4620      	mov	r0, r4
 80126f4:	f000 f9c0 	bl	8012a78 <_free_r>
 80126f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80126fa:	b111      	cbz	r1, 8012702 <_reclaim_reent+0x5e>
 80126fc:	4620      	mov	r0, r4
 80126fe:	f000 f9bb 	bl	8012a78 <_free_r>
 8012702:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012704:	b111      	cbz	r1, 801270c <_reclaim_reent+0x68>
 8012706:	4620      	mov	r0, r4
 8012708:	f000 f9b6 	bl	8012a78 <_free_r>
 801270c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801270e:	b111      	cbz	r1, 8012716 <_reclaim_reent+0x72>
 8012710:	4620      	mov	r0, r4
 8012712:	f000 f9b1 	bl	8012a78 <_free_r>
 8012716:	69a3      	ldr	r3, [r4, #24]
 8012718:	b1e3      	cbz	r3, 8012754 <_reclaim_reent+0xb0>
 801271a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801271c:	4620      	mov	r0, r4
 801271e:	4798      	blx	r3
 8012720:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012722:	b1b9      	cbz	r1, 8012754 <_reclaim_reent+0xb0>
 8012724:	4620      	mov	r0, r4
 8012726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801272a:	f7ff bfad 	b.w	8012688 <cleanup_glue>
 801272e:	5949      	ldr	r1, [r1, r5]
 8012730:	b941      	cbnz	r1, 8012744 <_reclaim_reent+0xa0>
 8012732:	3504      	adds	r5, #4
 8012734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012736:	2d80      	cmp	r5, #128	; 0x80
 8012738:	68d9      	ldr	r1, [r3, #12]
 801273a:	d1f8      	bne.n	801272e <_reclaim_reent+0x8a>
 801273c:	4620      	mov	r0, r4
 801273e:	f000 f99b 	bl	8012a78 <_free_r>
 8012742:	e7ba      	b.n	80126ba <_reclaim_reent+0x16>
 8012744:	680e      	ldr	r6, [r1, #0]
 8012746:	4620      	mov	r0, r4
 8012748:	f000 f996 	bl	8012a78 <_free_r>
 801274c:	4631      	mov	r1, r6
 801274e:	e7ef      	b.n	8012730 <_reclaim_reent+0x8c>
 8012750:	2500      	movs	r5, #0
 8012752:	e7ef      	b.n	8012734 <_reclaim_reent+0x90>
 8012754:	bd70      	pop	{r4, r5, r6, pc}
 8012756:	bf00      	nop
 8012758:	2000001c 	.word	0x2000001c

0801275c <_sbrk_r>:
 801275c:	b538      	push	{r3, r4, r5, lr}
 801275e:	4d06      	ldr	r5, [pc, #24]	; (8012778 <_sbrk_r+0x1c>)
 8012760:	2300      	movs	r3, #0
 8012762:	4604      	mov	r4, r0
 8012764:	4608      	mov	r0, r1
 8012766:	602b      	str	r3, [r5, #0]
 8012768:	f7ee fb02 	bl	8000d70 <_sbrk>
 801276c:	1c43      	adds	r3, r0, #1
 801276e:	d102      	bne.n	8012776 <_sbrk_r+0x1a>
 8012770:	682b      	ldr	r3, [r5, #0]
 8012772:	b103      	cbz	r3, 8012776 <_sbrk_r+0x1a>
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	bd38      	pop	{r3, r4, r5, pc}
 8012778:	2000d6f8 	.word	0x2000d6f8

0801277c <__sread>:
 801277c:	b510      	push	{r4, lr}
 801277e:	460c      	mov	r4, r1
 8012780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012784:	f000 fcb2 	bl	80130ec <_read_r>
 8012788:	2800      	cmp	r0, #0
 801278a:	bfab      	itete	ge
 801278c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801278e:	89a3      	ldrhlt	r3, [r4, #12]
 8012790:	181b      	addge	r3, r3, r0
 8012792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012796:	bfac      	ite	ge
 8012798:	6563      	strge	r3, [r4, #84]	; 0x54
 801279a:	81a3      	strhlt	r3, [r4, #12]
 801279c:	bd10      	pop	{r4, pc}

0801279e <__swrite>:
 801279e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a2:	461f      	mov	r7, r3
 80127a4:	898b      	ldrh	r3, [r1, #12]
 80127a6:	05db      	lsls	r3, r3, #23
 80127a8:	4605      	mov	r5, r0
 80127aa:	460c      	mov	r4, r1
 80127ac:	4616      	mov	r6, r2
 80127ae:	d505      	bpl.n	80127bc <__swrite+0x1e>
 80127b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127b4:	2302      	movs	r3, #2
 80127b6:	2200      	movs	r2, #0
 80127b8:	f000 f938 	bl	8012a2c <_lseek_r>
 80127bc:	89a3      	ldrh	r3, [r4, #12]
 80127be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127c6:	81a3      	strh	r3, [r4, #12]
 80127c8:	4632      	mov	r2, r6
 80127ca:	463b      	mov	r3, r7
 80127cc:	4628      	mov	r0, r5
 80127ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127d2:	f000 b817 	b.w	8012804 <_write_r>

080127d6 <__sseek>:
 80127d6:	b510      	push	{r4, lr}
 80127d8:	460c      	mov	r4, r1
 80127da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127de:	f000 f925 	bl	8012a2c <_lseek_r>
 80127e2:	1c43      	adds	r3, r0, #1
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	bf15      	itete	ne
 80127e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80127ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80127ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80127f2:	81a3      	strheq	r3, [r4, #12]
 80127f4:	bf18      	it	ne
 80127f6:	81a3      	strhne	r3, [r4, #12]
 80127f8:	bd10      	pop	{r4, pc}

080127fa <__sclose>:
 80127fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127fe:	f000 b831 	b.w	8012864 <_close_r>
	...

08012804 <_write_r>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	4d07      	ldr	r5, [pc, #28]	; (8012824 <_write_r+0x20>)
 8012808:	4604      	mov	r4, r0
 801280a:	4608      	mov	r0, r1
 801280c:	4611      	mov	r1, r2
 801280e:	2200      	movs	r2, #0
 8012810:	602a      	str	r2, [r5, #0]
 8012812:	461a      	mov	r2, r3
 8012814:	f7ee fa5b 	bl	8000cce <_write>
 8012818:	1c43      	adds	r3, r0, #1
 801281a:	d102      	bne.n	8012822 <_write_r+0x1e>
 801281c:	682b      	ldr	r3, [r5, #0]
 801281e:	b103      	cbz	r3, 8012822 <_write_r+0x1e>
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	bd38      	pop	{r3, r4, r5, pc}
 8012824:	2000d6f8 	.word	0x2000d6f8

08012828 <__assert_func>:
 8012828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801282a:	4614      	mov	r4, r2
 801282c:	461a      	mov	r2, r3
 801282e:	4b09      	ldr	r3, [pc, #36]	; (8012854 <__assert_func+0x2c>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	4605      	mov	r5, r0
 8012834:	68d8      	ldr	r0, [r3, #12]
 8012836:	b14c      	cbz	r4, 801284c <__assert_func+0x24>
 8012838:	4b07      	ldr	r3, [pc, #28]	; (8012858 <__assert_func+0x30>)
 801283a:	9100      	str	r1, [sp, #0]
 801283c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012840:	4906      	ldr	r1, [pc, #24]	; (801285c <__assert_func+0x34>)
 8012842:	462b      	mov	r3, r5
 8012844:	f000 f8e0 	bl	8012a08 <fiprintf>
 8012848:	f000 fd22 	bl	8013290 <abort>
 801284c:	4b04      	ldr	r3, [pc, #16]	; (8012860 <__assert_func+0x38>)
 801284e:	461c      	mov	r4, r3
 8012850:	e7f3      	b.n	801283a <__assert_func+0x12>
 8012852:	bf00      	nop
 8012854:	2000001c 	.word	0x2000001c
 8012858:	08016192 	.word	0x08016192
 801285c:	0801619f 	.word	0x0801619f
 8012860:	080161cd 	.word	0x080161cd

08012864 <_close_r>:
 8012864:	b538      	push	{r3, r4, r5, lr}
 8012866:	4d06      	ldr	r5, [pc, #24]	; (8012880 <_close_r+0x1c>)
 8012868:	2300      	movs	r3, #0
 801286a:	4604      	mov	r4, r0
 801286c:	4608      	mov	r0, r1
 801286e:	602b      	str	r3, [r5, #0]
 8012870:	f7ee fa49 	bl	8000d06 <_close>
 8012874:	1c43      	adds	r3, r0, #1
 8012876:	d102      	bne.n	801287e <_close_r+0x1a>
 8012878:	682b      	ldr	r3, [r5, #0]
 801287a:	b103      	cbz	r3, 801287e <_close_r+0x1a>
 801287c:	6023      	str	r3, [r4, #0]
 801287e:	bd38      	pop	{r3, r4, r5, pc}
 8012880:	2000d6f8 	.word	0x2000d6f8

08012884 <__sflush_r>:
 8012884:	898a      	ldrh	r2, [r1, #12]
 8012886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801288a:	4605      	mov	r5, r0
 801288c:	0710      	lsls	r0, r2, #28
 801288e:	460c      	mov	r4, r1
 8012890:	d458      	bmi.n	8012944 <__sflush_r+0xc0>
 8012892:	684b      	ldr	r3, [r1, #4]
 8012894:	2b00      	cmp	r3, #0
 8012896:	dc05      	bgt.n	80128a4 <__sflush_r+0x20>
 8012898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801289a:	2b00      	cmp	r3, #0
 801289c:	dc02      	bgt.n	80128a4 <__sflush_r+0x20>
 801289e:	2000      	movs	r0, #0
 80128a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128a6:	2e00      	cmp	r6, #0
 80128a8:	d0f9      	beq.n	801289e <__sflush_r+0x1a>
 80128aa:	2300      	movs	r3, #0
 80128ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128b0:	682f      	ldr	r7, [r5, #0]
 80128b2:	602b      	str	r3, [r5, #0]
 80128b4:	d032      	beq.n	801291c <__sflush_r+0x98>
 80128b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128b8:	89a3      	ldrh	r3, [r4, #12]
 80128ba:	075a      	lsls	r2, r3, #29
 80128bc:	d505      	bpl.n	80128ca <__sflush_r+0x46>
 80128be:	6863      	ldr	r3, [r4, #4]
 80128c0:	1ac0      	subs	r0, r0, r3
 80128c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128c4:	b10b      	cbz	r3, 80128ca <__sflush_r+0x46>
 80128c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128c8:	1ac0      	subs	r0, r0, r3
 80128ca:	2300      	movs	r3, #0
 80128cc:	4602      	mov	r2, r0
 80128ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128d0:	6a21      	ldr	r1, [r4, #32]
 80128d2:	4628      	mov	r0, r5
 80128d4:	47b0      	blx	r6
 80128d6:	1c43      	adds	r3, r0, #1
 80128d8:	89a3      	ldrh	r3, [r4, #12]
 80128da:	d106      	bne.n	80128ea <__sflush_r+0x66>
 80128dc:	6829      	ldr	r1, [r5, #0]
 80128de:	291d      	cmp	r1, #29
 80128e0:	d82c      	bhi.n	801293c <__sflush_r+0xb8>
 80128e2:	4a2a      	ldr	r2, [pc, #168]	; (801298c <__sflush_r+0x108>)
 80128e4:	40ca      	lsrs	r2, r1
 80128e6:	07d6      	lsls	r6, r2, #31
 80128e8:	d528      	bpl.n	801293c <__sflush_r+0xb8>
 80128ea:	2200      	movs	r2, #0
 80128ec:	6062      	str	r2, [r4, #4]
 80128ee:	04d9      	lsls	r1, r3, #19
 80128f0:	6922      	ldr	r2, [r4, #16]
 80128f2:	6022      	str	r2, [r4, #0]
 80128f4:	d504      	bpl.n	8012900 <__sflush_r+0x7c>
 80128f6:	1c42      	adds	r2, r0, #1
 80128f8:	d101      	bne.n	80128fe <__sflush_r+0x7a>
 80128fa:	682b      	ldr	r3, [r5, #0]
 80128fc:	b903      	cbnz	r3, 8012900 <__sflush_r+0x7c>
 80128fe:	6560      	str	r0, [r4, #84]	; 0x54
 8012900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012902:	602f      	str	r7, [r5, #0]
 8012904:	2900      	cmp	r1, #0
 8012906:	d0ca      	beq.n	801289e <__sflush_r+0x1a>
 8012908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801290c:	4299      	cmp	r1, r3
 801290e:	d002      	beq.n	8012916 <__sflush_r+0x92>
 8012910:	4628      	mov	r0, r5
 8012912:	f000 f8b1 	bl	8012a78 <_free_r>
 8012916:	2000      	movs	r0, #0
 8012918:	6360      	str	r0, [r4, #52]	; 0x34
 801291a:	e7c1      	b.n	80128a0 <__sflush_r+0x1c>
 801291c:	6a21      	ldr	r1, [r4, #32]
 801291e:	2301      	movs	r3, #1
 8012920:	4628      	mov	r0, r5
 8012922:	47b0      	blx	r6
 8012924:	1c41      	adds	r1, r0, #1
 8012926:	d1c7      	bne.n	80128b8 <__sflush_r+0x34>
 8012928:	682b      	ldr	r3, [r5, #0]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d0c4      	beq.n	80128b8 <__sflush_r+0x34>
 801292e:	2b1d      	cmp	r3, #29
 8012930:	d001      	beq.n	8012936 <__sflush_r+0xb2>
 8012932:	2b16      	cmp	r3, #22
 8012934:	d101      	bne.n	801293a <__sflush_r+0xb6>
 8012936:	602f      	str	r7, [r5, #0]
 8012938:	e7b1      	b.n	801289e <__sflush_r+0x1a>
 801293a:	89a3      	ldrh	r3, [r4, #12]
 801293c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012940:	81a3      	strh	r3, [r4, #12]
 8012942:	e7ad      	b.n	80128a0 <__sflush_r+0x1c>
 8012944:	690f      	ldr	r7, [r1, #16]
 8012946:	2f00      	cmp	r7, #0
 8012948:	d0a9      	beq.n	801289e <__sflush_r+0x1a>
 801294a:	0793      	lsls	r3, r2, #30
 801294c:	680e      	ldr	r6, [r1, #0]
 801294e:	bf08      	it	eq
 8012950:	694b      	ldreq	r3, [r1, #20]
 8012952:	600f      	str	r7, [r1, #0]
 8012954:	bf18      	it	ne
 8012956:	2300      	movne	r3, #0
 8012958:	eba6 0807 	sub.w	r8, r6, r7
 801295c:	608b      	str	r3, [r1, #8]
 801295e:	f1b8 0f00 	cmp.w	r8, #0
 8012962:	dd9c      	ble.n	801289e <__sflush_r+0x1a>
 8012964:	6a21      	ldr	r1, [r4, #32]
 8012966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012968:	4643      	mov	r3, r8
 801296a:	463a      	mov	r2, r7
 801296c:	4628      	mov	r0, r5
 801296e:	47b0      	blx	r6
 8012970:	2800      	cmp	r0, #0
 8012972:	dc06      	bgt.n	8012982 <__sflush_r+0xfe>
 8012974:	89a3      	ldrh	r3, [r4, #12]
 8012976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801297a:	81a3      	strh	r3, [r4, #12]
 801297c:	f04f 30ff 	mov.w	r0, #4294967295
 8012980:	e78e      	b.n	80128a0 <__sflush_r+0x1c>
 8012982:	4407      	add	r7, r0
 8012984:	eba8 0800 	sub.w	r8, r8, r0
 8012988:	e7e9      	b.n	801295e <__sflush_r+0xda>
 801298a:	bf00      	nop
 801298c:	20400001 	.word	0x20400001

08012990 <_fflush_r>:
 8012990:	b538      	push	{r3, r4, r5, lr}
 8012992:	690b      	ldr	r3, [r1, #16]
 8012994:	4605      	mov	r5, r0
 8012996:	460c      	mov	r4, r1
 8012998:	b913      	cbnz	r3, 80129a0 <_fflush_r+0x10>
 801299a:	2500      	movs	r5, #0
 801299c:	4628      	mov	r0, r5
 801299e:	bd38      	pop	{r3, r4, r5, pc}
 80129a0:	b118      	cbz	r0, 80129aa <_fflush_r+0x1a>
 80129a2:	6983      	ldr	r3, [r0, #24]
 80129a4:	b90b      	cbnz	r3, 80129aa <_fflush_r+0x1a>
 80129a6:	f7ff fc99 	bl	80122dc <__sinit>
 80129aa:	4b14      	ldr	r3, [pc, #80]	; (80129fc <_fflush_r+0x6c>)
 80129ac:	429c      	cmp	r4, r3
 80129ae:	d11b      	bne.n	80129e8 <_fflush_r+0x58>
 80129b0:	686c      	ldr	r4, [r5, #4]
 80129b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d0ef      	beq.n	801299a <_fflush_r+0xa>
 80129ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80129bc:	07d0      	lsls	r0, r2, #31
 80129be:	d404      	bmi.n	80129ca <_fflush_r+0x3a>
 80129c0:	0599      	lsls	r1, r3, #22
 80129c2:	d402      	bmi.n	80129ca <_fflush_r+0x3a>
 80129c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129c6:	f7ff fd4c 	bl	8012462 <__retarget_lock_acquire_recursive>
 80129ca:	4628      	mov	r0, r5
 80129cc:	4621      	mov	r1, r4
 80129ce:	f7ff ff59 	bl	8012884 <__sflush_r>
 80129d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129d4:	07da      	lsls	r2, r3, #31
 80129d6:	4605      	mov	r5, r0
 80129d8:	d4e0      	bmi.n	801299c <_fflush_r+0xc>
 80129da:	89a3      	ldrh	r3, [r4, #12]
 80129dc:	059b      	lsls	r3, r3, #22
 80129de:	d4dd      	bmi.n	801299c <_fflush_r+0xc>
 80129e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129e2:	f7ff fd3f 	bl	8012464 <__retarget_lock_release_recursive>
 80129e6:	e7d9      	b.n	801299c <_fflush_r+0xc>
 80129e8:	4b05      	ldr	r3, [pc, #20]	; (8012a00 <_fflush_r+0x70>)
 80129ea:	429c      	cmp	r4, r3
 80129ec:	d101      	bne.n	80129f2 <_fflush_r+0x62>
 80129ee:	68ac      	ldr	r4, [r5, #8]
 80129f0:	e7df      	b.n	80129b2 <_fflush_r+0x22>
 80129f2:	4b04      	ldr	r3, [pc, #16]	; (8012a04 <_fflush_r+0x74>)
 80129f4:	429c      	cmp	r4, r3
 80129f6:	bf08      	it	eq
 80129f8:	68ec      	ldreq	r4, [r5, #12]
 80129fa:	e7da      	b.n	80129b2 <_fflush_r+0x22>
 80129fc:	080160dc 	.word	0x080160dc
 8012a00:	080160fc 	.word	0x080160fc
 8012a04:	080160bc 	.word	0x080160bc

08012a08 <fiprintf>:
 8012a08:	b40e      	push	{r1, r2, r3}
 8012a0a:	b503      	push	{r0, r1, lr}
 8012a0c:	4601      	mov	r1, r0
 8012a0e:	ab03      	add	r3, sp, #12
 8012a10:	4805      	ldr	r0, [pc, #20]	; (8012a28 <fiprintf+0x20>)
 8012a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a16:	6800      	ldr	r0, [r0, #0]
 8012a18:	9301      	str	r3, [sp, #4]
 8012a1a:	f000 f8a3 	bl	8012b64 <_vfiprintf_r>
 8012a1e:	b002      	add	sp, #8
 8012a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a24:	b003      	add	sp, #12
 8012a26:	4770      	bx	lr
 8012a28:	2000001c 	.word	0x2000001c

08012a2c <_lseek_r>:
 8012a2c:	b538      	push	{r3, r4, r5, lr}
 8012a2e:	4d07      	ldr	r5, [pc, #28]	; (8012a4c <_lseek_r+0x20>)
 8012a30:	4604      	mov	r4, r0
 8012a32:	4608      	mov	r0, r1
 8012a34:	4611      	mov	r1, r2
 8012a36:	2200      	movs	r2, #0
 8012a38:	602a      	str	r2, [r5, #0]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	f7ee f98a 	bl	8000d54 <_lseek>
 8012a40:	1c43      	adds	r3, r0, #1
 8012a42:	d102      	bne.n	8012a4a <_lseek_r+0x1e>
 8012a44:	682b      	ldr	r3, [r5, #0]
 8012a46:	b103      	cbz	r3, 8012a4a <_lseek_r+0x1e>
 8012a48:	6023      	str	r3, [r4, #0]
 8012a4a:	bd38      	pop	{r3, r4, r5, pc}
 8012a4c:	2000d6f8 	.word	0x2000d6f8

08012a50 <malloc>:
 8012a50:	4b02      	ldr	r3, [pc, #8]	; (8012a5c <malloc+0xc>)
 8012a52:	4601      	mov	r1, r0
 8012a54:	6818      	ldr	r0, [r3, #0]
 8012a56:	f7ff bd4d 	b.w	80124f4 <_malloc_r>
 8012a5a:	bf00      	nop
 8012a5c:	2000001c 	.word	0x2000001c

08012a60 <__malloc_lock>:
 8012a60:	4801      	ldr	r0, [pc, #4]	; (8012a68 <__malloc_lock+0x8>)
 8012a62:	f7ff bcfe 	b.w	8012462 <__retarget_lock_acquire_recursive>
 8012a66:	bf00      	nop
 8012a68:	2000d6ec 	.word	0x2000d6ec

08012a6c <__malloc_unlock>:
 8012a6c:	4801      	ldr	r0, [pc, #4]	; (8012a74 <__malloc_unlock+0x8>)
 8012a6e:	f7ff bcf9 	b.w	8012464 <__retarget_lock_release_recursive>
 8012a72:	bf00      	nop
 8012a74:	2000d6ec 	.word	0x2000d6ec

08012a78 <_free_r>:
 8012a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a7a:	2900      	cmp	r1, #0
 8012a7c:	d044      	beq.n	8012b08 <_free_r+0x90>
 8012a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a82:	9001      	str	r0, [sp, #4]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	f1a1 0404 	sub.w	r4, r1, #4
 8012a8a:	bfb8      	it	lt
 8012a8c:	18e4      	addlt	r4, r4, r3
 8012a8e:	f7ff ffe7 	bl	8012a60 <__malloc_lock>
 8012a92:	4a1e      	ldr	r2, [pc, #120]	; (8012b0c <_free_r+0x94>)
 8012a94:	9801      	ldr	r0, [sp, #4]
 8012a96:	6813      	ldr	r3, [r2, #0]
 8012a98:	b933      	cbnz	r3, 8012aa8 <_free_r+0x30>
 8012a9a:	6063      	str	r3, [r4, #4]
 8012a9c:	6014      	str	r4, [r2, #0]
 8012a9e:	b003      	add	sp, #12
 8012aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012aa4:	f7ff bfe2 	b.w	8012a6c <__malloc_unlock>
 8012aa8:	42a3      	cmp	r3, r4
 8012aaa:	d908      	bls.n	8012abe <_free_r+0x46>
 8012aac:	6825      	ldr	r5, [r4, #0]
 8012aae:	1961      	adds	r1, r4, r5
 8012ab0:	428b      	cmp	r3, r1
 8012ab2:	bf01      	itttt	eq
 8012ab4:	6819      	ldreq	r1, [r3, #0]
 8012ab6:	685b      	ldreq	r3, [r3, #4]
 8012ab8:	1949      	addeq	r1, r1, r5
 8012aba:	6021      	streq	r1, [r4, #0]
 8012abc:	e7ed      	b.n	8012a9a <_free_r+0x22>
 8012abe:	461a      	mov	r2, r3
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	b10b      	cbz	r3, 8012ac8 <_free_r+0x50>
 8012ac4:	42a3      	cmp	r3, r4
 8012ac6:	d9fa      	bls.n	8012abe <_free_r+0x46>
 8012ac8:	6811      	ldr	r1, [r2, #0]
 8012aca:	1855      	adds	r5, r2, r1
 8012acc:	42a5      	cmp	r5, r4
 8012ace:	d10b      	bne.n	8012ae8 <_free_r+0x70>
 8012ad0:	6824      	ldr	r4, [r4, #0]
 8012ad2:	4421      	add	r1, r4
 8012ad4:	1854      	adds	r4, r2, r1
 8012ad6:	42a3      	cmp	r3, r4
 8012ad8:	6011      	str	r1, [r2, #0]
 8012ada:	d1e0      	bne.n	8012a9e <_free_r+0x26>
 8012adc:	681c      	ldr	r4, [r3, #0]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	6053      	str	r3, [r2, #4]
 8012ae2:	4421      	add	r1, r4
 8012ae4:	6011      	str	r1, [r2, #0]
 8012ae6:	e7da      	b.n	8012a9e <_free_r+0x26>
 8012ae8:	d902      	bls.n	8012af0 <_free_r+0x78>
 8012aea:	230c      	movs	r3, #12
 8012aec:	6003      	str	r3, [r0, #0]
 8012aee:	e7d6      	b.n	8012a9e <_free_r+0x26>
 8012af0:	6825      	ldr	r5, [r4, #0]
 8012af2:	1961      	adds	r1, r4, r5
 8012af4:	428b      	cmp	r3, r1
 8012af6:	bf04      	itt	eq
 8012af8:	6819      	ldreq	r1, [r3, #0]
 8012afa:	685b      	ldreq	r3, [r3, #4]
 8012afc:	6063      	str	r3, [r4, #4]
 8012afe:	bf04      	itt	eq
 8012b00:	1949      	addeq	r1, r1, r5
 8012b02:	6021      	streq	r1, [r4, #0]
 8012b04:	6054      	str	r4, [r2, #4]
 8012b06:	e7ca      	b.n	8012a9e <_free_r+0x26>
 8012b08:	b003      	add	sp, #12
 8012b0a:	bd30      	pop	{r4, r5, pc}
 8012b0c:	2000d6f0 	.word	0x2000d6f0

08012b10 <__sfputc_r>:
 8012b10:	6893      	ldr	r3, [r2, #8]
 8012b12:	3b01      	subs	r3, #1
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	b410      	push	{r4}
 8012b18:	6093      	str	r3, [r2, #8]
 8012b1a:	da08      	bge.n	8012b2e <__sfputc_r+0x1e>
 8012b1c:	6994      	ldr	r4, [r2, #24]
 8012b1e:	42a3      	cmp	r3, r4
 8012b20:	db01      	blt.n	8012b26 <__sfputc_r+0x16>
 8012b22:	290a      	cmp	r1, #10
 8012b24:	d103      	bne.n	8012b2e <__sfputc_r+0x1e>
 8012b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b2a:	f000 baf1 	b.w	8013110 <__swbuf_r>
 8012b2e:	6813      	ldr	r3, [r2, #0]
 8012b30:	1c58      	adds	r0, r3, #1
 8012b32:	6010      	str	r0, [r2, #0]
 8012b34:	7019      	strb	r1, [r3, #0]
 8012b36:	4608      	mov	r0, r1
 8012b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b3c:	4770      	bx	lr

08012b3e <__sfputs_r>:
 8012b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b40:	4606      	mov	r6, r0
 8012b42:	460f      	mov	r7, r1
 8012b44:	4614      	mov	r4, r2
 8012b46:	18d5      	adds	r5, r2, r3
 8012b48:	42ac      	cmp	r4, r5
 8012b4a:	d101      	bne.n	8012b50 <__sfputs_r+0x12>
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	e007      	b.n	8012b60 <__sfputs_r+0x22>
 8012b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b54:	463a      	mov	r2, r7
 8012b56:	4630      	mov	r0, r6
 8012b58:	f7ff ffda 	bl	8012b10 <__sfputc_r>
 8012b5c:	1c43      	adds	r3, r0, #1
 8012b5e:	d1f3      	bne.n	8012b48 <__sfputs_r+0xa>
 8012b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b64 <_vfiprintf_r>:
 8012b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b68:	460d      	mov	r5, r1
 8012b6a:	b09d      	sub	sp, #116	; 0x74
 8012b6c:	4614      	mov	r4, r2
 8012b6e:	4698      	mov	r8, r3
 8012b70:	4606      	mov	r6, r0
 8012b72:	b118      	cbz	r0, 8012b7c <_vfiprintf_r+0x18>
 8012b74:	6983      	ldr	r3, [r0, #24]
 8012b76:	b90b      	cbnz	r3, 8012b7c <_vfiprintf_r+0x18>
 8012b78:	f7ff fbb0 	bl	80122dc <__sinit>
 8012b7c:	4b89      	ldr	r3, [pc, #548]	; (8012da4 <_vfiprintf_r+0x240>)
 8012b7e:	429d      	cmp	r5, r3
 8012b80:	d11b      	bne.n	8012bba <_vfiprintf_r+0x56>
 8012b82:	6875      	ldr	r5, [r6, #4]
 8012b84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b86:	07d9      	lsls	r1, r3, #31
 8012b88:	d405      	bmi.n	8012b96 <_vfiprintf_r+0x32>
 8012b8a:	89ab      	ldrh	r3, [r5, #12]
 8012b8c:	059a      	lsls	r2, r3, #22
 8012b8e:	d402      	bmi.n	8012b96 <_vfiprintf_r+0x32>
 8012b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b92:	f7ff fc66 	bl	8012462 <__retarget_lock_acquire_recursive>
 8012b96:	89ab      	ldrh	r3, [r5, #12]
 8012b98:	071b      	lsls	r3, r3, #28
 8012b9a:	d501      	bpl.n	8012ba0 <_vfiprintf_r+0x3c>
 8012b9c:	692b      	ldr	r3, [r5, #16]
 8012b9e:	b9eb      	cbnz	r3, 8012bdc <_vfiprintf_r+0x78>
 8012ba0:	4629      	mov	r1, r5
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	f000 fb06 	bl	80131b4 <__swsetup_r>
 8012ba8:	b1c0      	cbz	r0, 8012bdc <_vfiprintf_r+0x78>
 8012baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bac:	07dc      	lsls	r4, r3, #31
 8012bae:	d50e      	bpl.n	8012bce <_vfiprintf_r+0x6a>
 8012bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bb4:	b01d      	add	sp, #116	; 0x74
 8012bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bba:	4b7b      	ldr	r3, [pc, #492]	; (8012da8 <_vfiprintf_r+0x244>)
 8012bbc:	429d      	cmp	r5, r3
 8012bbe:	d101      	bne.n	8012bc4 <_vfiprintf_r+0x60>
 8012bc0:	68b5      	ldr	r5, [r6, #8]
 8012bc2:	e7df      	b.n	8012b84 <_vfiprintf_r+0x20>
 8012bc4:	4b79      	ldr	r3, [pc, #484]	; (8012dac <_vfiprintf_r+0x248>)
 8012bc6:	429d      	cmp	r5, r3
 8012bc8:	bf08      	it	eq
 8012bca:	68f5      	ldreq	r5, [r6, #12]
 8012bcc:	e7da      	b.n	8012b84 <_vfiprintf_r+0x20>
 8012bce:	89ab      	ldrh	r3, [r5, #12]
 8012bd0:	0598      	lsls	r0, r3, #22
 8012bd2:	d4ed      	bmi.n	8012bb0 <_vfiprintf_r+0x4c>
 8012bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bd6:	f7ff fc45 	bl	8012464 <__retarget_lock_release_recursive>
 8012bda:	e7e9      	b.n	8012bb0 <_vfiprintf_r+0x4c>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	9309      	str	r3, [sp, #36]	; 0x24
 8012be0:	2320      	movs	r3, #32
 8012be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012be6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bea:	2330      	movs	r3, #48	; 0x30
 8012bec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012db0 <_vfiprintf_r+0x24c>
 8012bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bf4:	f04f 0901 	mov.w	r9, #1
 8012bf8:	4623      	mov	r3, r4
 8012bfa:	469a      	mov	sl, r3
 8012bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c00:	b10a      	cbz	r2, 8012c06 <_vfiprintf_r+0xa2>
 8012c02:	2a25      	cmp	r2, #37	; 0x25
 8012c04:	d1f9      	bne.n	8012bfa <_vfiprintf_r+0x96>
 8012c06:	ebba 0b04 	subs.w	fp, sl, r4
 8012c0a:	d00b      	beq.n	8012c24 <_vfiprintf_r+0xc0>
 8012c0c:	465b      	mov	r3, fp
 8012c0e:	4622      	mov	r2, r4
 8012c10:	4629      	mov	r1, r5
 8012c12:	4630      	mov	r0, r6
 8012c14:	f7ff ff93 	bl	8012b3e <__sfputs_r>
 8012c18:	3001      	adds	r0, #1
 8012c1a:	f000 80aa 	beq.w	8012d72 <_vfiprintf_r+0x20e>
 8012c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c20:	445a      	add	r2, fp
 8012c22:	9209      	str	r2, [sp, #36]	; 0x24
 8012c24:	f89a 3000 	ldrb.w	r3, [sl]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	f000 80a2 	beq.w	8012d72 <_vfiprintf_r+0x20e>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	f04f 32ff 	mov.w	r2, #4294967295
 8012c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c38:	f10a 0a01 	add.w	sl, sl, #1
 8012c3c:	9304      	str	r3, [sp, #16]
 8012c3e:	9307      	str	r3, [sp, #28]
 8012c40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c44:	931a      	str	r3, [sp, #104]	; 0x68
 8012c46:	4654      	mov	r4, sl
 8012c48:	2205      	movs	r2, #5
 8012c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c4e:	4858      	ldr	r0, [pc, #352]	; (8012db0 <_vfiprintf_r+0x24c>)
 8012c50:	f7ed faf6 	bl	8000240 <memchr>
 8012c54:	9a04      	ldr	r2, [sp, #16]
 8012c56:	b9d8      	cbnz	r0, 8012c90 <_vfiprintf_r+0x12c>
 8012c58:	06d1      	lsls	r1, r2, #27
 8012c5a:	bf44      	itt	mi
 8012c5c:	2320      	movmi	r3, #32
 8012c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c62:	0713      	lsls	r3, r2, #28
 8012c64:	bf44      	itt	mi
 8012c66:	232b      	movmi	r3, #43	; 0x2b
 8012c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8012c70:	2b2a      	cmp	r3, #42	; 0x2a
 8012c72:	d015      	beq.n	8012ca0 <_vfiprintf_r+0x13c>
 8012c74:	9a07      	ldr	r2, [sp, #28]
 8012c76:	4654      	mov	r4, sl
 8012c78:	2000      	movs	r0, #0
 8012c7a:	f04f 0c0a 	mov.w	ip, #10
 8012c7e:	4621      	mov	r1, r4
 8012c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c84:	3b30      	subs	r3, #48	; 0x30
 8012c86:	2b09      	cmp	r3, #9
 8012c88:	d94e      	bls.n	8012d28 <_vfiprintf_r+0x1c4>
 8012c8a:	b1b0      	cbz	r0, 8012cba <_vfiprintf_r+0x156>
 8012c8c:	9207      	str	r2, [sp, #28]
 8012c8e:	e014      	b.n	8012cba <_vfiprintf_r+0x156>
 8012c90:	eba0 0308 	sub.w	r3, r0, r8
 8012c94:	fa09 f303 	lsl.w	r3, r9, r3
 8012c98:	4313      	orrs	r3, r2
 8012c9a:	9304      	str	r3, [sp, #16]
 8012c9c:	46a2      	mov	sl, r4
 8012c9e:	e7d2      	b.n	8012c46 <_vfiprintf_r+0xe2>
 8012ca0:	9b03      	ldr	r3, [sp, #12]
 8012ca2:	1d19      	adds	r1, r3, #4
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	9103      	str	r1, [sp, #12]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	bfbb      	ittet	lt
 8012cac:	425b      	neglt	r3, r3
 8012cae:	f042 0202 	orrlt.w	r2, r2, #2
 8012cb2:	9307      	strge	r3, [sp, #28]
 8012cb4:	9307      	strlt	r3, [sp, #28]
 8012cb6:	bfb8      	it	lt
 8012cb8:	9204      	strlt	r2, [sp, #16]
 8012cba:	7823      	ldrb	r3, [r4, #0]
 8012cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8012cbe:	d10c      	bne.n	8012cda <_vfiprintf_r+0x176>
 8012cc0:	7863      	ldrb	r3, [r4, #1]
 8012cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8012cc4:	d135      	bne.n	8012d32 <_vfiprintf_r+0x1ce>
 8012cc6:	9b03      	ldr	r3, [sp, #12]
 8012cc8:	1d1a      	adds	r2, r3, #4
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	9203      	str	r2, [sp, #12]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	bfb8      	it	lt
 8012cd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8012cd6:	3402      	adds	r4, #2
 8012cd8:	9305      	str	r3, [sp, #20]
 8012cda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012dc0 <_vfiprintf_r+0x25c>
 8012cde:	7821      	ldrb	r1, [r4, #0]
 8012ce0:	2203      	movs	r2, #3
 8012ce2:	4650      	mov	r0, sl
 8012ce4:	f7ed faac 	bl	8000240 <memchr>
 8012ce8:	b140      	cbz	r0, 8012cfc <_vfiprintf_r+0x198>
 8012cea:	2340      	movs	r3, #64	; 0x40
 8012cec:	eba0 000a 	sub.w	r0, r0, sl
 8012cf0:	fa03 f000 	lsl.w	r0, r3, r0
 8012cf4:	9b04      	ldr	r3, [sp, #16]
 8012cf6:	4303      	orrs	r3, r0
 8012cf8:	3401      	adds	r4, #1
 8012cfa:	9304      	str	r3, [sp, #16]
 8012cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d00:	482c      	ldr	r0, [pc, #176]	; (8012db4 <_vfiprintf_r+0x250>)
 8012d02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d06:	2206      	movs	r2, #6
 8012d08:	f7ed fa9a 	bl	8000240 <memchr>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	d03f      	beq.n	8012d90 <_vfiprintf_r+0x22c>
 8012d10:	4b29      	ldr	r3, [pc, #164]	; (8012db8 <_vfiprintf_r+0x254>)
 8012d12:	bb1b      	cbnz	r3, 8012d5c <_vfiprintf_r+0x1f8>
 8012d14:	9b03      	ldr	r3, [sp, #12]
 8012d16:	3307      	adds	r3, #7
 8012d18:	f023 0307 	bic.w	r3, r3, #7
 8012d1c:	3308      	adds	r3, #8
 8012d1e:	9303      	str	r3, [sp, #12]
 8012d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d22:	443b      	add	r3, r7
 8012d24:	9309      	str	r3, [sp, #36]	; 0x24
 8012d26:	e767      	b.n	8012bf8 <_vfiprintf_r+0x94>
 8012d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d2c:	460c      	mov	r4, r1
 8012d2e:	2001      	movs	r0, #1
 8012d30:	e7a5      	b.n	8012c7e <_vfiprintf_r+0x11a>
 8012d32:	2300      	movs	r3, #0
 8012d34:	3401      	adds	r4, #1
 8012d36:	9305      	str	r3, [sp, #20]
 8012d38:	4619      	mov	r1, r3
 8012d3a:	f04f 0c0a 	mov.w	ip, #10
 8012d3e:	4620      	mov	r0, r4
 8012d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d44:	3a30      	subs	r2, #48	; 0x30
 8012d46:	2a09      	cmp	r2, #9
 8012d48:	d903      	bls.n	8012d52 <_vfiprintf_r+0x1ee>
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d0c5      	beq.n	8012cda <_vfiprintf_r+0x176>
 8012d4e:	9105      	str	r1, [sp, #20]
 8012d50:	e7c3      	b.n	8012cda <_vfiprintf_r+0x176>
 8012d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d56:	4604      	mov	r4, r0
 8012d58:	2301      	movs	r3, #1
 8012d5a:	e7f0      	b.n	8012d3e <_vfiprintf_r+0x1da>
 8012d5c:	ab03      	add	r3, sp, #12
 8012d5e:	9300      	str	r3, [sp, #0]
 8012d60:	462a      	mov	r2, r5
 8012d62:	4b16      	ldr	r3, [pc, #88]	; (8012dbc <_vfiprintf_r+0x258>)
 8012d64:	a904      	add	r1, sp, #16
 8012d66:	4630      	mov	r0, r6
 8012d68:	f3af 8000 	nop.w
 8012d6c:	4607      	mov	r7, r0
 8012d6e:	1c78      	adds	r0, r7, #1
 8012d70:	d1d6      	bne.n	8012d20 <_vfiprintf_r+0x1bc>
 8012d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d74:	07d9      	lsls	r1, r3, #31
 8012d76:	d405      	bmi.n	8012d84 <_vfiprintf_r+0x220>
 8012d78:	89ab      	ldrh	r3, [r5, #12]
 8012d7a:	059a      	lsls	r2, r3, #22
 8012d7c:	d402      	bmi.n	8012d84 <_vfiprintf_r+0x220>
 8012d7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d80:	f7ff fb70 	bl	8012464 <__retarget_lock_release_recursive>
 8012d84:	89ab      	ldrh	r3, [r5, #12]
 8012d86:	065b      	lsls	r3, r3, #25
 8012d88:	f53f af12 	bmi.w	8012bb0 <_vfiprintf_r+0x4c>
 8012d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d8e:	e711      	b.n	8012bb4 <_vfiprintf_r+0x50>
 8012d90:	ab03      	add	r3, sp, #12
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	462a      	mov	r2, r5
 8012d96:	4b09      	ldr	r3, [pc, #36]	; (8012dbc <_vfiprintf_r+0x258>)
 8012d98:	a904      	add	r1, sp, #16
 8012d9a:	4630      	mov	r0, r6
 8012d9c:	f000 f880 	bl	8012ea0 <_printf_i>
 8012da0:	e7e4      	b.n	8012d6c <_vfiprintf_r+0x208>
 8012da2:	bf00      	nop
 8012da4:	080160dc 	.word	0x080160dc
 8012da8:	080160fc 	.word	0x080160fc
 8012dac:	080160bc 	.word	0x080160bc
 8012db0:	080161ce 	.word	0x080161ce
 8012db4:	080161d8 	.word	0x080161d8
 8012db8:	00000000 	.word	0x00000000
 8012dbc:	08012b3f 	.word	0x08012b3f
 8012dc0:	080161d4 	.word	0x080161d4

08012dc4 <_printf_common>:
 8012dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc8:	4616      	mov	r6, r2
 8012dca:	4699      	mov	r9, r3
 8012dcc:	688a      	ldr	r2, [r1, #8]
 8012dce:	690b      	ldr	r3, [r1, #16]
 8012dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012dd4:	4293      	cmp	r3, r2
 8012dd6:	bfb8      	it	lt
 8012dd8:	4613      	movlt	r3, r2
 8012dda:	6033      	str	r3, [r6, #0]
 8012ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012de0:	4607      	mov	r7, r0
 8012de2:	460c      	mov	r4, r1
 8012de4:	b10a      	cbz	r2, 8012dea <_printf_common+0x26>
 8012de6:	3301      	adds	r3, #1
 8012de8:	6033      	str	r3, [r6, #0]
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	0699      	lsls	r1, r3, #26
 8012dee:	bf42      	ittt	mi
 8012df0:	6833      	ldrmi	r3, [r6, #0]
 8012df2:	3302      	addmi	r3, #2
 8012df4:	6033      	strmi	r3, [r6, #0]
 8012df6:	6825      	ldr	r5, [r4, #0]
 8012df8:	f015 0506 	ands.w	r5, r5, #6
 8012dfc:	d106      	bne.n	8012e0c <_printf_common+0x48>
 8012dfe:	f104 0a19 	add.w	sl, r4, #25
 8012e02:	68e3      	ldr	r3, [r4, #12]
 8012e04:	6832      	ldr	r2, [r6, #0]
 8012e06:	1a9b      	subs	r3, r3, r2
 8012e08:	42ab      	cmp	r3, r5
 8012e0a:	dc26      	bgt.n	8012e5a <_printf_common+0x96>
 8012e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e10:	1e13      	subs	r3, r2, #0
 8012e12:	6822      	ldr	r2, [r4, #0]
 8012e14:	bf18      	it	ne
 8012e16:	2301      	movne	r3, #1
 8012e18:	0692      	lsls	r2, r2, #26
 8012e1a:	d42b      	bmi.n	8012e74 <_printf_common+0xb0>
 8012e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e20:	4649      	mov	r1, r9
 8012e22:	4638      	mov	r0, r7
 8012e24:	47c0      	blx	r8
 8012e26:	3001      	adds	r0, #1
 8012e28:	d01e      	beq.n	8012e68 <_printf_common+0xa4>
 8012e2a:	6823      	ldr	r3, [r4, #0]
 8012e2c:	68e5      	ldr	r5, [r4, #12]
 8012e2e:	6832      	ldr	r2, [r6, #0]
 8012e30:	f003 0306 	and.w	r3, r3, #6
 8012e34:	2b04      	cmp	r3, #4
 8012e36:	bf08      	it	eq
 8012e38:	1aad      	subeq	r5, r5, r2
 8012e3a:	68a3      	ldr	r3, [r4, #8]
 8012e3c:	6922      	ldr	r2, [r4, #16]
 8012e3e:	bf0c      	ite	eq
 8012e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e44:	2500      	movne	r5, #0
 8012e46:	4293      	cmp	r3, r2
 8012e48:	bfc4      	itt	gt
 8012e4a:	1a9b      	subgt	r3, r3, r2
 8012e4c:	18ed      	addgt	r5, r5, r3
 8012e4e:	2600      	movs	r6, #0
 8012e50:	341a      	adds	r4, #26
 8012e52:	42b5      	cmp	r5, r6
 8012e54:	d11a      	bne.n	8012e8c <_printf_common+0xc8>
 8012e56:	2000      	movs	r0, #0
 8012e58:	e008      	b.n	8012e6c <_printf_common+0xa8>
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	4652      	mov	r2, sl
 8012e5e:	4649      	mov	r1, r9
 8012e60:	4638      	mov	r0, r7
 8012e62:	47c0      	blx	r8
 8012e64:	3001      	adds	r0, #1
 8012e66:	d103      	bne.n	8012e70 <_printf_common+0xac>
 8012e68:	f04f 30ff 	mov.w	r0, #4294967295
 8012e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e70:	3501      	adds	r5, #1
 8012e72:	e7c6      	b.n	8012e02 <_printf_common+0x3e>
 8012e74:	18e1      	adds	r1, r4, r3
 8012e76:	1c5a      	adds	r2, r3, #1
 8012e78:	2030      	movs	r0, #48	; 0x30
 8012e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e7e:	4422      	add	r2, r4
 8012e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e88:	3302      	adds	r3, #2
 8012e8a:	e7c7      	b.n	8012e1c <_printf_common+0x58>
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	4622      	mov	r2, r4
 8012e90:	4649      	mov	r1, r9
 8012e92:	4638      	mov	r0, r7
 8012e94:	47c0      	blx	r8
 8012e96:	3001      	adds	r0, #1
 8012e98:	d0e6      	beq.n	8012e68 <_printf_common+0xa4>
 8012e9a:	3601      	adds	r6, #1
 8012e9c:	e7d9      	b.n	8012e52 <_printf_common+0x8e>
	...

08012ea0 <_printf_i>:
 8012ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ea4:	7e0f      	ldrb	r7, [r1, #24]
 8012ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012ea8:	2f78      	cmp	r7, #120	; 0x78
 8012eaa:	4691      	mov	r9, r2
 8012eac:	4680      	mov	r8, r0
 8012eae:	460c      	mov	r4, r1
 8012eb0:	469a      	mov	sl, r3
 8012eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012eb6:	d807      	bhi.n	8012ec8 <_printf_i+0x28>
 8012eb8:	2f62      	cmp	r7, #98	; 0x62
 8012eba:	d80a      	bhi.n	8012ed2 <_printf_i+0x32>
 8012ebc:	2f00      	cmp	r7, #0
 8012ebe:	f000 80d8 	beq.w	8013072 <_printf_i+0x1d2>
 8012ec2:	2f58      	cmp	r7, #88	; 0x58
 8012ec4:	f000 80a3 	beq.w	801300e <_printf_i+0x16e>
 8012ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ed0:	e03a      	b.n	8012f48 <_printf_i+0xa8>
 8012ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012ed6:	2b15      	cmp	r3, #21
 8012ed8:	d8f6      	bhi.n	8012ec8 <_printf_i+0x28>
 8012eda:	a101      	add	r1, pc, #4	; (adr r1, 8012ee0 <_printf_i+0x40>)
 8012edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ee0:	08012f39 	.word	0x08012f39
 8012ee4:	08012f4d 	.word	0x08012f4d
 8012ee8:	08012ec9 	.word	0x08012ec9
 8012eec:	08012ec9 	.word	0x08012ec9
 8012ef0:	08012ec9 	.word	0x08012ec9
 8012ef4:	08012ec9 	.word	0x08012ec9
 8012ef8:	08012f4d 	.word	0x08012f4d
 8012efc:	08012ec9 	.word	0x08012ec9
 8012f00:	08012ec9 	.word	0x08012ec9
 8012f04:	08012ec9 	.word	0x08012ec9
 8012f08:	08012ec9 	.word	0x08012ec9
 8012f0c:	08013059 	.word	0x08013059
 8012f10:	08012f7d 	.word	0x08012f7d
 8012f14:	0801303b 	.word	0x0801303b
 8012f18:	08012ec9 	.word	0x08012ec9
 8012f1c:	08012ec9 	.word	0x08012ec9
 8012f20:	0801307b 	.word	0x0801307b
 8012f24:	08012ec9 	.word	0x08012ec9
 8012f28:	08012f7d 	.word	0x08012f7d
 8012f2c:	08012ec9 	.word	0x08012ec9
 8012f30:	08012ec9 	.word	0x08012ec9
 8012f34:	08013043 	.word	0x08013043
 8012f38:	682b      	ldr	r3, [r5, #0]
 8012f3a:	1d1a      	adds	r2, r3, #4
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	602a      	str	r2, [r5, #0]
 8012f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f48:	2301      	movs	r3, #1
 8012f4a:	e0a3      	b.n	8013094 <_printf_i+0x1f4>
 8012f4c:	6820      	ldr	r0, [r4, #0]
 8012f4e:	6829      	ldr	r1, [r5, #0]
 8012f50:	0606      	lsls	r6, r0, #24
 8012f52:	f101 0304 	add.w	r3, r1, #4
 8012f56:	d50a      	bpl.n	8012f6e <_printf_i+0xce>
 8012f58:	680e      	ldr	r6, [r1, #0]
 8012f5a:	602b      	str	r3, [r5, #0]
 8012f5c:	2e00      	cmp	r6, #0
 8012f5e:	da03      	bge.n	8012f68 <_printf_i+0xc8>
 8012f60:	232d      	movs	r3, #45	; 0x2d
 8012f62:	4276      	negs	r6, r6
 8012f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f68:	485e      	ldr	r0, [pc, #376]	; (80130e4 <_printf_i+0x244>)
 8012f6a:	230a      	movs	r3, #10
 8012f6c:	e019      	b.n	8012fa2 <_printf_i+0x102>
 8012f6e:	680e      	ldr	r6, [r1, #0]
 8012f70:	602b      	str	r3, [r5, #0]
 8012f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012f76:	bf18      	it	ne
 8012f78:	b236      	sxthne	r6, r6
 8012f7a:	e7ef      	b.n	8012f5c <_printf_i+0xbc>
 8012f7c:	682b      	ldr	r3, [r5, #0]
 8012f7e:	6820      	ldr	r0, [r4, #0]
 8012f80:	1d19      	adds	r1, r3, #4
 8012f82:	6029      	str	r1, [r5, #0]
 8012f84:	0601      	lsls	r1, r0, #24
 8012f86:	d501      	bpl.n	8012f8c <_printf_i+0xec>
 8012f88:	681e      	ldr	r6, [r3, #0]
 8012f8a:	e002      	b.n	8012f92 <_printf_i+0xf2>
 8012f8c:	0646      	lsls	r6, r0, #25
 8012f8e:	d5fb      	bpl.n	8012f88 <_printf_i+0xe8>
 8012f90:	881e      	ldrh	r6, [r3, #0]
 8012f92:	4854      	ldr	r0, [pc, #336]	; (80130e4 <_printf_i+0x244>)
 8012f94:	2f6f      	cmp	r7, #111	; 0x6f
 8012f96:	bf0c      	ite	eq
 8012f98:	2308      	moveq	r3, #8
 8012f9a:	230a      	movne	r3, #10
 8012f9c:	2100      	movs	r1, #0
 8012f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012fa2:	6865      	ldr	r5, [r4, #4]
 8012fa4:	60a5      	str	r5, [r4, #8]
 8012fa6:	2d00      	cmp	r5, #0
 8012fa8:	bfa2      	ittt	ge
 8012faa:	6821      	ldrge	r1, [r4, #0]
 8012fac:	f021 0104 	bicge.w	r1, r1, #4
 8012fb0:	6021      	strge	r1, [r4, #0]
 8012fb2:	b90e      	cbnz	r6, 8012fb8 <_printf_i+0x118>
 8012fb4:	2d00      	cmp	r5, #0
 8012fb6:	d04d      	beq.n	8013054 <_printf_i+0x1b4>
 8012fb8:	4615      	mov	r5, r2
 8012fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8012fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8012fc2:	5dc7      	ldrb	r7, [r0, r7]
 8012fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012fc8:	4637      	mov	r7, r6
 8012fca:	42bb      	cmp	r3, r7
 8012fcc:	460e      	mov	r6, r1
 8012fce:	d9f4      	bls.n	8012fba <_printf_i+0x11a>
 8012fd0:	2b08      	cmp	r3, #8
 8012fd2:	d10b      	bne.n	8012fec <_printf_i+0x14c>
 8012fd4:	6823      	ldr	r3, [r4, #0]
 8012fd6:	07de      	lsls	r6, r3, #31
 8012fd8:	d508      	bpl.n	8012fec <_printf_i+0x14c>
 8012fda:	6923      	ldr	r3, [r4, #16]
 8012fdc:	6861      	ldr	r1, [r4, #4]
 8012fde:	4299      	cmp	r1, r3
 8012fe0:	bfde      	ittt	le
 8012fe2:	2330      	movle	r3, #48	; 0x30
 8012fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012fe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012fec:	1b52      	subs	r2, r2, r5
 8012fee:	6122      	str	r2, [r4, #16]
 8012ff0:	f8cd a000 	str.w	sl, [sp]
 8012ff4:	464b      	mov	r3, r9
 8012ff6:	aa03      	add	r2, sp, #12
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	4640      	mov	r0, r8
 8012ffc:	f7ff fee2 	bl	8012dc4 <_printf_common>
 8013000:	3001      	adds	r0, #1
 8013002:	d14c      	bne.n	801309e <_printf_i+0x1fe>
 8013004:	f04f 30ff 	mov.w	r0, #4294967295
 8013008:	b004      	add	sp, #16
 801300a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801300e:	4835      	ldr	r0, [pc, #212]	; (80130e4 <_printf_i+0x244>)
 8013010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013014:	6829      	ldr	r1, [r5, #0]
 8013016:	6823      	ldr	r3, [r4, #0]
 8013018:	f851 6b04 	ldr.w	r6, [r1], #4
 801301c:	6029      	str	r1, [r5, #0]
 801301e:	061d      	lsls	r5, r3, #24
 8013020:	d514      	bpl.n	801304c <_printf_i+0x1ac>
 8013022:	07df      	lsls	r7, r3, #31
 8013024:	bf44      	itt	mi
 8013026:	f043 0320 	orrmi.w	r3, r3, #32
 801302a:	6023      	strmi	r3, [r4, #0]
 801302c:	b91e      	cbnz	r6, 8013036 <_printf_i+0x196>
 801302e:	6823      	ldr	r3, [r4, #0]
 8013030:	f023 0320 	bic.w	r3, r3, #32
 8013034:	6023      	str	r3, [r4, #0]
 8013036:	2310      	movs	r3, #16
 8013038:	e7b0      	b.n	8012f9c <_printf_i+0xfc>
 801303a:	6823      	ldr	r3, [r4, #0]
 801303c:	f043 0320 	orr.w	r3, r3, #32
 8013040:	6023      	str	r3, [r4, #0]
 8013042:	2378      	movs	r3, #120	; 0x78
 8013044:	4828      	ldr	r0, [pc, #160]	; (80130e8 <_printf_i+0x248>)
 8013046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801304a:	e7e3      	b.n	8013014 <_printf_i+0x174>
 801304c:	0659      	lsls	r1, r3, #25
 801304e:	bf48      	it	mi
 8013050:	b2b6      	uxthmi	r6, r6
 8013052:	e7e6      	b.n	8013022 <_printf_i+0x182>
 8013054:	4615      	mov	r5, r2
 8013056:	e7bb      	b.n	8012fd0 <_printf_i+0x130>
 8013058:	682b      	ldr	r3, [r5, #0]
 801305a:	6826      	ldr	r6, [r4, #0]
 801305c:	6961      	ldr	r1, [r4, #20]
 801305e:	1d18      	adds	r0, r3, #4
 8013060:	6028      	str	r0, [r5, #0]
 8013062:	0635      	lsls	r5, r6, #24
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	d501      	bpl.n	801306c <_printf_i+0x1cc>
 8013068:	6019      	str	r1, [r3, #0]
 801306a:	e002      	b.n	8013072 <_printf_i+0x1d2>
 801306c:	0670      	lsls	r0, r6, #25
 801306e:	d5fb      	bpl.n	8013068 <_printf_i+0x1c8>
 8013070:	8019      	strh	r1, [r3, #0]
 8013072:	2300      	movs	r3, #0
 8013074:	6123      	str	r3, [r4, #16]
 8013076:	4615      	mov	r5, r2
 8013078:	e7ba      	b.n	8012ff0 <_printf_i+0x150>
 801307a:	682b      	ldr	r3, [r5, #0]
 801307c:	1d1a      	adds	r2, r3, #4
 801307e:	602a      	str	r2, [r5, #0]
 8013080:	681d      	ldr	r5, [r3, #0]
 8013082:	6862      	ldr	r2, [r4, #4]
 8013084:	2100      	movs	r1, #0
 8013086:	4628      	mov	r0, r5
 8013088:	f7ed f8da 	bl	8000240 <memchr>
 801308c:	b108      	cbz	r0, 8013092 <_printf_i+0x1f2>
 801308e:	1b40      	subs	r0, r0, r5
 8013090:	6060      	str	r0, [r4, #4]
 8013092:	6863      	ldr	r3, [r4, #4]
 8013094:	6123      	str	r3, [r4, #16]
 8013096:	2300      	movs	r3, #0
 8013098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801309c:	e7a8      	b.n	8012ff0 <_printf_i+0x150>
 801309e:	6923      	ldr	r3, [r4, #16]
 80130a0:	462a      	mov	r2, r5
 80130a2:	4649      	mov	r1, r9
 80130a4:	4640      	mov	r0, r8
 80130a6:	47d0      	blx	sl
 80130a8:	3001      	adds	r0, #1
 80130aa:	d0ab      	beq.n	8013004 <_printf_i+0x164>
 80130ac:	6823      	ldr	r3, [r4, #0]
 80130ae:	079b      	lsls	r3, r3, #30
 80130b0:	d413      	bmi.n	80130da <_printf_i+0x23a>
 80130b2:	68e0      	ldr	r0, [r4, #12]
 80130b4:	9b03      	ldr	r3, [sp, #12]
 80130b6:	4298      	cmp	r0, r3
 80130b8:	bfb8      	it	lt
 80130ba:	4618      	movlt	r0, r3
 80130bc:	e7a4      	b.n	8013008 <_printf_i+0x168>
 80130be:	2301      	movs	r3, #1
 80130c0:	4632      	mov	r2, r6
 80130c2:	4649      	mov	r1, r9
 80130c4:	4640      	mov	r0, r8
 80130c6:	47d0      	blx	sl
 80130c8:	3001      	adds	r0, #1
 80130ca:	d09b      	beq.n	8013004 <_printf_i+0x164>
 80130cc:	3501      	adds	r5, #1
 80130ce:	68e3      	ldr	r3, [r4, #12]
 80130d0:	9903      	ldr	r1, [sp, #12]
 80130d2:	1a5b      	subs	r3, r3, r1
 80130d4:	42ab      	cmp	r3, r5
 80130d6:	dcf2      	bgt.n	80130be <_printf_i+0x21e>
 80130d8:	e7eb      	b.n	80130b2 <_printf_i+0x212>
 80130da:	2500      	movs	r5, #0
 80130dc:	f104 0619 	add.w	r6, r4, #25
 80130e0:	e7f5      	b.n	80130ce <_printf_i+0x22e>
 80130e2:	bf00      	nop
 80130e4:	080161df 	.word	0x080161df
 80130e8:	080161f0 	.word	0x080161f0

080130ec <_read_r>:
 80130ec:	b538      	push	{r3, r4, r5, lr}
 80130ee:	4d07      	ldr	r5, [pc, #28]	; (801310c <_read_r+0x20>)
 80130f0:	4604      	mov	r4, r0
 80130f2:	4608      	mov	r0, r1
 80130f4:	4611      	mov	r1, r2
 80130f6:	2200      	movs	r2, #0
 80130f8:	602a      	str	r2, [r5, #0]
 80130fa:	461a      	mov	r2, r3
 80130fc:	f7ed fdca 	bl	8000c94 <_read>
 8013100:	1c43      	adds	r3, r0, #1
 8013102:	d102      	bne.n	801310a <_read_r+0x1e>
 8013104:	682b      	ldr	r3, [r5, #0]
 8013106:	b103      	cbz	r3, 801310a <_read_r+0x1e>
 8013108:	6023      	str	r3, [r4, #0]
 801310a:	bd38      	pop	{r3, r4, r5, pc}
 801310c:	2000d6f8 	.word	0x2000d6f8

08013110 <__swbuf_r>:
 8013110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013112:	460e      	mov	r6, r1
 8013114:	4614      	mov	r4, r2
 8013116:	4605      	mov	r5, r0
 8013118:	b118      	cbz	r0, 8013122 <__swbuf_r+0x12>
 801311a:	6983      	ldr	r3, [r0, #24]
 801311c:	b90b      	cbnz	r3, 8013122 <__swbuf_r+0x12>
 801311e:	f7ff f8dd 	bl	80122dc <__sinit>
 8013122:	4b21      	ldr	r3, [pc, #132]	; (80131a8 <__swbuf_r+0x98>)
 8013124:	429c      	cmp	r4, r3
 8013126:	d12b      	bne.n	8013180 <__swbuf_r+0x70>
 8013128:	686c      	ldr	r4, [r5, #4]
 801312a:	69a3      	ldr	r3, [r4, #24]
 801312c:	60a3      	str	r3, [r4, #8]
 801312e:	89a3      	ldrh	r3, [r4, #12]
 8013130:	071a      	lsls	r2, r3, #28
 8013132:	d52f      	bpl.n	8013194 <__swbuf_r+0x84>
 8013134:	6923      	ldr	r3, [r4, #16]
 8013136:	b36b      	cbz	r3, 8013194 <__swbuf_r+0x84>
 8013138:	6923      	ldr	r3, [r4, #16]
 801313a:	6820      	ldr	r0, [r4, #0]
 801313c:	1ac0      	subs	r0, r0, r3
 801313e:	6963      	ldr	r3, [r4, #20]
 8013140:	b2f6      	uxtb	r6, r6
 8013142:	4283      	cmp	r3, r0
 8013144:	4637      	mov	r7, r6
 8013146:	dc04      	bgt.n	8013152 <__swbuf_r+0x42>
 8013148:	4621      	mov	r1, r4
 801314a:	4628      	mov	r0, r5
 801314c:	f7ff fc20 	bl	8012990 <_fflush_r>
 8013150:	bb30      	cbnz	r0, 80131a0 <__swbuf_r+0x90>
 8013152:	68a3      	ldr	r3, [r4, #8]
 8013154:	3b01      	subs	r3, #1
 8013156:	60a3      	str	r3, [r4, #8]
 8013158:	6823      	ldr	r3, [r4, #0]
 801315a:	1c5a      	adds	r2, r3, #1
 801315c:	6022      	str	r2, [r4, #0]
 801315e:	701e      	strb	r6, [r3, #0]
 8013160:	6963      	ldr	r3, [r4, #20]
 8013162:	3001      	adds	r0, #1
 8013164:	4283      	cmp	r3, r0
 8013166:	d004      	beq.n	8013172 <__swbuf_r+0x62>
 8013168:	89a3      	ldrh	r3, [r4, #12]
 801316a:	07db      	lsls	r3, r3, #31
 801316c:	d506      	bpl.n	801317c <__swbuf_r+0x6c>
 801316e:	2e0a      	cmp	r6, #10
 8013170:	d104      	bne.n	801317c <__swbuf_r+0x6c>
 8013172:	4621      	mov	r1, r4
 8013174:	4628      	mov	r0, r5
 8013176:	f7ff fc0b 	bl	8012990 <_fflush_r>
 801317a:	b988      	cbnz	r0, 80131a0 <__swbuf_r+0x90>
 801317c:	4638      	mov	r0, r7
 801317e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013180:	4b0a      	ldr	r3, [pc, #40]	; (80131ac <__swbuf_r+0x9c>)
 8013182:	429c      	cmp	r4, r3
 8013184:	d101      	bne.n	801318a <__swbuf_r+0x7a>
 8013186:	68ac      	ldr	r4, [r5, #8]
 8013188:	e7cf      	b.n	801312a <__swbuf_r+0x1a>
 801318a:	4b09      	ldr	r3, [pc, #36]	; (80131b0 <__swbuf_r+0xa0>)
 801318c:	429c      	cmp	r4, r3
 801318e:	bf08      	it	eq
 8013190:	68ec      	ldreq	r4, [r5, #12]
 8013192:	e7ca      	b.n	801312a <__swbuf_r+0x1a>
 8013194:	4621      	mov	r1, r4
 8013196:	4628      	mov	r0, r5
 8013198:	f000 f80c 	bl	80131b4 <__swsetup_r>
 801319c:	2800      	cmp	r0, #0
 801319e:	d0cb      	beq.n	8013138 <__swbuf_r+0x28>
 80131a0:	f04f 37ff 	mov.w	r7, #4294967295
 80131a4:	e7ea      	b.n	801317c <__swbuf_r+0x6c>
 80131a6:	bf00      	nop
 80131a8:	080160dc 	.word	0x080160dc
 80131ac:	080160fc 	.word	0x080160fc
 80131b0:	080160bc 	.word	0x080160bc

080131b4 <__swsetup_r>:
 80131b4:	4b32      	ldr	r3, [pc, #200]	; (8013280 <__swsetup_r+0xcc>)
 80131b6:	b570      	push	{r4, r5, r6, lr}
 80131b8:	681d      	ldr	r5, [r3, #0]
 80131ba:	4606      	mov	r6, r0
 80131bc:	460c      	mov	r4, r1
 80131be:	b125      	cbz	r5, 80131ca <__swsetup_r+0x16>
 80131c0:	69ab      	ldr	r3, [r5, #24]
 80131c2:	b913      	cbnz	r3, 80131ca <__swsetup_r+0x16>
 80131c4:	4628      	mov	r0, r5
 80131c6:	f7ff f889 	bl	80122dc <__sinit>
 80131ca:	4b2e      	ldr	r3, [pc, #184]	; (8013284 <__swsetup_r+0xd0>)
 80131cc:	429c      	cmp	r4, r3
 80131ce:	d10f      	bne.n	80131f0 <__swsetup_r+0x3c>
 80131d0:	686c      	ldr	r4, [r5, #4]
 80131d2:	89a3      	ldrh	r3, [r4, #12]
 80131d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131d8:	0719      	lsls	r1, r3, #28
 80131da:	d42c      	bmi.n	8013236 <__swsetup_r+0x82>
 80131dc:	06dd      	lsls	r5, r3, #27
 80131de:	d411      	bmi.n	8013204 <__swsetup_r+0x50>
 80131e0:	2309      	movs	r3, #9
 80131e2:	6033      	str	r3, [r6, #0]
 80131e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80131e8:	81a3      	strh	r3, [r4, #12]
 80131ea:	f04f 30ff 	mov.w	r0, #4294967295
 80131ee:	e03e      	b.n	801326e <__swsetup_r+0xba>
 80131f0:	4b25      	ldr	r3, [pc, #148]	; (8013288 <__swsetup_r+0xd4>)
 80131f2:	429c      	cmp	r4, r3
 80131f4:	d101      	bne.n	80131fa <__swsetup_r+0x46>
 80131f6:	68ac      	ldr	r4, [r5, #8]
 80131f8:	e7eb      	b.n	80131d2 <__swsetup_r+0x1e>
 80131fa:	4b24      	ldr	r3, [pc, #144]	; (801328c <__swsetup_r+0xd8>)
 80131fc:	429c      	cmp	r4, r3
 80131fe:	bf08      	it	eq
 8013200:	68ec      	ldreq	r4, [r5, #12]
 8013202:	e7e6      	b.n	80131d2 <__swsetup_r+0x1e>
 8013204:	0758      	lsls	r0, r3, #29
 8013206:	d512      	bpl.n	801322e <__swsetup_r+0x7a>
 8013208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801320a:	b141      	cbz	r1, 801321e <__swsetup_r+0x6a>
 801320c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013210:	4299      	cmp	r1, r3
 8013212:	d002      	beq.n	801321a <__swsetup_r+0x66>
 8013214:	4630      	mov	r0, r6
 8013216:	f7ff fc2f 	bl	8012a78 <_free_r>
 801321a:	2300      	movs	r3, #0
 801321c:	6363      	str	r3, [r4, #52]	; 0x34
 801321e:	89a3      	ldrh	r3, [r4, #12]
 8013220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013224:	81a3      	strh	r3, [r4, #12]
 8013226:	2300      	movs	r3, #0
 8013228:	6063      	str	r3, [r4, #4]
 801322a:	6923      	ldr	r3, [r4, #16]
 801322c:	6023      	str	r3, [r4, #0]
 801322e:	89a3      	ldrh	r3, [r4, #12]
 8013230:	f043 0308 	orr.w	r3, r3, #8
 8013234:	81a3      	strh	r3, [r4, #12]
 8013236:	6923      	ldr	r3, [r4, #16]
 8013238:	b94b      	cbnz	r3, 801324e <__swsetup_r+0x9a>
 801323a:	89a3      	ldrh	r3, [r4, #12]
 801323c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013244:	d003      	beq.n	801324e <__swsetup_r+0x9a>
 8013246:	4621      	mov	r1, r4
 8013248:	4630      	mov	r0, r6
 801324a:	f000 f84d 	bl	80132e8 <__smakebuf_r>
 801324e:	89a0      	ldrh	r0, [r4, #12]
 8013250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013254:	f010 0301 	ands.w	r3, r0, #1
 8013258:	d00a      	beq.n	8013270 <__swsetup_r+0xbc>
 801325a:	2300      	movs	r3, #0
 801325c:	60a3      	str	r3, [r4, #8]
 801325e:	6963      	ldr	r3, [r4, #20]
 8013260:	425b      	negs	r3, r3
 8013262:	61a3      	str	r3, [r4, #24]
 8013264:	6923      	ldr	r3, [r4, #16]
 8013266:	b943      	cbnz	r3, 801327a <__swsetup_r+0xc6>
 8013268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801326c:	d1ba      	bne.n	80131e4 <__swsetup_r+0x30>
 801326e:	bd70      	pop	{r4, r5, r6, pc}
 8013270:	0781      	lsls	r1, r0, #30
 8013272:	bf58      	it	pl
 8013274:	6963      	ldrpl	r3, [r4, #20]
 8013276:	60a3      	str	r3, [r4, #8]
 8013278:	e7f4      	b.n	8013264 <__swsetup_r+0xb0>
 801327a:	2000      	movs	r0, #0
 801327c:	e7f7      	b.n	801326e <__swsetup_r+0xba>
 801327e:	bf00      	nop
 8013280:	2000001c 	.word	0x2000001c
 8013284:	080160dc 	.word	0x080160dc
 8013288:	080160fc 	.word	0x080160fc
 801328c:	080160bc 	.word	0x080160bc

08013290 <abort>:
 8013290:	b508      	push	{r3, lr}
 8013292:	2006      	movs	r0, #6
 8013294:	f000 f890 	bl	80133b8 <raise>
 8013298:	2001      	movs	r0, #1
 801329a:	f7ed fcf1 	bl	8000c80 <_exit>

0801329e <__swhatbuf_r>:
 801329e:	b570      	push	{r4, r5, r6, lr}
 80132a0:	460e      	mov	r6, r1
 80132a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132a6:	2900      	cmp	r1, #0
 80132a8:	b096      	sub	sp, #88	; 0x58
 80132aa:	4614      	mov	r4, r2
 80132ac:	461d      	mov	r5, r3
 80132ae:	da08      	bge.n	80132c2 <__swhatbuf_r+0x24>
 80132b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80132b4:	2200      	movs	r2, #0
 80132b6:	602a      	str	r2, [r5, #0]
 80132b8:	061a      	lsls	r2, r3, #24
 80132ba:	d410      	bmi.n	80132de <__swhatbuf_r+0x40>
 80132bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132c0:	e00e      	b.n	80132e0 <__swhatbuf_r+0x42>
 80132c2:	466a      	mov	r2, sp
 80132c4:	f000 f894 	bl	80133f0 <_fstat_r>
 80132c8:	2800      	cmp	r0, #0
 80132ca:	dbf1      	blt.n	80132b0 <__swhatbuf_r+0x12>
 80132cc:	9a01      	ldr	r2, [sp, #4]
 80132ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80132d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80132d6:	425a      	negs	r2, r3
 80132d8:	415a      	adcs	r2, r3
 80132da:	602a      	str	r2, [r5, #0]
 80132dc:	e7ee      	b.n	80132bc <__swhatbuf_r+0x1e>
 80132de:	2340      	movs	r3, #64	; 0x40
 80132e0:	2000      	movs	r0, #0
 80132e2:	6023      	str	r3, [r4, #0]
 80132e4:	b016      	add	sp, #88	; 0x58
 80132e6:	bd70      	pop	{r4, r5, r6, pc}

080132e8 <__smakebuf_r>:
 80132e8:	898b      	ldrh	r3, [r1, #12]
 80132ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80132ec:	079d      	lsls	r5, r3, #30
 80132ee:	4606      	mov	r6, r0
 80132f0:	460c      	mov	r4, r1
 80132f2:	d507      	bpl.n	8013304 <__smakebuf_r+0x1c>
 80132f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80132f8:	6023      	str	r3, [r4, #0]
 80132fa:	6123      	str	r3, [r4, #16]
 80132fc:	2301      	movs	r3, #1
 80132fe:	6163      	str	r3, [r4, #20]
 8013300:	b002      	add	sp, #8
 8013302:	bd70      	pop	{r4, r5, r6, pc}
 8013304:	ab01      	add	r3, sp, #4
 8013306:	466a      	mov	r2, sp
 8013308:	f7ff ffc9 	bl	801329e <__swhatbuf_r>
 801330c:	9900      	ldr	r1, [sp, #0]
 801330e:	4605      	mov	r5, r0
 8013310:	4630      	mov	r0, r6
 8013312:	f7ff f8ef 	bl	80124f4 <_malloc_r>
 8013316:	b948      	cbnz	r0, 801332c <__smakebuf_r+0x44>
 8013318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801331c:	059a      	lsls	r2, r3, #22
 801331e:	d4ef      	bmi.n	8013300 <__smakebuf_r+0x18>
 8013320:	f023 0303 	bic.w	r3, r3, #3
 8013324:	f043 0302 	orr.w	r3, r3, #2
 8013328:	81a3      	strh	r3, [r4, #12]
 801332a:	e7e3      	b.n	80132f4 <__smakebuf_r+0xc>
 801332c:	4b0d      	ldr	r3, [pc, #52]	; (8013364 <__smakebuf_r+0x7c>)
 801332e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013330:	89a3      	ldrh	r3, [r4, #12]
 8013332:	6020      	str	r0, [r4, #0]
 8013334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013338:	81a3      	strh	r3, [r4, #12]
 801333a:	9b00      	ldr	r3, [sp, #0]
 801333c:	6163      	str	r3, [r4, #20]
 801333e:	9b01      	ldr	r3, [sp, #4]
 8013340:	6120      	str	r0, [r4, #16]
 8013342:	b15b      	cbz	r3, 801335c <__smakebuf_r+0x74>
 8013344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013348:	4630      	mov	r0, r6
 801334a:	f000 f863 	bl	8013414 <_isatty_r>
 801334e:	b128      	cbz	r0, 801335c <__smakebuf_r+0x74>
 8013350:	89a3      	ldrh	r3, [r4, #12]
 8013352:	f023 0303 	bic.w	r3, r3, #3
 8013356:	f043 0301 	orr.w	r3, r3, #1
 801335a:	81a3      	strh	r3, [r4, #12]
 801335c:	89a0      	ldrh	r0, [r4, #12]
 801335e:	4305      	orrs	r5, r0
 8013360:	81a5      	strh	r5, [r4, #12]
 8013362:	e7cd      	b.n	8013300 <__smakebuf_r+0x18>
 8013364:	08012275 	.word	0x08012275

08013368 <_raise_r>:
 8013368:	291f      	cmp	r1, #31
 801336a:	b538      	push	{r3, r4, r5, lr}
 801336c:	4604      	mov	r4, r0
 801336e:	460d      	mov	r5, r1
 8013370:	d904      	bls.n	801337c <_raise_r+0x14>
 8013372:	2316      	movs	r3, #22
 8013374:	6003      	str	r3, [r0, #0]
 8013376:	f04f 30ff 	mov.w	r0, #4294967295
 801337a:	bd38      	pop	{r3, r4, r5, pc}
 801337c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801337e:	b112      	cbz	r2, 8013386 <_raise_r+0x1e>
 8013380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013384:	b94b      	cbnz	r3, 801339a <_raise_r+0x32>
 8013386:	4620      	mov	r0, r4
 8013388:	f000 f830 	bl	80133ec <_getpid_r>
 801338c:	462a      	mov	r2, r5
 801338e:	4601      	mov	r1, r0
 8013390:	4620      	mov	r0, r4
 8013392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013396:	f000 b817 	b.w	80133c8 <_kill_r>
 801339a:	2b01      	cmp	r3, #1
 801339c:	d00a      	beq.n	80133b4 <_raise_r+0x4c>
 801339e:	1c59      	adds	r1, r3, #1
 80133a0:	d103      	bne.n	80133aa <_raise_r+0x42>
 80133a2:	2316      	movs	r3, #22
 80133a4:	6003      	str	r3, [r0, #0]
 80133a6:	2001      	movs	r0, #1
 80133a8:	e7e7      	b.n	801337a <_raise_r+0x12>
 80133aa:	2400      	movs	r4, #0
 80133ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133b0:	4628      	mov	r0, r5
 80133b2:	4798      	blx	r3
 80133b4:	2000      	movs	r0, #0
 80133b6:	e7e0      	b.n	801337a <_raise_r+0x12>

080133b8 <raise>:
 80133b8:	4b02      	ldr	r3, [pc, #8]	; (80133c4 <raise+0xc>)
 80133ba:	4601      	mov	r1, r0
 80133bc:	6818      	ldr	r0, [r3, #0]
 80133be:	f7ff bfd3 	b.w	8013368 <_raise_r>
 80133c2:	bf00      	nop
 80133c4:	2000001c 	.word	0x2000001c

080133c8 <_kill_r>:
 80133c8:	b538      	push	{r3, r4, r5, lr}
 80133ca:	4d07      	ldr	r5, [pc, #28]	; (80133e8 <_kill_r+0x20>)
 80133cc:	2300      	movs	r3, #0
 80133ce:	4604      	mov	r4, r0
 80133d0:	4608      	mov	r0, r1
 80133d2:	4611      	mov	r1, r2
 80133d4:	602b      	str	r3, [r5, #0]
 80133d6:	f7ed fc41 	bl	8000c5c <_kill>
 80133da:	1c43      	adds	r3, r0, #1
 80133dc:	d102      	bne.n	80133e4 <_kill_r+0x1c>
 80133de:	682b      	ldr	r3, [r5, #0]
 80133e0:	b103      	cbz	r3, 80133e4 <_kill_r+0x1c>
 80133e2:	6023      	str	r3, [r4, #0]
 80133e4:	bd38      	pop	{r3, r4, r5, pc}
 80133e6:	bf00      	nop
 80133e8:	2000d6f8 	.word	0x2000d6f8

080133ec <_getpid_r>:
 80133ec:	f7ed bc2e 	b.w	8000c4c <_getpid>

080133f0 <_fstat_r>:
 80133f0:	b538      	push	{r3, r4, r5, lr}
 80133f2:	4d07      	ldr	r5, [pc, #28]	; (8013410 <_fstat_r+0x20>)
 80133f4:	2300      	movs	r3, #0
 80133f6:	4604      	mov	r4, r0
 80133f8:	4608      	mov	r0, r1
 80133fa:	4611      	mov	r1, r2
 80133fc:	602b      	str	r3, [r5, #0]
 80133fe:	f7ed fc8e 	bl	8000d1e <_fstat>
 8013402:	1c43      	adds	r3, r0, #1
 8013404:	d102      	bne.n	801340c <_fstat_r+0x1c>
 8013406:	682b      	ldr	r3, [r5, #0]
 8013408:	b103      	cbz	r3, 801340c <_fstat_r+0x1c>
 801340a:	6023      	str	r3, [r4, #0]
 801340c:	bd38      	pop	{r3, r4, r5, pc}
 801340e:	bf00      	nop
 8013410:	2000d6f8 	.word	0x2000d6f8

08013414 <_isatty_r>:
 8013414:	b538      	push	{r3, r4, r5, lr}
 8013416:	4d06      	ldr	r5, [pc, #24]	; (8013430 <_isatty_r+0x1c>)
 8013418:	2300      	movs	r3, #0
 801341a:	4604      	mov	r4, r0
 801341c:	4608      	mov	r0, r1
 801341e:	602b      	str	r3, [r5, #0]
 8013420:	f7ed fc8d 	bl	8000d3e <_isatty>
 8013424:	1c43      	adds	r3, r0, #1
 8013426:	d102      	bne.n	801342e <_isatty_r+0x1a>
 8013428:	682b      	ldr	r3, [r5, #0]
 801342a:	b103      	cbz	r3, 801342e <_isatty_r+0x1a>
 801342c:	6023      	str	r3, [r4, #0]
 801342e:	bd38      	pop	{r3, r4, r5, pc}
 8013430:	2000d6f8 	.word	0x2000d6f8

08013434 <_init>:
 8013434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013436:	bf00      	nop
 8013438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801343a:	bc08      	pop	{r3}
 801343c:	469e      	mov	lr, r3
 801343e:	4770      	bx	lr

08013440 <_fini>:
 8013440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013442:	bf00      	nop
 8013444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013446:	bc08      	pop	{r3}
 8013448:	469e      	mov	lr, r3
 801344a:	4770      	bx	lr
